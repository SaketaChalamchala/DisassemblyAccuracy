.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : C21DFF1D2D81572D01F4F5D301ABA4BE
.rdata:00000000 ; Input CRC32 : A5464CD7
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\functionListPanel.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG158775
.rdata:00000000 $SG158775:                              ; DATA XREF: FunctionListPanel::sortOrUnsort(void)+104o
.rdata:00000000                 unicode 0, <-1>,0
.rdata:00000006                 align 4
.rdata:00000008 ; const WCHAR _SG159801
.rdata:00000008 $SG159801:                              ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1BAo
.rdata:00000008                 unicode 0, <ToolbarWindow32>,0
.rdata:00000028 $SG159809       db    0                 ; DATA XREF: .rdata:$SG158474o
.rdata:00000028                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+2F2o
.rdata:00000029 unk_29          db    0                 ; DATA XREF: .rdata:$SG158476o
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C $SG159811       db    0                 ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+346o
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030 $SG158788       db    0                 ; DATA XREF: FunctionListPanel::reload(void)+FDo
.rdata:00000031                 db    0
.rdata:00000032                 db    0
.rdata:00000033                 db    0
.rdata:00000034 $SG159827       db 'SortTip',0          ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3D2o
.rdata:0000003C $SG159828       db 'FunctionList',0     ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3D7o
.rdata:00000049                 align 4
.rdata:0000004C $SG159830       db 'ReloadTip',0        ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+43Do
.rdata:00000056                 align 4
.rdata:00000058 $SG159831       db 'FunctionList',0     ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+442o
.rdata:00000065                 align 4
.rdata:00000068 ; const WCHAR _SG159833
.rdata:00000068 $SG159833:                              ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4D6o
.rdata:00000068                 unicode 0, <Edit>,0
.rdata:00000072                 align 4
.rdata:00000074 $SG150641       db  31h ; 1             ; DATA XREF: .data:_acTop_xpmo
.rdata:00000075                 db  32h ; 2
.rdata:00000076                 db  20h
.rdata:00000077                 db  31h ; 1
.rdata:00000078                 db  32h ; 2
.rdata:00000079                 db  20h
.rdata:0000007A                 db  35h ; 5
.rdata:0000007B                 db  36h ; 6
.rdata:0000007C off_7C          dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$9+3
.rdata:0000007C                                         ; DATA XREF: .rdata:$SG158475o
.rdata:00000080 $SG150642       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000B58o
.rdata:0000008C $SG150643       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000B5Co
.rdata:00000098 $SG150644       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00000B60o
.rdata:000000A4 $SG150645       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000B64o
.rdata:000000B0 $SG150646       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000B68o
.rdata:000000BC $SG150647       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000B6Co
.rdata:000000C8 $SG150648       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00000B70o
.rdata:000000D4 $SG150649       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00000B74o
.rdata:000000E0 $SG150650       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00000B78o
.rdata:000000EC $SG150651       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00000B7Co
.rdata:000000F8 $SG150652       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00000B80o
.rdata:00000104 $SG150653       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000B84o
.rdata:00000110 $SG150654       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000B88o
.rdata:0000011C $SG150655       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000B8Co
.rdata:00000128 $SG150656       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00000B90o
.rdata:00000134 $SG150657       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000B94o
.rdata:00000140 $SG150658       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000B98o
.rdata:0000014C $SG150659       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000B9Co
.rdata:00000158 $SG150660       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00000BA0o
.rdata:00000164 $SG150661       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000BA4o
.rdata:00000170 $SG150662       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000BA8o
.rdata:0000017C $SG150663       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000BACo
.rdata:00000188 $SG150664       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00000BB0o
.rdata:00000194 $SG150665       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000BB4o
.rdata:000001A0 $SG150666       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000BB8o
.rdata:000001AC $SG150667       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000BBCo
.rdata:000001B8 $SG150668       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00000BC0o
.rdata:000001C4 $SG150669       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000BC4o
.rdata:000001D0 $SG150670       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000BC8o
.rdata:000001DC $SG150671       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000BCCo
.rdata:000001E8 $SG150672       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00000BD0o
.rdata:000001F4 $SG150673       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000BD4o
.rdata:00000200 $SG150674       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000BD8o
.rdata:0000020C $SG150675       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000BDCo
.rdata:00000218 $SG150676       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00000BE0o
.rdata:00000224 $SG150677       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000BE4o
.rdata:00000230 $SG150678       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000BE8o
.rdata:0000023C $SG150679       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000BECo
.rdata:00000248 $SG150680       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00000BF0o
.rdata:00000254 $SG150681       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00000BF4o
.rdata:00000260 $SG150682       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00000BF8o
.rdata:0000026C $SG150683       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00000BFCo
.rdata:00000278 $SG150684       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00000C00o
.rdata:00000284 $SG150685       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00000C04o
.rdata:00000290 $SG150686       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00000C08o
.rdata:0000029C $SG150687       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00000C0Co
.rdata:000002A8 $SG150688       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00000C10o
.rdata:000002B4 $SG150689       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00000C14o
.rdata:000002C0 $SG150690       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00000C18o
.rdata:000002CC $SG150691       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00000C1Co
.rdata:000002D8 $SG150692       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00000C20o
.rdata:000002E4 $SG150693       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00000C24o
.rdata:000002F0 $SG150694       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00000C28o
.rdata:000002FC $SG150695       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00000C2Co
.rdata:00000308 $SG150696       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00000C30o
.rdata:00000314 $SG150697       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00000C34o
.rdata:00000320 $SG150698       db '    .+      ',0     ; DATA XREF: .data:00000C38o
.rdata:0000032D                 align 10h
.rdata:00000330 $SG150699       db '    @#$     ',0     ; DATA XREF: .data:00000C3Co
.rdata:0000033D                 align 10h
.rdata:00000340 $SG150700       db '    %&*=    ',0     ; DATA XREF: .data:00000C40o
.rdata:0000034D                 align 10h
.rdata:00000350 $SG150701       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00000C44o
.rdata:0000035D                 align 10h
.rdata:00000360 $SG150702       db '    )!~{]^  ',0     ; DATA XREF: .data:00000C48o
.rdata:0000036D                 align 10h
.rdata:00000370 $SG150703       db '    /(_:<[} ',0     ; DATA XREF: .data:00000C4Co
.rdata:0000037D                 align 10h
.rdata:00000380 $SG150704       db '    |123456 ',0     ; DATA XREF: .data:00000C50o
.rdata:0000038D                 align 10h
.rdata:00000390 $SG150705       db '    7890abc ',0     ; DATA XREF: .data:00000C54o
.rdata:0000039D                 align 10h
.rdata:000003A0 $SG150706       db '    defgh   ',0     ; DATA XREF: .data:00000C58o
.rdata:000003AD                 align 10h
.rdata:000003B0 $SG150707       db '    ijkl    ',0     ; DATA XREF: .data:00000C5Co
.rdata:000003BD                 align 10h
.rdata:000003C0 $SG150708       db '    mno     ',0     ; DATA XREF: .data:00000C60o
.rdata:000003CD                 align 10h
.rdata:000003D0 $SG150709       db '    pq      ',0     ; DATA XREF: .data:00000C64o
.rdata:000003DD                 align 10h
.rdata:000003E0 $SG150711       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:000003EB                 align 4
.rdata:000003EC $SG150712       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000C70o
.rdata:000003F8 $SG150713       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000C74o
.rdata:00000404 $SG150714       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000C78o
.rdata:00000410 $SG150715       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000C7Co
.rdata:0000041C $SG150716       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00000C80o
.rdata:00000428 $SG150717       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000C84o
.rdata:00000434 $SG150718       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000C88o
.rdata:00000440 $SG150719       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000C8Co
.rdata:0000044C $SG150720       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00000C90o
.rdata:00000458 $SG150721       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000C94o
.rdata:00000464 $SG150722       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00000C98o
.rdata:00000470 $SG150723       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000C9Co
.rdata:0000047C $SG150724       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00000CA0o
.rdata:00000488 $SG150725       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000CA4o
.rdata:00000494 $SG150726       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000CA8o
.rdata:000004A0 $SG150727       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000CACo
.rdata:000004AC $SG150728       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00000CB0o
.rdata:000004B8 $SG150729       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000CB4o
.rdata:000004C4 $SG150730       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000CB8o
.rdata:000004D0 $SG150731       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000CBCo
.rdata:000004DC $SG150732       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00000CC0o
.rdata:000004E8 $SG150733       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000CC4o
.rdata:000004F4 $SG150734       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000CC8o
.rdata:00000500 $SG150735       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000CCCo
.rdata:0000050C $SG150736       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00000CD0o
.rdata:00000518 $SG150737       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000CD4o
.rdata:00000524 $SG150738       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000CD8o
.rdata:00000530 $SG150739       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000CDCo
.rdata:0000053C $SG150740       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00000CE0o
.rdata:00000548 $SG150741       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000CE4o
.rdata:00000554 $SG150742       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000CE8o
.rdata:00000560 $SG150743       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000CECo
.rdata:0000056C $SG150744       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00000CF0o
.rdata:00000578 $SG150745       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00000CF4o
.rdata:00000584 $SG150746       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00000CF8o
.rdata:00000590 $SG150747       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00000CFCo
.rdata:0000059C $SG150748       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00000D00o
.rdata:000005A8 $SG150749       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00000D04o
.rdata:000005B4 $SG150750       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:00000D08o
.rdata:000005C0 $SG150751       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00000D0Co
.rdata:000005CC $SG150752       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00000D10o
.rdata:000005D8 $SG150753       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00000D14o
.rdata:000005E4 $SG150754       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:00000D18o
.rdata:000005F0 $SG150755       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00000D1Co
.rdata:000005FC $SG150756       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00000D20o
.rdata:00000608 $SG150757       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00000D24o
.rdata:00000614 $SG150758       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:00000D28o
.rdata:00000620 $SG150759       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00000D2Co
.rdata:0000062C $SG150760       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00000D30o
.rdata:00000638 $SG150761       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00000D34o
.rdata:00000644 $SG150762       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:00000D38o
.rdata:00000650 $SG150763       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00000D3Co
.rdata:0000065C $SG150764       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00000D40o
.rdata:00000668 $SG150765       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00000D44o
.rdata:00000674 $SG150766       db '         .+ ',0
.rdata:00000681                 align 4
.rdata:00000684 $SG150767       db '        @#$ ',0
.rdata:00000691                 align 4
.rdata:00000694 $SG150768       db '       %&*= L',0    ; DATA XREF: .data:00000D50o
.rdata:000006A2                 align 4
.rdata:000006A4 $SG150769       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00000D54o
.rdata:000006B1                 align 4
.rdata:000006B4 $SG150770       db '     )!>~{] ',0     ; DATA XREF: .data:00000D58o
.rdata:000006C1                 align 4
.rdata:000006C4 $SG150771       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00000D5Co
.rdata:000006D1                 align 4
.rdata:000006D4 $SG150772       db '    (}|1234 ',0     ; DATA XREF: .data:00000D60o
.rdata:000006E1                 align 4
.rdata:000006E4 $SG150773       db '    567890a ',0     ; DATA XREF: .data:00000D64o
.rdata:000006F1                 align 4
.rdata:000006F4 $SG150774       db '      bcdef ',0     ; DATA XREF: .data:00000D68o
.rdata:00000701                 align 4
.rdata:00000704 $SG150775       db '       ghij ',0     ; DATA XREF: .data:00000D6Co
.rdata:00000711                 align 4
.rdata:00000714 $SG150776       db '        klm ',0     ; DATA XREF: .data:00000D70o
.rdata:00000721                 align 4
.rdata:00000724 $SG150777       db '         no ',0     ; DATA XREF: .data:00000D74o
.rdata:00000731                 align 4
.rdata:00000734 $SG150779       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:0000073F                 align 10h
.rdata:00000740 $SG150780       db ' ',9,'c None',0     ; DATA XREF: .data:00000D80o
.rdata:00000749                 align 4
.rdata:0000074C $SG150781       db '.',9,'c #545254',0  ; DATA XREF: .data:00000D84o
.rdata:00000758 $SG150782       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00000D88o
.rdata:00000764 $SG150783       db '@',9,'c #646464',0  ; DATA XREF: .data:00000D8Co
.rdata:00000770 $SG150784       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00000D90o
.rdata:0000077C $SG150785       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00000D94o
.rdata:00000788 $SG150786       db '%',9,'c #747284',0  ; DATA XREF: .data:00000D98o
.rdata:00000794 $SG150787       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00000D9Co
.rdata:000007A0 $SG150788       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00000DA0o
.rdata:000007AC $SG150789       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00000DA4o
.rdata:000007B8 $SG150790       db '-',9,'c #403E58',0  ; DATA XREF: .data:00000DA8o
.rdata:000007C4 $SG150791       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00000DACo
.rdata:000007D0 $SG150792       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:00000DB0o
.rdata:000007DC $SG150793       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:00000DB4o
.rdata:000007E8 $SG150794       db 27h,9,'c #242644',0  ; DATA XREF: .data:00000DB8o
.rdata:000007F4 $SG150795       db ')',9,'c #282668',0  ; DATA XREF: .data:00000DBCo
.rdata:00000800 $SG150796       db '!',9,'c #24367C',0  ; DATA XREF: .data:00000DC0o
.rdata:0000080C $SG150797       db '~',9,'c #244A84',0  ; DATA XREF: .data:00000DC4o
.rdata:00000818 $SG150798       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00000DC8o
.rdata:00000824 $SG150799       db ']',9,'c #14162C',0  ; DATA XREF: .data:00000DCCo
.rdata:00000830 $SG150800       db '^',9,'c #142E7C',0  ; DATA XREF: .data:00000DD0o
.rdata:0000083C $SG150801       db '/',9,'c #143789',0  ; DATA XREF: .data:00000DD4o
.rdata:00000848 $SG150802       db '(',9,'c #204990',0  ; DATA XREF: .data:00000DD8o
.rdata:00000854 $SG150803       db '_',9,'c #174091',0  ; DATA XREF: .data:00000DDCo
.rdata:00000860 $SG150804       db ':',9,'c #0C0630',0  ; DATA XREF: .data:00000DE0o
.rdata:0000086C $SG150805       db '<',9,'c #24327C',0  ; DATA XREF: .data:00000DE4o
.rdata:00000878 $SG150806       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00000DE8o
.rdata:00000884 $SG150807       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00000DECo
.rdata:00000890 $SG150808       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:00000DF0o
.rdata:0000089C $SG150809       db '1',9,'c #141244',0  ; DATA XREF: .data:00000DF4o
.rdata:000008A8 $SG150810       db '2',9,'c #24428C',0  ; DATA XREF: .data:00000DF8o
.rdata:000008B4 $SG150811       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00000DFCo
.rdata:000008C0 $SG150812       db '4',9,'c #4470C4',0  ; DATA XREF: .data:00000E00o
.rdata:000008CC $SG150813       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:00000E04o
.rdata:000008D8 $SG150814       db '6',9,'c #4472CC',0  ; DATA XREF: .data:00000E08o
.rdata:000008E4 $SG150815       db '7',9,'c #24224C',0  ; DATA XREF: .data:00000E0Co
.rdata:000008F0 $SG150816       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00000E10o
.rdata:000008FC $SG150817       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00000E14o
.rdata:00000908 $SG150818       db '0',9,'c #5482DF',0  ; DATA XREF: .data:00000E18o
.rdata:00000914 $SG150819       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00000E1Co
.rdata:00000920 $SG150820       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00000E20o
.rdata:0000092C $SG150821       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00000E24o
.rdata:00000938 $SG150822       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:00000E28o
.rdata:00000944 $SG150823       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00000E2Co
.rdata:00000950 $SG150824       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00000E30o
.rdata:0000095C $SG150825       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00000E34o
.rdata:00000968 $SG150826       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:00000E38o
.rdata:00000974 $SG150827       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00000E3Co
.rdata:00000980 $SG150828       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:00000E40o
.rdata:0000098C $SG150829       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00000E44o
.rdata:00000998 $SG150830       db 'l',9,'c #243250',0  ; DATA XREF: .data:00000E48o
.rdata:000009A4 $SG150831       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00000E4Co
.rdata:000009B0 $SG150832       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:00000E50o
.rdata:000009BC $SG150833       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00000E54o
.rdata:000009C8 $SG150834       db '     .+.     ',0    ; DATA XREF: .data:00000E58o
.rdata:000009D6                 align 4
.rdata:000009D8 $SG150835       db '   @##$##@   ',0    ; DATA XREF: .data:00000E5Co
.rdata:000009E6                 align 4
.rdata:000009E8 $SG150836       db '  @%&***&%@  ',0    ; DATA XREF: .data:00000E60o
.rdata:000009F6                 align 4
.rdata:000009F8 $SG150837       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00000E64o
.rdata:00000A06                 align 4
.rdata:00000A08 $SG150838       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000A08                                         ; DATA XREF: .data:00000E68o
.rdata:00000A16                 align 4
.rdata:00000A18 $SG150839       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00000E6Co
.rdata:00000A26                 align 4
.rdata:00000A28 $SG150840       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:00000E70o
.rdata:00000A36                 align 4
.rdata:00000A38 $SG150841       db '12[3455563[21',0    ; DATA XREF: .data:00000E74o
.rdata:00000A46                 align 4
.rdata:00000A48 $SG150842       db '7_365899063_7',0    ; DATA XREF: .data:00000E78o
.rdata:00000A56                 align 4
.rdata:00000A58 $SG150843       db ' /|09abc904/ ',0    ; DATA XREF: .data:00000E7Co
.rdata:00000A66                 align 4
.rdata:00000A68 $SG150844       db ' d}8efgfb83d ',0    ; DATA XREF: .data:00000E80o
.rdata:00000A76                 align 4
.rdata:00000A78 $SG150845       db '  hiafjgakh  ',0    ; DATA XREF: .data:00000E84o
.rdata:00000A86                 align 4
.rdata:00000A88 $SG150846       db '   l~mnm~l   ',0    ; DATA XREF: .data:00000E88o
.rdata:00000A96                 align 4
.rdata:00000A98 $SG150847       db '     o@o     ',0    ; DATA XREF: .data:00000E8Co
.rdata:00000AA6                 align 4
.rdata:00000AA8 ; wchar_t _SG158458
.rdata:00000AA8 $SG158458:                              ; DATA XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+66o
.rdata:00000AA8                 unicode 0, <-1>,0
.rdata:00000AAE                 align 10h
.rdata:00000AB0 ; wchar_t _SG158474
.rdata:00000AB0 $SG158474       dd offset $SG159809     ; DATA XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *):loc_27DDo
.rdata:00000AB4 ; wchar_t _SG158475
.rdata:00000AB4 $SG158475       dd offset off_7C        ; DATA XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+75o
.rdata:00000AB8 ; wchar_t _SG158476
.rdata:00000AB8 $SG158476       dd offset unk_29        ; DATA XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+8Eo
.rdata:00000ABC ; wchar_t _SG158502
.rdata:00000ABC $SG158502       dw 0                    ; DATA XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+53o
.rdata:00000ABE                 db    0
.rdata:00000ABF                 db    0
.rdata:00000AC0 ; wchar_t _SG158504
.rdata:00000AC0 $SG158504       dw 0                    ; DATA XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+8Fo
.rdata:00000AC2                 db    0
.rdata:00000AC3                 db    0
.rdata:00000AC4 ; wchar_t _SG158510
.rdata:00000AC4 $SG158510       dw 0                    ; DATA XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+152o
.rdata:00000AC6                 db    0
.rdata:00000AC7                 db    0
.rdata:00000AC8 ; wchar_t _SG159572
.rdata:00000AC8 $SG159572:                              ; DATA XREF: FunctionListPanel::reload(void)+22Fo
.rdata:00000AC8                 unicode 0, <-1>,0
.rdata:00000ACE                 align 10h
.rdata:00000AD0 ; wchar_t _SG159581
.rdata:00000AD0 $SG159581       dw 0                    ; DATA XREF: FunctionListPanel::reload(void)+2A1o
.rdata:00000AD2                 db    0
.rdata:00000AD3                 db    0
.rdata:00000AD4 ; wchar_t _SG159583
.rdata:00000AD4 $SG159583:                              ; DATA XREF: FunctionListPanel::reload(void)+2EEo
.rdata:00000AD4                 unicode 0, <=>
.rdata:00000AD4                 dw 3Eh, 0
.rdata:00000ADA                 align 4
.rdata:00000ADC $SG159592       db    0                 ; DATA XREF: FunctionListPanel::reload(void)+46Do
.rdata:00000ADD                 db    0
.rdata:00000ADE                 db    0
.rdata:00000ADF                 db    0
.rdata:00000AE0 ; wchar_t _SG159615
.rdata:00000AE0 $SG159615:                              ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+92o
.rdata:00000AE0                 unicode 0, <functionList.xml>,0
.rdata:00000B02                 align 4
.rdata:00000B04 ; wchar_t _SG159621
.rdata:00000B04 $SG159621:                              ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+FCo
.rdata:00000B04                 unicode 0, <functionList.xml>,0
.rdata:00000B26                 align 4
.rdata:00000B28 ; wchar_t _SG159631
.rdata:00000B28 $SG159631:                              ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+254o
.rdata:00000B28                 unicode 0, <functionList.xml>,0
.rdata:00000B4A                 align 4
.rdata:00000B4C ; wchar_t _SG159724
.rdata:00000B4C $SG159724:                              ; DATA XREF: FunctionListPanel::searchFuncAndSwitchView(void)+10Bo
.rdata:00000B4C                 unicode 0, <-1>,0
.rdata:00000B52                 align 4
.rdata:00000B52 _rdata          ends
.rdata:00000B52
.data:00000B54 ; ===========================================================================
.data:00000B54
.data:00000B54 ; Segment type: Pure data
.data:00000B54 ; Segment permissions: Read/Write
.data:00000B54 ; Segment alignment 'qword' can not be represented in assembly
.data:00000B54 _data           segment para public 'DATA' use32
.data:00000B54                 assume cs:_data
.data:00000B54                 ;org 0B54h
.data:00000B54 _acTop_xpm      dd offset $SG150641
.data:00000B58                 dd offset $SG150642     ; " \tc #FFFFFF"
.data:00000B5C                 dd offset $SG150643     ; ".\tc #8AB2E9"
.data:00000B60                 dd offset $SG150644     ; "+\tc #CCDCF6"
.data:00000B64                 dd offset $SG150645     ; "@\tc #80ABEA"
.data:00000B68                 dd offset $SG150646     ; "#\tc #7DA9E8"
.data:00000B6C                 dd offset $SG150647     ; "$\tc #C7DAF3"
.data:00000B70                 dd offset $SG150648     ; "%\tc #79A7E6"
.data:00000B74                 dd offset $SG150649     ; "&\tc #ADC8EF"
.data:00000B78                 dd offset $SG150650     ; "*\tc #87B0E8"
.data:00000B7C                 dd offset $SG150651     ; "=\tc #BBD2F0"
.data:00000B80                 dd offset $SG150652     ; "-\tc #6EA0E2"
.data:00000B84                 dd offset $SG150653     ; ";\tc #A8C7EE"
.data:00000B88                 dd offset $SG150654     ; ">\tc #A3C2ED"
.data:00000B8C                 dd offset $SG150655     ; ",\tc #75A4E3"
.data:00000B90                 dd offset $SG150656     ; "'\tc #A7C4EB"
.data:00000B94                 dd offset $SG150657     ; ")\tc #6297E1"
.data:00000B98                 dd offset $SG150658     ; "!\tc #A1C1EC"
.data:00000B9C                 dd offset $SG150659     ; "~\tc #92B7E8"
.data:00000BA0                 dd offset $SG150660     ; "{\tc #99BBE9"
.data:00000BA4                 dd offset $SG150661     ; "]\tc #6197DD"
.data:00000BA8                 dd offset $SG150662     ; "^\tc #96B9E6"
.data:00000BAC                 dd offset $SG150663     ; "/\tc #538EDB"
.data:00000BB0                 dd offset $SG150664     ; "(\tc #99BBEA"
.data:00000BB4                 dd offset $SG150665     ; "_\tc #80AAE3"
.data:00000BB8                 dd offset $SG150666     ; ":\tc #81ABE3"
.data:00000BBC                 dd offset $SG150667     ; "<\tc #8AB1E4"
.data:00000BC0                 dd offset $SG150668     ; "[\tc #4B88D6"
.data:00000BC4                 dd offset $SG150669     ; "}\tc #4882D1"
.data:00000BC8                 dd offset $SG150670     ; "|\tc #4384D6"
.data:00000BCC                 dd offset $SG150671     ; "1\tc #90B5E7"
.data:00000BD0                 dd offset $SG150672     ; "2\tc #74A3E0"
.data:00000BD4                 dd offset $SG150673     ; "3\tc #77A4E0"
.data:00000BD8                 dd offset $SG150674     ; "4\tc #81ABE2"
.data:00000BDC                 dd offset $SG150675     ; "5\tc #437FD3"
.data:00000BE0                 dd offset $SG150676     ; "6\tc #7FA2DF"
.data:00000BE4                 dd offset $SG150677     ; "7\tc #3577D2"
.data:00000BE8                 dd offset $SG150678     ; "8\tc #87AFE4"
.data:00000BEC                 dd offset $SG150679     ; "9\tc #72A1DF"
.data:00000BF0                 dd offset $SG150680     ; "0\tc #7CA9E1"
.data:00000BF4                 dd offset $SG150681     ; "a\tc #3F7AD0"
.data:00000BF8                 dd offset $SG150682     ; "b\tc #85A4DE"
.data:00000BFC                 dd offset $SG150683     ; "c\tc #FBFCFE"
.data:00000C00                 dd offset $SG150684     ; "d\tc #236ECD"
.data:00000C04                 dd offset $SG150685     ; "e\tc #7EA8E1"
.data:00000C08                 dd offset $SG150686     ; "f\tc #79A6E0"
.data:00000C0C                 dd offset $SG150687     ; "g\tc #3D77D0"
.data:00000C10                 dd offset $SG150688     ; "h\tc #87A4DC"
.data:00000C14                 dd offset $SG150689     ; "i\tc #1A62C9"
.data:00000C18                 dd offset $SG150690     ; "j\tc #75A3DF"
.data:00000C1C                 dd offset $SG150691     ; "k\tc #3C74CF"
.data:00000C20                 dd offset $SG150692     ; "l\tc #8DA6DE"
.data:00000C24                 dd offset $SG150693     ; "m\tc #1859C4"
.data:00000C28                 dd offset $SG150694     ; "n\tc #3B71CC"
.data:00000C2C                 dd offset $SG150695     ; "o\tc #8EA5DD"
.data:00000C30                 dd offset $SG150696     ; "p\tc #164EC0"
.data:00000C34                 dd offset $SG150697     ; "q\tc #92A7DD"
.data:00000C38                 dd offset $SG150698     ; "    .+      "
.data:00000C3C                 dd offset $SG150699     ; "    @#$     "
.data:00000C40                 dd offset $SG150700     ; "    %&*=    "
.data:00000C44                 dd offset $SG150701     ; "    -;>,'   "
.data:00000C48                 dd offset $SG150702     ; "    )!~{]^  "
.data:00000C4C                 dd offset $SG150703     ; "    /(_:<[} "
.data:00000C50                 dd offset $SG150704     ; "    |123456 "
.data:00000C54                 dd offset $SG150705     ; "    7890abc "
.data:00000C58                 dd offset $SG150706     ; "    defgh   "
.data:00000C5C                 dd offset $SG150707     ; "    ijkl    "
.data:00000C60                 dd offset $SG150708     ; "    mno     "
.data:00000C64                 dd offset $SG150709     ; "    pq      "
.data:00000C68                 db    0
.data:00000C69                 db    0
.data:00000C6A                 db    0
.data:00000C6B                 db    0
.data:00000C6C _acBottom_xpm   dd offset $SG150711     ; "12 12 54 1"
.data:00000C70                 dd offset $SG150712     ; " \tc #FFFFFF"
.data:00000C74                 dd offset $SG150713     ; ".\tc #C4D7F3"
.data:00000C78                 dd offset $SG150714     ; "+\tc #72A1E3"
.data:00000C7C                 dd offset $SG150715     ; "@\tc #C1D6F2"
.data:00000C80                 dd offset $SG150716     ; "#\tc #6397E1"
.data:00000C84                 dd offset $SG150717     ; "$\tc #5990DD"
.data:00000C88                 dd offset $SG150718     ; "%\tc #BBD2F0"
.data:00000C8C                 dd offset $SG150719     ; "&\tc #7AA6E5"
.data:00000C90                 dd offset $SG150720     ; "*\tc #9ABDEA"
.data:00000C94                 dd offset $SG150721     ; "=\tc #4A87D9"
.data:00000C98                 dd offset $SG150722     ; "-\tc #B1CAEE"
.data:00000C9C                 dd offset $SG150723     ; ";\tc #75A4E3"
.data:00000CA0                 dd offset $SG150724     ; ">\tc #99BBE9"
.data:00000CA4                 dd offset $SG150725     ; ",\tc #95B9E8"
.data:00000CA8                 dd offset $SG150726     ; "'\tc #3A7CD4"
.data:00000CAC                 dd offset $SG150727     ; ")\tc #A9C6EC"
.data:00000CB0                 dd offset $SG150728     ; "!\tc #71A0E0"
.data:00000CB4                 dd offset $SG150729     ; "~\tc #86AFE5"
.data:00000CB8                 dd offset $SG150730     ; "{\tc #8DB2E6"
.data:00000CBC                 dd offset $SG150731     ; "]\tc #2A72CF"
.data:00000CC0                 dd offset $SG150732     ; "^\tc #73A0E0"
.data:00000CC4                 dd offset $SG150733     ; "/\tc #6B9DE0"
.data:00000CC8                 dd offset $SG150734     ; "(\tc #95B8E8"
.data:00000CCC                 dd offset $SG150735     ; "_\tc #81ABE3"
.data:00000CD0                 dd offset $SG150736     ; ":\tc #72A1DF"
.data:00000CD4                 dd offset $SG150737     ; "<\tc #83ADE3"
.data:00000CD8                 dd offset $SG150738     ; "[\tc #1B65C9"
.data:00000CDC                 dd offset $SG150739     ; "}\tc #5F95DC"
.data:00000CE0                 dd offset $SG150740     ; "|\tc #8BB3E5"
.data:00000CE4                 dd offset $SG150741     ; "1\tc #77A4E0"
.data:00000CE8                 dd offset $SG150742     ; "2\tc #679ADC"
.data:00000CEC                 dd offset $SG150743     ; "3\tc #7AA6E1"
.data:00000CF0                 dd offset $SG150744     ; "4\tc #195CC6"
.data:00000CF4                 dd offset $SG150745     ; "5\tc #FCFDFE"
.data:00000CF8                 dd offset $SG150746     ; "6\tc #8DB2E4"
.data:00000CFC                 dd offset $SG150747     ; "7\tc #4885D6"
.data:00000D00                 dd offset $SG150748     ; "8\tc #7CA9E1"
.data:00000D04                 dd offset $SG150749     ; "9\tc #6698DB"
.data:00000D08                 dd offset $SG150750     ; "0\tc #71A1DE"
.data:00000D0C                 dd offset $SG150751     ; "a\tc #1752C0"
.data:00000D10                 dd offset $SG150752     ; "b\tc #88ABE0"
.data:00000D14                 dd offset $SG150753     ; "c\tc #3D77D0"
.data:00000D18                 dd offset $SG150754     ; "d\tc #6E9FDD"
.data:00000D1C                 dd offset $SG150755     ; "e\tc #699BDC"
.data:00000D20                 dd offset $SG150756     ; "f\tc #1547BD"
.data:00000D24                 dd offset $SG150757     ; "g\tc #8DA6DE"
.data:00000D28                 dd offset $SG150758     ; "h\tc #376BC9"
.data:00000D2C                 dd offset $SG150759     ; "i\tc #6295DA"
.data:00000D30                 dd offset $SG150760     ; "j\tc #1440B9"
.data:00000D34                 dd offset $SG150761     ; "k\tc #8DA0DB"
.data:00000D38                 dd offset $SG150762     ; "l\tc #315FC4"
.data:00000D3C                 dd offset $SG150763     ; "m\tc #1339B7"
.data:00000D40                 dd offset $SG150764     ; "n\tc #909FDA"
.data:00000D44                 dd offset $SG150765     ; "o\tc #1233B4"
.data:00000D48                 db  74h ; t OFF32 SEGDEF [_rdata,674]
.data:00000D49                 db    6
.data:00000D4A                 db    0
.data:00000D4B ; struct HMENU__ hMenu
.data:00000D4B hMenu           HMENU__ <68400h>        ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4B1o
.data:00000D4F                 db    0
.data:00000D50                 dd offset $SG150768     ; "       %&*= L"
.data:00000D54                 dd offset $SG150769     ; "      -;>,' "
.data:00000D58                 dd offset $SG150770     ; "     )!>~{] "
.data:00000D5C                 dd offset $SG150771     ; "    ^/(_:<[ "
.data:00000D60                 dd offset $SG150772     ; "    (}|1234 "
.data:00000D64                 dd offset $SG150773     ; "    567890a "
.data:00000D68                 dd offset $SG150774     ; "      bcdef "
.data:00000D6C                 dd offset $SG150775     ; "       ghij "
.data:00000D70                 dd offset $SG150776     ; "        klm "
.data:00000D74                 dd offset $SG150777     ; "         no "
.data:00000D78                 db    0
.data:00000D79                 db    0
.data:00000D7A                 db    0
.data:00000D7B                 db    0
.data:00000D7C _bookmark_xpm   dd offset $SG150779     ; "13 14 54 1"
.data:00000D80                 dd offset $SG150780     ; " \tc None"
.data:00000D84                 dd offset $SG150781     ; ".\tc #545254"
.data:00000D88                 dd offset $SG150782     ; "+\tc #3C3E3C"
.data:00000D8C                 dd offset $SG150783     ; "@\tc #646464"
.data:00000D90                 dd offset $SG150784     ; "#\tc #A4A4A4"
.data:00000D94                 dd offset $SG150785     ; "$\tc #B7B8B7"
.data:00000D98                 dd offset $SG150786     ; "%\tc #747284"
.data:00000D9C                 dd offset $SG150787     ; "&\tc #B4B2C4"
.data:00000DA0                 dd offset $SG150788     ; "*\tc #DCD7E4"
.data:00000DA4                 dd offset $SG150789     ; "=\tc #1C1A1C"
.data:00000DA8                 dd offset $SG150790     ; "-\tc #403E58"
.data:00000DAC                 dd offset $SG150791     ; ";\tc #5C5A8C"
.data:00000DB0                 dd offset $SG150792     ; ">\tc #7C7EAC"
.data:00000DB4                 dd offset $SG150793     ; ",\tc #7C8EBC"
.data:00000DB8                 dd offset $SG150794     ; "'\tc #242644"
.data:00000DBC                 dd offset $SG150795     ; ")\tc #282668"
.data:00000DC0                 dd offset $SG150796     ; "!\tc #24367C"
.data:00000DC4                 dd offset $SG150797     ; "~\tc #244A84"
.data:00000DC8                 dd offset $SG150798     ; "{\tc #2C5098"
.data:00000DCC                 dd offset $SG150799     ; "]\tc #14162C"
.data:00000DD0                 dd offset $SG150800     ; "^\tc #142E7C"
.data:00000DD4                 dd offset $SG150801     ; "/\tc #143789"
.data:00000DD8                 dd offset $SG150802     ; "(\tc #204990"
.data:00000DDC                 dd offset $SG150803     ; "_\tc #174091"
.data:00000DE0                 dd offset $SG150804     ; ":\tc #0C0630"
.data:00000DE4                 dd offset $SG150805     ; "<\tc #24327C"
.data:00000DE8                 dd offset $SG150806     ; "[\tc #2450A0"
.data:00000DEC                 dd offset $SG150807     ; "}\tc #345DB4"
.data:00000DF0                 dd offset $SG150808     ; "|\tc #3C68B8"
.data:00000DF4                 dd offset $SG150809     ; "1\tc #141244"
.data:00000DF8                 dd offset $SG150810     ; "2\tc #24428C"
.data:00000DFC                 dd offset $SG150811     ; "3\tc #3462B9"
.data:00000E00                 dd offset $SG150812     ; "4\tc #4470C4"
.data:00000E04                 dd offset $SG150813     ; "5\tc #4C7FD6"
.data:00000E08                 dd offset $SG150814     ; "6\tc #4472CC"
.data:00000E0C                 dd offset $SG150815     ; "7\tc #24224C"
.data:00000E10                 dd offset $SG150816     ; "8\tc #5C8DEC"
.data:00000E14                 dd offset $SG150817     ; "9\tc #5C94F6"
.data:00000E18                 dd offset $SG150818     ; "0\tc #5482DF"
.data:00000E1C                 dd offset $SG150819     ; "a\tc #619DF7"
.data:00000E20                 dd offset $SG150820     ; "b\tc #6CA6FC"
.data:00000E24                 dd offset $SG150821     ; "c\tc #64A2FC"
.data:00000E28                 dd offset $SG150822     ; "d\tc #1C2E5C"
.data:00000E2C                 dd offset $SG150823     ; "e\tc #6CA2FC"
.data:00000E30                 dd offset $SG150824     ; "f\tc #74B2FC"
.data:00000E34                 dd offset $SG150825     ; "g\tc #7CB8FC"
.data:00000E38                 dd offset $SG150826     ; "h\tc #1C3264"
.data:00000E3C                 dd offset $SG150827     ; "i\tc #346AD4"
.data:00000E40                 dd offset $SG150828     ; "j\tc #7CBEFC"
.data:00000E44                 dd offset $SG150829     ; "k\tc #3C72DC"
.data:00000E48                 dd offset $SG150830     ; "l\tc #243250"
.data:00000E4C                 dd offset $SG150831     ; "m\tc #346AB4"
.data:00000E50                 dd offset $SG150832     ; "n\tc #3C82DC"
.data:00000E54                 dd offset $SG150833     ; "o\tc #6C6A6C"
.data:00000E58                 dd offset $SG150834     ; "     .+.     "
.data:00000E5C                 dd offset $SG150835     ; "   @##$##@   "
.data:00000E60                 dd offset $SG150836     ; "  @%&***&%@  "
.data:00000E64                 dd offset $SG150837     ; " =-;>,,,>;-= "
.data:00000E68                 dd offset $SG150838     ; " ')!~{{{~!)' "
.data:00000E6C                 dd offset $SG150839     ; "])^/({{{(_^)]"
.data:00000E70                 dd offset $SG150840     ; ":<_[}|||}[_<:"
.data:00000E74                 dd offset $SG150841     ; "12[3455563[21"
.data:00000E78                 dd offset $SG150842     ; "7_365899063_7"
.data:00000E7C                 dd offset $SG150843     ; " /|09abc904/ "
.data:00000E80                 dd offset $SG150844     ; " d}8efgfb83d "
.data:00000E84                 dd offset $SG150845     ; "  hiafjgakh  "
.data:00000E88                 dd offset $SG150846     ; "   l~mnm~l   "
.data:00000E8C                 dd offset $SG150847     ; "     o@o     "
.data:00000E8C _data           ends
.data:00000E8C
.bss:00000E90 ; ===========================================================================
.bss:00000E90
.bss:00000E90 ; Segment type: Uninitialized
.bss:00000E90 ; Segment permissions: Read/Write
.bss:00000E90 _bss            segment dword public 'BSS' use32
.bss:00000E90                 assume cs:_bss
.bss:00000E90                 ;org 0E90h
.bss:00000E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000E90 _oldFunclstToolbarProc dd ?             ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1E1w
.bss:00000E90                                         ; funclstToolbarProc(HWND__ *,uint,uint,long)+45r
.bss:00000E94 __Tuple_alloc   db    ? ;
.bss:00000E95 ; std::_Ignore ignore
.bss:00000E95 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00000E96 _allocator_arg  db    ? ;
.bss:00000E97 _piecewise_construct db    ? ;
.bss:00000E97 _bss            ends
.bss:00000E97
.text$mn:00000E98 ; ===========================================================================
.text$mn:00000E98
.text$mn:00000E98 ; Segment type: Pure code
.text$mn:00000E98 ; Segment permissions: Read/Execute
.text$mn:00000E98 _text$mn        segment para public 'CODE' use32
.text$mn:00000E98                 assume cs:_text$mn
.text$mn:00000E98                 ;org 0E98h
.text$mn:00000E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000E98
.text$mn:00000E98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E98
.text$mn:00000E98 ; Attributes: bp-based frame
.text$mn:00000E98
.text$mn:00000E98 ; void __thiscall FunctionListPanel::init(FunctionListPanel *this, HINSTANCE hModule, HWND, struct ScintillaEditView **)
.text$mn:00000E98                 public ?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z
.text$mn:00000E98 ?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z proc near
.text$mn:00000E98
.text$mn:00000E98 var_13C         = dword ptr -13Ch
.text$mn:00000E98 var_138         = dword ptr -138h
.text$mn:00000E98 var_134         = dword ptr -134h
.text$mn:00000E98 var_130         = dword ptr -130h
.text$mn:00000E98 var_12C         = dword ptr -12Ch
.text$mn:00000E98 var_128         = dword ptr -128h
.text$mn:00000E98 var_124         = dword ptr -124h
.text$mn:00000E98 var_120         = dword ptr -120h
.text$mn:00000E98 var_11C         = dword ptr -11Ch
.text$mn:00000E98 var_118         = dword ptr -118h
.text$mn:00000E98 var_111         = byte ptr -111h
.text$mn:00000E98 var_110         = byte ptr -110h
.text$mn:00000E98 var_10F         = byte ptr -10Fh
.text$mn:00000E98 var_10E         = byte ptr -10Eh
.text$mn:00000E98 var_10D         = byte ptr -10Dh
.text$mn:00000E98 var_10C         = byte ptr -10Ch
.text$mn:00000E98 var_F0          = byte ptr -0F0h
.text$mn:00000E98 var_D4          = byte ptr -0D4h
.text$mn:00000E98 var_B8          = byte ptr -0B8h
.text$mn:00000E98 var_9C          = byte ptr -9Ch
.text$mn:00000E98 var_80          = byte ptr -80h
.text$mn:00000E98 var_64          = byte ptr -64h
.text$mn:00000E98 var_48          = byte ptr -48h
.text$mn:00000E98 var_2C          = byte ptr -2Ch
.text$mn:00000E98 var_10          = dword ptr -10h
.text$mn:00000E98 var_C           = dword ptr -0Ch
.text$mn:00000E98 var_4           = dword ptr -4
.text$mn:00000E98 hModule         = dword ptr  8
.text$mn:00000E98 arg_4           = dword ptr  0Ch
.text$mn:00000E98 arg_8           = dword ptr  10h
.text$mn:00000E98
.text$mn:00000E98                 push    ebp
.text$mn:00000E99                 mov     ebp, esp
.text$mn:00000E9B                 push    0FFFFFFFFh
.text$mn:00000E9D                 push    offset __ehhandler$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z
.text$mn:00000EA2                 mov     eax, large fs:0
.text$mn:00000EA8                 push    eax
.text$mn:00000EA9                 sub     esp, 130h
.text$mn:00000EAF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000EB4                 xor     eax, ebp
.text$mn:00000EB6                 mov     [ebp+var_10], eax
.text$mn:00000EB9                 push    eax
.text$mn:00000EBA                 lea     eax, [ebp+var_C]
.text$mn:00000EBD                 mov     large fs:0, eax
.text$mn:00000EC3                 mov     [ebp+var_118], ecx
.text$mn:00000EC9                 mov     eax, [ebp+arg_4]
.text$mn:00000ECC                 push    eax             ; HWND
.text$mn:00000ECD                 mov     ecx, [ebp+hModule]
.text$mn:00000ED0                 push    ecx             ; hModule
.text$mn:00000ED1                 mov     ecx, [ebp+var_118] ; this
.text$mn:00000ED7                 call    ?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)
.text$mn:00000EDC                 mov     edx, [ebp+var_118]
.text$mn:00000EE2                 mov     eax, [ebp+arg_8]
.text$mn:00000EE5                 mov     [edx+130h], eax
.text$mn:00000EEB                 mov     [ebp+var_10D], 0
.text$mn:00000EF2                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000EF7                 mov     ecx, eax        ; this
.text$mn:00000EF9                 call    ?isLocal@NppParameters@@QBE_NXZ ; NppParameters::isLocal(void)
.text$mn:00000EFE                 mov     [ebp+var_10F], al
.text$mn:00000F04                 movzx   ecx, [ebp+var_10F]
.text$mn:00000F0B                 test    ecx, ecx
.text$mn:00000F0D                 jnz     loc_10D5
.text$mn:00000F13                 lea     edx, [ebp+var_2C]
.text$mn:00000F16                 push    edx
.text$mn:00000F17                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000F1C                 mov     ecx, eax
.text$mn:00000F1E                 call    ?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getUserPath(void)
.text$mn:00000F23                 mov     [ebp+var_4], 0
.text$mn:00000F2A                 push    offset $SG159615 ; "functionList.xml"
.text$mn:00000F2F                 lea     ecx, [ebp+var_80]
.text$mn:00000F32                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000F37                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000F3B                 lea     eax, [ebp+var_80]
.text$mn:00000F3E                 push    eax
.text$mn:00000F3F                 lea     ecx, [ebp+var_2C]
.text$mn:00000F42                 push    ecx
.text$mn:00000F43                 lea     edx, [ebp+var_10C]
.text$mn:00000F49                 push    edx
.text$mn:00000F4A                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000F4F                 add     esp, 0Ch
.text$mn:00000F52                 lea     ecx, [ebp+var_10C]
.text$mn:00000F58                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000F5D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000F61                 lea     ecx, [ebp+var_80]
.text$mn:00000F64                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000F69                 lea     ecx, [ebp+var_2C]
.text$mn:00000F6C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000F71                 push    eax             ; pszPath
.text$mn:00000F72                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00000F78                 test    eax, eax
.text$mn:00000F7A                 jnz     loc_106C
.text$mn:00000F80                 lea     eax, [ebp+var_48]
.text$mn:00000F83                 push    eax
.text$mn:00000F84                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000F89                 mov     ecx, eax
.text$mn:00000F8B                 call    ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getNppPath(void)
.text$mn:00000F90                 mov     byte ptr [ebp+var_4], 2
.text$mn:00000F94                 push    offset $SG159621 ; "functionList.xml"
.text$mn:00000F99                 lea     ecx, [ebp+var_B8]
.text$mn:00000F9F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000FA4                 mov     byte ptr [ebp+var_4], 3
.text$mn:00000FA8                 lea     ecx, [ebp+var_B8]
.text$mn:00000FAE                 push    ecx
.text$mn:00000FAF                 lea     edx, [ebp+var_48]
.text$mn:00000FB2                 push    edx
.text$mn:00000FB3                 lea     eax, [ebp+var_D4]
.text$mn:00000FB9                 push    eax
.text$mn:00000FBA                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000FBF                 add     esp, 0Ch
.text$mn:00000FC2                 lea     ecx, [ebp+var_D4]
.text$mn:00000FC8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000FCD                 mov     byte ptr [ebp+var_4], 2
.text$mn:00000FD1                 lea     ecx, [ebp+var_B8]
.text$mn:00000FD7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000FDC                 lea     ecx, [ebp+var_48]
.text$mn:00000FDF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000FE4                 push    eax             ; pszPath
.text$mn:00000FE5                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00000FEB                 test    eax, eax
.text$mn:00000FED                 jz      short loc_105E
.text$mn:00000FEF                 push    1               ; bFailIfExists
.text$mn:00000FF1                 lea     ecx, [ebp+var_2C]
.text$mn:00000FF4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000FF9                 push    eax             ; lpNewFileName
.text$mn:00000FFA                 lea     ecx, [ebp+var_48]
.text$mn:00000FFD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001002                 push    eax             ; lpExistingFileName
.text$mn:00001003                 call    dword ptr ds:__imp__CopyFileW@12 ; CopyFileW(x,x,x)
.text$mn:00001009                 mov     ecx, [ebp+arg_8]
.text$mn:0000100C                 push    ecx
.text$mn:0000100D                 sub     esp, 1Ch
.text$mn:00001010                 mov     ecx, esp
.text$mn:00001012                 mov     [ebp+var_12C], esp
.text$mn:00001018                 lea     edx, [ebp+var_2C]
.text$mn:0000101B                 push    edx
.text$mn:0000101C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001021                 mov     [ebp+var_120], eax
.text$mn:00001027                 mov     eax, [ebp+var_120]
.text$mn:0000102D                 mov     [ebp+var_138], eax
.text$mn:00001033                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001037                 mov     ecx, [ebp+var_118]
.text$mn:0000103D                 add     ecx, 134h
.text$mn:00001043                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001047                 call    ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z ; FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)
.text$mn:0000104C                 mov     [ebp+var_10E], al
.text$mn:00001052                 mov     cl, [ebp+var_10E]
.text$mn:00001058                 mov     [ebp+var_10D], cl
.text$mn:0000105E
.text$mn:0000105E loc_105E:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+155j
.text$mn:0000105E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001062                 lea     ecx, [ebp+var_48]
.text$mn:00001065                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000106A                 jmp     short loc_10C1
.text$mn:0000106C ; ---------------------------------------------------------------------------
.text$mn:0000106C
.text$mn:0000106C loc_106C:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+E2j
.text$mn:0000106C                 mov     edx, [ebp+arg_8]
.text$mn:0000106F                 push    edx
.text$mn:00001070                 sub     esp, 1Ch
.text$mn:00001073                 mov     ecx, esp
.text$mn:00001075                 mov     [ebp+var_128], esp
.text$mn:0000107B                 lea     eax, [ebp+var_2C]
.text$mn:0000107E                 push    eax
.text$mn:0000107F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001084                 mov     [ebp+var_124], eax
.text$mn:0000108A                 mov     ecx, [ebp+var_124]
.text$mn:00001090                 mov     [ebp+var_134], ecx
.text$mn:00001096                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000109A                 mov     ecx, [ebp+var_118]
.text$mn:000010A0                 add     ecx, 134h
.text$mn:000010A6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000010AA                 call    ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z ; FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)
.text$mn:000010AF                 mov     [ebp+var_111], al
.text$mn:000010B5                 mov     dl, [ebp+var_111]
.text$mn:000010BB                 mov     [ebp+var_10D], dl
.text$mn:000010C1
.text$mn:000010C1 loc_10C1:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+1D2j
.text$mn:000010C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000010C8                 lea     ecx, [ebp+var_2C]
.text$mn:000010CB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000010D0                 jmp     loc_11AB
.text$mn:000010D5 ; ---------------------------------------------------------------------------
.text$mn:000010D5
.text$mn:000010D5 loc_10D5:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+75j
.text$mn:000010D5                 lea     eax, [ebp+var_64]
.text$mn:000010D8                 push    eax
.text$mn:000010D9                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000010DE                 mov     ecx, eax
.text$mn:000010E0                 call    ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getNppPath(void)
.text$mn:000010E5                 mov     [ebp+var_4], 6
.text$mn:000010EC                 push    offset $SG159631 ; "functionList.xml"
.text$mn:000010F1                 lea     ecx, [ebp+var_9C]
.text$mn:000010F7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000010FC                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001100                 lea     ecx, [ebp+var_9C]
.text$mn:00001106                 push    ecx
.text$mn:00001107                 lea     edx, [ebp+var_64]
.text$mn:0000110A                 push    edx
.text$mn:0000110B                 lea     eax, [ebp+var_F0]
.text$mn:00001111                 push    eax
.text$mn:00001112                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001117                 add     esp, 0Ch
.text$mn:0000111A                 lea     ecx, [ebp+var_F0]
.text$mn:00001120                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001125                 mov     byte ptr [ebp+var_4], 6
.text$mn:00001129                 lea     ecx, [ebp+var_9C]
.text$mn:0000112F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001134                 lea     ecx, [ebp+var_64]
.text$mn:00001137                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000113C                 push    eax             ; pszPath
.text$mn:0000113D                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00001143                 test    eax, eax
.text$mn:00001145                 jz      short loc_119C
.text$mn:00001147                 mov     ecx, [ebp+arg_8]
.text$mn:0000114A                 push    ecx
.text$mn:0000114B                 sub     esp, 1Ch
.text$mn:0000114E                 mov     ecx, esp
.text$mn:00001150                 mov     [ebp+var_13C], esp
.text$mn:00001156                 lea     edx, [ebp+var_64]
.text$mn:00001159                 push    edx
.text$mn:0000115A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000115F                 mov     [ebp+var_11C], eax
.text$mn:00001165                 mov     eax, [ebp+var_11C]
.text$mn:0000116B                 mov     [ebp+var_130], eax
.text$mn:00001171                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001175                 mov     ecx, [ebp+var_118]
.text$mn:0000117B                 add     ecx, 134h
.text$mn:00001181                 mov     byte ptr [ebp+var_4], 6
.text$mn:00001185                 call    ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z ; FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)
.text$mn:0000118A                 mov     [ebp+var_110], al
.text$mn:00001190                 mov     cl, [ebp+var_110]
.text$mn:00001196                 mov     [ebp+var_10D], cl
.text$mn:0000119C
.text$mn:0000119C loc_119C:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+2ADj
.text$mn:0000119C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000011A3                 lea     ecx, [ebp+var_64]
.text$mn:000011A6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000011AB
.text$mn:000011AB loc_11AB:                               ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+238j
.text$mn:000011AB                 mov     ecx, [ebp+var_C]
.text$mn:000011AE                 mov     large fs:0, ecx
.text$mn:000011B5                 pop     ecx
.text$mn:000011B6                 mov     ecx, [ebp+var_10]
.text$mn:000011B9                 xor     ecx, ebp
.text$mn:000011BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000011C0                 mov     esp, ebp
.text$mn:000011C2                 pop     ebp
.text$mn:000011C3                 retn    0Ch
.text$mn:000011C3 ?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z endp
.text$mn:000011C3
.text$mn:000011C3 ; ---------------------------------------------------------------------------
.text$mn:000011C6                 align 4
.text$mn:000011C8
.text$mn:000011C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000011C8
.text$mn:000011C8 ; Attributes: bp-based frame
.text$mn:000011C8
.text$mn:000011C8 ; void __thiscall FunctionListPanel::sortOrUnsort(FunctionListPanel *__hidden this)
.text$mn:000011C8                 public ?sortOrUnsort@FunctionListPanel@@QAEXXZ
.text$mn:000011C8 ?sortOrUnsort@FunctionListPanel@@QAEXXZ proc near
.text$mn:000011C8                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+64Bp
.text$mn:000011C8
.text$mn:000011C8 var_240         = dword ptr -240h
.text$mn:000011C8 var_239         = byte ptr -239h
.text$mn:000011C8 var_238         = dword ptr -238h
.text$mn:000011C8 var_234         = byte ptr -234h
.text$mn:000011C8 lParam          = dword ptr -218h
.text$mn:000011C8 var_10          = dword ptr -10h
.text$mn:000011C8 var_C           = dword ptr -0Ch
.text$mn:000011C8 var_4           = dword ptr -4
.text$mn:000011C8
.text$mn:000011C8                 push    ebp
.text$mn:000011C9                 mov     ebp, esp
.text$mn:000011CB                 push    0FFFFFFFFh
.text$mn:000011CD                 push    offset __ehhandler$?sortOrUnsort@FunctionListPanel@@QAEXXZ
.text$mn:000011D2                 mov     eax, large fs:0
.text$mn:000011D8                 push    eax
.text$mn:000011D9                 sub     esp, 234h
.text$mn:000011DF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000011E4                 xor     eax, ebp
.text$mn:000011E6                 mov     [ebp+var_10], eax
.text$mn:000011E9                 push    eax
.text$mn:000011EA                 lea     eax, [ebp+var_C]
.text$mn:000011ED                 mov     large fs:0, eax
.text$mn:000011F3                 mov     [ebp+var_238], ecx
.text$mn:000011F9                 mov     ecx, [ebp+var_238] ; this
.text$mn:000011FF                 call    ?shouldSort@FunctionListPanel@@AAE_NXZ ; FunctionListPanel::shouldSort(void)
.text$mn:00001204                 mov     [ebp+var_239], al
.text$mn:0000120A                 movzx   eax, [ebp+var_239]
.text$mn:00001211                 test    eax, eax
.text$mn:00001213                 jz      short loc_1237
.text$mn:00001215                 mov     ecx, [ebp+var_238]
.text$mn:0000121B                 mov     ecx, [ecx+74h]  ; this
.text$mn:0000121E                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001223                 push    eax             ; struct _TREEITEM *
.text$mn:00001224                 mov     edx, [ebp+var_238]
.text$mn:0000122A                 mov     ecx, [edx+74h]  ; this
.text$mn:0000122D                 call    ?sort@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::sort(_TREEITEM *)
.text$mn:00001232                 jmp     loc_13AB
.text$mn:00001237 ; ---------------------------------------------------------------------------
.text$mn:00001237
.text$mn:00001237 loc_1237:                               ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+4Bj
.text$mn:00001237                 lea     eax, [ebp+lParam]
.text$mn:0000123D                 push    eax             ; lParam
.text$mn:0000123E                 push    104h            ; wParam
.text$mn:00001243                 push    0Dh             ; Msg
.text$mn:00001245                 mov     ecx, [ebp+var_238]
.text$mn:0000124B                 mov     edx, [ecx+70h]
.text$mn:0000124E                 push    edx             ; hWnd
.text$mn:0000124F                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001255                 mov     eax, 2
.text$mn:0000125A                 imul    ecx, eax, 0
.text$mn:0000125D                 movzx   edx, word ptr [ebp+ecx+lParam]
.text$mn:00001265                 test    edx, edx
.text$mn:00001267                 jnz     short loc_1279
.text$mn:00001269                 mov     ecx, [ebp+var_238] ; this
.text$mn:0000126F                 call    ?reload@FunctionListPanel@@QAEXXZ ; FunctionListPanel::reload(void)
.text$mn:00001274                 jmp     loc_13AB
.text$mn:00001279 ; ---------------------------------------------------------------------------
.text$mn:00001279
.text$mn:00001279 loc_1279:                               ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+9Fj
.text$mn:00001279                 mov     ecx, [ebp+var_238] ; this
.text$mn:0000127F                 call    ?reload@FunctionListPanel@@QAEXXZ ; FunctionListPanel::reload(void)
.text$mn:00001284                 mov     ecx, [ebp+var_238]
.text$mn:0000128A                 add     ecx, 78h ; 'x'  ; this
.text$mn:0000128D                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001292                 test    eax, eax
.text$mn:00001294                 jnz     short loc_129B
.text$mn:00001296                 jmp     loc_13AB
.text$mn:0000129B ; ---------------------------------------------------------------------------
.text$mn:0000129B
.text$mn:0000129B loc_129B:                               ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+CCj
.text$mn:0000129B                 mov     ecx, [ebp+var_238]
.text$mn:000012A1                 add     ecx, 0B8h ; '+' ; this
.text$mn:000012A7                 call    ?removeAllItems@TreeView@@QAEXXZ ; TreeView::removeAllItems(void)
.text$mn:000012AC                 mov     eax, [ebp+var_238]
.text$mn:000012B2                 mov     ecx, [eax+130h]
.text$mn:000012B8                 mov     ecx, [ecx]      ; this
.text$mn:000012BA                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:000012BF                 mov     ecx, eax        ; this
.text$mn:000012C1                 call    ?getFileName@Buffer@@QBEPB_WXZ ; Buffer::getFileName(void)
.text$mn:000012C6                 mov     [ebp+var_240], eax
.text$mn:000012CC                 push    offset $SG158775 ; "-1"
.text$mn:000012D1                 push    0               ; int
.text$mn:000012D3                 push    0               ; struct _TREEITEM *
.text$mn:000012D5                 mov     edx, [ebp+var_240]
.text$mn:000012DB                 push    edx             ; wchar_t *
.text$mn:000012DC                 mov     ecx, [ebp+var_238]
.text$mn:000012E2                 add     ecx, 0B8h ; '+' ; this
.text$mn:000012E8                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:000012ED                 lea     eax, [ebp+lParam]
.text$mn:000012F3                 push    eax             ; Str
.text$mn:000012F4                 lea     ecx, [ebp+var_234]
.text$mn:000012FA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000012FF                 mov     [ebp+var_4], 0
.text$mn:00001306                 push    2
.text$mn:00001308                 lea     ecx, [ebp+var_234]
.text$mn:0000130E                 push    ecx
.text$mn:0000130F                 mov     edx, [ebp+var_238]
.text$mn:00001315                 add     edx, 0B8h ; '+'
.text$mn:0000131B                 push    edx
.text$mn:0000131C                 mov     ecx, [ebp+var_238]
.text$mn:00001322                 add     ecx, 78h ; 'x'
.text$mn:00001325                 call    ?searchLeafAndBuildTree@TreeView@@QAE_NAAV1@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; TreeView::searchLeafAndBuildTree(TreeView &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,int)
.text$mn:0000132A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001331                 lea     ecx, [ebp+var_234]
.text$mn:00001337                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000133C                 push    1
.text$mn:0000133E                 mov     ecx, [ebp+var_238]
.text$mn:00001344                 add     ecx, 0B8h ; '+'
.text$mn:0000134A                 mov     eax, [ebp+var_238]
.text$mn:00001350                 mov     edx, [eax+0B8h]
.text$mn:00001356                 mov     eax, [edx+0Ch]
.text$mn:00001359                 call    eax
.text$mn:0000135B                 mov     ecx, [ebp+var_238]
.text$mn:00001361                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001367                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:0000136C                 push    eax             ; struct _TREEITEM *
.text$mn:0000136D                 mov     ecx, [ebp+var_238]
.text$mn:00001373                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001379                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:0000137E                 push    0
.text$mn:00001380                 mov     ecx, [ebp+var_238]
.text$mn:00001386                 add     ecx, 78h ; 'x'
.text$mn:00001389                 mov     edx, [ebp+var_238]
.text$mn:0000138F                 mov     eax, [edx+78h]
.text$mn:00001392                 mov     edx, [eax+0Ch]
.text$mn:00001395                 call    edx
.text$mn:00001397                 mov     eax, [ebp+var_238]
.text$mn:0000139D                 add     eax, 0B8h ; '+'
.text$mn:000013A2                 mov     ecx, [ebp+var_238]
.text$mn:000013A8                 mov     [ecx+74h], eax
.text$mn:000013AB
.text$mn:000013AB loc_13AB:                               ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+6Aj
.text$mn:000013AB                                         ; FunctionListPanel::sortOrUnsort(void)+ACj ...
.text$mn:000013AB                 mov     ecx, [ebp+var_C]
.text$mn:000013AE                 mov     large fs:0, ecx
.text$mn:000013B5                 pop     ecx
.text$mn:000013B6                 mov     ecx, [ebp+var_10]
.text$mn:000013B9                 xor     ecx, ebp
.text$mn:000013BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000013C0                 mov     esp, ebp
.text$mn:000013C2                 pop     ebp
.text$mn:000013C3                 retn
.text$mn:000013C3 ?sortOrUnsort@FunctionListPanel@@QAEXXZ endp
.text$mn:000013C3
.text$mn:000013C3 ; ---------------------------------------------------------------------------
.text$mn:000013C4                 align 8
.text$mn:000013C8
.text$mn:000013C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000013C8
.text$mn:000013C8 ; Attributes: bp-based frame
.text$mn:000013C8
.text$mn:000013C8 ; void __thiscall FunctionListPanel::reload(FunctionListPanel *__hidden this)
.text$mn:000013C8                 public ?reload@FunctionListPanel@@QAEXXZ
.text$mn:000013C8 ?reload@FunctionListPanel@@QAEXXZ proc near
.text$mn:000013C8                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+A7p
.text$mn:000013C8                                         ; FunctionListPanel::sortOrUnsort(void)+B7p ...
.text$mn:000013C8
.text$mn:000013C8 var_324         = dword ptr -324h
.text$mn:000013C8 var_320         = dword ptr -320h
.text$mn:000013C8 var_31C         = dword ptr -31Ch
.text$mn:000013C8 var_318         = dword ptr -318h
.text$mn:000013C8 var_314         = dword ptr -314h
.text$mn:000013C8 var_310         = dword ptr -310h
.text$mn:000013C8 var_30C         = dword ptr -30Ch
.text$mn:000013C8 var_308         = dword ptr -308h
.text$mn:000013C8 var_304         = dword ptr -304h
.text$mn:000013C8 var_300         = dword ptr -300h
.text$mn:000013C8 var_2FC         = dword ptr -2FCh
.text$mn:000013C8 var_2F8         = byte ptr -2F8h
.text$mn:000013C8 var_2E8         = dword ptr -2E8h
.text$mn:000013C8 pszPath         = dword ptr -2E4h
.text$mn:000013C8 var_2E0         = dword ptr -2E0h
.text$mn:000013C8 Str             = dword ptr -2DCh
.text$mn:000013C8 var_2D8         = dword ptr -2D8h
.text$mn:000013C8 var_2D4         = dword ptr -2D4h
.text$mn:000013C8 var_2D0         = byte ptr -2D0h
.text$mn:000013C8 var_2CF         = byte ptr -2CFh
.text$mn:000013C8 var_2CE         = byte ptr -2CEh
.text$mn:000013C8 var_2CD         = byte ptr -2CDh
.text$mn:000013C8 var_2CC         = dword ptr -2CCh
.text$mn:000013C8 var_2C5         = byte ptr -2C5h
.text$mn:000013C8 var_2C4         = dword ptr -2C4h
.text$mn:000013C8 var_2C0         = byte ptr -2C0h
.text$mn:000013C8 var_280         = byte ptr -280h
.text$mn:000013C8 var_234         = byte ptr -234h
.text$mn:000013C8 lParam          = dword ptr -218h
.text$mn:000013C8 var_10          = dword ptr -10h
.text$mn:000013C8 var_C           = dword ptr -0Ch
.text$mn:000013C8 var_4           = dword ptr -4
.text$mn:000013C8
.text$mn:000013C8                 push    ebp
.text$mn:000013C9                 mov     ebp, esp
.text$mn:000013CB                 push    0FFFFFFFFh
.text$mn:000013CD                 push    offset __ehhandler$?reload@FunctionListPanel@@QAEXXZ
.text$mn:000013D2                 mov     eax, large fs:0
.text$mn:000013D8                 push    eax
.text$mn:000013D9                 sub     esp, 318h
.text$mn:000013DF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000013E4                 xor     eax, ebp
.text$mn:000013E6                 mov     [ebp+var_10], eax
.text$mn:000013E9                 push    eax
.text$mn:000013EA                 lea     eax, [ebp+var_C]
.text$mn:000013ED                 mov     large fs:0, eax
.text$mn:000013F3                 mov     [ebp+var_2C4], ecx
.text$mn:000013F9                 lea     ecx, [ebp+var_280] ; this
.text$mn:000013FF                 call    ??0TreeStateNode@@QAE@XZ ; TreeStateNode::TreeStateNode(void)
.text$mn:00001404                 mov     [ebp+var_4], 0
.text$mn:0000140B                 mov     ecx, [ebp+var_2C4]
.text$mn:00001411                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001414                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001419                 push    eax             ; struct _TREEITEM *
.text$mn:0000141A                 lea     eax, [ebp+var_280]
.text$mn:00001420                 push    eax             ; struct TreeStateNode *
.text$mn:00001421                 mov     ecx, [ebp+var_2C4]
.text$mn:00001427                 add     ecx, 78h ; 'x'  ; this
.text$mn:0000142A                 call    ?retrieveFoldingStateTo@TreeView@@QAE_NAAUTreeStateNode@@PAU_TREEITEM@@@Z ; TreeView::retrieveFoldingStateTo(TreeStateNode &,_TREEITEM *)
.text$mn:0000142F                 mov     [ebp+var_2CF], al
.text$mn:00001435                 movzx   ecx, [ebp+var_2CF]
.text$mn:0000143C                 test    ecx, ecx
.text$mn:0000143E                 jz      short loc_14BA
.text$mn:00001440                 lea     edx, [ebp+lParam]
.text$mn:00001446                 push    edx             ; lParam
.text$mn:00001447                 push    104h            ; wParam
.text$mn:0000144C                 push    0Dh             ; Msg
.text$mn:0000144E                 mov     eax, [ebp+var_2C4]
.text$mn:00001454                 mov     ecx, [eax+70h]
.text$mn:00001457                 push    ecx             ; hWnd
.text$mn:00001458                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000145E                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:00001464                 call    ?shouldSort@FunctionListPanel@@AAE_NXZ ; FunctionListPanel::shouldSort(void)
.text$mn:00001469                 mov     [ebp+var_2CD], al
.text$mn:0000146F                 movzx   edx, [ebp+var_2CD]
.text$mn:00001476                 push    edx
.text$mn:00001477                 lea     eax, [ebp+lParam]
.text$mn:0000147D                 push    eax
.text$mn:0000147E                 sub     esp, 4Ch
.text$mn:00001481                 mov     ecx, esp
.text$mn:00001483                 mov     [ebp+var_320], esp
.text$mn:00001489                 lea     edx, [ebp+var_280]
.text$mn:0000148F                 push    edx
.text$mn:00001490                 call    ??0TreeStateNode@@QAE@ABU0@@Z ; TreeStateNode::TreeStateNode(TreeStateNode const &)
.text$mn:00001495                 mov     [ebp+var_300], eax
.text$mn:0000149B                 mov     eax, [ebp+var_300]
.text$mn:000014A1                 mov     [ebp+var_31C], eax
.text$mn:000014A7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000014AB                 mov     byte ptr [ebp+var_4], 0
.text$mn:000014AF                 mov     ecx, [ebp+var_2C4]
.text$mn:000014B5                 call    ?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z ; FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)
.text$mn:000014BA
.text$mn:000014BA loc_14BA:                               ; CODE XREF: FunctionListPanel::reload(void)+76j
.text$mn:000014BA                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:000014C0                 call    ?removeAllEntries@FunctionListPanel@@QAEXXZ ; FunctionListPanel::removeAllEntries(void)
.text$mn:000014C5                 push    offset $SG158788 ; lParam
.text$mn:000014CA                 push    0               ; wParam
.text$mn:000014CC                 push    0Ch             ; Msg
.text$mn:000014CE                 mov     ecx, [ebp+var_2C4]
.text$mn:000014D4                 mov     edx, [ecx+70h]
.text$mn:000014D7                 push    edx             ; hWnd
.text$mn:000014D8                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000014DE                 push    0               ; bool
.text$mn:000014E0                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:000014E6                 call    ?setSort@FunctionListPanel@@AAEX_N@Z ; FunctionListPanel::setSort(bool)
.text$mn:000014EB                 lea     ecx, [ebp+var_2F8]
.text$mn:000014F1                 call    ??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ ; std::vector<foundInfo,std::allocator<foundInfo>>::vector<foundInfo,std::allocator<foundInfo>>(void)
.text$mn:000014F6                 mov     byte ptr [ebp+var_4], 2
.text$mn:000014FA                 mov     eax, [ebp+var_2C4]
.text$mn:00001500                 mov     ecx, [eax+130h]
.text$mn:00001506                 mov     ecx, [ecx]      ; this
.text$mn:00001508                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:0000150D                 mov     ecx, eax        ; this
.text$mn:0000150F                 call    ?getFileName@Buffer@@QBEPB_WXZ ; Buffer::getFileName(void)
.text$mn:00001514                 mov     [ebp+pszPath], eax
.text$mn:0000151A                 mov     edx, [ebp+var_2C4]
.text$mn:00001520                 mov     eax, [edx+130h]
.text$mn:00001526                 mov     ecx, [eax]      ; this
.text$mn:00001528                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:0000152D                 mov     ecx, eax
.text$mn:0000152F                 call    ?getLangType@Buffer@@QBE?AW4LangType@@XZ ; Buffer::getLangType(void)
.text$mn:00001534                 mov     [ebp+var_2E8], eax
.text$mn:0000153A                 mov     [ebp+var_2E0], 0
.text$mn:00001544                 cmp     [ebp+var_2E8], 0Fh
.text$mn:0000154B                 jnz     short loc_156D
.text$mn:0000154D                 mov     ecx, [ebp+var_2C4]
.text$mn:00001553                 mov     edx, [ecx+130h]
.text$mn:00001559                 mov     ecx, [edx]      ; this
.text$mn:0000155B                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:00001560                 mov     ecx, eax        ; this
.text$mn:00001562                 call    ?getUserDefineLangName@Buffer@@QBEPB_WXZ ; Buffer::getUserDefineLangName(void)
.text$mn:00001567                 mov     [ebp+var_2E0], eax
.text$mn:0000156D
.text$mn:0000156D loc_156D:                               ; CODE XREF: FunctionListPanel::reload(void)+183j
.text$mn:0000156D                 mov     eax, [ebp+pszPath]
.text$mn:00001573                 push    eax             ; pszPath
.text$mn:00001574                 call    dword ptr ds:__imp__PathFindExtensionW@4 ; PathFindExtensionW(x)
.text$mn:0000157A                 mov     [ebp+var_2FC], eax
.text$mn:00001580                 mov     ecx, [ebp+var_2E0]
.text$mn:00001586                 push    ecx             ; wchar_t *
.text$mn:00001587                 mov     edx, [ebp+var_2FC]
.text$mn:0000158D                 push    edx             ; Str
.text$mn:0000158E                 mov     eax, [ebp+var_2E8]
.text$mn:00001594                 push    eax             ; int
.text$mn:00001595                 push    0FFFFFFFFh      ; int
.text$mn:00001597                 lea     ecx, [ebp+var_2C0]
.text$mn:0000159D                 call    ??0AssociationInfo@@QAE@HHPB_W0@Z ; AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)
.text$mn:000015A2                 mov     [ebp+var_304], eax
.text$mn:000015A8                 mov     ecx, [ebp+var_304]
.text$mn:000015AE                 mov     [ebp+var_30C], ecx
.text$mn:000015B4                 mov     byte ptr [ebp+var_4], 3
.text$mn:000015B8                 mov     edx, [ebp+var_30C]
.text$mn:000015BE                 push    edx
.text$mn:000015BF                 lea     eax, [ebp+var_2F8]
.text$mn:000015C5                 push    eax
.text$mn:000015C6                 mov     ecx, [ebp+var_2C4]
.text$mn:000015CC                 add     ecx, 134h
.text$mn:000015D2                 call    ?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z ; FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)
.text$mn:000015D7                 mov     [ebp+var_2CE], al
.text$mn:000015DD                 mov     byte ptr [ebp+var_4], 2
.text$mn:000015E1                 lea     ecx, [ebp+var_2C0] ; this
.text$mn:000015E7                 call    ??1AssociationInfo@@QAE@XZ ; AssociationInfo::~AssociationInfo(void)
.text$mn:000015EC                 movzx   ecx, [ebp+var_2CE]
.text$mn:000015F3                 test    ecx, ecx
.text$mn:000015F5                 jz      short loc_1615
.text$mn:000015F7                 push    offset $SG159572 ; "-1"
.text$mn:000015FC                 push    0               ; int
.text$mn:000015FE                 push    0               ; struct _TREEITEM *
.text$mn:00001600                 mov     edx, [ebp+pszPath]
.text$mn:00001606                 push    edx             ; wchar_t *
.text$mn:00001607                 mov     ecx, [ebp+var_2C4]
.text$mn:0000160D                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001610                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00001615
.text$mn:00001615 loc_1615:                               ; CODE XREF: FunctionListPanel::reload(void)+22Dj
.text$mn:00001615                 mov     [ebp+var_2CC], 0
.text$mn:0000161F                 lea     ecx, [ebp+var_2F8]
.text$mn:00001625                 call    ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::size(void)
.text$mn:0000162A                 mov     [ebp+var_314], eax
.text$mn:00001630                 jmp     short loc_1641
.text$mn:00001632 ; ---------------------------------------------------------------------------
.text$mn:00001632
.text$mn:00001632 loc_1632:                               ; CODE XREF: FunctionListPanel::reload(void):loc_177Cj
.text$mn:00001632                 mov     eax, [ebp+var_2CC]
.text$mn:00001638                 add     eax, 1
.text$mn:0000163B                 mov     [ebp+var_2CC], eax
.text$mn:00001641
.text$mn:00001641 loc_1641:                               ; CODE XREF: FunctionListPanel::reload(void)+268j
.text$mn:00001641                 mov     ecx, [ebp+var_2CC]
.text$mn:00001647                 cmp     ecx, [ebp+var_314]
.text$mn:0000164D                 jnb     loc_1781
.text$mn:00001653                 mov     [ebp+var_2D0], 0
.text$mn:0000165A                 movzx   edx, [ebp+var_2D0]
.text$mn:00001661                 test    edx, edx
.text$mn:00001663                 jz      loc_1724
.text$mn:00001669                 push    offset $SG159581 ; Str
.text$mn:0000166E                 lea     ecx, [ebp+var_234]
.text$mn:00001674                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001679                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000167D                 mov     eax, [ebp+var_2CC]
.text$mn:00001683                 push    eax
.text$mn:00001684                 lea     ecx, [ebp+var_2F8]
.text$mn:0000168A                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:0000168F                 cmp     dword ptr [eax+3Ch], 0FFFFFFFFh
.text$mn:00001693                 jz      short loc_16C6
.text$mn:00001695                 mov     ecx, [ebp+var_2CC]
.text$mn:0000169B                 push    ecx
.text$mn:0000169C                 lea     ecx, [ebp+var_2F8]
.text$mn:000016A2                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:000016A7                 add     eax, 1Ch
.text$mn:000016AA                 push    eax
.text$mn:000016AB                 lea     ecx, [ebp+var_234]
.text$mn:000016B1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000016B6                 push    offset $SG159583 ; "=>"
.text$mn:000016BB                 lea     ecx, [ebp+var_234]
.text$mn:000016C1                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000016C6
.text$mn:000016C6 loc_16C6:                               ; CODE XREF: FunctionListPanel::reload(void)+2CBj
.text$mn:000016C6                 mov     edx, [ebp+var_2CC]
.text$mn:000016CC                 push    edx
.text$mn:000016CD                 lea     ecx, [ebp+var_2F8]
.text$mn:000016D3                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:000016D8                 push    eax
.text$mn:000016D9                 lea     ecx, [ebp+var_234]
.text$mn:000016DF                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000016E4                 mov     eax, [ebp+var_2CC]
.text$mn:000016EA                 push    eax
.text$mn:000016EB                 lea     ecx, [ebp+var_2F8]
.text$mn:000016F1                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:000016F6                 mov     ecx, [eax+38h]
.text$mn:000016F9                 push    ecx             ; unsigned int
.text$mn:000016FA                 lea     ecx, [ebp+var_234]
.text$mn:00001700                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001705                 push    eax             ; wchar_t *
.text$mn:00001706                 push    0               ; wchar_t *
.text$mn:00001708                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:0000170E                 call    ?addEntry@FunctionListPanel@@QAEXPB_W0I@Z ; FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)
.text$mn:00001713                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001717                 lea     ecx, [ebp+var_234]
.text$mn:0000171D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001722                 jmp     short loc_177C
.text$mn:00001724 ; ---------------------------------------------------------------------------
.text$mn:00001724
.text$mn:00001724 loc_1724:                               ; CODE XREF: FunctionListPanel::reload(void)+29Bj
.text$mn:00001724                 mov     edx, [ebp+var_2CC]
.text$mn:0000172A                 push    edx
.text$mn:0000172B                 lea     ecx, [ebp+var_2F8]
.text$mn:00001731                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:00001736                 mov     eax, [eax+38h]
.text$mn:00001739                 push    eax             ; unsigned int
.text$mn:0000173A                 mov     ecx, [ebp+var_2CC]
.text$mn:00001740                 push    ecx
.text$mn:00001741                 lea     ecx, [ebp+var_2F8]
.text$mn:00001747                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:0000174C                 mov     ecx, eax
.text$mn:0000174E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001753                 push    eax             ; wchar_t *
.text$mn:00001754                 mov     edx, [ebp+var_2CC]
.text$mn:0000175A                 push    edx
.text$mn:0000175B                 lea     ecx, [ebp+var_2F8]
.text$mn:00001761                 call    ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)
.text$mn:00001766                 add     eax, 1Ch
.text$mn:00001769                 mov     ecx, eax
.text$mn:0000176B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001770                 push    eax             ; wchar_t *
.text$mn:00001771                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:00001777                 call    ?addEntry@FunctionListPanel@@QAEXPB_W0I@Z ; FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)
.text$mn:0000177C
.text$mn:0000177C loc_177C:                               ; CODE XREF: FunctionListPanel::reload(void)+35Aj
.text$mn:0000177C                 jmp     loc_1632
.text$mn:00001781 ; ---------------------------------------------------------------------------
.text$mn:00001781
.text$mn:00001781 loc_1781:                               ; CODE XREF: FunctionListPanel::reload(void)+285j
.text$mn:00001781                 mov     ecx, [ebp+var_2C4]
.text$mn:00001787                 add     ecx, 78h ; 'x'  ; this
.text$mn:0000178A                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:0000178F                 mov     [ebp+var_2D8], eax
.text$mn:00001795                 mov     eax, [ebp+var_2C4]
.text$mn:0000179B                 mov     ecx, [eax+130h]
.text$mn:000017A1                 mov     ecx, [ecx]      ; this
.text$mn:000017A3                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:000017A8                 mov     ecx, eax        ; this
.text$mn:000017AA                 call    ?getFullPathName@Buffer@@QBEPB_WXZ ; Buffer::getFullPathName(void)
.text$mn:000017AF                 mov     [ebp+Str], eax
.text$mn:000017B5                 cmp     [ebp+var_2D8], 0
.text$mn:000017BC                 jz      loc_18FE
.text$mn:000017C2                 mov     edx, [ebp+Str]
.text$mn:000017C8                 push    edx             ; wchar_t *
.text$mn:000017C9                 mov     eax, [ebp+var_2D8]
.text$mn:000017CF                 push    eax             ; struct _TREEITEM *
.text$mn:000017D0                 mov     ecx, [ebp+var_2C4]
.text$mn:000017D6                 add     ecx, 78h ; 'x'  ; this
.text$mn:000017D9                 call    ?setItemParam@TreeView@@QAE_NPAU_TREEITEM@@PB_W@Z ; TreeView::setItemParam(_TREEITEM *,wchar_t const *)
.text$mn:000017DE                 sub     esp, 1Ch
.text$mn:000017E1                 mov     ecx, esp
.text$mn:000017E3                 mov     [ebp+var_324], esp
.text$mn:000017E9                 mov     edx, [ebp+Str]
.text$mn:000017EF                 push    edx             ; Str
.text$mn:000017F0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000017F5                 mov     [ebp+var_310], eax
.text$mn:000017FB                 mov     eax, [ebp+var_310]
.text$mn:00001801                 mov     [ebp+var_318], eax
.text$mn:00001807                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000180B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000180F                 mov     ecx, [ebp+var_2C4]
.text$mn:00001815                 call    ?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:0000181A                 mov     [ebp+var_308], eax
.text$mn:00001820                 mov     ecx, [ebp+var_308]
.text$mn:00001826                 mov     [ebp+var_2D4], ecx
.text$mn:0000182C                 cmp     [ebp+var_2D4], 0
.text$mn:00001833                 jnz     short loc_1875
.text$mn:00001835                 push    offset $SG159592 ; lParam
.text$mn:0000183A                 push    0               ; wParam
.text$mn:0000183C                 push    0Ch             ; Msg
.text$mn:0000183E                 mov     edx, [ebp+var_2C4]
.text$mn:00001844                 mov     eax, [edx+70h]
.text$mn:00001847                 push    eax             ; hWnd
.text$mn:00001848                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000184E                 push    0               ; bool
.text$mn:00001850                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:00001856                 call    ?setSort@FunctionListPanel@@AAEX_N@Z ; FunctionListPanel::setSort(bool)
.text$mn:0000185B                 mov     ecx, [ebp+var_2D8]
.text$mn:00001861                 push    ecx             ; struct _TREEITEM *
.text$mn:00001862                 mov     ecx, [ebp+var_2C4]
.text$mn:00001868                 add     ecx, 78h ; 'x'  ; this
.text$mn:0000186B                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:00001870                 jmp     loc_18FE
.text$mn:00001875 ; ---------------------------------------------------------------------------
.text$mn:00001875
.text$mn:00001875 loc_1875:                               ; CODE XREF: FunctionListPanel::reload(void)+46Bj
.text$mn:00001875                 mov     ecx, [ebp+var_2D4]
.text$mn:0000187B                 add     ecx, 4Ch ; 'L'
.text$mn:0000187E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001883                 push    eax             ; lParam
.text$mn:00001884                 push    0               ; wParam
.text$mn:00001886                 push    0Ch             ; Msg
.text$mn:00001888                 mov     edx, [ebp+var_2C4]
.text$mn:0000188E                 mov     eax, [edx+70h]
.text$mn:00001891                 push    eax             ; hWnd
.text$mn:00001892                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001898                 mov     ecx, [ebp+var_2D8]
.text$mn:0000189E                 push    ecx             ; struct _TREEITEM *
.text$mn:0000189F                 mov     edx, [ebp+var_2D4]
.text$mn:000018A5                 push    edx             ; struct TreeStateNode *
.text$mn:000018A6                 mov     ecx, [ebp+var_2C4]
.text$mn:000018AC                 add     ecx, 78h ; 'x'  ; this
.text$mn:000018AF                 call    ?restoreFoldingStateFrom@TreeView@@QAE_NABUTreeStateNode@@PAU_TREEITEM@@@Z ; TreeView::restoreFoldingStateFrom(TreeStateNode const &,_TREEITEM *)
.text$mn:000018B4                 mov     eax, [ebp+var_2D4]
.text$mn:000018BA                 mov     cl, [eax+68h]
.text$mn:000018BD                 mov     [ebp+var_2C5], cl
.text$mn:000018C3                 movzx   edx, [ebp+var_2C5]
.text$mn:000018CA                 push    edx             ; bool
.text$mn:000018CB                 mov     ecx, [ebp+var_2C4] ; this
.text$mn:000018D1                 call    ?setSort@FunctionListPanel@@AAEX_N@Z ; FunctionListPanel::setSort(bool)
.text$mn:000018D6                 movzx   eax, [ebp+var_2C5]
.text$mn:000018DD                 test    eax, eax
.text$mn:000018DF                 jz      short loc_18FE
.text$mn:000018E1                 mov     ecx, [ebp+var_2C4]
.text$mn:000018E7                 mov     ecx, [ecx+74h]  ; this
.text$mn:000018EA                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:000018EF                 push    eax             ; struct _TREEITEM *
.text$mn:000018F0                 mov     edx, [ebp+var_2C4]
.text$mn:000018F6                 mov     ecx, [edx+74h]  ; this
.text$mn:000018F9                 call    ?sort@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::sort(_TREEITEM *)
.text$mn:000018FE
.text$mn:000018FE loc_18FE:                               ; CODE XREF: FunctionListPanel::reload(void)+3F4j
.text$mn:000018FE                                         ; FunctionListPanel::reload(void)+4A8j ...
.text$mn:000018FE                 push    1               ; bErase
.text$mn:00001900                 push    0               ; lpRect
.text$mn:00001902                 mov     eax, [ebp+var_2C4]
.text$mn:00001908                 mov     ecx, [eax+70h]
.text$mn:0000190B                 push    ecx             ; hWnd
.text$mn:0000190C                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:00001912                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001916                 lea     ecx, [ebp+var_2F8]
.text$mn:0000191C                 call    ??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ ; std::vector<foundInfo,std::allocator<foundInfo>>::~vector<foundInfo,std::allocator<foundInfo>>(void)
.text$mn:00001921                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001928                 lea     ecx, [ebp+var_280] ; this
.text$mn:0000192E                 call    ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$mn:00001933                 mov     ecx, [ebp+var_C]
.text$mn:00001936                 mov     large fs:0, ecx
.text$mn:0000193D                 pop     ecx
.text$mn:0000193E                 mov     ecx, [ebp+var_10]
.text$mn:00001941                 xor     ecx, ebp
.text$mn:00001943                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001948                 mov     esp, ebp
.text$mn:0000194A                 pop     ebp
.text$mn:0000194B                 retn
.text$mn:0000194B ?reload@FunctionListPanel@@QAEXXZ endp
.text$mn:0000194B
.text$mn:0000194B ; ---------------------------------------------------------------------------
.text$mn:0000194C                 db 0Ch dup(0CCh)
.text$mn:00001958
.text$mn:00001958 ; =============== S U B R O U T I N E =======================================
.text$mn:00001958
.text$mn:00001958 ; Attributes: bp-based frame
.text$mn:00001958
.text$mn:00001958 ; void __thiscall FunctionListPanel::addEntry(FunctionListPanel *this, const wchar_t *, const wchar_t *, unsigned int)
.text$mn:00001958                 public ?addEntry@FunctionListPanel@@QAEXPB_W0I@Z
.text$mn:00001958 ?addEntry@FunctionListPanel@@QAEXPB_W0I@Z proc near
.text$mn:00001958                                         ; CODE XREF: FunctionListPanel::reload(void)+346p
.text$mn:00001958                                         ; FunctionListPanel::reload(void)+3AFp
.text$mn:00001958
.text$mn:00001958 var_50          = dword ptr -50h
.text$mn:00001958 var_4C          = dword ptr -4Ch
.text$mn:00001958 var_48          = dword ptr -48h
.text$mn:00001958 Dest            = word ptr -44h
.text$mn:00001958 var_4           = dword ptr -4
.text$mn:00001958 arg_0           = dword ptr  8
.text$mn:00001958 arg_4           = dword ptr  0Ch
.text$mn:00001958 Value           = dword ptr  10h
.text$mn:00001958
.text$mn:00001958                 push    ebp
.text$mn:00001959                 mov     ebp, esp
.text$mn:0000195B                 sub     esp, 50h
.text$mn:0000195E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001963                 xor     eax, ebp
.text$mn:00001965                 mov     [ebp+var_4], eax
.text$mn:00001968                 mov     [ebp+var_4C], ecx
.text$mn:0000196B                 mov     [ebp+var_48], 0
.text$mn:00001972                 push    0Ah             ; Radix
.text$mn:00001974                 lea     eax, [ebp+Dest]
.text$mn:00001977                 push    eax             ; Dest
.text$mn:00001978                 mov     ecx, [ebp+Value]
.text$mn:0000197B                 push    ecx             ; Value
.text$mn:0000197C                 call    __itow
.text$mn:00001981                 add     esp, 0Ch
.text$mn:00001984                 mov     ecx, [ebp+var_4C]
.text$mn:00001987                 add     ecx, 78h ; 'x'  ; this
.text$mn:0000198A                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:0000198F                 mov     [ebp+var_50], eax
.text$mn:00001992                 cmp     [ebp+arg_0], 0
.text$mn:00001996                 jz      short loc_19DD
.text$mn:00001998                 mov     edx, [ebp+arg_0]
.text$mn:0000199B                 movzx   eax, word ptr [edx]
.text$mn:0000199E                 test    eax, eax
.text$mn:000019A0                 jz      short loc_19DD
.text$mn:000019A2                 mov     ecx, [ebp+var_50]
.text$mn:000019A5                 push    ecx             ; struct _TREEITEM *
.text$mn:000019A6                 mov     edx, [ebp+arg_0]
.text$mn:000019A9                 push    edx             ; wchar_t *
.text$mn:000019AA                 mov     ecx, [ebp+var_4C]
.text$mn:000019AD                 add     ecx, 78h ; 'x'  ; this
.text$mn:000019B0                 call    ?searchSubItemByName@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@@Z ; TreeView::searchSubItemByName(wchar_t const *,_TREEITEM *)
.text$mn:000019B5                 mov     [ebp+var_48], eax
.text$mn:000019B8                 cmp     [ebp+var_48], 0
.text$mn:000019BC                 jnz     short loc_19DB
.text$mn:000019BE                 push    offset $SG158458 ; "-1"
.text$mn:000019C3                 push    1               ; int
.text$mn:000019C5                 mov     eax, [ebp+var_50]
.text$mn:000019C8                 push    eax             ; struct _TREEITEM *
.text$mn:000019C9                 mov     ecx, [ebp+arg_0]
.text$mn:000019CC                 push    ecx             ; wchar_t *
.text$mn:000019CD                 mov     ecx, [ebp+var_4C]
.text$mn:000019D0                 add     ecx, 78h ; 'x'  ; this
.text$mn:000019D3                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:000019D8                 mov     [ebp+var_48], eax
.text$mn:000019DB
.text$mn:000019DB loc_19DB:                               ; CODE XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+64j
.text$mn:000019DB                 jmp     short loc_19E3
.text$mn:000019DD ; ---------------------------------------------------------------------------
.text$mn:000019DD
.text$mn:000019DD loc_19DD:                               ; CODE XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+3Ej
.text$mn:000019DD                                         ; FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+48j
.text$mn:000019DD                 mov     edx, [ebp+var_50]
.text$mn:000019E0                 mov     [ebp+var_48], edx
.text$mn:000019E3
.text$mn:000019E3 loc_19E3:                               ; CODE XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint):loc_19DBj
.text$mn:000019E3                 lea     eax, [ebp+Dest]
.text$mn:000019E6                 push    eax             ; wchar_t *
.text$mn:000019E7                 push    2               ; int
.text$mn:000019E9                 mov     ecx, [ebp+var_48]
.text$mn:000019EC                 push    ecx             ; struct _TREEITEM *
.text$mn:000019ED                 mov     edx, [ebp+arg_4]
.text$mn:000019F0                 push    edx             ; wchar_t *
.text$mn:000019F1                 mov     ecx, [ebp+var_4C]
.text$mn:000019F4                 add     ecx, 78h ; 'x'  ; this
.text$mn:000019F7                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:000019FC                 mov     ecx, [ebp+var_4]
.text$mn:000019FF                 xor     ecx, ebp
.text$mn:00001A01                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001A06                 mov     esp, ebp
.text$mn:00001A08                 pop     ebp
.text$mn:00001A09                 retn    0Ch
.text$mn:00001A09 ?addEntry@FunctionListPanel@@QAEXPB_W0I@Z endp
.text$mn:00001A09
.text$mn:00001A09 ; ---------------------------------------------------------------------------
.text$mn:00001A0C                 db 0Ch dup(0CCh)
.text$mn:00001A18
.text$mn:00001A18 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A18
.text$mn:00001A18 ; Attributes: bp-based frame
.text$mn:00001A18
.text$mn:00001A18 ; void __thiscall FunctionListPanel::removeAllEntries(FunctionListPanel *__hidden this)
.text$mn:00001A18                 public ?removeAllEntries@FunctionListPanel@@QAEXXZ
.text$mn:00001A18 ?removeAllEntries@FunctionListPanel@@QAEXXZ proc near
.text$mn:00001A18                                         ; CODE XREF: FunctionListPanel::reload(void)+F8p
.text$mn:00001A18
.text$mn:00001A18 var_4           = dword ptr -4
.text$mn:00001A18
.text$mn:00001A18                 push    ebp
.text$mn:00001A19                 mov     ebp, esp
.text$mn:00001A1B                 push    ecx
.text$mn:00001A1C                 mov     [ebp+var_4], ecx
.text$mn:00001A1F                 mov     ecx, [ebp+var_4]
.text$mn:00001A22                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001A25                 call    ?removeAllItems@TreeView@@QAEXXZ ; TreeView::removeAllItems(void)
.text$mn:00001A2A                 mov     esp, ebp
.text$mn:00001A2C                 pop     ebp
.text$mn:00001A2D                 retn
.text$mn:00001A2D ?removeAllEntries@FunctionListPanel@@QAEXXZ endp
.text$mn:00001A2D
.text$mn:00001A2D ; ---------------------------------------------------------------------------
.text$mn:00001A2E                 db 0Ah dup(0CCh)
.text$mn:00001A38
.text$mn:00001A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A38
.text$mn:00001A38 ; Attributes: bp-based frame
.text$mn:00001A38
.text$mn:00001A38 ; void __thiscall FunctionListPanel::searchFuncAndSwitchView(FunctionListPanel *__hidden this)
.text$mn:00001A38                 public ?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ
.text$mn:00001A38 ?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ proc near
.text$mn:00001A38                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+60Dp
.text$mn:00001A38
.text$mn:00001A38 var_240         = dword ptr -240h
.text$mn:00001A38 var_239         = byte ptr -239h
.text$mn:00001A38 var_238         = dword ptr -238h
.text$mn:00001A38 var_234         = byte ptr -234h
.text$mn:00001A38 lParam          = dword ptr -218h
.text$mn:00001A38 var_10          = dword ptr -10h
.text$mn:00001A38 var_C           = dword ptr -0Ch
.text$mn:00001A38 var_4           = dword ptr -4
.text$mn:00001A38
.text$mn:00001A38                 push    ebp
.text$mn:00001A39                 mov     ebp, esp
.text$mn:00001A3B                 push    0FFFFFFFFh
.text$mn:00001A3D                 push    offset __ehhandler$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ
.text$mn:00001A42                 mov     eax, large fs:0
.text$mn:00001A48                 push    eax
.text$mn:00001A49                 sub     esp, 234h
.text$mn:00001A4F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001A54                 xor     eax, ebp
.text$mn:00001A56                 mov     [ebp+var_10], eax
.text$mn:00001A59                 push    eax
.text$mn:00001A5A                 lea     eax, [ebp+var_C]
.text$mn:00001A5D                 mov     large fs:0, eax
.text$mn:00001A63                 mov     [ebp+var_238], ecx
.text$mn:00001A69                 lea     eax, [ebp+lParam]
.text$mn:00001A6F                 push    eax             ; lParam
.text$mn:00001A70                 push    104h            ; wParam
.text$mn:00001A75                 push    0Dh             ; Msg
.text$mn:00001A77                 mov     ecx, [ebp+var_238]
.text$mn:00001A7D                 mov     edx, [ecx+70h]
.text$mn:00001A80                 push    edx             ; hWnd
.text$mn:00001A81                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001A87                 mov     ecx, [ebp+var_238] ; this
.text$mn:00001A8D                 call    ?shouldSort@FunctionListPanel@@AAE_NXZ ; FunctionListPanel::shouldSort(void)
.text$mn:00001A92                 mov     [ebp+var_239], al
.text$mn:00001A98                 mov     eax, 2
.text$mn:00001A9D                 imul    ecx, eax, 0
.text$mn:00001AA0                 movzx   edx, word ptr [ebp+ecx+lParam]
.text$mn:00001AA8                 test    edx, edx
.text$mn:00001AAA                 jnz     short loc_1AFB
.text$mn:00001AAC                 push    0
.text$mn:00001AAE                 mov     ecx, [ebp+var_238]
.text$mn:00001AB4                 add     ecx, 0B8h ; '+'
.text$mn:00001ABA                 mov     eax, [ebp+var_238]
.text$mn:00001AC0                 mov     edx, [eax+0B8h]
.text$mn:00001AC6                 mov     eax, [edx+0Ch]
.text$mn:00001AC9                 call    eax
.text$mn:00001ACB                 push    1
.text$mn:00001ACD                 mov     ecx, [ebp+var_238]
.text$mn:00001AD3                 add     ecx, 78h ; 'x'
.text$mn:00001AD6                 mov     edx, [ebp+var_238]
.text$mn:00001ADC                 mov     eax, [edx+78h]
.text$mn:00001ADF                 mov     edx, [eax+0Ch]
.text$mn:00001AE2                 call    edx
.text$mn:00001AE4                 mov     eax, [ebp+var_238]
.text$mn:00001AEA                 add     eax, 78h ; 'x'
.text$mn:00001AED                 mov     ecx, [ebp+var_238]
.text$mn:00001AF3                 mov     [ecx+74h], eax
.text$mn:00001AF6                 jmp     loc_1C37
.text$mn:00001AFB ; ---------------------------------------------------------------------------
.text$mn:00001AFB
.text$mn:00001AFB loc_1AFB:                               ; CODE XREF: FunctionListPanel::searchFuncAndSwitchView(void)+72j
.text$mn:00001AFB                 mov     ecx, [ebp+var_238]
.text$mn:00001B01                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001B04                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001B09                 test    eax, eax
.text$mn:00001B0B                 jnz     short loc_1B12
.text$mn:00001B0D                 jmp     loc_1C5F
.text$mn:00001B12 ; ---------------------------------------------------------------------------
.text$mn:00001B12
.text$mn:00001B12 loc_1B12:                               ; CODE XREF: FunctionListPanel::searchFuncAndSwitchView(void)+D3j
.text$mn:00001B12                 mov     ecx, [ebp+var_238]
.text$mn:00001B18                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001B1E                 call    ?removeAllItems@TreeView@@QAEXXZ ; TreeView::removeAllItems(void)
.text$mn:00001B23                 mov     edx, [ebp+var_238]
.text$mn:00001B29                 mov     eax, [edx+130h]
.text$mn:00001B2F                 mov     ecx, [eax]      ; this
.text$mn:00001B31                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:00001B36                 mov     ecx, eax        ; this
.text$mn:00001B38                 call    ?getFileName@Buffer@@QBEPB_WXZ ; Buffer::getFileName(void)
.text$mn:00001B3D                 mov     [ebp+var_240], eax
.text$mn:00001B43                 push    offset $SG159724 ; "-1"
.text$mn:00001B48                 push    0               ; int
.text$mn:00001B4A                 push    0               ; struct _TREEITEM *
.text$mn:00001B4C                 mov     ecx, [ebp+var_240]
.text$mn:00001B52                 push    ecx             ; wchar_t *
.text$mn:00001B53                 mov     ecx, [ebp+var_238]
.text$mn:00001B59                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001B5F                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00001B64                 lea     edx, [ebp+lParam]
.text$mn:00001B6A                 push    edx             ; Str
.text$mn:00001B6B                 lea     ecx, [ebp+var_234]
.text$mn:00001B71                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B76                 mov     [ebp+var_4], 0
.text$mn:00001B7D                 push    2
.text$mn:00001B7F                 lea     eax, [ebp+var_234]
.text$mn:00001B85                 push    eax
.text$mn:00001B86                 mov     ecx, [ebp+var_238]
.text$mn:00001B8C                 add     ecx, 0B8h ; '+'
.text$mn:00001B92                 push    ecx
.text$mn:00001B93                 mov     ecx, [ebp+var_238]
.text$mn:00001B99                 add     ecx, 78h ; 'x'
.text$mn:00001B9C                 call    ?searchLeafAndBuildTree@TreeView@@QAE_NAAV1@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z ; TreeView::searchLeafAndBuildTree(TreeView &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,int)
.text$mn:00001BA1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001BA8                 lea     ecx, [ebp+var_234]
.text$mn:00001BAE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001BB3                 push    1
.text$mn:00001BB5                 mov     ecx, [ebp+var_238]
.text$mn:00001BBB                 add     ecx, 0B8h ; '+'
.text$mn:00001BC1                 mov     edx, [ebp+var_238]
.text$mn:00001BC7                 mov     eax, [edx+0B8h]
.text$mn:00001BCD                 mov     edx, [eax+0Ch]
.text$mn:00001BD0                 call    edx
.text$mn:00001BD2                 mov     ecx, [ebp+var_238]
.text$mn:00001BD8                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001BDE                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001BE3                 push    eax             ; struct _TREEITEM *
.text$mn:00001BE4                 mov     ecx, [ebp+var_238]
.text$mn:00001BEA                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001BF0                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:00001BF5                 push    0
.text$mn:00001BF7                 mov     ecx, [ebp+var_238]
.text$mn:00001BFD                 add     ecx, 78h ; 'x'
.text$mn:00001C00                 mov     eax, [ebp+var_238]
.text$mn:00001C06                 mov     edx, [eax+78h]
.text$mn:00001C09                 mov     eax, [edx+0Ch]
.text$mn:00001C0C                 call    eax
.text$mn:00001C0E                 mov     ecx, [ebp+var_238]
.text$mn:00001C14                 add     ecx, 0B8h ; '+'
.text$mn:00001C1A                 mov     edx, [ebp+var_238]
.text$mn:00001C20                 mov     [edx+74h], ecx
.text$mn:00001C23                 push    1               ; bErase
.text$mn:00001C25                 push    0               ; lpRect
.text$mn:00001C27                 mov     eax, [ebp+var_238]
.text$mn:00001C2D                 mov     ecx, [eax+70h]
.text$mn:00001C30                 push    ecx             ; hWnd
.text$mn:00001C31                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:00001C37
.text$mn:00001C37 loc_1C37:                               ; CODE XREF: FunctionListPanel::searchFuncAndSwitchView(void)+BEj
.text$mn:00001C37                 movzx   edx, [ebp+var_239]
.text$mn:00001C3E                 test    edx, edx
.text$mn:00001C40                 jz      short loc_1C5F
.text$mn:00001C42                 mov     eax, [ebp+var_238]
.text$mn:00001C48                 mov     ecx, [eax+74h]  ; this
.text$mn:00001C4B                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001C50                 push    eax             ; struct _TREEITEM *
.text$mn:00001C51                 mov     ecx, [ebp+var_238]
.text$mn:00001C57                 mov     ecx, [ecx+74h]  ; this
.text$mn:00001C5A                 call    ?sort@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::sort(_TREEITEM *)
.text$mn:00001C5F
.text$mn:00001C5F loc_1C5F:                               ; CODE XREF: FunctionListPanel::searchFuncAndSwitchView(void)+D5j
.text$mn:00001C5F                                         ; FunctionListPanel::searchFuncAndSwitchView(void)+208j
.text$mn:00001C5F                 mov     ecx, [ebp+var_C]
.text$mn:00001C62                 mov     large fs:0, ecx
.text$mn:00001C69                 pop     ecx
.text$mn:00001C6A                 mov     ecx, [ebp+var_10]
.text$mn:00001C6D                 xor     ecx, ebp
.text$mn:00001C6F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001C74                 mov     esp, ebp
.text$mn:00001C76                 pop     ebp
.text$mn:00001C77                 retn
.text$mn:00001C77 ?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ endp
.text$mn:00001C77
.text$mn:00001C78
.text$mn:00001C78 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C78
.text$mn:00001C78 ; Attributes: bp-based frame
.text$mn:00001C78
.text$mn:00001C78 ; int __stdcall FunctionListPanel::run_dlgProc(FunctionListPanel *this, unsigned int, HDC hdc, __int32)
.text$mn:00001C78                 public ?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z
.text$mn:00001C78 ?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z proc near
.text$mn:00001C78
.text$mn:00001C78 var_2E8         = dword ptr -2E8h
.text$mn:00001C78 dwStyle         = dword ptr -2E4h
.text$mn:00001C78 nHeight         = dword ptr -2E0h
.text$mn:00001C78 var_2DC         = dword ptr -2DCh
.text$mn:00001C78 var_2D8         = dword ptr -2D8h
.text$mn:00001C78 var_2D4         = dword ptr -2D4h
.text$mn:00001C78 var_2D0         = dword ptr -2D0h
.text$mn:00001C78 var_2CC         = dword ptr -2CCh
.text$mn:00001C78 var_2C8         = dword ptr -2C8h
.text$mn:00001C78 var_2C4         = dword ptr -2C4h
.text$mn:00001C78 var_2C0         = dword ptr -2C0h
.text$mn:00001C78 wParam          = dword ptr -2BCh
.text$mn:00001C78 var_2B8         = dword ptr -2B8h
.text$mn:00001C78 nWidth          = dword ptr -2B4h
.text$mn:00001C78 var_2B0         = dword ptr -2B0h
.text$mn:00001C78 var_2AC         = dword ptr -2ACh
.text$mn:00001C78 hWnd            = dword ptr -2A8h
.text$mn:00001C78 var_2A4         = dword ptr -2A4h
.text$mn:00001C78 var_2A0         = dword ptr -2A0h
.text$mn:00001C78 var_29C         = byte ptr -29Ch
.text$mn:00001C78 var_280         = byte ptr -280h
.text$mn:00001C78 Rect            = tagRECT ptr -264h
.text$mn:00001C78 var_254         = dword ptr -254h
.text$mn:00001C78 var_250         = dword ptr -250h
.text$mn:00001C78 var_24C         = byte ptr -24Ch
.text$mn:00001C78 var_24B         = byte ptr -24Bh
.text$mn:00001C78 var_244         = dword ptr -244h
.text$mn:00001C78 lParam          = dword ptr -218h
.text$mn:00001C78 var_10          = dword ptr -10h
.text$mn:00001C78 var_C           = dword ptr -0Ch
.text$mn:00001C78 var_4           = dword ptr -4
.text$mn:00001C78 this            = dword ptr  8
.text$mn:00001C78 arg_4           = dword ptr  0Ch
.text$mn:00001C78 hdc             = dword ptr  10h
.text$mn:00001C78 arg_C           = dword ptr  14h
.text$mn:00001C78
.text$mn:00001C78                 push    ebp
.text$mn:00001C79                 mov     ebp, esp
.text$mn:00001C7B                 push    0FFFFFFFFh
.text$mn:00001C7D                 push    offset __ehhandler$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z
.text$mn:00001C82                 mov     eax, large fs:0
.text$mn:00001C88                 push    eax
.text$mn:00001C89                 sub     esp, 2DCh
.text$mn:00001C8F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001C94                 xor     eax, ebp
.text$mn:00001C96                 mov     [ebp+var_10], eax
.text$mn:00001C99                 push    eax
.text$mn:00001C9A                 lea     eax, [ebp+var_C]
.text$mn:00001C9D                 mov     large fs:0, eax
.text$mn:00001CA3                 mov     eax, [ebp+arg_4]
.text$mn:00001CA6                 mov     [ebp+var_2A0], eax
.text$mn:00001CAC                 cmp     [ebp+var_2A0], 110h
.text$mn:00001CB6                 ja      short loc_1CF4
.text$mn:00001CB8                 cmp     [ebp+var_2A0], 110h
.text$mn:00001CC2                 jz      loc_1DF1
.text$mn:00001CC8                 cmp     [ebp+var_2A0], 2
.text$mn:00001CCF                 jz      loc_2212
.text$mn:00001CD5                 cmp     [ebp+var_2A0], 5
.text$mn:00001CDC                 jz      loc_22FF
.text$mn:00001CE2                 cmp     [ebp+var_2A0], 4Eh ; 'N'
.text$mn:00001CE9                 jz      loc_22E9
.text$mn:00001CEF                 jmp     loc_23F7
.text$mn:00001CF4 ; ---------------------------------------------------------------------------
.text$mn:00001CF4
.text$mn:00001CF4 loc_1CF4:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3Ej
.text$mn:00001CF4                 cmp     [ebp+var_2A0], 111h
.text$mn:00001CFE                 jz      loc_224C
.text$mn:00001D04                 cmp     [ebp+var_2A0], 133h
.text$mn:00001D0E                 jz      short loc_1D15
.text$mn:00001D10                 jmp     loc_23F7
.text$mn:00001D15 ; ---------------------------------------------------------------------------
.text$mn:00001D15
.text$mn:00001D15 loc_1D15:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+96j
.text$mn:00001D15                 mov     ecx, ds:?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA
.text$mn:00001D1B                 and     ecx, 1
.text$mn:00001D1E                 jnz     short loc_1D4D
.text$mn:00001D20                 mov     edx, ds:?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA
.text$mn:00001D26                 or      edx, 1
.text$mn:00001D29                 mov     ds:?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA, edx
.text$mn:00001D2F                 mov     [ebp+var_4], 0
.text$mn:00001D36                 push    6666FFh         ; color
.text$mn:00001D3B                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:00001D41                 mov     ds:?hBrushBackground@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4PAUHBRUSH__@@A, eax ; HBRUSH__ * `FunctionListPanel::run_dlgProc(uint,uint,long)'::`5'::hBrushBackground
.text$mn:00001D46                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D4D
.text$mn:00001D4D loc_1D4D:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+A6j
.text$mn:00001D4D                 lea     eax, [ebp+lParam]
.text$mn:00001D53                 push    eax             ; lParam
.text$mn:00001D54                 push    104h            ; wParam
.text$mn:00001D59                 push    0Dh             ; Msg
.text$mn:00001D5B                 mov     ecx, [ebp+this]
.text$mn:00001D5E                 mov     edx, [ecx+70h]
.text$mn:00001D61                 push    edx             ; hWnd
.text$mn:00001D62                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001D68                 mov     eax, 2
.text$mn:00001D6D                 imul    ecx, eax, 0
.text$mn:00001D70                 movzx   edx, word ptr [ebp+ecx+lParam]
.text$mn:00001D78                 test    edx, edx
.text$mn:00001D7A                 jnz     short loc_1D83
.text$mn:00001D7C                 xor     eax, eax
.text$mn:00001D7E                 jmp     loc_2423
.text$mn:00001D83 ; ---------------------------------------------------------------------------
.text$mn:00001D83
.text$mn:00001D83 loc_1D83:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+102j
.text$mn:00001D83                 mov     ecx, [ebp+this]
.text$mn:00001D86                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001D8C                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00001D91                 mov     [ebp+var_2CC], eax
.text$mn:00001D97                 cmp     [ebp+var_2CC], 0
.text$mn:00001D9E                 jz      short loc_1DC2
.text$mn:00001DA0                 mov     eax, [ebp+var_2CC]
.text$mn:00001DA6                 push    eax             ; struct _TREEITEM *
.text$mn:00001DA7                 mov     ecx, [ebp+this]
.text$mn:00001DAA                 add     ecx, 0B8h ; '+' ; this
.text$mn:00001DB0                 call    ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getChildFrom(_TREEITEM *)
.text$mn:00001DB5                 test    eax, eax
.text$mn:00001DB7                 jz      short loc_1DC0
.text$mn:00001DB9                 xor     eax, eax
.text$mn:00001DBB                 jmp     loc_2423
.text$mn:00001DC0 ; ---------------------------------------------------------------------------
.text$mn:00001DC0
.text$mn:00001DC0 loc_1DC0:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+13Fj
.text$mn:00001DC0                 jmp     short loc_1DC9
.text$mn:00001DC2 ; ---------------------------------------------------------------------------
.text$mn:00001DC2
.text$mn:00001DC2 loc_1DC2:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+126j
.text$mn:00001DC2                 xor     eax, eax
.text$mn:00001DC4                 jmp     loc_2423
.text$mn:00001DC9 ; ---------------------------------------------------------------------------
.text$mn:00001DC9
.text$mn:00001DC9 loc_1DC9:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long):loc_1DC0j
.text$mn:00001DC9                 push    0FFFFFFh        ; color
.text$mn:00001DCE                 mov     ecx, [ebp+hdc]
.text$mn:00001DD1                 push    ecx             ; hdc
.text$mn:00001DD2                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:00001DD8                 push    6666FFh         ; color
.text$mn:00001DDD                 mov     edx, [ebp+hdc]
.text$mn:00001DE0                 push    edx             ; hdc
.text$mn:00001DE1                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text$mn:00001DE7                 mov     eax, ds:?hBrushBackground@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4PAUHBRUSH__@@A ; HBRUSH__ * `FunctionListPanel::run_dlgProc(uint,uint,long)'::`5'::hBrushBackground
.text$mn:00001DEC                 jmp     loc_2423
.text$mn:00001DF1 ; ---------------------------------------------------------------------------
.text$mn:00001DF1
.text$mn:00001DF1 loc_1DF1:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4Aj
.text$mn:00001DF1                 mov     [ebp+nWidth], 64h ; 'd'
.text$mn:00001DFB                 mov     [ebp+nHeight], 14h
.text$mn:00001E05                 mov     [ebp+dwStyle], 50009931h
.text$mn:00001E0F                 push    0               ; lpParam
.text$mn:00001E11                 mov     eax, [ebp+this]
.text$mn:00001E14                 mov     ecx, [eax+4]
.text$mn:00001E17                 push    ecx             ; hInstance
.text$mn:00001E18                 push    0               ; hMenu
.text$mn:00001E1A                 mov     edx, [ebp+this]
.text$mn:00001E1D                 mov     eax, [edx+0Ch]
.text$mn:00001E20                 push    eax             ; hWndParent
.text$mn:00001E21                 push    0               ; nHeight
.text$mn:00001E23                 push    0               ; nWidth
.text$mn:00001E25                 push    0               ; Y
.text$mn:00001E27                 push    0               ; X
.text$mn:00001E29                 mov     ecx, [ebp+dwStyle]
.text$mn:00001E2F                 push    ecx             ; dwStyle
.text$mn:00001E30                 push    0               ; lpWindowName
.text$mn:00001E32                 push    offset $SG159801 ; "ToolbarWindow32"
.text$mn:00001E37                 push    0               ; dwExStyle
.text$mn:00001E39                 call    dword ptr ds:__imp__CreateWindowExW@48 ; CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:00001E3F                 mov     edx, [ebp+this]
.text$mn:00001E42                 mov     [edx+6Ch], eax
.text$mn:00001E45                 push    offset ?funclstToolbarProc@@YGJPAUHWND__@@IIJ@Z ; dwNewLong
.text$mn:00001E4A                 push    0FFFFFFFCh      ; nIndex
.text$mn:00001E4C                 mov     eax, [ebp+this]
.text$mn:00001E4F                 mov     ecx, [eax+6Ch]
.text$mn:00001E52                 push    ecx             ; hWnd
.text$mn:00001E53                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001E59                 mov     ds:_oldFunclstToolbarProc, eax
.text$mn:00001E5E                 mov     edx, [ebp+this]
.text$mn:00001E61                 mov     eax, [edx+4]
.text$mn:00001E64                 mov     [ebp+var_2B0], eax
.text$mn:00001E6A                 mov     [ebp+var_2AC], 0
.text$mn:00001E74                 mov     [ebp+var_2AC], 277h
.text$mn:00001E7E                 lea     ecx, [ebp+var_2B0]
.text$mn:00001E84                 push    ecx             ; lParam
.text$mn:00001E85                 push    1               ; wParam
.text$mn:00001E87                 push    413h            ; Msg
.text$mn:00001E8C                 mov     edx, [ebp+this]
.text$mn:00001E8F                 mov     eax, [edx+6Ch]
.text$mn:00001E92                 push    eax             ; hWnd
.text$mn:00001E93                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001E99                 mov     [ebp+var_2AC], 278h
.text$mn:00001EA3                 lea     ecx, [ebp+var_2B0]
.text$mn:00001EA9                 push    ecx             ; lParam
.text$mn:00001EAA                 push    1               ; wParam
.text$mn:00001EAC                 push    413h            ; Msg
.text$mn:00001EB1                 mov     edx, [ebp+this]
.text$mn:00001EB4                 mov     eax, [edx+6Ch]
.text$mn:00001EB7                 push    eax             ; hWnd
.text$mn:00001EB8                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001EBE                 mov     ecx, 14h
.text$mn:00001EC3                 imul    edx, ecx, 0
.text$mn:00001EC6                 mov     [ebp+edx+var_250], 0
.text$mn:00001ED1                 mov     eax, [ebp+nWidth]
.text$mn:00001ED7                 add     eax, 0Ah
.text$mn:00001EDA                 mov     ecx, 14h
.text$mn:00001EDF                 imul    edx, ecx, 0
.text$mn:00001EE2                 mov     [ebp+edx+var_254], eax
.text$mn:00001EE9                 mov     eax, 14h
.text$mn:00001EEE                 imul    ecx, eax, 0
.text$mn:00001EF1                 mov     [ebp+ecx+var_24C], 4
.text$mn:00001EF9                 mov     edx, 14h
.text$mn:00001EFE                 imul    eax, edx, 0
.text$mn:00001F01                 mov     [ebp+eax+var_24B], 1
.text$mn:00001F09                 mov     ecx, 14h
.text$mn:00001F0E                 imul    edx, ecx, 0
.text$mn:00001F11                 mov     [ebp+edx+var_244], 0
.text$mn:00001F1C                 mov     eax, 14h
.text$mn:00001F21                 shl     eax, 0
.text$mn:00001F24                 mov     [ebp+eax+var_250], 0D4Dh
.text$mn:00001F2F                 mov     ecx, 14h
.text$mn:00001F34                 shl     ecx, 0
.text$mn:00001F37                 mov     [ebp+ecx+var_254], 0
.text$mn:00001F42                 mov     edx, 14h
.text$mn:00001F47                 shl     edx, 0
.text$mn:00001F4A                 mov     [ebp+edx+var_24C], 4
.text$mn:00001F52                 mov     eax, 14h
.text$mn:00001F57                 shl     eax, 0
.text$mn:00001F5A                 mov     [ebp+eax+var_24B], 12h
.text$mn:00001F62                 mov     ecx, 14h
.text$mn:00001F67                 shl     ecx, 0
.text$mn:00001F6A                 mov     [ebp+ecx+var_244], offset $SG159809
.text$mn:00001F75                 mov     edx, 14h
.text$mn:00001F7A                 shl     edx, 1
.text$mn:00001F7C                 mov     [ebp+edx+var_250], 0D4Ch
.text$mn:00001F87                 mov     eax, 14h
.text$mn:00001F8C                 shl     eax, 1
.text$mn:00001F8E                 mov     [ebp+eax+var_254], 1
.text$mn:00001F99                 mov     ecx, 14h
.text$mn:00001F9E                 shl     ecx, 1
.text$mn:00001FA0                 mov     [ebp+ecx+var_24C], 4
.text$mn:00001FA8                 mov     edx, 14h
.text$mn:00001FAD                 shl     edx, 1
.text$mn:00001FAF                 mov     [ebp+edx+var_24B], 10h
.text$mn:00001FB7                 mov     eax, 14h
.text$mn:00001FBC                 shl     eax, 1
.text$mn:00001FBE                 mov     [ebp+eax+var_244], offset $SG159811
.text$mn:00001FC9                 push    0               ; lParam
.text$mn:00001FCB                 push    14h             ; wParam
.text$mn:00001FCD                 push    41Eh            ; Msg
.text$mn:00001FD2                 mov     ecx, [ebp+this]
.text$mn:00001FD5                 mov     edx, [ecx+6Ch]
.text$mn:00001FD8                 push    edx             ; hWnd
.text$mn:00001FD9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001FDF                 push    100010h         ; lParam
.text$mn:00001FE4                 push    0               ; wParam
.text$mn:00001FE6                 push    41Fh            ; Msg
.text$mn:00001FEB                 mov     eax, [ebp+this]
.text$mn:00001FEE                 mov     ecx, [eax+6Ch]
.text$mn:00001FF1                 push    ecx             ; hWnd
.text$mn:00001FF2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001FF8                 lea     edx, [ebp+var_254]
.text$mn:00001FFE                 push    edx             ; lParam
.text$mn:00001FFF                 push    3               ; wParam
.text$mn:00002001                 push    444h            ; Msg
.text$mn:00002006                 mov     eax, [ebp+this]
.text$mn:00002009                 mov     ecx, [eax+6Ch]
.text$mn:0000200C                 push    ecx             ; hWnd
.text$mn:0000200D                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002013                 push    0               ; lParam
.text$mn:00002015                 push    0               ; wParam
.text$mn:00002017                 push    421h            ; Msg
.text$mn:0000201C                 mov     edx, [ebp+this]
.text$mn:0000201F                 mov     eax, [edx+6Ch]
.text$mn:00002022                 push    eax             ; hWnd
.text$mn:00002023                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002029                 push    5               ; nCmdShow
.text$mn:0000202B                 mov     ecx, [ebp+this]
.text$mn:0000202E                 mov     edx, [ecx+6Ch]
.text$mn:00002031                 push    edx             ; hWnd
.text$mn:00002032                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002038                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:0000203D                 mov     ecx, eax        ; this
.text$mn:0000203F                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:00002044                 mov     [ebp+var_2C8], eax
.text$mn:0000204A                 push    offset $SG159827 ; "SortTip"
.text$mn:0000204F                 push    offset $SG159828 ; "FunctionList"
.text$mn:00002054                 mov     ecx, [ebp+this]
.text$mn:00002057                 add     ecx, 0F8h ; '°'
.text$mn:0000205D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002062                 push    eax
.text$mn:00002063                 lea     eax, [ebp+var_29C]
.text$mn:00002069                 push    eax
.text$mn:0000206A                 mov     ecx, [ebp+var_2C8]
.text$mn:00002070                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:00002075                 mov     [ebp+var_2D0], eax
.text$mn:0000207B                 mov     ecx, [ebp+var_2D0]
.text$mn:00002081                 mov     [ebp+var_2DC], ecx
.text$mn:00002087                 mov     [ebp+var_4], 1
.text$mn:0000208E                 mov     edx, [ebp+var_2DC]
.text$mn:00002094                 push    edx
.text$mn:00002095                 mov     ecx, [ebp+this]
.text$mn:00002098                 add     ecx, 0F8h ; '°'
.text$mn:0000209E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000020A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000020AA                 lea     ecx, [ebp+var_29C]
.text$mn:000020B0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000020B5                 push    offset $SG159830 ; "ReloadTip"
.text$mn:000020BA                 push    offset $SG159831 ; "FunctionList"
.text$mn:000020BF                 mov     ecx, [ebp+this]
.text$mn:000020C2                 add     ecx, 114h
.text$mn:000020C8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000020CD                 push    eax
.text$mn:000020CE                 lea     eax, [ebp+var_280]
.text$mn:000020D4                 push    eax
.text$mn:000020D5                 mov     ecx, [ebp+var_2C8]
.text$mn:000020DB                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:000020E0                 mov     [ebp+var_2D4], eax
.text$mn:000020E6                 mov     ecx, [ebp+var_2D4]
.text$mn:000020EC                 mov     [ebp+var_2D8], ecx
.text$mn:000020F2                 mov     [ebp+var_4], 2
.text$mn:000020F9                 mov     edx, [ebp+var_2D8]
.text$mn:000020FF                 push    edx
.text$mn:00002100                 mov     ecx, [ebp+this]
.text$mn:00002103                 add     ecx, 114h
.text$mn:00002109                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000210E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002115                 lea     ecx, [ebp+var_280]
.text$mn:0000211B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002120                 push    0               ; lpParam
.text$mn:00002122                 mov     eax, [ebp+this]
.text$mn:00002125                 mov     ecx, [eax+4]
.text$mn:00002128                 push    ecx             ; hInstance
.text$mn:00002129                 push    offset hMenu    ; hMenu
.text$mn:0000212E                 mov     edx, [ebp+this]
.text$mn:00002131                 mov     eax, [edx+6Ch]
.text$mn:00002134                 push    eax             ; hWndParent
.text$mn:00002135                 mov     ecx, [ebp+nHeight]
.text$mn:0000213B                 push    ecx             ; nHeight
.text$mn:0000213C                 mov     edx, [ebp+nWidth]
.text$mn:00002142                 push    edx             ; nWidth
.text$mn:00002143                 push    2               ; Y
.text$mn:00002145                 push    2               ; X
.text$mn:00002147                 push    50800040h       ; dwStyle
.text$mn:0000214C                 push    0               ; lpWindowName
.text$mn:0000214E                 push    offset $SG159833 ; "Edit"
.text$mn:00002153                 push    0               ; dwExStyle
.text$mn:00002155                 call    dword ptr ds:__imp__CreateWindowExW@48 ; CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:0000215B                 mov     ecx, [ebp+this]
.text$mn:0000215E                 mov     [ecx+70h], eax
.text$mn:00002161                 push    11h             ; i
.text$mn:00002163                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text$mn:00002169                 mov     [ebp+wParam], eax
.text$mn:0000216F                 cmp     [ebp+wParam], 0
.text$mn:00002176                 jz      short loc_2190
.text$mn:00002178                 push    1               ; lParam
.text$mn:0000217A                 mov     edx, [ebp+wParam]
.text$mn:00002180                 push    edx             ; wParam
.text$mn:00002181                 push    30h ; '0'       ; Msg
.text$mn:00002183                 mov     eax, [ebp+this]
.text$mn:00002186                 mov     ecx, [eax+70h]
.text$mn:00002189                 push    ecx             ; hWnd
.text$mn:0000218A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002190
.text$mn:00002190 loc_2190:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4FEj
.text$mn:00002190                 push    0D4Ah
.text$mn:00002195                 mov     edx, [ebp+this]
.text$mn:00002198                 mov     eax, [edx+0Ch]
.text$mn:0000219B                 push    eax
.text$mn:0000219C                 mov     ecx, [ebp+this]
.text$mn:0000219F                 mov     edx, [ecx+4]
.text$mn:000021A2                 push    edx
.text$mn:000021A3                 mov     ecx, [ebp+this]
.text$mn:000021A6                 add     ecx, 0B8h ; '+'
.text$mn:000021AC                 mov     eax, [ebp+this]
.text$mn:000021AF                 mov     edx, [eax+0B8h]
.text$mn:000021B5                 mov     eax, [edx+30h]
.text$mn:000021B8                 call    eax
.text$mn:000021BA                 push    0D49h
.text$mn:000021BF                 mov     ecx, [ebp+this]
.text$mn:000021C2                 mov     edx, [ecx+0Ch]
.text$mn:000021C5                 push    edx
.text$mn:000021C6                 mov     eax, [ebp+this]
.text$mn:000021C9                 mov     ecx, [eax+4]
.text$mn:000021CC                 push    ecx
.text$mn:000021CD                 mov     ecx, [ebp+this]
.text$mn:000021D0                 add     ecx, 78h ; 'x'
.text$mn:000021D3                 mov     edx, [ebp+this]
.text$mn:000021D6                 mov     eax, [edx+78h]
.text$mn:000021D9                 mov     edx, [eax+30h]
.text$mn:000021DC                 call    edx
.text$mn:000021DE                 push    26Eh            ; int
.text$mn:000021E3                 push    26Dh            ; __int16
.text$mn:000021E8                 push    26Ch            ; __int16
.text$mn:000021ED                 mov     ecx, [ebp+this] ; this
.text$mn:000021F0                 call    ?setTreeViewImageList@FunctionListPanel@@AAEHHHH@Z ; FunctionListPanel::setTreeViewImageList(int,int,int)
.text$mn:000021F5                 push    1
.text$mn:000021F7                 mov     ecx, [ebp+this]
.text$mn:000021FA                 add     ecx, 78h ; 'x'
.text$mn:000021FD                 mov     eax, [ebp+this]
.text$mn:00002200                 mov     edx, [eax+78h]
.text$mn:00002203                 mov     eax, [edx+0Ch]
.text$mn:00002206                 call    eax
.text$mn:00002208                 mov     eax, 1
.text$mn:0000220D                 jmp     loc_2423
.text$mn:00002212 ; ---------------------------------------------------------------------------
.text$mn:00002212
.text$mn:00002212 loc_2212:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+57j
.text$mn:00002212                 mov     ecx, [ebp+this]
.text$mn:00002215                 add     ecx, 78h ; 'x'
.text$mn:00002218                 mov     edx, [ebp+this]
.text$mn:0000221B                 mov     eax, [edx+78h]
.text$mn:0000221E                 mov     edx, [eax+8]
.text$mn:00002221                 call    edx
.text$mn:00002223                 mov     ecx, [ebp+this]
.text$mn:00002226                 add     ecx, 0B8h ; '+'
.text$mn:0000222C                 mov     eax, [ebp+this]
.text$mn:0000222F                 mov     edx, [eax+0B8h]
.text$mn:00002235                 mov     eax, [edx+8]
.text$mn:00002238                 call    eax
.text$mn:0000223A                 mov     ecx, [ebp+this]
.text$mn:0000223D                 mov     edx, [ecx+6Ch]
.text$mn:00002240                 push    edx             ; hWnd
.text$mn:00002241                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:00002247                 jmp     loc_240E
.text$mn:0000224C ; ---------------------------------------------------------------------------
.text$mn:0000224C
.text$mn:0000224C loc_224C:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+86j
.text$mn:0000224C                 mov     eax, [ebp+hdc]
.text$mn:0000224F                 shr     eax, 10h
.text$mn:00002252                 and     eax, 0FFFFh
.text$mn:00002257                 movzx   ecx, ax
.text$mn:0000225A                 cmp     ecx, 300h
.text$mn:00002260                 jnz     short loc_2294
.text$mn:00002262                 mov     edx, [ebp+hdc]
.text$mn:00002265                 and     edx, 0FFFFh
.text$mn:0000226B                 movzx   eax, dx
.text$mn:0000226E                 mov     [ebp+var_2E8], eax
.text$mn:00002274                 cmp     [ebp+var_2E8], 0D4Bh
.text$mn:0000227E                 jz      short loc_2282
.text$mn:00002280                 jmp     short loc_2294
.text$mn:00002282 ; ---------------------------------------------------------------------------
.text$mn:00002282
.text$mn:00002282 loc_2282:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+606j
.text$mn:00002282                 mov     ecx, [ebp+this] ; this
.text$mn:00002285                 call    ?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ ; FunctionListPanel::searchFuncAndSwitchView(void)
.text$mn:0000228A                 mov     eax, 1
.text$mn:0000228F                 jmp     loc_2423
.text$mn:00002294 ; ---------------------------------------------------------------------------
.text$mn:00002294
.text$mn:00002294 loc_2294:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+5E8j
.text$mn:00002294                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+608j
.text$mn:00002294                 mov     ecx, [ebp+hdc]
.text$mn:00002297                 and     ecx, 0FFFFh
.text$mn:0000229D                 movzx   edx, cx
.text$mn:000022A0                 mov     [ebp+var_2C4], edx
.text$mn:000022A6                 cmp     [ebp+var_2C4], 0D4Ch
.text$mn:000022B0                 jz      short loc_22D2
.text$mn:000022B2                 cmp     [ebp+var_2C4], 0D4Dh
.text$mn:000022BC                 jz      short loc_22C0
.text$mn:000022BE                 jmp     short loc_22E4
.text$mn:000022C0 ; ---------------------------------------------------------------------------
.text$mn:000022C0
.text$mn:000022C0 loc_22C0:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+644j
.text$mn:000022C0                 mov     ecx, [ebp+this] ; this
.text$mn:000022C3                 call    ?sortOrUnsort@FunctionListPanel@@QAEXXZ ; FunctionListPanel::sortOrUnsort(void)
.text$mn:000022C8                 mov     eax, 1
.text$mn:000022CD                 jmp     loc_2423
.text$mn:000022D2 ; ---------------------------------------------------------------------------
.text$mn:000022D2
.text$mn:000022D2 loc_22D2:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+638j
.text$mn:000022D2                 mov     ecx, [ebp+this] ; this
.text$mn:000022D5                 call    ?reload@FunctionListPanel@@QAEXXZ ; FunctionListPanel::reload(void)
.text$mn:000022DA                 mov     eax, 1
.text$mn:000022DF                 jmp     loc_2423
.text$mn:000022E4 ; ---------------------------------------------------------------------------
.text$mn:000022E4
.text$mn:000022E4 loc_22E4:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+646j
.text$mn:000022E4                 jmp     loc_240E
.text$mn:000022E9 ; ---------------------------------------------------------------------------
.text$mn:000022E9
.text$mn:000022E9 loc_22E9:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+71j
.text$mn:000022E9                 mov     eax, [ebp+arg_C]
.text$mn:000022EC                 push    eax             ; struct tagNMHDR *
.text$mn:000022ED                 mov     ecx, [ebp+this] ; this
.text$mn:000022F0                 call    ?notified@FunctionListPanel@@AAEXPAUtagNMHDR@@@Z ; FunctionListPanel::notified(tagNMHDR *)
.text$mn:000022F5                 mov     eax, 1
.text$mn:000022FA                 jmp     loc_2423
.text$mn:000022FF ; ---------------------------------------------------------------------------
.text$mn:000022FF
.text$mn:000022FF loc_22FF:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+64j
.text$mn:000022FF                 mov     ecx, [ebp+arg_C]
.text$mn:00002302                 and     ecx, 0FFFFh
.text$mn:00002308                 movzx   edx, cx
.text$mn:0000230B                 mov     [ebp+var_2A4], edx
.text$mn:00002311                 mov     eax, [ebp+arg_C]
.text$mn:00002314                 shr     eax, 10h
.text$mn:00002317                 and     eax, 0FFFFh
.text$mn:0000231C                 movzx   ecx, ax
.text$mn:0000231F                 mov     [ebp+var_2C0], ecx
.text$mn:00002325                 lea     edx, [ebp+Rect]
.text$mn:0000232B                 push    edx             ; lpRect
.text$mn:0000232C                 mov     eax, [ebp+this]
.text$mn:0000232F                 mov     ecx, [eax+6Ch]
.text$mn:00002332                 push    ecx             ; hWnd
.text$mn:00002333                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00002339                 push    1               ; bRepaint
.text$mn:0000233B                 mov     edx, [ebp+Rect.bottom]
.text$mn:00002341                 push    edx             ; nHeight
.text$mn:00002342                 mov     eax, [ebp+var_2A4]
.text$mn:00002348                 push    eax             ; nWidth
.text$mn:00002349                 push    0               ; Y
.text$mn:0000234B                 push    0               ; X
.text$mn:0000234D                 mov     ecx, [ebp+this]
.text$mn:00002350                 mov     edx, [ecx+6Ch]
.text$mn:00002353                 push    edx             ; hWnd
.text$mn:00002354                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000235A                 mov     ecx, [ebp+this]
.text$mn:0000235D                 add     ecx, 78h ; 'x'  ; this
.text$mn:00002360                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002365                 mov     [ebp+hWnd], eax
.text$mn:0000236B                 cmp     [ebp+hWnd], 0
.text$mn:00002372                 jz      short loc_23A6
.text$mn:00002374                 push    1               ; bRepaint
.text$mn:00002376                 mov     eax, [ebp+var_2C0]
.text$mn:0000237C                 sub     eax, [ebp+Rect.bottom]
.text$mn:00002382                 sub     eax, 2
.text$mn:00002385                 push    eax             ; nHeight
.text$mn:00002386                 mov     ecx, [ebp+var_2A4]
.text$mn:0000238C                 push    ecx             ; nWidth
.text$mn:0000238D                 mov     edx, [ebp+Rect.bottom]
.text$mn:00002393                 add     edx, 2
.text$mn:00002396                 push    edx             ; Y
.text$mn:00002397                 push    0               ; X
.text$mn:00002399                 mov     eax, [ebp+hWnd]
.text$mn:0000239F                 push    eax             ; hWnd
.text$mn:000023A0                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:000023A6
.text$mn:000023A6 loc_23A6:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+6FAj
.text$mn:000023A6                 mov     ecx, [ebp+this]
.text$mn:000023A9                 add     ecx, 0B8h ; '+' ; this
.text$mn:000023AF                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000023B4                 mov     [ebp+var_2B8], eax
.text$mn:000023BA                 cmp     [ebp+var_2B8], 0
.text$mn:000023C1                 jz      short loc_23F5
.text$mn:000023C3                 push    1               ; bRepaint
.text$mn:000023C5                 mov     ecx, [ebp+var_2C0]
.text$mn:000023CB                 sub     ecx, [ebp+Rect.bottom]
.text$mn:000023D1                 sub     ecx, 2
.text$mn:000023D4                 push    ecx             ; nHeight
.text$mn:000023D5                 mov     edx, [ebp+var_2A4]
.text$mn:000023DB                 push    edx             ; nWidth
.text$mn:000023DC                 mov     eax, [ebp+Rect.bottom]
.text$mn:000023E2                 add     eax, 2
.text$mn:000023E5                 push    eax             ; Y
.text$mn:000023E6                 push    0               ; X
.text$mn:000023E8                 mov     ecx, [ebp+var_2B8]
.text$mn:000023EE                 push    ecx             ; hWnd
.text$mn:000023EF                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:000023F5
.text$mn:000023F5 loc_23F5:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+749j
.text$mn:000023F5                 jmp     short loc_240E
.text$mn:000023F7 ; ---------------------------------------------------------------------------
.text$mn:000023F7
.text$mn:000023F7 loc_23F7:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+77j
.text$mn:000023F7                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+98j
.text$mn:000023F7                 mov     edx, [ebp+arg_C]
.text$mn:000023FA                 push    edx             ; __int32
.text$mn:000023FB                 mov     eax, [ebp+hdc]
.text$mn:000023FE                 push    eax             ; unsigned int
.text$mn:000023FF                 mov     ecx, [ebp+arg_4]
.text$mn:00002402                 push    ecx             ; unsigned int
.text$mn:00002403                 mov     edx, [ebp+this]
.text$mn:00002406                 push    edx             ; this
.text$mn:00002407                 call    ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z ; DockingDlgInterface::run_dlgProc(uint,uint,long)
.text$mn:0000240C                 jmp     short loc_2423
.text$mn:0000240E ; ---------------------------------------------------------------------------
.text$mn:0000240E
.text$mn:0000240E loc_240E:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+5CFj
.text$mn:0000240E                                         ; FunctionListPanel::run_dlgProc(uint,uint,long):loc_22E4j ...
.text$mn:0000240E                 mov     eax, [ebp+arg_C]
.text$mn:00002411                 push    eax             ; __int32
.text$mn:00002412                 mov     ecx, [ebp+hdc]
.text$mn:00002415                 push    ecx             ; unsigned int
.text$mn:00002416                 mov     edx, [ebp+arg_4]
.text$mn:00002419                 push    edx             ; unsigned int
.text$mn:0000241A                 mov     eax, [ebp+this]
.text$mn:0000241D                 push    eax             ; this
.text$mn:0000241E                 call    ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z ; DockingDlgInterface::run_dlgProc(uint,uint,long)
.text$mn:00002423
.text$mn:00002423 loc_2423:                               ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+106j
.text$mn:00002423                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+143j ...
.text$mn:00002423                 mov     ecx, [ebp+var_C]
.text$mn:00002426                 mov     large fs:0, ecx
.text$mn:0000242D                 pop     ecx
.text$mn:0000242E                 mov     ecx, [ebp+var_10]
.text$mn:00002431                 xor     ecx, ebp
.text$mn:00002433                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002438                 mov     esp, ebp
.text$mn:0000243A                 pop     ebp
.text$mn:0000243B                 retn    10h
.text$mn:0000243B ?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z endp
.text$mn:0000243B
.text$mn:0000243B ; ---------------------------------------------------------------------------
.text$mn:0000243E                 db 0Ah dup(0CCh)
.text$mn:00002448
.text$mn:00002448 ; =============== S U B R O U T I N E =======================================
.text$mn:00002448
.text$mn:00002448 ; Attributes: bp-based frame
.text$mn:00002448
.text$mn:00002448 ; private: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall FunctionListPanel::parseSubLevel(unsigned int, unsigned int, class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>, int &)
.text$mn:00002448                 public ?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z
.text$mn:00002448 ?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z proc near
.text$mn:00002448                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+284p
.text$mn:00002448
.text$mn:00002448 var_868         = byte ptr -868h
.text$mn:00002448 var_85C         = byte ptr -85Ch
.text$mn:00002448 var_850         = dword ptr -850h
.text$mn:00002448 var_84C         = dword ptr -84Ch
.text$mn:00002448 var_848         = dword ptr -848h
.text$mn:00002448 var_844         = dword ptr -844h
.text$mn:00002448 var_840         = dword ptr -840h
.text$mn:00002448 var_83C         = dword ptr -83Ch
.text$mn:00002448 var_838         = dword ptr -838h
.text$mn:00002448 var_834         = dword ptr -834h
.text$mn:00002448 var_830         = dword ptr -830h
.text$mn:00002448 var_82C         = dword ptr -82Ch
.text$mn:00002448 var_828         = dword ptr -828h
.text$mn:00002448 lpString        = dword ptr -824h
.text$mn:00002448 var_820         = dword ptr -820h
.text$mn:00002448 var_81C         = dword ptr -81Ch
.text$mn:00002448 var_818         = dword ptr -818h
.text$mn:00002448 var_814         = dword ptr -814h
.text$mn:00002448 Str             = word ptr -810h
.text$mn:00002448 var_10          = dword ptr -10h
.text$mn:00002448 var_C           = dword ptr -0Ch
.text$mn:00002448 var_4           = dword ptr -4
.text$mn:00002448 arg_0           = dword ptr  8
.text$mn:00002448 arg_4           = dword ptr  0Ch
.text$mn:00002448 arg_8           = dword ptr  10h
.text$mn:00002448 arg_C           = byte ptr  14h
.text$mn:00002448 arg_1C          = dword ptr  24h
.text$mn:00002448
.text$mn:00002448                 push    ebp
.text$mn:00002449                 mov     ebp, esp
.text$mn:0000244B                 push    0FFFFFFFFh
.text$mn:0000244D                 push    offset __ehhandler$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z
.text$mn:00002452                 mov     eax, large fs:0
.text$mn:00002458                 push    eax
.text$mn:00002459                 sub     esp, 85Ch
.text$mn:0000245F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002464                 xor     eax, ebp
.text$mn:00002466                 mov     [ebp+var_10], eax
.text$mn:00002469                 push    eax
.text$mn:0000246A                 lea     eax, [ebp+var_C]
.text$mn:0000246D                 mov     large fs:0, eax
.text$mn:00002473                 mov     [ebp+var_81C], ecx
.text$mn:00002479                 mov     [ebp+var_814], 0
.text$mn:00002483                 mov     [ebp+var_4], 1
.text$mn:0000248A                 mov     eax, [ebp+arg_4]
.text$mn:0000248D                 cmp     eax, [ebp+arg_8]
.text$mn:00002490                 jb      short loc_24CB
.text$mn:00002492                 mov     ecx, [ebp+arg_1C]
.text$mn:00002495                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:0000249B                 push    offset $SG158502 ; Str
.text$mn:000024A0                 mov     ecx, [ebp+arg_0]
.text$mn:000024A3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000024A8                 mov     edx, [ebp+var_814]
.text$mn:000024AE                 or      edx, 1
.text$mn:000024B1                 mov     [ebp+var_814], edx
.text$mn:000024B7                 mov     byte ptr [ebp+var_4], 0
.text$mn:000024BB                 lea     ecx, [ebp+arg_C]
.text$mn:000024BE                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000024C3                 mov     eax, [ebp+arg_0]
.text$mn:000024C6                 jmp     loc_276C
.text$mn:000024CB ; ---------------------------------------------------------------------------
.text$mn:000024CB
.text$mn:000024CB loc_24CB:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+48j
.text$mn:000024CB                 lea     ecx, [ebp+arg_C]
.text$mn:000024CE                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000024D3                 test    eax, eax
.text$mn:000024D5                 jnz     short loc_2507
.text$mn:000024D7                 push    offset $SG158504 ; Str
.text$mn:000024DC                 mov     ecx, [ebp+arg_0]
.text$mn:000024DF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000024E4                 mov     eax, [ebp+var_814]
.text$mn:000024EA                 or      eax, 1
.text$mn:000024ED                 mov     [ebp+var_814], eax
.text$mn:000024F3                 mov     byte ptr [ebp+var_4], 0
.text$mn:000024F7                 lea     ecx, [ebp+arg_C]
.text$mn:000024FA                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000024FF                 mov     eax, [ebp+arg_0]
.text$mn:00002502                 jmp     loc_276C
.text$mn:00002507 ; ---------------------------------------------------------------------------
.text$mn:00002507
.text$mn:00002507 loc_2507:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+8Dj
.text$mn:00002507                 mov     [ebp+var_830], 600000h
.text$mn:00002511                 push    0               ; __int32
.text$mn:00002513                 mov     ecx, [ebp+var_830]
.text$mn:00002519                 push    ecx             ; unsigned int
.text$mn:0000251A                 push    896h            ; unsigned int
.text$mn:0000251F                 mov     edx, [ebp+var_81C]
.text$mn:00002525                 mov     eax, [edx+130h]
.text$mn:0000252B                 mov     ecx, [eax]      ; this
.text$mn:0000252D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002532                 push    0
.text$mn:00002534                 lea     ecx, [ebp+arg_C]
.text$mn:00002537                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:0000253C                 mov     ecx, eax
.text$mn:0000253E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002543                 mov     [ebp+lpString], eax
.text$mn:00002549                 mov     ecx, [ebp+arg_8]
.text$mn:0000254C                 push    ecx             ; int
.text$mn:0000254D                 mov     edx, [ebp+arg_4]
.text$mn:00002550                 push    edx             ; int
.text$mn:00002551                 mov     eax, [ebp+lpString]
.text$mn:00002557                 push    eax             ; lpString
.text$mn:00002558                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000255E                 push    eax             ; int
.text$mn:0000255F                 mov     ecx, [ebp+lpString]
.text$mn:00002565                 push    ecx             ; wchar_t *
.text$mn:00002566                 mov     edx, [ebp+var_81C]
.text$mn:0000256C                 mov     eax, [edx+130h]
.text$mn:00002572                 mov     ecx, [eax]      ; this
.text$mn:00002574                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00002579                 mov     [ebp+var_818], eax
.text$mn:0000257F                 cmp     [ebp+var_818], 0FFFFFFFFh
.text$mn:00002586                 jz      short loc_2591
.text$mn:00002588                 cmp     [ebp+var_818], 0FFFFFFFEh
.text$mn:0000258F                 jnz     short loc_25CA
.text$mn:00002591
.text$mn:00002591 loc_2591:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+13Ej
.text$mn:00002591                 mov     ecx, [ebp+arg_1C]
.text$mn:00002594                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:0000259A                 push    offset $SG158510 ; Str
.text$mn:0000259F                 mov     ecx, [ebp+arg_0]
.text$mn:000025A2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000025A7                 mov     edx, [ebp+var_814]
.text$mn:000025AD                 or      edx, 1
.text$mn:000025B0                 mov     [ebp+var_814], edx
.text$mn:000025B6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000025BA                 lea     ecx, [ebp+arg_C]
.text$mn:000025BD                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000025C2                 mov     eax, [ebp+arg_0]
.text$mn:000025C5                 jmp     loc_276C
.text$mn:000025CA ; ---------------------------------------------------------------------------
.text$mn:000025CA
.text$mn:000025CA loc_25CA:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+147j
.text$mn:000025CA                 push    0               ; __int32
.text$mn:000025CC                 push    0               ; unsigned int
.text$mn:000025CE                 push    891h            ; unsigned int
.text$mn:000025D3                 mov     eax, [ebp+var_81C]
.text$mn:000025D9                 mov     ecx, [eax+130h]
.text$mn:000025DF                 mov     ecx, [ecx]      ; this
.text$mn:000025E1                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000025E6                 mov     [ebp+var_820], eax
.text$mn:000025EC                 lea     ecx, [ebp+arg_C]
.text$mn:000025EF                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000025F4                 cmp     eax, 2
.text$mn:000025F7                 jb      loc_26F9
.text$mn:000025FD                 lea     edx, [ebp+var_868]
.text$mn:00002603                 push    edx
.text$mn:00002604                 lea     ecx, [ebp+arg_C]
.text$mn:00002607                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:0000260C                 mov     [ebp+var_834], eax
.text$mn:00002612                 mov     eax, [ebp+var_834]
.text$mn:00002618                 mov     [ebp+var_838], eax
.text$mn:0000261E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002622                 sub     esp, 0Ch
.text$mn:00002625                 mov     ecx, esp
.text$mn:00002627                 mov     [ebp+var_844], esp
.text$mn:0000262D                 mov     edx, [ebp+var_838]
.text$mn:00002633                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002634                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00002639                 mov     [ebp+var_82C], eax
.text$mn:0000263F                 mov     eax, [ebp+var_82C]
.text$mn:00002645                 mov     [ebp+var_84C], eax
.text$mn:0000264B                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000264F                 lea     ecx, [ebp+var_85C]
.text$mn:00002655                 push    ecx
.text$mn:00002656                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000265A                 lea     ecx, [ebp+arg_C]
.text$mn:0000265D                 call    ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00002662                 mov     [ebp+var_83C], eax
.text$mn:00002668                 lea     ecx, [ebp+var_85C]
.text$mn:0000266E                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00002673                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002677                 lea     ecx, [ebp+var_868]
.text$mn:0000267D                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00002682                 mov     edx, [ebp+arg_1C]
.text$mn:00002685                 push    edx
.text$mn:00002686                 sub     esp, 10h
.text$mn:00002689                 mov     ecx, esp
.text$mn:0000268B                 mov     [ebp+var_848], esp
.text$mn:00002691                 lea     eax, [ebp+arg_C]
.text$mn:00002694                 push    eax
.text$mn:00002695                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:0000269A                 mov     [ebp+var_828], eax
.text$mn:000026A0                 mov     ecx, [ebp+var_828]
.text$mn:000026A6                 mov     [ebp+var_850], ecx
.text$mn:000026AC                 mov     byte ptr [ebp+var_4], 4
.text$mn:000026B0                 mov     edx, [ebp+var_820]
.text$mn:000026B6                 push    edx
.text$mn:000026B7                 mov     eax, [ebp+var_818]
.text$mn:000026BD                 push    eax
.text$mn:000026BE                 mov     ecx, [ebp+arg_0]
.text$mn:000026C1                 push    ecx
.text$mn:000026C2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000026C6                 mov     ecx, [ebp+var_81C]
.text$mn:000026CC                 call    ?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)
.text$mn:000026D1                 mov     [ebp+var_840], eax
.text$mn:000026D7                 mov     edx, [ebp+var_814]
.text$mn:000026DD                 or      edx, 1
.text$mn:000026E0                 mov     [ebp+var_814], edx
.text$mn:000026E6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000026EA                 lea     ecx, [ebp+arg_C]
.text$mn:000026ED                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000026F2                 mov     eax, [ebp+arg_0]
.text$mn:000026F5                 jmp     short loc_276C
.text$mn:000026F7 ; ---------------------------------------------------------------------------
.text$mn:000026F7                 jmp     short loc_2760
.text$mn:000026F9 ; ---------------------------------------------------------------------------
.text$mn:000026F9
.text$mn:000026F9 loc_26F9:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+1AFj
.text$mn:000026F9                 mov     eax, [ebp+var_820]
.text$mn:000026FF                 push    eax             ; int
.text$mn:00002700                 mov     ecx, [ebp+var_818]
.text$mn:00002706                 push    ecx             ; int
.text$mn:00002707                 push    400h            ; unsigned int
.text$mn:0000270C                 lea     edx, [ebp+Str]
.text$mn:00002712                 push    edx             ; wchar_t *
.text$mn:00002713                 mov     eax, [ebp+var_81C]
.text$mn:00002719                 mov     ecx, [eax+130h]
.text$mn:0000271F                 mov     ecx, [ecx]      ; this
.text$mn:00002721                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:00002726                 mov     edx, [ebp+arg_1C]
.text$mn:00002729                 mov     eax, [ebp+var_818]
.text$mn:0000272F                 mov     [edx], eax
.text$mn:00002731                 lea     ecx, [ebp+Str]
.text$mn:00002737                 push    ecx             ; Str
.text$mn:00002738                 mov     ecx, [ebp+arg_0]
.text$mn:0000273B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002740                 mov     edx, [ebp+var_814]
.text$mn:00002746                 or      edx, 1
.text$mn:00002749                 mov     [ebp+var_814], edx
.text$mn:0000274F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002753                 lea     ecx, [ebp+arg_C]
.text$mn:00002756                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000275B                 mov     eax, [ebp+arg_0]
.text$mn:0000275E                 jmp     short loc_276C
.text$mn:00002760 ; ---------------------------------------------------------------------------
.text$mn:00002760
.text$mn:00002760 loc_2760:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+2AFj
.text$mn:00002760                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002764                 lea     ecx, [ebp+arg_C]
.text$mn:00002767                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000276C
.text$mn:0000276C loc_276C:                               ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+7Ej
.text$mn:0000276C                                         ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+BAj ...
.text$mn:0000276C                 mov     ecx, [ebp+var_C]
.text$mn:0000276F                 mov     large fs:0, ecx
.text$mn:00002776                 pop     ecx
.text$mn:00002777                 mov     ecx, [ebp+var_10]
.text$mn:0000277A                 xor     ecx, ebp
.text$mn:0000277C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002781                 mov     esp, ebp
.text$mn:00002783                 pop     ebp
.text$mn:00002784                 retn    20h
.text$mn:00002784 ?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z endp
.text$mn:00002784
.text$mn:00002784 ; ---------------------------------------------------------------------------
.text$mn:00002787                 align 4
.text$mn:00002788
.text$mn:00002788 ; =============== S U B R O U T I N E =======================================
.text$mn:00002788
.text$mn:00002788 ; Attributes: bp-based frame
.text$mn:00002788
.text$mn:00002788 ; unsigned int __thiscall FunctionListPanel::getBodyClosePos(FunctionListPanel *this, unsigned int, LPCWSTR lpString, const wchar_t *)
.text$mn:00002788                 public ?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z
.text$mn:00002788 ?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z proc near
.text$mn:00002788
.text$mn:00002788 var_4C          = dword ptr -4Ch
.text$mn:00002788 var_48          = dword ptr -48h
.text$mn:00002788 var_44          = dword ptr -44h
.text$mn:00002788 var_40          = dword ptr -40h
.text$mn:00002788 var_3C          = dword ptr -3Ch
.text$mn:00002788 var_38          = dword ptr -38h
.text$mn:00002788 var_34          = dword ptr -34h
.text$mn:00002788 var_30          = dword ptr -30h
.text$mn:00002788 var_2C          = byte ptr -2Ch
.text$mn:00002788 var_10          = dword ptr -10h
.text$mn:00002788 var_C           = dword ptr -0Ch
.text$mn:00002788 var_4           = dword ptr -4
.text$mn:00002788 arg_0           = dword ptr  8
.text$mn:00002788 lpString        = dword ptr  0Ch
.text$mn:00002788 Str             = dword ptr  10h
.text$mn:00002788
.text$mn:00002788                 push    ebp
.text$mn:00002789                 mov     ebp, esp
.text$mn:0000278B                 push    0FFFFFFFFh
.text$mn:0000278D                 push    offset __ehhandler$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z
.text$mn:00002792                 mov     eax, large fs:0
.text$mn:00002798                 push    eax
.text$mn:00002799                 sub     esp, 40h
.text$mn:0000279C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000027A1                 xor     eax, ebp
.text$mn:000027A3                 mov     [ebp+var_10], eax
.text$mn:000027A6                 push    eax
.text$mn:000027A7                 lea     eax, [ebp+var_C]
.text$mn:000027AA                 mov     large fs:0, eax
.text$mn:000027B0                 mov     [ebp+var_34], ecx
.text$mn:000027B3                 mov     [ebp+var_30], 1
.text$mn:000027BA                 mov     eax, [ebp+var_34]
.text$mn:000027BD                 mov     ecx, [eax+130h]
.text$mn:000027C3                 mov     ecx, [ecx]      ; this
.text$mn:000027C5                 call    ?getCurrentDocLen@ScintillaEditView@@QBEHXZ ; ScintillaEditView::getCurrentDocLen(void)
.text$mn:000027CA                 mov     [ebp+var_40], eax
.text$mn:000027CD                 mov     edx, [ebp+arg_0]
.text$mn:000027D0                 cmp     edx, [ebp+var_40]
.text$mn:000027D3                 jb      short loc_27DD
.text$mn:000027D5                 mov     eax, [ebp+var_40]
.text$mn:000027D8                 jmp     loc_2949
.text$mn:000027DD ; ---------------------------------------------------------------------------
.text$mn:000027DD
.text$mn:000027DD loc_27DD:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+4Bj
.text$mn:000027DD                 push    offset $SG158474 ; Str
.text$mn:000027E2                 lea     ecx, [ebp+var_2C]
.text$mn:000027E5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000027EA                 mov     [ebp+var_4], 0
.text$mn:000027F1                 mov     eax, [ebp+lpString]
.text$mn:000027F4                 push    eax             ; Str
.text$mn:000027F5                 lea     ecx, [ebp+var_2C]
.text$mn:000027F8                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000027FD                 push    offset $SG158475 ; Str
.text$mn:00002802                 lea     ecx, [ebp+var_2C]
.text$mn:00002805                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000280A                 mov     ecx, [ebp+Str]
.text$mn:0000280D                 push    ecx             ; Str
.text$mn:0000280E                 lea     ecx, [ebp+var_2C]
.text$mn:00002811                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002816                 push    offset $SG158476 ; Str
.text$mn:0000281B                 lea     ecx, [ebp+var_2C]
.text$mn:0000281E                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002823                 mov     [ebp+var_48], 600000h
.text$mn:0000282A                 push    0               ; __int32
.text$mn:0000282C                 mov     edx, [ebp+var_48]
.text$mn:0000282F                 push    edx             ; unsigned int
.text$mn:00002830                 push    896h            ; unsigned int
.text$mn:00002835                 mov     eax, [ebp+var_34]
.text$mn:00002838                 mov     ecx, [eax+130h]
.text$mn:0000283E                 mov     ecx, [ecx]      ; this
.text$mn:00002840                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002845                 mov     edx, [ebp+var_40]
.text$mn:00002848                 push    edx             ; int
.text$mn:00002849                 mov     eax, [ebp+arg_0]
.text$mn:0000284C                 push    eax             ; int
.text$mn:0000284D                 lea     ecx, [ebp+var_2C]
.text$mn:00002850                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002855                 push    eax             ; int
.text$mn:00002856                 lea     ecx, [ebp+var_2C]
.text$mn:00002859                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000285E                 push    eax             ; wchar_t *
.text$mn:0000285F                 mov     ecx, [ebp+var_34]
.text$mn:00002862                 mov     edx, [ecx+130h]
.text$mn:00002868                 mov     ecx, [edx]      ; this
.text$mn:0000286A                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:0000286F                 mov     [ebp+var_3C], eax
.text$mn:00002872                 mov     [ebp+var_38], 0
.text$mn:00002879
.text$mn:00002879 loc_2879:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+1A3j
.text$mn:00002879                 cmp     [ebp+var_3C], 0FFFFFFFFh
.text$mn:0000287D                 jz      short loc_28ED
.text$mn:0000287F                 cmp     [ebp+var_3C], 0FFFFFFFEh
.text$mn:00002883                 jz      short loc_28ED
.text$mn:00002885                 push    0               ; __int32
.text$mn:00002887                 push    0               ; unsigned int
.text$mn:00002889                 push    891h            ; unsigned int
.text$mn:0000288E                 mov     eax, [ebp+var_34]
.text$mn:00002891                 mov     ecx, [eax+130h]
.text$mn:00002897                 mov     ecx, [ecx]      ; this
.text$mn:00002899                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000289E                 mov     [ebp+var_38], eax
.text$mn:000028A1                 mov     edx, [ebp+var_38]
.text$mn:000028A4                 push    edx             ; int
.text$mn:000028A5                 mov     eax, [ebp+var_3C]
.text$mn:000028A8                 push    eax             ; int
.text$mn:000028A9                 mov     ecx, [ebp+lpString]
.text$mn:000028AC                 push    ecx             ; lpString
.text$mn:000028AD                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000028B3                 push    eax             ; int
.text$mn:000028B4                 mov     edx, [ebp+lpString]
.text$mn:000028B7                 push    edx             ; wchar_t *
.text$mn:000028B8                 mov     eax, [ebp+var_34]
.text$mn:000028BB                 mov     ecx, [eax+130h]
.text$mn:000028C1                 mov     ecx, [ecx]      ; this
.text$mn:000028C3                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:000028C8                 mov     [ebp+var_44], eax
.text$mn:000028CB                 cmp     [ebp+var_44], 0FFFFFFFFh
.text$mn:000028CF                 jz      short loc_28E2
.text$mn:000028D1                 cmp     [ebp+var_44], 0FFFFFFFEh
.text$mn:000028D5                 jz      short loc_28E2
.text$mn:000028D7                 mov     edx, [ebp+var_30]
.text$mn:000028DA                 add     edx, 1
.text$mn:000028DD                 mov     [ebp+var_30], edx
.text$mn:000028E0                 jmp     short loc_28EB
.text$mn:000028E2 ; ---------------------------------------------------------------------------
.text$mn:000028E2
.text$mn:000028E2 loc_28E2:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+147j
.text$mn:000028E2                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+14Dj
.text$mn:000028E2                 mov     eax, [ebp+var_30]
.text$mn:000028E5                 sub     eax, 1
.text$mn:000028E8                 mov     [ebp+var_30], eax
.text$mn:000028EB
.text$mn:000028EB loc_28EB:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+158j
.text$mn:000028EB                 jmp     short loc_28FA
.text$mn:000028ED ; ---------------------------------------------------------------------------
.text$mn:000028ED
.text$mn:000028ED loc_28ED:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+F5j
.text$mn:000028ED                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+FBj
.text$mn:000028ED                 mov     [ebp+var_30], 0
.text$mn:000028F4                 mov     ecx, [ebp+arg_0]
.text$mn:000028F7                 mov     [ebp+var_38], ecx
.text$mn:000028FA
.text$mn:000028FA loc_28FA:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *):loc_28EBj
.text$mn:000028FA                 mov     edx, [ebp+var_40]
.text$mn:000028FD                 push    edx             ; int
.text$mn:000028FE                 mov     eax, [ebp+var_38]
.text$mn:00002901                 push    eax             ; int
.text$mn:00002902                 lea     ecx, [ebp+var_2C]
.text$mn:00002905                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000290A                 push    eax             ; int
.text$mn:0000290B                 lea     ecx, [ebp+var_2C]
.text$mn:0000290E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002913                 push    eax             ; wchar_t *
.text$mn:00002914                 mov     ecx, [ebp+var_34]
.text$mn:00002917                 mov     edx, [ecx+130h]
.text$mn:0000291D                 mov     ecx, [edx]      ; this
.text$mn:0000291F                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00002924                 mov     [ebp+var_3C], eax
.text$mn:00002927                 cmp     [ebp+var_30], 0
.text$mn:0000292B                 jnz     loc_2879
.text$mn:00002931                 mov     eax, [ebp+var_38]
.text$mn:00002934                 mov     [ebp+var_4C], eax
.text$mn:00002937                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000293E                 lea     ecx, [ebp+var_2C]
.text$mn:00002941                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002946                 mov     eax, [ebp+var_4C]
.text$mn:00002949
.text$mn:00002949 loc_2949:                               ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+50j
.text$mn:00002949                 mov     ecx, [ebp+var_C]
.text$mn:0000294C                 mov     large fs:0, ecx
.text$mn:00002953                 pop     ecx
.text$mn:00002954                 mov     ecx, [ebp+var_10]
.text$mn:00002957                 xor     ecx, ebp
.text$mn:00002959                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000295E                 mov     esp, ebp
.text$mn:00002960                 pop     ebp
.text$mn:00002961                 retn    0Ch
.text$mn:00002961 ?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z endp
.text$mn:00002961
.text$mn:00002961 ; ---------------------------------------------------------------------------
.text$mn:00002964                 align 8
.text$mn:00002968
.text$mn:00002968 ; =============== S U B R O U T I N E =======================================
.text$mn:00002968
.text$mn:00002968 ; Attributes: bp-based frame
.text$mn:00002968
.text$mn:00002968 ; void __thiscall FunctionListPanel::notified(FunctionListPanel *this, struct tagNMHDR *)
.text$mn:00002968                 public ?notified@FunctionListPanel@@AAEXPAUtagNMHDR@@@Z
.text$mn:00002968 ?notified@FunctionListPanel@@AAEXPAUtagNMHDR@@@Z proc near
.text$mn:00002968                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+678p
.text$mn:00002968
.text$mn:00002968 var_20          = dword ptr -20h
.text$mn:00002968 var_1C          = dword ptr -1Ch
.text$mn:00002968 var_18          = dword ptr -18h
.text$mn:00002968 var_14          = dword ptr -14h
.text$mn:00002968 var_10          = dword ptr -10h
.text$mn:00002968 var_C           = dword ptr -0Ch
.text$mn:00002968 var_8           = dword ptr -8
.text$mn:00002968 var_4           = dword ptr -4
.text$mn:00002968 arg_0           = dword ptr  8
.text$mn:00002968
.text$mn:00002968                 push    ebp
.text$mn:00002969                 mov     ebp, esp
.text$mn:0000296B                 sub     esp, 20h
.text$mn:0000296E                 mov     [ebp+var_4], ecx
.text$mn:00002971                 mov     eax, [ebp+arg_0]
.text$mn:00002974                 cmp     dword ptr [eax+8], 0FFFFFDEEh
.text$mn:0000297B                 jnz     short loc_29E7
.text$mn:0000297D                 mov     ecx, [ebp+arg_0]
.text$mn:00002980                 mov     [ebp+var_C], ecx
.text$mn:00002983                 mov     edx, [ebp+var_C]
.text$mn:00002986                 mov     dword ptr [edx+0B0h], 0
.text$mn:00002990                 mov     eax, [ebp+arg_0]
.text$mn:00002993                 cmp     dword ptr [eax+4], 0D4Dh
.text$mn:0000299A                 jnz     short loc_29BA
.text$mn:0000299C                 mov     ecx, [ebp+var_4]
.text$mn:0000299F                 add     ecx, 0F8h ; '°'
.text$mn:000029A5                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000029AA                 push    eax             ; lpString2
.text$mn:000029AB                 mov     ecx, [ebp+var_C]
.text$mn:000029AE                 add     ecx, 10h
.text$mn:000029B1                 push    ecx             ; lpString1
.text$mn:000029B2                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:000029B8                 jmp     short loc_29E2
.text$mn:000029BA ; ---------------------------------------------------------------------------
.text$mn:000029BA
.text$mn:000029BA loc_29BA:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+32j
.text$mn:000029BA                 mov     edx, [ebp+arg_0]
.text$mn:000029BD                 cmp     dword ptr [edx+4], 0D4Ch
.text$mn:000029C4                 jnz     short loc_29E2
.text$mn:000029C6                 mov     ecx, [ebp+var_4]
.text$mn:000029C9                 add     ecx, 114h
.text$mn:000029CF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000029D4                 push    eax             ; lpString2
.text$mn:000029D5                 mov     eax, [ebp+var_C]
.text$mn:000029D8                 add     eax, 10h
.text$mn:000029DB                 push    eax             ; lpString1
.text$mn:000029DC                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:000029E2
.text$mn:000029E2 loc_29E2:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+50j
.text$mn:000029E2                                         ; FunctionListPanel::notified(tagNMHDR *)+5Cj
.text$mn:000029E2                 jmp     loc_2AE7
.text$mn:000029E7 ; ---------------------------------------------------------------------------
.text$mn:000029E7
.text$mn:000029E7 loc_29E7:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+13j
.text$mn:000029E7                 mov     ecx, [ebp+var_4]
.text$mn:000029EA                 add     ecx, 78h ; 'x'  ; this
.text$mn:000029ED                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000029F2                 mov     ecx, [ebp+arg_0]
.text$mn:000029F5                 cmp     [ecx], eax
.text$mn:000029F7                 jz      short loc_2A12
.text$mn:000029F9                 mov     ecx, [ebp+var_4]
.text$mn:000029FC                 add     ecx, 0B8h ; '+' ; this
.text$mn:00002A02                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002A07                 mov     edx, [ebp+arg_0]
.text$mn:00002A0A                 cmp     [edx], eax
.text$mn:00002A0C                 jnz     loc_2AAC
.text$mn:00002A12
.text$mn:00002A12 loc_2A12:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+8Fj
.text$mn:00002A12                 mov     ecx, [ebp+var_4]
.text$mn:00002A15                 add     ecx, 78h ; 'x'  ; this
.text$mn:00002A18                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002A1D                 mov     ecx, [ebp+arg_0]
.text$mn:00002A20                 cmp     [ecx], eax
.text$mn:00002A22                 jnz     short loc_2A2F
.text$mn:00002A24                 mov     edx, [ebp+var_4]
.text$mn:00002A27                 add     edx, 78h ; 'x'
.text$mn:00002A2A                 mov     [ebp+var_10], edx
.text$mn:00002A2D                 jmp     short loc_2A3A
.text$mn:00002A2F ; ---------------------------------------------------------------------------
.text$mn:00002A2F
.text$mn:00002A2F loc_2A2F:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+BAj
.text$mn:00002A2F                 mov     eax, [ebp+var_4]
.text$mn:00002A32                 add     eax, 0B8h ; '+'
.text$mn:00002A37                 mov     [ebp+var_10], eax
.text$mn:00002A3A
.text$mn:00002A3A loc_2A3A:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+C5j
.text$mn:00002A3A                 mov     ecx, [ebp+var_10]
.text$mn:00002A3D                 mov     [ebp+var_18], ecx
.text$mn:00002A40                 mov     edx, [ebp+var_18]
.text$mn:00002A43                 mov     [ebp+var_8], edx
.text$mn:00002A46                 mov     eax, [ebp+arg_0]
.text$mn:00002A49                 mov     ecx, [eax+8]
.text$mn:00002A4C                 mov     [ebp+var_14], ecx
.text$mn:00002A4F                 cmp     [ebp+var_14], 0FFFFFE64h
.text$mn:00002A56                 jz      short loc_2A6E
.text$mn:00002A58                 cmp     [ebp+var_14], 0FFFFFFFDh
.text$mn:00002A5C                 jz      short loc_2A60
.text$mn:00002A5E                 jmp     short loc_2AAA
.text$mn:00002A60 ; ---------------------------------------------------------------------------
.text$mn:00002A60
.text$mn:00002A60 loc_2A60:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+F4j
.text$mn:00002A60                 mov     edx, [ebp+var_8]
.text$mn:00002A63                 push    edx             ; struct TreeView *
.text$mn:00002A64                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002A67                 call    ?openSelection@FunctionListPanel@@AAE_NABVTreeView@@@Z ; FunctionListPanel::openSelection(TreeView const &)
.text$mn:00002A6C                 jmp     short loc_2AAA
.text$mn:00002A6E ; ---------------------------------------------------------------------------
.text$mn:00002A6E
.text$mn:00002A6E loc_2A6E:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+EEj
.text$mn:00002A6E                 mov     eax, [ebp+arg_0]
.text$mn:00002A71                 mov     [ebp+var_1C], eax
.text$mn:00002A74                 mov     ecx, [ebp+var_1C]
.text$mn:00002A77                 movzx   edx, word ptr [ecx+0Ch]
.text$mn:00002A7B                 cmp     edx, 0Dh
.text$mn:00002A7E                 jnz     short loc_2AAA
.text$mn:00002A80                 mov     eax, [ebp+var_8]
.text$mn:00002A83                 push    eax             ; struct TreeView *
.text$mn:00002A84                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002A87                 call    ?openSelection@FunctionListPanel@@AAE_NABVTreeView@@@Z ; FunctionListPanel::openSelection(TreeView const &)
.text$mn:00002A8C                 movzx   ecx, al
.text$mn:00002A8F                 test    ecx, ecx
.text$mn:00002A91                 jnz     short loc_2AAA
.text$mn:00002A93                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002A96                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:00002A9B                 mov     [ebp+var_20], eax
.text$mn:00002A9E                 mov     edx, [ebp+var_20]
.text$mn:00002AA1                 push    edx             ; struct _TREEITEM *
.text$mn:00002AA2                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002AA5                 call    ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::toggleExpandCollapse(_TREEITEM *)
.text$mn:00002AAA
.text$mn:00002AAA loc_2AAA:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+F6j
.text$mn:00002AAA                                         ; FunctionListPanel::notified(tagNMHDR *)+104j ...
.text$mn:00002AAA                 jmp     short loc_2AE7
.text$mn:00002AAC ; ---------------------------------------------------------------------------
.text$mn:00002AAC
.text$mn:00002AAC loc_2AAC:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+A4j
.text$mn:00002AAC                 mov     eax, [ebp+arg_0]
.text$mn:00002AAF                 cmp     dword ptr [eax+8], 41Eh
.text$mn:00002AB6                 jnz     short loc_2AC2
.text$mn:00002AB8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002ABB                 call    ?reload@FunctionListPanel@@QAEXXZ ; FunctionListPanel::reload(void)
.text$mn:00002AC0                 jmp     short loc_2AE7
.text$mn:00002AC2 ; ---------------------------------------------------------------------------
.text$mn:00002AC2
.text$mn:00002AC2 loc_2AC2:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+14Ej
.text$mn:00002AC2                 mov     ecx, [ebp+arg_0]
.text$mn:00002AC5                 cmp     dword ptr [ecx+8], 41Bh
.text$mn:00002ACC                 jnz     short loc_2AE7
.text$mn:00002ACE                 push    0               ; lParam
.text$mn:00002AD0                 push    0AC34h          ; wParam
.text$mn:00002AD5                 push    111h            ; Msg
.text$mn:00002ADA                 mov     edx, [ebp+var_4]
.text$mn:00002ADD                 mov     eax, [edx+8]
.text$mn:00002AE0                 push    eax             ; hWnd
.text$mn:00002AE1                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002AE7
.text$mn:00002AE7 loc_2AE7:                               ; CODE XREF: FunctionListPanel::notified(tagNMHDR *):loc_29E2j
.text$mn:00002AE7                                         ; FunctionListPanel::notified(tagNMHDR *):loc_2AAAj ...
.text$mn:00002AE7                 mov     esp, ebp
.text$mn:00002AE9                 pop     ebp
.text$mn:00002AEA                 retn    4
.text$mn:00002AEA ?notified@FunctionListPanel@@AAEXPAUtagNMHDR@@@Z endp
.text$mn:00002AEA
.text$mn:00002AEA ; ---------------------------------------------------------------------------
.text$mn:00002AED                 db 0Bh dup(0CCh)
.text$mn:00002AF8
.text$mn:00002AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002AF8
.text$mn:00002AF8 ; Attributes: bp-based frame
.text$mn:00002AF8
.text$mn:00002AF8 ; private: void __thiscall FunctionListPanel::addInStateArray(struct TreeStateNode, wchar_t const *, bool)
.text$mn:00002AF8                 public ?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z
.text$mn:00002AF8 ?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z proc near
.text$mn:00002AF8                                         ; CODE XREF: FunctionListPanel::reload(void)+EDp
.text$mn:00002AF8
.text$mn:00002AF8 var_8C          = dword ptr -8Ch
.text$mn:00002AF8 var_88          = dword ptr -88h
.text$mn:00002AF8 var_84          = dword ptr -84h
.text$mn:00002AF8 var_7D          = byte ptr -7Dh
.text$mn:00002AF8 var_7C          = byte ptr -7Ch
.text$mn:00002AF8 var_30          = byte ptr -30h
.text$mn:00002AF8 var_14          = byte ptr -14h
.text$mn:00002AF8 var_10          = dword ptr -10h
.text$mn:00002AF8 var_C           = dword ptr -0Ch
.text$mn:00002AF8 var_4           = dword ptr -4
.text$mn:00002AF8 arg_0           = byte ptr  8
.text$mn:00002AF8 arg_1C          = byte ptr  24h
.text$mn:00002AF8 Str             = dword ptr  54h
.text$mn:00002AF8 arg_50          = byte ptr  58h
.text$mn:00002AF8
.text$mn:00002AF8                 push    ebp
.text$mn:00002AF9                 mov     ebp, esp
.text$mn:00002AFB                 push    0FFFFFFFFh
.text$mn:00002AFD                 push    offset __ehhandler$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z
.text$mn:00002B02                 mov     eax, large fs:0
.text$mn:00002B08                 push    eax
.text$mn:00002B09                 sub     esp, 80h
.text$mn:00002B0F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B14                 xor     eax, ebp
.text$mn:00002B16                 mov     [ebp+var_10], eax
.text$mn:00002B19                 push    eax
.text$mn:00002B1A                 lea     eax, [ebp+var_C]
.text$mn:00002B1D                 mov     large fs:0, eax
.text$mn:00002B23                 mov     [ebp+var_88], ecx
.text$mn:00002B29                 mov     [ebp+var_4], 0
.text$mn:00002B30                 mov     [ebp+var_7D], 0
.text$mn:00002B34                 mov     [ebp+var_84], 0
.text$mn:00002B3E                 mov     ecx, [ebp+var_88]
.text$mn:00002B44                 add     ecx, 17Ch
.text$mn:00002B4A                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:00002B4F                 mov     [ebp+var_8C], eax
.text$mn:00002B55                 jmp     short loc_2B66
.text$mn:00002B57 ; ---------------------------------------------------------------------------
.text$mn:00002B57
.text$mn:00002B57 loc_2B57:                               ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool):loc_2C12j
.text$mn:00002B57                 mov     eax, [ebp+var_84]
.text$mn:00002B5D                 add     eax, 1
.text$mn:00002B60                 mov     [ebp+var_84], eax
.text$mn:00002B66
.text$mn:00002B66 loc_2B66:                               ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+5Dj
.text$mn:00002B66                 mov     ecx, [ebp+var_84]
.text$mn:00002B6C                 cmp     ecx, [ebp+var_8C]
.text$mn:00002B72                 jnb     loc_2C17
.text$mn:00002B78                 lea     edx, [ebp+arg_1C]
.text$mn:00002B7B                 push    edx
.text$mn:00002B7C                 mov     eax, [ebp+var_84]
.text$mn:00002B82                 push    eax
.text$mn:00002B83                 mov     ecx, [ebp+var_88]
.text$mn:00002B89                 add     ecx, 17Ch
.text$mn:00002B8F                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002B94                 add     eax, 1Ch
.text$mn:00002B97                 push    eax
.text$mn:00002B98                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002B9D                 add     esp, 8
.text$mn:00002BA0                 movzx   ecx, al
.text$mn:00002BA3                 test    ecx, ecx
.text$mn:00002BA5                 jz      short loc_2C12
.text$mn:00002BA7                 mov     edx, [ebp+Str]
.text$mn:00002BAA                 push    edx             ; Str
.text$mn:00002BAB                 mov     eax, [ebp+var_84]
.text$mn:00002BB1                 push    eax
.text$mn:00002BB2                 mov     ecx, [ebp+var_88]
.text$mn:00002BB8                 add     ecx, 17Ch
.text$mn:00002BBE                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002BC3                 add     eax, 4Ch ; 'L'
.text$mn:00002BC6                 mov     ecx, eax
.text$mn:00002BC8                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002BCD                 mov     ecx, [ebp+var_84]
.text$mn:00002BD3                 push    ecx
.text$mn:00002BD4                 mov     ecx, [ebp+var_88]
.text$mn:00002BDA                 add     ecx, 17Ch
.text$mn:00002BE0                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002BE5                 mov     dl, [ebp+arg_50]
.text$mn:00002BE8                 mov     [eax+68h], dl
.text$mn:00002BEB                 lea     eax, [ebp+arg_0]
.text$mn:00002BEE                 push    eax
.text$mn:00002BEF                 mov     ecx, [ebp+var_84]
.text$mn:00002BF5                 push    ecx
.text$mn:00002BF6                 mov     ecx, [ebp+var_88]
.text$mn:00002BFC                 add     ecx, 17Ch
.text$mn:00002C02                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002C07                 mov     ecx, eax
.text$mn:00002C09                 call    ??4TreeStateNode@@QAEAAU0@ABU0@@Z ; TreeStateNode::operator=(TreeStateNode const &)
.text$mn:00002C0E                 mov     [ebp+var_7D], 1
.text$mn:00002C12
.text$mn:00002C12 loc_2C12:                               ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+ADj
.text$mn:00002C12                 jmp     loc_2B57
.text$mn:00002C17 ; ---------------------------------------------------------------------------
.text$mn:00002C17
.text$mn:00002C17 loc_2C17:                               ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+7Aj
.text$mn:00002C17                 movzx   edx, [ebp+var_7D]
.text$mn:00002C1B                 test    edx, edx
.text$mn:00002C1D                 jnz     short loc_2C6A
.text$mn:00002C1F                 lea     ecx, [ebp+var_7C] ; this
.text$mn:00002C22                 call    ??0TreeParams@@QAE@XZ ; TreeParams::TreeParams(void)
.text$mn:00002C27                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002C2B                 lea     eax, [ebp+arg_0]
.text$mn:00002C2E                 push    eax
.text$mn:00002C2F                 lea     ecx, [ebp+var_7C]
.text$mn:00002C32                 call    ??4TreeStateNode@@QAEAAU0@ABU0@@Z ; TreeStateNode::operator=(TreeStateNode const &)
.text$mn:00002C37                 mov     ecx, [ebp+Str]
.text$mn:00002C3A                 push    ecx             ; Str
.text$mn:00002C3B                 lea     ecx, [ebp+var_30]
.text$mn:00002C3E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002C43                 mov     dl, [ebp+arg_50]
.text$mn:00002C46                 mov     [ebp+var_14], dl
.text$mn:00002C49                 lea     eax, [ebp+var_7C]
.text$mn:00002C4C                 push    eax
.text$mn:00002C4D                 mov     ecx, [ebp+var_88]
.text$mn:00002C53                 add     ecx, 17Ch
.text$mn:00002C59                 call    ?push_back@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEXABUTreeParams@@@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)
.text$mn:00002C5E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002C62                 lea     ecx, [ebp+var_7C] ; this
.text$mn:00002C65                 call    ??1TreeParams@@QAE@XZ ; TreeParams::~TreeParams(void)
.text$mn:00002C6A
.text$mn:00002C6A loc_2C6A:                               ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+125j
.text$mn:00002C6A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002C71                 lea     ecx, [ebp+arg_0] ; this
.text$mn:00002C74                 call    ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$mn:00002C79                 mov     ecx, [ebp+var_C]
.text$mn:00002C7C                 mov     large fs:0, ecx
.text$mn:00002C83                 pop     ecx
.text$mn:00002C84                 mov     ecx, [ebp+var_10]
.text$mn:00002C87                 xor     ecx, ebp
.text$mn:00002C89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002C8E                 mov     esp, ebp
.text$mn:00002C90                 pop     ebp
.text$mn:00002C91                 retn    54h
.text$mn:00002C91 ?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z endp
.text$mn:00002C91
.text$mn:00002C91 ; ---------------------------------------------------------------------------
.text$mn:00002C94                 align 8
.text$mn:00002C98
.text$mn:00002C98 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C98
.text$mn:00002C98 ; Attributes: bp-based frame
.text$mn:00002C98
.text$mn:00002C98 ; private: struct TreeParams * __thiscall FunctionListPanel::getFromStateArray(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00002C98                 public ?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00002C98 ?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00002C98                                         ; CODE XREF: FunctionListPanel::reload(void)+44Dp
.text$mn:00002C98
.text$mn:00002C98 var_20          = dword ptr -20h
.text$mn:00002C98 var_1C          = dword ptr -1Ch
.text$mn:00002C98 var_18          = dword ptr -18h
.text$mn:00002C98 var_14          = dword ptr -14h
.text$mn:00002C98 var_10          = dword ptr -10h
.text$mn:00002C98 var_C           = dword ptr -0Ch
.text$mn:00002C98 var_4           = dword ptr -4
.text$mn:00002C98 arg_0           = byte ptr  8
.text$mn:00002C98
.text$mn:00002C98                 push    ebp
.text$mn:00002C99                 mov     ebp, esp
.text$mn:00002C9B                 push    0FFFFFFFFh
.text$mn:00002C9D                 push    offset __ehhandler$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00002CA2                 mov     eax, large fs:0
.text$mn:00002CA8                 push    eax
.text$mn:00002CA9                 sub     esp, 14h
.text$mn:00002CAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002CB1                 xor     eax, ebp
.text$mn:00002CB3                 push    eax
.text$mn:00002CB4                 lea     eax, [ebp+var_C]
.text$mn:00002CB7                 mov     large fs:0, eax
.text$mn:00002CBD                 mov     [ebp+var_14], ecx
.text$mn:00002CC0                 mov     [ebp+var_4], 0
.text$mn:00002CC7                 mov     [ebp+var_10], 0
.text$mn:00002CCE                 mov     ecx, [ebp+var_14]
.text$mn:00002CD1                 add     ecx, 17Ch
.text$mn:00002CD7                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:00002CDC                 mov     [ebp+var_18], eax
.text$mn:00002CDF                 jmp     short loc_2CEA
.text$mn:00002CE1 ; ---------------------------------------------------------------------------
.text$mn:00002CE1
.text$mn:00002CE1 loc_2CE1:                               ; CODE XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>):loc_2D44j
.text$mn:00002CE1                 mov     eax, [ebp+var_10]
.text$mn:00002CE4                 add     eax, 1
.text$mn:00002CE7                 mov     [ebp+var_10], eax
.text$mn:00002CEA
.text$mn:00002CEA loc_2CEA:                               ; CODE XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+47j
.text$mn:00002CEA                 mov     ecx, [ebp+var_10]
.text$mn:00002CED                 cmp     ecx, [ebp+var_18]
.text$mn:00002CF0                 jnb     short loc_2D46
.text$mn:00002CF2                 lea     edx, [ebp+arg_0]
.text$mn:00002CF5                 push    edx
.text$mn:00002CF6                 mov     eax, [ebp+var_10]
.text$mn:00002CF9                 push    eax
.text$mn:00002CFA                 mov     ecx, [ebp+var_14]
.text$mn:00002CFD                 add     ecx, 17Ch
.text$mn:00002D03                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002D08                 add     eax, 1Ch
.text$mn:00002D0B                 push    eax
.text$mn:00002D0C                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002D11                 add     esp, 8
.text$mn:00002D14                 movzx   ecx, al
.text$mn:00002D17                 test    ecx, ecx
.text$mn:00002D19                 jz      short loc_2D44
.text$mn:00002D1B                 mov     edx, [ebp+var_10]
.text$mn:00002D1E                 push    edx
.text$mn:00002D1F                 mov     ecx, [ebp+var_14]
.text$mn:00002D22                 add     ecx, 17Ch
.text$mn:00002D28                 call    ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)
.text$mn:00002D2D                 mov     [ebp+var_1C], eax
.text$mn:00002D30                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D37                 lea     ecx, [ebp+arg_0]
.text$mn:00002D3A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002D3F                 mov     eax, [ebp+var_1C]
.text$mn:00002D42                 jmp     short loc_2D5F
.text$mn:00002D44 ; ---------------------------------------------------------------------------
.text$mn:00002D44
.text$mn:00002D44 loc_2D44:                               ; CODE XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+81j
.text$mn:00002D44                 jmp     short loc_2CE1
.text$mn:00002D46 ; ---------------------------------------------------------------------------
.text$mn:00002D46
.text$mn:00002D46 loc_2D46:                               ; CODE XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+58j
.text$mn:00002D46                 mov     [ebp+var_20], 0
.text$mn:00002D4D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D54                 lea     ecx, [ebp+arg_0]
.text$mn:00002D57                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002D5C                 mov     eax, [ebp+var_20]
.text$mn:00002D5F
.text$mn:00002D5F loc_2D5F:                               ; CODE XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+AAj
.text$mn:00002D5F                 mov     ecx, [ebp+var_C]
.text$mn:00002D62                 mov     large fs:0, ecx
.text$mn:00002D69                 pop     ecx
.text$mn:00002D6A                 mov     esp, ebp
.text$mn:00002D6C                 pop     ebp
.text$mn:00002D6D                 retn    1Ch
.text$mn:00002D6D ?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00002D6D
.text$mn:00002D6D ; ---------------------------------------------------------------------------
.text$mn:00002D70                 db 8 dup(0CCh)
.text$mn:00002D78
.text$mn:00002D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D78
.text$mn:00002D78 ; Attributes: bp-based frame
.text$mn:00002D78
.text$mn:00002D78 ; int __thiscall FunctionListPanel::setTreeViewImageList(FunctionListPanel *this, __int16, __int16, int)
.text$mn:00002D78                 public ?setTreeViewImageList@FunctionListPanel@@AAEHHHH@Z
.text$mn:00002D78 ?setTreeViewImageList@FunctionListPanel@@AAEHHHH@Z proc near
.text$mn:00002D78                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+578p
.text$mn:00002D78
.text$mn:00002D78 var_14          = dword ptr -14h
.text$mn:00002D78 var_10          = dword ptr -10h
.text$mn:00002D78 crMask          = dword ptr -0Ch
.text$mn:00002D78 hbmImage        = dword ptr -8
.text$mn:00002D78 var_4           = dword ptr -4
.text$mn:00002D78 arg_0           = word ptr  8
.text$mn:00002D78 arg_4           = word ptr  0Ch
.text$mn:00002D78 arg_8           = dword ptr  10h
.text$mn:00002D78
.text$mn:00002D78                 push    ebp
.text$mn:00002D79                 mov     ebp, esp
.text$mn:00002D7B                 sub     esp, 14h
.text$mn:00002D7E                 mov     [ebp+var_4], ecx
.text$mn:00002D81                 mov     [ebp+crMask], 0C0C0C0h
.text$mn:00002D88                 mov     [ebp+var_14], 3
.text$mn:00002D8F                 push    0               ; cGrow
.text$mn:00002D91                 push    3               ; cInitial
.text$mn:00002D93                 push    21h ; '!'       ; flags
.text$mn:00002D95                 push    10h             ; cy
.text$mn:00002D97                 push    10h             ; cx
.text$mn:00002D99                 call    dword ptr ds:__imp__ImageList_Create@20 ; ImageList_Create(x,x,x,x,x)
.text$mn:00002D9F                 mov     [ebp+var_10], eax
.text$mn:00002DA2                 mov     eax, [ebp+var_4]
.text$mn:00002DA5                 mov     ecx, [ebp+var_10]
.text$mn:00002DA8                 mov     [eax+18Ch], ecx
.text$mn:00002DAE                 cmp     [ebp+var_10], 0
.text$mn:00002DB2                 jnz     short loc_2DBB
.text$mn:00002DB4                 xor     eax, eax
.text$mn:00002DB6                 jmp     loc_2EEE
.text$mn:00002DBB ; ---------------------------------------------------------------------------
.text$mn:00002DBB
.text$mn:00002DBB loc_2DBB:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+3Aj
.text$mn:00002DBB                 movzx   edx, [ebp+arg_0]
.text$mn:00002DBF                 push    edx             ; lpBitmapName
.text$mn:00002DC0                 mov     eax, [ebp+var_4]
.text$mn:00002DC3                 mov     ecx, [eax+4]
.text$mn:00002DC6                 push    ecx             ; hInstance
.text$mn:00002DC7                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00002DCD                 mov     [ebp+hbmImage], eax
.text$mn:00002DD0                 cmp     [ebp+hbmImage], 0
.text$mn:00002DD4                 jnz     short loc_2DDD
.text$mn:00002DD6                 xor     eax, eax
.text$mn:00002DD8                 jmp     loc_2EEE
.text$mn:00002DDD ; ---------------------------------------------------------------------------
.text$mn:00002DDD
.text$mn:00002DDD loc_2DDD:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+5Cj
.text$mn:00002DDD                 mov     edx, [ebp+crMask]
.text$mn:00002DE0                 push    edx             ; crMask
.text$mn:00002DE1                 mov     eax, [ebp+hbmImage]
.text$mn:00002DE4                 push    eax             ; hbmImage
.text$mn:00002DE5                 mov     ecx, [ebp+var_4]
.text$mn:00002DE8                 mov     edx, [ecx+18Ch]
.text$mn:00002DEE                 push    edx             ; himl
.text$mn:00002DEF                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00002DF5                 mov     eax, [ebp+hbmImage]
.text$mn:00002DF8                 push    eax             ; ho
.text$mn:00002DF9                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002DFF                 movzx   ecx, [ebp+arg_4]
.text$mn:00002E03                 push    ecx             ; lpBitmapName
.text$mn:00002E04                 mov     edx, [ebp+var_4]
.text$mn:00002E07                 mov     eax, [edx+4]
.text$mn:00002E0A                 push    eax             ; hInstance
.text$mn:00002E0B                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00002E11                 mov     [ebp+hbmImage], eax
.text$mn:00002E14                 cmp     [ebp+hbmImage], 0
.text$mn:00002E18                 jnz     short loc_2E21
.text$mn:00002E1A                 xor     eax, eax
.text$mn:00002E1C                 jmp     loc_2EEE
.text$mn:00002E21 ; ---------------------------------------------------------------------------
.text$mn:00002E21
.text$mn:00002E21 loc_2E21:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+A0j
.text$mn:00002E21                 mov     ecx, [ebp+crMask]
.text$mn:00002E24                 push    ecx             ; crMask
.text$mn:00002E25                 mov     edx, [ebp+hbmImage]
.text$mn:00002E28                 push    edx             ; hbmImage
.text$mn:00002E29                 mov     eax, [ebp+var_4]
.text$mn:00002E2C                 mov     ecx, [eax+18Ch]
.text$mn:00002E32                 push    ecx             ; himl
.text$mn:00002E33                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00002E39                 mov     edx, [ebp+hbmImage]
.text$mn:00002E3C                 push    edx             ; ho
.text$mn:00002E3D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002E43                 movzx   eax, word ptr [ebp+arg_8]
.text$mn:00002E47                 push    eax             ; lpBitmapName
.text$mn:00002E48                 mov     ecx, [ebp+var_4]
.text$mn:00002E4B                 mov     edx, [ecx+4]
.text$mn:00002E4E                 push    edx             ; hInstance
.text$mn:00002E4F                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00002E55                 mov     [ebp+hbmImage], eax
.text$mn:00002E58                 cmp     [ebp+hbmImage], 0
.text$mn:00002E5C                 jnz     short loc_2E65
.text$mn:00002E5E                 xor     eax, eax
.text$mn:00002E60                 jmp     loc_2EEE
.text$mn:00002E65 ; ---------------------------------------------------------------------------
.text$mn:00002E65
.text$mn:00002E65 loc_2E65:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+E4j
.text$mn:00002E65                 mov     eax, [ebp+crMask]
.text$mn:00002E68                 push    eax             ; crMask
.text$mn:00002E69                 mov     ecx, [ebp+hbmImage]
.text$mn:00002E6C                 push    ecx             ; hbmImage
.text$mn:00002E6D                 mov     edx, [ebp+var_4]
.text$mn:00002E70                 mov     eax, [edx+18Ch]
.text$mn:00002E76                 push    eax             ; himl
.text$mn:00002E77                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00002E7D                 mov     ecx, [ebp+hbmImage]
.text$mn:00002E80                 push    ecx             ; ho
.text$mn:00002E81                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002E87                 mov     edx, [ebp+var_4]
.text$mn:00002E8A                 mov     eax, [edx+18Ch]
.text$mn:00002E90                 push    eax             ; himl
.text$mn:00002E91                 call    dword ptr ds:__imp__ImageList_GetImageCount@4 ; ImageList_GetImageCount(x)
.text$mn:00002E97                 cmp     eax, 3
.text$mn:00002E9A                 jge     short loc_2EA0
.text$mn:00002E9C                 xor     eax, eax
.text$mn:00002E9E                 jmp     short loc_2EEE
.text$mn:00002EA0 ; ---------------------------------------------------------------------------
.text$mn:00002EA0
.text$mn:00002EA0 loc_2EA0:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+122j
.text$mn:00002EA0                 mov     ecx, [ebp+var_4]
.text$mn:00002EA3                 mov     edx, [ecx+18Ch]
.text$mn:00002EA9                 push    edx             ; lParam
.text$mn:00002EAA                 push    0               ; wParam
.text$mn:00002EAC                 push    1109h           ; Msg
.text$mn:00002EB1                 mov     ecx, [ebp+var_4]
.text$mn:00002EB4                 add     ecx, 78h ; 'x'  ; this
.text$mn:00002EB7                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002EBC                 push    eax             ; hWnd
.text$mn:00002EBD                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002EC3                 mov     eax, [ebp+var_4]
.text$mn:00002EC6                 mov     ecx, [eax+18Ch]
.text$mn:00002ECC                 push    ecx             ; lParam
.text$mn:00002ECD                 push    0               ; wParam
.text$mn:00002ECF                 push    1109h           ; Msg
.text$mn:00002ED4                 mov     ecx, [ebp+var_4]
.text$mn:00002ED7                 add     ecx, 0B8h ; '+' ; this
.text$mn:00002EDD                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002EE2                 push    eax             ; hWnd
.text$mn:00002EE3                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002EE9                 mov     eax, 1
.text$mn:00002EEE
.text$mn:00002EEE loc_2EEE:                               ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+3Ej
.text$mn:00002EEE                                         ; FunctionListPanel::setTreeViewImageList(int,int,int)+60j ...
.text$mn:00002EEE                 mov     esp, ebp
.text$mn:00002EF0                 pop     ebp
.text$mn:00002EF1                 retn    0Ch
.text$mn:00002EF1 ?setTreeViewImageList@FunctionListPanel@@AAEHHHH@Z endp
.text$mn:00002EF1
.text$mn:00002EF1 ; ---------------------------------------------------------------------------
.text$mn:00002EF4                 align 8
.text$mn:00002EF8
.text$mn:00002EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002EF8
.text$mn:00002EF8 ; Attributes: bp-based frame
.text$mn:00002EF8
.text$mn:00002EF8 ; bool __thiscall FunctionListPanel::openSelection(FunctionListPanel *this, const struct TreeView *)
.text$mn:00002EF8                 public ?openSelection@FunctionListPanel@@AAE_NABVTreeView@@@Z
.text$mn:00002EF8 ?openSelection@FunctionListPanel@@AAE_NABVTreeView@@@Z proc near
.text$mn:00002EF8                                         ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+FFp
.text$mn:00002EF8                                         ; FunctionListPanel::notified(tagNMHDR *)+11Fp
.text$mn:00002EF8
.text$mn:00002EF8 lParam          = dword ptr -38h
.text$mn:00002EF8 var_34          = dword ptr -34h
.text$mn:00002EF8 var_20          = dword ptr -20h
.text$mn:00002EF8 var_14          = dword ptr -14h
.text$mn:00002EF8 var_10          = dword ptr -10h
.text$mn:00002EF8 var_C           = dword ptr -0Ch
.text$mn:00002EF8 var_8           = dword ptr -8
.text$mn:00002EF8 var_4           = dword ptr -4
.text$mn:00002EF8 arg_0           = dword ptr  8
.text$mn:00002EF8
.text$mn:00002EF8                 push    ebp
.text$mn:00002EF9                 mov     ebp, esp
.text$mn:00002EFB                 sub     esp, 38h
.text$mn:00002EFE                 mov     [ebp+var_8], ecx
.text$mn:00002F01                 mov     [ebp+lParam], 6
.text$mn:00002F08                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002F0B                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:00002F10                 mov     [ebp+var_34], eax
.text$mn:00002F13                 lea     eax, [ebp+lParam]
.text$mn:00002F16                 push    eax             ; lParam
.text$mn:00002F17                 push    0               ; wParam
.text$mn:00002F19                 push    113Eh           ; Msg
.text$mn:00002F1E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002F21                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002F26                 push    eax             ; hWnd
.text$mn:00002F27                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002F2D                 cmp     [ebp+var_20], 0
.text$mn:00002F31                 jz      short loc_2F39
.text$mn:00002F33                 cmp     [ebp+var_20], 1
.text$mn:00002F37                 jnz     short loc_2F3D
.text$mn:00002F39
.text$mn:00002F39 loc_2F39:                               ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+39j
.text$mn:00002F39                 xor     al, al
.text$mn:00002F3B                 jmp     short loc_2FBA
.text$mn:00002F3D ; ---------------------------------------------------------------------------
.text$mn:00002F3D
.text$mn:00002F3D loc_2F3D:                               ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+3Fj
.text$mn:00002F3D                 mov     ecx, [ebp+var_14]
.text$mn:00002F40                 mov     [ebp+var_C], ecx
.text$mn:00002F43                 cmp     [ebp+var_C], 0
.text$mn:00002F47                 jnz     short loc_2F4D
.text$mn:00002F49                 xor     al, al
.text$mn:00002F4B                 jmp     short loc_2FBA
.text$mn:00002F4D ; ---------------------------------------------------------------------------
.text$mn:00002F4D
.text$mn:00002F4D loc_2F4D:                               ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+4Fj
.text$mn:00002F4D                 mov     ecx, [ebp+var_C]
.text$mn:00002F50                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002F55                 push    eax             ; Str
.text$mn:00002F56                 call    __wtoi
.text$mn:00002F5B                 add     esp, 4
.text$mn:00002F5E                 mov     [ebp+var_4], eax
.text$mn:00002F61                 cmp     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002F65                 jnz     short loc_2F6B
.text$mn:00002F67                 xor     al, al
.text$mn:00002F69                 jmp     short loc_2FBA
.text$mn:00002F6B ; ---------------------------------------------------------------------------
.text$mn:00002F6B
.text$mn:00002F6B loc_2F6B:                               ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+6Dj
.text$mn:00002F6B                 push    0               ; __int32
.text$mn:00002F6D                 mov     edx, [ebp+var_4]
.text$mn:00002F70                 push    edx             ; unsigned int
.text$mn:00002F71                 push    876h            ; unsigned int
.text$mn:00002F76                 mov     eax, [ebp+var_8]
.text$mn:00002F79                 mov     ecx, [eax+130h]
.text$mn:00002F7F                 mov     ecx, [ecx]      ; this
.text$mn:00002F81                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002F86                 mov     [ebp+var_10], eax
.text$mn:00002F89                 push    0               ; __int32
.text$mn:00002F8B                 mov     edx, [ebp+var_10]
.text$mn:00002F8E                 push    edx             ; unsigned int
.text$mn:00002F8F                 push    8B8h            ; unsigned int
.text$mn:00002F94                 mov     eax, [ebp+var_8]
.text$mn:00002F97                 mov     ecx, [eax+130h]
.text$mn:00002F9D                 mov     ecx, [ecx]      ; this
.text$mn:00002F9F                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002FA4                 mov     edx, [ebp+var_4]
.text$mn:00002FA7                 push    edx             ; int
.text$mn:00002FA8                 mov     eax, [ebp+var_8]
.text$mn:00002FAB                 mov     ecx, [eax+130h]
.text$mn:00002FB1                 mov     ecx, [ecx]      ; this
.text$mn:00002FB3                 call    ?scrollPosToCenter@ScintillaEditView@@QAEXH@Z ; ScintillaEditView::scrollPosToCenter(int)
.text$mn:00002FB8                 mov     al, 1
.text$mn:00002FBA
.text$mn:00002FBA loc_2FBA:                               ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+43j
.text$mn:00002FBA                                         ; FunctionListPanel::openSelection(TreeView const &)+53j ...
.text$mn:00002FBA                 mov     esp, ebp
.text$mn:00002FBC                 pop     ebp
.text$mn:00002FBD                 retn    4
.text$mn:00002FBD ?openSelection@FunctionListPanel@@AAE_NABVTreeView@@@Z endp
.text$mn:00002FBD
.text$mn:00002FBD ; ---------------------------------------------------------------------------
.text$mn:00002FC0                 db 8 dup(0CCh)
.text$mn:00002FC8
.text$mn:00002FC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FC8
.text$mn:00002FC8 ; Attributes: bp-based frame
.text$mn:00002FC8
.text$mn:00002FC8 ; bool __thiscall FunctionListPanel::shouldSort(FunctionListPanel *__hidden this)
.text$mn:00002FC8                 public ?shouldSort@FunctionListPanel@@AAE_NXZ
.text$mn:00002FC8 ?shouldSort@FunctionListPanel@@AAE_NXZ proc near
.text$mn:00002FC8                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+37p
.text$mn:00002FC8                                         ; FunctionListPanel::reload(void)+9Cp ...
.text$mn:00002FC8
.text$mn:00002FC8 lParam          = dword ptr -28h
.text$mn:00002FC8 var_24          = dword ptr -24h
.text$mn:00002FC8 var_18          = byte ptr -18h
.text$mn:00002FC8 var_8           = dword ptr -8
.text$mn:00002FC8 var_4           = dword ptr -4
.text$mn:00002FC8
.text$mn:00002FC8                 push    ebp
.text$mn:00002FC9                 mov     ebp, esp
.text$mn:00002FCB                 sub     esp, 28h
.text$mn:00002FCE                 mov     [ebp+var_8], ecx
.text$mn:00002FD1                 mov     [ebp+lParam], 20h ; ' '
.text$mn:00002FD8                 mov     [ebp+var_24], 4
.text$mn:00002FDF                 lea     eax, [ebp+lParam]
.text$mn:00002FE2                 push    eax             ; lParam
.text$mn:00002FE3                 push    0D4Dh           ; wParam
.text$mn:00002FE8                 push    43Fh            ; Msg
.text$mn:00002FED                 mov     ecx, [ebp+var_8]
.text$mn:00002FF0                 mov     edx, [ecx+6Ch]
.text$mn:00002FF3                 push    edx             ; hWnd
.text$mn:00002FF4                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002FFA                 movzx   eax, [ebp+var_18]
.text$mn:00002FFE                 and     eax, 1
.text$mn:00003001                 jz      short loc_300C
.text$mn:00003003                 mov     [ebp+var_4], 1
.text$mn:0000300A                 jmp     short loc_3013
.text$mn:0000300C ; ---------------------------------------------------------------------------
.text$mn:0000300C
.text$mn:0000300C loc_300C:                               ; CODE XREF: FunctionListPanel::shouldSort(void)+39j
.text$mn:0000300C                 mov     [ebp+var_4], 0
.text$mn:00003013
.text$mn:00003013 loc_3013:                               ; CODE XREF: FunctionListPanel::shouldSort(void)+42j
.text$mn:00003013                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003016                 mov     esp, ebp
.text$mn:00003018                 pop     ebp
.text$mn:00003019                 retn
.text$mn:00003019 ?shouldSort@FunctionListPanel@@AAE_NXZ endp
.text$mn:00003019
.text$mn:00003019 ; ---------------------------------------------------------------------------
.text$mn:0000301A                 db 0Eh dup(0CCh)
.text$mn:00003028
.text$mn:00003028 ; =============== S U B R O U T I N E =======================================
.text$mn:00003028
.text$mn:00003028 ; Attributes: bp-based frame
.text$mn:00003028
.text$mn:00003028 ; void __thiscall FunctionListPanel::setSort(FunctionListPanel *this, bool)
.text$mn:00003028                 public ?setSort@FunctionListPanel@@AAEX_N@Z
.text$mn:00003028 ?setSort@FunctionListPanel@@AAEX_N@Z proc near
.text$mn:00003028                                         ; CODE XREF: FunctionListPanel::reload(void)+11Ep
.text$mn:00003028                                         ; FunctionListPanel::reload(void)+48Ep ...
.text$mn:00003028
.text$mn:00003028 lParam          = dword ptr -28h
.text$mn:00003028 var_24          = dword ptr -24h
.text$mn:00003028 var_18          = byte ptr -18h
.text$mn:00003028 var_8           = dword ptr -8
.text$mn:00003028 var_4           = dword ptr -4
.text$mn:00003028 arg_0           = byte ptr  8
.text$mn:00003028
.text$mn:00003028                 push    ebp
.text$mn:00003029                 mov     ebp, esp
.text$mn:0000302B                 sub     esp, 28h
.text$mn:0000302E                 mov     [ebp+var_8], ecx
.text$mn:00003031                 mov     [ebp+lParam], 20h ; ' '
.text$mn:00003038                 mov     [ebp+var_24], 4
.text$mn:0000303F                 movzx   eax, [ebp+arg_0]
.text$mn:00003043                 test    eax, eax
.text$mn:00003045                 jz      short loc_3050
.text$mn:00003047                 mov     [ebp+var_4], 5
.text$mn:0000304E                 jmp     short loc_3057
.text$mn:00003050 ; ---------------------------------------------------------------------------
.text$mn:00003050
.text$mn:00003050 loc_3050:                               ; CODE XREF: FunctionListPanel::setSort(bool)+1Dj
.text$mn:00003050                 mov     [ebp+var_4], 4
.text$mn:00003057
.text$mn:00003057 loc_3057:                               ; CODE XREF: FunctionListPanel::setSort(bool)+26j
.text$mn:00003057                 mov     cl, byte ptr [ebp+var_4]
.text$mn:0000305A                 mov     [ebp+var_18], cl
.text$mn:0000305D                 lea     edx, [ebp+lParam]
.text$mn:00003060                 push    edx             ; lParam
.text$mn:00003061                 push    0D4Dh           ; wParam
.text$mn:00003066                 push    440h            ; Msg
.text$mn:0000306B                 mov     eax, [ebp+var_8]
.text$mn:0000306E                 mov     ecx, [eax+6Ch]
.text$mn:00003071                 push    ecx             ; hWnd
.text$mn:00003072                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003078                 mov     esp, ebp
.text$mn:0000307A                 pop     ebp
.text$mn:0000307B                 retn    4
.text$mn:0000307B ?setSort@FunctionListPanel@@AAEX_N@Z endp
.text$mn:0000307B
.text$mn:0000307B ; ---------------------------------------------------------------------------
.text$mn:0000307E                 db 0Ah dup(0CCh)
.text$mn:00003088
.text$mn:00003088 ; =============== S U B R O U T I N E =======================================
.text$mn:00003088
.text$mn:00003088 ; Attributes: bp-based frame
.text$mn:00003088
.text$mn:00003088 ; int __stdcall funclstToolbarProc(HWND hWnd, int, WPARAM wParam, LPARAM lParam)
.text$mn:00003088 ?funclstToolbarProc@@YGJPAUHWND__@@IIJ@Z proc near
.text$mn:00003088                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1CDo
.text$mn:00003088
.text$mn:00003088 var_4           = dword ptr -4
.text$mn:00003088 hWnd            = dword ptr  8
.text$mn:00003088 arg_4           = dword ptr  0Ch
.text$mn:00003088 wParam          = dword ptr  10h
.text$mn:00003088 lParam          = dword ptr  14h
.text$mn:00003088
.text$mn:00003088                 push    ebp
.text$mn:00003089                 mov     ebp, esp
.text$mn:0000308B                 push    ecx
.text$mn:0000308C                 mov     eax, [ebp+arg_4]
.text$mn:0000308F                 mov     [ebp+var_4], eax
.text$mn:00003092                 cmp     [ebp+var_4], 133h
.text$mn:00003099                 jz      short loc_309D
.text$mn:0000309B                 jmp     short loc_30BD
.text$mn:0000309D ; ---------------------------------------------------------------------------
.text$mn:0000309D
.text$mn:0000309D loc_309D:                               ; CODE XREF: funclstToolbarProc(HWND__ *,uint,uint,long)+11j
.text$mn:0000309D                 mov     ecx, [ebp+lParam]
.text$mn:000030A0                 push    ecx             ; lParam
.text$mn:000030A1                 mov     edx, [ebp+wParam]
.text$mn:000030A4                 push    edx             ; wParam
.text$mn:000030A5                 push    133h            ; Msg
.text$mn:000030AA                 mov     eax, [ebp+hWnd]
.text$mn:000030AD                 push    eax             ; hWnd
.text$mn:000030AE                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:000030B4                 push    eax             ; hWnd
.text$mn:000030B5                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000030BB                 jmp     short loc_30D3
.text$mn:000030BD ; ---------------------------------------------------------------------------
.text$mn:000030BD
.text$mn:000030BD loc_30BD:                               ; CODE XREF: funclstToolbarProc(HWND__ *,uint,uint,long)+13j
.text$mn:000030BD                 mov     ecx, [ebp+lParam]
.text$mn:000030C0                 push    ecx
.text$mn:000030C1                 mov     edx, [ebp+wParam]
.text$mn:000030C4                 push    edx
.text$mn:000030C5                 mov     eax, [ebp+arg_4]
.text$mn:000030C8                 push    eax
.text$mn:000030C9                 mov     ecx, [ebp+hWnd]
.text$mn:000030CC                 push    ecx
.text$mn:000030CD                 call    ds:_oldFunclstToolbarProc
.text$mn:000030D3
.text$mn:000030D3 loc_30D3:                               ; CODE XREF: funclstToolbarProc(HWND__ *,uint,uint,long)+33j
.text$mn:000030D3                 mov     esp, ebp
.text$mn:000030D5                 pop     ebp
.text$mn:000030D6                 retn    10h
.text$mn:000030D6 ?funclstToolbarProc@@YGJPAUHWND__@@IIJ@Z endp
.text$mn:000030D6
.text$mn:000030D6 ; ---------------------------------------------------------------------------
.text$mn:000030D9                 align 4
.text$mn:000030D9 _text$mn        ends
.text$mn:000030D9
.text$x:000030DC ; ===========================================================================
.text$x:000030DC
.text$x:000030DC ; Segment type: Pure code
.text$x:000030DC ; Segment permissions: Read/Execute
.text$x:000030DC _text$x         segment para public 'CODE' use32
.text$x:000030DC                 assume cs:_text$x
.text$x:000030DC                 ;org 30DCh
.text$x:000030DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000030DC
.text$x:000030DC ; =============== S U B R O U T I N E =======================================
.text$x:000030DC
.text$x:000030DC
.text$x:000030DC __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$0 proc near
.text$x:000030DC                                         ; DATA XREF: .xdata$x:0000DB3Co
.text$x:000030DC                 lea     ecx, [ebp-2Ch]
.text$x:000030DF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000030DF __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$0 endp
.text$x:000030DF
.text$x:000030E4
.text$x:000030E4 ; =============== S U B R O U T I N E =======================================
.text$x:000030E4
.text$x:000030E4
.text$x:000030E4 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$1 proc near
.text$x:000030E4                                         ; DATA XREF: .xdata$x:0000DB44o
.text$x:000030E4                 lea     ecx, [ebp-80h]
.text$x:000030E7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000030E7 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$1 endp
.text$x:000030E7
.text$x:000030EC
.text$x:000030EC ; =============== S U B R O U T I N E =======================================
.text$x:000030EC
.text$x:000030EC
.text$x:000030EC __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$3 proc near
.text$x:000030EC                                         ; DATA XREF: .xdata$x:0000DB4Co
.text$x:000030EC                 lea     ecx, [ebp-48h]
.text$x:000030EF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000030EF __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$3 endp
.text$x:000030EF
.text$x:000030F4
.text$x:000030F4 ; =============== S U B R O U T I N E =======================================
.text$x:000030F4
.text$x:000030F4
.text$x:000030F4 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$4 proc near
.text$x:000030F4                                         ; DATA XREF: .xdata$x:0000DB54o
.text$x:000030F4                 lea     ecx, [ebp-0B8h]
.text$x:000030FA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000030FA __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$4 endp
.text$x:000030FA
.text$x:000030FF
.text$x:000030FF ; =============== S U B R O U T I N E =======================================
.text$x:000030FF
.text$x:000030FF
.text$x:000030FF __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$6 proc near
.text$x:000030FF                                         ; DATA XREF: .xdata$x:0000DB5Co
.text$x:000030FF                 mov     ecx, [ebp-12Ch]
.text$x:00003105                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003105 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$6 endp
.text$x:00003105
.text$x:0000310A
.text$x:0000310A ; =============== S U B R O U T I N E =======================================
.text$x:0000310A
.text$x:0000310A
.text$x:0000310A __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$7 proc near
.text$x:0000310A                                         ; DATA XREF: .xdata$x:0000DB64o
.text$x:0000310A                 mov     ecx, [ebp-128h]
.text$x:00003110                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003110 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$7 endp
.text$x:00003110
.text$x:00003115
.text$x:00003115 ; =============== S U B R O U T I N E =======================================
.text$x:00003115
.text$x:00003115
.text$x:00003115 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$8 proc near
.text$x:00003115                                         ; DATA XREF: .xdata$x:0000DB6Co
.text$x:00003115                 lea     ecx, [ebp-64h]
.text$x:00003118                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003118 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$8 endp
.text$x:00003118
.text$x:0000311D
.text$x:0000311D ; =============== S U B R O U T I N E =======================================
.text$x:0000311D
.text$x:0000311D
.text$x:0000311D __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$9 proc near
.text$x:0000311D                                         ; DATA XREF: .xdata$x:0000DB74o
.text$x:0000311D                                         ; .rdata:off_7Co
.text$x:0000311D                 lea     ecx, [ebp-9Ch]
.text$x:00003123                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003123 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$9 endp
.text$x:00003123
.text$x:00003128
.text$x:00003128 ; =============== S U B R O U T I N E =======================================
.text$x:00003128
.text$x:00003128
.text$x:00003128 __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$11 proc near
.text$x:00003128                                         ; DATA XREF: .xdata$x:0000DB7Co
.text$x:00003128                 mov     ecx, [ebp-13Ch]
.text$x:0000312E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000312E __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$11 endp
.text$x:0000312E
.text$x:00003133
.text$x:00003133 ; =============== S U B R O U T I N E =======================================
.text$x:00003133
.text$x:00003133
.text$x:00003133 __ehhandler$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z proc near
.text$x:00003133                                         ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+5o
.text$x:00003133
.text$x:00003133 arg_4           = dword ptr  8
.text$x:00003133
.text$x:00003133                 mov     edx, [esp+arg_4]
.text$x:00003137                 lea     eax, [edx+0Ch]
.text$x:0000313A                 mov     ecx, [edx-134h]
.text$x:00003140                 xor     ecx, eax
.text$x:00003142                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003147                 mov     ecx, [edx-4]
.text$x:0000314A                 xor     ecx, eax
.text$x:0000314C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003151                 mov     eax, offset __ehfuncinfo$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z
.text$x:00003156                 jmp     ___CxxFrameHandler3
.text$x:00003156 __ehhandler$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z endp
.text$x:00003156
.text$x:0000315B
.text$x:0000315B ; =============== S U B R O U T I N E =======================================
.text$x:0000315B
.text$x:0000315B
.text$x:0000315B __unwindfunclet$?sortOrUnsort@FunctionListPanel@@QAEXXZ$0 proc near
.text$x:0000315B                                         ; DATA XREF: .xdata$x:0000D970o
.text$x:0000315B                 lea     ecx, [ebp-234h]
.text$x:00003161                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003161 __unwindfunclet$?sortOrUnsort@FunctionListPanel@@QAEXXZ$0 endp
.text$x:00003161
.text$x:00003166
.text$x:00003166 ; =============== S U B R O U T I N E =======================================
.text$x:00003166
.text$x:00003166
.text$x:00003166 __ehhandler$?sortOrUnsort@FunctionListPanel@@QAEXXZ proc near
.text$x:00003166                                         ; DATA XREF: FunctionListPanel::sortOrUnsort(void)+5o
.text$x:00003166
.text$x:00003166 arg_4           = dword ptr  8
.text$x:00003166
.text$x:00003166                 mov     edx, [esp+arg_4]
.text$x:0000316A                 lea     eax, [edx+0Ch]
.text$x:0000316D                 mov     ecx, [edx-238h]
.text$x:00003173                 xor     ecx, eax
.text$x:00003175                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000317A                 mov     ecx, [edx-4]
.text$x:0000317D                 xor     ecx, eax
.text$x:0000317F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003184                 mov     eax, offset __ehfuncinfo$?sortOrUnsort@FunctionListPanel@@QAEXXZ
.text$x:00003189                 jmp     ___CxxFrameHandler3
.text$x:00003189 __ehhandler$?sortOrUnsort@FunctionListPanel@@QAEXXZ endp
.text$x:00003189
.text$x:0000318E
.text$x:0000318E ; =============== S U B R O U T I N E =======================================
.text$x:0000318E
.text$x:0000318E
.text$x:0000318E __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$0 proc near
.text$x:0000318E                                         ; DATA XREF: .xdata$x:0000DB0Co
.text$x:0000318E                 lea     ecx, [ebp-280h] ; this
.text$x:00003194                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:00003194 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$0 endp
.text$x:00003194
.text$x:00003199
.text$x:00003199 ; =============== S U B R O U T I N E =======================================
.text$x:00003199
.text$x:00003199
.text$x:00003199 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$1 proc near
.text$x:00003199                                         ; DATA XREF: .xdata$x:0000DB14o
.text$x:00003199                 mov     ecx, [ebp-320h] ; this
.text$x:0000319F                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:0000319F __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$1 endp
.text$x:0000319F
.text$x:000031A4
.text$x:000031A4 ; =============== S U B R O U T I N E =======================================
.text$x:000031A4
.text$x:000031A4
.text$x:000031A4 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$2 proc near
.text$x:000031A4                                         ; DATA XREF: .xdata$x:0000DB1Co
.text$x:000031A4                 lea     ecx, [ebp-2F8h]
.text$x:000031AA                 jmp     ??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ ; std::vector<foundInfo,std::allocator<foundInfo>>::~vector<foundInfo,std::allocator<foundInfo>>(void)
.text$x:000031AA __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$2 endp
.text$x:000031AA
.text$x:000031AF
.text$x:000031AF ; =============== S U B R O U T I N E =======================================
.text$x:000031AF
.text$x:000031AF
.text$x:000031AF __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$3 proc near
.text$x:000031AF                                         ; DATA XREF: .xdata$x:0000DB24o
.text$x:000031AF                 lea     ecx, [ebp-2C0h] ; this
.text$x:000031B5                 jmp     ??1AssociationInfo@@QAE@XZ ; AssociationInfo::~AssociationInfo(void)
.text$x:000031B5 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$3 endp
.text$x:000031B5
.text$x:000031BA
.text$x:000031BA ; =============== S U B R O U T I N E =======================================
.text$x:000031BA
.text$x:000031BA
.text$x:000031BA __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$4 proc near
.text$x:000031BA                                         ; DATA XREF: .xdata$x:0000DB2Co
.text$x:000031BA                 lea     ecx, [ebp-234h]
.text$x:000031C0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031C0 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$4 endp
.text$x:000031C0
.text$x:000031C5
.text$x:000031C5 ; =============== S U B R O U T I N E =======================================
.text$x:000031C5
.text$x:000031C5
.text$x:000031C5 __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$5 proc near
.text$x:000031C5                                         ; DATA XREF: .xdata$x:0000DB34o
.text$x:000031C5                 mov     ecx, [ebp-324h]
.text$x:000031CB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031CB __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$5 endp
.text$x:000031CB
.text$x:000031D0
.text$x:000031D0 ; =============== S U B R O U T I N E =======================================
.text$x:000031D0
.text$x:000031D0
.text$x:000031D0 __ehhandler$?reload@FunctionListPanel@@QAEXXZ proc near
.text$x:000031D0                                         ; DATA XREF: FunctionListPanel::reload(void)+5o
.text$x:000031D0
.text$x:000031D0 arg_4           = dword ptr  8
.text$x:000031D0
.text$x:000031D0                 mov     edx, [esp+arg_4]
.text$x:000031D4                 lea     eax, [edx+0Ch]
.text$x:000031D7                 mov     ecx, [edx-31Ch]
.text$x:000031DD                 xor     ecx, eax
.text$x:000031DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031E4                 mov     ecx, [edx-4]
.text$x:000031E7                 xor     ecx, eax
.text$x:000031E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031EE                 mov     eax, offset __ehfuncinfo$?reload@FunctionListPanel@@QAEXXZ
.text$x:000031F3                 jmp     ___CxxFrameHandler3
.text$x:000031F3 __ehhandler$?reload@FunctionListPanel@@QAEXXZ endp
.text$x:000031F3
.text$x:000031F8
.text$x:000031F8 ; =============== S U B R O U T I N E =======================================
.text$x:000031F8
.text$x:000031F8
.text$x:000031F8 __unwindfunclet$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ$0 proc near
.text$x:000031F8                                         ; DATA XREF: .xdata$x:0000D968o
.text$x:000031F8                 lea     ecx, [ebp-234h]
.text$x:000031FE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031FE __unwindfunclet$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ$0 endp
.text$x:000031FE
.text$x:00003203
.text$x:00003203 ; =============== S U B R O U T I N E =======================================
.text$x:00003203
.text$x:00003203
.text$x:00003203 __ehhandler$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ proc near
.text$x:00003203                                         ; DATA XREF: FunctionListPanel::searchFuncAndSwitchView(void)+5o
.text$x:00003203
.text$x:00003203 arg_4           = dword ptr  8
.text$x:00003203
.text$x:00003203                 mov     edx, [esp+arg_4]
.text$x:00003207                 lea     eax, [edx+0Ch]
.text$x:0000320A                 mov     ecx, [edx-238h]
.text$x:00003210                 xor     ecx, eax
.text$x:00003212                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003217                 mov     ecx, [edx-4]
.text$x:0000321A                 xor     ecx, eax
.text$x:0000321C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003221                 mov     eax, offset __ehfuncinfo$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ
.text$x:00003226                 jmp     ___CxxFrameHandler3
.text$x:00003226 __ehhandler$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ endp
.text$x:00003226
.text$x:0000322B
.text$x:0000322B ; =============== S U B R O U T I N E =======================================
.text$x:0000322B
.text$x:0000322B
.text$x:0000322B __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$0 proc near
.text$x:0000322B                                         ; DATA XREF: .xdata$x:0000D988o
.text$x:0000322B                 mov     eax, ds:?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA
.text$x:00003230                 and     eax, 0FFFFFFFEh
.text$x:00003233                 mov     ds:?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA, eax
.text$x:00003238                 retn
.text$x:00003238 __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$0 endp
.text$x:00003238
.text$x:00003239
.text$x:00003239 ; =============== S U B R O U T I N E =======================================
.text$x:00003239
.text$x:00003239
.text$x:00003239 __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$1 proc near
.text$x:00003239                                         ; DATA XREF: .xdata$x:0000D990o
.text$x:00003239                 lea     ecx, [ebp-29Ch]
.text$x:0000323F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000323F __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$1 endp
.text$x:0000323F
.text$x:00003244
.text$x:00003244 ; =============== S U B R O U T I N E =======================================
.text$x:00003244
.text$x:00003244
.text$x:00003244 __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$2 proc near
.text$x:00003244                                         ; DATA XREF: .xdata$x:0000D998o
.text$x:00003244                 lea     ecx, [ebp-280h]
.text$x:0000324A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000324A __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$2 endp
.text$x:0000324A
.text$x:0000324F
.text$x:0000324F ; =============== S U B R O U T I N E =======================================
.text$x:0000324F
.text$x:0000324F
.text$x:0000324F __ehhandler$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z proc near
.text$x:0000324F                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+5o
.text$x:0000324F
.text$x:0000324F arg_4           = dword ptr  8
.text$x:0000324F
.text$x:0000324F                 mov     edx, [esp+arg_4]
.text$x:00003253                 lea     eax, [edx+0Ch]
.text$x:00003256                 mov     ecx, [edx-2E0h]
.text$x:0000325C                 xor     ecx, eax
.text$x:0000325E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003263                 mov     ecx, [edx-4]
.text$x:00003266                 xor     ecx, eax
.text$x:00003268                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000326D                 mov     eax, offset __ehfuncinfo$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z
.text$x:00003272                 jmp     ___CxxFrameHandler3
.text$x:00003272 __ehhandler$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z endp
.text$x:00003272
.text$x:00003277
.text$x:00003277 ; =============== S U B R O U T I N E =======================================
.text$x:00003277
.text$x:00003277
.text$x:00003277 __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$0 proc near
.text$x:00003277                                         ; DATA XREF: .xdata$x:0000DAECo
.text$x:00003277                 lea     ecx, [ebp+14h]
.text$x:0000327A                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000327A __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$0 endp
.text$x:0000327A
.text$x:0000327F
.text$x:0000327F ; =============== S U B R O U T I N E =======================================
.text$x:0000327F
.text$x:0000327F
.text$x:0000327F __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$1 proc near
.text$x:0000327F                                         ; DATA XREF: .xdata$x:0000DAE4o
.text$x:0000327F                 mov     eax, [ebp-814h]
.text$x:00003285                 and     eax, 1
.text$x:00003288                 jz      locret_329D
.text$x:0000328E                 and     dword ptr [ebp-814h], 0FFFFFFFEh
.text$x:00003295                 mov     ecx, [ebp+8]
.text$x:00003298                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000329D ; ---------------------------------------------------------------------------
.text$x:0000329D
.text$x:0000329D locret_329D:                            ; CODE XREF: __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$1+9j
.text$x:0000329D                 retn
.text$x:0000329D __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$1 endp
.text$x:0000329D
.text$x:0000329E
.text$x:0000329E ; =============== S U B R O U T I N E =======================================
.text$x:0000329E
.text$x:0000329E
.text$x:0000329E __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$2 proc near
.text$x:0000329E                                         ; DATA XREF: .xdata$x:0000DAF4o
.text$x:0000329E                 lea     ecx, [ebp-868h]
.text$x:000032A4                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000032A4 __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$2 endp
.text$x:000032A4
.text$x:000032A9
.text$x:000032A9 ; =============== S U B R O U T I N E =======================================
.text$x:000032A9
.text$x:000032A9
.text$x:000032A9 __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$3 proc near
.text$x:000032A9                                         ; DATA XREF: .xdata$x:0000DAFCo
.text$x:000032A9                 mov     ecx, [ebp-844h]
.text$x:000032AF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000032AF __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$3 endp
.text$x:000032AF
.text$x:000032B4
.text$x:000032B4 ; =============== S U B R O U T I N E =======================================
.text$x:000032B4
.text$x:000032B4
.text$x:000032B4 __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$5 proc near
.text$x:000032B4                                         ; DATA XREF: .xdata$x:0000DB04o
.text$x:000032B4                 mov     ecx, [ebp-848h]
.text$x:000032BA                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000032BA __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$5 endp
.text$x:000032BA
.text$x:000032BF
.text$x:000032BF ; =============== S U B R O U T I N E =======================================
.text$x:000032BF
.text$x:000032BF
.text$x:000032BF __ehhandler$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z proc near
.text$x:000032BF                                         ; DATA XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+5o
.text$x:000032BF
.text$x:000032BF arg_4           = dword ptr  8
.text$x:000032BF
.text$x:000032BF                 mov     edx, [esp+arg_4]
.text$x:000032C3                 lea     eax, [edx+0Ch]
.text$x:000032C6                 mov     ecx, [edx-860h]
.text$x:000032CC                 xor     ecx, eax
.text$x:000032CE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000032D3                 mov     ecx, [edx-4]
.text$x:000032D6                 xor     ecx, eax
.text$x:000032D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000032DD                 mov     eax, offset __ehfuncinfo$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z
.text$x:000032E2                 jmp     ___CxxFrameHandler3
.text$x:000032E2 __ehhandler$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z endp
.text$x:000032E2
.text$x:000032E7
.text$x:000032E7 ; =============== S U B R O U T I N E =======================================
.text$x:000032E7
.text$x:000032E7
.text$x:000032E7 __unwindfunclet$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z$0 proc near
.text$x:000032E7                                         ; DATA XREF: .xdata$x:0000D960o
.text$x:000032E7                 lea     ecx, [ebp-2Ch]
.text$x:000032EA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032EA __unwindfunclet$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z$0 endp
.text$x:000032EA
.text$x:000032EF
.text$x:000032EF ; =============== S U B R O U T I N E =======================================
.text$x:000032EF
.text$x:000032EF
.text$x:000032EF __ehhandler$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z proc near
.text$x:000032EF                                         ; DATA XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+5o
.text$x:000032EF
.text$x:000032EF arg_4           = dword ptr  8
.text$x:000032EF
.text$x:000032EF                 mov     edx, [esp+arg_4]
.text$x:000032F3                 lea     eax, [edx+0Ch]
.text$x:000032F6                 mov     ecx, [edx-44h]
.text$x:000032F9                 xor     ecx, eax
.text$x:000032FB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003300                 mov     ecx, [edx-4]
.text$x:00003303                 xor     ecx, eax
.text$x:00003305                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000330A                 mov     eax, offset __ehfuncinfo$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z
.text$x:0000330F                 jmp     ___CxxFrameHandler3
.text$x:0000330F __ehhandler$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z endp
.text$x:0000330F
.text$x:00003314
.text$x:00003314 ; =============== S U B R O U T I N E =======================================
.text$x:00003314
.text$x:00003314
.text$x:00003314 __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$0 proc near
.text$x:00003314                                         ; DATA XREF: .xdata$x:0000D978o
.text$x:00003314                 lea     ecx, [ebp+8]    ; this
.text$x:00003317                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:00003317 __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$0 endp
.text$x:00003317
.text$x:0000331C
.text$x:0000331C ; =============== S U B R O U T I N E =======================================
.text$x:0000331C
.text$x:0000331C
.text$x:0000331C __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$1 proc near
.text$x:0000331C                                         ; DATA XREF: .xdata$x:0000D980o
.text$x:0000331C                 lea     ecx, [ebp-7Ch]  ; this
.text$x:0000331F                 jmp     ??1TreeParams@@QAE@XZ ; TreeParams::~TreeParams(void)
.text$x:0000331F __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$1 endp
.text$x:0000331F
.text$x:00003324
.text$x:00003324 ; =============== S U B R O U T I N E =======================================
.text$x:00003324
.text$x:00003324
.text$x:00003324 __ehhandler$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z proc near
.text$x:00003324                                         ; DATA XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+5o
.text$x:00003324
.text$x:00003324 arg_4           = dword ptr  8
.text$x:00003324
.text$x:00003324                 mov     edx, [esp+arg_4]
.text$x:00003328                 lea     eax, [edx+0Ch]
.text$x:0000332B                 mov     ecx, [edx-84h]
.text$x:00003331                 xor     ecx, eax
.text$x:00003333                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003338                 mov     ecx, [edx-4]
.text$x:0000333B                 xor     ecx, eax
.text$x:0000333D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003342                 mov     eax, offset __ehfuncinfo$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z
.text$x:00003347                 jmp     ___CxxFrameHandler3
.text$x:00003347 __ehhandler$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z endp
.text$x:00003347
.text$x:0000334C
.text$x:0000334C ; =============== S U B R O U T I N E =======================================
.text$x:0000334C
.text$x:0000334C
.text$x:0000334C __unwindfunclet$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:0000334C                                         ; DATA XREF: .xdata$x:0000D958o
.text$x:0000334C                 lea     ecx, [ebp+8]
.text$x:0000334F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000334F __unwindfunclet$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:0000334F
.text$x:00003354
.text$x:00003354 ; =============== S U B R O U T I N E =======================================
.text$x:00003354
.text$x:00003354
.text$x:00003354 __ehhandler$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:00003354                                         ; DATA XREF: FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003354
.text$x:00003354 arg_4           = dword ptr  8
.text$x:00003354
.text$x:00003354                 mov     edx, [esp+arg_4]
.text$x:00003358                 lea     eax, [edx+0Ch]
.text$x:0000335B                 mov     ecx, [edx-18h]
.text$x:0000335E                 xor     ecx, eax
.text$x:00003360                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003365                 mov     eax, offset __ehfuncinfo$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:0000336A                 jmp     ___CxxFrameHandler3
.text$x:0000336A __ehhandler$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:0000336A
.text$x:0000336A ; ---------------------------------------------------------------------------
.text$x:0000336F                 align 10h
.text$x:0000336F _text$x         ends
.text$x:0000336F
.text$mn:00003370 ; ===========================================================================
.text$mn:00003370
.text$mn:00003370 ; Segment type: Pure code
.text$mn:00003370 ; Segment permissions: Read/Execute
.text$mn:00003370 _text$mn        segment para public 'CODE' use32
.text$mn:00003370                 assume cs:_text$mn
.text$mn:00003370                 ;org 3370h
.text$mn:00003370 ; COMDAT (pick any)
.text$mn:00003370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003370
.text$mn:00003370 ; =============== S U B R O U T I N E =======================================
.text$mn:00003370
.text$mn:00003370 ; Attributes: bp-based frame
.text$mn:00003370
.text$mn:00003370 ; bool __cdecl std::operator==<struct TreeStateNode, struct TreeStateNode>(class std::allocator<struct TreeStateNode> const &, class std::allocator<struct TreeStateNode> const &)
.text$mn:00003370                 public ??$?8UTreeStateNode@@U0@@std@@YA_NABV?$allocator@UTreeStateNode@@@0@0@Z
.text$mn:00003370 ??$?8UTreeStateNode@@U0@@std@@YA_NABV?$allocator@UTreeStateNode@@@0@0@Z proc near
.text$mn:00003370                                         ; CODE XREF: std::operator==<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+1Ep
.text$mn:00003370                 push    ebp
.text$mn:00003371                 mov     ebp, esp
.text$mn:00003373                 mov     al, 1
.text$mn:00003375                 pop     ebp
.text$mn:00003376                 retn
.text$mn:00003376 ??$?8UTreeStateNode@@U0@@std@@YA_NABV?$allocator@UTreeStateNode@@@0@0@Z endp
.text$mn:00003376
.text$mn:00003376 ; ---------------------------------------------------------------------------
.text$mn:00003377                 align 4
.text$mn:00003377 _text$mn        ends
.text$mn:00003377
.text$mn:00003378 ; ===========================================================================
.text$mn:00003378
.text$mn:00003378 ; Segment type: Pure code
.text$mn:00003378 ; Segment permissions: Read/Execute
.text$mn:00003378 _text$mn        segment para public 'CODE' use32
.text$mn:00003378                 assume cs:_text$mn
.text$mn:00003378                 ;org 3378h
.text$mn:00003378 ; COMDAT (pick any)
.text$mn:00003378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003378
.text$mn:00003378 ; =============== S U B R O U T I N E =======================================
.text$mn:00003378
.text$mn:00003378 ; Attributes: bp-based frame
.text$mn:00003378
.text$mn:00003378 ; bool __cdecl std::operator==<class std::allocator<struct TreeStateNode>, class std::allocator<struct TreeStateNode>>(struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> const &, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> const &)
.text$mn:00003378                 public ??$?8V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z
.text$mn:00003378 ??$?8V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z proc near
.text$mn:00003378                                         ; CODE XREF: std::operator!=<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+Cp
.text$mn:00003378
.text$mn:00003378 var_2           = byte ptr -2
.text$mn:00003378 var_1           = byte ptr -1
.text$mn:00003378 arg_0           = dword ptr  8
.text$mn:00003378 arg_4           = dword ptr  0Ch
.text$mn:00003378
.text$mn:00003378                 push    ebp
.text$mn:00003379                 mov     ebp, esp
.text$mn:0000337B                 push    ecx
.text$mn:0000337C                 mov     eax, [ebp+arg_4]
.text$mn:0000337F                 push    eax
.text$mn:00003380                 lea     ecx, [ebp+var_1]
.text$mn:00003383                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(std::allocator<TreeStateNode> const &)
.text$mn:00003388                 push    eax
.text$mn:00003389                 mov     ecx, [ebp+arg_0]
.text$mn:0000338C                 push    ecx
.text$mn:0000338D                 lea     ecx, [ebp+var_2]
.text$mn:00003390                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(std::allocator<TreeStateNode> const &)
.text$mn:00003395                 push    eax
.text$mn:00003396                 call    ??$?8UTreeStateNode@@U0@@std@@YA_NABV?$allocator@UTreeStateNode@@@0@0@Z ; std::operator==<TreeStateNode,TreeStateNode>(std::allocator<TreeStateNode> const &,std::allocator<TreeStateNode> const &)
.text$mn:0000339B                 add     esp, 8
.text$mn:0000339E                 mov     esp, ebp
.text$mn:000033A0                 pop     ebp
.text$mn:000033A1                 retn
.text$mn:000033A1 ??$?8V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z endp
.text$mn:000033A1
.text$mn:000033A1 ; ---------------------------------------------------------------------------
.text$mn:000033A2                 align 4
.text$mn:000033A2 _text$mn        ends
.text$mn:000033A2
.text$mn:000033A4 ; ===========================================================================
.text$mn:000033A4
.text$mn:000033A4 ; Segment type: Pure code
.text$mn:000033A4 ; Segment permissions: Read/Execute
.text$mn:000033A4 _text$mn        segment para public 'CODE' use32
.text$mn:000033A4                 assume cs:_text$mn
.text$mn:000033A4                 ;org 33A4h
.text$mn:000033A4 ; COMDAT (pick any)
.text$mn:000033A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033A4
.text$mn:000033A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000033A4
.text$mn:000033A4 ; Attributes: bp-based frame
.text$mn:000033A4
.text$mn:000033A4 ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000033A4                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:000033A4 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:000033A4                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:000033A4
.text$mn:000033A4 var_2           = byte ptr -2
.text$mn:000033A4 var_1           = byte ptr -1
.text$mn:000033A4 arg_0           = dword ptr  8
.text$mn:000033A4 arg_4           = dword ptr  0Ch
.text$mn:000033A4
.text$mn:000033A4                 push    ebp
.text$mn:000033A5                 mov     ebp, esp
.text$mn:000033A7                 push    ecx
.text$mn:000033A8                 mov     eax, [ebp+arg_4]
.text$mn:000033AB                 push    eax
.text$mn:000033AC                 lea     ecx, [ebp+var_1]
.text$mn:000033AF                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000033B4                 push    eax
.text$mn:000033B5                 mov     ecx, [ebp+arg_0]
.text$mn:000033B8                 push    ecx
.text$mn:000033B9                 lea     ecx, [ebp+var_2]
.text$mn:000033BC                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000033C1                 push    eax
.text$mn:000033C2                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:000033C7                 add     esp, 8
.text$mn:000033CA                 mov     esp, ebp
.text$mn:000033CC                 pop     ebp
.text$mn:000033CD                 retn
.text$mn:000033CD ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:000033CD
.text$mn:000033CD ; ---------------------------------------------------------------------------
.text$mn:000033CE                 align 10h
.text$mn:000033CE _text$mn        ends
.text$mn:000033CE
.text$mn:000033D0 ; ===========================================================================
.text$mn:000033D0
.text$mn:000033D0 ; Segment type: Pure code
.text$mn:000033D0 ; Segment permissions: Read/Execute
.text$mn:000033D0 _text$mn        segment para public 'CODE' use32
.text$mn:000033D0                 assume cs:_text$mn
.text$mn:000033D0                 ;org 33D0h
.text$mn:000033D0 ; COMDAT (pick any)
.text$mn:000033D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033D0
.text$mn:000033D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000033D0
.text$mn:000033D0 ; Attributes: bp-based frame
.text$mn:000033D0
.text$mn:000033D0 ; bool __cdecl std::operator==<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000033D0                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:000033D0 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:000033D0                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+A0p
.text$mn:000033D0                                         ; FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+74p
.text$mn:000033D0
.text$mn:000033D0 var_4           = dword ptr -4
.text$mn:000033D0 arg_0           = dword ptr  8
.text$mn:000033D0 arg_4           = dword ptr  0Ch
.text$mn:000033D0
.text$mn:000033D0                 push    ebp
.text$mn:000033D1                 mov     ebp, esp
.text$mn:000033D3                 push    ecx
.text$mn:000033D4                 mov     eax, [ebp+arg_4]
.text$mn:000033D7                 push    eax
.text$mn:000033D8                 mov     ecx, [ebp+arg_0]
.text$mn:000033DB                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000033E0                 test    eax, eax
.text$mn:000033E2                 jnz     short loc_33ED
.text$mn:000033E4                 mov     [ebp+var_4], 1
.text$mn:000033EB                 jmp     short loc_33F4
.text$mn:000033ED ; ---------------------------------------------------------------------------
.text$mn:000033ED
.text$mn:000033ED loc_33ED:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:000033ED                 mov     [ebp+var_4], 0
.text$mn:000033F4
.text$mn:000033F4 loc_33F4:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:000033F4                 mov     al, byte ptr [ebp+var_4]
.text$mn:000033F7                 mov     esp, ebp
.text$mn:000033F9                 pop     ebp
.text$mn:000033FA                 retn
.text$mn:000033FA ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:000033FA
.text$mn:000033FA ; ---------------------------------------------------------------------------
.text$mn:000033FB                 align 4
.text$mn:000033FB _text$mn        ends
.text$mn:000033FB
.text$mn:000033FC ; ===========================================================================
.text$mn:000033FC
.text$mn:000033FC ; Segment type: Pure code
.text$mn:000033FC ; Segment permissions: Read/Execute
.text$mn:000033FC _text$mn        segment para public 'CODE' use32
.text$mn:000033FC                 assume cs:_text$mn
.text$mn:000033FC                 ;org 33FCh
.text$mn:000033FC ; COMDAT (pick any)
.text$mn:000033FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033FC
.text$mn:000033FC ; =============== S U B R O U T I N E =======================================
.text$mn:000033FC
.text$mn:000033FC ; Attributes: bp-based frame
.text$mn:000033FC
.text$mn:000033FC ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:000033FC                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:000033FC ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:000033FC                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:000033FC                 push    ebp
.text$mn:000033FD                 mov     ebp, esp
.text$mn:000033FF                 mov     al, 1
.text$mn:00003401                 pop     ebp
.text$mn:00003402                 retn
.text$mn:00003402 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:00003402
.text$mn:00003402 ; ---------------------------------------------------------------------------
.text$mn:00003403                 align 4
.text$mn:00003403 _text$mn        ends
.text$mn:00003403
.text$mn:00003404 ; ===========================================================================
.text$mn:00003404
.text$mn:00003404 ; Segment type: Pure code
.text$mn:00003404 ; Segment permissions: Read/Execute
.text$mn:00003404 _text$mn        segment para public 'CODE' use32
.text$mn:00003404                 assume cs:_text$mn
.text$mn:00003404                 ;org 3404h
.text$mn:00003404 ; COMDAT (pick any)
.text$mn:00003404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003404
.text$mn:00003404 ; =============== S U B R O U T I N E =======================================
.text$mn:00003404
.text$mn:00003404 ; Attributes: bp-based frame
.text$mn:00003404
.text$mn:00003404 ; bool __cdecl std::operator!=<class std::allocator<struct TreeStateNode>, class std::allocator<struct TreeStateNode>>(struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> const &, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> const &)
.text$mn:00003404                 public ??$?9V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z
.text$mn:00003404 ??$?9V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z proc near
.text$mn:00003404                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+55p
.text$mn:00003404
.text$mn:00003404 var_4           = dword ptr -4
.text$mn:00003404 arg_0           = dword ptr  8
.text$mn:00003404 arg_4           = dword ptr  0Ch
.text$mn:00003404
.text$mn:00003404                 push    ebp
.text$mn:00003405                 mov     ebp, esp
.text$mn:00003407                 push    ecx
.text$mn:00003408                 mov     eax, [ebp+arg_4]
.text$mn:0000340B                 push    eax
.text$mn:0000340C                 mov     ecx, [ebp+arg_0]
.text$mn:0000340F                 push    ecx
.text$mn:00003410                 call    ??$?8V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z ; std::operator==<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)
.text$mn:00003415                 add     esp, 8
.text$mn:00003418                 movzx   edx, al
.text$mn:0000341B                 test    edx, edx
.text$mn:0000341D                 jnz     short loc_3428
.text$mn:0000341F                 mov     [ebp+var_4], 1
.text$mn:00003426                 jmp     short loc_342F
.text$mn:00003428 ; ---------------------------------------------------------------------------
.text$mn:00003428
.text$mn:00003428 loc_3428:                               ; CODE XREF: std::operator!=<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+19j
.text$mn:00003428                 mov     [ebp+var_4], 0
.text$mn:0000342F
.text$mn:0000342F loc_342F:                               ; CODE XREF: std::operator!=<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+22j
.text$mn:0000342F                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003432                 mov     esp, ebp
.text$mn:00003434                 pop     ebp
.text$mn:00003435                 retn
.text$mn:00003435 ??$?9V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z endp
.text$mn:00003435
.text$mn:00003435 ; ---------------------------------------------------------------------------
.text$mn:00003436                 align 4
.text$mn:00003436 _text$mn        ends
.text$mn:00003436
.text$mn:00003438 ; ===========================================================================
.text$mn:00003438
.text$mn:00003438 ; Segment type: Pure code
.text$mn:00003438 ; Segment permissions: Read/Execute
.text$mn:00003438 _text$mn        segment para public 'CODE' use32
.text$mn:00003438                 assume cs:_text$mn
.text$mn:00003438                 ;org 3438h
.text$mn:00003438 ; COMDAT (pick any)
.text$mn:00003438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003438
.text$mn:00003438 ; =============== S U B R O U T I N E =======================================
.text$mn:00003438
.text$mn:00003438 ; Attributes: bp-based frame
.text$mn:00003438
.text$mn:00003438 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00003438                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00003438 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00003438                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:00003438                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:00003438
.text$mn:00003438 var_4           = dword ptr -4
.text$mn:00003438 arg_0           = dword ptr  8
.text$mn:00003438 arg_4           = dword ptr  0Ch
.text$mn:00003438
.text$mn:00003438                 push    ebp
.text$mn:00003439                 mov     ebp, esp
.text$mn:0000343B                 push    ecx
.text$mn:0000343C                 mov     eax, [ebp+arg_4]
.text$mn:0000343F                 push    eax
.text$mn:00003440                 mov     ecx, [ebp+arg_0]
.text$mn:00003443                 push    ecx
.text$mn:00003444                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00003449                 add     esp, 8
.text$mn:0000344C                 movzx   edx, al
.text$mn:0000344F                 test    edx, edx
.text$mn:00003451                 jnz     short loc_345C
.text$mn:00003453                 mov     [ebp+var_4], 1
.text$mn:0000345A                 jmp     short loc_3463
.text$mn:0000345C ; ---------------------------------------------------------------------------
.text$mn:0000345C
.text$mn:0000345C loc_345C:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:0000345C                 mov     [ebp+var_4], 0
.text$mn:00003463
.text$mn:00003463 loc_3463:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00003463                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003466                 mov     esp, ebp
.text$mn:00003468                 pop     ebp
.text$mn:00003469                 retn
.text$mn:00003469 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00003469
.text$mn:00003469 ; ---------------------------------------------------------------------------
.text$mn:0000346A                 align 4
.text$mn:0000346A _text$mn        ends
.text$mn:0000346A
.text$mn:0000346C ; ===========================================================================
.text$mn:0000346C
.text$mn:0000346C ; Segment type: Pure code
.text$mn:0000346C ; Segment permissions: Read/Execute
.text$mn:0000346C _text$mn        segment para public 'CODE' use32
.text$mn:0000346C                 assume cs:_text$mn
.text$mn:0000346C                 ;org 346Ch
.text$mn:0000346C ; COMDAT (pick any)
.text$mn:0000346C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000346C
.text$mn:0000346C ; =============== S U B R O U T I N E =======================================
.text$mn:0000346C
.text$mn:0000346C ; Attributes: bp-based frame
.text$mn:0000346C
.text$mn:0000346C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:0000346C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:0000346C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:0000346C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:0000346C
.text$mn:0000346C var_4           = dword ptr -4
.text$mn:0000346C arg_0           = dword ptr  8
.text$mn:0000346C
.text$mn:0000346C                 push    ebp
.text$mn:0000346D                 mov     ebp, esp
.text$mn:0000346F                 push    ecx
.text$mn:00003470                 mov     [ebp+var_4], 0
.text$mn:00003477                 cmp     [ebp+arg_0], 0
.text$mn:0000347B                 jnz     short loc_347F
.text$mn:0000347D                 jmp     short loc_349F
.text$mn:0000347F ; ---------------------------------------------------------------------------
.text$mn:0000347F
.text$mn:0000347F loc_347F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:0000347F                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00003483                 ja      short loc_349A
.text$mn:00003485                 mov     eax, [ebp+arg_0]
.text$mn:00003488                 push    eax             ; unsigned int
.text$mn:00003489                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000348E                 add     esp, 4
.text$mn:00003491                 mov     [ebp+var_4], eax
.text$mn:00003494                 cmp     [ebp+var_4], 0
.text$mn:00003498                 jnz     short loc_349F
.text$mn:0000349A
.text$mn:0000349A loc_349A:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:0000349A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000349F
.text$mn:0000349F loc_349F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:0000349F                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:0000349F                 mov     eax, [ebp+var_4]
.text$mn:000034A2                 mov     esp, ebp
.text$mn:000034A4                 pop     ebp
.text$mn:000034A5                 retn
.text$mn:000034A5 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000034A5
.text$mn:000034A5 ; ---------------------------------------------------------------------------
.text$mn:000034A6                 align 4
.text$mn:000034A6 _text$mn        ends
.text$mn:000034A6
.text$mn:000034A8 ; ===========================================================================
.text$mn:000034A8
.text$mn:000034A8 ; Segment type: Pure code
.text$mn:000034A8 ; Segment permissions: Read/Execute
.text$mn:000034A8 _text$mn        segment para public 'CODE' use32
.text$mn:000034A8                 assume cs:_text$mn
.text$mn:000034A8                 ;org 34A8h
.text$mn:000034A8 ; COMDAT (pick any)
.text$mn:000034A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000034A8
.text$mn:000034A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000034A8
.text$mn:000034A8 ; Attributes: bp-based frame
.text$mn:000034A8
.text$mn:000034A8 ; struct TreeParams * __cdecl std::_Allocate<struct TreeParams>(unsigned int, struct TreeParams *)
.text$mn:000034A8                 public ??$_Allocate@UTreeParams@@@std@@YAPAUTreeParams@@IPAU1@@Z
.text$mn:000034A8 ??$_Allocate@UTreeParams@@@std@@YAPAUTreeParams@@IPAU1@@Z proc near
.text$mn:000034A8                                         ; CODE XREF: std::allocator<TreeParams>::allocate(uint)+Dp
.text$mn:000034A8
.text$mn:000034A8 var_4           = dword ptr -4
.text$mn:000034A8 arg_0           = dword ptr  8
.text$mn:000034A8
.text$mn:000034A8                 push    ebp
.text$mn:000034A9                 mov     ebp, esp
.text$mn:000034AB                 push    ecx
.text$mn:000034AC                 mov     [ebp+var_4], 0
.text$mn:000034B3                 cmp     [ebp+arg_0], 0
.text$mn:000034B7                 jnz     short loc_34BB
.text$mn:000034B9                 jmp     short loc_34DF
.text$mn:000034BB ; ---------------------------------------------------------------------------
.text$mn:000034BB
.text$mn:000034BB loc_34BB:                               ; CODE XREF: std::_Allocate<TreeParams>(uint,TreeParams *)+Fj
.text$mn:000034BB                 cmp     [ebp+arg_0], 25ED097h
.text$mn:000034C2                 ja      short loc_34DA
.text$mn:000034C4                 imul    eax, [ebp+arg_0], 6Ch
.text$mn:000034C8                 push    eax             ; unsigned int
.text$mn:000034C9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000034CE                 add     esp, 4
.text$mn:000034D1                 mov     [ebp+var_4], eax
.text$mn:000034D4                 cmp     [ebp+var_4], 0
.text$mn:000034D8                 jnz     short loc_34DF
.text$mn:000034DA
.text$mn:000034DA loc_34DA:                               ; CODE XREF: std::_Allocate<TreeParams>(uint,TreeParams *)+1Aj
.text$mn:000034DA                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000034DF
.text$mn:000034DF loc_34DF:                               ; CODE XREF: std::_Allocate<TreeParams>(uint,TreeParams *)+11j
.text$mn:000034DF                                         ; std::_Allocate<TreeParams>(uint,TreeParams *)+30j
.text$mn:000034DF                 mov     eax, [ebp+var_4]
.text$mn:000034E2                 mov     esp, ebp
.text$mn:000034E4                 pop     ebp
.text$mn:000034E5                 retn
.text$mn:000034E5 ??$_Allocate@UTreeParams@@@std@@YAPAUTreeParams@@IPAU1@@Z endp
.text$mn:000034E5
.text$mn:000034E5 ; ---------------------------------------------------------------------------
.text$mn:000034E6                 align 4
.text$mn:000034E6 _text$mn        ends
.text$mn:000034E6
.text$mn:000034E8 ; ===========================================================================
.text$mn:000034E8
.text$mn:000034E8 ; Segment type: Pure code
.text$mn:000034E8 ; Segment permissions: Read/Execute
.text$mn:000034E8 _text$mn        segment para public 'CODE' use32
.text$mn:000034E8                 assume cs:_text$mn
.text$mn:000034E8                 ;org 34E8h
.text$mn:000034E8 ; COMDAT (pick any)
.text$mn:000034E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000034E8
.text$mn:000034E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000034E8
.text$mn:000034E8 ; Attributes: bp-based frame
.text$mn:000034E8
.text$mn:000034E8 ; struct TreeStateNode * __cdecl std::_Allocate<struct TreeStateNode>(unsigned int, struct TreeStateNode *)
.text$mn:000034E8                 public ??$_Allocate@UTreeStateNode@@@std@@YAPAUTreeStateNode@@IPAU1@@Z
.text$mn:000034E8 ??$_Allocate@UTreeStateNode@@@std@@YAPAUTreeStateNode@@IPAU1@@Z proc near
.text$mn:000034E8                                         ; CODE XREF: std::allocator<TreeStateNode>::allocate(uint)+Dp
.text$mn:000034E8
.text$mn:000034E8 var_4           = dword ptr -4
.text$mn:000034E8 arg_0           = dword ptr  8
.text$mn:000034E8
.text$mn:000034E8                 push    ebp
.text$mn:000034E9                 mov     ebp, esp
.text$mn:000034EB                 push    ecx
.text$mn:000034EC                 mov     [ebp+var_4], 0
.text$mn:000034F3                 cmp     [ebp+arg_0], 0
.text$mn:000034F7                 jnz     short loc_34FB
.text$mn:000034F9                 jmp     short loc_351F
.text$mn:000034FB ; ---------------------------------------------------------------------------
.text$mn:000034FB
.text$mn:000034FB loc_34FB:                               ; CODE XREF: std::_Allocate<TreeStateNode>(uint,TreeStateNode *)+Fj
.text$mn:000034FB                 cmp     [ebp+arg_0], 35E50D7h
.text$mn:00003502                 ja      short loc_351A
.text$mn:00003504                 imul    eax, [ebp+arg_0], 4Ch
.text$mn:00003508                 push    eax             ; unsigned int
.text$mn:00003509                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000350E                 add     esp, 4
.text$mn:00003511                 mov     [ebp+var_4], eax
.text$mn:00003514                 cmp     [ebp+var_4], 0
.text$mn:00003518                 jnz     short loc_351F
.text$mn:0000351A
.text$mn:0000351A loc_351A:                               ; CODE XREF: std::_Allocate<TreeStateNode>(uint,TreeStateNode *)+1Aj
.text$mn:0000351A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000351F
.text$mn:0000351F loc_351F:                               ; CODE XREF: std::_Allocate<TreeStateNode>(uint,TreeStateNode *)+11j
.text$mn:0000351F                                         ; std::_Allocate<TreeStateNode>(uint,TreeStateNode *)+30j
.text$mn:0000351F                 mov     eax, [ebp+var_4]
.text$mn:00003522                 mov     esp, ebp
.text$mn:00003524                 pop     ebp
.text$mn:00003525                 retn
.text$mn:00003525 ??$_Allocate@UTreeStateNode@@@std@@YAPAUTreeStateNode@@IPAU1@@Z endp
.text$mn:00003525
.text$mn:00003525 ; ---------------------------------------------------------------------------
.text$mn:00003526                 align 4
.text$mn:00003526 _text$mn        ends
.text$mn:00003526
.text$mn:00003528 ; ===========================================================================
.text$mn:00003528
.text$mn:00003528 ; Segment type: Pure code
.text$mn:00003528 ; Segment permissions: Read/Execute
.text$mn:00003528 _text$mn        segment para public 'CODE' use32
.text$mn:00003528                 assume cs:_text$mn
.text$mn:00003528                 ;org 3528h
.text$mn:00003528 ; COMDAT (pick any)
.text$mn:00003528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003528
.text$mn:00003528 ; =============== S U B R O U T I N E =======================================
.text$mn:00003528
.text$mn:00003528 ; Attributes: bp-based frame
.text$mn:00003528
.text$mn:00003528 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00003528                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00003528 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00003528                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00003528
.text$mn:00003528 var_4           = dword ptr -4
.text$mn:00003528 arg_0           = dword ptr  8
.text$mn:00003528
.text$mn:00003528                 push    ebp
.text$mn:00003529                 mov     ebp, esp
.text$mn:0000352B                 push    ecx
.text$mn:0000352C                 mov     [ebp+var_4], 0
.text$mn:00003533                 cmp     [ebp+arg_0], 0
.text$mn:00003537                 jnz     short loc_353B
.text$mn:00003539                 jmp     short loc_3561
.text$mn:0000353B ; ---------------------------------------------------------------------------
.text$mn:0000353B
.text$mn:0000353B loc_353B:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:0000353B                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00003542                 ja      short loc_355C
.text$mn:00003544                 mov     eax, [ebp+arg_0]
.text$mn:00003547                 shl     eax, 3
.text$mn:0000354A                 push    eax             ; unsigned int
.text$mn:0000354B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003550                 add     esp, 4
.text$mn:00003553                 mov     [ebp+var_4], eax
.text$mn:00003556                 cmp     [ebp+var_4], 0
.text$mn:0000355A                 jnz     short loc_3561
.text$mn:0000355C
.text$mn:0000355C loc_355C:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:0000355C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003561
.text$mn:00003561 loc_3561:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00003561                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00003561                 mov     eax, [ebp+var_4]
.text$mn:00003564                 mov     esp, ebp
.text$mn:00003566                 pop     ebp
.text$mn:00003567                 retn
.text$mn:00003567 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00003567
.text$mn:00003567 _text$mn        ends
.text$mn:00003567
.text$mn:00003568 ; ===========================================================================
.text$mn:00003568
.text$mn:00003568 ; Segment type: Pure code
.text$mn:00003568 ; Segment permissions: Read/Execute
.text$mn:00003568 _text$mn        segment para public 'CODE' use32
.text$mn:00003568                 assume cs:_text$mn
.text$mn:00003568                 ;org 3568h
.text$mn:00003568 ; COMDAT (pick any)
.text$mn:00003568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003568
.text$mn:00003568 ; =============== S U B R O U T I N E =======================================
.text$mn:00003568
.text$mn:00003568 ; Attributes: bp-based frame
.text$mn:00003568
.text$mn:00003568 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003568                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:00003568 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:00003568                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:00003568
.text$mn:00003568 var_4           = dword ptr -4
.text$mn:00003568 arg_0           = dword ptr  8
.text$mn:00003568
.text$mn:00003568                 push    ebp
.text$mn:00003569                 mov     ebp, esp
.text$mn:0000356B                 push    ecx
.text$mn:0000356C                 mov     [ebp+var_4], 0
.text$mn:00003573                 cmp     [ebp+arg_0], 0
.text$mn:00003577                 jnz     short loc_357B
.text$mn:00003579                 jmp     short loc_359F
.text$mn:0000357B ; ---------------------------------------------------------------------------
.text$mn:0000357B
.text$mn:0000357B loc_357B:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:0000357B                 cmp     [ebp+arg_0], 9249249h
.text$mn:00003582                 ja      short loc_359A
.text$mn:00003584                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00003588                 push    eax             ; unsigned int
.text$mn:00003589                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000358E                 add     esp, 4
.text$mn:00003591                 mov     [ebp+var_4], eax
.text$mn:00003594                 cmp     [ebp+var_4], 0
.text$mn:00003598                 jnz     short loc_359F
.text$mn:0000359A
.text$mn:0000359A loc_359A:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:0000359A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000359F
.text$mn:0000359F loc_359F:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:0000359F                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:0000359F                 mov     eax, [ebp+var_4]
.text$mn:000035A2                 mov     esp, ebp
.text$mn:000035A4                 pop     ebp
.text$mn:000035A5                 retn
.text$mn:000035A5 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:000035A5
.text$mn:000035A5 ; ---------------------------------------------------------------------------
.text$mn:000035A6                 align 4
.text$mn:000035A6 _text$mn        ends
.text$mn:000035A6
.text$mn:000035A8 ; ===========================================================================
.text$mn:000035A8
.text$mn:000035A8 ; Segment type: Pure code
.text$mn:000035A8 ; Segment permissions: Read/Execute
.text$mn:000035A8 _text$mn        segment para public 'CODE' use32
.text$mn:000035A8                 assume cs:_text$mn
.text$mn:000035A8                 ;org 35A8h
.text$mn:000035A8 ; COMDAT (pick any)
.text$mn:000035A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035A8
.text$mn:000035A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000035A8
.text$mn:000035A8 ; Attributes: bp-based frame
.text$mn:000035A8
.text$mn:000035A8 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:000035A8                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:000035A8 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:000035A8                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:000035A8
.text$mn:000035A8 var_4           = dword ptr -4
.text$mn:000035A8 arg_0           = dword ptr  8
.text$mn:000035A8
.text$mn:000035A8                 push    ebp
.text$mn:000035A9                 mov     ebp, esp
.text$mn:000035AB                 push    ecx
.text$mn:000035AC                 mov     [ebp+var_4], 0
.text$mn:000035B3                 cmp     [ebp+arg_0], 0
.text$mn:000035B7                 jnz     short loc_35BB
.text$mn:000035B9                 jmp     short loc_35E0
.text$mn:000035BB ; ---------------------------------------------------------------------------
.text$mn:000035BB
.text$mn:000035BB loc_35BB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000035BB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:000035C2                 ja      short loc_35DB
.text$mn:000035C4                 mov     eax, [ebp+arg_0]
.text$mn:000035C7                 shl     eax, 1
.text$mn:000035C9                 push    eax             ; unsigned int
.text$mn:000035CA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000035CF                 add     esp, 4
.text$mn:000035D2                 mov     [ebp+var_4], eax
.text$mn:000035D5                 cmp     [ebp+var_4], 0
.text$mn:000035D9                 jnz     short loc_35E0
.text$mn:000035DB
.text$mn:000035DB loc_35DB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:000035DB                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000035E0
.text$mn:000035E0 loc_35E0:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:000035E0                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:000035E0                 mov     eax, [ebp+var_4]
.text$mn:000035E3                 mov     esp, ebp
.text$mn:000035E5                 pop     ebp
.text$mn:000035E6                 retn
.text$mn:000035E6 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:000035E6
.text$mn:000035E6 ; ---------------------------------------------------------------------------
.text$mn:000035E7                 align 4
.text$mn:000035E7 _text$mn        ends
.text$mn:000035E7
.text$mn:000035E8 ; ===========================================================================
.text$mn:000035E8
.text$mn:000035E8 ; Segment type: Pure code
.text$mn:000035E8 ; Segment permissions: Read/Execute
.text$mn:000035E8 _text$mn        segment para public 'CODE' use32
.text$mn:000035E8                 assume cs:_text$mn
.text$mn:000035E8                 ;org 35E8h
.text$mn:000035E8 ; COMDAT (pick any)
.text$mn:000035E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035E8
.text$mn:000035E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000035E8
.text$mn:000035E8 ; Attributes: bp-based frame
.text$mn:000035E8
.text$mn:000035E8 ; struct TreeStateNode * __cdecl std::_Copy_impl<struct TreeStateNode *, struct TreeStateNode *>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *)
.text$mn:000035E8                 public ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00@Z
.text$mn:000035E8 ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00@Z proc near
.text$mn:000035E8                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+D4p
.text$mn:000035E8                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+14Ap
.text$mn:000035E8
.text$mn:000035E8 var_1           = byte ptr -1
.text$mn:000035E8 arg_0           = dword ptr  8
.text$mn:000035E8 arg_4           = dword ptr  0Ch
.text$mn:000035E8 arg_8           = dword ptr  10h
.text$mn:000035E8
.text$mn:000035E8                 push    ebp
.text$mn:000035E9                 mov     ebp, esp
.text$mn:000035EB                 push    ecx
.text$mn:000035EC                 mov     eax, [ebp+arg_8]
.text$mn:000035EF                 push    eax
.text$mn:000035F0                 mov     ecx, [ebp+arg_0]
.text$mn:000035F3                 push    ecx
.text$mn:000035F4                 call    ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z ; std::_Ptr_cat<TreeStateNode,TreeStateNode>(TreeStateNode *,TreeStateNode *)
.text$mn:000035F9                 add     esp, 8
.text$mn:000035FC                 mov     [ebp+var_1], al
.text$mn:000035FF                 movzx   edx, [ebp+var_1]
.text$mn:00003603                 push    edx
.text$mn:00003604                 mov     eax, [ebp+arg_8]
.text$mn:00003607                 push    eax
.text$mn:00003608                 mov     ecx, [ebp+arg_4]
.text$mn:0000360B                 push    ecx
.text$mn:0000360C                 mov     edx, [ebp+arg_0]
.text$mn:0000360F                 push    edx
.text$mn:00003610                 call    ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003615                 add     esp, 10h
.text$mn:00003618                 mov     esp, ebp
.text$mn:0000361A                 pop     ebp
.text$mn:0000361B                 retn
.text$mn:0000361B ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00@Z endp
.text$mn:0000361B
.text$mn:0000361B _text$mn        ends
.text$mn:0000361B
.text$mn:0000361C ; ===========================================================================
.text$mn:0000361C
.text$mn:0000361C ; Segment type: Pure code
.text$mn:0000361C ; Segment permissions: Read/Execute
.text$mn:0000361C _text$mn        segment para public 'CODE' use32
.text$mn:0000361C                 assume cs:_text$mn
.text$mn:0000361C                 ;org 361Ch
.text$mn:0000361C ; COMDAT (pick any)
.text$mn:0000361C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000361C
.text$mn:0000361C ; =============== S U B R O U T I N E =======================================
.text$mn:0000361C
.text$mn:0000361C ; Attributes: bp-based frame
.text$mn:0000361C
.text$mn:0000361C ; struct TreeStateNode * __cdecl std::_Copy_impl<struct TreeStateNode *, struct TreeStateNode *>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000361C                 public ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000361C ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:0000361C                                         ; CODE XREF: std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)+28p
.text$mn:0000361C
.text$mn:0000361C arg_0           = dword ptr  8
.text$mn:0000361C arg_4           = dword ptr  0Ch
.text$mn:0000361C arg_8           = dword ptr  10h
.text$mn:0000361C
.text$mn:0000361C                 push    ebp
.text$mn:0000361D                 mov     ebp, esp
.text$mn:0000361F                 jmp     short loc_3633
.text$mn:00003621 ; ---------------------------------------------------------------------------
.text$mn:00003621
.text$mn:00003621 loc_3621:                               ; CODE XREF: std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Nonscalar_ptr_iterator_tag)+2Bj
.text$mn:00003621                 mov     eax, [ebp+arg_8]
.text$mn:00003624                 add     eax, 4Ch ; 'L'
.text$mn:00003627                 mov     [ebp+arg_8], eax
.text$mn:0000362A                 mov     ecx, [ebp+arg_0]
.text$mn:0000362D                 add     ecx, 4Ch ; 'L'
.text$mn:00003630                 mov     [ebp+arg_0], ecx
.text$mn:00003633
.text$mn:00003633 loc_3633:                               ; CODE XREF: std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00003633                 mov     edx, [ebp+arg_0]
.text$mn:00003636                 cmp     edx, [ebp+arg_4]
.text$mn:00003639                 jz      short loc_3649
.text$mn:0000363B                 mov     eax, [ebp+arg_0]
.text$mn:0000363E                 push    eax
.text$mn:0000363F                 mov     ecx, [ebp+arg_8]
.text$mn:00003642                 call    ??4TreeStateNode@@QAEAAU0@ABU0@@Z ; TreeStateNode::operator=(TreeStateNode const &)
.text$mn:00003647                 jmp     short loc_3621
.text$mn:00003649 ; ---------------------------------------------------------------------------
.text$mn:00003649
.text$mn:00003649 loc_3649:                               ; CODE XREF: std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Nonscalar_ptr_iterator_tag)+1Dj
.text$mn:00003649                 mov     eax, [ebp+arg_8]
.text$mn:0000364C                 pop     ebp
.text$mn:0000364D                 retn
.text$mn:0000364D ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000364D
.text$mn:0000364D ; ---------------------------------------------------------------------------
.text$mn:0000364E                 align 10h
.text$mn:0000364E _text$mn        ends
.text$mn:0000364E
.text$mn:00003650 ; ===========================================================================
.text$mn:00003650
.text$mn:00003650 ; Segment type: Pure code
.text$mn:00003650 ; Segment permissions: Read/Execute
.text$mn:00003650 _text$mn        segment para public 'CODE' use32
.text$mn:00003650                 assume cs:_text$mn
.text$mn:00003650                 ;org 3650h
.text$mn:00003650 ; COMDAT (pick any)
.text$mn:00003650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003650
.text$mn:00003650 ; =============== S U B R O U T I N E =======================================
.text$mn:00003650
.text$mn:00003650 ; Attributes: bp-based frame
.text$mn:00003650
.text$mn:00003650 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00003650                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00003650 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00003650                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00003650                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00003650
.text$mn:00003650 arg_0           = dword ptr  8
.text$mn:00003650 arg_4           = dword ptr  0Ch
.text$mn:00003650 arg_8           = dword ptr  10h
.text$mn:00003650
.text$mn:00003650                 push    ebp
.text$mn:00003651                 mov     ebp, esp
.text$mn:00003653                 cmp     [ebp+arg_0], 0
.text$mn:00003657                 jnz     short loc_366E
.text$mn:00003659                 mov     eax, [ebp+arg_8]
.text$mn:0000365C                 push    eax             ; unsigned int
.text$mn:0000365D                 mov     ecx, [ebp+arg_4]
.text$mn:00003660                 push    ecx             ; wchar_t *
.text$mn:00003661                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003666                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000366B                 add     esp, 0Ch
.text$mn:0000366E
.text$mn:0000366E loc_366E:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:0000366E                 pop     ebp
.text$mn:0000366F                 retn
.text$mn:0000366F ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:0000366F
.text$mn:0000366F _text$mn        ends
.text$mn:0000366F
.text$mn:00003670 ; ===========================================================================
.text$mn:00003670
.text$mn:00003670 ; Segment type: Pure code
.text$mn:00003670 ; Segment permissions: Read/Execute
.text$mn:00003670 _text$mn        segment para public 'CODE' use32
.text$mn:00003670                 assume cs:_text$mn
.text$mn:00003670                 ;org 3670h
.text$mn:00003670 ; COMDAT (pick any)
.text$mn:00003670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003670
.text$mn:00003670 ; =============== S U B R O U T I N E =======================================
.text$mn:00003670
.text$mn:00003670 ; Attributes: bp-based frame
.text$mn:00003670
.text$mn:00003670 ; int __cdecl std::_Debug_pointer<TreeParams>(int, wchar_t *, unsigned int)
.text$mn:00003670                 public ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z
.text$mn:00003670 ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z proc near
.text$mn:00003670                                         ; CODE XREF: std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00003670                                         ; std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00003670
.text$mn:00003670 arg_0           = dword ptr  8
.text$mn:00003670 arg_4           = dword ptr  0Ch
.text$mn:00003670 arg_8           = dword ptr  10h
.text$mn:00003670
.text$mn:00003670                 push    ebp
.text$mn:00003671                 mov     ebp, esp
.text$mn:00003673                 cmp     [ebp+arg_0], 0
.text$mn:00003677                 jnz     short loc_368E
.text$mn:00003679                 mov     eax, [ebp+arg_8]
.text$mn:0000367C                 push    eax             ; unsigned int
.text$mn:0000367D                 mov     ecx, [ebp+arg_4]
.text$mn:00003680                 push    ecx             ; wchar_t *
.text$mn:00003681                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003686                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000368B                 add     esp, 0Ch
.text$mn:0000368E
.text$mn:0000368E loc_368E:                               ; CODE XREF: std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)+7j
.text$mn:0000368E                 pop     ebp
.text$mn:0000368F                 retn
.text$mn:0000368F ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z endp
.text$mn:0000368F
.text$mn:0000368F _text$mn        ends
.text$mn:0000368F
.text$mn:00003690 ; ===========================================================================
.text$mn:00003690
.text$mn:00003690 ; Segment type: Pure code
.text$mn:00003690 ; Segment permissions: Read/Execute
.text$mn:00003690 _text$mn        segment para public 'CODE' use32
.text$mn:00003690                 assume cs:_text$mn
.text$mn:00003690                 ;org 3690h
.text$mn:00003690 ; COMDAT (pick any)
.text$mn:00003690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003690
.text$mn:00003690 ; =============== S U B R O U T I N E =======================================
.text$mn:00003690
.text$mn:00003690 ; Attributes: bp-based frame
.text$mn:00003690
.text$mn:00003690 ; int __cdecl std::_Debug_pointer<TreeStateNode>(int, wchar_t *, unsigned int)
.text$mn:00003690                 public ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z
.text$mn:00003690 ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z proc near
.text$mn:00003690                                         ; CODE XREF: std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00003690                                         ; std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00003690
.text$mn:00003690 arg_0           = dword ptr  8
.text$mn:00003690 arg_4           = dword ptr  0Ch
.text$mn:00003690 arg_8           = dword ptr  10h
.text$mn:00003690
.text$mn:00003690                 push    ebp
.text$mn:00003691                 mov     ebp, esp
.text$mn:00003693                 cmp     [ebp+arg_0], 0
.text$mn:00003697                 jnz     short loc_36AE
.text$mn:00003699                 mov     eax, [ebp+arg_8]
.text$mn:0000369C                 push    eax             ; unsigned int
.text$mn:0000369D                 mov     ecx, [ebp+arg_4]
.text$mn:000036A0                 push    ecx             ; wchar_t *
.text$mn:000036A1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000036A6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000036AB                 add     esp, 0Ch
.text$mn:000036AE
.text$mn:000036AE loc_36AE:                               ; CODE XREF: std::_Debug_pointer<TreeStateNode>(TreeStateNode *,wchar_t const *,uint)+7j
.text$mn:000036AE                 pop     ebp
.text$mn:000036AF                 retn
.text$mn:000036AF ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z endp
.text$mn:000036AF
.text$mn:000036AF _text$mn        ends
.text$mn:000036AF
.text$mn:000036B0 ; ===========================================================================
.text$mn:000036B0
.text$mn:000036B0 ; Segment type: Pure code
.text$mn:000036B0 ; Segment permissions: Read/Execute
.text$mn:000036B0 _text$mn        segment para public 'CODE' use32
.text$mn:000036B0                 assume cs:_text$mn
.text$mn:000036B0                 ;org 36B0h
.text$mn:000036B0 ; COMDAT (pick any)
.text$mn:000036B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036B0
.text$mn:000036B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036B0
.text$mn:000036B0 ; Attributes: bp-based frame
.text$mn:000036B0
.text$mn:000036B0 ; int __cdecl std::_Debug_pointer<TreeStateNode>(int, wchar_t *, unsigned int)
.text$mn:000036B0                 public ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPBUTreeStateNode@@PB_WI@Z
.text$mn:000036B0 ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPBUTreeStateNode@@PB_WI@Z proc near
.text$mn:000036B0                                         ; CODE XREF: std::_Debug_range2<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000036B0                                         ; std::_Debug_range2<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp
.text$mn:000036B0
.text$mn:000036B0 arg_0           = dword ptr  8
.text$mn:000036B0 arg_4           = dword ptr  0Ch
.text$mn:000036B0 arg_8           = dword ptr  10h
.text$mn:000036B0
.text$mn:000036B0                 push    ebp
.text$mn:000036B1                 mov     ebp, esp
.text$mn:000036B3                 cmp     [ebp+arg_0], 0
.text$mn:000036B7                 jnz     short loc_36CE
.text$mn:000036B9                 mov     eax, [ebp+arg_8]
.text$mn:000036BC                 push    eax             ; unsigned int
.text$mn:000036BD                 mov     ecx, [ebp+arg_4]
.text$mn:000036C0                 push    ecx             ; wchar_t *
.text$mn:000036C1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000036C6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000036CB                 add     esp, 0Ch
.text$mn:000036CE
.text$mn:000036CE loc_36CE:                               ; CODE XREF: std::_Debug_pointer<TreeStateNode>(TreeStateNode const *,wchar_t const *,uint)+7j
.text$mn:000036CE                 pop     ebp
.text$mn:000036CF                 retn
.text$mn:000036CF ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPBUTreeStateNode@@PB_WI@Z endp
.text$mn:000036CF
.text$mn:000036CF _text$mn        ends
.text$mn:000036CF
.text$mn:000036D0 ; ===========================================================================
.text$mn:000036D0
.text$mn:000036D0 ; Segment type: Pure code
.text$mn:000036D0 ; Segment permissions: Read/Execute
.text$mn:000036D0 _text$mn        segment para public 'CODE' use32
.text$mn:000036D0                 assume cs:_text$mn
.text$mn:000036D0                 ;org 36D0h
.text$mn:000036D0 ; COMDAT (pick any)
.text$mn:000036D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036D0
.text$mn:000036D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036D0
.text$mn:000036D0 ; Attributes: bp-based frame
.text$mn:000036D0
.text$mn:000036D0 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:000036D0                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:000036D0 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:000036D0                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+52p
.text$mn:000036D0
.text$mn:000036D0 arg_0           = dword ptr  8
.text$mn:000036D0 arg_4           = dword ptr  0Ch
.text$mn:000036D0 arg_8           = dword ptr  10h
.text$mn:000036D0
.text$mn:000036D0                 push    ebp
.text$mn:000036D1                 mov     ebp, esp
.text$mn:000036D3                 cmp     [ebp+arg_0], 0
.text$mn:000036D7                 jnz     short loc_36EE
.text$mn:000036D9                 mov     eax, [ebp+arg_8]
.text$mn:000036DC                 push    eax             ; unsigned int
.text$mn:000036DD                 mov     ecx, [ebp+arg_4]
.text$mn:000036E0                 push    ecx             ; wchar_t *
.text$mn:000036E1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000036E6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000036EB                 add     esp, 0Ch
.text$mn:000036EE
.text$mn:000036EE loc_36EE:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:000036EE                 pop     ebp
.text$mn:000036EF                 retn
.text$mn:000036EF ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:000036EF
.text$mn:000036EF _text$mn        ends
.text$mn:000036EF
.text$mn:000036F0 ; ===========================================================================
.text$mn:000036F0
.text$mn:000036F0 ; Segment type: Pure code
.text$mn:000036F0 ; Segment permissions: Read/Execute
.text$mn:000036F0 _text$mn        segment para public 'CODE' use32
.text$mn:000036F0                 assume cs:_text$mn
.text$mn:000036F0                 ;org 36F0h
.text$mn:000036F0 ; COMDAT (pick any)
.text$mn:000036F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036F0
.text$mn:000036F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036F0
.text$mn:000036F0 ; Attributes: bp-based frame
.text$mn:000036F0
.text$mn:000036F0 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:000036F0                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:000036F0 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:000036F0                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000036F0                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp
.text$mn:000036F0
.text$mn:000036F0 arg_0           = dword ptr  8
.text$mn:000036F0 arg_4           = dword ptr  0Ch
.text$mn:000036F0 arg_8           = dword ptr  10h
.text$mn:000036F0
.text$mn:000036F0                 push    ebp
.text$mn:000036F1                 mov     ebp, esp
.text$mn:000036F3                 cmp     [ebp+arg_0], 0
.text$mn:000036F7                 jnz     short loc_370E
.text$mn:000036F9                 mov     eax, [ebp+arg_8]
.text$mn:000036FC                 push    eax             ; unsigned int
.text$mn:000036FD                 mov     ecx, [ebp+arg_4]
.text$mn:00003700                 push    ecx             ; wchar_t *
.text$mn:00003701                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003706                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000370B                 add     esp, 0Ch
.text$mn:0000370E
.text$mn:0000370E loc_370E:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+7j
.text$mn:0000370E                 pop     ebp
.text$mn:0000370F                 retn
.text$mn:0000370F ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:0000370F
.text$mn:0000370F _text$mn        ends
.text$mn:0000370F
.text$mn:00003710 ; ===========================================================================
.text$mn:00003710
.text$mn:00003710 ; Segment type: Pure code
.text$mn:00003710 ; Segment permissions: Read/Execute
.text$mn:00003710 _text$mn        segment para public 'CODE' use32
.text$mn:00003710                 assume cs:_text$mn
.text$mn:00003710                 ;org 3710h
.text$mn:00003710 ; COMDAT (pick any)
.text$mn:00003710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003710
.text$mn:00003710 ; =============== S U B R O U T I N E =======================================
.text$mn:00003710
.text$mn:00003710 ; Attributes: bp-based frame
.text$mn:00003710
.text$mn:00003710 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00003710                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00003710 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00003710                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:00003710                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:00003710
.text$mn:00003710 arg_0           = dword ptr  8
.text$mn:00003710 arg_4           = dword ptr  0Ch
.text$mn:00003710 arg_8           = dword ptr  10h
.text$mn:00003710
.text$mn:00003710                 push    ebp
.text$mn:00003711                 mov     ebp, esp
.text$mn:00003713                 cmp     [ebp+arg_0], 0
.text$mn:00003717                 jnz     short loc_372E
.text$mn:00003719                 mov     eax, [ebp+arg_8]
.text$mn:0000371C                 push    eax             ; unsigned int
.text$mn:0000371D                 mov     ecx, [ebp+arg_4]
.text$mn:00003720                 push    ecx             ; wchar_t *
.text$mn:00003721                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003726                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000372B                 add     esp, 0Ch
.text$mn:0000372E
.text$mn:0000372E loc_372E:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:0000372E                 pop     ebp
.text$mn:0000372F                 retn
.text$mn:0000372F ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:0000372F
.text$mn:0000372F _text$mn        ends
.text$mn:0000372F
.text$mn:00003730 ; ===========================================================================
.text$mn:00003730
.text$mn:00003730 ; Segment type: Pure code
.text$mn:00003730 ; Segment permissions: Read/Execute
.text$mn:00003730 _text$mn        segment para public 'CODE' use32
.text$mn:00003730                 assume cs:_text$mn
.text$mn:00003730                 ;org 3730h
.text$mn:00003730 ; COMDAT (pick any)
.text$mn:00003730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003730
.text$mn:00003730 ; =============== S U B R O U T I N E =======================================
.text$mn:00003730
.text$mn:00003730 ; Attributes: bp-based frame
.text$mn:00003730
.text$mn:00003730 ; int __cdecl std::_Debug_range2<TreeParams *>(int, int, wchar_t *, unsigned int)
.text$mn:00003730                 public ??$_Debug_range2@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00003730 ??$_Debug_range2@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00003730                                         ; CODE XREF: std::_Debug_range<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint)+2Ap
.text$mn:00003730
.text$mn:00003730 arg_0           = dword ptr  8
.text$mn:00003730 arg_4           = dword ptr  0Ch
.text$mn:00003730 arg_8           = dword ptr  10h
.text$mn:00003730 arg_C           = dword ptr  14h
.text$mn:00003730
.text$mn:00003730                 push    ebp
.text$mn:00003731                 mov     ebp, esp
.text$mn:00003733                 mov     eax, [ebp+arg_0]
.text$mn:00003736                 cmp     eax, [ebp+arg_4]
.text$mn:00003739                 jz      short loc_3780
.text$mn:0000373B                 mov     ecx, [ebp+arg_C]
.text$mn:0000373E                 push    ecx             ; unsigned int
.text$mn:0000373F                 mov     edx, [ebp+arg_8]
.text$mn:00003742                 push    edx             ; wchar_t *
.text$mn:00003743                 mov     eax, [ebp+arg_0]
.text$mn:00003746                 push    eax             ; int
.text$mn:00003747                 call    ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z ; std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)
.text$mn:0000374C                 add     esp, 0Ch
.text$mn:0000374F                 mov     ecx, [ebp+arg_C]
.text$mn:00003752                 push    ecx             ; unsigned int
.text$mn:00003753                 mov     edx, [ebp+arg_8]
.text$mn:00003756                 push    edx             ; wchar_t *
.text$mn:00003757                 mov     eax, [ebp+arg_4]
.text$mn:0000375A                 push    eax             ; int
.text$mn:0000375B                 call    ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z ; std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)
.text$mn:00003760                 add     esp, 0Ch
.text$mn:00003763                 mov     ecx, [ebp+arg_4]
.text$mn:00003766                 cmp     ecx, [ebp+arg_0]
.text$mn:00003769                 jnb     short loc_3780
.text$mn:0000376B                 mov     edx, [ebp+arg_C]
.text$mn:0000376E                 push    edx             ; unsigned int
.text$mn:0000376F                 mov     eax, [ebp+arg_8]
.text$mn:00003772                 push    eax             ; wchar_t *
.text$mn:00003773                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00003778                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000377D                 add     esp, 0Ch
.text$mn:00003780
.text$mn:00003780 loc_3780:                               ; CODE XREF: std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00003780                                         ; std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00003780                 pop     ebp
.text$mn:00003781                 retn
.text$mn:00003781 ??$_Debug_range2@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00003781
.text$mn:00003781 ; ---------------------------------------------------------------------------
.text$mn:00003782                 align 4
.text$mn:00003782 _text$mn        ends
.text$mn:00003782
.text$mn:00003784 ; ===========================================================================
.text$mn:00003784
.text$mn:00003784 ; Segment type: Pure code
.text$mn:00003784 ; Segment permissions: Read/Execute
.text$mn:00003784 _text$mn        segment para public 'CODE' use32
.text$mn:00003784                 assume cs:_text$mn
.text$mn:00003784                 ;org 3784h
.text$mn:00003784 ; COMDAT (pick any)
.text$mn:00003784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003784
.text$mn:00003784 ; =============== S U B R O U T I N E =======================================
.text$mn:00003784
.text$mn:00003784 ; Attributes: bp-based frame
.text$mn:00003784
.text$mn:00003784 ; int __cdecl std::_Debug_range2<TreeStateNode *>(int, int, wchar_t *, unsigned int)
.text$mn:00003784                 public ??$_Debug_range2@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00003784 ??$_Debug_range2@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00003784                                         ; CODE XREF: std::_Debug_range<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint)+2Ap
.text$mn:00003784
.text$mn:00003784 arg_0           = dword ptr  8
.text$mn:00003784 arg_4           = dword ptr  0Ch
.text$mn:00003784 arg_8           = dword ptr  10h
.text$mn:00003784 arg_C           = dword ptr  14h
.text$mn:00003784
.text$mn:00003784                 push    ebp
.text$mn:00003785                 mov     ebp, esp
.text$mn:00003787                 mov     eax, [ebp+arg_0]
.text$mn:0000378A                 cmp     eax, [ebp+arg_4]
.text$mn:0000378D                 jz      short loc_37D4
.text$mn:0000378F                 mov     ecx, [ebp+arg_C]
.text$mn:00003792                 push    ecx             ; unsigned int
.text$mn:00003793                 mov     edx, [ebp+arg_8]
.text$mn:00003796                 push    edx             ; wchar_t *
.text$mn:00003797                 mov     eax, [ebp+arg_0]
.text$mn:0000379A                 push    eax             ; int
.text$mn:0000379B                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode *,wchar_t const *,uint)
.text$mn:000037A0                 add     esp, 0Ch
.text$mn:000037A3                 mov     ecx, [ebp+arg_C]
.text$mn:000037A6                 push    ecx             ; unsigned int
.text$mn:000037A7                 mov     edx, [ebp+arg_8]
.text$mn:000037AA                 push    edx             ; wchar_t *
.text$mn:000037AB                 mov     eax, [ebp+arg_4]
.text$mn:000037AE                 push    eax             ; int
.text$mn:000037AF                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode *,wchar_t const *,uint)
.text$mn:000037B4                 add     esp, 0Ch
.text$mn:000037B7                 mov     ecx, [ebp+arg_4]
.text$mn:000037BA                 cmp     ecx, [ebp+arg_0]
.text$mn:000037BD                 jnb     short loc_37D4
.text$mn:000037BF                 mov     edx, [ebp+arg_C]
.text$mn:000037C2                 push    edx             ; unsigned int
.text$mn:000037C3                 mov     eax, [ebp+arg_8]
.text$mn:000037C6                 push    eax             ; wchar_t *
.text$mn:000037C7                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000037CC                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000037D1                 add     esp, 0Ch
.text$mn:000037D4
.text$mn:000037D4 loc_37D4:                               ; CODE XREF: std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000037D4                                         ; std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000037D4                 pop     ebp
.text$mn:000037D5                 retn
.text$mn:000037D5 ??$_Debug_range2@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000037D5
.text$mn:000037D5 ; ---------------------------------------------------------------------------
.text$mn:000037D6                 align 4
.text$mn:000037D6 _text$mn        ends
.text$mn:000037D6
.text$mn:000037D8 ; ===========================================================================
.text$mn:000037D8
.text$mn:000037D8 ; Segment type: Pure code
.text$mn:000037D8 ; Segment permissions: Read/Execute
.text$mn:000037D8 _text$mn        segment para public 'CODE' use32
.text$mn:000037D8                 assume cs:_text$mn
.text$mn:000037D8                 ;org 37D8h
.text$mn:000037D8 ; COMDAT (pick any)
.text$mn:000037D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037D8
.text$mn:000037D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037D8
.text$mn:000037D8 ; Attributes: bp-based frame
.text$mn:000037D8
.text$mn:000037D8 ; int __cdecl std::_Debug_range2<TreeStateNode const *>(int, int, wchar_t *, unsigned int)
.text$mn:000037D8                 public ??$_Debug_range2@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000037D8 ??$_Debug_range2@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000037D8                                         ; CODE XREF: std::_Debug_range<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint)+2Ap
.text$mn:000037D8
.text$mn:000037D8 arg_0           = dword ptr  8
.text$mn:000037D8 arg_4           = dword ptr  0Ch
.text$mn:000037D8 arg_8           = dword ptr  10h
.text$mn:000037D8 arg_C           = dword ptr  14h
.text$mn:000037D8
.text$mn:000037D8                 push    ebp
.text$mn:000037D9                 mov     ebp, esp
.text$mn:000037DB                 mov     eax, [ebp+arg_0]
.text$mn:000037DE                 cmp     eax, [ebp+arg_4]
.text$mn:000037E1                 jz      short loc_3828
.text$mn:000037E3                 mov     ecx, [ebp+arg_C]
.text$mn:000037E6                 push    ecx             ; unsigned int
.text$mn:000037E7                 mov     edx, [ebp+arg_8]
.text$mn:000037EA                 push    edx             ; wchar_t *
.text$mn:000037EB                 mov     eax, [ebp+arg_0]
.text$mn:000037EE                 push    eax             ; int
.text$mn:000037EF                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPBUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode const *,wchar_t const *,uint)
.text$mn:000037F4                 add     esp, 0Ch
.text$mn:000037F7                 mov     ecx, [ebp+arg_C]
.text$mn:000037FA                 push    ecx             ; unsigned int
.text$mn:000037FB                 mov     edx, [ebp+arg_8]
.text$mn:000037FE                 push    edx             ; wchar_t *
.text$mn:000037FF                 mov     eax, [ebp+arg_4]
.text$mn:00003802                 push    eax             ; int
.text$mn:00003803                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPBUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode const *,wchar_t const *,uint)
.text$mn:00003808                 add     esp, 0Ch
.text$mn:0000380B                 mov     ecx, [ebp+arg_4]
.text$mn:0000380E                 cmp     ecx, [ebp+arg_0]
.text$mn:00003811                 jnb     short loc_3828
.text$mn:00003813                 mov     edx, [ebp+arg_C]
.text$mn:00003816                 push    edx             ; unsigned int
.text$mn:00003817                 mov     eax, [ebp+arg_8]
.text$mn:0000381A                 push    eax             ; wchar_t *
.text$mn:0000381B                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00003820                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003825                 add     esp, 0Ch
.text$mn:00003828
.text$mn:00003828 loc_3828:                               ; CODE XREF: std::_Debug_range2<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00003828                                         ; std::_Debug_range2<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00003828                 pop     ebp
.text$mn:00003829                 retn
.text$mn:00003829 ??$_Debug_range2@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00003829
.text$mn:00003829 ; ---------------------------------------------------------------------------
.text$mn:0000382A                 align 4
.text$mn:0000382A _text$mn        ends
.text$mn:0000382A
.text$mn:0000382C ; ===========================================================================
.text$mn:0000382C
.text$mn:0000382C ; Segment type: Pure code
.text$mn:0000382C ; Segment permissions: Read/Execute
.text$mn:0000382C _text$mn        segment para public 'CODE' use32
.text$mn:0000382C                 assume cs:_text$mn
.text$mn:0000382C                 ;org 382Ch
.text$mn:0000382C ; COMDAT (pick any)
.text$mn:0000382C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000382C
.text$mn:0000382C ; =============== S U B R O U T I N E =======================================
.text$mn:0000382C
.text$mn:0000382C ; Attributes: bp-based frame
.text$mn:0000382C
.text$mn:0000382C ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(int, int, wchar_t *, unsigned int)
.text$mn:0000382C                 public ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:0000382C ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:0000382C                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+2Ap
.text$mn:0000382C
.text$mn:0000382C arg_0           = dword ptr  8
.text$mn:0000382C arg_4           = dword ptr  0Ch
.text$mn:0000382C arg_8           = dword ptr  10h
.text$mn:0000382C arg_C           = dword ptr  14h
.text$mn:0000382C
.text$mn:0000382C                 push    ebp
.text$mn:0000382D                 mov     ebp, esp
.text$mn:0000382F                 mov     eax, [ebp+arg_0]
.text$mn:00003832                 cmp     eax, [ebp+arg_4]
.text$mn:00003835                 jz      short loc_387C
.text$mn:00003837                 mov     ecx, [ebp+arg_C]
.text$mn:0000383A                 push    ecx             ; unsigned int
.text$mn:0000383B                 mov     edx, [ebp+arg_8]
.text$mn:0000383E                 push    edx             ; wchar_t *
.text$mn:0000383F                 mov     eax, [ebp+arg_0]
.text$mn:00003842                 push    eax             ; int
.text$mn:00003843                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:00003848                 add     esp, 0Ch
.text$mn:0000384B                 mov     ecx, [ebp+arg_C]
.text$mn:0000384E                 push    ecx             ; unsigned int
.text$mn:0000384F                 mov     edx, [ebp+arg_8]
.text$mn:00003852                 push    edx             ; wchar_t *
.text$mn:00003853                 mov     eax, [ebp+arg_4]
.text$mn:00003856                 push    eax             ; int
.text$mn:00003857                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:0000385C                 add     esp, 0Ch
.text$mn:0000385F                 mov     ecx, [ebp+arg_4]
.text$mn:00003862                 cmp     ecx, [ebp+arg_0]
.text$mn:00003865                 jnb     short loc_387C
.text$mn:00003867                 mov     edx, [ebp+arg_C]
.text$mn:0000386A                 push    edx             ; unsigned int
.text$mn:0000386B                 mov     eax, [ebp+arg_8]
.text$mn:0000386E                 push    eax             ; wchar_t *
.text$mn:0000386F                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00003874                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003879                 add     esp, 0Ch
.text$mn:0000387C
.text$mn:0000387C loc_387C:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:0000387C                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:0000387C                 pop     ebp
.text$mn:0000387D                 retn
.text$mn:0000387D ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:0000387D
.text$mn:0000387D ; ---------------------------------------------------------------------------
.text$mn:0000387E                 align 10h
.text$mn:0000387E _text$mn        ends
.text$mn:0000387E
.text$mn:00003880 ; ===========================================================================
.text$mn:00003880
.text$mn:00003880 ; Segment type: Pure code
.text$mn:00003880 ; Segment permissions: Read/Execute
.text$mn:00003880 _text$mn        segment para public 'CODE' use32
.text$mn:00003880                 assume cs:_text$mn
.text$mn:00003880                 ;org 3880h
.text$mn:00003880 ; COMDAT (pick any)
.text$mn:00003880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003880
.text$mn:00003880 ; =============== S U B R O U T I N E =======================================
.text$mn:00003880
.text$mn:00003880 ; Attributes: bp-based frame
.text$mn:00003880
.text$mn:00003880 ; int __cdecl std::_Debug_range<TreeParams *>(int, int, wchar_t *, unsigned int)
.text$mn:00003880                 public ??$_Debug_range@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WI@Z
.text$mn:00003880 ??$_Debug_range@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WI@Z proc near
.text$mn:00003880                                         ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00003880
.text$mn:00003880 var_1           = byte ptr -1
.text$mn:00003880 arg_0           = dword ptr  8
.text$mn:00003880 arg_4           = dword ptr  0Ch
.text$mn:00003880 arg_8           = dword ptr  10h
.text$mn:00003880 arg_C           = dword ptr  14h
.text$mn:00003880
.text$mn:00003880                 push    ebp
.text$mn:00003881                 mov     ebp, esp
.text$mn:00003883                 push    ecx
.text$mn:00003884                 lea     eax, [ebp+arg_0]
.text$mn:00003887                 push    eax
.text$mn:00003888                 lea     ecx, [ebp+var_1]
.text$mn:0000388B                 push    ecx
.text$mn:0000388C                 call    ??$_Iter_cat@PAUTreeParams@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeParams@@@Z ; std::_Iter_cat<TreeParams *>(TreeParams * const &)
.text$mn:00003891                 add     esp, 8
.text$mn:00003894                 mov     dl, [eax]
.text$mn:00003896                 movzx   eax, dl
.text$mn:00003899                 push    eax
.text$mn:0000389A                 mov     ecx, [ebp+arg_C]
.text$mn:0000389D                 push    ecx             ; unsigned int
.text$mn:0000389E                 mov     edx, [ebp+arg_8]
.text$mn:000038A1                 push    edx             ; wchar_t *
.text$mn:000038A2                 mov     eax, [ebp+arg_4]
.text$mn:000038A5                 push    eax             ; int
.text$mn:000038A6                 mov     ecx, [ebp+arg_0]
.text$mn:000038A9                 push    ecx             ; int
.text$mn:000038AA                 call    ??$_Debug_range2@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000038AF                 add     esp, 14h
.text$mn:000038B2                 mov     esp, ebp
.text$mn:000038B4                 pop     ebp
.text$mn:000038B5                 retn
.text$mn:000038B5 ??$_Debug_range@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WI@Z endp
.text$mn:000038B5
.text$mn:000038B5 ; ---------------------------------------------------------------------------
.text$mn:000038B6                 align 4
.text$mn:000038B6 _text$mn        ends
.text$mn:000038B6
.text$mn:000038B8 ; ===========================================================================
.text$mn:000038B8
.text$mn:000038B8 ; Segment type: Pure code
.text$mn:000038B8 ; Segment permissions: Read/Execute
.text$mn:000038B8 _text$mn        segment para public 'CODE' use32
.text$mn:000038B8                 assume cs:_text$mn
.text$mn:000038B8                 ;org 38B8h
.text$mn:000038B8 ; COMDAT (pick any)
.text$mn:000038B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038B8
.text$mn:000038B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000038B8
.text$mn:000038B8 ; Attributes: bp-based frame
.text$mn:000038B8
.text$mn:000038B8 ; int __cdecl std::_Debug_range<TreeStateNode *>(int, int, wchar_t *, unsigned int)
.text$mn:000038B8                 public ??$_Debug_range@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WI@Z
.text$mn:000038B8 ??$_Debug_range@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WI@Z proc near
.text$mn:000038B8                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:000038B8
.text$mn:000038B8 var_1           = byte ptr -1
.text$mn:000038B8 arg_0           = dword ptr  8
.text$mn:000038B8 arg_4           = dword ptr  0Ch
.text$mn:000038B8 arg_8           = dword ptr  10h
.text$mn:000038B8 arg_C           = dword ptr  14h
.text$mn:000038B8
.text$mn:000038B8                 push    ebp
.text$mn:000038B9                 mov     ebp, esp
.text$mn:000038BB                 push    ecx
.text$mn:000038BC                 lea     eax, [ebp+arg_0]
.text$mn:000038BF                 push    eax
.text$mn:000038C0                 lea     ecx, [ebp+var_1]
.text$mn:000038C3                 push    ecx
.text$mn:000038C4                 call    ??$_Iter_cat@PAUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeStateNode@@@Z ; std::_Iter_cat<TreeStateNode *>(TreeStateNode * const &)
.text$mn:000038C9                 add     esp, 8
.text$mn:000038CC                 mov     dl, [eax]
.text$mn:000038CE                 movzx   eax, dl
.text$mn:000038D1                 push    eax
.text$mn:000038D2                 mov     ecx, [ebp+arg_C]
.text$mn:000038D5                 push    ecx             ; unsigned int
.text$mn:000038D6                 mov     edx, [ebp+arg_8]
.text$mn:000038D9                 push    edx             ; wchar_t *
.text$mn:000038DA                 mov     eax, [ebp+arg_4]
.text$mn:000038DD                 push    eax             ; int
.text$mn:000038DE                 mov     ecx, [ebp+arg_0]
.text$mn:000038E1                 push    ecx             ; int
.text$mn:000038E2                 call    ??$_Debug_range2@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000038E7                 add     esp, 14h
.text$mn:000038EA                 mov     esp, ebp
.text$mn:000038EC                 pop     ebp
.text$mn:000038ED                 retn
.text$mn:000038ED ??$_Debug_range@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WI@Z endp
.text$mn:000038ED
.text$mn:000038ED ; ---------------------------------------------------------------------------
.text$mn:000038EE                 align 10h
.text$mn:000038EE _text$mn        ends
.text$mn:000038EE
.text$mn:000038F0 ; ===========================================================================
.text$mn:000038F0
.text$mn:000038F0 ; Segment type: Pure code
.text$mn:000038F0 ; Segment permissions: Read/Execute
.text$mn:000038F0 _text$mn        segment para public 'CODE' use32
.text$mn:000038F0                 assume cs:_text$mn
.text$mn:000038F0                 ;org 38F0h
.text$mn:000038F0 ; COMDAT (pick any)
.text$mn:000038F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038F0
.text$mn:000038F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000038F0
.text$mn:000038F0 ; Attributes: bp-based frame
.text$mn:000038F0
.text$mn:000038F0 ; int __cdecl std::_Debug_range<TreeStateNode const *>(int, int, wchar_t *, unsigned int)
.text$mn:000038F0                 public ??$_Debug_range@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WI@Z
.text$mn:000038F0 ??$_Debug_range@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WI@Z proc near
.text$mn:000038F0                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:000038F0
.text$mn:000038F0 var_1           = byte ptr -1
.text$mn:000038F0 arg_0           = dword ptr  8
.text$mn:000038F0 arg_4           = dword ptr  0Ch
.text$mn:000038F0 arg_8           = dword ptr  10h
.text$mn:000038F0 arg_C           = dword ptr  14h
.text$mn:000038F0
.text$mn:000038F0                 push    ebp
.text$mn:000038F1                 mov     ebp, esp
.text$mn:000038F3                 push    ecx
.text$mn:000038F4                 lea     eax, [ebp+arg_0]
.text$mn:000038F7                 push    eax
.text$mn:000038F8                 lea     ecx, [ebp+var_1]
.text$mn:000038FB                 push    ecx
.text$mn:000038FC                 call    ??$_Iter_cat@PBUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUTreeStateNode@@@Z ; std::_Iter_cat<TreeStateNode const *>(TreeStateNode const * const &)
.text$mn:00003901                 add     esp, 8
.text$mn:00003904                 mov     dl, [eax]
.text$mn:00003906                 movzx   eax, dl
.text$mn:00003909                 push    eax
.text$mn:0000390A                 mov     ecx, [ebp+arg_C]
.text$mn:0000390D                 push    ecx             ; unsigned int
.text$mn:0000390E                 mov     edx, [ebp+arg_8]
.text$mn:00003911                 push    edx             ; wchar_t *
.text$mn:00003912                 mov     eax, [ebp+arg_4]
.text$mn:00003915                 push    eax             ; int
.text$mn:00003916                 mov     ecx, [ebp+arg_0]
.text$mn:00003919                 push    ecx             ; int
.text$mn:0000391A                 call    ??$_Debug_range2@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000391F                 add     esp, 14h
.text$mn:00003922                 mov     esp, ebp
.text$mn:00003924                 pop     ebp
.text$mn:00003925                 retn
.text$mn:00003925 ??$_Debug_range@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WI@Z endp
.text$mn:00003925
.text$mn:00003925 ; ---------------------------------------------------------------------------
.text$mn:00003926                 align 4
.text$mn:00003926 _text$mn        ends
.text$mn:00003926
.text$mn:00003928 ; ===========================================================================
.text$mn:00003928
.text$mn:00003928 ; Segment type: Pure code
.text$mn:00003928 ; Segment permissions: Read/Execute
.text$mn:00003928 _text$mn        segment para public 'CODE' use32
.text$mn:00003928                 assume cs:_text$mn
.text$mn:00003928                 ;org 3928h
.text$mn:00003928 ; COMDAT (pick any)
.text$mn:00003928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003928
.text$mn:00003928 ; =============== S U B R O U T I N E =======================================
.text$mn:00003928
.text$mn:00003928 ; Attributes: bp-based frame
.text$mn:00003928
.text$mn:00003928 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(int, int, wchar_t *, unsigned int)
.text$mn:00003928                 public ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:00003928 ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:00003928                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00003928
.text$mn:00003928 var_1           = byte ptr -1
.text$mn:00003928 arg_0           = dword ptr  8
.text$mn:00003928 arg_4           = dword ptr  0Ch
.text$mn:00003928 arg_8           = dword ptr  10h
.text$mn:00003928 arg_C           = dword ptr  14h
.text$mn:00003928
.text$mn:00003928                 push    ebp
.text$mn:00003929                 mov     ebp, esp
.text$mn:0000392B                 push    ecx
.text$mn:0000392C                 lea     eax, [ebp+arg_0]
.text$mn:0000392F                 push    eax
.text$mn:00003930                 lea     ecx, [ebp+var_1]
.text$mn:00003933                 push    ecx
.text$mn:00003934                 call    ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const * const &)
.text$mn:00003939                 add     esp, 8
.text$mn:0000393C                 mov     dl, [eax]
.text$mn:0000393E                 movzx   eax, dl
.text$mn:00003941                 push    eax
.text$mn:00003942                 mov     ecx, [ebp+arg_C]
.text$mn:00003945                 push    ecx             ; unsigned int
.text$mn:00003946                 mov     edx, [ebp+arg_8]
.text$mn:00003949                 push    edx             ; wchar_t *
.text$mn:0000394A                 mov     eax, [ebp+arg_4]
.text$mn:0000394D                 push    eax             ; int
.text$mn:0000394E                 mov     ecx, [ebp+arg_0]
.text$mn:00003951                 push    ecx             ; int
.text$mn:00003952                 call    ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00003957                 add     esp, 14h
.text$mn:0000395A                 mov     esp, ebp
.text$mn:0000395C                 pop     ebp
.text$mn:0000395D                 retn
.text$mn:0000395D ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:0000395D
.text$mn:0000395D ; ---------------------------------------------------------------------------
.text$mn:0000395E                 align 10h
.text$mn:0000395E _text$mn        ends
.text$mn:0000395E
.text$mn:00003960 ; ===========================================================================
.text$mn:00003960
.text$mn:00003960 ; Segment type: Pure code
.text$mn:00003960 ; Segment permissions: Read/Execute
.text$mn:00003960 _text$mn        segment para public 'CODE' use32
.text$mn:00003960                 assume cs:_text$mn
.text$mn:00003960                 ;org 3960h
.text$mn:00003960 ; COMDAT (pick any)
.text$mn:00003960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003960
.text$mn:00003960 ; =============== S U B R O U T I N E =======================================
.text$mn:00003960
.text$mn:00003960 ; Attributes: bp-based frame
.text$mn:00003960
.text$mn:00003960 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct TreeParams>>>(struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> &)
.text$mn:00003960                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z
.text$mn:00003960 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z proc near
.text$mn:00003960                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Destroy(TreeParams *,TreeParams *)+21p
.text$mn:00003960
.text$mn:00003960 var_1           = byte ptr -1
.text$mn:00003960 arg_0           = dword ptr  8
.text$mn:00003960 arg_4           = dword ptr  0Ch
.text$mn:00003960 arg_8           = dword ptr  10h
.text$mn:00003960
.text$mn:00003960                 push    ebp
.text$mn:00003961                 mov     ebp, esp
.text$mn:00003963                 push    ecx
.text$mn:00003964                 mov     eax, [ebp+arg_4]
.text$mn:00003967                 push    eax
.text$mn:00003968                 mov     ecx, [ebp+arg_0]
.text$mn:0000396B                 push    ecx
.text$mn:0000396C                 call    ??$_Ptr_cat@UTreeParams@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeParams@@0@Z ; std::_Ptr_cat<TreeParams,TreeParams>(TreeParams *,TreeParams *)
.text$mn:00003971                 add     esp, 8
.text$mn:00003974                 mov     [ebp+var_1], al
.text$mn:00003977                 movzx   edx, [ebp+var_1]
.text$mn:0000397B                 push    edx
.text$mn:0000397C                 mov     eax, [ebp+arg_8]
.text$mn:0000397F                 push    eax
.text$mn:00003980                 mov     ecx, [ebp+arg_4]
.text$mn:00003983                 push    ecx
.text$mn:00003984                 mov     edx, [ebp+arg_0]
.text$mn:00003987                 push    edx
.text$mn:00003988                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000398D                 add     esp, 10h
.text$mn:00003990                 mov     esp, ebp
.text$mn:00003992                 pop     ebp
.text$mn:00003993                 retn
.text$mn:00003993 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z endp
.text$mn:00003993
.text$mn:00003993 _text$mn        ends
.text$mn:00003993
.text$mn:00003994 ; ===========================================================================
.text$mn:00003994
.text$mn:00003994 ; Segment type: Pure code
.text$mn:00003994 ; Segment permissions: Read/Execute
.text$mn:00003994 _text$mn        segment para public 'CODE' use32
.text$mn:00003994                 assume cs:_text$mn
.text$mn:00003994                 ;org 3994h
.text$mn:00003994 ; COMDAT (pick any)
.text$mn:00003994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003994
.text$mn:00003994 ; =============== S U B R O U T I N E =======================================
.text$mn:00003994
.text$mn:00003994 ; Attributes: bp-based frame
.text$mn:00003994
.text$mn:00003994 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct TreeParams>>>(struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003994                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003994 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003994                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+28p
.text$mn:00003994
.text$mn:00003994 arg_0           = dword ptr  8
.text$mn:00003994 arg_4           = dword ptr  0Ch
.text$mn:00003994 arg_8           = dword ptr  10h
.text$mn:00003994
.text$mn:00003994                 push    ebp
.text$mn:00003995                 mov     ebp, esp
.text$mn:00003997                 jmp     short loc_39A2
.text$mn:00003999 ; ---------------------------------------------------------------------------
.text$mn:00003999
.text$mn:00003999 loc_3999:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00003999                 mov     eax, [ebp+arg_0]
.text$mn:0000399C                 add     eax, 6Ch ; 'l'
.text$mn:0000399F                 mov     [ebp+arg_0], eax
.text$mn:000039A2
.text$mn:000039A2 loc_39A2:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000039A2                 mov     ecx, [ebp+arg_0]
.text$mn:000039A5                 cmp     ecx, [ebp+arg_4]
.text$mn:000039A8                 jz      short loc_39B8
.text$mn:000039AA                 mov     edx, [ebp+arg_0]
.text$mn:000039AD                 push    edx
.text$mn:000039AE                 mov     ecx, [ebp+arg_8]
.text$mn:000039B1                 call    ??$destroy@UTreeParams@@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::destroy<TreeParams>(TreeParams *)
.text$mn:000039B6                 jmp     short loc_3999
.text$mn:000039B8 ; ---------------------------------------------------------------------------
.text$mn:000039B8
.text$mn:000039B8 loc_39B8:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:000039B8                 pop     ebp
.text$mn:000039B9                 retn
.text$mn:000039B9 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000039B9
.text$mn:000039B9 ; ---------------------------------------------------------------------------
.text$mn:000039BA                 align 4
.text$mn:000039BA _text$mn        ends
.text$mn:000039BA
.text$mn:000039BC ; ===========================================================================
.text$mn:000039BC
.text$mn:000039BC ; Segment type: Pure code
.text$mn:000039BC ; Segment permissions: Read/Execute
.text$mn:000039BC _text$mn        segment para public 'CODE' use32
.text$mn:000039BC                 assume cs:_text$mn
.text$mn:000039BC                 ;org 39BCh
.text$mn:000039BC ; COMDAT (pick any)
.text$mn:000039BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000039BC
.text$mn:000039BC ; =============== S U B R O U T I N E =======================================
.text$mn:000039BC
.text$mn:000039BC ; Attributes: bp-based frame
.text$mn:000039BC
.text$mn:000039BC ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &)
.text$mn:000039BC                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:000039BC ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$mn:000039BC                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Destroy(TreeStateNode *,TreeStateNode *)+21p
.text$mn:000039BC
.text$mn:000039BC var_1           = byte ptr -1
.text$mn:000039BC arg_0           = dword ptr  8
.text$mn:000039BC arg_4           = dword ptr  0Ch
.text$mn:000039BC arg_8           = dword ptr  10h
.text$mn:000039BC
.text$mn:000039BC                 push    ebp
.text$mn:000039BD                 mov     ebp, esp
.text$mn:000039BF                 push    ecx
.text$mn:000039C0                 mov     eax, [ebp+arg_4]
.text$mn:000039C3                 push    eax
.text$mn:000039C4                 mov     ecx, [ebp+arg_0]
.text$mn:000039C7                 push    ecx
.text$mn:000039C8                 call    ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z ; std::_Ptr_cat<TreeStateNode,TreeStateNode>(TreeStateNode *,TreeStateNode *)
.text$mn:000039CD                 add     esp, 8
.text$mn:000039D0                 mov     [ebp+var_1], al
.text$mn:000039D3                 movzx   edx, [ebp+var_1]
.text$mn:000039D7                 push    edx
.text$mn:000039D8                 mov     eax, [ebp+arg_8]
.text$mn:000039DB                 push    eax
.text$mn:000039DC                 mov     ecx, [ebp+arg_4]
.text$mn:000039DF                 push    ecx
.text$mn:000039E0                 mov     edx, [ebp+arg_0]
.text$mn:000039E3                 push    edx
.text$mn:000039E4                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000039E9                 add     esp, 10h
.text$mn:000039EC                 mov     esp, ebp
.text$mn:000039EE                 pop     ebp
.text$mn:000039EF                 retn
.text$mn:000039EF ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$mn:000039EF
.text$mn:000039EF _text$mn        ends
.text$mn:000039EF
.text$mn:000039F0 ; ===========================================================================
.text$mn:000039F0
.text$mn:000039F0 ; Segment type: Pure code
.text$mn:000039F0 ; Segment permissions: Read/Execute
.text$mn:000039F0 _text$mn        segment para public 'CODE' use32
.text$mn:000039F0                 assume cs:_text$mn
.text$mn:000039F0                 ;org 39F0h
.text$mn:000039F0 ; COMDAT (pick any)
.text$mn:000039F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000039F0
.text$mn:000039F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000039F0
.text$mn:000039F0 ; Attributes: bp-based frame
.text$mn:000039F0
.text$mn:000039F0 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000039F0                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000039F0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000039F0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+28p
.text$mn:000039F0
.text$mn:000039F0 arg_0           = dword ptr  8
.text$mn:000039F0 arg_4           = dword ptr  0Ch
.text$mn:000039F0 arg_8           = dword ptr  10h
.text$mn:000039F0
.text$mn:000039F0                 push    ebp
.text$mn:000039F1                 mov     ebp, esp
.text$mn:000039F3                 jmp     short loc_39FE
.text$mn:000039F5 ; ---------------------------------------------------------------------------
.text$mn:000039F5
.text$mn:000039F5 loc_39F5:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:000039F5                 mov     eax, [ebp+arg_0]
.text$mn:000039F8                 add     eax, 4Ch ; 'L'
.text$mn:000039FB                 mov     [ebp+arg_0], eax
.text$mn:000039FE
.text$mn:000039FE loc_39FE:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000039FE                 mov     ecx, [ebp+arg_0]
.text$mn:00003A01                 cmp     ecx, [ebp+arg_4]
.text$mn:00003A04                 jz      short loc_3A14
.text$mn:00003A06                 mov     edx, [ebp+arg_0]
.text$mn:00003A09                 push    edx
.text$mn:00003A0A                 mov     ecx, [ebp+arg_8]
.text$mn:00003A0D                 call    ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(TreeStateNode *)
.text$mn:00003A12                 jmp     short loc_39F5
.text$mn:00003A14 ; ---------------------------------------------------------------------------
.text$mn:00003A14
.text$mn:00003A14 loc_3A14:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00003A14                 pop     ebp
.text$mn:00003A15                 retn
.text$mn:00003A15 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003A15
.text$mn:00003A15 ; ---------------------------------------------------------------------------
.text$mn:00003A16                 align 4
.text$mn:00003A16 _text$mn        ends
.text$mn:00003A16
.text$mn:00003A18 ; ===========================================================================
.text$mn:00003A18
.text$mn:00003A18 ; Segment type: Pure code
.text$mn:00003A18 ; Segment permissions: Read/Execute
.text$mn:00003A18 _text$mn        segment para public 'CODE' use32
.text$mn:00003A18                 assume cs:_text$mn
.text$mn:00003A18                 ;org 3A18h
.text$mn:00003A18 ; COMDAT (pick any)
.text$mn:00003A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A18
.text$mn:00003A18 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A18
.text$mn:00003A18 ; Attributes: bp-based frame
.text$mn:00003A18
.text$mn:00003A18 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct foundInfo>>>(struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> &)
.text$mn:00003A18                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z
.text$mn:00003A18 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z proc near
.text$mn:00003A18                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)+21p
.text$mn:00003A18
.text$mn:00003A18 var_1           = byte ptr -1
.text$mn:00003A18 arg_0           = dword ptr  8
.text$mn:00003A18 arg_4           = dword ptr  0Ch
.text$mn:00003A18 arg_8           = dword ptr  10h
.text$mn:00003A18
.text$mn:00003A18                 push    ebp
.text$mn:00003A19                 mov     ebp, esp
.text$mn:00003A1B                 push    ecx
.text$mn:00003A1C                 mov     eax, [ebp+arg_4]
.text$mn:00003A1F                 push    eax
.text$mn:00003A20                 mov     ecx, [ebp+arg_0]
.text$mn:00003A23                 push    ecx
.text$mn:00003A24                 call    ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z ; std::_Ptr_cat<foundInfo,foundInfo>(foundInfo *,foundInfo *)
.text$mn:00003A29                 add     esp, 8
.text$mn:00003A2C                 mov     [ebp+var_1], al
.text$mn:00003A2F                 movzx   edx, [ebp+var_1]
.text$mn:00003A33                 push    edx
.text$mn:00003A34                 mov     eax, [ebp+arg_8]
.text$mn:00003A37                 push    eax
.text$mn:00003A38                 mov     ecx, [ebp+arg_4]
.text$mn:00003A3B                 push    ecx
.text$mn:00003A3C                 mov     edx, [ebp+arg_0]
.text$mn:00003A3F                 push    edx
.text$mn:00003A40                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003A45                 add     esp, 10h
.text$mn:00003A48                 mov     esp, ebp
.text$mn:00003A4A                 pop     ebp
.text$mn:00003A4B                 retn
.text$mn:00003A4B ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z endp
.text$mn:00003A4B
.text$mn:00003A4B _text$mn        ends
.text$mn:00003A4B
.text$mn:00003A4C ; ===========================================================================
.text$mn:00003A4C
.text$mn:00003A4C ; Segment type: Pure code
.text$mn:00003A4C ; Segment permissions: Read/Execute
.text$mn:00003A4C _text$mn        segment para public 'CODE' use32
.text$mn:00003A4C                 assume cs:_text$mn
.text$mn:00003A4C                 ;org 3A4Ch
.text$mn:00003A4C ; COMDAT (pick any)
.text$mn:00003A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A4C
.text$mn:00003A4C ; =============== S U B R O U T I N E =======================================
.text$mn:00003A4C
.text$mn:00003A4C ; Attributes: bp-based frame
.text$mn:00003A4C
.text$mn:00003A4C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct foundInfo>>>(struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003A4C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003A4C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003A4C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+28p
.text$mn:00003A4C
.text$mn:00003A4C arg_0           = dword ptr  8
.text$mn:00003A4C arg_4           = dword ptr  0Ch
.text$mn:00003A4C arg_8           = dword ptr  10h
.text$mn:00003A4C
.text$mn:00003A4C                 push    ebp
.text$mn:00003A4D                 mov     ebp, esp
.text$mn:00003A4F                 jmp     short loc_3A5A
.text$mn:00003A51 ; ---------------------------------------------------------------------------
.text$mn:00003A51
.text$mn:00003A51 loc_3A51:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00003A51                 mov     eax, [ebp+arg_0]
.text$mn:00003A54                 add     eax, 40h ; '@'
.text$mn:00003A57                 mov     [ebp+arg_0], eax
.text$mn:00003A5A
.text$mn:00003A5A loc_3A5A:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00003A5A                 mov     ecx, [ebp+arg_0]
.text$mn:00003A5D                 cmp     ecx, [ebp+arg_4]
.text$mn:00003A60                 jz      short loc_3A70
.text$mn:00003A62                 mov     edx, [ebp+arg_0]
.text$mn:00003A65                 push    edx
.text$mn:00003A66                 mov     ecx, [ebp+arg_8]
.text$mn:00003A69                 call    ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::destroy<foundInfo>(foundInfo *)
.text$mn:00003A6E                 jmp     short loc_3A51
.text$mn:00003A70 ; ---------------------------------------------------------------------------
.text$mn:00003A70
.text$mn:00003A70 loc_3A70:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00003A70                 pop     ebp
.text$mn:00003A71                 retn
.text$mn:00003A71 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003A71
.text$mn:00003A71 ; ---------------------------------------------------------------------------
.text$mn:00003A72                 align 4
.text$mn:00003A72 _text$mn        ends
.text$mn:00003A72
.text$mn:00003A74 ; ===========================================================================
.text$mn:00003A74
.text$mn:00003A74 ; Segment type: Pure code
.text$mn:00003A74 ; Segment permissions: Read/Execute
.text$mn:00003A74 _text$mn        segment para public 'CODE' use32
.text$mn:00003A74                 assume cs:_text$mn
.text$mn:00003A74                 ;org 3A74h
.text$mn:00003A74 ; COMDAT (pick any)
.text$mn:00003A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A74
.text$mn:00003A74 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A74
.text$mn:00003A74 ; Attributes: bp-based frame
.text$mn:00003A74
.text$mn:00003A74 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00003A74                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00003A74 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00003A74                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:00003A74
.text$mn:00003A74 var_1           = byte ptr -1
.text$mn:00003A74 arg_0           = dword ptr  8
.text$mn:00003A74 arg_4           = dword ptr  0Ch
.text$mn:00003A74 arg_8           = dword ptr  10h
.text$mn:00003A74
.text$mn:00003A74                 push    ebp
.text$mn:00003A75                 mov     ebp, esp
.text$mn:00003A77                 push    ecx
.text$mn:00003A78                 mov     eax, [ebp+arg_4]
.text$mn:00003A7B                 push    eax
.text$mn:00003A7C                 mov     ecx, [ebp+arg_0]
.text$mn:00003A7F                 push    ecx
.text$mn:00003A80                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00003A85                 add     esp, 8
.text$mn:00003A88                 mov     [ebp+var_1], al
.text$mn:00003A8B                 movzx   edx, [ebp+var_1]
.text$mn:00003A8F                 push    edx
.text$mn:00003A90                 mov     eax, [ebp+arg_8]
.text$mn:00003A93                 push    eax
.text$mn:00003A94                 mov     ecx, [ebp+arg_4]
.text$mn:00003A97                 push    ecx
.text$mn:00003A98                 mov     edx, [ebp+arg_0]
.text$mn:00003A9B                 push    edx
.text$mn:00003A9C                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003AA1                 add     esp, 10h
.text$mn:00003AA4                 mov     esp, ebp
.text$mn:00003AA6                 pop     ebp
.text$mn:00003AA7                 retn
.text$mn:00003AA7 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00003AA7
.text$mn:00003AA7 _text$mn        ends
.text$mn:00003AA7
.text$mn:00003AA8 ; ===========================================================================
.text$mn:00003AA8
.text$mn:00003AA8 ; Segment type: Pure code
.text$mn:00003AA8 ; Segment permissions: Read/Execute
.text$mn:00003AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00003AA8                 assume cs:_text$mn
.text$mn:00003AA8                 ;org 3AA8h
.text$mn:00003AA8 ; COMDAT (pick any)
.text$mn:00003AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AA8
.text$mn:00003AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AA8
.text$mn:00003AA8 ; Attributes: bp-based frame
.text$mn:00003AA8
.text$mn:00003AA8 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003AA8                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003AA8 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003AA8                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:00003AA8
.text$mn:00003AA8 arg_0           = dword ptr  8
.text$mn:00003AA8 arg_4           = dword ptr  0Ch
.text$mn:00003AA8 arg_8           = dword ptr  10h
.text$mn:00003AA8
.text$mn:00003AA8                 push    ebp
.text$mn:00003AA9                 mov     ebp, esp
.text$mn:00003AAB                 jmp     short loc_3AB6
.text$mn:00003AAD ; ---------------------------------------------------------------------------
.text$mn:00003AAD
.text$mn:00003AAD loc_3AAD:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00003AAD                 mov     eax, [ebp+arg_0]
.text$mn:00003AB0                 add     eax, 1Ch
.text$mn:00003AB3                 mov     [ebp+arg_0], eax
.text$mn:00003AB6
.text$mn:00003AB6 loc_3AB6:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00003AB6                 mov     ecx, [ebp+arg_0]
.text$mn:00003AB9                 cmp     ecx, [ebp+arg_4]
.text$mn:00003ABC                 jz      short loc_3ACC
.text$mn:00003ABE                 mov     edx, [ebp+arg_0]
.text$mn:00003AC1                 push    edx
.text$mn:00003AC2                 mov     ecx, [ebp+arg_8]
.text$mn:00003AC5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00003ACA                 jmp     short loc_3AAD
.text$mn:00003ACC ; ---------------------------------------------------------------------------
.text$mn:00003ACC
.text$mn:00003ACC loc_3ACC:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00003ACC                 pop     ebp
.text$mn:00003ACD                 retn
.text$mn:00003ACD ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003ACD
.text$mn:00003ACD ; ---------------------------------------------------------------------------
.text$mn:00003ACE                 align 10h
.text$mn:00003ACE _text$mn        ends
.text$mn:00003ACE
.text$mn:00003AD0 ; ===========================================================================
.text$mn:00003AD0
.text$mn:00003AD0 ; Segment type: Pure code
.text$mn:00003AD0 ; Segment permissions: Read/Execute
.text$mn:00003AD0 _text$mn        segment para public 'CODE' use32
.text$mn:00003AD0                 assume cs:_text$mn
.text$mn:00003AD0                 ;org 3AD0h
.text$mn:00003AD0 ; COMDAT (pick any)
.text$mn:00003AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AD0
.text$mn:00003AD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AD0
.text$mn:00003AD0 ; Attributes: bp-based frame
.text$mn:00003AD0
.text$mn:00003AD0 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct TreeParams *>(struct TreeParams * const &)
.text$mn:00003AD0                 public ??$_Iter_cat@PAUTreeParams@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeParams@@@Z
.text$mn:00003AD0 ??$_Iter_cat@PAUTreeParams@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeParams@@@Z proc near
.text$mn:00003AD0                                         ; CODE XREF: std::_Debug_range<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint)+Cp
.text$mn:00003AD0
.text$mn:00003AD0 var_1           = byte ptr -1
.text$mn:00003AD0 arg_0           = dword ptr  8
.text$mn:00003AD0
.text$mn:00003AD0                 push    ebp
.text$mn:00003AD1                 mov     ebp, esp
.text$mn:00003AD3                 push    ecx
.text$mn:00003AD4                 mov     eax, [ebp+arg_0]
.text$mn:00003AD7                 mov     cl, [ebp+var_1]
.text$mn:00003ADA                 mov     [eax], cl
.text$mn:00003ADC                 mov     eax, [ebp+arg_0]
.text$mn:00003ADF                 mov     esp, ebp
.text$mn:00003AE1                 pop     ebp
.text$mn:00003AE2                 retn
.text$mn:00003AE2 ??$_Iter_cat@PAUTreeParams@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeParams@@@Z endp
.text$mn:00003AE2
.text$mn:00003AE2 ; ---------------------------------------------------------------------------
.text$mn:00003AE3                 align 4
.text$mn:00003AE3 _text$mn        ends
.text$mn:00003AE3
.text$mn:00003AE4 ; ===========================================================================
.text$mn:00003AE4
.text$mn:00003AE4 ; Segment type: Pure code
.text$mn:00003AE4 ; Segment permissions: Read/Execute
.text$mn:00003AE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003AE4                 assume cs:_text$mn
.text$mn:00003AE4                 ;org 3AE4h
.text$mn:00003AE4 ; COMDAT (pick any)
.text$mn:00003AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AE4
.text$mn:00003AE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AE4
.text$mn:00003AE4 ; Attributes: bp-based frame
.text$mn:00003AE4
.text$mn:00003AE4 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct TreeStateNode *>(struct TreeStateNode * const &)
.text$mn:00003AE4                 public ??$_Iter_cat@PAUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeStateNode@@@Z
.text$mn:00003AE4 ??$_Iter_cat@PAUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeStateNode@@@Z proc near
.text$mn:00003AE4                                         ; CODE XREF: std::_Debug_range<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint)+Cp
.text$mn:00003AE4
.text$mn:00003AE4 var_1           = byte ptr -1
.text$mn:00003AE4 arg_0           = dword ptr  8
.text$mn:00003AE4
.text$mn:00003AE4                 push    ebp
.text$mn:00003AE5                 mov     ebp, esp
.text$mn:00003AE7                 push    ecx
.text$mn:00003AE8                 mov     eax, [ebp+arg_0]
.text$mn:00003AEB                 mov     cl, [ebp+var_1]
.text$mn:00003AEE                 mov     [eax], cl
.text$mn:00003AF0                 mov     eax, [ebp+arg_0]
.text$mn:00003AF3                 mov     esp, ebp
.text$mn:00003AF5                 pop     ebp
.text$mn:00003AF6                 retn
.text$mn:00003AF6 ??$_Iter_cat@PAUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUTreeStateNode@@@Z endp
.text$mn:00003AF6
.text$mn:00003AF6 ; ---------------------------------------------------------------------------
.text$mn:00003AF7                 align 4
.text$mn:00003AF7 _text$mn        ends
.text$mn:00003AF7
.text$mn:00003AF8 ; ===========================================================================
.text$mn:00003AF8
.text$mn:00003AF8 ; Segment type: Pure code
.text$mn:00003AF8 ; Segment permissions: Read/Execute
.text$mn:00003AF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003AF8                 assume cs:_text$mn
.text$mn:00003AF8                 ;org 3AF8h
.text$mn:00003AF8 ; COMDAT (pick any)
.text$mn:00003AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AF8
.text$mn:00003AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AF8
.text$mn:00003AF8 ; Attributes: bp-based frame
.text$mn:00003AF8
.text$mn:00003AF8 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct TreeStateNode const *>(struct TreeStateNode const * const &)
.text$mn:00003AF8                 public ??$_Iter_cat@PBUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUTreeStateNode@@@Z
.text$mn:00003AF8 ??$_Iter_cat@PBUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUTreeStateNode@@@Z proc near
.text$mn:00003AF8                                         ; CODE XREF: std::_Debug_range<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint)+Cp
.text$mn:00003AF8
.text$mn:00003AF8 var_1           = byte ptr -1
.text$mn:00003AF8 arg_0           = dword ptr  8
.text$mn:00003AF8
.text$mn:00003AF8                 push    ebp
.text$mn:00003AF9                 mov     ebp, esp
.text$mn:00003AFB                 push    ecx
.text$mn:00003AFC                 mov     eax, [ebp+arg_0]
.text$mn:00003AFF                 mov     cl, [ebp+var_1]
.text$mn:00003B02                 mov     [eax], cl
.text$mn:00003B04                 mov     eax, [ebp+arg_0]
.text$mn:00003B07                 mov     esp, ebp
.text$mn:00003B09                 pop     ebp
.text$mn:00003B0A                 retn
.text$mn:00003B0A ??$_Iter_cat@PBUTreeStateNode@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUTreeStateNode@@@Z endp
.text$mn:00003B0A
.text$mn:00003B0A ; ---------------------------------------------------------------------------
.text$mn:00003B0B                 align 4
.text$mn:00003B0B _text$mn        ends
.text$mn:00003B0B
.text$mn:00003B0C ; ===========================================================================
.text$mn:00003B0C
.text$mn:00003B0C ; Segment type: Pure code
.text$mn:00003B0C ; Segment permissions: Read/Execute
.text$mn:00003B0C _text$mn        segment para public 'CODE' use32
.text$mn:00003B0C                 assume cs:_text$mn
.text$mn:00003B0C                 ;org 3B0Ch
.text$mn:00003B0C ; COMDAT (pick any)
.text$mn:00003B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B0C
.text$mn:00003B0C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B0C
.text$mn:00003B0C ; Attributes: bp-based frame
.text$mn:00003B0C
.text$mn:00003B0C ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * const &)
.text$mn:00003B0C                 public ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00003B0C ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00003B0C                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+Cp
.text$mn:00003B0C
.text$mn:00003B0C var_1           = byte ptr -1
.text$mn:00003B0C arg_0           = dword ptr  8
.text$mn:00003B0C
.text$mn:00003B0C                 push    ebp
.text$mn:00003B0D                 mov     ebp, esp
.text$mn:00003B0F                 push    ecx
.text$mn:00003B10                 mov     eax, [ebp+arg_0]
.text$mn:00003B13                 mov     cl, [ebp+var_1]
.text$mn:00003B16                 mov     [eax], cl
.text$mn:00003B18                 mov     eax, [ebp+arg_0]
.text$mn:00003B1B                 mov     esp, ebp
.text$mn:00003B1D                 pop     ebp
.text$mn:00003B1E                 retn
.text$mn:00003B1E ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00003B1E
.text$mn:00003B1E ; ---------------------------------------------------------------------------
.text$mn:00003B1F                 align 10h
.text$mn:00003B1F _text$mn        ends
.text$mn:00003B1F
.text$mn:00003B20 ; ===========================================================================
.text$mn:00003B20
.text$mn:00003B20 ; Segment type: Pure code
.text$mn:00003B20 ; Segment permissions: Read/Execute
.text$mn:00003B20 _text$mn        segment para public 'CODE' use32
.text$mn:00003B20                 assume cs:_text$mn
.text$mn:00003B20                 ;org 3B20h
.text$mn:00003B20 ; COMDAT (pick any)
.text$mn:00003B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B20
.text$mn:00003B20 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B20
.text$mn:00003B20 ; Attributes: bp-based frame
.text$mn:00003B20
.text$mn:00003B20 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003B20                 public ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z
.text$mn:00003B20 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z proc near
.text$mn:00003B20                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+82p
.text$mn:00003B20
.text$mn:00003B20 var_1           = byte ptr -1
.text$mn:00003B20 arg_0           = dword ptr  8
.text$mn:00003B20 arg_4           = dword ptr  0Ch
.text$mn:00003B20 arg_8           = dword ptr  10h
.text$mn:00003B20
.text$mn:00003B20                 push    ebp
.text$mn:00003B21                 mov     ebp, esp
.text$mn:00003B23                 push    ecx
.text$mn:00003B24                 mov     eax, [ebp+arg_8]
.text$mn:00003B27                 push    eax
.text$mn:00003B28                 mov     ecx, [ebp+arg_0]
.text$mn:00003B2B                 push    ecx
.text$mn:00003B2C                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00003B31                 add     esp, 8
.text$mn:00003B34                 mov     [ebp+var_1], al
.text$mn:00003B37                 movzx   edx, [ebp+var_1]
.text$mn:00003B3B                 push    edx
.text$mn:00003B3C                 mov     eax, [ebp+arg_8]
.text$mn:00003B3F                 push    eax
.text$mn:00003B40                 mov     ecx, [ebp+arg_4]
.text$mn:00003B43                 push    ecx
.text$mn:00003B44                 mov     edx, [ebp+arg_0]
.text$mn:00003B47                 push    edx
.text$mn:00003B48                 call    ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003B4D                 add     esp, 10h
.text$mn:00003B50                 mov     esp, ebp
.text$mn:00003B52                 pop     ebp
.text$mn:00003B53                 retn
.text$mn:00003B53 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z endp
.text$mn:00003B53
.text$mn:00003B53 _text$mn        ends
.text$mn:00003B53
.text$mn:00003B54 ; ===========================================================================
.text$mn:00003B54
.text$mn:00003B54 ; Segment type: Pure code
.text$mn:00003B54 ; Segment permissions: Read/Execute
.text$mn:00003B54 _text$mn        segment para public 'CODE' use32
.text$mn:00003B54                 assume cs:_text$mn
.text$mn:00003B54                 ;org 3B54h
.text$mn:00003B54 ; COMDAT (pick any)
.text$mn:00003B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B54
.text$mn:00003B54 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B54
.text$mn:00003B54 ; Attributes: bp-based frame
.text$mn:00003B54
.text$mn:00003B54 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003B54                 public ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003B54 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003B54                                         ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+28p
.text$mn:00003B54
.text$mn:00003B54 arg_0           = dword ptr  8
.text$mn:00003B54 arg_4           = dword ptr  0Ch
.text$mn:00003B54 arg_8           = dword ptr  10h
.text$mn:00003B54
.text$mn:00003B54                 push    ebp
.text$mn:00003B55                 mov     ebp, esp
.text$mn:00003B57                 jmp     short loc_3B6B
.text$mn:00003B59 ; ---------------------------------------------------------------------------
.text$mn:00003B59
.text$mn:00003B59 loc_3B59:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+34j
.text$mn:00003B59                 mov     eax, [ebp+arg_8]
.text$mn:00003B5C                 add     eax, 1Ch
.text$mn:00003B5F                 mov     [ebp+arg_8], eax
.text$mn:00003B62                 mov     ecx, [ebp+arg_0]
.text$mn:00003B65                 add     ecx, 1Ch
.text$mn:00003B68                 mov     [ebp+arg_0], ecx
.text$mn:00003B6B
.text$mn:00003B6B loc_3B6B:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00003B6B                 mov     edx, [ebp+arg_0]
.text$mn:00003B6E                 cmp     edx, [ebp+arg_4]
.text$mn:00003B71                 jz      short loc_3B8A
.text$mn:00003B73                 mov     eax, [ebp+arg_0]
.text$mn:00003B76                 push    eax
.text$mn:00003B77                 call    ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003B7C                 add     esp, 4
.text$mn:00003B7F                 push    eax
.text$mn:00003B80                 mov     ecx, [ebp+arg_8]
.text$mn:00003B83                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003B88                 jmp     short loc_3B59
.text$mn:00003B8A ; ---------------------------------------------------------------------------
.text$mn:00003B8A
.text$mn:00003B8A loc_3B8A:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+1Dj
.text$mn:00003B8A                 mov     eax, [ebp+arg_8]
.text$mn:00003B8D                 pop     ebp
.text$mn:00003B8E                 retn
.text$mn:00003B8E ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00003B8E
.text$mn:00003B8E ; ---------------------------------------------------------------------------
.text$mn:00003B8F                 align 10h
.text$mn:00003B8F _text$mn        ends
.text$mn:00003B8F
.text$mn:00003B90 ; ===========================================================================
.text$mn:00003B90
.text$mn:00003B90 ; Segment type: Pure code
.text$mn:00003B90 ; Segment permissions: Read/Execute
.text$mn:00003B90 _text$mn        segment para public 'CODE' use32
.text$mn:00003B90                 assume cs:_text$mn
.text$mn:00003B90                 ;org 3B90h
.text$mn:00003B90 ; COMDAT (pick any)
.text$mn:00003B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B90
.text$mn:00003B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B90
.text$mn:00003B90 ; Attributes: bp-based frame
.text$mn:00003B90
.text$mn:00003B90 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct TreeParams, struct TreeParams>(struct TreeParams *, struct TreeParams *)
.text$mn:00003B90                 public ??$_Ptr_cat@UTreeParams@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeParams@@0@Z
.text$mn:00003B90 ??$_Ptr_cat@UTreeParams@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeParams@@0@Z proc near
.text$mn:00003B90                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+Cp
.text$mn:00003B90                                         ; std::_Uninit_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+Cp
.text$mn:00003B90
.text$mn:00003B90 var_1           = byte ptr -1
.text$mn:00003B90
.text$mn:00003B90                 push    ebp
.text$mn:00003B91                 mov     ebp, esp
.text$mn:00003B93                 push    ecx
.text$mn:00003B94                 mov     al, [ebp+var_1]
.text$mn:00003B97                 mov     esp, ebp
.text$mn:00003B99                 pop     ebp
.text$mn:00003B9A                 retn
.text$mn:00003B9A ??$_Ptr_cat@UTreeParams@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeParams@@0@Z endp
.text$mn:00003B9A
.text$mn:00003B9A ; ---------------------------------------------------------------------------
.text$mn:00003B9B                 align 4
.text$mn:00003B9B _text$mn        ends
.text$mn:00003B9B
.text$mn:00003B9C ; ===========================================================================
.text$mn:00003B9C
.text$mn:00003B9C ; Segment type: Pure code
.text$mn:00003B9C ; Segment permissions: Read/Execute
.text$mn:00003B9C _text$mn        segment para public 'CODE' use32
.text$mn:00003B9C                 assume cs:_text$mn
.text$mn:00003B9C                 ;org 3B9Ch
.text$mn:00003B9C ; COMDAT (pick any)
.text$mn:00003B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B9C
.text$mn:00003B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B9C
.text$mn:00003B9C ; Attributes: bp-based frame
.text$mn:00003B9C
.text$mn:00003B9C ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct TreeStateNode, struct TreeStateNode>(struct TreeStateNode *, struct TreeStateNode *)
.text$mn:00003B9C                 public ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z
.text$mn:00003B9C ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z proc near
.text$mn:00003B9C                                         ; CODE XREF: std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)+Cp
.text$mn:00003B9C                                         ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+Cp ...
.text$mn:00003B9C
.text$mn:00003B9C var_1           = byte ptr -1
.text$mn:00003B9C
.text$mn:00003B9C                 push    ebp
.text$mn:00003B9D                 mov     ebp, esp
.text$mn:00003B9F                 push    ecx
.text$mn:00003BA0                 mov     al, [ebp+var_1]
.text$mn:00003BA3                 mov     esp, ebp
.text$mn:00003BA5                 pop     ebp
.text$mn:00003BA6                 retn
.text$mn:00003BA6 ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z endp
.text$mn:00003BA6
.text$mn:00003BA6 ; ---------------------------------------------------------------------------
.text$mn:00003BA7                 align 4
.text$mn:00003BA7 _text$mn        ends
.text$mn:00003BA7
.text$mn:00003BA8 ; ===========================================================================
.text$mn:00003BA8
.text$mn:00003BA8 ; Segment type: Pure code
.text$mn:00003BA8 ; Segment permissions: Read/Execute
.text$mn:00003BA8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BA8                 assume cs:_text$mn
.text$mn:00003BA8                 ;org 3BA8h
.text$mn:00003BA8 ; COMDAT (pick any)
.text$mn:00003BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BA8
.text$mn:00003BA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BA8
.text$mn:00003BA8 ; Attributes: bp-based frame
.text$mn:00003BA8
.text$mn:00003BA8 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct TreeStateNode, struct TreeStateNode>(struct TreeStateNode const *, struct TreeStateNode *)
.text$mn:00003BA8                 public ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUTreeStateNode@@PAU2@@Z
.text$mn:00003BA8 ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUTreeStateNode@@PAU2@@Z proc near
.text$mn:00003BA8                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+Cp
.text$mn:00003BA8
.text$mn:00003BA8 var_1           = byte ptr -1
.text$mn:00003BA8
.text$mn:00003BA8                 push    ebp
.text$mn:00003BA9                 mov     ebp, esp
.text$mn:00003BAB                 push    ecx
.text$mn:00003BAC                 mov     al, [ebp+var_1]
.text$mn:00003BAF                 mov     esp, ebp
.text$mn:00003BB1                 pop     ebp
.text$mn:00003BB2                 retn
.text$mn:00003BB2 ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUTreeStateNode@@PAU2@@Z endp
.text$mn:00003BB2
.text$mn:00003BB2 ; ---------------------------------------------------------------------------
.text$mn:00003BB3                 align 4
.text$mn:00003BB3 _text$mn        ends
.text$mn:00003BB3
.text$mn:00003BB4 ; ===========================================================================
.text$mn:00003BB4
.text$mn:00003BB4 ; Segment type: Pure code
.text$mn:00003BB4 ; Segment permissions: Read/Execute
.text$mn:00003BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003BB4                 assume cs:_text$mn
.text$mn:00003BB4                 ;org 3BB4h
.text$mn:00003BB4 ; COMDAT (pick any)
.text$mn:00003BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BB4
.text$mn:00003BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BB4
.text$mn:00003BB4 ; Attributes: bp-based frame
.text$mn:00003BB4
.text$mn:00003BB4 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct foundInfo, struct foundInfo>(struct foundInfo *, struct foundInfo *)
.text$mn:00003BB4                 public ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z
.text$mn:00003BB4 ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z proc near
.text$mn:00003BB4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+Cp
.text$mn:00003BB4
.text$mn:00003BB4 var_1           = byte ptr -1
.text$mn:00003BB4
.text$mn:00003BB4                 push    ebp
.text$mn:00003BB5                 mov     ebp, esp
.text$mn:00003BB7                 push    ecx
.text$mn:00003BB8                 mov     al, [ebp+var_1]
.text$mn:00003BBB                 mov     esp, ebp
.text$mn:00003BBD                 pop     ebp
.text$mn:00003BBE                 retn
.text$mn:00003BBE ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z endp
.text$mn:00003BBE
.text$mn:00003BBE ; ---------------------------------------------------------------------------
.text$mn:00003BBF                 align 10h
.text$mn:00003BBF _text$mn        ends
.text$mn:00003BBF
.text$mn:00003BC0 ; ===========================================================================
.text$mn:00003BC0
.text$mn:00003BC0 ; Segment type: Pure code
.text$mn:00003BC0 ; Segment permissions: Read/Execute
.text$mn:00003BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00003BC0                 assume cs:_text$mn
.text$mn:00003BC0                 ;org 3BC0h
.text$mn:00003BC0 ; COMDAT (pick any)
.text$mn:00003BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BC0
.text$mn:00003BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BC0
.text$mn:00003BC0 ; Attributes: bp-based frame
.text$mn:00003BC0
.text$mn:00003BC0 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003BC0                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00003BC0 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00003BC0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00003BC0                                         ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:00003BC0
.text$mn:00003BC0 var_1           = byte ptr -1
.text$mn:00003BC0
.text$mn:00003BC0                 push    ebp
.text$mn:00003BC1                 mov     ebp, esp
.text$mn:00003BC3                 push    ecx
.text$mn:00003BC4                 mov     al, [ebp+var_1]
.text$mn:00003BC7                 mov     esp, ebp
.text$mn:00003BC9                 pop     ebp
.text$mn:00003BCA                 retn
.text$mn:00003BCA ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00003BCA
.text$mn:00003BCA ; ---------------------------------------------------------------------------
.text$mn:00003BCB                 align 4
.text$mn:00003BCB _text$mn        ends
.text$mn:00003BCB
.text$mn:00003BCC ; ===========================================================================
.text$mn:00003BCC
.text$mn:00003BCC ; Segment type: Pure code
.text$mn:00003BCC ; Segment permissions: Read/Execute
.text$mn:00003BCC _text$mn        segment para public 'CODE' use32
.text$mn:00003BCC                 assume cs:_text$mn
.text$mn:00003BCC                 ;org 3BCCh
.text$mn:00003BCC ; COMDAT (pick any)
.text$mn:00003BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BCC
.text$mn:00003BCC ; =============== S U B R O U T I N E =======================================
.text$mn:00003BCC
.text$mn:00003BCC ; Attributes: bp-based frame
.text$mn:00003BCC
.text$mn:00003BCC ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003BCC                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z
.text$mn:00003BCC ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z proc near
.text$mn:00003BCC                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00003BCC
.text$mn:00003BCC var_1           = byte ptr -1
.text$mn:00003BCC
.text$mn:00003BCC                 push    ebp
.text$mn:00003BCD                 mov     ebp, esp
.text$mn:00003BCF                 push    ecx
.text$mn:00003BD0                 mov     al, [ebp+var_1]
.text$mn:00003BD3                 mov     esp, ebp
.text$mn:00003BD5                 pop     ebp
.text$mn:00003BD6                 retn
.text$mn:00003BD6 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z endp
.text$mn:00003BD6
.text$mn:00003BD6 ; ---------------------------------------------------------------------------
.text$mn:00003BD7                 align 4
.text$mn:00003BD7 _text$mn        ends
.text$mn:00003BD7
.text$mn:00003BD8 ; ===========================================================================
.text$mn:00003BD8
.text$mn:00003BD8 ; Segment type: Pure code
.text$mn:00003BD8 ; Segment permissions: Read/Execute
.text$mn:00003BD8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BD8                 assume cs:_text$mn
.text$mn:00003BD8                 ;org 3BD8h
.text$mn:00003BD8 ; COMDAT (pick any)
.text$mn:00003BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BD8
.text$mn:00003BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BD8
.text$mn:00003BD8 ; Attributes: bp-based frame
.text$mn:00003BD8
.text$mn:00003BD8 ; struct TreeParams * & __cdecl std::_Rechecked<struct TreeParams *, struct TreeParams *>(struct TreeParams * &, struct TreeParams *)
.text$mn:00003BD8                 public ??$_Rechecked@PAUTreeParams@@PAU1@@std@@YAAAPAUTreeParams@@AAPAU1@PAU1@@Z
.text$mn:00003BD8 ??$_Rechecked@PAUTreeParams@@PAU1@@std@@YAAAPAUTreeParams@@AAPAU1@PAU1@@Z proc near
.text$mn:00003BD8                                         ; CODE XREF: std::_Uninitialized_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+3Bp
.text$mn:00003BD8
.text$mn:00003BD8 arg_0           = dword ptr  8
.text$mn:00003BD8 arg_4           = dword ptr  0Ch
.text$mn:00003BD8
.text$mn:00003BD8                 push    ebp
.text$mn:00003BD9                 mov     ebp, esp
.text$mn:00003BDB                 mov     eax, [ebp+arg_0]
.text$mn:00003BDE                 mov     ecx, [ebp+arg_4]
.text$mn:00003BE1                 mov     [eax], ecx
.text$mn:00003BE3                 mov     eax, [ebp+arg_0]
.text$mn:00003BE6                 pop     ebp
.text$mn:00003BE7                 retn
.text$mn:00003BE7 ??$_Rechecked@PAUTreeParams@@PAU1@@std@@YAAAPAUTreeParams@@AAPAU1@PAU1@@Z endp
.text$mn:00003BE7
.text$mn:00003BE7 _text$mn        ends
.text$mn:00003BE7
.text$mn:00003BE8 ; ===========================================================================
.text$mn:00003BE8
.text$mn:00003BE8 ; Segment type: Pure code
.text$mn:00003BE8 ; Segment permissions: Read/Execute
.text$mn:00003BE8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BE8                 assume cs:_text$mn
.text$mn:00003BE8                 ;org 3BE8h
.text$mn:00003BE8 ; COMDAT (pick any)
.text$mn:00003BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BE8
.text$mn:00003BE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BE8
.text$mn:00003BE8 ; Attributes: bp-based frame
.text$mn:00003BE8
.text$mn:00003BE8 ; struct TreeStateNode * & __cdecl std::_Rechecked<struct TreeStateNode *, struct TreeStateNode *>(struct TreeStateNode * &, struct TreeStateNode *)
.text$mn:00003BE8                 public ??$_Rechecked@PAUTreeStateNode@@PAU1@@std@@YAAAPAUTreeStateNode@@AAPAU1@PAU1@@Z
.text$mn:00003BE8 ??$_Rechecked@PAUTreeStateNode@@PAU1@@std@@YAAAPAUTreeStateNode@@AAPAU1@PAU1@@Z proc near
.text$mn:00003BE8                                         ; CODE XREF: std::_Uninitialized_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+3Bp
.text$mn:00003BE8                                         ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+B2p
.text$mn:00003BE8
.text$mn:00003BE8 arg_0           = dword ptr  8
.text$mn:00003BE8 arg_4           = dword ptr  0Ch
.text$mn:00003BE8
.text$mn:00003BE8                 push    ebp
.text$mn:00003BE9                 mov     ebp, esp
.text$mn:00003BEB                 mov     eax, [ebp+arg_0]
.text$mn:00003BEE                 mov     ecx, [ebp+arg_4]
.text$mn:00003BF1                 mov     [eax], ecx
.text$mn:00003BF3                 mov     eax, [ebp+arg_0]
.text$mn:00003BF6                 pop     ebp
.text$mn:00003BF7                 retn
.text$mn:00003BF7 ??$_Rechecked@PAUTreeStateNode@@PAU1@@std@@YAAAPAUTreeStateNode@@AAPAU1@PAU1@@Z endp
.text$mn:00003BF7
.text$mn:00003BF7 _text$mn        ends
.text$mn:00003BF7
.text$mn:00003BF8 ; ===========================================================================
.text$mn:00003BF8
.text$mn:00003BF8 ; Segment type: Pure code
.text$mn:00003BF8 ; Segment permissions: Read/Execute
.text$mn:00003BF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003BF8                 assume cs:_text$mn
.text$mn:00003BF8                 ;org 3BF8h
.text$mn:00003BF8 ; COMDAT (pick any)
.text$mn:00003BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BF8
.text$mn:00003BF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BF8
.text$mn:00003BF8 ; Attributes: bp-based frame
.text$mn:00003BF8
.text$mn:00003BF8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003BF8                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:00003BF8 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:00003BF8                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+B2p
.text$mn:00003BF8
.text$mn:00003BF8 arg_0           = dword ptr  8
.text$mn:00003BF8 arg_4           = dword ptr  0Ch
.text$mn:00003BF8
.text$mn:00003BF8                 push    ebp
.text$mn:00003BF9                 mov     ebp, esp
.text$mn:00003BFB                 mov     eax, [ebp+arg_0]
.text$mn:00003BFE                 mov     ecx, [ebp+arg_4]
.text$mn:00003C01                 mov     [eax], ecx
.text$mn:00003C03                 mov     eax, [ebp+arg_0]
.text$mn:00003C06                 pop     ebp
.text$mn:00003C07                 retn
.text$mn:00003C07 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:00003C07
.text$mn:00003C07 _text$mn        ends
.text$mn:00003C07
.text$mn:00003C08 ; ===========================================================================
.text$mn:00003C08
.text$mn:00003C08 ; Segment type: Pure code
.text$mn:00003C08 ; Segment permissions: Read/Execute
.text$mn:00003C08 _text$mn        segment para public 'CODE' use32
.text$mn:00003C08                 assume cs:_text$mn
.text$mn:00003C08                 ;org 3C08h
.text$mn:00003C08 ; COMDAT (pick any)
.text$mn:00003C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C08
.text$mn:00003C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C08
.text$mn:00003C08 ; Attributes: bp-based frame
.text$mn:00003C08
.text$mn:00003C08 ; protected: struct TreeStateNode * __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Ucopy<struct TreeStateNode *>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *)
.text$mn:00003C08                 public ??$_Ucopy@PAUTreeStateNode@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@PAU2@00@Z
.text$mn:00003C08 ??$_Ucopy@PAUTreeStateNode@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@PAU2@00@Z proc near
.text$mn:00003C08                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+167p
.text$mn:00003C08                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+1FCp
.text$mn:00003C08
.text$mn:00003C08 var_8           = dword ptr -8
.text$mn:00003C08 var_1           = byte ptr -1
.text$mn:00003C08 arg_0           = dword ptr  8
.text$mn:00003C08 arg_4           = dword ptr  0Ch
.text$mn:00003C08 arg_8           = dword ptr  10h
.text$mn:00003C08
.text$mn:00003C08                 push    ebp
.text$mn:00003C09                 mov     ebp, esp
.text$mn:00003C0B                 sub     esp, 8
.text$mn:00003C0E                 mov     [ebp+var_8], ecx
.text$mn:00003C11                 lea     eax, [ebp+var_1]
.text$mn:00003C14                 push    eax
.text$mn:00003C15                 mov     ecx, [ebp+var_8]
.text$mn:00003C18                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00003C1D                 lea     ecx, [ebp+var_1]
.text$mn:00003C20                 push    ecx
.text$mn:00003C21                 mov     edx, [ebp+arg_8]
.text$mn:00003C24                 push    edx
.text$mn:00003C25                 mov     eax, [ebp+arg_4]
.text$mn:00003C28                 push    eax
.text$mn:00003C29                 mov     ecx, [ebp+arg_0]
.text$mn:00003C2C                 push    ecx
.text$mn:00003C2D                 call    ??$_Uninitialized_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z ; std::_Uninitialized_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)
.text$mn:00003C32                 add     esp, 10h
.text$mn:00003C35                 mov     esp, ebp
.text$mn:00003C37                 pop     ebp
.text$mn:00003C38                 retn    0Ch
.text$mn:00003C38 ??$_Ucopy@PAUTreeStateNode@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@PAU2@00@Z endp
.text$mn:00003C38
.text$mn:00003C38 ; ---------------------------------------------------------------------------
.text$mn:00003C3B                 align 4
.text$mn:00003C3B _text$mn        ends
.text$mn:00003C3B
.text$mn:00003C3C ; ===========================================================================
.text$mn:00003C3C
.text$mn:00003C3C ; Segment type: Pure code
.text$mn:00003C3C ; Segment permissions: Read/Execute
.text$mn:00003C3C _text$mn        segment para public 'CODE' use32
.text$mn:00003C3C                 assume cs:_text$mn
.text$mn:00003C3C                 ;org 3C3Ch
.text$mn:00003C3C ; COMDAT (pick any)
.text$mn:00003C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C3C
.text$mn:00003C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00003C3C
.text$mn:00003C3C ; Attributes: bp-based frame
.text$mn:00003C3C
.text$mn:00003C3C ; protected: struct TreeStateNode * __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Ucopy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>, struct TreeStateNode *)
.text$mn:00003C3C                 public ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z
.text$mn:00003C3C ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z proc near
.text$mn:00003C3C                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+C0p
.text$mn:00003C3C
.text$mn:00003C3C var_34          = dword ptr -34h
.text$mn:00003C3C var_30          = dword ptr -30h
.text$mn:00003C3C var_2C          = dword ptr -2Ch
.text$mn:00003C3C var_28          = dword ptr -28h
.text$mn:00003C3C var_24          = dword ptr -24h
.text$mn:00003C3C var_20          = dword ptr -20h
.text$mn:00003C3C var_1C          = dword ptr -1Ch
.text$mn:00003C3C var_18          = dword ptr -18h
.text$mn:00003C3C var_14          = dword ptr -14h
.text$mn:00003C3C var_D           = byte ptr -0Dh
.text$mn:00003C3C var_C           = dword ptr -0Ch
.text$mn:00003C3C var_4           = dword ptr -4
.text$mn:00003C3C arg_0           = byte ptr  8
.text$mn:00003C3C arg_C           = byte ptr  14h
.text$mn:00003C3C arg_18          = dword ptr  20h
.text$mn:00003C3C
.text$mn:00003C3C                 push    ebp
.text$mn:00003C3D                 mov     ebp, esp
.text$mn:00003C3F                 push    0FFFFFFFFh
.text$mn:00003C41                 push    offset __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z
.text$mn:00003C46                 mov     eax, large fs:0
.text$mn:00003C4C                 push    eax
.text$mn:00003C4D                 sub     esp, 28h
.text$mn:00003C50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003C55                 xor     eax, ebp
.text$mn:00003C57                 push    eax
.text$mn:00003C58                 lea     eax, [ebp+var_C]
.text$mn:00003C5B                 mov     large fs:0, eax
.text$mn:00003C61                 mov     [ebp+var_14], ecx
.text$mn:00003C64                 mov     [ebp+var_4], 1
.text$mn:00003C6B                 lea     eax, [ebp+var_D]
.text$mn:00003C6E                 push    eax
.text$mn:00003C6F                 mov     ecx, [ebp+var_14]
.text$mn:00003C72                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00003C77                 lea     ecx, [ebp+var_D]
.text$mn:00003C7A                 push    ecx
.text$mn:00003C7B                 mov     edx, [ebp+arg_18]
.text$mn:00003C7E                 push    edx
.text$mn:00003C7F                 sub     esp, 0Ch
.text$mn:00003C82                 mov     ecx, esp
.text$mn:00003C84                 mov     [ebp+var_28], esp
.text$mn:00003C87                 lea     eax, [ebp+arg_C]
.text$mn:00003C8A                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003C8B                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)
.text$mn:00003C90                 mov     [ebp+var_18], eax
.text$mn:00003C93                 mov     ecx, [ebp+var_18]
.text$mn:00003C96                 mov     [ebp+var_2C], ecx
.text$mn:00003C99                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003C9D                 sub     esp, 0Ch
.text$mn:00003CA0                 mov     ecx, esp
.text$mn:00003CA2                 mov     [ebp+var_30], esp
.text$mn:00003CA5                 lea     edx, [ebp+arg_0]
.text$mn:00003CA8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00003CA9                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)
.text$mn:00003CAE                 mov     [ebp+var_1C], eax
.text$mn:00003CB1                 mov     eax, [ebp+var_1C]
.text$mn:00003CB4                 mov     [ebp+var_34], eax
.text$mn:00003CB7                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003CBB                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003CBF                 call    ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)
.text$mn:00003CC4                 add     esp, 20h
.text$mn:00003CC7                 mov     [ebp+var_20], eax
.text$mn:00003CCA                 mov     ecx, [ebp+var_20]
.text$mn:00003CCD                 mov     [ebp+var_24], ecx
.text$mn:00003CD0                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003CD4                 lea     ecx, [ebp+arg_0]
.text$mn:00003CD7                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$mn:00003CDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003CE3                 lea     ecx, [ebp+arg_C]
.text$mn:00003CE6                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$mn:00003CEB                 mov     eax, [ebp+var_24]
.text$mn:00003CEE                 mov     ecx, [ebp+var_C]
.text$mn:00003CF1                 mov     large fs:0, ecx
.text$mn:00003CF8                 pop     ecx
.text$mn:00003CF9                 mov     esp, ebp
.text$mn:00003CFB                 pop     ebp
.text$mn:00003CFC                 retn    1Ch
.text$mn:00003CFC ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z endp
.text$mn:00003CFC
.text$mn:00003CFC ; ---------------------------------------------------------------------------
.text$mn:00003CFF                 align 10h
.text$mn:00003CFF _text$mn        ends
.text$mn:00003CFF
.text$x:00003D00 ; ===========================================================================
.text$x:00003D00
.text$x:00003D00 ; Segment type: Pure code
.text$x:00003D00 ; Segment permissions: Read/Execute
.text$x:00003D00 _text$x         segment para public 'CODE' use32
.text$x:00003D00                 assume cs:_text$x
.text$x:00003D00                 ;org 3D00h
.text$x:00003D00 ; COMDAT (pick associative to section at 3C3C)
.text$x:00003D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003D00
.text$x:00003D00 ; =============== S U B R O U T I N E =======================================
.text$x:00003D00
.text$x:00003D00
.text$x:00003D00 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$0 proc near
.text$x:00003D00                                         ; DATA XREF: .xdata$x:0000E26Co
.text$x:00003D00                 lea     ecx, [ebp+14h]
.text$x:00003D03                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00003D03 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$0 endp
.text$x:00003D03
.text$x:00003D08
.text$x:00003D08 ; =============== S U B R O U T I N E =======================================
.text$x:00003D08
.text$x:00003D08
.text$x:00003D08 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$1 proc near
.text$x:00003D08                                         ; DATA XREF: .xdata$x:0000E274o
.text$x:00003D08                 lea     ecx, [ebp+8]
.text$x:00003D0B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00003D0B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$1 endp
.text$x:00003D0B
.text$x:00003D10
.text$x:00003D10 ; =============== S U B R O U T I N E =======================================
.text$x:00003D10
.text$x:00003D10
.text$x:00003D10 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$2 proc near
.text$x:00003D10                                         ; DATA XREF: .xdata$x:0000E27Co
.text$x:00003D10                 mov     ecx, [ebp-28h]
.text$x:00003D13                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00003D13 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$2 endp
.text$x:00003D13
.text$x:00003D18
.text$x:00003D18 ; =============== S U B R O U T I N E =======================================
.text$x:00003D18
.text$x:00003D18
.text$x:00003D18 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$3 proc near
.text$x:00003D18                                         ; DATA XREF: .xdata$x:0000E284o
.text$x:00003D18                 mov     ecx, [ebp-30h]
.text$x:00003D1B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00003D1B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$3 endp
.text$x:00003D1B
.text$x:00003D20
.text$x:00003D20 ; =============== S U B R O U T I N E =======================================
.text$x:00003D20
.text$x:00003D20
.text$x:00003D20 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z proc near
.text$x:00003D20                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+5o
.text$x:00003D20
.text$x:00003D20 arg_4           = dword ptr  8
.text$x:00003D20
.text$x:00003D20                 mov     edx, [esp+arg_4]
.text$x:00003D24                 lea     eax, [edx+0Ch]
.text$x:00003D27                 mov     ecx, [edx-2Ch]
.text$x:00003D2A                 xor     ecx, eax
.text$x:00003D2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D31                 mov     eax, offset __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z
.text$x:00003D36                 jmp     ___CxxFrameHandler3
.text$x:00003D36 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z endp
.text$x:00003D36
.text$x:00003D36 ; ---------------------------------------------------------------------------
.text$x:00003D3B                 align 4
.text$x:00003D3B _text$x         ends
.text$x:00003D3B
.text$mn:00003D3C ; ===========================================================================
.text$mn:00003D3C
.text$mn:00003D3C ; Segment type: Pure code
.text$mn:00003D3C ; Segment permissions: Read/Execute
.text$mn:00003D3C _text$mn        segment para public 'CODE' use32
.text$mn:00003D3C                 assume cs:_text$mn
.text$mn:00003D3C                 ;org 3D3Ch
.text$mn:00003D3C ; COMDAT (pick any)
.text$mn:00003D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D3C
.text$mn:00003D3C ; =============== S U B R O U T I N E =======================================
.text$mn:00003D3C
.text$mn:00003D3C ; Attributes: bp-based frame
.text$mn:00003D3C
.text$mn:00003D3C ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Ucopy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003D3C                 public ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$mn:00003D3C ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z proc near
.text$mn:00003D3C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+C0p
.text$mn:00003D3C
.text$mn:00003D3C var_34          = dword ptr -34h
.text$mn:00003D3C var_30          = dword ptr -30h
.text$mn:00003D3C var_2C          = dword ptr -2Ch
.text$mn:00003D3C var_28          = dword ptr -28h
.text$mn:00003D3C var_24          = dword ptr -24h
.text$mn:00003D3C var_20          = dword ptr -20h
.text$mn:00003D3C var_1C          = dword ptr -1Ch
.text$mn:00003D3C var_18          = dword ptr -18h
.text$mn:00003D3C var_14          = dword ptr -14h
.text$mn:00003D3C var_D           = byte ptr -0Dh
.text$mn:00003D3C var_C           = dword ptr -0Ch
.text$mn:00003D3C var_4           = dword ptr -4
.text$mn:00003D3C arg_0           = byte ptr  8
.text$mn:00003D3C arg_C           = byte ptr  14h
.text$mn:00003D3C arg_18          = dword ptr  20h
.text$mn:00003D3C
.text$mn:00003D3C                 push    ebp
.text$mn:00003D3D                 mov     ebp, esp
.text$mn:00003D3F                 push    0FFFFFFFFh
.text$mn:00003D41                 push    offset __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$mn:00003D46                 mov     eax, large fs:0
.text$mn:00003D4C                 push    eax
.text$mn:00003D4D                 sub     esp, 28h
.text$mn:00003D50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D55                 xor     eax, ebp
.text$mn:00003D57                 push    eax
.text$mn:00003D58                 lea     eax, [ebp+var_C]
.text$mn:00003D5B                 mov     large fs:0, eax
.text$mn:00003D61                 mov     [ebp+var_14], ecx
.text$mn:00003D64                 mov     [ebp+var_4], 1
.text$mn:00003D6B                 lea     eax, [ebp+var_D]
.text$mn:00003D6E                 push    eax
.text$mn:00003D6F                 mov     ecx, [ebp+var_14]
.text$mn:00003D72                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00003D77                 lea     ecx, [ebp+var_D]
.text$mn:00003D7A                 push    ecx
.text$mn:00003D7B                 mov     edx, [ebp+arg_18]
.text$mn:00003D7E                 push    edx
.text$mn:00003D7F                 sub     esp, 0Ch
.text$mn:00003D82                 mov     ecx, esp
.text$mn:00003D84                 mov     [ebp+var_28], esp
.text$mn:00003D87                 lea     eax, [ebp+arg_C]
.text$mn:00003D8A                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003D8B                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00003D90                 mov     [ebp+var_18], eax
.text$mn:00003D93                 mov     ecx, [ebp+var_18]
.text$mn:00003D96                 mov     [ebp+var_2C], ecx
.text$mn:00003D99                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003D9D                 sub     esp, 0Ch
.text$mn:00003DA0                 mov     ecx, esp
.text$mn:00003DA2                 mov     [ebp+var_30], esp
.text$mn:00003DA5                 lea     edx, [ebp+arg_0]
.text$mn:00003DA8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00003DA9                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00003DAE                 mov     [ebp+var_1C], eax
.text$mn:00003DB1                 mov     eax, [ebp+var_1C]
.text$mn:00003DB4                 mov     [ebp+var_34], eax
.text$mn:00003DB7                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003DBB                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003DBF                 call    ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00003DC4                 add     esp, 20h
.text$mn:00003DC7                 mov     [ebp+var_20], eax
.text$mn:00003DCA                 mov     ecx, [ebp+var_20]
.text$mn:00003DCD                 mov     [ebp+var_24], ecx
.text$mn:00003DD0                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003DD4                 lea     ecx, [ebp+arg_0]
.text$mn:00003DD7                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00003DDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003DE3                 lea     ecx, [ebp+arg_C]
.text$mn:00003DE6                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00003DEB                 mov     eax, [ebp+var_24]
.text$mn:00003DEE                 mov     ecx, [ebp+var_C]
.text$mn:00003DF1                 mov     large fs:0, ecx
.text$mn:00003DF8                 pop     ecx
.text$mn:00003DF9                 mov     esp, ebp
.text$mn:00003DFB                 pop     ebp
.text$mn:00003DFC                 retn    1Ch
.text$mn:00003DFC ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z endp
.text$mn:00003DFC
.text$mn:00003DFC ; ---------------------------------------------------------------------------
.text$mn:00003DFF                 align 10h
.text$mn:00003DFF _text$mn        ends
.text$mn:00003DFF
.text$x:00003E00 ; ===========================================================================
.text$x:00003E00
.text$x:00003E00 ; Segment type: Pure code
.text$x:00003E00 ; Segment permissions: Read/Execute
.text$x:00003E00 _text$x         segment para public 'CODE' use32
.text$x:00003E00                 assume cs:_text$x
.text$x:00003E00                 ;org 3E00h
.text$x:00003E00 ; COMDAT (pick associative to section at 3D3C)
.text$x:00003E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003E00
.text$x:00003E00 ; =============== S U B R O U T I N E =======================================
.text$x:00003E00
.text$x:00003E00
.text$x:00003E00 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0 proc near
.text$x:00003E00                                         ; DATA XREF: .xdata$x:0000E120o
.text$x:00003E00                 lea     ecx, [ebp+14h]
.text$x:00003E03                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003E03 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0 endp
.text$x:00003E03
.text$x:00003E08
.text$x:00003E08 ; =============== S U B R O U T I N E =======================================
.text$x:00003E08
.text$x:00003E08
.text$x:00003E08 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1 proc near
.text$x:00003E08                                         ; DATA XREF: .xdata$x:0000E128o
.text$x:00003E08                 lea     ecx, [ebp+8]
.text$x:00003E0B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003E0B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1 endp
.text$x:00003E0B
.text$x:00003E10
.text$x:00003E10 ; =============== S U B R O U T I N E =======================================
.text$x:00003E10
.text$x:00003E10
.text$x:00003E10 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2 proc near
.text$x:00003E10                                         ; DATA XREF: .xdata$x:0000E130o
.text$x:00003E10                 mov     ecx, [ebp-28h]
.text$x:00003E13                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003E13 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2 endp
.text$x:00003E13
.text$x:00003E18
.text$x:00003E18 ; =============== S U B R O U T I N E =======================================
.text$x:00003E18
.text$x:00003E18
.text$x:00003E18 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3 proc near
.text$x:00003E18                                         ; DATA XREF: .xdata$x:0000E138o
.text$x:00003E18                 mov     ecx, [ebp-30h]
.text$x:00003E1B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003E1B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3 endp
.text$x:00003E1B
.text$x:00003E20
.text$x:00003E20 ; =============== S U B R O U T I N E =======================================
.text$x:00003E20
.text$x:00003E20
.text$x:00003E20 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z proc near
.text$x:00003E20                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00003E20
.text$x:00003E20 arg_4           = dword ptr  8
.text$x:00003E20
.text$x:00003E20                 mov     edx, [esp+arg_4]
.text$x:00003E24                 lea     eax, [edx+0Ch]
.text$x:00003E27                 mov     ecx, [edx-2Ch]
.text$x:00003E2A                 xor     ecx, eax
.text$x:00003E2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E31                 mov     eax, offset __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$x:00003E36                 jmp     ___CxxFrameHandler3
.text$x:00003E36 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z endp
.text$x:00003E36
.text$x:00003E36 ; ---------------------------------------------------------------------------
.text$x:00003E3B                 align 4
.text$x:00003E3B _text$x         ends
.text$x:00003E3B
.text$mn:00003E3C ; ===========================================================================
.text$mn:00003E3C
.text$mn:00003E3C ; Segment type: Pure code
.text$mn:00003E3C ; Segment permissions: Read/Execute
.text$mn:00003E3C _text$mn        segment para public 'CODE' use32
.text$mn:00003E3C                 assume cs:_text$mn
.text$mn:00003E3C                 ;org 3E3Ch
.text$mn:00003E3C ; COMDAT (pick any)
.text$mn:00003E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E3C
.text$mn:00003E3C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E3C
.text$mn:00003E3C ; Attributes: bp-based frame
.text$mn:00003E3C
.text$mn:00003E3C ; protected: struct TreeParams * __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Umove<struct TreeParams *>(struct TreeParams *, struct TreeParams *, struct TreeParams *)
.text$mn:00003E3C                 public ??$_Umove@PAUTreeParams@@@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEPAUTreeParams@@PAU2@00@Z
.text$mn:00003E3C ??$_Umove@PAUTreeParams@@@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEPAUTreeParams@@PAU2@00@Z proc near
.text$mn:00003E3C                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+65p
.text$mn:00003E3C
.text$mn:00003E3C var_8           = dword ptr -8
.text$mn:00003E3C var_1           = byte ptr -1
.text$mn:00003E3C arg_0           = dword ptr  8
.text$mn:00003E3C arg_4           = dword ptr  0Ch
.text$mn:00003E3C arg_8           = dword ptr  10h
.text$mn:00003E3C
.text$mn:00003E3C                 push    ebp
.text$mn:00003E3D                 mov     ebp, esp
.text$mn:00003E3F                 sub     esp, 8
.text$mn:00003E42                 mov     [ebp+var_8], ecx
.text$mn:00003E45                 lea     eax, [ebp+var_1]
.text$mn:00003E48                 push    eax
.text$mn:00003E49                 mov     ecx, [ebp+var_8]
.text$mn:00003E4C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:00003E51                 lea     ecx, [ebp+var_1]
.text$mn:00003E54                 push    ecx
.text$mn:00003E55                 mov     edx, [ebp+arg_8]
.text$mn:00003E58                 push    edx
.text$mn:00003E59                 mov     eax, [ebp+arg_4]
.text$mn:00003E5C                 push    eax
.text$mn:00003E5D                 mov     ecx, [ebp+arg_0]
.text$mn:00003E60                 push    ecx
.text$mn:00003E61                 call    ??$_Uninitialized_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z ; std::_Uninitialized_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)
.text$mn:00003E66                 add     esp, 10h
.text$mn:00003E69                 mov     esp, ebp
.text$mn:00003E6B                 pop     ebp
.text$mn:00003E6C                 retn    0Ch
.text$mn:00003E6C ??$_Umove@PAUTreeParams@@@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEPAUTreeParams@@PAU2@00@Z endp
.text$mn:00003E6C
.text$mn:00003E6C ; ---------------------------------------------------------------------------
.text$mn:00003E6F                 align 10h
.text$mn:00003E6F _text$mn        ends
.text$mn:00003E6F
.text$mn:00003E70 ; ===========================================================================
.text$mn:00003E70
.text$mn:00003E70 ; Segment type: Pure code
.text$mn:00003E70 ; Segment permissions: Read/Execute
.text$mn:00003E70 _text$mn        segment para public 'CODE' use32
.text$mn:00003E70                 assume cs:_text$mn
.text$mn:00003E70                 ;org 3E70h
.text$mn:00003E70 ; COMDAT (pick any)
.text$mn:00003E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E70
.text$mn:00003E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E70
.text$mn:00003E70 ; Attributes: bp-based frame
.text$mn:00003E70
.text$mn:00003E70 ; struct TreeParams * __cdecl std::_Unchecked<struct TreeParams *>(struct TreeParams *)
.text$mn:00003E70                 public ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z
.text$mn:00003E70 ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z proc near
.text$mn:00003E70                                         ; CODE XREF: std::_Uninitialized_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+Bp
.text$mn:00003E70                                         ; std::_Uninitialized_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+18p ...
.text$mn:00003E70
.text$mn:00003E70 arg_0           = dword ptr  8
.text$mn:00003E70
.text$mn:00003E70                 push    ebp
.text$mn:00003E71                 mov     ebp, esp
.text$mn:00003E73                 mov     eax, [ebp+arg_0]
.text$mn:00003E76                 pop     ebp
.text$mn:00003E77                 retn
.text$mn:00003E77 ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z endp
.text$mn:00003E77
.text$mn:00003E77 _text$mn        ends
.text$mn:00003E77
.text$mn:00003E78 ; ===========================================================================
.text$mn:00003E78
.text$mn:00003E78 ; Segment type: Pure code
.text$mn:00003E78 ; Segment permissions: Read/Execute
.text$mn:00003E78 _text$mn        segment para public 'CODE' use32
.text$mn:00003E78                 assume cs:_text$mn
.text$mn:00003E78                 ;org 3E78h
.text$mn:00003E78 ; COMDAT (pick any)
.text$mn:00003E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E78
.text$mn:00003E78 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E78
.text$mn:00003E78 ; Attributes: bp-based frame
.text$mn:00003E78
.text$mn:00003E78 ; struct TreeStateNode * __cdecl std::_Unchecked<struct TreeStateNode *>(struct TreeStateNode *)
.text$mn:00003E78                 public ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z
.text$mn:00003E78 ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z proc near
.text$mn:00003E78                                         ; CODE XREF: std::_Uninitialized_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+Bp
.text$mn:00003E78                                         ; std::_Uninitialized_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+18p ...
.text$mn:00003E78
.text$mn:00003E78 arg_0           = dword ptr  8
.text$mn:00003E78
.text$mn:00003E78                 push    ebp
.text$mn:00003E79                 mov     ebp, esp
.text$mn:00003E7B                 mov     eax, [ebp+arg_0]
.text$mn:00003E7E                 pop     ebp
.text$mn:00003E7F                 retn
.text$mn:00003E7F ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z endp
.text$mn:00003E7F
.text$mn:00003E7F _text$mn        ends
.text$mn:00003E7F
.text$mn:00003E80 ; ===========================================================================
.text$mn:00003E80
.text$mn:00003E80 ; Segment type: Pure code
.text$mn:00003E80 ; Segment permissions: Read/Execute
.text$mn:00003E80 _text$mn        segment para public 'CODE' use32
.text$mn:00003E80                 assume cs:_text$mn
.text$mn:00003E80                 ;org 3E80h
.text$mn:00003E80 ; COMDAT (pick any)
.text$mn:00003E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E80
.text$mn:00003E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E80
.text$mn:00003E80 ; Attributes: bp-based frame
.text$mn:00003E80
.text$mn:00003E80 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00003E80                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00003E80 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00003E80                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+34p
.text$mn:00003E80
.text$mn:00003E80 arg_0           = dword ptr  8
.text$mn:00003E80
.text$mn:00003E80                 push    ebp
.text$mn:00003E81                 mov     ebp, esp
.text$mn:00003E83                 mov     eax, [ebp+arg_0]
.text$mn:00003E86                 pop     ebp
.text$mn:00003E87                 retn
.text$mn:00003E87 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00003E87
.text$mn:00003E87 _text$mn        ends
.text$mn:00003E87
.text$mn:00003E88 ; ===========================================================================
.text$mn:00003E88
.text$mn:00003E88 ; Segment type: Pure code
.text$mn:00003E88 ; Segment permissions: Read/Execute
.text$mn:00003E88 _text$mn        segment para public 'CODE' use32
.text$mn:00003E88                 assume cs:_text$mn
.text$mn:00003E88                 ;org 3E88h
.text$mn:00003E88 ; COMDAT (pick any)
.text$mn:00003E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E88
.text$mn:00003E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E88
.text$mn:00003E88 ; Attributes: bp-based frame
.text$mn:00003E88
.text$mn:00003E88 ; struct TreeStateNode const * __cdecl std::_Unchecked<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>)
.text$mn:00003E88                 public ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z
.text$mn:00003E88 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z proc near
.text$mn:00003E88                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+5Fp
.text$mn:00003E88                                         ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+90p
.text$mn:00003E88
.text$mn:00003E88 var_10          = dword ptr -10h
.text$mn:00003E88 var_C           = dword ptr -0Ch
.text$mn:00003E88 var_4           = dword ptr -4
.text$mn:00003E88 arg_0           = byte ptr  8
.text$mn:00003E88
.text$mn:00003E88                 push    ebp
.text$mn:00003E89                 mov     ebp, esp
.text$mn:00003E8B                 push    0FFFFFFFFh
.text$mn:00003E8D                 push    offset __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z
.text$mn:00003E92                 mov     eax, large fs:0
.text$mn:00003E98                 push    eax
.text$mn:00003E99                 push    ecx
.text$mn:00003E9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003E9F                 xor     eax, ebp
.text$mn:00003EA1                 push    eax
.text$mn:00003EA2                 lea     eax, [ebp+var_C]
.text$mn:00003EA5                 mov     large fs:0, eax
.text$mn:00003EAB                 mov     [ebp+var_4], 0
.text$mn:00003EB2                 lea     ecx, [ebp+arg_0]
.text$mn:00003EB5                 call    ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QBEPBUTreeStateNode@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Unchecked(void)
.text$mn:00003EBA                 mov     [ebp+var_10], eax
.text$mn:00003EBD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003EC4                 lea     ecx, [ebp+arg_0]
.text$mn:00003EC7                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$mn:00003ECC                 mov     eax, [ebp+var_10]
.text$mn:00003ECF                 mov     ecx, [ebp+var_C]
.text$mn:00003ED2                 mov     large fs:0, ecx
.text$mn:00003ED9                 pop     ecx
.text$mn:00003EDA                 mov     esp, ebp
.text$mn:00003EDC                 pop     ebp
.text$mn:00003EDD                 retn
.text$mn:00003EDD ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z endp
.text$mn:00003EDD
.text$mn:00003EDD ; ---------------------------------------------------------------------------
.text$mn:00003EDE                 align 10h
.text$mn:00003EDE _text$mn        ends
.text$mn:00003EDE
.text$x:00003EE0 ; ===========================================================================
.text$x:00003EE0
.text$x:00003EE0 ; Segment type: Pure code
.text$x:00003EE0 ; Segment permissions: Read/Execute
.text$x:00003EE0 _text$x         segment para public 'CODE' use32
.text$x:00003EE0                 assume cs:_text$x
.text$x:00003EE0                 ;org 3EE0h
.text$x:00003EE0 ; COMDAT (pick associative to section at 3E88)
.text$x:00003EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003EE0
.text$x:00003EE0 ; =============== S U B R O U T I N E =======================================
.text$x:00003EE0
.text$x:00003EE0
.text$x:00003EE0 __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z$0 proc near
.text$x:00003EE0                                         ; DATA XREF: .xdata$x:0000E390o
.text$x:00003EE0                 lea     ecx, [ebp+8]
.text$x:00003EE3                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00003EE3 __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z$0 endp
.text$x:00003EE3
.text$x:00003EE8
.text$x:00003EE8 ; =============== S U B R O U T I N E =======================================
.text$x:00003EE8
.text$x:00003EE8
.text$x:00003EE8 __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z proc near
.text$x:00003EE8                                         ; DATA XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>)+5o
.text$x:00003EE8
.text$x:00003EE8 arg_4           = dword ptr  8
.text$x:00003EE8
.text$x:00003EE8                 mov     edx, [esp+arg_4]
.text$x:00003EEC                 lea     eax, [edx+0Ch]
.text$x:00003EEF                 mov     ecx, [edx-8]
.text$x:00003EF2                 xor     ecx, eax
.text$x:00003EF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003EF9                 mov     eax, offset __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z
.text$x:00003EFE                 jmp     ___CxxFrameHandler3
.text$x:00003EFE __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z endp
.text$x:00003EFE
.text$x:00003EFE ; ---------------------------------------------------------------------------
.text$x:00003F03                 align 4
.text$x:00003F03 _text$x         ends
.text$x:00003F03
.text$mn:00003F04 ; ===========================================================================
.text$mn:00003F04
.text$mn:00003F04 ; Segment type: Pure code
.text$mn:00003F04 ; Segment permissions: Read/Execute
.text$mn:00003F04 _text$mn        segment para public 'CODE' use32
.text$mn:00003F04                 assume cs:_text$mn
.text$mn:00003F04                 ;org 3F04h
.text$mn:00003F04 ; COMDAT (pick any)
.text$mn:00003F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F04
.text$mn:00003F04 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F04
.text$mn:00003F04 ; Attributes: bp-based frame
.text$mn:00003F04
.text$mn:00003F04 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * __cdecl std::_Unchecked<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:00003F04                 public ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00003F04 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$mn:00003F04                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5Fp
.text$mn:00003F04                                         ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+90p
.text$mn:00003F04
.text$mn:00003F04 var_10          = dword ptr -10h
.text$mn:00003F04 var_C           = dword ptr -0Ch
.text$mn:00003F04 var_4           = dword ptr -4
.text$mn:00003F04 arg_0           = byte ptr  8
.text$mn:00003F04
.text$mn:00003F04                 push    ebp
.text$mn:00003F05                 mov     ebp, esp
.text$mn:00003F07                 push    0FFFFFFFFh
.text$mn:00003F09                 push    offset __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00003F0E                 mov     eax, large fs:0
.text$mn:00003F14                 push    eax
.text$mn:00003F15                 push    ecx
.text$mn:00003F16                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F1B                 xor     eax, ebp
.text$mn:00003F1D                 push    eax
.text$mn:00003F1E                 lea     eax, [ebp+var_C]
.text$mn:00003F21                 mov     large fs:0, eax
.text$mn:00003F27                 mov     [ebp+var_4], 0
.text$mn:00003F2E                 lea     ecx, [ebp+arg_0]
.text$mn:00003F31                 call    ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Unchecked(void)
.text$mn:00003F36                 mov     [ebp+var_10], eax
.text$mn:00003F39                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F40                 lea     ecx, [ebp+arg_0]
.text$mn:00003F43                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00003F48                 mov     eax, [ebp+var_10]
.text$mn:00003F4B                 mov     ecx, [ebp+var_C]
.text$mn:00003F4E                 mov     large fs:0, ecx
.text$mn:00003F55                 pop     ecx
.text$mn:00003F56                 mov     esp, ebp
.text$mn:00003F58                 pop     ebp
.text$mn:00003F59                 retn
.text$mn:00003F59 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$mn:00003F59
.text$mn:00003F59 ; ---------------------------------------------------------------------------
.text$mn:00003F5A                 align 4
.text$mn:00003F5A _text$mn        ends
.text$mn:00003F5A
.text$x:00003F5C ; ===========================================================================
.text$x:00003F5C
.text$x:00003F5C ; Segment type: Pure code
.text$x:00003F5C ; Segment permissions: Read/Execute
.text$x:00003F5C _text$x         segment para public 'CODE' use32
.text$x:00003F5C                 assume cs:_text$x
.text$x:00003F5C                 ;org 3F5Ch
.text$x:00003F5C ; COMDAT (pick associative to section at 3F04)
.text$x:00003F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F5C
.text$x:00003F5C ; =============== S U B R O U T I N E =======================================
.text$x:00003F5C
.text$x:00003F5C
.text$x:00003F5C __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 proc near
.text$x:00003F5C                                         ; DATA XREF: .xdata$x:0000E364o
.text$x:00003F5C                 lea     ecx, [ebp+8]
.text$x:00003F5F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003F5F __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 endp
.text$x:00003F5F
.text$x:00003F64
.text$x:00003F64 ; =============== S U B R O U T I N E =======================================
.text$x:00003F64
.text$x:00003F64
.text$x:00003F64 __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$x:00003F64                                         ; DATA XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:00003F64
.text$x:00003F64 arg_4           = dword ptr  8
.text$x:00003F64
.text$x:00003F64                 mov     edx, [esp+arg_4]
.text$x:00003F68                 lea     eax, [edx+0Ch]
.text$x:00003F6B                 mov     ecx, [edx-8]
.text$x:00003F6E                 xor     ecx, eax
.text$x:00003F70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F75                 mov     eax, offset __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$x:00003F7A                 jmp     ___CxxFrameHandler3
.text$x:00003F7A __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$x:00003F7A
.text$x:00003F7A ; ---------------------------------------------------------------------------
.text$x:00003F7F                 align 10h
.text$x:00003F7F _text$x         ends
.text$x:00003F7F
.text$mn:00003F80 ; ===========================================================================
.text$mn:00003F80
.text$mn:00003F80 ; Segment type: Pure code
.text$mn:00003F80 ; Segment permissions: Read/Execute
.text$mn:00003F80 _text$mn        segment para public 'CODE' use32
.text$mn:00003F80                 assume cs:_text$mn
.text$mn:00003F80                 ;org 3F80h
.text$mn:00003F80 ; COMDAT (pick any)
.text$mn:00003F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F80
.text$mn:00003F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F80
.text$mn:00003F80 ; Attributes: bp-based frame
.text$mn:00003F80
.text$mn:00003F80 ; struct TreeStateNode * __cdecl std::_Uninit_copy<struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &)
.text$mn:00003F80                 public ??$_Uninit_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:00003F80 ??$_Uninit_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$mn:00003F80                                         ; CODE XREF: std::_Uninitialized_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+2Ep
.text$mn:00003F80
.text$mn:00003F80 var_1           = byte ptr -1
.text$mn:00003F80 arg_0           = dword ptr  8
.text$mn:00003F80 arg_4           = dword ptr  0Ch
.text$mn:00003F80 arg_8           = dword ptr  10h
.text$mn:00003F80 arg_C           = dword ptr  14h
.text$mn:00003F80
.text$mn:00003F80                 push    ebp
.text$mn:00003F81                 mov     ebp, esp
.text$mn:00003F83                 push    ecx
.text$mn:00003F84                 mov     eax, [ebp+arg_8]
.text$mn:00003F87                 push    eax
.text$mn:00003F88                 mov     ecx, [ebp+arg_0]
.text$mn:00003F8B                 push    ecx
.text$mn:00003F8C                 call    ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeStateNode@@0@Z ; std::_Ptr_cat<TreeStateNode,TreeStateNode>(TreeStateNode *,TreeStateNode *)
.text$mn:00003F91                 add     esp, 8
.text$mn:00003F94                 mov     [ebp+var_1], al
.text$mn:00003F97                 movzx   edx, [ebp+var_1]
.text$mn:00003F9B                 push    edx
.text$mn:00003F9C                 mov     eax, [ebp+arg_C]
.text$mn:00003F9F                 push    eax
.text$mn:00003FA0                 mov     ecx, [ebp+arg_8]
.text$mn:00003FA3                 push    ecx
.text$mn:00003FA4                 mov     edx, [ebp+arg_4]
.text$mn:00003FA7                 push    edx
.text$mn:00003FA8                 mov     eax, [ebp+arg_0]
.text$mn:00003FAB                 push    eax
.text$mn:00003FAC                 call    ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003FB1                 add     esp, 14h
.text$mn:00003FB4                 mov     esp, ebp
.text$mn:00003FB6                 pop     ebp
.text$mn:00003FB7                 retn
.text$mn:00003FB7 ??$_Uninit_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$mn:00003FB7
.text$mn:00003FB7 _text$mn        ends
.text$mn:00003FB7
.text$mn:00003FB8 ; ===========================================================================
.text$mn:00003FB8
.text$mn:00003FB8 ; Segment type: Pure code
.text$mn:00003FB8 ; Segment permissions: Read/Execute
.text$mn:00003FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00003FB8                 assume cs:_text$mn
.text$mn:00003FB8                 ;org 3FB8h
.text$mn:00003FB8 ; COMDAT (pick any)
.text$mn:00003FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FB8
.text$mn:00003FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FB8
.text$mn:00003FB8 ; Attributes: bp-based frame
.text$mn:00003FB8
.text$mn:00003FB8 ; struct TreeStateNode * __cdecl std::_Uninit_copy<struct TreeStateNode *, struct TreeStateNode *, class std::allocator<struct TreeStateNode>>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00003FB8                 public ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003FB8 ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00003FB8                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+2Cp
.text$mn:00003FB8
.text$mn:00003FB8 var_14          = dword ptr -14h
.text$mn:00003FB8 var_10          = dword ptr -10h
.text$mn:00003FB8 var_C           = dword ptr -0Ch
.text$mn:00003FB8 var_4           = dword ptr -4
.text$mn:00003FB8 arg_0           = dword ptr  8
.text$mn:00003FB8 arg_4           = dword ptr  0Ch
.text$mn:00003FB8 arg_8           = dword ptr  10h
.text$mn:00003FB8 arg_C           = dword ptr  14h
.text$mn:00003FB8
.text$mn:00003FB8 ; FUNCTION CHUNK AT .text$mn:0000407F SIZE 00000009 BYTES
.text$mn:00003FB8 ; FUNCTION CHUNK AT .text$mn:0000408F SIZE 00000015 BYTES
.text$mn:00003FB8
.text$mn:00003FB8                 push    ebp
.text$mn:00003FB9                 mov     ebp, esp
.text$mn:00003FBB                 push    0FFFFFFFFh
.text$mn:00003FBD                 push    offset __ehhandler$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00003FC2                 mov     eax, large fs:0
.text$mn:00003FC8                 push    eax
.text$mn:00003FC9                 push    ecx
.text$mn:00003FCA                 push    ecx
.text$mn:00003FCB                 push    ebx
.text$mn:00003FCC                 push    esi
.text$mn:00003FCD                 push    edi
.text$mn:00003FCE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003FD3                 xor     eax, ebp
.text$mn:00003FD5                 push    eax
.text$mn:00003FD6                 lea     eax, [ebp+var_C]
.text$mn:00003FD9                 mov     large fs:0, eax
.text$mn:00003FDF                 mov     [ebp+var_10], esp
.text$mn:00003FE2                 push    174h            ; unsigned int
.text$mn:00003FE7                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003FEC                 mov     eax, [ebp+arg_4]
.text$mn:00003FEF                 push    eax             ; int
.text$mn:00003FF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003FF3                 push    ecx             ; int
.text$mn:00003FF4                 call    ??$_Debug_range@PAUTreeStateNode@@@std@@YAXPAUTreeStateNode@@0PB_WI@Z ; std::_Debug_range<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint)
.text$mn:00003FF9                 add     esp, 10h
.text$mn:00003FFC                 push    175h            ; unsigned int
.text$mn:00004001                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004006                 mov     edx, [ebp+arg_8]
.text$mn:00004009                 push    edx             ; int
.text$mn:0000400A                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode *,wchar_t const *,uint)
.text$mn:0000400F                 add     esp, 0Ch
.text$mn:00004012                 mov     eax, [ebp+arg_8]
.text$mn:00004015                 mov     [ebp+var_14], eax
.text$mn:00004018                 mov     [ebp+var_4], 0
.text$mn:0000401F                 jmp     short loc_4033
.text$mn:00004021 ; ---------------------------------------------------------------------------
.text$mn:00004021
.text$mn:00004021 loc_4021:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00004021                 mov     ecx, [ebp+arg_8]
.text$mn:00004024                 add     ecx, 4Ch ; 'L'
.text$mn:00004027                 mov     [ebp+arg_8], ecx
.text$mn:0000402A                 mov     edx, [ebp+arg_0]
.text$mn:0000402D                 add     edx, 4Ch ; 'L'
.text$mn:00004030                 mov     [ebp+arg_0], edx
.text$mn:00004033
.text$mn:00004033 loc_4033:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00004033                 mov     eax, [ebp+arg_0]
.text$mn:00004036                 cmp     eax, [ebp+arg_4]
.text$mn:00004039                 jz      short loc_404D
.text$mn:0000403B                 mov     ecx, [ebp+arg_0]
.text$mn:0000403E                 push    ecx
.text$mn:0000403F                 mov     edx, [ebp+arg_8]
.text$mn:00004042                 push    edx
.text$mn:00004043                 mov     ecx, [ebp+arg_C]
.text$mn:00004046                 call    ??$construct@UTreeStateNode@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)
.text$mn:0000404B                 jmp     short loc_4021
.text$mn:0000404D ; ---------------------------------------------------------------------------
.text$mn:0000404D
.text$mn:0000404D loc_404D:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:0000404D                 jmp     short loc_407F
.text$mn:0000404D ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000404D
.text$mn:0000404F
.text$mn:0000404F ; =============== S U B R O U T I N E =======================================
.text$mn:0000404F
.text$mn:0000404F ; Attributes: noreturn
.text$mn:0000404F
.text$mn:0000404F __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000404F                                         ; DATA XREF: .xdata$x:0000E4F8o
.text$mn:0000404F                 jmp     short loc_405A
.text$mn:00004051 ; ---------------------------------------------------------------------------
.text$mn:00004051
.text$mn:00004051 loc_4051:                               ; CODE XREF: __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00004051                 mov     eax, [ebp-14h]
.text$mn:00004054                 add     eax, 4Ch ; 'L'
.text$mn:00004057                 mov     [ebp-14h], eax
.text$mn:0000405A
.text$mn:0000405A loc_405A:                               ; CODE XREF: __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000405A                 mov     ecx, [ebp-14h]
.text$mn:0000405D                 cmp     ecx, [ebp+10h]
.text$mn:00004060                 jz      short loc_4070
.text$mn:00004062                 mov     edx, [ebp-14h]
.text$mn:00004065                 push    edx
.text$mn:00004066                 mov     ecx, [ebp+14h]
.text$mn:00004069                 call    ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(TreeStateNode *)
.text$mn:0000406E                 jmp     short loc_4051
.text$mn:00004070 ; ---------------------------------------------------------------------------
.text$mn:00004070
.text$mn:00004070 loc_4070:                               ; CODE XREF: __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00004070                 push    0
.text$mn:00004072                 push    0
.text$mn:00004074                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00004074 __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00004074
.text$mn:00004079 ; ---------------------------------------------------------------------------
.text$mn:00004079                 mov     eax, offset $LN13_1
.text$mn:0000407E                 retn
.text$mn:0000407F ; ---------------------------------------------------------------------------
.text$mn:0000407F ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000407F
.text$mn:0000407F loc_407F:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag):loc_404Dj
.text$mn:0000407F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004086                 jmp     short loc_408F
.text$mn:00004086 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004088
.text$mn:00004088 ; =============== S U B R O U T I N E =======================================
.text$mn:00004088
.text$mn:00004088
.text$mn:00004088 $LN13_1         proc near               ; DATA XREF: .text$mn:00004079o
.text$mn:00004088                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00004088 $LN13_1         endp ; sp-analysis failed
.text$mn:00004088
.text$mn:0000408F ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000408F
.text$mn:0000408F loc_408F:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000408F                 mov     eax, [ebp+arg_8]
.text$mn:00004092                 mov     ecx, [ebp+var_C]
.text$mn:00004095                 mov     large fs:0, ecx
.text$mn:0000409C                 pop     ecx
.text$mn:0000409D                 pop     edi
.text$mn:0000409E                 pop     esi
.text$mn:0000409F                 pop     ebx
.text$mn:000040A0                 mov     esp, ebp
.text$mn:000040A2                 pop     ebp
.text$mn:000040A3                 retn
.text$mn:000040A3 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000040A3 _text$mn        ends
.text$mn:000040A3
.text$x:000040A4 ; ===========================================================================
.text$x:000040A4
.text$x:000040A4 ; Segment type: Pure code
.text$x:000040A4 ; Segment permissions: Read/Execute
.text$x:000040A4 _text$x         segment para public 'CODE' use32
.text$x:000040A4                 assume cs:_text$x
.text$x:000040A4                 ;org 40A4h
.text$x:000040A4 ; COMDAT (pick associative to section at 3FB8)
.text$x:000040A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000040A4
.text$x:000040A4 ; =============== S U B R O U T I N E =======================================
.text$x:000040A4
.text$x:000040A4
.text$x:000040A4 __ehhandler$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000040A4                                         ; DATA XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000040A4
.text$x:000040A4 arg_4           = dword ptr  8
.text$x:000040A4
.text$x:000040A4                 mov     edx, [esp+arg_4]
.text$x:000040A8                 lea     eax, [edx+0Ch]
.text$x:000040AB                 mov     ecx, [edx-18h]
.text$x:000040AE                 xor     ecx, eax
.text$x:000040B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040B5                 mov     eax, offset __ehfuncinfo$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000040BA                 jmp     ___CxxFrameHandler3
.text$x:000040BA __ehhandler$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000040BA
.text$x:000040BA ; ---------------------------------------------------------------------------
.text$x:000040BF                 align 10h
.text$x:000040BF _text$x         ends
.text$x:000040BF
.text$mn:000040C0 ; ===========================================================================
.text$mn:000040C0
.text$mn:000040C0 ; Segment type: Pure code
.text$mn:000040C0 ; Segment permissions: Read/Execute
.text$mn:000040C0 _text$mn        segment para public 'CODE' use32
.text$mn:000040C0                 assume cs:_text$mn
.text$mn:000040C0                 ;org 40C0h
.text$mn:000040C0 ; COMDAT (pick any)
.text$mn:000040C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040C0
.text$mn:000040C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040C0
.text$mn:000040C0 ; Attributes: bp-based frame
.text$mn:000040C0
.text$mn:000040C0 ; struct TreeStateNode * __cdecl std::_Uninit_copy<struct TreeStateNode const *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(struct TreeStateNode const *, struct TreeStateNode const *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &)
.text$mn:000040C0                 public ??$_Uninit_copy@PBUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:000040C0 ??$_Uninit_copy@PBUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$mn:000040C0                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+9Fp
.text$mn:000040C0
.text$mn:000040C0 var_1           = byte ptr -1
.text$mn:000040C0 arg_0           = dword ptr  8
.text$mn:000040C0 arg_4           = dword ptr  0Ch
.text$mn:000040C0 arg_8           = dword ptr  10h
.text$mn:000040C0 arg_C           = dword ptr  14h
.text$mn:000040C0
.text$mn:000040C0                 push    ebp
.text$mn:000040C1                 mov     ebp, esp
.text$mn:000040C3                 push    ecx
.text$mn:000040C4                 mov     eax, [ebp+arg_8]
.text$mn:000040C7                 push    eax
.text$mn:000040C8                 mov     ecx, [ebp+arg_0]
.text$mn:000040CB                 push    ecx
.text$mn:000040CC                 call    ??$_Ptr_cat@UTreeStateNode@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUTreeStateNode@@PAU2@@Z ; std::_Ptr_cat<TreeStateNode,TreeStateNode>(TreeStateNode const *,TreeStateNode *)
.text$mn:000040D1                 add     esp, 8
.text$mn:000040D4                 mov     [ebp+var_1], al
.text$mn:000040D7                 movzx   edx, [ebp+var_1]
.text$mn:000040DB                 push    edx
.text$mn:000040DC                 mov     eax, [ebp+arg_C]
.text$mn:000040DF                 push    eax
.text$mn:000040E0                 mov     ecx, [ebp+arg_8]
.text$mn:000040E3                 push    ecx
.text$mn:000040E4                 mov     edx, [ebp+arg_4]
.text$mn:000040E7                 push    edx
.text$mn:000040E8                 mov     eax, [ebp+arg_0]
.text$mn:000040EB                 push    eax
.text$mn:000040EC                 call    ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000040F1                 add     esp, 14h
.text$mn:000040F4                 mov     esp, ebp
.text$mn:000040F6                 pop     ebp
.text$mn:000040F7                 retn
.text$mn:000040F7 ??$_Uninit_copy@PBUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$mn:000040F7
.text$mn:000040F7 _text$mn        ends
.text$mn:000040F7
.text$mn:000040F8 ; ===========================================================================
.text$mn:000040F8
.text$mn:000040F8 ; Segment type: Pure code
.text$mn:000040F8 ; Segment permissions: Read/Execute
.text$mn:000040F8 _text$mn        segment para public 'CODE' use32
.text$mn:000040F8                 assume cs:_text$mn
.text$mn:000040F8                 ;org 40F8h
.text$mn:000040F8 ; COMDAT (pick any)
.text$mn:000040F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040F8
.text$mn:000040F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000040F8
.text$mn:000040F8 ; Attributes: bp-based frame
.text$mn:000040F8
.text$mn:000040F8 ; struct TreeStateNode * __cdecl std::_Uninit_copy<struct TreeStateNode const *, struct TreeStateNode *, class std::allocator<struct TreeStateNode>>(struct TreeStateNode const *, struct TreeStateNode const *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000040F8                 public ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000040F8 ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000040F8                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+2Cp
.text$mn:000040F8
.text$mn:000040F8 var_14          = dword ptr -14h
.text$mn:000040F8 var_10          = dword ptr -10h
.text$mn:000040F8 var_C           = dword ptr -0Ch
.text$mn:000040F8 var_4           = dword ptr -4
.text$mn:000040F8 arg_0           = dword ptr  8
.text$mn:000040F8 arg_4           = dword ptr  0Ch
.text$mn:000040F8 arg_8           = dword ptr  10h
.text$mn:000040F8 arg_C           = dword ptr  14h
.text$mn:000040F8
.text$mn:000040F8 ; FUNCTION CHUNK AT .text$mn:000041BF SIZE 00000009 BYTES
.text$mn:000040F8 ; FUNCTION CHUNK AT .text$mn:000041CF SIZE 00000015 BYTES
.text$mn:000040F8
.text$mn:000040F8                 push    ebp
.text$mn:000040F9                 mov     ebp, esp
.text$mn:000040FB                 push    0FFFFFFFFh
.text$mn:000040FD                 push    offset __ehhandler$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004102                 mov     eax, large fs:0
.text$mn:00004108                 push    eax
.text$mn:00004109                 push    ecx
.text$mn:0000410A                 push    ecx
.text$mn:0000410B                 push    ebx
.text$mn:0000410C                 push    esi
.text$mn:0000410D                 push    edi
.text$mn:0000410E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004113                 xor     eax, ebp
.text$mn:00004115                 push    eax
.text$mn:00004116                 lea     eax, [ebp+var_C]
.text$mn:00004119                 mov     large fs:0, eax
.text$mn:0000411F                 mov     [ebp+var_10], esp
.text$mn:00004122                 push    174h            ; unsigned int
.text$mn:00004127                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000412C                 mov     eax, [ebp+arg_4]
.text$mn:0000412F                 push    eax             ; int
.text$mn:00004130                 mov     ecx, [ebp+arg_0]
.text$mn:00004133                 push    ecx             ; int
.text$mn:00004134                 call    ??$_Debug_range@PBUTreeStateNode@@@std@@YAXPBUTreeStateNode@@0PB_WI@Z ; std::_Debug_range<TreeStateNode const *>(TreeStateNode const *,TreeStateNode const *,wchar_t const *,uint)
.text$mn:00004139                 add     esp, 10h
.text$mn:0000413C                 push    175h            ; unsigned int
.text$mn:00004141                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004146                 mov     edx, [ebp+arg_8]
.text$mn:00004149                 push    edx             ; int
.text$mn:0000414A                 call    ??$_Debug_pointer@UTreeStateNode@@@std@@YAXPAUTreeStateNode@@PB_WI@Z ; std::_Debug_pointer<TreeStateNode>(TreeStateNode *,wchar_t const *,uint)
.text$mn:0000414F                 add     esp, 0Ch
.text$mn:00004152                 mov     eax, [ebp+arg_8]
.text$mn:00004155                 mov     [ebp+var_14], eax
.text$mn:00004158                 mov     [ebp+var_4], 0
.text$mn:0000415F                 jmp     short loc_4173
.text$mn:00004161 ; ---------------------------------------------------------------------------
.text$mn:00004161
.text$mn:00004161 loc_4161:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00004161                 mov     ecx, [ebp+arg_8]
.text$mn:00004164                 add     ecx, 4Ch ; 'L'
.text$mn:00004167                 mov     [ebp+arg_8], ecx
.text$mn:0000416A                 mov     edx, [ebp+arg_0]
.text$mn:0000416D                 add     edx, 4Ch ; 'L'
.text$mn:00004170                 mov     [ebp+arg_0], edx
.text$mn:00004173
.text$mn:00004173 loc_4173:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00004173                 mov     eax, [ebp+arg_0]
.text$mn:00004176                 cmp     eax, [ebp+arg_4]
.text$mn:00004179                 jz      short loc_418D
.text$mn:0000417B                 mov     ecx, [ebp+arg_0]
.text$mn:0000417E                 push    ecx
.text$mn:0000417F                 mov     edx, [ebp+arg_8]
.text$mn:00004182                 push    edx
.text$mn:00004183                 mov     ecx, [ebp+arg_C]
.text$mn:00004186                 call    ??$construct@UTreeStateNode@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(TreeStateNode *,TreeStateNode const &)
.text$mn:0000418B                 jmp     short loc_4161
.text$mn:0000418D ; ---------------------------------------------------------------------------
.text$mn:0000418D
.text$mn:0000418D loc_418D:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:0000418D                 jmp     short loc_41BF
.text$mn:0000418D ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000418D
.text$mn:0000418F
.text$mn:0000418F ; =============== S U B R O U T I N E =======================================
.text$mn:0000418F
.text$mn:0000418F ; Attributes: noreturn
.text$mn:0000418F
.text$mn:0000418F __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000418F                                         ; DATA XREF: .xdata$x:0000E4A0o
.text$mn:0000418F                 jmp     short loc_419A
.text$mn:00004191 ; ---------------------------------------------------------------------------
.text$mn:00004191
.text$mn:00004191 loc_4191:                               ; CODE XREF: __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00004191                 mov     eax, [ebp-14h]
.text$mn:00004194                 add     eax, 4Ch ; 'L'
.text$mn:00004197                 mov     [ebp-14h], eax
.text$mn:0000419A
.text$mn:0000419A loc_419A:                               ; CODE XREF: __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000419A                 mov     ecx, [ebp-14h]
.text$mn:0000419D                 cmp     ecx, [ebp+10h]
.text$mn:000041A0                 jz      short loc_41B0
.text$mn:000041A2                 mov     edx, [ebp-14h]
.text$mn:000041A5                 push    edx
.text$mn:000041A6                 mov     ecx, [ebp+14h]
.text$mn:000041A9                 call    ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(TreeStateNode *)
.text$mn:000041AE                 jmp     short loc_4191
.text$mn:000041B0 ; ---------------------------------------------------------------------------
.text$mn:000041B0
.text$mn:000041B0 loc_41B0:                               ; CODE XREF: __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:000041B0                 push    0
.text$mn:000041B2                 push    0
.text$mn:000041B4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000041B4 __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:000041B4
.text$mn:000041B9 ; ---------------------------------------------------------------------------
.text$mn:000041B9                 mov     eax, offset $LN13_0
.text$mn:000041BE                 retn
.text$mn:000041BF ; ---------------------------------------------------------------------------
.text$mn:000041BF ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000041BF
.text$mn:000041BF loc_41BF:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag):loc_418Dj
.text$mn:000041BF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041C6                 jmp     short loc_41CF
.text$mn:000041C6 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000041C8
.text$mn:000041C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000041C8
.text$mn:000041C8
.text$mn:000041C8 $LN13_0         proc near               ; DATA XREF: .text$mn:000041B9o
.text$mn:000041C8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000041C8 $LN13_0         endp ; sp-analysis failed
.text$mn:000041C8
.text$mn:000041CF ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000041CF
.text$mn:000041CF loc_41CF:                               ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:000041CF                 mov     eax, [ebp+arg_8]
.text$mn:000041D2                 mov     ecx, [ebp+var_C]
.text$mn:000041D5                 mov     large fs:0, ecx
.text$mn:000041DC                 pop     ecx
.text$mn:000041DD                 pop     edi
.text$mn:000041DE                 pop     esi
.text$mn:000041DF                 pop     ebx
.text$mn:000041E0                 mov     esp, ebp
.text$mn:000041E2                 pop     ebp
.text$mn:000041E3                 retn
.text$mn:000041E3 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000041E3 _text$mn        ends
.text$mn:000041E3
.text$x:000041E4 ; ===========================================================================
.text$x:000041E4
.text$x:000041E4 ; Segment type: Pure code
.text$x:000041E4 ; Segment permissions: Read/Execute
.text$x:000041E4 _text$x         segment para public 'CODE' use32
.text$x:000041E4                 assume cs:_text$x
.text$x:000041E4                 ;org 41E4h
.text$x:000041E4 ; COMDAT (pick associative to section at 40F8)
.text$x:000041E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000041E4
.text$x:000041E4 ; =============== S U B R O U T I N E =======================================
.text$x:000041E4
.text$x:000041E4
.text$x:000041E4 __ehhandler$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000041E4                                         ; DATA XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000041E4
.text$x:000041E4 arg_4           = dword ptr  8
.text$x:000041E4
.text$x:000041E4                 mov     edx, [esp+arg_4]
.text$x:000041E8                 lea     eax, [edx+0Ch]
.text$x:000041EB                 mov     ecx, [edx-18h]
.text$x:000041EE                 xor     ecx, eax
.text$x:000041F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041F5                 mov     eax, offset __ehfuncinfo$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000041FA                 jmp     ___CxxFrameHandler3
.text$x:000041FA __ehhandler$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000041FA
.text$x:000041FA ; ---------------------------------------------------------------------------
.text$x:000041FF                 align 10h
.text$x:000041FF _text$x         ends
.text$x:000041FF
.text$mn:00004200 ; ===========================================================================
.text$mn:00004200
.text$mn:00004200 ; Segment type: Pure code
.text$mn:00004200 ; Segment permissions: Read/Execute
.text$mn:00004200 _text$mn        segment para public 'CODE' use32
.text$mn:00004200                 assume cs:_text$mn
.text$mn:00004200                 ;org 4200h
.text$mn:00004200 ; COMDAT (pick any)
.text$mn:00004200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004200
.text$mn:00004200 ; =============== S U B R O U T I N E =======================================
.text$mn:00004200
.text$mn:00004200 ; Attributes: bp-based frame
.text$mn:00004200
.text$mn:00004200 ; int __cdecl std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00004200                 public ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00004200 ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00004200                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+9Fp
.text$mn:00004200
.text$mn:00004200 var_1           = byte ptr -1
.text$mn:00004200 arg_0           = dword ptr  8
.text$mn:00004200 arg_4           = dword ptr  0Ch
.text$mn:00004200 arg_8           = dword ptr  10h
.text$mn:00004200 arg_C           = dword ptr  14h
.text$mn:00004200
.text$mn:00004200                 push    ebp
.text$mn:00004201                 mov     ebp, esp
.text$mn:00004203                 push    ecx
.text$mn:00004204                 mov     eax, [ebp+arg_8]
.text$mn:00004207                 push    eax
.text$mn:00004208                 mov     ecx, [ebp+arg_0]
.text$mn:0000420B                 push    ecx
.text$mn:0000420C                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004211                 add     esp, 8
.text$mn:00004214                 mov     [ebp+var_1], al
.text$mn:00004217                 movzx   edx, [ebp+var_1]
.text$mn:0000421B                 push    edx
.text$mn:0000421C                 mov     eax, [ebp+arg_C]
.text$mn:0000421F                 push    eax             ; int
.text$mn:00004220                 mov     ecx, [ebp+arg_8]
.text$mn:00004223                 push    ecx             ; void *
.text$mn:00004224                 mov     edx, [ebp+arg_4]
.text$mn:00004227                 push    edx             ; int
.text$mn:00004228                 mov     eax, [ebp+arg_0]
.text$mn:0000422B                 push    eax             ; int
.text$mn:0000422C                 call    ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004231                 add     esp, 14h
.text$mn:00004234                 mov     esp, ebp
.text$mn:00004236                 pop     ebp
.text$mn:00004237                 retn
.text$mn:00004237 ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00004237
.text$mn:00004237 _text$mn        ends
.text$mn:00004237
.text$mn:00004238 ; ===========================================================================
.text$mn:00004238
.text$mn:00004238 ; Segment type: Pure code
.text$mn:00004238 ; Segment permissions: Read/Execute
.text$mn:00004238 _text$mn        segment para public 'CODE' use32
.text$mn:00004238                 assume cs:_text$mn
.text$mn:00004238                 ;org 4238h
.text$mn:00004238 ; COMDAT (pick any)
.text$mn:00004238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004238
.text$mn:00004238 ; =============== S U B R O U T I N E =======================================
.text$mn:00004238
.text$mn:00004238 ; Attributes: bp-based frame
.text$mn:00004238
.text$mn:00004238 ; int __cdecl std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(int, int, void *, int)
.text$mn:00004238                 public ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004238 ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004238                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Cp
.text$mn:00004238
.text$mn:00004238 var_14          = dword ptr -14h
.text$mn:00004238 var_10          = dword ptr -10h
.text$mn:00004238 var_C           = dword ptr -0Ch
.text$mn:00004238 var_4           = dword ptr -4
.text$mn:00004238 arg_0           = dword ptr  8
.text$mn:00004238 arg_4           = dword ptr  0Ch
.text$mn:00004238 arg_8           = dword ptr  10h
.text$mn:00004238 arg_C           = dword ptr  14h
.text$mn:00004238
.text$mn:00004238 ; FUNCTION CHUNK AT .text$mn:000042FF SIZE 00000009 BYTES
.text$mn:00004238 ; FUNCTION CHUNK AT .text$mn:0000430F SIZE 00000015 BYTES
.text$mn:00004238
.text$mn:00004238                 push    ebp
.text$mn:00004239                 mov     ebp, esp
.text$mn:0000423B                 push    0FFFFFFFFh
.text$mn:0000423D                 push    offset __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004242                 mov     eax, large fs:0
.text$mn:00004248                 push    eax
.text$mn:00004249                 push    ecx
.text$mn:0000424A                 push    ecx
.text$mn:0000424B                 push    ebx
.text$mn:0000424C                 push    esi
.text$mn:0000424D                 push    edi
.text$mn:0000424E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004253                 xor     eax, ebp
.text$mn:00004255                 push    eax
.text$mn:00004256                 lea     eax, [ebp+var_C]
.text$mn:00004259                 mov     large fs:0, eax
.text$mn:0000425F                 mov     [ebp+var_10], esp
.text$mn:00004262                 push    174h            ; unsigned int
.text$mn:00004267                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000426C                 mov     eax, [ebp+arg_4]
.text$mn:0000426F                 push    eax             ; int
.text$mn:00004270                 mov     ecx, [ebp+arg_0]
.text$mn:00004273                 push    ecx             ; int
.text$mn:00004274                 call    ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:00004279                 add     esp, 10h
.text$mn:0000427C                 push    175h            ; unsigned int
.text$mn:00004281                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004286                 mov     edx, [ebp+arg_8]
.text$mn:00004289                 push    edx             ; int
.text$mn:0000428A                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:0000428F                 add     esp, 0Ch
.text$mn:00004292                 mov     eax, [ebp+arg_8]
.text$mn:00004295                 mov     [ebp+var_14], eax
.text$mn:00004298                 mov     [ebp+var_4], 0
.text$mn:0000429F                 jmp     short loc_42B3
.text$mn:000042A1 ; ---------------------------------------------------------------------------
.text$mn:000042A1
.text$mn:000042A1 loc_42A1:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:000042A1                 mov     ecx, [ebp+arg_8]
.text$mn:000042A4                 add     ecx, 1Ch
.text$mn:000042A7                 mov     [ebp+arg_8], ecx
.text$mn:000042AA                 mov     edx, [ebp+arg_0]
.text$mn:000042AD                 add     edx, 1Ch
.text$mn:000042B0                 mov     [ebp+arg_0], edx
.text$mn:000042B3
.text$mn:000042B3 loc_42B3:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:000042B3                 mov     eax, [ebp+arg_0]
.text$mn:000042B6                 cmp     eax, [ebp+arg_4]
.text$mn:000042B9                 jz      short loc_42CD
.text$mn:000042BB                 mov     ecx, [ebp+arg_0]
.text$mn:000042BE                 push    ecx             ; int
.text$mn:000042BF                 mov     edx, [ebp+arg_8]
.text$mn:000042C2                 push    edx             ; void *
.text$mn:000042C3                 mov     ecx, [ebp+arg_C]
.text$mn:000042C6                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000042CB                 jmp     short loc_42A1
.text$mn:000042CD ; ---------------------------------------------------------------------------
.text$mn:000042CD
.text$mn:000042CD loc_42CD:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:000042CD                 jmp     short loc_42FF
.text$mn:000042CD ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000042CD
.text$mn:000042CF
.text$mn:000042CF ; =============== S U B R O U T I N E =======================================
.text$mn:000042CF
.text$mn:000042CF ; Attributes: noreturn
.text$mn:000042CF
.text$mn:000042CF __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:000042CF                                         ; DATA XREF: .xdata$x:0000E448o
.text$mn:000042CF                 jmp     short loc_42DA
.text$mn:000042D1 ; ---------------------------------------------------------------------------
.text$mn:000042D1
.text$mn:000042D1 loc_42D1:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:000042D1                 mov     eax, [ebp-14h]
.text$mn:000042D4                 add     eax, 1Ch
.text$mn:000042D7                 mov     [ebp-14h], eax
.text$mn:000042DA
.text$mn:000042DA loc_42DA:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:000042DA                 mov     ecx, [ebp-14h]
.text$mn:000042DD                 cmp     ecx, [ebp+10h]
.text$mn:000042E0                 jz      short loc_42F0
.text$mn:000042E2                 mov     edx, [ebp-14h]
.text$mn:000042E5                 push    edx
.text$mn:000042E6                 mov     ecx, [ebp+14h]
.text$mn:000042E9                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000042EE                 jmp     short loc_42D1
.text$mn:000042F0 ; ---------------------------------------------------------------------------
.text$mn:000042F0
.text$mn:000042F0 loc_42F0:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:000042F0                 push    0
.text$mn:000042F2                 push    0
.text$mn:000042F4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000042F4 __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:000042F4
.text$mn:000042F9 ; ---------------------------------------------------------------------------
.text$mn:000042F9                 mov     eax, offset $LN13
.text$mn:000042FE                 retn
.text$mn:000042FF ; ---------------------------------------------------------------------------
.text$mn:000042FF ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000042FF
.text$mn:000042FF loc_42FF:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag):loc_42CDj
.text$mn:000042FF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004306                 jmp     short loc_430F
.text$mn:00004306 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004308
.text$mn:00004308 ; =============== S U B R O U T I N E =======================================
.text$mn:00004308
.text$mn:00004308
.text$mn:00004308 $LN13           proc near               ; DATA XREF: .text$mn:000042F9o
.text$mn:00004308                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00004308 $LN13           endp ; sp-analysis failed
.text$mn:00004308
.text$mn:0000430F ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000430F
.text$mn:0000430F loc_430F:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000430F                 mov     eax, [ebp+arg_8]
.text$mn:00004312                 mov     ecx, [ebp+var_C]
.text$mn:00004315                 mov     large fs:0, ecx
.text$mn:0000431C                 pop     ecx
.text$mn:0000431D                 pop     edi
.text$mn:0000431E                 pop     esi
.text$mn:0000431F                 pop     ebx
.text$mn:00004320                 mov     esp, ebp
.text$mn:00004322                 pop     ebp
.text$mn:00004323                 retn
.text$mn:00004323 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004323 _text$mn        ends
.text$mn:00004323
.text$x:00004324 ; ===========================================================================
.text$x:00004324
.text$x:00004324 ; Segment type: Pure code
.text$x:00004324 ; Segment permissions: Read/Execute
.text$x:00004324 _text$x         segment para public 'CODE' use32
.text$x:00004324                 assume cs:_text$x
.text$x:00004324                 ;org 4324h
.text$x:00004324 ; COMDAT (pick associative to section at 4238)
.text$x:00004324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004324
.text$x:00004324 ; =============== S U B R O U T I N E =======================================
.text$x:00004324
.text$x:00004324
.text$x:00004324 __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00004324                                         ; DATA XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00004324
.text$x:00004324 arg_4           = dword ptr  8
.text$x:00004324
.text$x:00004324                 mov     edx, [esp+arg_4]
.text$x:00004328                 lea     eax, [edx+0Ch]
.text$x:0000432B                 mov     ecx, [edx-18h]
.text$x:0000432E                 xor     ecx, eax
.text$x:00004330                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004335                 mov     eax, offset __ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:0000433A                 jmp     ___CxxFrameHandler3
.text$x:0000433A __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:0000433A
.text$x:0000433A ; ---------------------------------------------------------------------------
.text$x:0000433F                 align 10h
.text$x:0000433F _text$x         ends
.text$x:0000433F
.text$mn:00004340 ; ===========================================================================
.text$mn:00004340
.text$mn:00004340 ; Segment type: Pure code
.text$mn:00004340 ; Segment permissions: Read/Execute
.text$mn:00004340 _text$mn        segment para public 'CODE' use32
.text$mn:00004340                 assume cs:_text$mn
.text$mn:00004340                 ;org 4340h
.text$mn:00004340 ; COMDAT (pick any)
.text$mn:00004340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004340
.text$mn:00004340 ; =============== S U B R O U T I N E =======================================
.text$mn:00004340
.text$mn:00004340 ; Attributes: bp-based frame
.text$mn:00004340
.text$mn:00004340 ; struct TreeParams * __cdecl std::_Uninit_move<struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>>>(struct TreeParams *, struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> &)
.text$mn:00004340                 public ??$_Uninit_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z
.text$mn:00004340 ??$_Uninit_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z proc near
.text$mn:00004340                                         ; CODE XREF: std::_Uninitialized_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+2Ep
.text$mn:00004340
.text$mn:00004340 var_1           = byte ptr -1
.text$mn:00004340 arg_0           = dword ptr  8
.text$mn:00004340 arg_4           = dword ptr  0Ch
.text$mn:00004340 arg_8           = dword ptr  10h
.text$mn:00004340 arg_C           = dword ptr  14h
.text$mn:00004340
.text$mn:00004340                 push    ebp
.text$mn:00004341                 mov     ebp, esp
.text$mn:00004343                 push    ecx
.text$mn:00004344                 mov     eax, [ebp+arg_8]
.text$mn:00004347                 push    eax
.text$mn:00004348                 mov     ecx, [ebp+arg_0]
.text$mn:0000434B                 push    ecx
.text$mn:0000434C                 call    ??$_Ptr_cat@UTreeParams@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTreeParams@@0@Z ; std::_Ptr_cat<TreeParams,TreeParams>(TreeParams *,TreeParams *)
.text$mn:00004351                 add     esp, 8
.text$mn:00004354                 mov     [ebp+var_1], al
.text$mn:00004357                 movzx   edx, [ebp+var_1]
.text$mn:0000435B                 push    edx
.text$mn:0000435C                 mov     eax, [ebp+arg_0]
.text$mn:0000435F                 push    eax
.text$mn:00004360                 call    ??$_Val_type@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z ; std::_Val_type<TreeParams *>(TreeParams *)
.text$mn:00004365                 add     esp, 4
.text$mn:00004368                 push    eax
.text$mn:00004369                 mov     ecx, [ebp+arg_C]
.text$mn:0000436C                 push    ecx
.text$mn:0000436D                 mov     edx, [ebp+arg_8]
.text$mn:00004370                 push    edx
.text$mn:00004371                 mov     eax, [ebp+arg_4]
.text$mn:00004374                 push    eax
.text$mn:00004375                 mov     ecx, [ebp+arg_0]
.text$mn:00004378                 push    ecx
.text$mn:00004379                 call    ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000437E                 add     esp, 18h
.text$mn:00004381                 mov     esp, ebp
.text$mn:00004383                 pop     ebp
.text$mn:00004384                 retn
.text$mn:00004384 ??$_Uninit_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z endp
.text$mn:00004384
.text$mn:00004384 ; ---------------------------------------------------------------------------
.text$mn:00004385                 align 4
.text$mn:00004385 _text$mn        ends
.text$mn:00004385
.text$mn:00004388 ; ===========================================================================
.text$mn:00004388
.text$mn:00004388 ; Segment type: Pure code
.text$mn:00004388 ; Segment permissions: Read/Execute
.text$mn:00004388 _text$mn        segment para public 'CODE' use32
.text$mn:00004388                 assume cs:_text$mn
.text$mn:00004388                 ;org 4388h
.text$mn:00004388 ; COMDAT (pick any)
.text$mn:00004388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004388
.text$mn:00004388 ; =============== S U B R O U T I N E =======================================
.text$mn:00004388
.text$mn:00004388 ; Attributes: bp-based frame
.text$mn:00004388
.text$mn:00004388 ; struct TreeParams * __cdecl std::_Uninit_move<struct TreeParams *, struct TreeParams *, class std::allocator<struct TreeParams>, struct TreeParams>(struct TreeParams *, struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> &, struct TreeParams *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004388                 public ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004388 ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004388                                         ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+39p
.text$mn:00004388
.text$mn:00004388 var_14          = dword ptr -14h
.text$mn:00004388 var_10          = dword ptr -10h
.text$mn:00004388 var_C           = dword ptr -0Ch
.text$mn:00004388 var_4           = dword ptr -4
.text$mn:00004388 arg_0           = dword ptr  8
.text$mn:00004388 arg_4           = dword ptr  0Ch
.text$mn:00004388 arg_8           = dword ptr  10h
.text$mn:00004388 arg_C           = dword ptr  14h
.text$mn:00004388
.text$mn:00004388 ; FUNCTION CHUNK AT .text$mn:0000444F SIZE 00000009 BYTES
.text$mn:00004388 ; FUNCTION CHUNK AT .text$mn:0000445F SIZE 00000015 BYTES
.text$mn:00004388
.text$mn:00004388                 push    ebp
.text$mn:00004389                 mov     ebp, esp
.text$mn:0000438B                 push    0FFFFFFFFh
.text$mn:0000438D                 push    offset __ehhandler$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004392                 mov     eax, large fs:0
.text$mn:00004398                 push    eax
.text$mn:00004399                 push    ecx
.text$mn:0000439A                 push    ecx
.text$mn:0000439B                 push    ebx
.text$mn:0000439C                 push    esi
.text$mn:0000439D                 push    edi
.text$mn:0000439E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000043A3                 xor     eax, ebp
.text$mn:000043A5                 push    eax
.text$mn:000043A6                 lea     eax, [ebp+var_C]
.text$mn:000043A9                 mov     large fs:0, eax
.text$mn:000043AF                 mov     [ebp+var_10], esp
.text$mn:000043B2                 push    1B6h            ; unsigned int
.text$mn:000043B7                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000043BC                 mov     eax, [ebp+arg_4]
.text$mn:000043BF                 push    eax             ; int
.text$mn:000043C0                 mov     ecx, [ebp+arg_0]
.text$mn:000043C3                 push    ecx             ; int
.text$mn:000043C4                 call    ??$_Debug_range@PAUTreeParams@@@std@@YAXPAUTreeParams@@0PB_WI@Z ; std::_Debug_range<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint)
.text$mn:000043C9                 add     esp, 10h
.text$mn:000043CC                 push    1B7h            ; unsigned int
.text$mn:000043D1                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000043D6                 mov     edx, [ebp+arg_8]
.text$mn:000043D9                 push    edx             ; int
.text$mn:000043DA                 call    ??$_Debug_pointer@UTreeParams@@@std@@YAXPAUTreeParams@@PB_WI@Z ; std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)
.text$mn:000043DF                 add     esp, 0Ch
.text$mn:000043E2                 mov     eax, [ebp+arg_8]
.text$mn:000043E5                 mov     [ebp+var_14], eax
.text$mn:000043E8                 mov     [ebp+var_4], 0
.text$mn:000043EF                 jmp     short loc_4403
.text$mn:000043F1 ; ---------------------------------------------------------------------------
.text$mn:000043F1
.text$mn:000043F1 loc_43F1:                               ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:000043F1                 mov     ecx, [ebp+arg_8]
.text$mn:000043F4                 add     ecx, 6Ch ; 'l'
.text$mn:000043F7                 mov     [ebp+arg_8], ecx
.text$mn:000043FA                 mov     edx, [ebp+arg_0]
.text$mn:000043FD                 add     edx, 6Ch ; 'l'
.text$mn:00004400                 mov     [ebp+arg_0], edx
.text$mn:00004403
.text$mn:00004403 loc_4403:                               ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00004403                 mov     eax, [ebp+arg_0]
.text$mn:00004406                 cmp     eax, [ebp+arg_4]
.text$mn:00004409                 jz      short loc_441D
.text$mn:0000440B                 mov     ecx, [ebp+arg_0]
.text$mn:0000440E                 push    ecx
.text$mn:0000440F                 mov     edx, [ebp+arg_8]
.text$mn:00004412                 push    edx
.text$mn:00004413                 mov     ecx, [ebp+arg_C]
.text$mn:00004416                 call    ??$construct@UTreeParams@@U1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)
.text$mn:0000441B                 jmp     short loc_43F1
.text$mn:0000441D ; ---------------------------------------------------------------------------
.text$mn:0000441D
.text$mn:0000441D loc_441D:                               ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:0000441D                 jmp     short loc_444F
.text$mn:0000441D ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000441D
.text$mn:0000441F
.text$mn:0000441F ; =============== S U B R O U T I N E =======================================
.text$mn:0000441F
.text$mn:0000441F ; Attributes: noreturn
.text$mn:0000441F
.text$mn:0000441F __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000441F                                         ; DATA XREF: .xdata$x:0000E550o
.text$mn:0000441F                 jmp     short loc_442A
.text$mn:00004421 ; ---------------------------------------------------------------------------
.text$mn:00004421
.text$mn:00004421 loc_4421:                               ; CODE XREF: __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00004421                 mov     eax, [ebp-14h]
.text$mn:00004424                 add     eax, 6Ch ; 'l'
.text$mn:00004427                 mov     [ebp-14h], eax
.text$mn:0000442A
.text$mn:0000442A loc_442A:                               ; CODE XREF: __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000442A                 mov     ecx, [ebp-14h]
.text$mn:0000442D                 cmp     ecx, [ebp+10h]
.text$mn:00004430                 jz      short loc_4440
.text$mn:00004432                 mov     edx, [ebp-14h]
.text$mn:00004435                 push    edx
.text$mn:00004436                 mov     ecx, [ebp+14h]
.text$mn:00004439                 call    ??$destroy@UTreeParams@@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::destroy<TreeParams>(TreeParams *)
.text$mn:0000443E                 jmp     short loc_4421
.text$mn:00004440 ; ---------------------------------------------------------------------------
.text$mn:00004440
.text$mn:00004440 loc_4440:                               ; CODE XREF: __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00004440                 push    0
.text$mn:00004442                 push    0
.text$mn:00004444                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00004444 __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00004444
.text$mn:00004449 ; ---------------------------------------------------------------------------
.text$mn:00004449                 mov     eax, offset $LN13_2
.text$mn:0000444E                 retn
.text$mn:0000444F ; ---------------------------------------------------------------------------
.text$mn:0000444F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000444F
.text$mn:0000444F loc_444F:                               ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag):loc_441Dj
.text$mn:0000444F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004456                 jmp     short loc_445F
.text$mn:00004456 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004458
.text$mn:00004458 ; =============== S U B R O U T I N E =======================================
.text$mn:00004458
.text$mn:00004458
.text$mn:00004458 $LN13_2         proc near               ; DATA XREF: .text$mn:00004449o
.text$mn:00004458                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00004458 $LN13_2         endp ; sp-analysis failed
.text$mn:00004458
.text$mn:0000445F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000445F
.text$mn:0000445F loc_445F:                               ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000445F                 mov     eax, [ebp+arg_8]
.text$mn:00004462                 mov     ecx, [ebp+var_C]
.text$mn:00004465                 mov     large fs:0, ecx
.text$mn:0000446C                 pop     ecx
.text$mn:0000446D                 pop     edi
.text$mn:0000446E                 pop     esi
.text$mn:0000446F                 pop     ebx
.text$mn:00004470                 mov     esp, ebp
.text$mn:00004472                 pop     ebp
.text$mn:00004473                 retn
.text$mn:00004473 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004473 _text$mn        ends
.text$mn:00004473
.text$x:00004474 ; ===========================================================================
.text$x:00004474
.text$x:00004474 ; Segment type: Pure code
.text$x:00004474 ; Segment permissions: Read/Execute
.text$x:00004474 _text$x         segment para public 'CODE' use32
.text$x:00004474                 assume cs:_text$x
.text$x:00004474                 ;org 4474h
.text$x:00004474 ; COMDAT (pick associative to section at 4388)
.text$x:00004474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004474
.text$x:00004474 ; =============== S U B R O U T I N E =======================================
.text$x:00004474
.text$x:00004474
.text$x:00004474 __ehhandler$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00004474                                         ; DATA XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00004474
.text$x:00004474 arg_4           = dword ptr  8
.text$x:00004474
.text$x:00004474                 mov     edx, [esp+arg_4]
.text$x:00004478                 lea     eax, [edx+0Ch]
.text$x:0000447B                 mov     ecx, [edx-18h]
.text$x:0000447E                 xor     ecx, eax
.text$x:00004480                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004485                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:0000448A                 jmp     ___CxxFrameHandler3
.text$x:0000448A __ehhandler$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:0000448A
.text$x:0000448A ; ---------------------------------------------------------------------------
.text$x:0000448F                 align 10h
.text$x:0000448F _text$x         ends
.text$x:0000448F
.text$mn:00004490 ; ===========================================================================
.text$mn:00004490
.text$mn:00004490 ; Segment type: Pure code
.text$mn:00004490 ; Segment permissions: Read/Execute
.text$mn:00004490 _text$mn        segment para public 'CODE' use32
.text$mn:00004490                 assume cs:_text$mn
.text$mn:00004490                 ;org 4490h
.text$mn:00004490 ; COMDAT (pick any)
.text$mn:00004490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004490
.text$mn:00004490 ; =============== S U B R O U T I N E =======================================
.text$mn:00004490
.text$mn:00004490 ; Attributes: bp-based frame
.text$mn:00004490
.text$mn:00004490 ; struct TreeStateNode * __cdecl std::_Uninitialized_copy<struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(struct TreeStateNode *, struct TreeStateNode *, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &)
.text$mn:00004490                 public ??$_Uninitialized_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:00004490 ??$_Uninitialized_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$mn:00004490                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)+25p
.text$mn:00004490
.text$mn:00004490 arg_0           = dword ptr  8
.text$mn:00004490 arg_4           = dword ptr  0Ch
.text$mn:00004490 arg_8           = dword ptr  10h
.text$mn:00004490 arg_C           = dword ptr  14h
.text$mn:00004490
.text$mn:00004490                 push    ebp
.text$mn:00004491                 mov     ebp, esp
.text$mn:00004493                 mov     eax, [ebp+arg_C]
.text$mn:00004496                 push    eax
.text$mn:00004497                 mov     ecx, [ebp+arg_8]
.text$mn:0000449A                 push    ecx
.text$mn:0000449B                 call    ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z ; std::_Unchecked<TreeStateNode *>(TreeStateNode *)
.text$mn:000044A0                 add     esp, 4
.text$mn:000044A3                 push    eax
.text$mn:000044A4                 mov     edx, [ebp+arg_4]
.text$mn:000044A7                 push    edx
.text$mn:000044A8                 call    ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z ; std::_Unchecked<TreeStateNode *>(TreeStateNode *)
.text$mn:000044AD                 add     esp, 4
.text$mn:000044B0                 push    eax
.text$mn:000044B1                 mov     eax, [ebp+arg_0]
.text$mn:000044B4                 push    eax
.text$mn:000044B5                 call    ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z ; std::_Unchecked<TreeStateNode *>(TreeStateNode *)
.text$mn:000044BA                 add     esp, 4
.text$mn:000044BD                 push    eax
.text$mn:000044BE                 call    ??$_Uninit_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z ; std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)
.text$mn:000044C3                 add     esp, 10h
.text$mn:000044C6                 push    eax
.text$mn:000044C7                 lea     ecx, [ebp+arg_8]
.text$mn:000044CA                 push    ecx
.text$mn:000044CB                 call    ??$_Rechecked@PAUTreeStateNode@@PAU1@@std@@YAAAPAUTreeStateNode@@AAPAU1@PAU1@@Z ; std::_Rechecked<TreeStateNode *,TreeStateNode *>(TreeStateNode * &,TreeStateNode *)
.text$mn:000044D0                 add     esp, 8
.text$mn:000044D3                 mov     eax, [eax]
.text$mn:000044D5                 pop     ebp
.text$mn:000044D6                 retn
.text$mn:000044D6 ??$_Uninitialized_copy@PAUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$mn:000044D6
.text$mn:000044D6 ; ---------------------------------------------------------------------------
.text$mn:000044D7                 align 4
.text$mn:000044D7 _text$mn        ends
.text$mn:000044D7
.text$mn:000044D8 ; ===========================================================================
.text$mn:000044D8
.text$mn:000044D8 ; Segment type: Pure code
.text$mn:000044D8 ; Segment permissions: Read/Execute
.text$mn:000044D8 _text$mn        segment para public 'CODE' use32
.text$mn:000044D8                 assume cs:_text$mn
.text$mn:000044D8                 ;org 44D8h
.text$mn:000044D8 ; COMDAT (pick any)
.text$mn:000044D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044D8
.text$mn:000044D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000044D8
.text$mn:000044D8 ; Attributes: bp-based frame
.text$mn:000044D8
.text$mn:000044D8 ; struct TreeStateNode * __cdecl std::_Uninitialized_copy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>, struct TreeStateNode *, struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> &)
.text$mn:000044D8                 public ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:000044D8 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$mn:000044D8                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+83p
.text$mn:000044D8
.text$mn:000044D8 var_34          = dword ptr -34h
.text$mn:000044D8 var_30          = dword ptr -30h
.text$mn:000044D8 var_2C          = dword ptr -2Ch
.text$mn:000044D8 var_28          = dword ptr -28h
.text$mn:000044D8 var_24          = dword ptr -24h
.text$mn:000044D8 var_20          = dword ptr -20h
.text$mn:000044D8 var_1C          = dword ptr -1Ch
.text$mn:000044D8 var_18          = dword ptr -18h
.text$mn:000044D8 var_14          = dword ptr -14h
.text$mn:000044D8 var_10          = dword ptr -10h
.text$mn:000044D8 var_C           = dword ptr -0Ch
.text$mn:000044D8 var_4           = dword ptr -4
.text$mn:000044D8 arg_0           = byte ptr  8
.text$mn:000044D8 arg_C           = byte ptr  14h
.text$mn:000044D8 arg_18          = dword ptr  20h
.text$mn:000044D8 arg_1C          = dword ptr  24h
.text$mn:000044D8
.text$mn:000044D8                 push    ebp
.text$mn:000044D9                 mov     ebp, esp
.text$mn:000044DB                 push    0FFFFFFFFh
.text$mn:000044DD                 push    offset __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$mn:000044E2                 mov     eax, large fs:0
.text$mn:000044E8                 push    eax
.text$mn:000044E9                 sub     esp, 28h
.text$mn:000044EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000044F1                 xor     eax, ebp
.text$mn:000044F3                 push    eax
.text$mn:000044F4                 lea     eax, [ebp+var_C]
.text$mn:000044F7                 mov     large fs:0, eax
.text$mn:000044FD                 mov     [ebp+var_4], 1
.text$mn:00004504                 mov     eax, [ebp+arg_1C]
.text$mn:00004507                 push    eax
.text$mn:00004508                 mov     ecx, [ebp+arg_18]
.text$mn:0000450B                 push    ecx
.text$mn:0000450C                 call    ??$_Unchecked@PAUTreeStateNode@@@std@@YAPAUTreeStateNode@@PAU1@@Z ; std::_Unchecked<TreeStateNode *>(TreeStateNode *)
.text$mn:00004511                 add     esp, 4
.text$mn:00004514                 push    eax
.text$mn:00004515                 sub     esp, 0Ch
.text$mn:00004518                 mov     ecx, esp
.text$mn:0000451A                 mov     [ebp+var_28], esp
.text$mn:0000451D                 lea     edx, [ebp+arg_C]
.text$mn:00004520                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004521                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)
.text$mn:00004526                 mov     [ebp+var_10], eax
.text$mn:00004529                 mov     eax, [ebp+var_10]
.text$mn:0000452C                 mov     [ebp+var_2C], eax
.text$mn:0000452F                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004533                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004537                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>)
.text$mn:0000453C                 add     esp, 0Ch
.text$mn:0000453F                 mov     [ebp+var_14], eax
.text$mn:00004542                 mov     ecx, [ebp+var_14]
.text$mn:00004545                 push    ecx
.text$mn:00004546                 sub     esp, 0Ch
.text$mn:00004549                 mov     ecx, esp
.text$mn:0000454B                 mov     [ebp+var_30], esp
.text$mn:0000454E                 lea     edx, [ebp+arg_0]
.text$mn:00004551                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004552                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)
.text$mn:00004557                 mov     [ebp+var_18], eax
.text$mn:0000455A                 mov     eax, [ebp+var_18]
.text$mn:0000455D                 mov     [ebp+var_34], eax
.text$mn:00004560                 mov     byte ptr [ebp+var_4], 3
.text$mn:00004564                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004568                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>)
.text$mn:0000456D                 add     esp, 0Ch
.text$mn:00004570                 mov     [ebp+var_1C], eax
.text$mn:00004573                 mov     ecx, [ebp+var_1C]
.text$mn:00004576                 push    ecx
.text$mn:00004577                 call    ??$_Uninit_copy@PBUTreeStateNode@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z ; std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)
.text$mn:0000457C                 add     esp, 10h
.text$mn:0000457F                 mov     [ebp+var_20], eax
.text$mn:00004582                 mov     edx, [ebp+var_20]
.text$mn:00004585                 push    edx
.text$mn:00004586                 lea     eax, [ebp+arg_18]
.text$mn:00004589                 push    eax
.text$mn:0000458A                 call    ??$_Rechecked@PAUTreeStateNode@@PAU1@@std@@YAAAPAUTreeStateNode@@AAPAU1@PAU1@@Z ; std::_Rechecked<TreeStateNode *,TreeStateNode *>(TreeStateNode * &,TreeStateNode *)
.text$mn:0000458F                 add     esp, 8
.text$mn:00004592                 mov     ecx, [eax]
.text$mn:00004594                 mov     [ebp+var_24], ecx
.text$mn:00004597                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000459B                 lea     ecx, [ebp+arg_0]
.text$mn:0000459E                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$mn:000045A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000045AA                 lea     ecx, [ebp+arg_C]
.text$mn:000045AD                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$mn:000045B2                 mov     eax, [ebp+var_24]
.text$mn:000045B5                 mov     ecx, [ebp+var_C]
.text$mn:000045B8                 mov     large fs:0, ecx
.text$mn:000045BF                 pop     ecx
.text$mn:000045C0                 mov     esp, ebp
.text$mn:000045C2                 pop     ebp
.text$mn:000045C3                 retn
.text$mn:000045C3 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$mn:000045C3
.text$mn:000045C3 _text$mn        ends
.text$mn:000045C3
.text$x:000045C4 ; ===========================================================================
.text$x:000045C4
.text$x:000045C4 ; Segment type: Pure code
.text$x:000045C4 ; Segment permissions: Read/Execute
.text$x:000045C4 _text$x         segment para public 'CODE' use32
.text$x:000045C4                 assume cs:_text$x
.text$x:000045C4                 ;org 45C4h
.text$x:000045C4 ; COMDAT (pick associative to section at 44D8)
.text$x:000045C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000045C4
.text$x:000045C4 ; =============== S U B R O U T I N E =======================================
.text$x:000045C4
.text$x:000045C4
.text$x:000045C4 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$0 proc near
.text$x:000045C4                                         ; DATA XREF: .xdata$x:0000E320o
.text$x:000045C4                 lea     ecx, [ebp+14h]
.text$x:000045C7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:000045C7 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$0 endp
.text$x:000045C7
.text$x:000045CC
.text$x:000045CC ; =============== S U B R O U T I N E =======================================
.text$x:000045CC
.text$x:000045CC
.text$x:000045CC __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$1 proc near
.text$x:000045CC                                         ; DATA XREF: .xdata$x:0000E328o
.text$x:000045CC                 lea     ecx, [ebp+8]
.text$x:000045CF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:000045CF __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$1 endp
.text$x:000045CF
.text$x:000045D4
.text$x:000045D4 ; =============== S U B R O U T I N E =======================================
.text$x:000045D4
.text$x:000045D4
.text$x:000045D4 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$2 proc near
.text$x:000045D4                                         ; DATA XREF: .xdata$x:0000E330o
.text$x:000045D4                 mov     ecx, [ebp-28h]
.text$x:000045D7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:000045D7 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$2 endp
.text$x:000045D7
.text$x:000045DC
.text$x:000045DC ; =============== S U B R O U T I N E =======================================
.text$x:000045DC
.text$x:000045DC
.text$x:000045DC __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$3 proc near
.text$x:000045DC                                         ; DATA XREF: .xdata$x:0000E338o
.text$x:000045DC                 mov     ecx, [ebp-30h]
.text$x:000045DF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:000045DF __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$3 endp
.text$x:000045DF
.text$x:000045E4
.text$x:000045E4 ; =============== S U B R O U T I N E =======================================
.text$x:000045E4
.text$x:000045E4
.text$x:000045E4 __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z proc near
.text$x:000045E4                                         ; DATA XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)+5o
.text$x:000045E4
.text$x:000045E4 arg_4           = dword ptr  8
.text$x:000045E4
.text$x:000045E4                 mov     edx, [esp+arg_4]
.text$x:000045E8                 lea     eax, [edx+0Ch]
.text$x:000045EB                 mov     ecx, [edx-2Ch]
.text$x:000045EE                 xor     ecx, eax
.text$x:000045F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045F5                 mov     eax, offset __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.text$x:000045FA                 jmp     ___CxxFrameHandler3
.text$x:000045FA __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z endp
.text$x:000045FA
.text$x:000045FA ; ---------------------------------------------------------------------------
.text$x:000045FF                 align 10h
.text$x:000045FF _text$x         ends
.text$x:000045FF
.text$mn:00004600 ; ===========================================================================
.text$mn:00004600
.text$mn:00004600 ; Segment type: Pure code
.text$mn:00004600 ; Segment permissions: Read/Execute
.text$mn:00004600 _text$mn        segment para public 'CODE' use32
.text$mn:00004600                 assume cs:_text$mn
.text$mn:00004600                 ;org 4600h
.text$mn:00004600 ; COMDAT (pick any)
.text$mn:00004600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004600
.text$mn:00004600 ; =============== S U B R O U T I N E =======================================
.text$mn:00004600
.text$mn:00004600 ; Attributes: bp-based frame
.text$mn:00004600
.text$mn:00004600 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_copy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::alloca
.text$mn:00004600                 public ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00004600 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00004600                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+83p
.text$mn:00004600
.text$mn:00004600 var_34          = dword ptr -34h
.text$mn:00004600 var_30          = dword ptr -30h
.text$mn:00004600 var_2C          = dword ptr -2Ch
.text$mn:00004600 var_28          = dword ptr -28h
.text$mn:00004600 var_24          = dword ptr -24h
.text$mn:00004600 var_20          = dword ptr -20h
.text$mn:00004600 var_1C          = dword ptr -1Ch
.text$mn:00004600 var_18          = dword ptr -18h
.text$mn:00004600 var_14          = dword ptr -14h
.text$mn:00004600 var_10          = dword ptr -10h
.text$mn:00004600 var_C           = dword ptr -0Ch
.text$mn:00004600 var_4           = dword ptr -4
.text$mn:00004600 arg_0           = byte ptr  8
.text$mn:00004600 arg_C           = byte ptr  14h
.text$mn:00004600 arg_18          = dword ptr  20h
.text$mn:00004600 arg_1C          = dword ptr  24h
.text$mn:00004600
.text$mn:00004600                 push    ebp
.text$mn:00004601                 mov     ebp, esp
.text$mn:00004603                 push    0FFFFFFFFh
.text$mn:00004605                 push    offset __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:0000460A                 mov     eax, large fs:0
.text$mn:00004610                 push    eax
.text$mn:00004611                 sub     esp, 28h
.text$mn:00004614                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004619                 xor     eax, ebp
.text$mn:0000461B                 push    eax
.text$mn:0000461C                 lea     eax, [ebp+var_C]
.text$mn:0000461F                 mov     large fs:0, eax
.text$mn:00004625                 mov     [ebp+var_4], 1
.text$mn:0000462C                 mov     eax, [ebp+arg_1C]
.text$mn:0000462F                 push    eax             ; int
.text$mn:00004630                 mov     ecx, [ebp+arg_18]
.text$mn:00004633                 push    ecx
.text$mn:00004634                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004639                 add     esp, 4
.text$mn:0000463C                 push    eax             ; void *
.text$mn:0000463D                 sub     esp, 0Ch
.text$mn:00004640                 mov     ecx, esp
.text$mn:00004642                 mov     [ebp+var_28], esp
.text$mn:00004645                 lea     edx, [ebp+arg_C]
.text$mn:00004648                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004649                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000464E                 mov     [ebp+var_10], eax
.text$mn:00004651                 mov     eax, [ebp+var_10]
.text$mn:00004654                 mov     [ebp+var_2C], eax
.text$mn:00004657                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000465B                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000465F                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00004664                 add     esp, 0Ch
.text$mn:00004667                 mov     [ebp+var_14], eax
.text$mn:0000466A                 mov     ecx, [ebp+var_14]
.text$mn:0000466D                 push    ecx             ; int
.text$mn:0000466E                 sub     esp, 0Ch
.text$mn:00004671                 mov     ecx, esp
.text$mn:00004673                 mov     [ebp+var_30], esp
.text$mn:00004676                 lea     edx, [ebp+arg_0]
.text$mn:00004679                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000467A                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000467F                 mov     [ebp+var_18], eax
.text$mn:00004682                 mov     eax, [ebp+var_18]
.text$mn:00004685                 mov     [ebp+var_34], eax
.text$mn:00004688                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000468C                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004690                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00004695                 add     esp, 0Ch
.text$mn:00004698                 mov     [ebp+var_1C], eax
.text$mn:0000469B                 mov     ecx, [ebp+var_1C]
.text$mn:0000469E                 push    ecx             ; int
.text$mn:0000469F                 call    ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:000046A4                 add     esp, 10h
.text$mn:000046A7                 mov     [ebp+var_20], eax
.text$mn:000046AA                 mov     edx, [ebp+var_20]
.text$mn:000046AD                 push    edx
.text$mn:000046AE                 lea     eax, [ebp+arg_18]
.text$mn:000046B1                 push    eax
.text$mn:000046B2                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000046B7                 add     esp, 8
.text$mn:000046BA                 mov     ecx, [eax]
.text$mn:000046BC                 mov     [ebp+var_24], ecx
.text$mn:000046BF                 mov     byte ptr [ebp+var_4], 0
.text$mn:000046C3                 lea     ecx, [ebp+arg_0]
.text$mn:000046C6                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:000046CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046D2                 lea     ecx, [ebp+arg_C]
.text$mn:000046D5                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:000046DA                 mov     eax, [ebp+var_24]
.text$mn:000046DD                 mov     ecx, [ebp+var_C]
.text$mn:000046E0                 mov     large fs:0, ecx
.text$mn:000046E7                 pop     ecx
.text$mn:000046E8                 mov     esp, ebp
.text$mn:000046EA                 pop     ebp
.text$mn:000046EB                 retn
.text$mn:000046EB ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000046EB
.text$mn:000046EB _text$mn        ends
.text$mn:000046EB
.text$x:000046EC ; ===========================================================================
.text$x:000046EC
.text$x:000046EC ; Segment type: Pure code
.text$x:000046EC ; Segment permissions: Read/Execute
.text$x:000046EC _text$x         segment para public 'CODE' use32
.text$x:000046EC                 assume cs:_text$x
.text$x:000046EC                 ;org 46ECh
.text$x:000046EC ; COMDAT (pick associative to section at 4600)
.text$x:000046EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046EC
.text$x:000046EC ; =============== S U B R O U T I N E =======================================
.text$x:000046EC
.text$x:000046EC
.text$x:000046EC __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0 proc near
.text$x:000046EC                                         ; DATA XREF: .xdata$x:0000E2DCo
.text$x:000046EC                 lea     ecx, [ebp+14h]
.text$x:000046EF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000046EF __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0 endp
.text$x:000046EF
.text$x:000046F4
.text$x:000046F4 ; =============== S U B R O U T I N E =======================================
.text$x:000046F4
.text$x:000046F4
.text$x:000046F4 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1 proc near
.text$x:000046F4                                         ; DATA XREF: .xdata$x:0000E2E4o
.text$x:000046F4                 lea     ecx, [ebp+8]
.text$x:000046F7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000046F7 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1 endp
.text$x:000046F7
.text$x:000046FC
.text$x:000046FC ; =============== S U B R O U T I N E =======================================
.text$x:000046FC
.text$x:000046FC
.text$x:000046FC __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2 proc near
.text$x:000046FC                                         ; DATA XREF: .xdata$x:0000E2ECo
.text$x:000046FC                 mov     ecx, [ebp-28h]
.text$x:000046FF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000046FF __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2 endp
.text$x:000046FF
.text$x:00004704
.text$x:00004704 ; =============== S U B R O U T I N E =======================================
.text$x:00004704
.text$x:00004704
.text$x:00004704 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3 proc near
.text$x:00004704                                         ; DATA XREF: .xdata$x:0000E2F4o
.text$x:00004704                 mov     ecx, [ebp-30h]
.text$x:00004707                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004707 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3 endp
.text$x:00004707
.text$x:0000470C
.text$x:0000470C ; =============== S U B R O U T I N E =======================================
.text$x:0000470C
.text$x:0000470C
.text$x:0000470C __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$x:0000470C                                         ; DATA XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5o
.text$x:0000470C
.text$x:0000470C arg_4           = dword ptr  8
.text$x:0000470C
.text$x:0000470C                 mov     edx, [esp+arg_4]
.text$x:00004710                 lea     eax, [edx+0Ch]
.text$x:00004713                 mov     ecx, [edx-2Ch]
.text$x:00004716                 xor     ecx, eax
.text$x:00004718                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000471D                 mov     eax, offset __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$x:00004722                 jmp     ___CxxFrameHandler3
.text$x:00004722 __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$x:00004722
.text$x:00004722 ; ---------------------------------------------------------------------------
.text$x:00004727                 align 4
.text$x:00004727 _text$x         ends
.text$x:00004727
.text$mn:00004728 ; ===========================================================================
.text$mn:00004728
.text$mn:00004728 ; Segment type: Pure code
.text$mn:00004728 ; Segment permissions: Read/Execute
.text$mn:00004728 _text$mn        segment para public 'CODE' use32
.text$mn:00004728                 assume cs:_text$mn
.text$mn:00004728                 ;org 4728h
.text$mn:00004728 ; COMDAT (pick any)
.text$mn:00004728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004728
.text$mn:00004728 ; =============== S U B R O U T I N E =======================================
.text$mn:00004728
.text$mn:00004728 ; Attributes: bp-based frame
.text$mn:00004728
.text$mn:00004728 ; struct TreeParams * __cdecl std::_Uninitialized_move<struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>>>(struct TreeParams *, struct TreeParams *, struct TreeParams *, struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> &)
.text$mn:00004728                 public ??$_Uninitialized_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z
.text$mn:00004728 ??$_Uninitialized_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z proc near
.text$mn:00004728                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Umove<TreeParams *>(TreeParams *,TreeParams *,TreeParams *)+25p
.text$mn:00004728
.text$mn:00004728 arg_0           = dword ptr  8
.text$mn:00004728 arg_4           = dword ptr  0Ch
.text$mn:00004728 arg_8           = dword ptr  10h
.text$mn:00004728 arg_C           = dword ptr  14h
.text$mn:00004728
.text$mn:00004728                 push    ebp
.text$mn:00004729                 mov     ebp, esp
.text$mn:0000472B                 mov     eax, [ebp+arg_C]
.text$mn:0000472E                 push    eax
.text$mn:0000472F                 mov     ecx, [ebp+arg_8]
.text$mn:00004732                 push    ecx
.text$mn:00004733                 call    ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z ; std::_Unchecked<TreeParams *>(TreeParams *)
.text$mn:00004738                 add     esp, 4
.text$mn:0000473B                 push    eax
.text$mn:0000473C                 mov     edx, [ebp+arg_4]
.text$mn:0000473F                 push    edx
.text$mn:00004740                 call    ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z ; std::_Unchecked<TreeParams *>(TreeParams *)
.text$mn:00004745                 add     esp, 4
.text$mn:00004748                 push    eax
.text$mn:00004749                 mov     eax, [ebp+arg_0]
.text$mn:0000474C                 push    eax
.text$mn:0000474D                 call    ??$_Unchecked@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z ; std::_Unchecked<TreeParams *>(TreeParams *)
.text$mn:00004752                 add     esp, 4
.text$mn:00004755                 push    eax
.text$mn:00004756                 call    ??$_Uninit_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z ; std::_Uninit_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)
.text$mn:0000475B                 add     esp, 10h
.text$mn:0000475E                 push    eax
.text$mn:0000475F                 lea     ecx, [ebp+arg_8]
.text$mn:00004762                 push    ecx
.text$mn:00004763                 call    ??$_Rechecked@PAUTreeParams@@PAU1@@std@@YAAAPAUTreeParams@@AAPAU1@PAU1@@Z ; std::_Rechecked<TreeParams *,TreeParams *>(TreeParams * &,TreeParams *)
.text$mn:00004768                 add     esp, 8
.text$mn:0000476B                 mov     eax, [eax]
.text$mn:0000476D                 pop     ebp
.text$mn:0000476E                 retn
.text$mn:0000476E ??$_Uninitialized_move@PAUTreeParams@@PAU1@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z endp
.text$mn:0000476E
.text$mn:0000476E ; ---------------------------------------------------------------------------
.text$mn:0000476F                 align 10h
.text$mn:0000476F _text$mn        ends
.text$mn:0000476F
.text$mn:00004770 ; ===========================================================================
.text$mn:00004770
.text$mn:00004770 ; Segment type: Pure code
.text$mn:00004770 ; Segment permissions: Read/Execute
.text$mn:00004770 _text$mn        segment para public 'CODE' use32
.text$mn:00004770                 assume cs:_text$mn
.text$mn:00004770                 ;org 4770h
.text$mn:00004770 ; COMDAT (pick any)
.text$mn:00004770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004770
.text$mn:00004770 ; =============== S U B R O U T I N E =======================================
.text$mn:00004770
.text$mn:00004770 ; Attributes: bp-based frame
.text$mn:00004770
.text$mn:00004770 ; struct TreeParams * __cdecl std::_Val_type<struct TreeParams *>(struct TreeParams *)
.text$mn:00004770                 public ??$_Val_type@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z
.text$mn:00004770 ??$_Val_type@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z proc near
.text$mn:00004770                                         ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)+20p
.text$mn:00004770                 push    ebp
.text$mn:00004771                 mov     ebp, esp
.text$mn:00004773                 xor     eax, eax
.text$mn:00004775                 pop     ebp
.text$mn:00004776                 retn
.text$mn:00004776 ??$_Val_type@PAUTreeParams@@@std@@YAPAUTreeParams@@PAU1@@Z endp
.text$mn:00004776
.text$mn:00004776 ; ---------------------------------------------------------------------------
.text$mn:00004777                 align 4
.text$mn:00004777 _text$mn        ends
.text$mn:00004777
.text$mn:00004778 ; ===========================================================================
.text$mn:00004778
.text$mn:00004778 ; Segment type: Pure code
.text$mn:00004778 ; Segment permissions: Read/Execute
.text$mn:00004778 _text$mn        segment para public 'CODE' use32
.text$mn:00004778                 assume cs:_text$mn
.text$mn:00004778                 ;org 4778h
.text$mn:00004778 ; COMDAT (pick any)
.text$mn:00004778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004778
.text$mn:00004778 ; =============== S U B R O U T I N E =======================================
.text$mn:00004778
.text$mn:00004778 ; Attributes: bp-based frame
.text$mn:00004778
.text$mn:00004778 ; struct TreeParams const * __cdecl std::addressof<struct TreeParams const>(struct TreeParams const &)
.text$mn:00004778                 public ??$addressof@$$CBUTreeParams@@@std@@YAPBUTreeParams@@ABU1@@Z
.text$mn:00004778 ??$addressof@$$CBUTreeParams@@@std@@YAPBUTreeParams@@ABU1@@Z proc near
.text$mn:00004778                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+Dp
.text$mn:00004778                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+2Dp
.text$mn:00004778
.text$mn:00004778 arg_0           = dword ptr  8
.text$mn:00004778
.text$mn:00004778                 push    ebp
.text$mn:00004779                 mov     ebp, esp
.text$mn:0000477B                 mov     eax, [ebp+arg_0]
.text$mn:0000477E                 pop     ebp
.text$mn:0000477F                 retn
.text$mn:0000477F ??$addressof@$$CBUTreeParams@@@std@@YAPBUTreeParams@@ABU1@@Z endp
.text$mn:0000477F
.text$mn:0000477F _text$mn        ends
.text$mn:0000477F
.text$mn:00004780 ; ===========================================================================
.text$mn:00004780
.text$mn:00004780 ; Segment type: Pure code
.text$mn:00004780 ; Segment permissions: Read/Execute
.text$mn:00004780 _text$mn        segment para public 'CODE' use32
.text$mn:00004780                 assume cs:_text$mn
.text$mn:00004780                 ;org 4780h
.text$mn:00004780 ; COMDAT (pick any)
.text$mn:00004780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004780
.text$mn:00004780 ; =============== S U B R O U T I N E =======================================
.text$mn:00004780
.text$mn:00004780 ; Attributes: bp-based frame
.text$mn:00004780
.text$mn:00004780 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00004780                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00004780 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00004780                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00004780                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00004780
.text$mn:00004780 arg_0           = dword ptr  8
.text$mn:00004780
.text$mn:00004780                 push    ebp
.text$mn:00004781                 mov     ebp, esp
.text$mn:00004783                 mov     eax, [ebp+arg_0]
.text$mn:00004786                 pop     ebp
.text$mn:00004787                 retn
.text$mn:00004787 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00004787
.text$mn:00004787 _text$mn        ends
.text$mn:00004787
.text$mn:00004788 ; ===========================================================================
.text$mn:00004788
.text$mn:00004788 ; Segment type: Pure code
.text$mn:00004788 ; Segment permissions: Read/Execute
.text$mn:00004788 _text$mn        segment para public 'CODE' use32
.text$mn:00004788                 assume cs:_text$mn
.text$mn:00004788                 ;org 4788h
.text$mn:00004788 ; COMDAT (pick any)
.text$mn:00004788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004788
.text$mn:00004788 ; =============== S U B R O U T I N E =======================================
.text$mn:00004788
.text$mn:00004788 ; Attributes: bp-based frame
.text$mn:00004788
.text$mn:00004788 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00004788                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00004788 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00004788                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00004788                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00004788
.text$mn:00004788 arg_0           = dword ptr  8
.text$mn:00004788
.text$mn:00004788                 push    ebp
.text$mn:00004789                 mov     ebp, esp
.text$mn:0000478B                 mov     eax, [ebp+arg_0]
.text$mn:0000478E                 pop     ebp
.text$mn:0000478F                 retn
.text$mn:0000478F ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:0000478F
.text$mn:0000478F _text$mn        ends
.text$mn:0000478F
.text$mn:00004790 ; ===========================================================================
.text$mn:00004790
.text$mn:00004790 ; Segment type: Pure code
.text$mn:00004790 ; Segment permissions: Read/Execute
.text$mn:00004790 _text$mn        segment para public 'CODE' use32
.text$mn:00004790                 assume cs:_text$mn
.text$mn:00004790                 ;org 4790h
.text$mn:00004790 ; COMDAT (pick any)
.text$mn:00004790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004790
.text$mn:00004790 ; =============== S U B R O U T I N E =======================================
.text$mn:00004790
.text$mn:00004790 ; Attributes: bp-based frame
.text$mn:00004790
.text$mn:00004790 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00004790                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00004790 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:00004790                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:00004790
.text$mn:00004790 var_70          = byte ptr -70h
.text$mn:00004790 var_64          = byte ptr -64h
.text$mn:00004790 var_58          = dword ptr -58h
.text$mn:00004790 var_54          = dword ptr -54h
.text$mn:00004790 var_50          = dword ptr -50h
.text$mn:00004790 var_4C          = dword ptr -4Ch
.text$mn:00004790 var_48          = dword ptr -48h
.text$mn:00004790 var_44          = dword ptr -44h
.text$mn:00004790 var_40          = dword ptr -40h
.text$mn:00004790 var_3C          = dword ptr -3Ch
.text$mn:00004790 var_38          = dword ptr -38h
.text$mn:00004790 var_34          = dword ptr -34h
.text$mn:00004790 var_30          = dword ptr -30h
.text$mn:00004790 var_2C          = dword ptr -2Ch
.text$mn:00004790 var_28          = dword ptr -28h
.text$mn:00004790 var_24          = dword ptr -24h
.text$mn:00004790 var_20          = dword ptr -20h
.text$mn:00004790 var_1C          = dword ptr -1Ch
.text$mn:00004790 var_18          = dword ptr -18h
.text$mn:00004790 var_14          = dword ptr -14h
.text$mn:00004790 var_10          = dword ptr -10h
.text$mn:00004790 var_C           = dword ptr -0Ch
.text$mn:00004790 var_4           = dword ptr -4
.text$mn:00004790 arg_0           = byte ptr  8
.text$mn:00004790 arg_C           = byte ptr  14h
.text$mn:00004790
.text$mn:00004790                 push    ebp
.text$mn:00004791                 mov     ebp, esp
.text$mn:00004793                 push    0FFFFFFFFh
.text$mn:00004795                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:0000479A                 mov     eax, large fs:0
.text$mn:000047A0                 push    eax
.text$mn:000047A1                 sub     esp, 64h
.text$mn:000047A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000047A9                 xor     eax, ebp
.text$mn:000047AB                 push    eax
.text$mn:000047AC                 lea     eax, [ebp+var_C]
.text$mn:000047AF                 mov     large fs:0, eax
.text$mn:000047B5                 mov     [ebp+var_10], ecx
.text$mn:000047B8                 mov     [ebp+var_4], 1
.text$mn:000047BF                 sub     esp, 0Ch
.text$mn:000047C2                 mov     ecx, esp
.text$mn:000047C4                 mov     [ebp+var_3C], esp
.text$mn:000047C7                 lea     eax, [ebp+arg_C]
.text$mn:000047CA                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000047CB                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000047D0                 mov     [ebp+var_14], eax
.text$mn:000047D3                 mov     ecx, [ebp+var_14]
.text$mn:000047D6                 mov     [ebp+var_40], ecx
.text$mn:000047D9                 mov     byte ptr [ebp+var_4], 2
.text$mn:000047DD                 sub     esp, 0Ch
.text$mn:000047E0                 mov     ecx, esp
.text$mn:000047E2                 mov     [ebp+var_44], esp
.text$mn:000047E5                 lea     edx, [ebp+arg_0]
.text$mn:000047E8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000047E9                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000047EE                 mov     [ebp+var_18], eax
.text$mn:000047F1                 mov     eax, [ebp+var_18]
.text$mn:000047F4                 mov     [ebp+var_48], eax
.text$mn:000047F7                 mov     byte ptr [ebp+var_4], 3
.text$mn:000047FB                 lea     ecx, [ebp+var_70]
.text$mn:000047FE                 push    ecx
.text$mn:000047FF                 mov     ecx, [ebp+var_10]
.text$mn:00004802                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00004807                 mov     [ebp+var_1C], eax
.text$mn:0000480A                 mov     edx, [ebp+var_1C]
.text$mn:0000480D                 mov     [ebp+var_20], edx
.text$mn:00004810                 mov     byte ptr [ebp+var_4], 4
.text$mn:00004814                 sub     esp, 0Ch
.text$mn:00004817                 mov     ecx, esp
.text$mn:00004819                 mov     [ebp+var_4C], esp
.text$mn:0000481C                 mov     eax, [ebp+var_20]
.text$mn:0000481F                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004820                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00004825                 mov     [ebp+var_24], eax
.text$mn:00004828                 mov     ecx, [ebp+var_24]
.text$mn:0000482B                 mov     [ebp+var_50], ecx
.text$mn:0000482E                 mov     byte ptr [ebp+var_4], 5
.text$mn:00004832                 lea     edx, [ebp+var_64]
.text$mn:00004835                 push    edx
.text$mn:00004836                 mov     ecx, [ebp+var_10]
.text$mn:00004839                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000483E                 mov     [ebp+var_28], eax
.text$mn:00004841                 mov     eax, [ebp+var_28]
.text$mn:00004844                 mov     [ebp+var_2C], eax
.text$mn:00004847                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000484B                 sub     esp, 0Ch
.text$mn:0000484E                 mov     ecx, esp
.text$mn:00004850                 mov     [ebp+var_54], esp
.text$mn:00004853                 mov     edx, [ebp+var_2C]
.text$mn:00004856                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004857                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000485C                 mov     [ebp+var_30], eax
.text$mn:0000485F                 mov     eax, [ebp+var_30]
.text$mn:00004862                 mov     [ebp+var_58], eax
.text$mn:00004865                 mov     byte ptr [ebp+var_4], 7
.text$mn:00004869                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000486D                 mov     ecx, [ebp+var_10]
.text$mn:00004870                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00004875                 mov     [ebp+var_34], eax
.text$mn:00004878                 mov     ecx, [ebp+var_34]
.text$mn:0000487B                 mov     [ebp+var_38], ecx
.text$mn:0000487E                 mov     byte ptr [ebp+var_4], 8
.text$mn:00004882                 lea     ecx, [ebp+var_64]
.text$mn:00004885                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000488A                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000488E                 lea     ecx, [ebp+var_70]
.text$mn:00004891                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00004896                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000489A                 lea     ecx, [ebp+arg_0]
.text$mn:0000489D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000048A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048A9                 lea     ecx, [ebp+arg_C]
.text$mn:000048AC                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000048B1                 mov     eax, [ebp+var_38]
.text$mn:000048B4                 mov     ecx, [ebp+var_C]
.text$mn:000048B7                 mov     large fs:0, ecx
.text$mn:000048BE                 pop     ecx
.text$mn:000048BF                 mov     esp, ebp
.text$mn:000048C1                 pop     ebp
.text$mn:000048C2                 retn    18h
.text$mn:000048C2 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000048C2
.text$mn:000048C2 ; ---------------------------------------------------------------------------
.text$mn:000048C5                 align 4
.text$mn:000048C5 _text$mn        ends
.text$mn:000048C5
.text$x:000048C8 ; ===========================================================================
.text$x:000048C8
.text$x:000048C8 ; Segment type: Pure code
.text$x:000048C8 ; Segment permissions: Read/Execute
.text$x:000048C8 _text$x         segment para public 'CODE' use32
.text$x:000048C8                 assume cs:_text$x
.text$x:000048C8                 ;org 48C8h
.text$x:000048C8 ; COMDAT (pick associative to section at 4790)
.text$x:000048C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048C8
.text$x:000048C8 ; =============== S U B R O U T I N E =======================================
.text$x:000048C8
.text$x:000048C8
.text$x:000048C8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000048C8                                         ; DATA XREF: .xdata$x:0000E0D0o
.text$x:000048C8                 lea     ecx, [ebp+14h]
.text$x:000048CB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048CB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000048CB
.text$x:000048D0
.text$x:000048D0 ; =============== S U B R O U T I N E =======================================
.text$x:000048D0
.text$x:000048D0
.text$x:000048D0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:000048D0                                         ; DATA XREF: .xdata$x:0000E0D8o
.text$x:000048D0                 lea     ecx, [ebp+8]
.text$x:000048D3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048D3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:000048D3
.text$x:000048D8
.text$x:000048D8 ; =============== S U B R O U T I N E =======================================
.text$x:000048D8
.text$x:000048D8
.text$x:000048D8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:000048D8                                         ; DATA XREF: .xdata$x:0000E0E0o
.text$x:000048D8                 mov     ecx, [ebp-3Ch]
.text$x:000048DB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048DB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:000048DB
.text$x:000048E0
.text$x:000048E0 ; =============== S U B R O U T I N E =======================================
.text$x:000048E0
.text$x:000048E0
.text$x:000048E0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:000048E0                                         ; DATA XREF: .xdata$x:0000E0E8o
.text$x:000048E0                 mov     ecx, [ebp-44h]
.text$x:000048E3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048E3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:000048E3
.text$x:000048E8
.text$x:000048E8 ; =============== S U B R O U T I N E =======================================
.text$x:000048E8
.text$x:000048E8
.text$x:000048E8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:000048E8                                         ; DATA XREF: .xdata$x:0000E0F0o
.text$x:000048E8                                         ; .xdata$x:0000E110o
.text$x:000048E8                 lea     ecx, [ebp-70h]
.text$x:000048EB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048EB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:000048EB
.text$x:000048F0
.text$x:000048F0 ; =============== S U B R O U T I N E =======================================
.text$x:000048F0
.text$x:000048F0
.text$x:000048F0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:000048F0                                         ; DATA XREF: .xdata$x:0000E0F8o
.text$x:000048F0                 mov     ecx, [ebp-4Ch]
.text$x:000048F3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048F3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:000048F3
.text$x:000048F8
.text$x:000048F8 ; =============== S U B R O U T I N E =======================================
.text$x:000048F8
.text$x:000048F8
.text$x:000048F8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:000048F8                                         ; DATA XREF: .xdata$x:0000E100o
.text$x:000048F8                                         ; .xdata$x:0000E118o
.text$x:000048F8                 lea     ecx, [ebp-64h]
.text$x:000048FB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000048FB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:000048FB
.text$x:00004900
.text$x:00004900 ; =============== S U B R O U T I N E =======================================
.text$x:00004900
.text$x:00004900
.text$x:00004900 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:00004900                                         ; DATA XREF: .xdata$x:0000E108o
.text$x:00004900                 mov     ecx, [ebp-54h]
.text$x:00004903                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00004903 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:00004903
.text$x:00004908
.text$x:00004908 ; =============== S U B R O U T I N E =======================================
.text$x:00004908
.text$x:00004908
.text$x:00004908 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00004908                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00004908
.text$x:00004908 arg_4           = dword ptr  8
.text$x:00004908
.text$x:00004908                 mov     edx, [esp+arg_4]
.text$x:0000490C                 lea     eax, [edx+0Ch]
.text$x:0000490F                 mov     ecx, [edx-68h]
.text$x:00004912                 xor     ecx, eax
.text$x:00004914                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004919                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:0000491E                 jmp     ___CxxFrameHandler3
.text$x:0000491E __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:0000491E
.text$x:0000491E ; ---------------------------------------------------------------------------
.text$x:00004923                 align 4
.text$x:00004923 _text$x         ends
.text$x:00004923
.text$mn:00004924 ; ===========================================================================
.text$mn:00004924
.text$mn:00004924 ; Segment type: Pure code
.text$mn:00004924 ; Segment permissions: Read/Execute
.text$mn:00004924 _text$mn        segment para public 'CODE' use32
.text$mn:00004924                 assume cs:_text$mn
.text$mn:00004924                 ;org 4924h
.text$mn:00004924 ; COMDAT (pick any)
.text$mn:00004924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004924
.text$mn:00004924 ; =============== S U B R O U T I N E =======================================
.text$mn:00004924
.text$mn:00004924 ; Attributes: bp-based frame
.text$mn:00004924
.text$mn:00004924 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00004924                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00004924 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00004924                                         ; CODE XREF: $LN19+4Bp
.text$mn:00004924
.text$mn:00004924 var_4           = dword ptr -4
.text$mn:00004924 arg_0           = dword ptr  8
.text$mn:00004924 arg_4           = dword ptr  0Ch
.text$mn:00004924
.text$mn:00004924                 push    ebp
.text$mn:00004925                 mov     ebp, esp
.text$mn:00004927                 push    ecx
.text$mn:00004928                 mov     [ebp+var_4], ecx
.text$mn:0000492B                 mov     eax, [ebp+arg_4]
.text$mn:0000492E                 push    eax
.text$mn:0000492F                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004934                 add     esp, 4
.text$mn:00004937                 push    eax             ; int
.text$mn:00004938                 mov     ecx, [ebp+arg_0]
.text$mn:0000493B                 push    ecx             ; void *
.text$mn:0000493C                 mov     edx, [ebp+var_4]
.text$mn:0000493F                 push    edx             ; int
.text$mn:00004940                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00004945                 add     esp, 0Ch
.text$mn:00004948                 mov     esp, ebp
.text$mn:0000494A                 pop     ebp
.text$mn:0000494B                 retn    8
.text$mn:0000494B ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000494B
.text$mn:0000494B ; ---------------------------------------------------------------------------
.text$mn:0000494E                 align 10h
.text$mn:0000494E _text$mn        ends
.text$mn:0000494E
.text$mn:00004950 ; ===========================================================================
.text$mn:00004950
.text$mn:00004950 ; Segment type: Pure code
.text$mn:00004950 ; Segment permissions: Read/Execute
.text$mn:00004950 _text$mn        segment para public 'CODE' use32
.text$mn:00004950                 assume cs:_text$mn
.text$mn:00004950                 ;org 4950h
.text$mn:00004950 ; COMDAT (pick any)
.text$mn:00004950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004950
.text$mn:00004950 ; =============== S U B R O U T I N E =======================================
.text$mn:00004950
.text$mn:00004950 ; Attributes: bp-based frame
.text$mn:00004950
.text$mn:00004950 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00004950                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00004950 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00004950                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00004950
.text$mn:00004950 var_1C          = dword ptr -1Ch
.text$mn:00004950 var_18          = dword ptr -18h
.text$mn:00004950 var_14          = dword ptr -14h
.text$mn:00004950 var_10          = dword ptr -10h
.text$mn:00004950 var_C           = dword ptr -0Ch
.text$mn:00004950 var_4           = dword ptr -4
.text$mn:00004950 arg_0           = dword ptr  8
.text$mn:00004950 arg_4           = dword ptr  0Ch
.text$mn:00004950
.text$mn:00004950                 push    ebp
.text$mn:00004951                 mov     ebp, esp
.text$mn:00004953                 push    0FFFFFFFFh
.text$mn:00004955                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:0000495A                 mov     eax, large fs:0
.text$mn:00004960                 push    eax
.text$mn:00004961                 sub     esp, 10h
.text$mn:00004964                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004969                 xor     eax, ebp
.text$mn:0000496B                 push    eax
.text$mn:0000496C                 lea     eax, [ebp+var_C]
.text$mn:0000496F                 mov     large fs:0, eax
.text$mn:00004975                 mov     [ebp+var_18], ecx
.text$mn:00004978                 mov     eax, [ebp+arg_0]
.text$mn:0000497B                 push    eax             ; void *
.text$mn:0000497C                 push    4               ; unsigned int
.text$mn:0000497E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004983                 add     esp, 8
.text$mn:00004986                 mov     [ebp+var_10], eax
.text$mn:00004989                 mov     [ebp+var_4], 0
.text$mn:00004990                 cmp     [ebp+var_10], 0
.text$mn:00004994                 jz      short loc_49B1
.text$mn:00004996                 mov     ecx, [ebp+arg_4]
.text$mn:00004999                 push    ecx
.text$mn:0000499A                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000499F                 add     esp, 4
.text$mn:000049A2                 mov     edx, [ebp+var_10]
.text$mn:000049A5                 mov     eax, [eax]
.text$mn:000049A7                 mov     [edx], eax
.text$mn:000049A9                 mov     ecx, [ebp+var_10]
.text$mn:000049AC                 mov     [ebp+var_14], ecx
.text$mn:000049AF                 jmp     short loc_49B8
.text$mn:000049B1 ; ---------------------------------------------------------------------------
.text$mn:000049B1
.text$mn:000049B1 loc_49B1:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:000049B1                 mov     [ebp+var_14], 0
.text$mn:000049B8
.text$mn:000049B8 loc_49B8:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:000049B8                 mov     edx, [ebp+var_14]
.text$mn:000049BB                 mov     [ebp+var_1C], edx
.text$mn:000049BE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000049C5                 mov     ecx, [ebp+var_C]
.text$mn:000049C8                 mov     large fs:0, ecx
.text$mn:000049CF                 pop     ecx
.text$mn:000049D0                 mov     esp, ebp
.text$mn:000049D2                 pop     ebp
.text$mn:000049D3                 retn    8
.text$mn:000049D3 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000049D3
.text$mn:000049D3 ; ---------------------------------------------------------------------------
.text$mn:000049D6                 align 4
.text$mn:000049D6 _text$mn        ends
.text$mn:000049D6
.text$x:000049D8 ; ===========================================================================
.text$x:000049D8
.text$x:000049D8 ; Segment type: Pure code
.text$x:000049D8 ; Segment permissions: Read/Execute
.text$x:000049D8 _text$x         segment para public 'CODE' use32
.text$x:000049D8                 assume cs:_text$x
.text$x:000049D8                 ;org 49D8h
.text$x:000049D8 ; COMDAT (pick associative to section at 4950)
.text$x:000049D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000049D8
.text$x:000049D8 ; =============== S U B R O U T I N E =======================================
.text$x:000049D8
.text$x:000049D8
.text$x:000049D8 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:000049D8                                         ; DATA XREF: .xdata$x:0000E3E8o
.text$x:000049D8                 mov     eax, [ebp+8]
.text$x:000049DB                 push    eax
.text$x:000049DC                 mov     eax, [ebp-10h]
.text$x:000049DF                 push    eax             ; void *
.text$x:000049E0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000049E5                 add     esp, 8
.text$x:000049E8                 retn
.text$x:000049E8 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:000049E8
.text$x:000049E9
.text$x:000049E9 ; =============== S U B R O U T I N E =======================================
.text$x:000049E9
.text$x:000049E9
.text$x:000049E9 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:000049E9                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:000049E9
.text$x:000049E9 arg_4           = dword ptr  8
.text$x:000049E9
.text$x:000049E9                 mov     edx, [esp+arg_4]
.text$x:000049ED                 lea     eax, [edx+0Ch]
.text$x:000049F0                 mov     ecx, [edx-14h]
.text$x:000049F3                 xor     ecx, eax
.text$x:000049F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049FA                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:000049FF                 jmp     ___CxxFrameHandler3
.text$x:000049FF __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:000049FF
.text$x:000049FF _text$x         ends
.text$x:000049FF
.text$mn:00004A04 ; ===========================================================================
.text$mn:00004A04
.text$mn:00004A04 ; Segment type: Pure code
.text$mn:00004A04 ; Segment permissions: Read/Execute
.text$mn:00004A04 _text$mn        segment para public 'CODE' use32
.text$mn:00004A04                 assume cs:_text$mn
.text$mn:00004A04                 ;org 4A04h
.text$mn:00004A04 ; COMDAT (pick any)
.text$mn:00004A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A04
.text$mn:00004A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A04
.text$mn:00004A04 ; Attributes: bp-based frame
.text$mn:00004A04
.text$mn:00004A04 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00004A04                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00004A04 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00004A04                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00004A04
.text$mn:00004A04 arg_0           = dword ptr  8
.text$mn:00004A04 arg_4           = dword ptr  0Ch
.text$mn:00004A04 arg_8           = dword ptr  10h
.text$mn:00004A04
.text$mn:00004A04                 push    ebp
.text$mn:00004A05                 mov     ebp, esp
.text$mn:00004A07                 mov     eax, [ebp+arg_8]
.text$mn:00004A0A                 push    eax
.text$mn:00004A0B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004A10                 add     esp, 4
.text$mn:00004A13                 push    eax             ; int
.text$mn:00004A14                 mov     ecx, [ebp+arg_4]
.text$mn:00004A17                 push    ecx             ; void *
.text$mn:00004A18                 mov     ecx, [ebp+arg_0]
.text$mn:00004A1B                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00004A20                 pop     ebp
.text$mn:00004A21                 retn
.text$mn:00004A21 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00004A21
.text$mn:00004A21 ; ---------------------------------------------------------------------------
.text$mn:00004A22                 align 4
.text$mn:00004A22 _text$mn        ends
.text$mn:00004A22
.text$mn:00004A24 ; ===========================================================================
.text$mn:00004A24
.text$mn:00004A24 ; Segment type: Pure code
.text$mn:00004A24 ; Segment permissions: Read/Execute
.text$mn:00004A24 _text$mn        segment para public 'CODE' use32
.text$mn:00004A24                 assume cs:_text$mn
.text$mn:00004A24                 ;org 4A24h
.text$mn:00004A24 ; COMDAT (pick any)
.text$mn:00004A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A24
.text$mn:00004A24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A24
.text$mn:00004A24 ; Attributes: bp-based frame
.text$mn:00004A24
.text$mn:00004A24 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00004A24                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00004A24 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00004A24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00004A24                                         ; $LN19_0+4Bp
.text$mn:00004A24
.text$mn:00004A24 var_4           = dword ptr -4
.text$mn:00004A24 arg_0           = dword ptr  8
.text$mn:00004A24 arg_4           = dword ptr  0Ch
.text$mn:00004A24
.text$mn:00004A24                 push    ebp
.text$mn:00004A25                 mov     ebp, esp
.text$mn:00004A27                 push    ecx
.text$mn:00004A28                 mov     [ebp+var_4], ecx
.text$mn:00004A2B                 mov     eax, [ebp+arg_4]
.text$mn:00004A2E                 push    eax
.text$mn:00004A2F                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004A34                 add     esp, 4
.text$mn:00004A37                 push    eax             ; int
.text$mn:00004A38                 mov     ecx, [ebp+arg_0]
.text$mn:00004A3B                 push    ecx             ; void *
.text$mn:00004A3C                 mov     edx, [ebp+var_4]
.text$mn:00004A3F                 push    edx             ; int
.text$mn:00004A40                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00004A45                 add     esp, 0Ch
.text$mn:00004A48                 mov     esp, ebp
.text$mn:00004A4A                 pop     ebp
.text$mn:00004A4B                 retn    8
.text$mn:00004A4B ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00004A4B
.text$mn:00004A4B ; ---------------------------------------------------------------------------
.text$mn:00004A4E                 align 10h
.text$mn:00004A4E _text$mn        ends
.text$mn:00004A4E
.text$mn:00004A50 ; ===========================================================================
.text$mn:00004A50
.text$mn:00004A50 ; Segment type: Pure code
.text$mn:00004A50 ; Segment permissions: Read/Execute
.text$mn:00004A50 _text$mn        segment para public 'CODE' use32
.text$mn:00004A50                 assume cs:_text$mn
.text$mn:00004A50                 ;org 4A50h
.text$mn:00004A50 ; COMDAT (pick any)
.text$mn:00004A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A50
.text$mn:00004A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A50
.text$mn:00004A50 ; Attributes: bp-based frame
.text$mn:00004A50
.text$mn:00004A50 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00004A50                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00004A50 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00004A50                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00004A50
.text$mn:00004A50 var_1C          = dword ptr -1Ch
.text$mn:00004A50 var_18          = dword ptr -18h
.text$mn:00004A50 var_14          = dword ptr -14h
.text$mn:00004A50 var_10          = dword ptr -10h
.text$mn:00004A50 var_C           = dword ptr -0Ch
.text$mn:00004A50 var_4           = dword ptr -4
.text$mn:00004A50 arg_0           = dword ptr  8
.text$mn:00004A50 arg_4           = dword ptr  0Ch
.text$mn:00004A50
.text$mn:00004A50                 push    ebp
.text$mn:00004A51                 mov     ebp, esp
.text$mn:00004A53                 push    0FFFFFFFFh
.text$mn:00004A55                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00004A5A                 mov     eax, large fs:0
.text$mn:00004A60                 push    eax
.text$mn:00004A61                 sub     esp, 10h
.text$mn:00004A64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A69                 xor     eax, ebp
.text$mn:00004A6B                 push    eax
.text$mn:00004A6C                 lea     eax, [ebp+var_C]
.text$mn:00004A6F                 mov     large fs:0, eax
.text$mn:00004A75                 mov     [ebp+var_18], ecx
.text$mn:00004A78                 mov     eax, [ebp+arg_0]
.text$mn:00004A7B                 push    eax             ; void *
.text$mn:00004A7C                 push    4               ; unsigned int
.text$mn:00004A7E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004A83                 add     esp, 8
.text$mn:00004A86                 mov     [ebp+var_10], eax
.text$mn:00004A89                 mov     [ebp+var_4], 0
.text$mn:00004A90                 cmp     [ebp+var_10], 0
.text$mn:00004A94                 jz      short loc_4AB1
.text$mn:00004A96                 mov     ecx, [ebp+arg_4]
.text$mn:00004A99                 push    ecx
.text$mn:00004A9A                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004A9F                 add     esp, 4
.text$mn:00004AA2                 mov     edx, [ebp+var_10]
.text$mn:00004AA5                 mov     eax, [eax]
.text$mn:00004AA7                 mov     [edx], eax
.text$mn:00004AA9                 mov     ecx, [ebp+var_10]
.text$mn:00004AAC                 mov     [ebp+var_14], ecx
.text$mn:00004AAF                 jmp     short loc_4AB8
.text$mn:00004AB1 ; ---------------------------------------------------------------------------
.text$mn:00004AB1
.text$mn:00004AB1 loc_4AB1:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00004AB1                 mov     [ebp+var_14], 0
.text$mn:00004AB8
.text$mn:00004AB8 loc_4AB8:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00004AB8                 mov     edx, [ebp+var_14]
.text$mn:00004ABB                 mov     [ebp+var_1C], edx
.text$mn:00004ABE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004AC5                 mov     ecx, [ebp+var_C]
.text$mn:00004AC8                 mov     large fs:0, ecx
.text$mn:00004ACF                 pop     ecx
.text$mn:00004AD0                 mov     esp, ebp
.text$mn:00004AD2                 pop     ebp
.text$mn:00004AD3                 retn    8
.text$mn:00004AD3 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00004AD3
.text$mn:00004AD3 ; ---------------------------------------------------------------------------
.text$mn:00004AD6                 align 4
.text$mn:00004AD6 _text$mn        ends
.text$mn:00004AD6
.text$x:00004AD8 ; ===========================================================================
.text$x:00004AD8
.text$x:00004AD8 ; Segment type: Pure code
.text$x:00004AD8 ; Segment permissions: Read/Execute
.text$x:00004AD8 _text$x         segment para public 'CODE' use32
.text$x:00004AD8                 assume cs:_text$x
.text$x:00004AD8                 ;org 4AD8h
.text$x:00004AD8 ; COMDAT (pick associative to section at 4A50)
.text$x:00004AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004AD8
.text$x:00004AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD8
.text$x:00004AD8
.text$x:00004AD8 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00004AD8                                         ; DATA XREF: .xdata$x:0000E414o
.text$x:00004AD8                 mov     eax, [ebp+8]
.text$x:00004ADB                 push    eax
.text$x:00004ADC                 mov     eax, [ebp-10h]
.text$x:00004ADF                 push    eax             ; void *
.text$x:00004AE0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004AE5                 add     esp, 8
.text$x:00004AE8                 retn
.text$x:00004AE8 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00004AE8
.text$x:00004AE9
.text$x:00004AE9 ; =============== S U B R O U T I N E =======================================
.text$x:00004AE9
.text$x:00004AE9
.text$x:00004AE9 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00004AE9                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00004AE9
.text$x:00004AE9 arg_4           = dword ptr  8
.text$x:00004AE9
.text$x:00004AE9                 mov     edx, [esp+arg_4]
.text$x:00004AED                 lea     eax, [edx+0Ch]
.text$x:00004AF0                 mov     ecx, [edx-14h]
.text$x:00004AF3                 xor     ecx, eax
.text$x:00004AF5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AFA                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00004AFF                 jmp     ___CxxFrameHandler3
.text$x:00004AFF __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00004AFF
.text$x:00004AFF _text$x         ends
.text$x:00004AFF
.text$mn:00004B04 ; ===========================================================================
.text$mn:00004B04
.text$mn:00004B04 ; Segment type: Pure code
.text$mn:00004B04 ; Segment permissions: Read/Execute
.text$mn:00004B04 _text$mn        segment para public 'CODE' use32
.text$mn:00004B04                 assume cs:_text$mn
.text$mn:00004B04                 ;org 4B04h
.text$mn:00004B04 ; COMDAT (pick any)
.text$mn:00004B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B04
.text$mn:00004B04 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B04
.text$mn:00004B04 ; Attributes: bp-based frame
.text$mn:00004B04
.text$mn:00004B04 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00004B04                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00004B04 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00004B04                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00004B04
.text$mn:00004B04 arg_0           = dword ptr  8
.text$mn:00004B04 arg_4           = dword ptr  0Ch
.text$mn:00004B04 arg_8           = dword ptr  10h
.text$mn:00004B04
.text$mn:00004B04                 push    ebp
.text$mn:00004B05                 mov     ebp, esp
.text$mn:00004B07                 mov     eax, [ebp+arg_8]
.text$mn:00004B0A                 push    eax
.text$mn:00004B0B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004B10                 add     esp, 4
.text$mn:00004B13                 push    eax             ; int
.text$mn:00004B14                 mov     ecx, [ebp+arg_4]
.text$mn:00004B17                 push    ecx             ; void *
.text$mn:00004B18                 mov     ecx, [ebp+arg_0]
.text$mn:00004B1B                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00004B20                 pop     ebp
.text$mn:00004B21                 retn
.text$mn:00004B21 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00004B21
.text$mn:00004B21 ; ---------------------------------------------------------------------------
.text$mn:00004B22                 align 4
.text$mn:00004B22 _text$mn        ends
.text$mn:00004B22
.text$mn:00004B24 ; ===========================================================================
.text$mn:00004B24
.text$mn:00004B24 ; Segment type: Pure code
.text$mn:00004B24 ; Segment permissions: Read/Execute
.text$mn:00004B24 _text$mn        segment para public 'CODE' use32
.text$mn:00004B24                 assume cs:_text$mn
.text$mn:00004B24                 ;org 4B24h
.text$mn:00004B24 ; COMDAT (pick any)
.text$mn:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B24
.text$mn:00004B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B24
.text$mn:00004B24 ; Attributes: bp-based frame
.text$mn:00004B24
.text$mn:00004B24 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::construct<struct TreeParams, struct TreeParams &>(struct TreeParams *, struct TreeParams &)
.text$mn:00004B24                 public ??$construct@UTreeParams@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@AAU2@@Z
.text$mn:00004B24 ??$construct@UTreeParams@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@AAU2@@Z proc near
.text$mn:00004B24                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+94p
.text$mn:00004B24
.text$mn:00004B24 var_4           = dword ptr -4
.text$mn:00004B24 arg_0           = dword ptr  8
.text$mn:00004B24 arg_4           = dword ptr  0Ch
.text$mn:00004B24
.text$mn:00004B24                 push    ebp
.text$mn:00004B25                 mov     ebp, esp
.text$mn:00004B27                 push    ecx
.text$mn:00004B28                 mov     [ebp+var_4], ecx
.text$mn:00004B2B                 mov     eax, [ebp+arg_4]
.text$mn:00004B2E                 push    eax
.text$mn:00004B2F                 call    ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z ; std::forward<TreeParams &>(TreeParams &)
.text$mn:00004B34                 add     esp, 4
.text$mn:00004B37                 push    eax             ; int
.text$mn:00004B38                 mov     ecx, [ebp+arg_0]
.text$mn:00004B3B                 push    ecx             ; void *
.text$mn:00004B3C                 mov     edx, [ebp+var_4]
.text$mn:00004B3F                 push    edx             ; int
.text$mn:00004B40                 call    ??$construct@UTreeParams@@AAU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@AAU3@@Z ; std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(std::allocator<TreeParams> &,TreeParams *,TreeParams &)
.text$mn:00004B45                 add     esp, 0Ch
.text$mn:00004B48                 mov     esp, ebp
.text$mn:00004B4A                 pop     ebp
.text$mn:00004B4B                 retn    8
.text$mn:00004B4B ??$construct@UTreeParams@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@AAU2@@Z endp
.text$mn:00004B4B
.text$mn:00004B4B ; ---------------------------------------------------------------------------
.text$mn:00004B4E                 align 10h
.text$mn:00004B4E _text$mn        ends
.text$mn:00004B4E
.text$mn:00004B50 ; ===========================================================================
.text$mn:00004B50
.text$mn:00004B50 ; Segment type: Pure code
.text$mn:00004B50 ; Segment permissions: Read/Execute
.text$mn:00004B50 _text$mn        segment para public 'CODE' use32
.text$mn:00004B50                 assume cs:_text$mn
.text$mn:00004B50                 ;org 4B50h
.text$mn:00004B50 ; COMDAT (pick any)
.text$mn:00004B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B50
.text$mn:00004B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B50
.text$mn:00004B50 ; Attributes: bp-based frame
.text$mn:00004B50
.text$mn:00004B50 ; int __stdcall std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(void *, int)
.text$mn:00004B50                 public ??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z
.text$mn:00004B50 ??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z proc near
.text$mn:00004B50                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(std::allocator<TreeParams> &,TreeParams *,TreeParams &)+17p
.text$mn:00004B50
.text$mn:00004B50 var_1C          = dword ptr -1Ch
.text$mn:00004B50 var_18          = dword ptr -18h
.text$mn:00004B50 var_14          = dword ptr -14h
.text$mn:00004B50 var_10          = dword ptr -10h
.text$mn:00004B50 var_C           = dword ptr -0Ch
.text$mn:00004B50 var_4           = dword ptr -4
.text$mn:00004B50 arg_0           = dword ptr  8
.text$mn:00004B50 arg_4           = dword ptr  0Ch
.text$mn:00004B50
.text$mn:00004B50                 push    ebp
.text$mn:00004B51                 mov     ebp, esp
.text$mn:00004B53                 push    0FFFFFFFFh
.text$mn:00004B55                 push    offset __ehhandler$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z
.text$mn:00004B5A                 mov     eax, large fs:0
.text$mn:00004B60                 push    eax
.text$mn:00004B61                 sub     esp, 10h
.text$mn:00004B64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B69                 xor     eax, ebp
.text$mn:00004B6B                 push    eax
.text$mn:00004B6C                 lea     eax, [ebp+var_C]
.text$mn:00004B6F                 mov     large fs:0, eax
.text$mn:00004B75                 mov     [ebp+var_18], ecx
.text$mn:00004B78                 mov     eax, [ebp+arg_0]
.text$mn:00004B7B                 push    eax             ; void *
.text$mn:00004B7C                 push    6Ch ; 'l'       ; unsigned int
.text$mn:00004B7E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004B83                 add     esp, 8
.text$mn:00004B86                 mov     [ebp+var_10], eax
.text$mn:00004B89                 mov     [ebp+var_4], 0
.text$mn:00004B90                 cmp     [ebp+var_10], 0
.text$mn:00004B94                 jz      short loc_4BB0
.text$mn:00004B96                 mov     ecx, [ebp+arg_4]
.text$mn:00004B99                 push    ecx
.text$mn:00004B9A                 call    ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z ; std::forward<TreeParams &>(TreeParams &)
.text$mn:00004B9F                 add     esp, 4
.text$mn:00004BA2                 push    eax
.text$mn:00004BA3                 mov     ecx, [ebp+var_10]
.text$mn:00004BA6                 call    ??0TreeParams@@QAE@ABU0@@Z ; TreeParams::TreeParams(TreeParams const &)
.text$mn:00004BAB                 mov     [ebp+var_14], eax
.text$mn:00004BAE                 jmp     short loc_4BB7
.text$mn:00004BB0 ; ---------------------------------------------------------------------------
.text$mn:00004BB0
.text$mn:00004BB0 loc_4BB0:                               ; CODE XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+44j
.text$mn:00004BB0                 mov     [ebp+var_14], 0
.text$mn:00004BB7
.text$mn:00004BB7 loc_4BB7:                               ; CODE XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+5Ej
.text$mn:00004BB7                 mov     edx, [ebp+var_14]
.text$mn:00004BBA                 mov     [ebp+var_1C], edx
.text$mn:00004BBD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004BC4                 mov     ecx, [ebp+var_C]
.text$mn:00004BC7                 mov     large fs:0, ecx
.text$mn:00004BCE                 pop     ecx
.text$mn:00004BCF                 mov     esp, ebp
.text$mn:00004BD1                 pop     ebp
.text$mn:00004BD2                 retn    8
.text$mn:00004BD2 ??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z endp
.text$mn:00004BD2
.text$mn:00004BD2 ; ---------------------------------------------------------------------------
.text$mn:00004BD5                 align 4
.text$mn:00004BD5 _text$mn        ends
.text$mn:00004BD5
.text$x:00004BD8 ; ===========================================================================
.text$x:00004BD8
.text$x:00004BD8 ; Segment type: Pure code
.text$x:00004BD8 ; Segment permissions: Read/Execute
.text$x:00004BD8 _text$x         segment para public 'CODE' use32
.text$x:00004BD8                 assume cs:_text$x
.text$x:00004BD8                 ;org 4BD8h
.text$x:00004BD8 ; COMDAT (pick associative to section at 4B50)
.text$x:00004BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BD8
.text$x:00004BD8 ; =============== S U B R O U T I N E =======================================
.text$x:00004BD8
.text$x:00004BD8
.text$x:00004BD8 __unwindfunclet$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z$0 proc near
.text$x:00004BD8                                         ; DATA XREF: .xdata$x:0000E3BCo
.text$x:00004BD8                 mov     eax, [ebp+8]
.text$x:00004BDB                 push    eax
.text$x:00004BDC                 mov     eax, [ebp-10h]
.text$x:00004BDF                 push    eax             ; void *
.text$x:00004BE0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004BE5                 add     esp, 8
.text$x:00004BE8                 retn
.text$x:00004BE8 __unwindfunclet$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z$0 endp
.text$x:00004BE8
.text$x:00004BE9
.text$x:00004BE9 ; =============== S U B R O U T I N E =======================================
.text$x:00004BE9
.text$x:00004BE9
.text$x:00004BE9 __ehhandler$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z proc near
.text$x:00004BE9                                         ; DATA XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+5o
.text$x:00004BE9
.text$x:00004BE9 arg_4           = dword ptr  8
.text$x:00004BE9
.text$x:00004BE9                 mov     edx, [esp+arg_4]
.text$x:00004BED                 lea     eax, [edx+0Ch]
.text$x:00004BF0                 mov     ecx, [edx-14h]
.text$x:00004BF3                 xor     ecx, eax
.text$x:00004BF5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BFA                 mov     eax, offset __ehfuncinfo$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z
.text$x:00004BFF                 jmp     ___CxxFrameHandler3
.text$x:00004BFF __ehhandler$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z endp
.text$x:00004BFF
.text$x:00004BFF _text$x         ends
.text$x:00004BFF
.text$mn:00004C04 ; ===========================================================================
.text$mn:00004C04
.text$mn:00004C04 ; Segment type: Pure code
.text$mn:00004C04 ; Segment permissions: Read/Execute
.text$mn:00004C04 _text$mn        segment para public 'CODE' use32
.text$mn:00004C04                 assume cs:_text$mn
.text$mn:00004C04                 ;org 4C04h
.text$mn:00004C04 ; COMDAT (pick any)
.text$mn:00004C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C04
.text$mn:00004C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C04
.text$mn:00004C04 ; Attributes: bp-based frame
.text$mn:00004C04
.text$mn:00004C04 ; int __cdecl std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(int, void *, int)
.text$mn:00004C04                 public ??$construct@UTreeParams@@AAU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@AAU3@@Z
.text$mn:00004C04 ??$construct@UTreeParams@@AAU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@AAU3@@Z proc near
.text$mn:00004C04                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+1Cp
.text$mn:00004C04
.text$mn:00004C04 arg_0           = dword ptr  8
.text$mn:00004C04 arg_4           = dword ptr  0Ch
.text$mn:00004C04 arg_8           = dword ptr  10h
.text$mn:00004C04
.text$mn:00004C04                 push    ebp
.text$mn:00004C05                 mov     ebp, esp
.text$mn:00004C07                 mov     eax, [ebp+arg_8]
.text$mn:00004C0A                 push    eax
.text$mn:00004C0B                 call    ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z ; std::forward<TreeParams &>(TreeParams &)
.text$mn:00004C10                 add     esp, 4
.text$mn:00004C13                 push    eax             ; int
.text$mn:00004C14                 mov     ecx, [ebp+arg_4]
.text$mn:00004C17                 push    ecx             ; void *
.text$mn:00004C18                 mov     ecx, [ebp+arg_0]
.text$mn:00004C1B                 call    ??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z ; std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)
.text$mn:00004C20                 pop     ebp
.text$mn:00004C21                 retn
.text$mn:00004C21 ??$construct@UTreeParams@@AAU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@AAU3@@Z endp
.text$mn:00004C21
.text$mn:00004C21 ; ---------------------------------------------------------------------------
.text$mn:00004C22                 align 4
.text$mn:00004C22 _text$mn        ends
.text$mn:00004C22
.text$mn:00004C24 ; ===========================================================================
.text$mn:00004C24
.text$mn:00004C24 ; Segment type: Pure code
.text$mn:00004C24 ; Segment permissions: Read/Execute
.text$mn:00004C24 _text$mn        segment para public 'CODE' use32
.text$mn:00004C24                 assume cs:_text$mn
.text$mn:00004C24                 ;org 4C24h
.text$mn:00004C24 ; COMDAT (pick any)
.text$mn:00004C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C24
.text$mn:00004C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C24
.text$mn:00004C24 ; Attributes: bp-based frame
.text$mn:00004C24
.text$mn:00004C24 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::construct<struct TreeParams, struct TreeParams const &>(struct TreeParams *, struct TreeParams const &)
.text$mn:00004C24                 public ??$construct@UTreeParams@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@ABU2@@Z
.text$mn:00004C24 ??$construct@UTreeParams@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@ABU2@@Z proc near
.text$mn:00004C24                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+F1p
.text$mn:00004C24
.text$mn:00004C24 var_4           = dword ptr -4
.text$mn:00004C24 arg_0           = dword ptr  8
.text$mn:00004C24 arg_4           = dword ptr  0Ch
.text$mn:00004C24
.text$mn:00004C24                 push    ebp
.text$mn:00004C25                 mov     ebp, esp
.text$mn:00004C27                 push    ecx
.text$mn:00004C28                 mov     [ebp+var_4], ecx
.text$mn:00004C2B                 mov     eax, [ebp+arg_4]
.text$mn:00004C2E                 push    eax
.text$mn:00004C2F                 call    ??$forward@ABUTreeParams@@@std@@YAABUTreeParams@@ABU1@@Z ; std::forward<TreeParams const &>(TreeParams const &)
.text$mn:00004C34                 add     esp, 4
.text$mn:00004C37                 push    eax
.text$mn:00004C38                 mov     ecx, [ebp+arg_0]
.text$mn:00004C3B                 push    ecx
.text$mn:00004C3C                 mov     edx, [ebp+var_4]
.text$mn:00004C3F                 push    edx
.text$mn:00004C40                 call    ??$construct@UTreeParams@@ABU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@ABU3@@Z ; std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(std::allocator<TreeParams> &,TreeParams *,TreeParams const &)
.text$mn:00004C45                 add     esp, 0Ch
.text$mn:00004C48                 mov     esp, ebp
.text$mn:00004C4A                 pop     ebp
.text$mn:00004C4B                 retn    8
.text$mn:00004C4B ??$construct@UTreeParams@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@ABU2@@Z endp
.text$mn:00004C4B
.text$mn:00004C4B ; ---------------------------------------------------------------------------
.text$mn:00004C4E                 align 10h
.text$mn:00004C4E _text$mn        ends
.text$mn:00004C4E
.text$mn:00004C50 ; ===========================================================================
.text$mn:00004C50
.text$mn:00004C50 ; Segment type: Pure code
.text$mn:00004C50 ; Segment permissions: Read/Execute
.text$mn:00004C50 _text$mn        segment para public 'CODE' use32
.text$mn:00004C50                 assume cs:_text$mn
.text$mn:00004C50                 ;org 4C50h
.text$mn:00004C50 ; COMDAT (pick any)
.text$mn:00004C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C50
.text$mn:00004C50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C50
.text$mn:00004C50 ; Attributes: bp-based frame
.text$mn:00004C50
.text$mn:00004C50 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct TreeParams>>::construct<struct TreeParams, struct TreeParams const &>(class std::allocator<struct TreeParams> &, struct TreeParams *, struct TreeParams const &)
.text$mn:00004C50                 public ??$construct@UTreeParams@@ABU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@ABU3@@Z
.text$mn:00004C50 ??$construct@UTreeParams@@ABU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@ABU3@@Z proc near
.text$mn:00004C50                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(TreeParams *,TreeParams const &)+1Cp
.text$mn:00004C50
.text$mn:00004C50 arg_0           = dword ptr  8
.text$mn:00004C50 arg_4           = dword ptr  0Ch
.text$mn:00004C50 arg_8           = dword ptr  10h
.text$mn:00004C50
.text$mn:00004C50                 push    ebp
.text$mn:00004C51                 mov     ebp, esp
.text$mn:00004C53                 mov     eax, [ebp+arg_8]
.text$mn:00004C56                 push    eax
.text$mn:00004C57                 call    ??$forward@ABUTreeParams@@@std@@YAABUTreeParams@@ABU1@@Z ; std::forward<TreeParams const &>(TreeParams const &)
.text$mn:00004C5C                 add     esp, 4
.text$mn:00004C5F                 push    eax             ; int
.text$mn:00004C60                 mov     ecx, [ebp+arg_4]
.text$mn:00004C63                 push    ecx             ; void *
.text$mn:00004C64                 mov     ecx, [ebp+arg_0]
.text$mn:00004C67                 call    ?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z ; std::allocator<TreeParams>::construct(TreeParams *,TreeParams const &)
.text$mn:00004C6C                 pop     ebp
.text$mn:00004C6D                 retn
.text$mn:00004C6D ??$construct@UTreeParams@@ABU1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@ABU3@@Z endp
.text$mn:00004C6D
.text$mn:00004C6D ; ---------------------------------------------------------------------------
.text$mn:00004C6E                 align 10h
.text$mn:00004C6E _text$mn        ends
.text$mn:00004C6E
.text$mn:00004C70 ; ===========================================================================
.text$mn:00004C70
.text$mn:00004C70 ; Segment type: Pure code
.text$mn:00004C70 ; Segment permissions: Read/Execute
.text$mn:00004C70 _text$mn        segment para public 'CODE' use32
.text$mn:00004C70                 assume cs:_text$mn
.text$mn:00004C70                 ;org 4C70h
.text$mn:00004C70 ; COMDAT (pick any)
.text$mn:00004C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C70
.text$mn:00004C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C70
.text$mn:00004C70 ; Attributes: bp-based frame
.text$mn:00004C70
.text$mn:00004C70 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::construct<struct TreeParams, struct TreeParams>(struct TreeParams *, struct TreeParams &&)
.text$mn:00004C70                 public ??$construct@UTreeParams@@U1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z
.text$mn:00004C70 ??$construct@UTreeParams@@U1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z proc near
.text$mn:00004C70                                         ; CODE XREF: std::_Uninit_move<TreeParams *,TreeParams *,std::allocator<TreeParams>,TreeParams>(TreeParams *,TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,TreeParams *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00004C70
.text$mn:00004C70 var_4           = dword ptr -4
.text$mn:00004C70 arg_0           = dword ptr  8
.text$mn:00004C70 arg_4           = dword ptr  0Ch
.text$mn:00004C70
.text$mn:00004C70                 push    ebp
.text$mn:00004C71                 mov     ebp, esp
.text$mn:00004C73                 push    ecx
.text$mn:00004C74                 mov     [ebp+var_4], ecx
.text$mn:00004C77                 mov     eax, [ebp+arg_4]
.text$mn:00004C7A                 push    eax
.text$mn:00004C7B                 call    ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z ; std::forward<TreeParams>(TreeParams &)
.text$mn:00004C80                 add     esp, 4
.text$mn:00004C83                 push    eax             ; int
.text$mn:00004C84                 mov     ecx, [ebp+arg_0]
.text$mn:00004C87                 push    ecx             ; void *
.text$mn:00004C88                 mov     edx, [ebp+var_4]
.text$mn:00004C8B                 push    edx             ; int
.text$mn:00004C8C                 call    ??$construct@UTreeParams@@U1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@$$QAU3@@Z ; std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(std::allocator<TreeParams> &,TreeParams *,TreeParams &&)
.text$mn:00004C91                 add     esp, 0Ch
.text$mn:00004C94                 mov     esp, ebp
.text$mn:00004C96                 pop     ebp
.text$mn:00004C97                 retn    8
.text$mn:00004C97 ??$construct@UTreeParams@@U1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z endp
.text$mn:00004C97
.text$mn:00004C97 ; ---------------------------------------------------------------------------
.text$mn:00004C9A                 align 4
.text$mn:00004C9A _text$mn        ends
.text$mn:00004C9A
.text$mn:00004C9C ; ===========================================================================
.text$mn:00004C9C
.text$mn:00004C9C ; Segment type: Pure code
.text$mn:00004C9C ; Segment permissions: Read/Execute
.text$mn:00004C9C _text$mn        segment para public 'CODE' use32
.text$mn:00004C9C                 assume cs:_text$mn
.text$mn:00004C9C                 ;org 4C9Ch
.text$mn:00004C9C ; COMDAT (pick any)
.text$mn:00004C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C9C
.text$mn:00004C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C9C
.text$mn:00004C9C ; Attributes: bp-based frame
.text$mn:00004C9C
.text$mn:00004C9C ; int __stdcall std::allocator<TreeParams>::construct<TreeParams,TreeParams>(void *, int)
.text$mn:00004C9C                 public ??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z
.text$mn:00004C9C ??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z proc near
.text$mn:00004C9C                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(std::allocator<TreeParams> &,TreeParams *,TreeParams &&)+17p
.text$mn:00004C9C
.text$mn:00004C9C var_1C          = dword ptr -1Ch
.text$mn:00004C9C var_18          = dword ptr -18h
.text$mn:00004C9C var_14          = dword ptr -14h
.text$mn:00004C9C var_10          = dword ptr -10h
.text$mn:00004C9C var_C           = dword ptr -0Ch
.text$mn:00004C9C var_4           = dword ptr -4
.text$mn:00004C9C arg_0           = dword ptr  8
.text$mn:00004C9C arg_4           = dword ptr  0Ch
.text$mn:00004C9C
.text$mn:00004C9C                 push    ebp
.text$mn:00004C9D                 mov     ebp, esp
.text$mn:00004C9F                 push    0FFFFFFFFh
.text$mn:00004CA1                 push    offset __ehhandler$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z
.text$mn:00004CA6                 mov     eax, large fs:0
.text$mn:00004CAC                 push    eax
.text$mn:00004CAD                 sub     esp, 10h
.text$mn:00004CB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004CB5                 xor     eax, ebp
.text$mn:00004CB7                 push    eax
.text$mn:00004CB8                 lea     eax, [ebp+var_C]
.text$mn:00004CBB                 mov     large fs:0, eax
.text$mn:00004CC1                 mov     [ebp+var_18], ecx
.text$mn:00004CC4                 mov     eax, [ebp+arg_0]
.text$mn:00004CC7                 push    eax             ; void *
.text$mn:00004CC8                 push    6Ch ; 'l'       ; unsigned int
.text$mn:00004CCA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004CCF                 add     esp, 8
.text$mn:00004CD2                 mov     [ebp+var_10], eax
.text$mn:00004CD5                 mov     [ebp+var_4], 0
.text$mn:00004CDC                 cmp     [ebp+var_10], 0
.text$mn:00004CE0                 jz      short loc_4CFC
.text$mn:00004CE2                 mov     ecx, [ebp+arg_4]
.text$mn:00004CE5                 push    ecx
.text$mn:00004CE6                 call    ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z ; std::forward<TreeParams>(TreeParams &)
.text$mn:00004CEB                 add     esp, 4
.text$mn:00004CEE                 push    eax
.text$mn:00004CEF                 mov     ecx, [ebp+var_10]
.text$mn:00004CF2                 call    ??0TreeParams@@QAE@ABU0@@Z ; TreeParams::TreeParams(TreeParams const &)
.text$mn:00004CF7                 mov     [ebp+var_14], eax
.text$mn:00004CFA                 jmp     short loc_4D03
.text$mn:00004CFC ; ---------------------------------------------------------------------------
.text$mn:00004CFC
.text$mn:00004CFC loc_4CFC:                               ; CODE XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+44j
.text$mn:00004CFC                 mov     [ebp+var_14], 0
.text$mn:00004D03
.text$mn:00004D03 loc_4D03:                               ; CODE XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+5Ej
.text$mn:00004D03                 mov     edx, [ebp+var_14]
.text$mn:00004D06                 mov     [ebp+var_1C], edx
.text$mn:00004D09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D10                 mov     ecx, [ebp+var_C]
.text$mn:00004D13                 mov     large fs:0, ecx
.text$mn:00004D1A                 pop     ecx
.text$mn:00004D1B                 mov     esp, ebp
.text$mn:00004D1D                 pop     ebp
.text$mn:00004D1E                 retn    8
.text$mn:00004D1E ??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z endp
.text$mn:00004D1E
.text$mn:00004D1E ; ---------------------------------------------------------------------------
.text$mn:00004D21                 align 4
.text$mn:00004D21 _text$mn        ends
.text$mn:00004D21
.text$x:00004D24 ; ===========================================================================
.text$x:00004D24
.text$x:00004D24 ; Segment type: Pure code
.text$x:00004D24 ; Segment permissions: Read/Execute
.text$x:00004D24 _text$x         segment para public 'CODE' use32
.text$x:00004D24                 assume cs:_text$x
.text$x:00004D24                 ;org 4D24h
.text$x:00004D24 ; COMDAT (pick associative to section at 4C9C)
.text$x:00004D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D24
.text$x:00004D24 ; =============== S U B R O U T I N E =======================================
.text$x:00004D24
.text$x:00004D24
.text$x:00004D24 __unwindfunclet$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z$0 proc near
.text$x:00004D24                                         ; DATA XREF: .xdata$x:0000E5CCo
.text$x:00004D24                 mov     eax, [ebp+8]
.text$x:00004D27                 push    eax
.text$x:00004D28                 mov     eax, [ebp-10h]
.text$x:00004D2B                 push    eax             ; void *
.text$x:00004D2C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004D31                 add     esp, 8
.text$x:00004D34                 retn
.text$x:00004D34 __unwindfunclet$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z$0 endp
.text$x:00004D34
.text$x:00004D35
.text$x:00004D35 ; =============== S U B R O U T I N E =======================================
.text$x:00004D35
.text$x:00004D35
.text$x:00004D35 __ehhandler$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z proc near
.text$x:00004D35                                         ; DATA XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+5o
.text$x:00004D35
.text$x:00004D35 arg_4           = dword ptr  8
.text$x:00004D35
.text$x:00004D35                 mov     edx, [esp+arg_4]
.text$x:00004D39                 lea     eax, [edx+0Ch]
.text$x:00004D3C                 mov     ecx, [edx-14h]
.text$x:00004D3F                 xor     ecx, eax
.text$x:00004D41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D46                 mov     eax, offset __ehfuncinfo$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z
.text$x:00004D4B                 jmp     ___CxxFrameHandler3
.text$x:00004D4B __ehhandler$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z endp
.text$x:00004D4B
.text$x:00004D4B _text$x         ends
.text$x:00004D4B
.text$mn:00004D50 ; ===========================================================================
.text$mn:00004D50
.text$mn:00004D50 ; Segment type: Pure code
.text$mn:00004D50 ; Segment permissions: Read/Execute
.text$mn:00004D50 _text$mn        segment para public 'CODE' use32
.text$mn:00004D50                 assume cs:_text$mn
.text$mn:00004D50                 ;org 4D50h
.text$mn:00004D50 ; COMDAT (pick any)
.text$mn:00004D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D50
.text$mn:00004D50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D50
.text$mn:00004D50 ; Attributes: bp-based frame
.text$mn:00004D50
.text$mn:00004D50 ; int __cdecl std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(int, void *, int)
.text$mn:00004D50                 public ??$construct@UTreeParams@@U1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@$$QAU3@@Z
.text$mn:00004D50 ??$construct@UTreeParams@@U1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@$$QAU3@@Z proc near
.text$mn:00004D50                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+1Cp
.text$mn:00004D50
.text$mn:00004D50 arg_0           = dword ptr  8
.text$mn:00004D50 arg_4           = dword ptr  0Ch
.text$mn:00004D50 arg_8           = dword ptr  10h
.text$mn:00004D50
.text$mn:00004D50                 push    ebp
.text$mn:00004D51                 mov     ebp, esp
.text$mn:00004D53                 mov     eax, [ebp+arg_8]
.text$mn:00004D56                 push    eax
.text$mn:00004D57                 call    ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z ; std::forward<TreeParams>(TreeParams &)
.text$mn:00004D5C                 add     esp, 4
.text$mn:00004D5F                 push    eax             ; int
.text$mn:00004D60                 mov     ecx, [ebp+arg_4]
.text$mn:00004D63                 push    ecx             ; void *
.text$mn:00004D64                 mov     ecx, [ebp+arg_0]
.text$mn:00004D67                 call    ??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z ; std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)
.text$mn:00004D6C                 pop     ebp
.text$mn:00004D6D                 retn
.text$mn:00004D6D ??$construct@UTreeParams@@U1@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@$$QAU3@@Z endp
.text$mn:00004D6D
.text$mn:00004D6D ; ---------------------------------------------------------------------------
.text$mn:00004D6E                 align 10h
.text$mn:00004D6E _text$mn        ends
.text$mn:00004D6E
.text$mn:00004D70 ; ===========================================================================
.text$mn:00004D70
.text$mn:00004D70 ; Segment type: Pure code
.text$mn:00004D70 ; Segment permissions: Read/Execute
.text$mn:00004D70 _text$mn        segment para public 'CODE' use32
.text$mn:00004D70                 assume cs:_text$mn
.text$mn:00004D70                 ;org 4D70h
.text$mn:00004D70 ; COMDAT (pick any)
.text$mn:00004D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D70
.text$mn:00004D70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D70
.text$mn:00004D70 ; Attributes: bp-based frame
.text$mn:00004D70
.text$mn:00004D70 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::construct<struct TreeStateNode, struct TreeStateNode &>(struct TreeStateNode *, struct TreeStateNode &)
.text$mn:00004D70                 public ??$construct@UTreeStateNode@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z
.text$mn:00004D70 ??$construct@UTreeStateNode@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z proc near
.text$mn:00004D70                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00004D70
.text$mn:00004D70 var_4           = dword ptr -4
.text$mn:00004D70 arg_0           = dword ptr  8
.text$mn:00004D70 arg_4           = dword ptr  0Ch
.text$mn:00004D70
.text$mn:00004D70                 push    ebp
.text$mn:00004D71                 mov     ebp, esp
.text$mn:00004D73                 push    ecx
.text$mn:00004D74                 mov     [ebp+var_4], ecx
.text$mn:00004D77                 mov     eax, [ebp+arg_4]
.text$mn:00004D7A                 push    eax
.text$mn:00004D7B                 call    ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z ; std::forward<TreeStateNode &>(TreeStateNode &)
.text$mn:00004D80                 add     esp, 4
.text$mn:00004D83                 push    eax             ; int
.text$mn:00004D84                 mov     ecx, [ebp+arg_0]
.text$mn:00004D87                 push    ecx             ; void *
.text$mn:00004D88                 mov     edx, [ebp+var_4]
.text$mn:00004D8B                 push    edx             ; int
.text$mn:00004D8C                 call    ??$construct@UTreeStateNode@@AAU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@AAU3@@Z ; std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(std::allocator<TreeStateNode> &,TreeStateNode *,TreeStateNode &)
.text$mn:00004D91                 add     esp, 0Ch
.text$mn:00004D94                 mov     esp, ebp
.text$mn:00004D96                 pop     ebp
.text$mn:00004D97                 retn    8
.text$mn:00004D97 ??$construct@UTreeStateNode@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z endp
.text$mn:00004D97
.text$mn:00004D97 ; ---------------------------------------------------------------------------
.text$mn:00004D9A                 align 4
.text$mn:00004D9A _text$mn        ends
.text$mn:00004D9A
.text$mn:00004D9C ; ===========================================================================
.text$mn:00004D9C
.text$mn:00004D9C ; Segment type: Pure code
.text$mn:00004D9C ; Segment permissions: Read/Execute
.text$mn:00004D9C _text$mn        segment para public 'CODE' use32
.text$mn:00004D9C                 assume cs:_text$mn
.text$mn:00004D9C                 ;org 4D9Ch
.text$mn:00004D9C ; COMDAT (pick any)
.text$mn:00004D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D9C
.text$mn:00004D9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004D9C
.text$mn:00004D9C ; Attributes: bp-based frame
.text$mn:00004D9C
.text$mn:00004D9C ; int __stdcall std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(void *, int)
.text$mn:00004D9C                 public ??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z
.text$mn:00004D9C ??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z proc near
.text$mn:00004D9C                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(std::allocator<TreeStateNode> &,TreeStateNode *,TreeStateNode &)+17p
.text$mn:00004D9C
.text$mn:00004D9C var_1C          = dword ptr -1Ch
.text$mn:00004D9C var_18          = dword ptr -18h
.text$mn:00004D9C var_14          = dword ptr -14h
.text$mn:00004D9C var_10          = dword ptr -10h
.text$mn:00004D9C var_C           = dword ptr -0Ch
.text$mn:00004D9C var_4           = dword ptr -4
.text$mn:00004D9C arg_0           = dword ptr  8
.text$mn:00004D9C arg_4           = dword ptr  0Ch
.text$mn:00004D9C
.text$mn:00004D9C                 push    ebp
.text$mn:00004D9D                 mov     ebp, esp
.text$mn:00004D9F                 push    0FFFFFFFFh
.text$mn:00004DA1                 push    offset __ehhandler$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z
.text$mn:00004DA6                 mov     eax, large fs:0
.text$mn:00004DAC                 push    eax
.text$mn:00004DAD                 sub     esp, 10h
.text$mn:00004DB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DB5                 xor     eax, ebp
.text$mn:00004DB7                 push    eax
.text$mn:00004DB8                 lea     eax, [ebp+var_C]
.text$mn:00004DBB                 mov     large fs:0, eax
.text$mn:00004DC1                 mov     [ebp+var_18], ecx
.text$mn:00004DC4                 mov     eax, [ebp+arg_0]
.text$mn:00004DC7                 push    eax             ; void *
.text$mn:00004DC8                 push    4Ch ; 'L'       ; unsigned int
.text$mn:00004DCA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004DCF                 add     esp, 8
.text$mn:00004DD2                 mov     [ebp+var_10], eax
.text$mn:00004DD5                 mov     [ebp+var_4], 0
.text$mn:00004DDC                 cmp     [ebp+var_10], 0
.text$mn:00004DE0                 jz      short loc_4DFC
.text$mn:00004DE2                 mov     ecx, [ebp+arg_4]
.text$mn:00004DE5                 push    ecx
.text$mn:00004DE6                 call    ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z ; std::forward<TreeStateNode &>(TreeStateNode &)
.text$mn:00004DEB                 add     esp, 4
.text$mn:00004DEE                 push    eax
.text$mn:00004DEF                 mov     ecx, [ebp+var_10]
.text$mn:00004DF2                 call    ??0TreeStateNode@@QAE@ABU0@@Z ; TreeStateNode::TreeStateNode(TreeStateNode const &)
.text$mn:00004DF7                 mov     [ebp+var_14], eax
.text$mn:00004DFA                 jmp     short loc_4E03
.text$mn:00004DFC ; ---------------------------------------------------------------------------
.text$mn:00004DFC
.text$mn:00004DFC loc_4DFC:                               ; CODE XREF: std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+44j
.text$mn:00004DFC                 mov     [ebp+var_14], 0
.text$mn:00004E03
.text$mn:00004E03 loc_4E03:                               ; CODE XREF: std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+5Ej
.text$mn:00004E03                 mov     edx, [ebp+var_14]
.text$mn:00004E06                 mov     [ebp+var_1C], edx
.text$mn:00004E09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E10                 mov     ecx, [ebp+var_C]
.text$mn:00004E13                 mov     large fs:0, ecx
.text$mn:00004E1A                 pop     ecx
.text$mn:00004E1B                 mov     esp, ebp
.text$mn:00004E1D                 pop     ebp
.text$mn:00004E1E                 retn    8
.text$mn:00004E1E ??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z endp
.text$mn:00004E1E
.text$mn:00004E1E ; ---------------------------------------------------------------------------
.text$mn:00004E21                 align 4
.text$mn:00004E21 _text$mn        ends
.text$mn:00004E21
.text$x:00004E24 ; ===========================================================================
.text$x:00004E24
.text$x:00004E24 ; Segment type: Pure code
.text$x:00004E24 ; Segment permissions: Read/Execute
.text$x:00004E24 _text$x         segment para public 'CODE' use32
.text$x:00004E24                 assume cs:_text$x
.text$x:00004E24                 ;org 4E24h
.text$x:00004E24 ; COMDAT (pick associative to section at 4D9C)
.text$x:00004E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E24
.text$x:00004E24 ; =============== S U B R O U T I N E =======================================
.text$x:00004E24
.text$x:00004E24
.text$x:00004E24 __unwindfunclet$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z$0 proc near
.text$x:00004E24                                         ; DATA XREF: .xdata$x:0000E5A0o
.text$x:00004E24                 mov     eax, [ebp+8]
.text$x:00004E27                 push    eax
.text$x:00004E28                 mov     eax, [ebp-10h]
.text$x:00004E2B                 push    eax             ; void *
.text$x:00004E2C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004E31                 add     esp, 8
.text$x:00004E34                 retn
.text$x:00004E34 __unwindfunclet$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z$0 endp
.text$x:00004E34
.text$x:00004E35
.text$x:00004E35 ; =============== S U B R O U T I N E =======================================
.text$x:00004E35
.text$x:00004E35
.text$x:00004E35 __ehhandler$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z proc near
.text$x:00004E35                                         ; DATA XREF: std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+5o
.text$x:00004E35
.text$x:00004E35 arg_4           = dword ptr  8
.text$x:00004E35
.text$x:00004E35                 mov     edx, [esp+arg_4]
.text$x:00004E39                 lea     eax, [edx+0Ch]
.text$x:00004E3C                 mov     ecx, [edx-14h]
.text$x:00004E3F                 xor     ecx, eax
.text$x:00004E41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E46                 mov     eax, offset __ehfuncinfo$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z
.text$x:00004E4B                 jmp     ___CxxFrameHandler3
.text$x:00004E4B __ehhandler$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z endp
.text$x:00004E4B
.text$x:00004E4B _text$x         ends
.text$x:00004E4B
.text$mn:00004E50 ; ===========================================================================
.text$mn:00004E50
.text$mn:00004E50 ; Segment type: Pure code
.text$mn:00004E50 ; Segment permissions: Read/Execute
.text$mn:00004E50 _text$mn        segment para public 'CODE' use32
.text$mn:00004E50                 assume cs:_text$mn
.text$mn:00004E50                 ;org 4E50h
.text$mn:00004E50 ; COMDAT (pick any)
.text$mn:00004E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E50
.text$mn:00004E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E50
.text$mn:00004E50 ; Attributes: bp-based frame
.text$mn:00004E50
.text$mn:00004E50 ; int __cdecl std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(int, void *, int)
.text$mn:00004E50                 public ??$construct@UTreeStateNode@@AAU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@AAU3@@Z
.text$mn:00004E50 ??$construct@UTreeStateNode@@AAU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@AAU3@@Z proc near
.text$mn:00004E50                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+1Cp
.text$mn:00004E50
.text$mn:00004E50 arg_0           = dword ptr  8
.text$mn:00004E50 arg_4           = dword ptr  0Ch
.text$mn:00004E50 arg_8           = dword ptr  10h
.text$mn:00004E50
.text$mn:00004E50                 push    ebp
.text$mn:00004E51                 mov     ebp, esp
.text$mn:00004E53                 mov     eax, [ebp+arg_8]
.text$mn:00004E56                 push    eax
.text$mn:00004E57                 call    ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z ; std::forward<TreeStateNode &>(TreeStateNode &)
.text$mn:00004E5C                 add     esp, 4
.text$mn:00004E5F                 push    eax             ; int
.text$mn:00004E60                 mov     ecx, [ebp+arg_4]
.text$mn:00004E63                 push    ecx             ; void *
.text$mn:00004E64                 mov     ecx, [ebp+arg_0]
.text$mn:00004E67                 call    ??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z ; std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)
.text$mn:00004E6C                 pop     ebp
.text$mn:00004E6D                 retn
.text$mn:00004E6D ??$construct@UTreeStateNode@@AAU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@AAU3@@Z endp
.text$mn:00004E6D
.text$mn:00004E6D ; ---------------------------------------------------------------------------
.text$mn:00004E6E                 align 10h
.text$mn:00004E6E _text$mn        ends
.text$mn:00004E6E
.text$mn:00004E70 ; ===========================================================================
.text$mn:00004E70
.text$mn:00004E70 ; Segment type: Pure code
.text$mn:00004E70 ; Segment permissions: Read/Execute
.text$mn:00004E70 _text$mn        segment para public 'CODE' use32
.text$mn:00004E70                 assume cs:_text$mn
.text$mn:00004E70                 ;org 4E70h
.text$mn:00004E70 ; COMDAT (pick any)
.text$mn:00004E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E70
.text$mn:00004E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E70
.text$mn:00004E70 ; Attributes: bp-based frame
.text$mn:00004E70
.text$mn:00004E70 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::construct<struct TreeStateNode, struct TreeStateNode const &>(struct TreeStateNode *, struct TreeStateNode const &)
.text$mn:00004E70                 public ??$construct@UTreeStateNode@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@ABU2@@Z
.text$mn:00004E70 ??$construct@UTreeStateNode@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@ABU2@@Z proc near
.text$mn:00004E70                                         ; CODE XREF: std::_Uninit_copy<TreeStateNode const *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode const *,TreeStateNode const *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00004E70
.text$mn:00004E70 var_4           = dword ptr -4
.text$mn:00004E70 arg_0           = dword ptr  8
.text$mn:00004E70 arg_4           = dword ptr  0Ch
.text$mn:00004E70
.text$mn:00004E70                 push    ebp
.text$mn:00004E71                 mov     ebp, esp
.text$mn:00004E73                 push    ecx
.text$mn:00004E74                 mov     [ebp+var_4], ecx
.text$mn:00004E77                 mov     eax, [ebp+arg_4]
.text$mn:00004E7A                 push    eax
.text$mn:00004E7B                 call    ??$forward@ABUTreeStateNode@@@std@@YAABUTreeStateNode@@ABU1@@Z ; std::forward<TreeStateNode const &>(TreeStateNode const &)
.text$mn:00004E80                 add     esp, 4
.text$mn:00004E83                 push    eax
.text$mn:00004E84                 mov     ecx, [ebp+arg_0]
.text$mn:00004E87                 push    ecx
.text$mn:00004E88                 mov     edx, [ebp+var_4]
.text$mn:00004E8B                 push    edx
.text$mn:00004E8C                 call    ??$construct@UTreeStateNode@@ABU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@ABU3@@Z ; std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(std::allocator<TreeStateNode> &,TreeStateNode *,TreeStateNode const &)
.text$mn:00004E91                 add     esp, 0Ch
.text$mn:00004E94                 mov     esp, ebp
.text$mn:00004E96                 pop     ebp
.text$mn:00004E97                 retn    8
.text$mn:00004E97 ??$construct@UTreeStateNode@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@ABU2@@Z endp
.text$mn:00004E97
.text$mn:00004E97 ; ---------------------------------------------------------------------------
.text$mn:00004E9A                 align 4
.text$mn:00004E9A _text$mn        ends
.text$mn:00004E9A
.text$mn:00004E9C ; ===========================================================================
.text$mn:00004E9C
.text$mn:00004E9C ; Segment type: Pure code
.text$mn:00004E9C ; Segment permissions: Read/Execute
.text$mn:00004E9C _text$mn        segment para public 'CODE' use32
.text$mn:00004E9C                 assume cs:_text$mn
.text$mn:00004E9C                 ;org 4E9Ch
.text$mn:00004E9C ; COMDAT (pick any)
.text$mn:00004E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E9C
.text$mn:00004E9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004E9C
.text$mn:00004E9C ; Attributes: bp-based frame
.text$mn:00004E9C
.text$mn:00004E9C ; public: static void __cdecl std::allocator_traits<class std::allocator<struct TreeStateNode>>::construct<struct TreeStateNode, struct TreeStateNode const &>(class std::allocator<struct TreeStateNode> &, struct TreeStateNode *, struct TreeStateNode const &)
.text$mn:00004E9C                 public ??$construct@UTreeStateNode@@ABU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@ABU3@@Z
.text$mn:00004E9C ??$construct@UTreeStateNode@@ABU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@ABU3@@Z proc near
.text$mn:00004E9C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(TreeStateNode *,TreeStateNode const &)+1Cp
.text$mn:00004E9C
.text$mn:00004E9C arg_0           = dword ptr  8
.text$mn:00004E9C arg_4           = dword ptr  0Ch
.text$mn:00004E9C arg_8           = dword ptr  10h
.text$mn:00004E9C
.text$mn:00004E9C                 push    ebp
.text$mn:00004E9D                 mov     ebp, esp
.text$mn:00004E9F                 mov     eax, [ebp+arg_8]
.text$mn:00004EA2                 push    eax
.text$mn:00004EA3                 call    ??$forward@ABUTreeStateNode@@@std@@YAABUTreeStateNode@@ABU1@@Z ; std::forward<TreeStateNode const &>(TreeStateNode const &)
.text$mn:00004EA8                 add     esp, 4
.text$mn:00004EAB                 push    eax             ; int
.text$mn:00004EAC                 mov     ecx, [ebp+arg_4]
.text$mn:00004EAF                 push    ecx             ; void *
.text$mn:00004EB0                 mov     ecx, [ebp+arg_0]
.text$mn:00004EB3                 call    ?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z ; std::allocator<TreeStateNode>::construct(TreeStateNode *,TreeStateNode const &)
.text$mn:00004EB8                 pop     ebp
.text$mn:00004EB9                 retn
.text$mn:00004EB9 ??$construct@UTreeStateNode@@ABU1@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@ABU3@@Z endp
.text$mn:00004EB9
.text$mn:00004EB9 ; ---------------------------------------------------------------------------
.text$mn:00004EBA                 align 4
.text$mn:00004EBA _text$mn        ends
.text$mn:00004EBA
.text$mn:00004EBC ; ===========================================================================
.text$mn:00004EBC
.text$mn:00004EBC ; Segment type: Pure code
.text$mn:00004EBC ; Segment permissions: Read/Execute
.text$mn:00004EBC _text$mn        segment para public 'CODE' use32
.text$mn:00004EBC                 assume cs:_text$mn
.text$mn:00004EBC                 ;org 4EBCh
.text$mn:00004EBC ; COMDAT (pick any)
.text$mn:00004EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EBC
.text$mn:00004EBC ; =============== S U B R O U T I N E =======================================
.text$mn:00004EBC
.text$mn:00004EBC ; Attributes: bp-based frame
.text$mn:00004EBC
.text$mn:00004EBC ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00004EBC                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004EBC ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00004EBC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Alloc_proxy(void)+32p
.text$mn:00004EBC                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Alloc_proxy(void)+32p ...
.text$mn:00004EBC
.text$mn:00004EBC var_4           = dword ptr -4
.text$mn:00004EBC arg_0           = dword ptr  8
.text$mn:00004EBC arg_4           = dword ptr  0Ch
.text$mn:00004EBC
.text$mn:00004EBC                 push    ebp
.text$mn:00004EBD                 mov     ebp, esp
.text$mn:00004EBF                 push    ecx
.text$mn:00004EC0                 mov     [ebp+var_4], ecx
.text$mn:00004EC3                 mov     eax, [ebp+arg_4]
.text$mn:00004EC6                 push    eax
.text$mn:00004EC7                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00004ECC                 add     esp, 4
.text$mn:00004ECF                 push    eax             ; int
.text$mn:00004ED0                 mov     ecx, [ebp+arg_0]
.text$mn:00004ED3                 push    ecx             ; void *
.text$mn:00004ED4                 mov     edx, [ebp+var_4]
.text$mn:00004ED7                 push    edx             ; int
.text$mn:00004ED8                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00004EDD                 add     esp, 0Ch
.text$mn:00004EE0                 mov     esp, ebp
.text$mn:00004EE2                 pop     ebp
.text$mn:00004EE3                 retn    8
.text$mn:00004EE3 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00004EE3
.text$mn:00004EE3 ; ---------------------------------------------------------------------------
.text$mn:00004EE6                 align 4
.text$mn:00004EE6 _text$mn        ends
.text$mn:00004EE6
.text$mn:00004EE8 ; ===========================================================================
.text$mn:00004EE8
.text$mn:00004EE8 ; Segment type: Pure code
.text$mn:00004EE8 ; Segment permissions: Read/Execute
.text$mn:00004EE8 _text$mn        segment para public 'CODE' use32
.text$mn:00004EE8                 assume cs:_text$mn
.text$mn:00004EE8                 ;org 4EE8h
.text$mn:00004EE8 ; COMDAT (pick any)
.text$mn:00004EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EE8
.text$mn:00004EE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EE8
.text$mn:00004EE8 ; Attributes: bp-based frame
.text$mn:00004EE8
.text$mn:00004EE8 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00004EE8                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004EE8 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00004EE8                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00004EE8                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00004EE8
.text$mn:00004EE8 var_1C          = dword ptr -1Ch
.text$mn:00004EE8 var_18          = dword ptr -18h
.text$mn:00004EE8 var_14          = dword ptr -14h
.text$mn:00004EE8 var_10          = dword ptr -10h
.text$mn:00004EE8 var_C           = dword ptr -0Ch
.text$mn:00004EE8 var_4           = dword ptr -4
.text$mn:00004EE8 arg_0           = dword ptr  8
.text$mn:00004EE8 arg_4           = dword ptr  0Ch
.text$mn:00004EE8
.text$mn:00004EE8                 push    ebp
.text$mn:00004EE9                 mov     ebp, esp
.text$mn:00004EEB                 push    0FFFFFFFFh
.text$mn:00004EED                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004EF2                 mov     eax, large fs:0
.text$mn:00004EF8                 push    eax
.text$mn:00004EF9                 sub     esp, 10h
.text$mn:00004EFC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F01                 xor     eax, ebp
.text$mn:00004F03                 push    eax
.text$mn:00004F04                 lea     eax, [ebp+var_C]
.text$mn:00004F07                 mov     large fs:0, eax
.text$mn:00004F0D                 mov     [ebp+var_18], ecx
.text$mn:00004F10                 mov     eax, [ebp+arg_0]
.text$mn:00004F13                 push    eax             ; void *
.text$mn:00004F14                 push    8               ; unsigned int
.text$mn:00004F16                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00004F1B                 add     esp, 8
.text$mn:00004F1E                 mov     [ebp+var_10], eax
.text$mn:00004F21                 mov     [ebp+var_4], 0
.text$mn:00004F28                 cmp     [ebp+var_10], 0
.text$mn:00004F2C                 jz      short loc_4F4F
.text$mn:00004F2E                 mov     ecx, [ebp+arg_4]
.text$mn:00004F31                 push    ecx
.text$mn:00004F32                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00004F37                 add     esp, 4
.text$mn:00004F3A                 mov     edx, [eax]
.text$mn:00004F3C                 mov     eax, [eax+4]
.text$mn:00004F3F                 mov     ecx, [ebp+var_10]
.text$mn:00004F42                 mov     [ecx], edx
.text$mn:00004F44                 mov     [ecx+4], eax
.text$mn:00004F47                 mov     edx, [ebp+var_10]
.text$mn:00004F4A                 mov     [ebp+var_14], edx
.text$mn:00004F4D                 jmp     short loc_4F56
.text$mn:00004F4F ; ---------------------------------------------------------------------------
.text$mn:00004F4F
.text$mn:00004F4F loc_4F4F:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00004F4F                 mov     [ebp+var_14], 0
.text$mn:00004F56
.text$mn:00004F56 loc_4F56:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00004F56                 mov     eax, [ebp+var_14]
.text$mn:00004F59                 mov     [ebp+var_1C], eax
.text$mn:00004F5C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F63                 mov     ecx, [ebp+var_C]
.text$mn:00004F66                 mov     large fs:0, ecx
.text$mn:00004F6D                 pop     ecx
.text$mn:00004F6E                 mov     esp, ebp
.text$mn:00004F70                 pop     ebp
.text$mn:00004F71                 retn    8
.text$mn:00004F71 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00004F71
.text$mn:00004F71 _text$mn        ends
.text$mn:00004F71
.text$x:00004F74 ; ===========================================================================
.text$x:00004F74
.text$x:00004F74 ; Segment type: Pure code
.text$x:00004F74 ; Segment permissions: Read/Execute
.text$x:00004F74 _text$x         segment para public 'CODE' use32
.text$x:00004F74                 assume cs:_text$x
.text$x:00004F74                 ;org 4F74h
.text$x:00004F74 ; COMDAT (pick associative to section at 4EE8)
.text$x:00004F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F74
.text$x:00004F74 ; =============== S U B R O U T I N E =======================================
.text$x:00004F74
.text$x:00004F74
.text$x:00004F74 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00004F74                                         ; DATA XREF: .xdata$x:0000E2B0o
.text$x:00004F74                 mov     eax, [ebp+8]
.text$x:00004F77                 push    eax
.text$x:00004F78                 mov     eax, [ebp-10h]
.text$x:00004F7B                 push    eax             ; void *
.text$x:00004F7C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004F81                 add     esp, 8
.text$x:00004F84                 retn
.text$x:00004F84 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00004F84
.text$x:00004F85
.text$x:00004F85 ; =============== S U B R O U T I N E =======================================
.text$x:00004F85
.text$x:00004F85
.text$x:00004F85 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00004F85                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00004F85
.text$x:00004F85 arg_4           = dword ptr  8
.text$x:00004F85
.text$x:00004F85                 mov     edx, [esp+arg_4]
.text$x:00004F89                 lea     eax, [edx+0Ch]
.text$x:00004F8C                 mov     ecx, [edx-14h]
.text$x:00004F8F                 xor     ecx, eax
.text$x:00004F91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F96                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00004F9B                 jmp     ___CxxFrameHandler3
.text$x:00004F9B __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00004F9B
.text$x:00004F9B _text$x         ends
.text$x:00004F9B
.text$mn:00004FA0 ; ===========================================================================
.text$mn:00004FA0
.text$mn:00004FA0 ; Segment type: Pure code
.text$mn:00004FA0 ; Segment permissions: Read/Execute
.text$mn:00004FA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FA0                 assume cs:_text$mn
.text$mn:00004FA0                 ;org 4FA0h
.text$mn:00004FA0 ; COMDAT (pick any)
.text$mn:00004FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FA0
.text$mn:00004FA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FA0
.text$mn:00004FA0 ; Attributes: bp-based frame
.text$mn:00004FA0
.text$mn:00004FA0 ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00004FA0                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00004FA0 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00004FA0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00004FA0
.text$mn:00004FA0 arg_0           = dword ptr  8
.text$mn:00004FA0 arg_4           = dword ptr  0Ch
.text$mn:00004FA0 arg_8           = dword ptr  10h
.text$mn:00004FA0
.text$mn:00004FA0                 push    ebp
.text$mn:00004FA1                 mov     ebp, esp
.text$mn:00004FA3                 mov     eax, [ebp+arg_8]
.text$mn:00004FA6                 push    eax
.text$mn:00004FA7                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00004FAC                 add     esp, 4
.text$mn:00004FAF                 push    eax             ; int
.text$mn:00004FB0                 mov     ecx, [ebp+arg_4]
.text$mn:00004FB3                 push    ecx             ; void *
.text$mn:00004FB4                 mov     ecx, [ebp+arg_0]
.text$mn:00004FB7                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00004FBC                 pop     ebp
.text$mn:00004FBD                 retn
.text$mn:00004FBD ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00004FBD
.text$mn:00004FBD ; ---------------------------------------------------------------------------
.text$mn:00004FBE                 align 10h
.text$mn:00004FBE _text$mn        ends
.text$mn:00004FBE
.text$mn:00004FC0 ; ===========================================================================
.text$mn:00004FC0
.text$mn:00004FC0 ; Segment type: Pure code
.text$mn:00004FC0 ; Segment permissions: Read/Execute
.text$mn:00004FC0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FC0                 assume cs:_text$mn
.text$mn:00004FC0                 ;org 4FC0h
.text$mn:00004FC0 ; COMDAT (pick any)
.text$mn:00004FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FC0
.text$mn:00004FC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FC0
.text$mn:00004FC0 ; Attributes: bp-based frame
.text$mn:00004FC0
.text$mn:00004FC0 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(void *, int)
.text$mn:00004FC0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z
.text$mn:00004FC0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z proc near
.text$mn:00004FC0                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00004FC0
.text$mn:00004FC0 var_4           = dword ptr -4
.text$mn:00004FC0 arg_0           = dword ptr  8
.text$mn:00004FC0 arg_4           = dword ptr  0Ch
.text$mn:00004FC0
.text$mn:00004FC0                 push    ebp
.text$mn:00004FC1                 mov     ebp, esp
.text$mn:00004FC3                 push    ecx
.text$mn:00004FC4                 mov     [ebp+var_4], ecx
.text$mn:00004FC7                 mov     eax, [ebp+arg_4]
.text$mn:00004FCA                 push    eax
.text$mn:00004FCB                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004FD0                 add     esp, 4
.text$mn:00004FD3                 push    eax             ; int
.text$mn:00004FD4                 mov     ecx, [ebp+arg_0]
.text$mn:00004FD7                 push    ecx             ; void *
.text$mn:00004FD8                 mov     edx, [ebp+var_4]
.text$mn:00004FDB                 push    edx             ; int
.text$mn:00004FDC                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004FE1                 add     esp, 0Ch
.text$mn:00004FE4                 mov     esp, ebp
.text$mn:00004FE6                 pop     ebp
.text$mn:00004FE7                 retn    8
.text$mn:00004FE7 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z endp
.text$mn:00004FE7
.text$mn:00004FE7 ; ---------------------------------------------------------------------------
.text$mn:00004FEA                 align 4
.text$mn:00004FEA _text$mn        ends
.text$mn:00004FEA
.text$mn:00004FEC ; ===========================================================================
.text$mn:00004FEC
.text$mn:00004FEC ; Segment type: Pure code
.text$mn:00004FEC ; Segment permissions: Read/Execute
.text$mn:00004FEC _text$mn        segment para public 'CODE' use32
.text$mn:00004FEC                 assume cs:_text$mn
.text$mn:00004FEC                 ;org 4FECh
.text$mn:00004FEC ; COMDAT (pick any)
.text$mn:00004FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FEC
.text$mn:00004FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00004FEC
.text$mn:00004FEC ; Attributes: bp-based frame
.text$mn:00004FEC
.text$mn:00004FEC ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(int, void *, int)
.text$mn:00004FEC                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z
.text$mn:00004FEC ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z proc near
.text$mn:00004FEC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Cp
.text$mn:00004FEC
.text$mn:00004FEC arg_0           = dword ptr  8
.text$mn:00004FEC arg_4           = dword ptr  0Ch
.text$mn:00004FEC arg_8           = dword ptr  10h
.text$mn:00004FEC
.text$mn:00004FEC                 push    ebp
.text$mn:00004FED                 mov     ebp, esp
.text$mn:00004FEF                 mov     eax, [ebp+arg_8]
.text$mn:00004FF2                 push    eax
.text$mn:00004FF3                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004FF8                 add     esp, 4
.text$mn:00004FFB                 push    eax             ; int
.text$mn:00004FFC                 mov     ecx, [ebp+arg_4]
.text$mn:00004FFF                 push    ecx             ; void *
.text$mn:00005000                 mov     ecx, [ebp+arg_0]
.text$mn:00005003                 call    ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00005008                 pop     ebp
.text$mn:00005009                 retn
.text$mn:00005009 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z endp
.text$mn:00005009
.text$mn:00005009 ; ---------------------------------------------------------------------------
.text$mn:0000500A                 align 4
.text$mn:0000500A _text$mn        ends
.text$mn:0000500A
.text$mn:0000500C ; ===========================================================================
.text$mn:0000500C
.text$mn:0000500C ; Segment type: Pure code
.text$mn:0000500C ; Segment permissions: Read/Execute
.text$mn:0000500C _text$mn        segment para public 'CODE' use32
.text$mn:0000500C                 assume cs:_text$mn
.text$mn:0000500C                 ;org 500Ch
.text$mn:0000500C ; COMDAT (pick any)
.text$mn:0000500C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000500C
.text$mn:0000500C ; =============== S U B R O U T I N E =======================================
.text$mn:0000500C
.text$mn:0000500C ; Attributes: bp-based frame
.text$mn:0000500C
.text$mn:0000500C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000500C                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:0000500C ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:0000500C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:0000500C
.text$mn:0000500C var_4           = dword ptr -4
.text$mn:0000500C arg_0           = dword ptr  8
.text$mn:0000500C
.text$mn:0000500C                 push    ebp
.text$mn:0000500D                 mov     ebp, esp
.text$mn:0000500F                 push    ecx
.text$mn:00005010                 mov     [ebp+var_4], ecx
.text$mn:00005013                 mov     eax, [ebp+arg_0]
.text$mn:00005016                 push    eax
.text$mn:00005017                 mov     ecx, [ebp+var_4]
.text$mn:0000501A                 push    ecx
.text$mn:0000501B                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00005020                 add     esp, 8
.text$mn:00005023                 mov     esp, ebp
.text$mn:00005025                 pop     ebp
.text$mn:00005026                 retn    4
.text$mn:00005026 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00005026
.text$mn:00005026 ; ---------------------------------------------------------------------------
.text$mn:00005029                 align 4
.text$mn:00005029 _text$mn        ends
.text$mn:00005029
.text$mn:0000502C ; ===========================================================================
.text$mn:0000502C
.text$mn:0000502C ; Segment type: Pure code
.text$mn:0000502C ; Segment permissions: Read/Execute
.text$mn:0000502C _text$mn        segment para public 'CODE' use32
.text$mn:0000502C                 assume cs:_text$mn
.text$mn:0000502C                 ;org 502Ch
.text$mn:0000502C ; COMDAT (pick any)
.text$mn:0000502C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000502C
.text$mn:0000502C ; =============== S U B R O U T I N E =======================================
.text$mn:0000502C
.text$mn:0000502C ; Attributes: bp-based frame
.text$mn:0000502C
.text$mn:0000502C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:0000502C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:0000502C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:0000502C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:0000502C
.text$mn:0000502C var_4           = dword ptr -4
.text$mn:0000502C
.text$mn:0000502C                 push    ebp
.text$mn:0000502D                 mov     ebp, esp
.text$mn:0000502F                 push    ecx
.text$mn:00005030                 mov     [ebp+var_4], ecx
.text$mn:00005033                 mov     esp, ebp
.text$mn:00005035                 pop     ebp
.text$mn:00005036                 retn    4
.text$mn:00005036 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00005036
.text$mn:00005036 ; ---------------------------------------------------------------------------
.text$mn:00005039                 align 4
.text$mn:00005039 _text$mn        ends
.text$mn:00005039
.text$mn:0000503C ; ===========================================================================
.text$mn:0000503C
.text$mn:0000503C ; Segment type: Pure code
.text$mn:0000503C ; Segment permissions: Read/Execute
.text$mn:0000503C _text$mn        segment para public 'CODE' use32
.text$mn:0000503C                 assume cs:_text$mn
.text$mn:0000503C                 ;org 503Ch
.text$mn:0000503C ; COMDAT (pick any)
.text$mn:0000503C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000503C
.text$mn:0000503C ; =============== S U B R O U T I N E =======================================
.text$mn:0000503C
.text$mn:0000503C ; Attributes: bp-based frame
.text$mn:0000503C
.text$mn:0000503C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:0000503C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:0000503C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:0000503C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:0000503C
.text$mn:0000503C arg_0           = dword ptr  8
.text$mn:0000503C arg_4           = dword ptr  0Ch
.text$mn:0000503C
.text$mn:0000503C                 push    ebp
.text$mn:0000503D                 mov     ebp, esp
.text$mn:0000503F                 mov     eax, [ebp+arg_4]
.text$mn:00005042                 push    eax
.text$mn:00005043                 mov     ecx, [ebp+arg_0]
.text$mn:00005046                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:0000504B                 pop     ebp
.text$mn:0000504C                 retn
.text$mn:0000504C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:0000504C
.text$mn:0000504C ; ---------------------------------------------------------------------------
.text$mn:0000504D                 align 10h
.text$mn:0000504D _text$mn        ends
.text$mn:0000504D
.text$mn:00005050 ; ===========================================================================
.text$mn:00005050
.text$mn:00005050 ; Segment type: Pure code
.text$mn:00005050 ; Segment permissions: Read/Execute
.text$mn:00005050 _text$mn        segment para public 'CODE' use32
.text$mn:00005050                 assume cs:_text$mn
.text$mn:00005050                 ;org 5050h
.text$mn:00005050 ; COMDAT (pick any)
.text$mn:00005050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005050
.text$mn:00005050 ; =============== S U B R O U T I N E =======================================
.text$mn:00005050
.text$mn:00005050 ; Attributes: bp-based frame
.text$mn:00005050
.text$mn:00005050 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005050                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00005050 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00005050                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00005050
.text$mn:00005050 var_4           = dword ptr -4
.text$mn:00005050 arg_0           = dword ptr  8
.text$mn:00005050
.text$mn:00005050                 push    ebp
.text$mn:00005051                 mov     ebp, esp
.text$mn:00005053                 push    ecx
.text$mn:00005054                 mov     [ebp+var_4], ecx
.text$mn:00005057                 mov     eax, [ebp+arg_0]
.text$mn:0000505A                 push    eax
.text$mn:0000505B                 mov     ecx, [ebp+var_4]
.text$mn:0000505E                 push    ecx
.text$mn:0000505F                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00005064                 add     esp, 8
.text$mn:00005067                 mov     esp, ebp
.text$mn:00005069                 pop     ebp
.text$mn:0000506A                 retn    4
.text$mn:0000506A ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:0000506A
.text$mn:0000506A ; ---------------------------------------------------------------------------
.text$mn:0000506D                 align 10h
.text$mn:0000506D _text$mn        ends
.text$mn:0000506D
.text$mn:00005070 ; ===========================================================================
.text$mn:00005070
.text$mn:00005070 ; Segment type: Pure code
.text$mn:00005070 ; Segment permissions: Read/Execute
.text$mn:00005070 _text$mn        segment para public 'CODE' use32
.text$mn:00005070                 assume cs:_text$mn
.text$mn:00005070                 ;org 5070h
.text$mn:00005070 ; COMDAT (pick any)
.text$mn:00005070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005070
.text$mn:00005070 ; =============== S U B R O U T I N E =======================================
.text$mn:00005070
.text$mn:00005070 ; Attributes: bp-based frame
.text$mn:00005070
.text$mn:00005070 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005070                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00005070 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00005070                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00005070
.text$mn:00005070 var_4           = dword ptr -4
.text$mn:00005070
.text$mn:00005070                 push    ebp
.text$mn:00005071                 mov     ebp, esp
.text$mn:00005073                 push    ecx
.text$mn:00005074                 mov     [ebp+var_4], ecx
.text$mn:00005077                 mov     esp, ebp
.text$mn:00005079                 pop     ebp
.text$mn:0000507A                 retn    4
.text$mn:0000507A ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:0000507A
.text$mn:0000507A ; ---------------------------------------------------------------------------
.text$mn:0000507D                 align 10h
.text$mn:0000507D _text$mn        ends
.text$mn:0000507D
.text$mn:00005080 ; ===========================================================================
.text$mn:00005080
.text$mn:00005080 ; Segment type: Pure code
.text$mn:00005080 ; Segment permissions: Read/Execute
.text$mn:00005080 _text$mn        segment para public 'CODE' use32
.text$mn:00005080                 assume cs:_text$mn
.text$mn:00005080                 ;org 5080h
.text$mn:00005080 ; COMDAT (pick any)
.text$mn:00005080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005080
.text$mn:00005080 ; =============== S U B R O U T I N E =======================================
.text$mn:00005080
.text$mn:00005080 ; Attributes: bp-based frame
.text$mn:00005080
.text$mn:00005080 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00005080                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00005080 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00005080                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00005080
.text$mn:00005080 arg_0           = dword ptr  8
.text$mn:00005080 arg_4           = dword ptr  0Ch
.text$mn:00005080
.text$mn:00005080                 push    ebp
.text$mn:00005081                 mov     ebp, esp
.text$mn:00005083                 mov     eax, [ebp+arg_4]
.text$mn:00005086                 push    eax
.text$mn:00005087                 mov     ecx, [ebp+arg_0]
.text$mn:0000508A                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000508F                 pop     ebp
.text$mn:00005090                 retn
.text$mn:00005090 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00005090
.text$mn:00005090 ; ---------------------------------------------------------------------------
.text$mn:00005091                 align 4
.text$mn:00005091 _text$mn        ends
.text$mn:00005091
.text$mn:00005094 ; ===========================================================================
.text$mn:00005094
.text$mn:00005094 ; Segment type: Pure code
.text$mn:00005094 ; Segment permissions: Read/Execute
.text$mn:00005094 _text$mn        segment para public 'CODE' use32
.text$mn:00005094                 assume cs:_text$mn
.text$mn:00005094                 ;org 5094h
.text$mn:00005094 ; COMDAT (pick any)
.text$mn:00005094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005094
.text$mn:00005094 ; =============== S U B R O U T I N E =======================================
.text$mn:00005094
.text$mn:00005094 ; Attributes: bp-based frame
.text$mn:00005094
.text$mn:00005094 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::destroy<struct TreeParams>(struct TreeParams *)
.text$mn:00005094                 public ??$destroy@UTreeParams@@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@@Z
.text$mn:00005094 ??$destroy@UTreeParams@@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@@Z proc near
.text$mn:00005094                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00005094                                         ; __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00005094
.text$mn:00005094 var_4           = dword ptr -4
.text$mn:00005094 arg_0           = dword ptr  8
.text$mn:00005094
.text$mn:00005094                 push    ebp
.text$mn:00005095                 mov     ebp, esp
.text$mn:00005097                 push    ecx
.text$mn:00005098                 mov     [ebp+var_4], ecx
.text$mn:0000509B                 mov     eax, [ebp+arg_0]
.text$mn:0000509E                 push    eax
.text$mn:0000509F                 mov     ecx, [ebp+var_4]
.text$mn:000050A2                 push    ecx
.text$mn:000050A3                 call    ??$destroy@UTreeParams@@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@@Z ; std::allocator_traits<std::allocator<TreeParams>>::destroy<TreeParams>(std::allocator<TreeParams> &,TreeParams *)
.text$mn:000050A8                 add     esp, 8
.text$mn:000050AB                 mov     esp, ebp
.text$mn:000050AD                 pop     ebp
.text$mn:000050AE                 retn    4
.text$mn:000050AE ??$destroy@UTreeParams@@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@@Z endp
.text$mn:000050AE
.text$mn:000050AE ; ---------------------------------------------------------------------------
.text$mn:000050B1                 align 4
.text$mn:000050B1 _text$mn        ends
.text$mn:000050B1
.text$mn:000050B4 ; ===========================================================================
.text$mn:000050B4
.text$mn:000050B4 ; Segment type: Pure code
.text$mn:000050B4 ; Segment permissions: Read/Execute
.text$mn:000050B4 _text$mn        segment para public 'CODE' use32
.text$mn:000050B4                 assume cs:_text$mn
.text$mn:000050B4                 ;org 50B4h
.text$mn:000050B4 ; COMDAT (pick any)
.text$mn:000050B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050B4
.text$mn:000050B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000050B4
.text$mn:000050B4 ; Attributes: bp-based frame
.text$mn:000050B4
.text$mn:000050B4 ; public: void __thiscall std::allocator<struct TreeParams>::destroy<struct TreeParams>(struct TreeParams *)
.text$mn:000050B4                 public ??$destroy@UTreeParams@@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@@Z
.text$mn:000050B4 ??$destroy@UTreeParams@@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@@Z proc near
.text$mn:000050B4                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeParams>>::destroy<TreeParams>(std::allocator<TreeParams> &,TreeParams *)+Ap
.text$mn:000050B4
.text$mn:000050B4 var_4           = dword ptr -4
.text$mn:000050B4 arg_0           = dword ptr  8
.text$mn:000050B4
.text$mn:000050B4                 push    ebp
.text$mn:000050B5                 mov     ebp, esp
.text$mn:000050B7                 push    ecx
.text$mn:000050B8                 mov     [ebp+var_4], ecx
.text$mn:000050BB                 push    0
.text$mn:000050BD                 mov     ecx, [ebp+arg_0]
.text$mn:000050C0                 call    ??_GTreeParams@@QAEPAXI@Z ; TreeParams::`scalar deleting destructor'(uint)
.text$mn:000050C5                 mov     esp, ebp
.text$mn:000050C7                 pop     ebp
.text$mn:000050C8                 retn    4
.text$mn:000050C8 ??$destroy@UTreeParams@@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@@Z endp
.text$mn:000050C8
.text$mn:000050C8 ; ---------------------------------------------------------------------------
.text$mn:000050CB                 align 4
.text$mn:000050CB _text$mn        ends
.text$mn:000050CB
.text$mn:000050CC ; ===========================================================================
.text$mn:000050CC
.text$mn:000050CC ; Segment type: Pure code
.text$mn:000050CC ; Segment permissions: Read/Execute
.text$mn:000050CC _text$mn        segment para public 'CODE' use32
.text$mn:000050CC                 assume cs:_text$mn
.text$mn:000050CC                 ;org 50CCh
.text$mn:000050CC ; COMDAT (pick any)
.text$mn:000050CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050CC
.text$mn:000050CC ; =============== S U B R O U T I N E =======================================
.text$mn:000050CC
.text$mn:000050CC ; Attributes: bp-based frame
.text$mn:000050CC
.text$mn:000050CC ; public: static void __cdecl std::allocator_traits<class std::allocator<struct TreeParams>>::destroy<struct TreeParams>(class std::allocator<struct TreeParams> &, struct TreeParams *)
.text$mn:000050CC                 public ??$destroy@UTreeParams@@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@@Z
.text$mn:000050CC ??$destroy@UTreeParams@@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@@Z proc near
.text$mn:000050CC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::destroy<TreeParams>(TreeParams *)+Fp
.text$mn:000050CC
.text$mn:000050CC arg_0           = dword ptr  8
.text$mn:000050CC arg_4           = dword ptr  0Ch
.text$mn:000050CC
.text$mn:000050CC                 push    ebp
.text$mn:000050CD                 mov     ebp, esp
.text$mn:000050CF                 mov     eax, [ebp+arg_4]
.text$mn:000050D2                 push    eax
.text$mn:000050D3                 mov     ecx, [ebp+arg_0]
.text$mn:000050D6                 call    ??$destroy@UTreeParams@@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@@Z ; std::allocator<TreeParams>::destroy<TreeParams>(TreeParams *)
.text$mn:000050DB                 pop     ebp
.text$mn:000050DC                 retn
.text$mn:000050DC ??$destroy@UTreeParams@@@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAXAAV?$allocator@UTreeParams@@@1@PAUTreeParams@@@Z endp
.text$mn:000050DC
.text$mn:000050DC ; ---------------------------------------------------------------------------
.text$mn:000050DD                 align 10h
.text$mn:000050DD _text$mn        ends
.text$mn:000050DD
.text$mn:000050E0 ; ===========================================================================
.text$mn:000050E0
.text$mn:000050E0 ; Segment type: Pure code
.text$mn:000050E0 ; Segment permissions: Read/Execute
.text$mn:000050E0 _text$mn        segment para public 'CODE' use32
.text$mn:000050E0                 assume cs:_text$mn
.text$mn:000050E0                 ;org 50E0h
.text$mn:000050E0 ; COMDAT (pick any)
.text$mn:000050E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050E0
.text$mn:000050E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000050E0
.text$mn:000050E0 ; Attributes: bp-based frame
.text$mn:000050E0
.text$mn:000050E0 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::destroy<struct TreeStateNode>(struct TreeStateNode *)
.text$mn:000050E0                 public ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z
.text$mn:000050E0 ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z proc near
.text$mn:000050E0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:000050E0                                         ; __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap ...
.text$mn:000050E0
.text$mn:000050E0 var_4           = dword ptr -4
.text$mn:000050E0 arg_0           = dword ptr  8
.text$mn:000050E0
.text$mn:000050E0                 push    ebp
.text$mn:000050E1                 mov     ebp, esp
.text$mn:000050E3                 push    ecx
.text$mn:000050E4                 mov     [ebp+var_4], ecx
.text$mn:000050E7                 mov     eax, [ebp+arg_0]
.text$mn:000050EA                 push    eax
.text$mn:000050EB                 mov     ecx, [ebp+var_4]
.text$mn:000050EE                 push    ecx
.text$mn:000050EF                 call    ??$destroy@UTreeStateNode@@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@@Z ; std::allocator_traits<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(std::allocator<TreeStateNode> &,TreeStateNode *)
.text$mn:000050F4                 add     esp, 8
.text$mn:000050F7                 mov     esp, ebp
.text$mn:000050F9                 pop     ebp
.text$mn:000050FA                 retn    4
.text$mn:000050FA ??$destroy@UTreeStateNode@@@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@@Z endp
.text$mn:000050FA
.text$mn:000050FA ; ---------------------------------------------------------------------------
.text$mn:000050FD                 align 10h
.text$mn:000050FD _text$mn        ends
.text$mn:000050FD
.text$mn:00005100 ; ===========================================================================
.text$mn:00005100
.text$mn:00005100 ; Segment type: Pure code
.text$mn:00005100 ; Segment permissions: Read/Execute
.text$mn:00005100 _text$mn        segment para public 'CODE' use32
.text$mn:00005100                 assume cs:_text$mn
.text$mn:00005100                 ;org 5100h
.text$mn:00005100 ; COMDAT (pick any)
.text$mn:00005100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005100
.text$mn:00005100 ; =============== S U B R O U T I N E =======================================
.text$mn:00005100
.text$mn:00005100 ; Attributes: bp-based frame
.text$mn:00005100
.text$mn:00005100 ; public: void __thiscall std::allocator<struct TreeStateNode>::destroy<struct TreeStateNode>(struct TreeStateNode *)
.text$mn:00005100                 public ??$destroy@UTreeStateNode@@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@@Z
.text$mn:00005100 ??$destroy@UTreeStateNode@@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@@Z proc near
.text$mn:00005100                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(std::allocator<TreeStateNode> &,TreeStateNode *)+Ap
.text$mn:00005100
.text$mn:00005100 var_4           = dword ptr -4
.text$mn:00005100 arg_0           = dword ptr  8
.text$mn:00005100
.text$mn:00005100                 push    ebp
.text$mn:00005101                 mov     ebp, esp
.text$mn:00005103                 push    ecx
.text$mn:00005104                 mov     [ebp+var_4], ecx
.text$mn:00005107                 push    0
.text$mn:00005109                 mov     ecx, [ebp+arg_0]
.text$mn:0000510C                 call    ??_GTreeStateNode@@QAEPAXI@Z ; TreeStateNode::`scalar deleting destructor'(uint)
.text$mn:00005111                 mov     esp, ebp
.text$mn:00005113                 pop     ebp
.text$mn:00005114                 retn    4
.text$mn:00005114 ??$destroy@UTreeStateNode@@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@@Z endp
.text$mn:00005114
.text$mn:00005114 ; ---------------------------------------------------------------------------
.text$mn:00005117                 align 4
.text$mn:00005117 _text$mn        ends
.text$mn:00005117
.text$mn:00005118 ; ===========================================================================
.text$mn:00005118
.text$mn:00005118 ; Segment type: Pure code
.text$mn:00005118 ; Segment permissions: Read/Execute
.text$mn:00005118 _text$mn        segment para public 'CODE' use32
.text$mn:00005118                 assume cs:_text$mn
.text$mn:00005118                 ;org 5118h
.text$mn:00005118 ; COMDAT (pick any)
.text$mn:00005118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005118
.text$mn:00005118 ; =============== S U B R O U T I N E =======================================
.text$mn:00005118
.text$mn:00005118 ; Attributes: bp-based frame
.text$mn:00005118
.text$mn:00005118 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct TreeStateNode>>::destroy<struct TreeStateNode>(class std::allocator<struct TreeStateNode> &, struct TreeStateNode *)
.text$mn:00005118                 public ??$destroy@UTreeStateNode@@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@@Z
.text$mn:00005118 ??$destroy@UTreeStateNode@@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@@Z proc near
.text$mn:00005118                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::destroy<TreeStateNode>(TreeStateNode *)+Fp
.text$mn:00005118
.text$mn:00005118 arg_0           = dword ptr  8
.text$mn:00005118 arg_4           = dword ptr  0Ch
.text$mn:00005118
.text$mn:00005118                 push    ebp
.text$mn:00005119                 mov     ebp, esp
.text$mn:0000511B                 mov     eax, [ebp+arg_4]
.text$mn:0000511E                 push    eax
.text$mn:0000511F                 mov     ecx, [ebp+arg_0]
.text$mn:00005122                 call    ??$destroy@UTreeStateNode@@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@@Z ; std::allocator<TreeStateNode>::destroy<TreeStateNode>(TreeStateNode *)
.text$mn:00005127                 pop     ebp
.text$mn:00005128                 retn
.text$mn:00005128 ??$destroy@UTreeStateNode@@@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAXAAV?$allocator@UTreeStateNode@@@1@PAUTreeStateNode@@@Z endp
.text$mn:00005128
.text$mn:00005128 ; ---------------------------------------------------------------------------
.text$mn:00005129                 align 4
.text$mn:00005129 _text$mn        ends
.text$mn:00005129
.text$mn:0000512C ; ===========================================================================
.text$mn:0000512C
.text$mn:0000512C ; Segment type: Pure code
.text$mn:0000512C ; Segment permissions: Read/Execute
.text$mn:0000512C _text$mn        segment para public 'CODE' use32
.text$mn:0000512C                 assume cs:_text$mn
.text$mn:0000512C                 ;org 512Ch
.text$mn:0000512C ; COMDAT (pick any)
.text$mn:0000512C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000512C
.text$mn:0000512C ; =============== S U B R O U T I N E =======================================
.text$mn:0000512C
.text$mn:0000512C ; Attributes: bp-based frame
.text$mn:0000512C
.text$mn:0000512C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:0000512C                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:0000512C ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:0000512C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Free_proxy(void)+22p
.text$mn:0000512C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Free_proxy(void)+22p ...
.text$mn:0000512C
.text$mn:0000512C var_4           = dword ptr -4
.text$mn:0000512C arg_0           = dword ptr  8
.text$mn:0000512C
.text$mn:0000512C                 push    ebp
.text$mn:0000512D                 mov     ebp, esp
.text$mn:0000512F                 push    ecx
.text$mn:00005130                 mov     [ebp+var_4], ecx
.text$mn:00005133                 mov     eax, [ebp+arg_0]
.text$mn:00005136                 push    eax
.text$mn:00005137                 mov     ecx, [ebp+var_4]
.text$mn:0000513A                 push    ecx
.text$mn:0000513B                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:00005140                 add     esp, 8
.text$mn:00005143                 mov     esp, ebp
.text$mn:00005145                 pop     ebp
.text$mn:00005146                 retn    4
.text$mn:00005146 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00005146
.text$mn:00005146 ; ---------------------------------------------------------------------------
.text$mn:00005149                 align 4
.text$mn:00005149 _text$mn        ends
.text$mn:00005149
.text$mn:0000514C ; ===========================================================================
.text$mn:0000514C
.text$mn:0000514C ; Segment type: Pure code
.text$mn:0000514C ; Segment permissions: Read/Execute
.text$mn:0000514C _text$mn        segment para public 'CODE' use32
.text$mn:0000514C                 assume cs:_text$mn
.text$mn:0000514C                 ;org 514Ch
.text$mn:0000514C ; COMDAT (pick any)
.text$mn:0000514C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000514C
.text$mn:0000514C ; =============== S U B R O U T I N E =======================================
.text$mn:0000514C
.text$mn:0000514C ; Attributes: bp-based frame
.text$mn:0000514C
.text$mn:0000514C ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:0000514C                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:0000514C ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:0000514C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:0000514C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:0000514C
.text$mn:0000514C var_4           = dword ptr -4
.text$mn:0000514C
.text$mn:0000514C                 push    ebp
.text$mn:0000514D                 mov     ebp, esp
.text$mn:0000514F                 push    ecx
.text$mn:00005150                 mov     [ebp+var_4], ecx
.text$mn:00005153                 mov     esp, ebp
.text$mn:00005155                 pop     ebp
.text$mn:00005156                 retn    4
.text$mn:00005156 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00005156
.text$mn:00005156 ; ---------------------------------------------------------------------------
.text$mn:00005159                 align 4
.text$mn:00005159 _text$mn        ends
.text$mn:00005159
.text$mn:0000515C ; ===========================================================================
.text$mn:0000515C
.text$mn:0000515C ; Segment type: Pure code
.text$mn:0000515C ; Segment permissions: Read/Execute
.text$mn:0000515C _text$mn        segment para public 'CODE' use32
.text$mn:0000515C                 assume cs:_text$mn
.text$mn:0000515C                 ;org 515Ch
.text$mn:0000515C ; COMDAT (pick any)
.text$mn:0000515C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000515C
.text$mn:0000515C ; =============== S U B R O U T I N E =======================================
.text$mn:0000515C
.text$mn:0000515C ; Attributes: bp-based frame
.text$mn:0000515C
.text$mn:0000515C ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:0000515C                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:0000515C ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:0000515C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:0000515C
.text$mn:0000515C arg_0           = dword ptr  8
.text$mn:0000515C arg_4           = dword ptr  0Ch
.text$mn:0000515C
.text$mn:0000515C                 push    ebp
.text$mn:0000515D                 mov     ebp, esp
.text$mn:0000515F                 mov     eax, [ebp+arg_4]
.text$mn:00005162                 push    eax
.text$mn:00005163                 mov     ecx, [ebp+arg_0]
.text$mn:00005166                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000516B                 pop     ebp
.text$mn:0000516C                 retn
.text$mn:0000516C ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:0000516C
.text$mn:0000516C ; ---------------------------------------------------------------------------
.text$mn:0000516D                 align 10h
.text$mn:0000516D _text$mn        ends
.text$mn:0000516D
.text$mn:00005170 ; ===========================================================================
.text$mn:00005170
.text$mn:00005170 ; Segment type: Pure code
.text$mn:00005170 ; Segment permissions: Read/Execute
.text$mn:00005170 _text$mn        segment para public 'CODE' use32
.text$mn:00005170                 assume cs:_text$mn
.text$mn:00005170                 ;org 5170h
.text$mn:00005170 ; COMDAT (pick any)
.text$mn:00005170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005170
.text$mn:00005170 ; =============== S U B R O U T I N E =======================================
.text$mn:00005170
.text$mn:00005170 ; Attributes: bp-based frame
.text$mn:00005170
.text$mn:00005170 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::destroy<struct foundInfo>(struct foundInfo *)
.text$mn:00005170                 public ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z
.text$mn:00005170 ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z proc near
.text$mn:00005170                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00005170
.text$mn:00005170 var_4           = dword ptr -4
.text$mn:00005170 arg_0           = dword ptr  8
.text$mn:00005170
.text$mn:00005170                 push    ebp
.text$mn:00005171                 mov     ebp, esp
.text$mn:00005173                 push    ecx
.text$mn:00005174                 mov     [ebp+var_4], ecx
.text$mn:00005177                 mov     eax, [ebp+arg_0]
.text$mn:0000517A                 push    eax
.text$mn:0000517B                 mov     ecx, [ebp+var_4]
.text$mn:0000517E                 push    ecx
.text$mn:0000517F                 call    ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z ; std::allocator_traits<std::allocator<foundInfo>>::destroy<foundInfo>(std::allocator<foundInfo> &,foundInfo *)
.text$mn:00005184                 add     esp, 8
.text$mn:00005187                 mov     esp, ebp
.text$mn:00005189                 pop     ebp
.text$mn:0000518A                 retn    4
.text$mn:0000518A ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z endp
.text$mn:0000518A
.text$mn:0000518A ; ---------------------------------------------------------------------------
.text$mn:0000518D                 align 10h
.text$mn:0000518D _text$mn        ends
.text$mn:0000518D
.text$mn:00005190 ; ===========================================================================
.text$mn:00005190
.text$mn:00005190 ; Segment type: Pure code
.text$mn:00005190 ; Segment permissions: Read/Execute
.text$mn:00005190 _text$mn        segment para public 'CODE' use32
.text$mn:00005190                 assume cs:_text$mn
.text$mn:00005190                 ;org 5190h
.text$mn:00005190 ; COMDAT (pick any)
.text$mn:00005190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005190
.text$mn:00005190 ; =============== S U B R O U T I N E =======================================
.text$mn:00005190
.text$mn:00005190 ; Attributes: bp-based frame
.text$mn:00005190
.text$mn:00005190 ; public: void __thiscall std::allocator<struct foundInfo>::destroy<struct foundInfo>(struct foundInfo *)
.text$mn:00005190                 public ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z
.text$mn:00005190 ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z proc near
.text$mn:00005190                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::destroy<foundInfo>(std::allocator<foundInfo> &,foundInfo *)+Ap
.text$mn:00005190
.text$mn:00005190 var_4           = dword ptr -4
.text$mn:00005190 arg_0           = dword ptr  8
.text$mn:00005190
.text$mn:00005190                 push    ebp
.text$mn:00005191                 mov     ebp, esp
.text$mn:00005193                 push    ecx
.text$mn:00005194                 mov     [ebp+var_4], ecx
.text$mn:00005197                 push    0
.text$mn:00005199                 mov     ecx, [ebp+arg_0]
.text$mn:0000519C                 call    ??_GfoundInfo@@QAEPAXI@Z ; foundInfo::`scalar deleting destructor'(uint)
.text$mn:000051A1                 mov     esp, ebp
.text$mn:000051A3                 pop     ebp
.text$mn:000051A4                 retn    4
.text$mn:000051A4 ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z endp
.text$mn:000051A4
.text$mn:000051A4 ; ---------------------------------------------------------------------------
.text$mn:000051A7                 align 4
.text$mn:000051A7 _text$mn        ends
.text$mn:000051A7
.text$mn:000051A8 ; ===========================================================================
.text$mn:000051A8
.text$mn:000051A8 ; Segment type: Pure code
.text$mn:000051A8 ; Segment permissions: Read/Execute
.text$mn:000051A8 _text$mn        segment para public 'CODE' use32
.text$mn:000051A8                 assume cs:_text$mn
.text$mn:000051A8                 ;org 51A8h
.text$mn:000051A8 ; COMDAT (pick any)
.text$mn:000051A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051A8
.text$mn:000051A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000051A8
.text$mn:000051A8 ; Attributes: bp-based frame
.text$mn:000051A8
.text$mn:000051A8 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct foundInfo>>::destroy<struct foundInfo>(class std::allocator<struct foundInfo> &, struct foundInfo *)
.text$mn:000051A8                 public ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z
.text$mn:000051A8 ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z proc near
.text$mn:000051A8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::destroy<foundInfo>(foundInfo *)+Fp
.text$mn:000051A8
.text$mn:000051A8 arg_0           = dword ptr  8
.text$mn:000051A8 arg_4           = dword ptr  0Ch
.text$mn:000051A8
.text$mn:000051A8                 push    ebp
.text$mn:000051A9                 mov     ebp, esp
.text$mn:000051AB                 mov     eax, [ebp+arg_4]
.text$mn:000051AE                 push    eax
.text$mn:000051AF                 mov     ecx, [ebp+arg_0]
.text$mn:000051B2                 call    ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z ; std::allocator<foundInfo>::destroy<foundInfo>(foundInfo *)
.text$mn:000051B7                 pop     ebp
.text$mn:000051B8                 retn
.text$mn:000051B8 ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z endp
.text$mn:000051B8
.text$mn:000051B8 ; ---------------------------------------------------------------------------
.text$mn:000051B9                 align 4
.text$mn:000051B9 _text$mn        ends
.text$mn:000051B9
.text$mn:000051BC ; ===========================================================================
.text$mn:000051BC
.text$mn:000051BC ; Segment type: Pure code
.text$mn:000051BC ; Segment permissions: Read/Execute
.text$mn:000051BC _text$mn        segment para public 'CODE' use32
.text$mn:000051BC                 assume cs:_text$mn
.text$mn:000051BC                 ;org 51BCh
.text$mn:000051BC ; COMDAT (pick any)
.text$mn:000051BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051BC
.text$mn:000051BC ; =============== S U B R O U T I N E =======================================
.text$mn:000051BC
.text$mn:000051BC ; Attributes: bp-based frame
.text$mn:000051BC
.text$mn:000051BC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000051BC                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000051BC ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000051BC                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:000051BC                                         ; __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:000051BC
.text$mn:000051BC var_4           = dword ptr -4
.text$mn:000051BC arg_0           = dword ptr  8
.text$mn:000051BC
.text$mn:000051BC                 push    ebp
.text$mn:000051BD                 mov     ebp, esp
.text$mn:000051BF                 push    ecx
.text$mn:000051C0                 mov     [ebp+var_4], ecx
.text$mn:000051C3                 mov     eax, [ebp+arg_0]
.text$mn:000051C6                 push    eax
.text$mn:000051C7                 mov     ecx, [ebp+var_4]
.text$mn:000051CA                 push    ecx
.text$mn:000051CB                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000051D0                 add     esp, 8
.text$mn:000051D3                 mov     esp, ebp
.text$mn:000051D5                 pop     ebp
.text$mn:000051D6                 retn    4
.text$mn:000051D6 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000051D6
.text$mn:000051D6 ; ---------------------------------------------------------------------------
.text$mn:000051D9                 align 4
.text$mn:000051D9 _text$mn        ends
.text$mn:000051D9
.text$mn:000051DC ; ===========================================================================
.text$mn:000051DC
.text$mn:000051DC ; Segment type: Pure code
.text$mn:000051DC ; Segment permissions: Read/Execute
.text$mn:000051DC _text$mn        segment para public 'CODE' use32
.text$mn:000051DC                 assume cs:_text$mn
.text$mn:000051DC                 ;org 51DCh
.text$mn:000051DC ; COMDAT (pick any)
.text$mn:000051DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051DC
.text$mn:000051DC ; =============== S U B R O U T I N E =======================================
.text$mn:000051DC
.text$mn:000051DC ; Attributes: bp-based frame
.text$mn:000051DC
.text$mn:000051DC ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000051DC                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000051DC ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000051DC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:000051DC
.text$mn:000051DC var_4           = dword ptr -4
.text$mn:000051DC arg_0           = dword ptr  8
.text$mn:000051DC
.text$mn:000051DC                 push    ebp
.text$mn:000051DD                 mov     ebp, esp
.text$mn:000051DF                 push    ecx
.text$mn:000051E0                 mov     [ebp+var_4], ecx
.text$mn:000051E3                 push    0
.text$mn:000051E5                 mov     ecx, [ebp+arg_0]
.text$mn:000051E8                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:000051ED                 mov     esp, ebp
.text$mn:000051EF                 pop     ebp
.text$mn:000051F0                 retn    4
.text$mn:000051F0 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000051F0
.text$mn:000051F0 ; ---------------------------------------------------------------------------
.text$mn:000051F3                 align 4
.text$mn:000051F3 _text$mn        ends
.text$mn:000051F3
.text$mn:000051F4 ; ===========================================================================
.text$mn:000051F4
.text$mn:000051F4 ; Segment type: Pure code
.text$mn:000051F4 ; Segment permissions: Read/Execute
.text$mn:000051F4 _text$mn        segment para public 'CODE' use32
.text$mn:000051F4                 assume cs:_text$mn
.text$mn:000051F4                 ;org 51F4h
.text$mn:000051F4 ; COMDAT (pick any)
.text$mn:000051F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051F4
.text$mn:000051F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051F4
.text$mn:000051F4 ; Attributes: bp-based frame
.text$mn:000051F4
.text$mn:000051F4 ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000051F4                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000051F4 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000051F4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:000051F4
.text$mn:000051F4 arg_0           = dword ptr  8
.text$mn:000051F4 arg_4           = dword ptr  0Ch
.text$mn:000051F4
.text$mn:000051F4                 push    ebp
.text$mn:000051F5                 mov     ebp, esp
.text$mn:000051F7                 mov     eax, [ebp+arg_4]
.text$mn:000051FA                 push    eax
.text$mn:000051FB                 mov     ecx, [ebp+arg_0]
.text$mn:000051FE                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005203                 pop     ebp
.text$mn:00005204                 retn
.text$mn:00005204 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00005204
.text$mn:00005204 ; ---------------------------------------------------------------------------
.text$mn:00005205                 align 4
.text$mn:00005205 _text$mn        ends
.text$mn:00005205
.text$mn:00005208 ; ===========================================================================
.text$mn:00005208
.text$mn:00005208 ; Segment type: Pure code
.text$mn:00005208 ; Segment permissions: Read/Execute
.text$mn:00005208 _text$mn        segment para public 'CODE' use32
.text$mn:00005208                 assume cs:_text$mn
.text$mn:00005208                 ;org 5208h
.text$mn:00005208 ; COMDAT (pick any)
.text$mn:00005208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005208
.text$mn:00005208 ; =============== S U B R O U T I N E =======================================
.text$mn:00005208
.text$mn:00005208 ; Attributes: bp-based frame
.text$mn:00005208
.text$mn:00005208 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00005208                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00005208 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00005208                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00005208                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00005208
.text$mn:00005208 arg_0           = dword ptr  8
.text$mn:00005208
.text$mn:00005208                 push    ebp
.text$mn:00005209                 mov     ebp, esp
.text$mn:0000520B                 mov     eax, [ebp+arg_0]
.text$mn:0000520E                 pop     ebp
.text$mn:0000520F                 retn
.text$mn:0000520F ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:0000520F
.text$mn:0000520F _text$mn        ends
.text$mn:0000520F
.text$mn:00005210 ; ===========================================================================
.text$mn:00005210
.text$mn:00005210 ; Segment type: Pure code
.text$mn:00005210 ; Segment permissions: Read/Execute
.text$mn:00005210 _text$mn        segment para public 'CODE' use32
.text$mn:00005210                 assume cs:_text$mn
.text$mn:00005210                 ;org 5210h
.text$mn:00005210 ; COMDAT (pick any)
.text$mn:00005210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005210
.text$mn:00005210 ; =============== S U B R O U T I N E =======================================
.text$mn:00005210
.text$mn:00005210 ; Attributes: bp-based frame
.text$mn:00005210
.text$mn:00005210 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005210                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00005210 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00005210                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00005210                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00005210
.text$mn:00005210 arg_0           = dword ptr  8
.text$mn:00005210
.text$mn:00005210                 push    ebp
.text$mn:00005211                 mov     ebp, esp
.text$mn:00005213                 mov     eax, [ebp+arg_0]
.text$mn:00005216                 pop     ebp
.text$mn:00005217                 retn
.text$mn:00005217 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00005217
.text$mn:00005217 _text$mn        ends
.text$mn:00005217
.text$mn:00005218 ; ===========================================================================
.text$mn:00005218
.text$mn:00005218 ; Segment type: Pure code
.text$mn:00005218 ; Segment permissions: Read/Execute
.text$mn:00005218 _text$mn        segment para public 'CODE' use32
.text$mn:00005218                 assume cs:_text$mn
.text$mn:00005218                 ;org 5218h
.text$mn:00005218 ; COMDAT (pick any)
.text$mn:00005218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005218
.text$mn:00005218 ; =============== S U B R O U T I N E =======================================
.text$mn:00005218
.text$mn:00005218 ; Attributes: bp-based frame
.text$mn:00005218
.text$mn:00005218 ; struct TreeParams & __cdecl std::forward<struct TreeParams &>(struct TreeParams &)
.text$mn:00005218                 public ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z
.text$mn:00005218 ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z proc near
.text$mn:00005218                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+Bp
.text$mn:00005218                                         ; std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+4Ap ...
.text$mn:00005218
.text$mn:00005218 arg_0           = dword ptr  8
.text$mn:00005218
.text$mn:00005218                 push    ebp
.text$mn:00005219                 mov     ebp, esp
.text$mn:0000521B                 mov     eax, [ebp+arg_0]
.text$mn:0000521E                 pop     ebp
.text$mn:0000521F                 retn
.text$mn:0000521F ??$forward@AAUTreeParams@@@std@@YAAAUTreeParams@@AAU1@@Z endp
.text$mn:0000521F
.text$mn:0000521F _text$mn        ends
.text$mn:0000521F
.text$mn:00005220 ; ===========================================================================
.text$mn:00005220
.text$mn:00005220 ; Segment type: Pure code
.text$mn:00005220 ; Segment permissions: Read/Execute
.text$mn:00005220 _text$mn        segment para public 'CODE' use32
.text$mn:00005220                 assume cs:_text$mn
.text$mn:00005220                 ;org 5220h
.text$mn:00005220 ; COMDAT (pick any)
.text$mn:00005220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005220
.text$mn:00005220 ; =============== S U B R O U T I N E =======================================
.text$mn:00005220
.text$mn:00005220 ; Attributes: bp-based frame
.text$mn:00005220
.text$mn:00005220 ; struct TreeStateNode & __cdecl std::forward<struct TreeStateNode &>(struct TreeStateNode &)
.text$mn:00005220                 public ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z
.text$mn:00005220 ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z proc near
.text$mn:00005220                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+Bp
.text$mn:00005220                                         ; std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+4Ap ...
.text$mn:00005220
.text$mn:00005220 arg_0           = dword ptr  8
.text$mn:00005220
.text$mn:00005220                 push    ebp
.text$mn:00005221                 mov     ebp, esp
.text$mn:00005223                 mov     eax, [ebp+arg_0]
.text$mn:00005226                 pop     ebp
.text$mn:00005227                 retn
.text$mn:00005227 ??$forward@AAUTreeStateNode@@@std@@YAAAUTreeStateNode@@AAU1@@Z endp
.text$mn:00005227
.text$mn:00005227 _text$mn        ends
.text$mn:00005227
.text$mn:00005228 ; ===========================================================================
.text$mn:00005228
.text$mn:00005228 ; Segment type: Pure code
.text$mn:00005228 ; Segment permissions: Read/Execute
.text$mn:00005228 _text$mn        segment para public 'CODE' use32
.text$mn:00005228                 assume cs:_text$mn
.text$mn:00005228                 ;org 5228h
.text$mn:00005228 ; COMDAT (pick any)
.text$mn:00005228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005228
.text$mn:00005228 ; =============== S U B R O U T I N E =======================================
.text$mn:00005228
.text$mn:00005228 ; Attributes: bp-based frame
.text$mn:00005228
.text$mn:00005228 ; struct TreeParams const & __cdecl std::forward<struct TreeParams const &>(struct TreeParams const &)
.text$mn:00005228                 public ??$forward@ABUTreeParams@@@std@@YAABUTreeParams@@ABU1@@Z
.text$mn:00005228 ??$forward@ABUTreeParams@@@std@@YAABUTreeParams@@ABU1@@Z proc near
.text$mn:00005228                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(TreeParams *,TreeParams const &)+Bp
.text$mn:00005228                                         ; std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(std::allocator<TreeParams> &,TreeParams *,TreeParams const &)+7p
.text$mn:00005228
.text$mn:00005228 arg_0           = dword ptr  8
.text$mn:00005228
.text$mn:00005228                 push    ebp
.text$mn:00005229                 mov     ebp, esp
.text$mn:0000522B                 mov     eax, [ebp+arg_0]
.text$mn:0000522E                 pop     ebp
.text$mn:0000522F                 retn
.text$mn:0000522F ??$forward@ABUTreeParams@@@std@@YAABUTreeParams@@ABU1@@Z endp
.text$mn:0000522F
.text$mn:0000522F _text$mn        ends
.text$mn:0000522F
.text$mn:00005230 ; ===========================================================================
.text$mn:00005230
.text$mn:00005230 ; Segment type: Pure code
.text$mn:00005230 ; Segment permissions: Read/Execute
.text$mn:00005230 _text$mn        segment para public 'CODE' use32
.text$mn:00005230                 assume cs:_text$mn
.text$mn:00005230                 ;org 5230h
.text$mn:00005230 ; COMDAT (pick any)
.text$mn:00005230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005230
.text$mn:00005230 ; =============== S U B R O U T I N E =======================================
.text$mn:00005230
.text$mn:00005230 ; Attributes: bp-based frame
.text$mn:00005230
.text$mn:00005230 ; struct TreeStateNode const & __cdecl std::forward<struct TreeStateNode const &>(struct TreeStateNode const &)
.text$mn:00005230                 public ??$forward@ABUTreeStateNode@@@std@@YAABUTreeStateNode@@ABU1@@Z
.text$mn:00005230 ??$forward@ABUTreeStateNode@@@std@@YAABUTreeStateNode@@ABU1@@Z proc near
.text$mn:00005230                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(TreeStateNode *,TreeStateNode const &)+Bp
.text$mn:00005230                                         ; std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(std::allocator<TreeStateNode> &,TreeStateNode *,TreeStateNode const &)+7p
.text$mn:00005230
.text$mn:00005230 arg_0           = dword ptr  8
.text$mn:00005230
.text$mn:00005230                 push    ebp
.text$mn:00005231                 mov     ebp, esp
.text$mn:00005233                 mov     eax, [ebp+arg_0]
.text$mn:00005236                 pop     ebp
.text$mn:00005237                 retn
.text$mn:00005237 ??$forward@ABUTreeStateNode@@@std@@YAABUTreeStateNode@@ABU1@@Z endp
.text$mn:00005237
.text$mn:00005237 _text$mn        ends
.text$mn:00005237
.text$mn:00005238 ; ===========================================================================
.text$mn:00005238
.text$mn:00005238 ; Segment type: Pure code
.text$mn:00005238 ; Segment permissions: Read/Execute
.text$mn:00005238 _text$mn        segment para public 'CODE' use32
.text$mn:00005238                 assume cs:_text$mn
.text$mn:00005238                 ;org 5238h
.text$mn:00005238 ; COMDAT (pick any)
.text$mn:00005238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005238
.text$mn:00005238 ; =============== S U B R O U T I N E =======================================
.text$mn:00005238
.text$mn:00005238 ; Attributes: bp-based frame
.text$mn:00005238
.text$mn:00005238 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00005238                 public ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
.text$mn:00005238 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z proc near
.text$mn:00005238                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:00005238                                         ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7p
.text$mn:00005238
.text$mn:00005238 arg_0           = dword ptr  8
.text$mn:00005238
.text$mn:00005238                 push    ebp
.text$mn:00005239                 mov     ebp, esp
.text$mn:0000523B                 mov     eax, [ebp+arg_0]
.text$mn:0000523E                 pop     ebp
.text$mn:0000523F                 retn
.text$mn:0000523F ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z endp
.text$mn:0000523F
.text$mn:0000523F _text$mn        ends
.text$mn:0000523F
.text$mn:00005240 ; ===========================================================================
.text$mn:00005240
.text$mn:00005240 ; Segment type: Pure code
.text$mn:00005240 ; Segment permissions: Read/Execute
.text$mn:00005240 _text$mn        segment para public 'CODE' use32
.text$mn:00005240                 assume cs:_text$mn
.text$mn:00005240                 ;org 5240h
.text$mn:00005240 ; COMDAT (pick any)
.text$mn:00005240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005240
.text$mn:00005240 ; =============== S U B R O U T I N E =======================================
.text$mn:00005240
.text$mn:00005240 ; Attributes: bp-based frame
.text$mn:00005240
.text$mn:00005240 ; struct TreeParams && __cdecl std::forward<struct TreeParams>(struct TreeParams &)
.text$mn:00005240                 public ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z
.text$mn:00005240 ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z proc near
.text$mn:00005240                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+Bp
.text$mn:00005240                                         ; std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+4Ap ...
.text$mn:00005240
.text$mn:00005240 arg_0           = dword ptr  8
.text$mn:00005240
.text$mn:00005240                 push    ebp
.text$mn:00005241                 mov     ebp, esp
.text$mn:00005243                 mov     eax, [ebp+arg_0]
.text$mn:00005246                 pop     ebp
.text$mn:00005247                 retn
.text$mn:00005247 ??$forward@UTreeParams@@@std@@YA$$QAUTreeParams@@AAU1@@Z endp
.text$mn:00005247
.text$mn:00005247 _text$mn        ends
.text$mn:00005247
.text$mn:00005248 ; ===========================================================================
.text$mn:00005248
.text$mn:00005248 ; Segment type: Pure code
.text$mn:00005248 ; Segment permissions: Read/Execute
.text$mn:00005248 _text$mn        segment para public 'CODE' use32
.text$mn:00005248                 assume cs:_text$mn
.text$mn:00005248                 ;org 5248h
.text$mn:00005248 ; COMDAT (pick any)
.text$mn:00005248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005248
.text$mn:00005248 ; =============== S U B R O U T I N E =======================================
.text$mn:00005248
.text$mn:00005248 ; Attributes: bp-based frame
.text$mn:00005248
.text$mn:00005248 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00005248                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00005248 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00005248                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00005248                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00005248
.text$mn:00005248 arg_0           = dword ptr  8
.text$mn:00005248
.text$mn:00005248                 push    ebp
.text$mn:00005249                 mov     ebp, esp
.text$mn:0000524B                 mov     eax, [ebp+arg_0]
.text$mn:0000524E                 pop     ebp
.text$mn:0000524F                 retn
.text$mn:0000524F ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:0000524F
.text$mn:0000524F _text$mn        ends
.text$mn:0000524F
.text$mn:00005250 ; ===========================================================================
.text$mn:00005250
.text$mn:00005250 ; Segment type: Pure code
.text$mn:00005250 ; Segment permissions: Read/Execute
.text$mn:00005250 _text$mn        segment para public 'CODE' use32
.text$mn:00005250                 assume cs:_text$mn
.text$mn:00005250                 ;org 5250h
.text$mn:00005250 ; COMDAT (pick any)
.text$mn:00005250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005250
.text$mn:00005250 ; =============== S U B R O U T I N E =======================================
.text$mn:00005250
.text$mn:00005250 ; Attributes: bp-based frame
.text$mn:00005250
.text$mn:00005250 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005250                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005250 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005250                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D6p
.text$mn:00005250
.text$mn:00005250 arg_0           = dword ptr  8
.text$mn:00005250
.text$mn:00005250                 push    ebp
.text$mn:00005251                 mov     ebp, esp
.text$mn:00005253                 mov     eax, [ebp+arg_0]
.text$mn:00005256                 pop     ebp
.text$mn:00005257                 retn
.text$mn:00005257 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00005257
.text$mn:00005257 _text$mn        ends
.text$mn:00005257
.text$mn:00005258 ; ===========================================================================
.text$mn:00005258
.text$mn:00005258 ; Segment type: Pure code
.text$mn:00005258 ; Segment permissions: Read/Execute
.text$mn:00005258 _text$mn        segment para public 'CODE' use32
.text$mn:00005258                 assume cs:_text$mn
.text$mn:00005258                 ;org 5258h
.text$mn:00005258 ; COMDAT (pick any)
.text$mn:00005258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005258
.text$mn:00005258 ; =============== S U B R O U T I N E =======================================
.text$mn:00005258
.text$mn:00005258 ; Attributes: bp-based frame
.text$mn:00005258
.text$mn:00005258 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005258                 public ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005258 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005258                                         ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+23p
.text$mn:00005258
.text$mn:00005258 arg_0           = dword ptr  8
.text$mn:00005258
.text$mn:00005258                 push    ebp
.text$mn:00005259                 mov     ebp, esp
.text$mn:0000525B                 mov     eax, [ebp+arg_0]
.text$mn:0000525E                 pop     ebp
.text$mn:0000525F                 retn
.text$mn:0000525F ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:0000525F
.text$mn:0000525F _text$mn        ends
.text$mn:0000525F
.text$mn:00005260 ; ===========================================================================
.text$mn:00005260
.text$mn:00005260 ; Segment type: Pure code
.text$mn:00005260 ; Segment permissions: Read/Execute
.text$mn:00005260 _text$mn        segment para public 'CODE' use32
.text$mn:00005260                 assume cs:_text$mn
.text$mn:00005260                 ;org 5260h
.text$mn:00005260 ; COMDAT (pick any)
.text$mn:00005260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005260
.text$mn:00005260 ; =============== S U B R O U T I N E =======================================
.text$mn:00005260
.text$mn:00005260 ; Attributes: bp-based frame
.text$mn:00005260
.text$mn:00005260 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00005260                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005260 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00005260                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)+2Dp
.text$mn:00005260
.text$mn:00005260 var_10          = dword ptr -10h
.text$mn:00005260 var_C           = dword ptr -0Ch
.text$mn:00005260 var_4           = dword ptr -4
.text$mn:00005260 arg_0           = dword ptr  8
.text$mn:00005260
.text$mn:00005260                 push    ebp
.text$mn:00005261                 mov     ebp, esp
.text$mn:00005263                 push    0FFFFFFFFh
.text$mn:00005265                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000526A                 mov     eax, large fs:0
.text$mn:00005270                 push    eax
.text$mn:00005271                 push    ecx
.text$mn:00005272                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005277                 xor     eax, ebp
.text$mn:00005279                 push    eax
.text$mn:0000527A                 lea     eax, [ebp+var_C]
.text$mn:0000527D                 mov     large fs:0, eax
.text$mn:00005283                 mov     [ebp+var_10], ecx
.text$mn:00005286                 mov     eax, [ebp+arg_0]
.text$mn:00005289                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000528A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000528D                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00005292                 mov     [ebp+var_4], 0
.text$mn:00005299                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000052A0                 mov     eax, [ebp+var_10]
.text$mn:000052A3                 mov     ecx, [ebp+var_C]
.text$mn:000052A6                 mov     large fs:0, ecx
.text$mn:000052AD                 pop     ecx
.text$mn:000052AE                 mov     esp, ebp
.text$mn:000052B0                 pop     ebp
.text$mn:000052B1                 retn    4
.text$mn:000052B1 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:000052B1
.text$mn:000052B1 _text$mn        ends
.text$mn:000052B1
.text$x:000052B4 ; ===========================================================================
.text$x:000052B4
.text$x:000052B4 ; Segment type: Pure code
.text$x:000052B4 ; Segment permissions: Read/Execute
.text$x:000052B4 _text$x         segment para public 'CODE' use32
.text$x:000052B4                 assume cs:_text$x
.text$x:000052B4                 ;org 52B4h
.text$x:000052B4 ; COMDAT (pick associative to section at 5260)
.text$x:000052B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000052B4
.text$x:000052B4 ; =============== S U B R O U T I N E =======================================
.text$x:000052B4
.text$x:000052B4
.text$x:000052B4 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:000052B4                                         ; DATA XREF: .xdata$x:0000E1BCo
.text$x:000052B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000052B7                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000052B7 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:000052B7
.text$x:000052BC
.text$x:000052BC ; =============== S U B R O U T I N E =======================================
.text$x:000052BC
.text$x:000052BC
.text$x:000052BC __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:000052BC                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12> const &)+5o
.text$x:000052BC
.text$x:000052BC arg_4           = dword ptr  8
.text$x:000052BC
.text$x:000052BC                 mov     edx, [esp+arg_4]
.text$x:000052C0                 lea     eax, [edx+0Ch]
.text$x:000052C3                 mov     ecx, [edx-8]
.text$x:000052C6                 xor     ecx, eax
.text$x:000052C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000052CD                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:000052D2                 jmp     ___CxxFrameHandler3
.text$x:000052D2 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:000052D2
.text$x:000052D2 ; ---------------------------------------------------------------------------
.text$x:000052D7                 align 4
.text$x:000052D7 _text$x         ends
.text$x:000052D7
.text$mn:000052D8 ; ===========================================================================
.text$mn:000052D8
.text$mn:000052D8 ; Segment type: Pure code
.text$mn:000052D8 ; Segment permissions: Read/Execute
.text$mn:000052D8 _text$mn        segment para public 'CODE' use32
.text$mn:000052D8                 assume cs:_text$mn
.text$mn:000052D8                 ;org 52D8h
.text$mn:000052D8 ; COMDAT (pick any)
.text$mn:000052D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052D8
.text$mn:000052D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000052D8
.text$mn:000052D8 ; Attributes: bp-based frame
.text$mn:000052D8
.text$mn:000052D8 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct TreeStateNode, int, struct TreeStateNode const *, struct TreeStateNode const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, struct TreeStateNode, int, struct TreeStateNode const *, struct TreeStateNode const &, struct std::_Iterator_base12>(void)
.text$mn:000052D8                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000052D8 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000052D8                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(TreeStateNode *,std::_Container_base12 const *)+29p
.text$mn:000052D8
.text$mn:000052D8 var_10          = dword ptr -10h
.text$mn:000052D8 var_C           = dword ptr -0Ch
.text$mn:000052D8 var_4           = dword ptr -4
.text$mn:000052D8
.text$mn:000052D8                 push    ebp
.text$mn:000052D9                 mov     ebp, esp
.text$mn:000052DB                 push    0FFFFFFFFh
.text$mn:000052DD                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000052E2                 mov     eax, large fs:0
.text$mn:000052E8                 push    eax
.text$mn:000052E9                 push    ecx
.text$mn:000052EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000052EF                 xor     eax, ebp
.text$mn:000052F1                 push    eax
.text$mn:000052F2                 lea     eax, [ebp+var_C]
.text$mn:000052F5                 mov     large fs:0, eax
.text$mn:000052FB                 mov     [ebp+var_10], ecx
.text$mn:000052FE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005301                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00005306                 mov     [ebp+var_4], 0
.text$mn:0000530D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005314                 mov     eax, [ebp+var_10]
.text$mn:00005317                 mov     ecx, [ebp+var_C]
.text$mn:0000531A                 mov     large fs:0, ecx
.text$mn:00005321                 pop     ecx
.text$mn:00005322                 mov     esp, ebp
.text$mn:00005324                 pop     ebp
.text$mn:00005325                 retn
.text$mn:00005325 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00005325
.text$mn:00005325 ; ---------------------------------------------------------------------------
.text$mn:00005326                 align 4
.text$mn:00005326 _text$mn        ends
.text$mn:00005326
.text$x:00005328 ; ===========================================================================
.text$x:00005328
.text$x:00005328 ; Segment type: Pure code
.text$x:00005328 ; Segment permissions: Read/Execute
.text$x:00005328 _text$x         segment para public 'CODE' use32
.text$x:00005328                 assume cs:_text$x
.text$x:00005328                 ;org 5328h
.text$x:00005328 ; COMDAT (pick associative to section at 52D8)
.text$x:00005328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005328
.text$x:00005328 ; =============== S U B R O U T I N E =======================================
.text$x:00005328
.text$x:00005328
.text$x:00005328 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005328                                         ; DATA XREF: .xdata$x:0000E164o
.text$x:00005328                 mov     ecx, [ebp-10h]  ; this
.text$x:0000532B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000532B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000532B
.text$x:00005330
.text$x:00005330 ; =============== S U B R O U T I N E =======================================
.text$x:00005330
.text$x:00005330
.text$x:00005330 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00005330                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)+5o
.text$x:00005330
.text$x:00005330 arg_4           = dword ptr  8
.text$x:00005330
.text$x:00005330                 mov     edx, [esp+arg_4]
.text$x:00005334                 lea     eax, [edx+0Ch]
.text$x:00005337                 mov     ecx, [edx-8]
.text$x:0000533A                 xor     ecx, eax
.text$x:0000533C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005341                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00005346                 jmp     ___CxxFrameHandler3
.text$x:00005346 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00005346
.text$x:00005346 ; ---------------------------------------------------------------------------
.text$x:0000534B                 align 4
.text$x:0000534B _text$x         ends
.text$x:0000534B
.text$mn:0000534C ; ===========================================================================
.text$mn:0000534C
.text$mn:0000534C ; Segment type: Pure code
.text$mn:0000534C ; Segment permissions: Read/Execute
.text$mn:0000534C _text$mn        segment para public 'CODE' use32
.text$mn:0000534C                 assume cs:_text$mn
.text$mn:0000534C                 ;org 534Ch
.text$mn:0000534C ; COMDAT (pick any)
.text$mn:0000534C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000534C
.text$mn:0000534C ; =============== S U B R O U T I N E =======================================
.text$mn:0000534C
.text$mn:0000534C ; Attributes: bp-based frame
.text$mn:0000534C
.text$mn:0000534C ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:0000534C                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000534C ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:0000534C                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Dp
.text$mn:0000534C
.text$mn:0000534C var_10          = dword ptr -10h
.text$mn:0000534C var_C           = dword ptr -0Ch
.text$mn:0000534C var_4           = dword ptr -4
.text$mn:0000534C arg_0           = dword ptr  8
.text$mn:0000534C
.text$mn:0000534C                 push    ebp
.text$mn:0000534D                 mov     ebp, esp
.text$mn:0000534F                 push    0FFFFFFFFh
.text$mn:00005351                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005356                 mov     eax, large fs:0
.text$mn:0000535C                 push    eax
.text$mn:0000535D                 push    ecx
.text$mn:0000535E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005363                 xor     eax, ebp
.text$mn:00005365                 push    eax
.text$mn:00005366                 lea     eax, [ebp+var_C]
.text$mn:00005369                 mov     large fs:0, eax
.text$mn:0000536F                 mov     [ebp+var_10], ecx
.text$mn:00005372                 mov     eax, [ebp+arg_0]
.text$mn:00005375                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005376                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005379                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:0000537E                 mov     [ebp+var_4], 0
.text$mn:00005385                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000538C                 mov     eax, [ebp+var_10]
.text$mn:0000538F                 mov     ecx, [ebp+var_C]
.text$mn:00005392                 mov     large fs:0, ecx
.text$mn:00005399                 pop     ecx
.text$mn:0000539A                 mov     esp, ebp
.text$mn:0000539C                 pop     ebp
.text$mn:0000539D                 retn    4
.text$mn:0000539D ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:0000539D
.text$mn:0000539D _text$mn        ends
.text$mn:0000539D
.text$x:000053A0 ; ===========================================================================
.text$x:000053A0
.text$x:000053A0 ; Segment type: Pure code
.text$x:000053A0 ; Segment permissions: Read/Execute
.text$x:000053A0 _text$x         segment para public 'CODE' use32
.text$x:000053A0                 assume cs:_text$x
.text$x:000053A0                 ;org 53A0h
.text$x:000053A0 ; COMDAT (pick associative to section at 534C)
.text$x:000053A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000053A0
.text$x:000053A0 ; =============== S U B R O U T I N E =======================================
.text$x:000053A0
.text$x:000053A0
.text$x:000053A0 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:000053A0                                         ; DATA XREF: .xdata$x:0000DCE4o
.text$x:000053A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000053A3                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000053A3 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:000053A3
.text$x:000053A8
.text$x:000053A8 ; =============== S U B R O U T I N E =======================================
.text$x:000053A8
.text$x:000053A8
.text$x:000053A8 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:000053A8                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+5o
.text$x:000053A8
.text$x:000053A8 arg_4           = dword ptr  8
.text$x:000053A8
.text$x:000053A8                 mov     edx, [esp+arg_4]
.text$x:000053AC                 lea     eax, [edx+0Ch]
.text$x:000053AF                 mov     ecx, [edx-8]
.text$x:000053B2                 xor     ecx, eax
.text$x:000053B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053B9                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:000053BE                 jmp     ___CxxFrameHandler3
.text$x:000053BE __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:000053BE
.text$x:000053BE ; ---------------------------------------------------------------------------
.text$x:000053C3                 align 4
.text$x:000053C3 _text$x         ends
.text$x:000053C3
.text$mn:000053C4 ; ===========================================================================
.text$mn:000053C4
.text$mn:000053C4 ; Segment type: Pure code
.text$mn:000053C4 ; Segment permissions: Read/Execute
.text$mn:000053C4 _text$mn        segment para public 'CODE' use32
.text$mn:000053C4                 assume cs:_text$mn
.text$mn:000053C4                 ;org 53C4h
.text$mn:000053C4 ; COMDAT (pick any)
.text$mn:000053C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053C4
.text$mn:000053C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000053C4
.text$mn:000053C4 ; Attributes: bp-based frame
.text$mn:000053C4
.text$mn:000053C4 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:000053C4                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000053C4 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000053C4                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+29p
.text$mn:000053C4
.text$mn:000053C4 var_10          = dword ptr -10h
.text$mn:000053C4 var_C           = dword ptr -0Ch
.text$mn:000053C4 var_4           = dword ptr -4
.text$mn:000053C4
.text$mn:000053C4                 push    ebp
.text$mn:000053C5                 mov     ebp, esp
.text$mn:000053C7                 push    0FFFFFFFFh
.text$mn:000053C9                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000053CE                 mov     eax, large fs:0
.text$mn:000053D4                 push    eax
.text$mn:000053D5                 push    ecx
.text$mn:000053D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053DB                 xor     eax, ebp
.text$mn:000053DD                 push    eax
.text$mn:000053DE                 lea     eax, [ebp+var_C]
.text$mn:000053E1                 mov     large fs:0, eax
.text$mn:000053E7                 mov     [ebp+var_10], ecx
.text$mn:000053EA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000053ED                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:000053F2                 mov     [ebp+var_4], 0
.text$mn:000053F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005400                 mov     eax, [ebp+var_10]
.text$mn:00005403                 mov     ecx, [ebp+var_C]
.text$mn:00005406                 mov     large fs:0, ecx
.text$mn:0000540D                 pop     ecx
.text$mn:0000540E                 mov     esp, ebp
.text$mn:00005410                 pop     ebp
.text$mn:00005411                 retn
.text$mn:00005411 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00005411
.text$mn:00005411 ; ---------------------------------------------------------------------------
.text$mn:00005412                 align 4
.text$mn:00005412 _text$mn        ends
.text$mn:00005412
.text$x:00005414 ; ===========================================================================
.text$x:00005414
.text$x:00005414 ; Segment type: Pure code
.text$x:00005414 ; Segment permissions: Read/Execute
.text$x:00005414 _text$x         segment para public 'CODE' use32
.text$x:00005414                 assume cs:_text$x
.text$x:00005414                 ;org 5414h
.text$x:00005414 ; COMDAT (pick associative to section at 53C4)
.text$x:00005414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005414
.text$x:00005414 ; =============== S U B R O U T I N E =======================================
.text$x:00005414
.text$x:00005414
.text$x:00005414 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005414                                         ; DATA XREF: .xdata$x:0000DC8Co
.text$x:00005414                 mov     ecx, [ebp-10h]  ; this
.text$x:00005417                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005417 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00005417
.text$x:0000541C
.text$x:0000541C ; =============== S U B R O U T I N E =======================================
.text$x:0000541C
.text$x:0000541C
.text$x:0000541C __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:0000541C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:0000541C
.text$x:0000541C arg_4           = dword ptr  8
.text$x:0000541C
.text$x:0000541C                 mov     edx, [esp+arg_4]
.text$x:00005420                 lea     eax, [edx+0Ch]
.text$x:00005423                 mov     ecx, [edx-8]
.text$x:00005426                 xor     ecx, eax
.text$x:00005428                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000542D                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00005432                 jmp     ___CxxFrameHandler3
.text$x:00005432 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00005432
.text$x:00005432 ; ---------------------------------------------------------------------------
.text$x:00005437                 align 4
.text$x:00005437 _text$x         ends
.text$x:00005437
.text$mn:00005438 ; ===========================================================================
.text$mn:00005438
.text$mn:00005438 ; Segment type: Pure code
.text$mn:00005438 ; Segment permissions: Read/Execute
.text$mn:00005438 _text$mn        segment para public 'CODE' use32
.text$mn:00005438                 assume cs:_text$mn
.text$mn:00005438                 ;org 5438h
.text$mn:00005438 ; COMDAT (pick any)
.text$mn:00005438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005438
.text$mn:00005438 ; =============== S U B R O U T I N E =======================================
.text$mn:00005438
.text$mn:00005438 ; Attributes: bp-based frame
.text$mn:00005438
.text$mn:00005438 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00005438                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005438 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00005438                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:00005438
.text$mn:00005438 var_10          = dword ptr -10h
.text$mn:00005438 var_C           = dword ptr -0Ch
.text$mn:00005438 var_4           = dword ptr -4
.text$mn:00005438 arg_0           = dword ptr  8
.text$mn:00005438
.text$mn:00005438                 push    ebp
.text$mn:00005439                 mov     ebp, esp
.text$mn:0000543B                 push    0FFFFFFFFh
.text$mn:0000543D                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005442                 mov     eax, large fs:0
.text$mn:00005448                 push    eax
.text$mn:00005449                 push    ecx
.text$mn:0000544A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000544F                 xor     eax, ebp
.text$mn:00005451                 push    eax
.text$mn:00005452                 lea     eax, [ebp+var_C]
.text$mn:00005455                 mov     large fs:0, eax
.text$mn:0000545B                 mov     [ebp+var_10], ecx
.text$mn:0000545E                 mov     eax, [ebp+arg_0]
.text$mn:00005461                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005462                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005465                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:0000546A                 mov     [ebp+var_4], 0
.text$mn:00005471                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005478                 mov     eax, [ebp+var_10]
.text$mn:0000547B                 mov     ecx, [ebp+var_C]
.text$mn:0000547E                 mov     large fs:0, ecx
.text$mn:00005485                 pop     ecx
.text$mn:00005486                 mov     esp, ebp
.text$mn:00005488                 pop     ebp
.text$mn:00005489                 retn    4
.text$mn:00005489 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00005489
.text$mn:00005489 _text$mn        ends
.text$mn:00005489
.text$x:0000548C ; ===========================================================================
.text$x:0000548C
.text$x:0000548C ; Segment type: Pure code
.text$x:0000548C ; Segment permissions: Read/Execute
.text$x:0000548C _text$x         segment para public 'CODE' use32
.text$x:0000548C                 assume cs:_text$x
.text$x:0000548C                 ;org 548Ch
.text$x:0000548C ; COMDAT (pick associative to section at 5438)
.text$x:0000548C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000548C
.text$x:0000548C ; =============== S U B R O U T I N E =======================================
.text$x:0000548C
.text$x:0000548C
.text$x:0000548C __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:0000548C                                         ; DATA XREF: .xdata$x:0000DF4Co
.text$x:0000548C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000548F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000548F __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:0000548F
.text$x:00005494
.text$x:00005494 ; =============== S U B R O U T I N E =======================================
.text$x:00005494
.text$x:00005494
.text$x:00005494 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00005494                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:00005494
.text$x:00005494 arg_4           = dword ptr  8
.text$x:00005494
.text$x:00005494                 mov     edx, [esp+arg_4]
.text$x:00005498                 lea     eax, [edx+0Ch]
.text$x:0000549B                 mov     ecx, [edx-8]
.text$x:0000549E                 xor     ecx, eax
.text$x:000054A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054A5                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:000054AA                 jmp     ___CxxFrameHandler3
.text$x:000054AA __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:000054AA
.text$x:000054AA ; ---------------------------------------------------------------------------
.text$x:000054AF                 align 10h
.text$x:000054AF _text$x         ends
.text$x:000054AF
.text$mn:000054B0 ; ===========================================================================
.text$mn:000054B0
.text$mn:000054B0 ; Segment type: Pure code
.text$mn:000054B0 ; Segment permissions: Read/Execute
.text$mn:000054B0 _text$mn        segment para public 'CODE' use32
.text$mn:000054B0                 assume cs:_text$mn
.text$mn:000054B0                 ;org 54B0h
.text$mn:000054B0 ; COMDAT (pick any)
.text$mn:000054B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054B0
.text$mn:000054B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054B0
.text$mn:000054B0 ; Attributes: bp-based frame
.text$mn:000054B0
.text$mn:000054B0 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:000054B0                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000054B0 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000054B0                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:000054B0
.text$mn:000054B0 var_10          = dword ptr -10h
.text$mn:000054B0 var_C           = dword ptr -0Ch
.text$mn:000054B0 var_4           = dword ptr -4
.text$mn:000054B0
.text$mn:000054B0                 push    ebp
.text$mn:000054B1                 mov     ebp, esp
.text$mn:000054B3                 push    0FFFFFFFFh
.text$mn:000054B5                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000054BA                 mov     eax, large fs:0
.text$mn:000054C0                 push    eax
.text$mn:000054C1                 push    ecx
.text$mn:000054C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000054C7                 xor     eax, ebp
.text$mn:000054C9                 push    eax
.text$mn:000054CA                 lea     eax, [ebp+var_C]
.text$mn:000054CD                 mov     large fs:0, eax
.text$mn:000054D3                 mov     [ebp+var_10], ecx
.text$mn:000054D6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000054D9                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:000054DE                 mov     [ebp+var_4], 0
.text$mn:000054E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000054EC                 mov     eax, [ebp+var_10]
.text$mn:000054EF                 mov     ecx, [ebp+var_C]
.text$mn:000054F2                 mov     large fs:0, ecx
.text$mn:000054F9                 pop     ecx
.text$mn:000054FA                 mov     esp, ebp
.text$mn:000054FC                 pop     ebp
.text$mn:000054FD                 retn
.text$mn:000054FD ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:000054FD
.text$mn:000054FD ; ---------------------------------------------------------------------------
.text$mn:000054FE                 align 10h
.text$mn:000054FE _text$mn        ends
.text$mn:000054FE
.text$x:00005500 ; ===========================================================================
.text$x:00005500
.text$x:00005500 ; Segment type: Pure code
.text$x:00005500 ; Segment permissions: Read/Execute
.text$x:00005500 _text$x         segment para public 'CODE' use32
.text$x:00005500                 assume cs:_text$x
.text$x:00005500                 ;org 5500h
.text$x:00005500 ; COMDAT (pick associative to section at 54B0)
.text$x:00005500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005500
.text$x:00005500 ; =============== S U B R O U T I N E =======================================
.text$x:00005500
.text$x:00005500
.text$x:00005500 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005500                                         ; DATA XREF: .xdata$x:0000DEF4o
.text$x:00005500                 mov     ecx, [ebp-10h]  ; this
.text$x:00005503                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005503 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00005503
.text$x:00005508
.text$x:00005508 ; =============== S U B R O U T I N E =======================================
.text$x:00005508
.text$x:00005508
.text$x:00005508 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00005508                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00005508
.text$x:00005508 arg_4           = dword ptr  8
.text$x:00005508
.text$x:00005508                 mov     edx, [esp+arg_4]
.text$x:0000550C                 lea     eax, [edx+0Ch]
.text$x:0000550F                 mov     ecx, [edx-8]
.text$x:00005512                 xor     ecx, eax
.text$x:00005514                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005519                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:0000551E                 jmp     ___CxxFrameHandler3
.text$x:0000551E __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:0000551E
.text$x:0000551E ; ---------------------------------------------------------------------------
.text$x:00005523                 align 4
.text$x:00005523 _text$x         ends
.text$x:00005523
.text$mn:00005524 ; ===========================================================================
.text$mn:00005524
.text$mn:00005524 ; Segment type: Pure code
.text$mn:00005524 ; Segment permissions: Read/Execute
.text$mn:00005524 _text$mn        segment para public 'CODE' use32
.text$mn:00005524                 assume cs:_text$mn
.text$mn:00005524                 ;org 5524h
.text$mn:00005524 ; COMDAT (pick any)
.text$mn:00005524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005524
.text$mn:00005524 ; =============== S U B R O U T I N E =======================================
.text$mn:00005524
.text$mn:00005524 ; Attributes: bp-based frame
.text$mn:00005524
.text$mn:00005524 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00005524                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00005524 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00005524                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00005524
.text$mn:00005524 var_10          = dword ptr -10h
.text$mn:00005524 var_C           = dword ptr -0Ch
.text$mn:00005524 var_4           = dword ptr -4
.text$mn:00005524
.text$mn:00005524                 push    ebp
.text$mn:00005525                 mov     ebp, esp
.text$mn:00005527                 push    0FFFFFFFFh
.text$mn:00005529                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000552E                 mov     eax, large fs:0
.text$mn:00005534                 push    eax
.text$mn:00005535                 push    ecx
.text$mn:00005536                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000553B                 xor     eax, ebp
.text$mn:0000553D                 push    eax
.text$mn:0000553E                 lea     eax, [ebp+var_C]
.text$mn:00005541                 mov     large fs:0, eax
.text$mn:00005547                 mov     [ebp+var_10], ecx
.text$mn:0000554A                 mov     ecx, [ebp+var_10]
.text$mn:0000554D                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00005552                 mov     [ebp+var_4], 0
.text$mn:00005559                 mov     ecx, [ebp+var_10]
.text$mn:0000555C                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00005561                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005568                 mov     eax, [ebp+var_10]
.text$mn:0000556B                 mov     ecx, [ebp+var_C]
.text$mn:0000556E                 mov     large fs:0, ecx
.text$mn:00005575                 pop     ecx
.text$mn:00005576                 mov     esp, ebp
.text$mn:00005578                 pop     ebp
.text$mn:00005579                 retn    4
.text$mn:00005579 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00005579
.text$mn:00005579 _text$mn        ends
.text$mn:00005579
.text$x:0000557C ; ===========================================================================
.text$x:0000557C
.text$x:0000557C ; Segment type: Pure code
.text$x:0000557C ; Segment permissions: Read/Execute
.text$x:0000557C _text$x         segment para public 'CODE' use32
.text$x:0000557C                 assume cs:_text$x
.text$x:0000557C                 ;org 557Ch
.text$x:0000557C ; COMDAT (pick associative to section at 5524)
.text$x:0000557C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000557C
.text$x:0000557C ; =============== S U B R O U T I N E =======================================
.text$x:0000557C
.text$x:0000557C
.text$x:0000557C __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:0000557C                                         ; DATA XREF: .xdata$x:0000CBF4o
.text$x:0000557C                 mov     ecx, [ebp-10h]
.text$x:0000557F                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000557F __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:0000557F
.text$x:00005584
.text$x:00005584 ; =============== S U B R O U T I N E =======================================
.text$x:00005584
.text$x:00005584
.text$x:00005584 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00005584                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00005584
.text$x:00005584 arg_4           = dword ptr  8
.text$x:00005584
.text$x:00005584                 mov     edx, [esp+arg_4]
.text$x:00005588                 lea     eax, [edx+0Ch]
.text$x:0000558B                 mov     ecx, [edx-8]
.text$x:0000558E                 xor     ecx, eax
.text$x:00005590                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005595                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:0000559A                 jmp     ___CxxFrameHandler3
.text$x:0000559A __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:0000559A
.text$x:0000559A ; ---------------------------------------------------------------------------
.text$x:0000559F                 align 10h
.text$x:0000559F _text$x         ends
.text$x:0000559F
.text$mn:000055A0 ; ===========================================================================
.text$mn:000055A0
.text$mn:000055A0 ; Segment type: Pure code
.text$mn:000055A0 ; Segment permissions: Read/Execute
.text$mn:000055A0 _text$mn        segment para public 'CODE' use32
.text$mn:000055A0                 assume cs:_text$mn
.text$mn:000055A0                 ;org 55A0h
.text$mn:000055A0 ; COMDAT (pick any)
.text$mn:000055A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055A0
.text$mn:000055A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000055A0
.text$mn:000055A0 ; Attributes: bp-based frame
.text$mn:000055A0
.text$mn:000055A0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000055A0                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000055A0 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000055A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p
.text$mn:000055A0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p ...
.text$mn:000055A0
.text$mn:000055A0 var_10          = dword ptr -10h
.text$mn:000055A0 var_C           = dword ptr -0Ch
.text$mn:000055A0 var_4           = dword ptr -4
.text$mn:000055A0
.text$mn:000055A0                 push    ebp
.text$mn:000055A1                 mov     ebp, esp
.text$mn:000055A3                 push    0FFFFFFFFh
.text$mn:000055A5                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000055AA                 mov     eax, large fs:0
.text$mn:000055B0                 push    eax
.text$mn:000055B1                 push    ecx
.text$mn:000055B2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000055B7                 xor     eax, ebp
.text$mn:000055B9                 push    eax
.text$mn:000055BA                 lea     eax, [ebp+var_C]
.text$mn:000055BD                 mov     large fs:0, eax
.text$mn:000055C3                 mov     [ebp+var_10], ecx
.text$mn:000055C6                 mov     ecx, [ebp+var_10]
.text$mn:000055C9                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000055CE                 mov     [ebp+var_4], 0
.text$mn:000055D5                 mov     ecx, [ebp+var_10]
.text$mn:000055D8                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000055DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000055E4                 mov     eax, [ebp+var_10]
.text$mn:000055E7                 mov     ecx, [ebp+var_C]
.text$mn:000055EA                 mov     large fs:0, ecx
.text$mn:000055F1                 pop     ecx
.text$mn:000055F2                 mov     esp, ebp
.text$mn:000055F4                 pop     ebp
.text$mn:000055F5                 retn    4
.text$mn:000055F5 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000055F5
.text$mn:000055F5 _text$mn        ends
.text$mn:000055F5
.text$x:000055F8 ; ===========================================================================
.text$x:000055F8
.text$x:000055F8 ; Segment type: Pure code
.text$x:000055F8 ; Segment permissions: Read/Execute
.text$x:000055F8 _text$x         segment para public 'CODE' use32
.text$x:000055F8                 assume cs:_text$x
.text$x:000055F8                 ;org 55F8h
.text$x:000055F8 ; COMDAT (pick associative to section at 55A0)
.text$x:000055F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000055F8
.text$x:000055F8 ; =============== S U B R O U T I N E =======================================
.text$x:000055F8
.text$x:000055F8
.text$x:000055F8 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:000055F8                                         ; DATA XREF: .xdata$x:0000CF14o
.text$x:000055F8                 mov     ecx, [ebp-10h]
.text$x:000055FB                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000055FB __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:000055FB
.text$x:00005600
.text$x:00005600 ; =============== S U B R O U T I N E =======================================
.text$x:00005600
.text$x:00005600
.text$x:00005600 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00005600                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00005600
.text$x:00005600 arg_4           = dword ptr  8
.text$x:00005600
.text$x:00005600                 mov     edx, [esp+arg_4]
.text$x:00005604                 lea     eax, [edx+0Ch]
.text$x:00005607                 mov     ecx, [edx-8]
.text$x:0000560A                 xor     ecx, eax
.text$x:0000560C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005611                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00005616                 jmp     ___CxxFrameHandler3
.text$x:00005616 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00005616
.text$x:00005616 ; ---------------------------------------------------------------------------
.text$x:0000561B                 align 4
.text$x:0000561B _text$x         ends
.text$x:0000561B
.text$mn:0000561C ; ===========================================================================
.text$mn:0000561C
.text$mn:0000561C ; Segment type: Pure code
.text$mn:0000561C ; Segment permissions: Read/Execute
.text$mn:0000561C _text$mn        segment para public 'CODE' use32
.text$mn:0000561C                 assume cs:_text$mn
.text$mn:0000561C                 ;org 561Ch
.text$mn:0000561C ; COMDAT (pick any)
.text$mn:0000561C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000561C
.text$mn:0000561C ; =============== S U B R O U T I N E =======================================
.text$mn:0000561C
.text$mn:0000561C ; Attributes: bp-based frame
.text$mn:0000561C
.text$mn:0000561C ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:0000561C                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000561C ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:0000561C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:0000561C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:0000561C
.text$mn:0000561C var_10          = dword ptr -10h
.text$mn:0000561C var_C           = dword ptr -0Ch
.text$mn:0000561C var_4           = dword ptr -4
.text$mn:0000561C arg_0           = dword ptr  8
.text$mn:0000561C
.text$mn:0000561C                 push    ebp
.text$mn:0000561D                 mov     ebp, esp
.text$mn:0000561F                 push    0FFFFFFFFh
.text$mn:00005621                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005626                 mov     eax, large fs:0
.text$mn:0000562C                 push    eax
.text$mn:0000562D                 push    ecx
.text$mn:0000562E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005633                 xor     eax, ebp
.text$mn:00005635                 push    eax
.text$mn:00005636                 lea     eax, [ebp+var_C]
.text$mn:00005639                 mov     large fs:0, eax
.text$mn:0000563F                 mov     [ebp+var_10], ecx
.text$mn:00005642                 mov     eax, [ebp+arg_0]
.text$mn:00005645                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005646                 mov     ecx, [ebp+var_10]
.text$mn:00005649                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:0000564E                 mov     [ebp+var_4], 0
.text$mn:00005655                 mov     ecx, [ebp+var_10]
.text$mn:00005658                 mov     edx, [ebp+arg_0]
.text$mn:0000565B                 mov     eax, [edx+8]
.text$mn:0000565E                 mov     [ecx+8], eax
.text$mn:00005661                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005668                 mov     eax, [ebp+var_10]
.text$mn:0000566B                 mov     ecx, [ebp+var_C]
.text$mn:0000566E                 mov     large fs:0, ecx
.text$mn:00005675                 pop     ecx
.text$mn:00005676                 mov     esp, ebp
.text$mn:00005678                 pop     ebp
.text$mn:00005679                 retn    4
.text$mn:00005679 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00005679
.text$mn:00005679 _text$mn        ends
.text$mn:00005679
.text$x:0000567C ; ===========================================================================
.text$x:0000567C
.text$x:0000567C ; Segment type: Pure code
.text$x:0000567C ; Segment permissions: Read/Execute
.text$x:0000567C _text$x         segment para public 'CODE' use32
.text$x:0000567C                 assume cs:_text$x
.text$x:0000567C                 ;org 567Ch
.text$x:0000567C ; COMDAT (pick associative to section at 561C)
.text$x:0000567C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000567C
.text$x:0000567C ; =============== S U B R O U T I N E =======================================
.text$x:0000567C
.text$x:0000567C
.text$x:0000567C __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000567C                                         ; DATA XREF: .xdata$x:0000DFD0o
.text$x:0000567C                 mov     ecx, [ebp-10h]
.text$x:0000567F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:0000567F __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000567F
.text$x:00005684
.text$x:00005684 ; =============== S U B R O U T I N E =======================================
.text$x:00005684
.text$x:00005684
.text$x:00005684 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005684                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00005684
.text$x:00005684 arg_4           = dword ptr  8
.text$x:00005684
.text$x:00005684                 mov     edx, [esp+arg_4]
.text$x:00005688                 lea     eax, [edx+0Ch]
.text$x:0000568B                 mov     ecx, [edx-8]
.text$x:0000568E                 xor     ecx, eax
.text$x:00005690                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005695                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:0000569A                 jmp     ___CxxFrameHandler3
.text$x:0000569A __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:0000569A
.text$x:0000569A ; ---------------------------------------------------------------------------
.text$x:0000569F                 align 10h
.text$x:0000569F _text$x         ends
.text$x:0000569F
.text$mn:000056A0 ; ===========================================================================
.text$mn:000056A0
.text$mn:000056A0 ; Segment type: Pure code
.text$mn:000056A0 ; Segment permissions: Read/Execute
.text$mn:000056A0 _text$mn        segment para public 'CODE' use32
.text$mn:000056A0                 assume cs:_text$mn
.text$mn:000056A0                 ;org 56A0h
.text$mn:000056A0 ; COMDAT (pick any)
.text$mn:000056A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056A0
.text$mn:000056A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000056A0
.text$mn:000056A0 ; Attributes: bp-based frame
.text$mn:000056A0
.text$mn:000056A0 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000056A0                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000056A0 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:000056A0                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:000056A0
.text$mn:000056A0 var_10          = dword ptr -10h
.text$mn:000056A0 var_C           = dword ptr -0Ch
.text$mn:000056A0 var_4           = dword ptr -4
.text$mn:000056A0 arg_0           = dword ptr  8
.text$mn:000056A0 arg_4           = dword ptr  0Ch
.text$mn:000056A0
.text$mn:000056A0                 push    ebp
.text$mn:000056A1                 mov     ebp, esp
.text$mn:000056A3                 push    0FFFFFFFFh
.text$mn:000056A5                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000056AA                 mov     eax, large fs:0
.text$mn:000056B0                 push    eax
.text$mn:000056B1                 push    ecx
.text$mn:000056B2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000056B7                 xor     eax, ebp
.text$mn:000056B9                 push    eax
.text$mn:000056BA                 lea     eax, [ebp+var_C]
.text$mn:000056BD                 mov     large fs:0, eax
.text$mn:000056C3                 mov     [ebp+var_10], ecx
.text$mn:000056C6                 mov     ecx, [ebp+var_10]
.text$mn:000056C9                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:000056CE                 mov     [ebp+var_4], 0
.text$mn:000056D5                 mov     eax, [ebp+arg_4]
.text$mn:000056D8                 push    eax             ; struct std::_Container_base12 *
.text$mn:000056D9                 mov     ecx, [ebp+var_10] ; this
.text$mn:000056DC                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:000056E1                 mov     ecx, [ebp+var_10]
.text$mn:000056E4                 mov     edx, [ebp+arg_0]
.text$mn:000056E7                 mov     [ecx+8], edx
.text$mn:000056EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000056F1                 mov     eax, [ebp+var_10]
.text$mn:000056F4                 mov     ecx, [ebp+var_C]
.text$mn:000056F7                 mov     large fs:0, ecx
.text$mn:000056FE                 pop     ecx
.text$mn:000056FF                 mov     esp, ebp
.text$mn:00005701                 pop     ebp
.text$mn:00005702                 retn    8
.text$mn:00005702 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:00005702
.text$mn:00005702 ; ---------------------------------------------------------------------------
.text$mn:00005705                 align 4
.text$mn:00005705 _text$mn        ends
.text$mn:00005705
.text$x:00005708 ; ===========================================================================
.text$x:00005708
.text$x:00005708 ; Segment type: Pure code
.text$x:00005708 ; Segment permissions: Read/Execute
.text$x:00005708 _text$x         segment para public 'CODE' use32
.text$x:00005708                 assume cs:_text$x
.text$x:00005708                 ;org 5708h
.text$x:00005708 ; COMDAT (pick associative to section at 56A0)
.text$x:00005708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005708
.text$x:00005708 ; =============== S U B R O U T I N E =======================================
.text$x:00005708
.text$x:00005708
.text$x:00005708 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00005708                                         ; DATA XREF: .xdata$x:0000DF78o
.text$x:00005708                 mov     ecx, [ebp-10h]
.text$x:0000570B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:0000570B __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:0000570B
.text$x:00005710
.text$x:00005710 ; =============== S U B R O U T I N E =======================================
.text$x:00005710
.text$x:00005710
.text$x:00005710 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00005710                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00005710
.text$x:00005710 arg_4           = dword ptr  8
.text$x:00005710
.text$x:00005710                 mov     edx, [esp+arg_4]
.text$x:00005714                 lea     eax, [edx+0Ch]
.text$x:00005717                 mov     ecx, [edx-8]
.text$x:0000571A                 xor     ecx, eax
.text$x:0000571C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005721                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:00005726                 jmp     ___CxxFrameHandler3
.text$x:00005726 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:00005726
.text$x:00005726 ; ---------------------------------------------------------------------------
.text$x:0000572B                 align 4
.text$x:0000572B _text$x         ends
.text$x:0000572B
.text$mn:0000572C ; ===========================================================================
.text$mn:0000572C
.text$mn:0000572C ; Segment type: Pure code
.text$mn:0000572C ; Segment permissions: Read/Execute
.text$mn:0000572C _text$mn        segment para public 'CODE' use32
.text$mn:0000572C                 assume cs:_text$mn
.text$mn:0000572C                 ;org 572Ch
.text$mn:0000572C ; COMDAT (pick any)
.text$mn:0000572C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000572C
.text$mn:0000572C ; =============== S U B R O U T I N E =======================================
.text$mn:0000572C
.text$mn:0000572C ; Attributes: bp-based frame
.text$mn:0000572C
.text$mn:0000572C ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:0000572C                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000572C ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:0000572C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:0000572C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:0000572C
.text$mn:0000572C var_10          = dword ptr -10h
.text$mn:0000572C var_C           = dword ptr -0Ch
.text$mn:0000572C var_4           = dword ptr -4
.text$mn:0000572C arg_0           = dword ptr  8
.text$mn:0000572C
.text$mn:0000572C                 push    ebp
.text$mn:0000572D                 mov     ebp, esp
.text$mn:0000572F                 push    0FFFFFFFFh
.text$mn:00005731                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005736                 mov     eax, large fs:0
.text$mn:0000573C                 push    eax
.text$mn:0000573D                 push    ecx
.text$mn:0000573E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005743                 xor     eax, ebp
.text$mn:00005745                 push    eax
.text$mn:00005746                 lea     eax, [ebp+var_C]
.text$mn:00005749                 mov     large fs:0, eax
.text$mn:0000574F                 mov     [ebp+var_10], ecx
.text$mn:00005752                 mov     eax, [ebp+arg_0]
.text$mn:00005755                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005756                 mov     ecx, [ebp+var_10]
.text$mn:00005759                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000575E                 mov     [ebp+var_4], 0
.text$mn:00005765                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000576C                 mov     eax, [ebp+var_10]
.text$mn:0000576F                 mov     ecx, [ebp+var_C]
.text$mn:00005772                 mov     large fs:0, ecx
.text$mn:00005779                 pop     ecx
.text$mn:0000577A                 mov     esp, ebp
.text$mn:0000577C                 pop     ebp
.text$mn:0000577D                 retn    4
.text$mn:0000577D ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:0000577D
.text$mn:0000577D _text$mn        ends
.text$mn:0000577D
.text$x:00005780 ; ===========================================================================
.text$x:00005780
.text$x:00005780 ; Segment type: Pure code
.text$x:00005780 ; Segment permissions: Read/Execute
.text$x:00005780 _text$x         segment para public 'CODE' use32
.text$x:00005780                 assume cs:_text$x
.text$x:00005780                 ;org 5780h
.text$x:00005780 ; COMDAT (pick associative to section at 572C)
.text$x:00005780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005780
.text$x:00005780 ; =============== S U B R O U T I N E =======================================
.text$x:00005780
.text$x:00005780
.text$x:00005780 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005780                                         ; DATA XREF: .xdata$x:0000E080o
.text$x:00005780                 mov     ecx, [ebp-10h]
.text$x:00005783                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005783 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005783
.text$x:00005788
.text$x:00005788 ; =============== S U B R O U T I N E =======================================
.text$x:00005788
.text$x:00005788
.text$x:00005788 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005788                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00005788
.text$x:00005788 arg_4           = dword ptr  8
.text$x:00005788
.text$x:00005788                 mov     edx, [esp+arg_4]
.text$x:0000578C                 lea     eax, [edx+0Ch]
.text$x:0000578F                 mov     ecx, [edx-8]
.text$x:00005792                 xor     ecx, eax
.text$x:00005794                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005799                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:0000579E                 jmp     ___CxxFrameHandler3
.text$x:0000579E __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:0000579E
.text$x:0000579E ; ---------------------------------------------------------------------------
.text$x:000057A3                 align 4
.text$x:000057A3 _text$x         ends
.text$x:000057A3
.text$mn:000057A4 ; ===========================================================================
.text$mn:000057A4
.text$mn:000057A4 ; Segment type: Pure code
.text$mn:000057A4 ; Segment permissions: Read/Execute
.text$mn:000057A4 _text$mn        segment para public 'CODE' use32
.text$mn:000057A4                 assume cs:_text$mn
.text$mn:000057A4                 ;org 57A4h
.text$mn:000057A4 ; COMDAT (pick any)
.text$mn:000057A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057A4
.text$mn:000057A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057A4
.text$mn:000057A4 ; Attributes: bp-based frame
.text$mn:000057A4
.text$mn:000057A4 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000057A4                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000057A4 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:000057A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:000057A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:000057A4
.text$mn:000057A4 var_10          = dword ptr -10h
.text$mn:000057A4 var_C           = dword ptr -0Ch
.text$mn:000057A4 var_4           = dword ptr -4
.text$mn:000057A4 arg_0           = dword ptr  8
.text$mn:000057A4 arg_4           = dword ptr  0Ch
.text$mn:000057A4
.text$mn:000057A4                 push    ebp
.text$mn:000057A5                 mov     ebp, esp
.text$mn:000057A7                 push    0FFFFFFFFh
.text$mn:000057A9                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000057AE                 mov     eax, large fs:0
.text$mn:000057B4                 push    eax
.text$mn:000057B5                 push    ecx
.text$mn:000057B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000057BB                 xor     eax, ebp
.text$mn:000057BD                 push    eax
.text$mn:000057BE                 lea     eax, [ebp+var_C]
.text$mn:000057C1                 mov     large fs:0, eax
.text$mn:000057C7                 mov     [ebp+var_10], ecx
.text$mn:000057CA                 mov     eax, [ebp+arg_4]
.text$mn:000057CD                 push    eax             ; struct std::_Container_base12 *
.text$mn:000057CE                 mov     ecx, [ebp+arg_0]
.text$mn:000057D1                 push    ecx             ; int
.text$mn:000057D2                 mov     ecx, [ebp+var_10]
.text$mn:000057D5                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:000057DA                 mov     [ebp+var_4], 0
.text$mn:000057E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000057E8                 mov     eax, [ebp+var_10]
.text$mn:000057EB                 mov     ecx, [ebp+var_C]
.text$mn:000057EE                 mov     large fs:0, ecx
.text$mn:000057F5                 pop     ecx
.text$mn:000057F6                 mov     esp, ebp
.text$mn:000057F8                 pop     ebp
.text$mn:000057F9                 retn    8
.text$mn:000057F9 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:000057F9
.text$mn:000057F9 _text$mn        ends
.text$mn:000057F9
.text$x:000057FC ; ===========================================================================
.text$x:000057FC
.text$x:000057FC ; Segment type: Pure code
.text$x:000057FC ; Segment permissions: Read/Execute
.text$x:000057FC _text$x         segment para public 'CODE' use32
.text$x:000057FC                 assume cs:_text$x
.text$x:000057FC                 ;org 57FCh
.text$x:000057FC ; COMDAT (pick associative to section at 57A4)
.text$x:000057FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000057FC
.text$x:000057FC ; =============== S U B R O U T I N E =======================================
.text$x:000057FC
.text$x:000057FC
.text$x:000057FC __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:000057FC                                         ; DATA XREF: .xdata$x:0000DFFCo
.text$x:000057FC                 mov     ecx, [ebp-10h]
.text$x:000057FF                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000057FF __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:000057FF
.text$x:00005804
.text$x:00005804 ; =============== S U B R O U T I N E =======================================
.text$x:00005804
.text$x:00005804
.text$x:00005804 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:00005804                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:00005804
.text$x:00005804 arg_4           = dword ptr  8
.text$x:00005804
.text$x:00005804                 mov     edx, [esp+arg_4]
.text$x:00005808                 lea     eax, [edx+0Ch]
.text$x:0000580B                 mov     ecx, [edx-8]
.text$x:0000580E                 xor     ecx, eax
.text$x:00005810                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005815                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:0000581A                 jmp     ___CxxFrameHandler3
.text$x:0000581A __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:0000581A
.text$x:0000581A ; ---------------------------------------------------------------------------
.text$x:0000581F                 align 10h
.text$x:0000581F _text$x         ends
.text$x:0000581F
.text$mn:00005820 ; ===========================================================================
.text$mn:00005820
.text$mn:00005820 ; Segment type: Pure code
.text$mn:00005820 ; Segment permissions: Read/Execute
.text$mn:00005820 _text$mn        segment para public 'CODE' use32
.text$mn:00005820                 assume cs:_text$mn
.text$mn:00005820                 ;org 5820h
.text$mn:00005820 ; COMDAT (pick any)
.text$mn:00005820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005820
.text$mn:00005820 ; =============== S U B R O U T I N E =======================================
.text$mn:00005820
.text$mn:00005820 ; Attributes: bp-based frame
.text$mn:00005820
.text$mn:00005820 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00005820                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00005820 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00005820                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00005820
.text$mn:00005820 var_10          = dword ptr -10h
.text$mn:00005820 var_C           = dword ptr -0Ch
.text$mn:00005820 var_4           = dword ptr -4
.text$mn:00005820
.text$mn:00005820                 push    ebp
.text$mn:00005821                 mov     ebp, esp
.text$mn:00005823                 push    0FFFFFFFFh
.text$mn:00005825                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000582A                 mov     eax, large fs:0
.text$mn:00005830                 push    eax
.text$mn:00005831                 push    ecx
.text$mn:00005832                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005837                 xor     eax, ebp
.text$mn:00005839                 push    eax
.text$mn:0000583A                 lea     eax, [ebp+var_C]
.text$mn:0000583D                 mov     large fs:0, eax
.text$mn:00005843                 mov     [ebp+var_10], ecx
.text$mn:00005846                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005849                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000584E                 mov     [ebp+var_4], 0
.text$mn:00005855                 mov     eax, [ebp+var_10]
.text$mn:00005858                 mov     dword ptr [eax+14h], 0
.text$mn:0000585F                 mov     ecx, [ebp+var_10]
.text$mn:00005862                 mov     dword ptr [ecx+18h], 0
.text$mn:00005869                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005870                 mov     eax, [ebp+var_10]
.text$mn:00005873                 mov     ecx, [ebp+var_C]
.text$mn:00005876                 mov     large fs:0, ecx
.text$mn:0000587D                 pop     ecx
.text$mn:0000587E                 mov     esp, ebp
.text$mn:00005880                 pop     ebp
.text$mn:00005881                 retn
.text$mn:00005881 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00005881
.text$mn:00005881 ; ---------------------------------------------------------------------------
.text$mn:00005882                 align 4
.text$mn:00005882 _text$mn        ends
.text$mn:00005882
.text$x:00005884 ; ===========================================================================
.text$x:00005884
.text$x:00005884 ; Segment type: Pure code
.text$x:00005884 ; Segment permissions: Read/Execute
.text$x:00005884 _text$x         segment para public 'CODE' use32
.text$x:00005884                 assume cs:_text$x
.text$x:00005884                 ;org 5884h
.text$x:00005884 ; COMDAT (pick associative to section at 5820)
.text$x:00005884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005884
.text$x:00005884 ; =============== S U B R O U T I N E =======================================
.text$x:00005884
.text$x:00005884
.text$x:00005884 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00005884                                         ; DATA XREF: .xdata$x:0000CB9Co
.text$x:00005884                 mov     ecx, [ebp-10h]  ; this
.text$x:00005887                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005887 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00005887
.text$x:0000588C
.text$x:0000588C ; =============== S U B R O U T I N E =======================================
.text$x:0000588C
.text$x:0000588C
.text$x:0000588C __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:0000588C                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:0000588C
.text$x:0000588C arg_4           = dword ptr  8
.text$x:0000588C
.text$x:0000588C                 mov     edx, [esp+arg_4]
.text$x:00005890                 lea     eax, [edx+0Ch]
.text$x:00005893                 mov     ecx, [edx-8]
.text$x:00005896                 xor     ecx, eax
.text$x:00005898                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000589D                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000058A2                 jmp     ___CxxFrameHandler3
.text$x:000058A2 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000058A2
.text$x:000058A2 ; ---------------------------------------------------------------------------
.text$x:000058A7                 align 4
.text$x:000058A7 _text$x         ends
.text$x:000058A7
.text$mn:000058A8 ; ===========================================================================
.text$mn:000058A8
.text$mn:000058A8 ; Segment type: Pure code
.text$mn:000058A8 ; Segment permissions: Read/Execute
.text$mn:000058A8 _text$mn        segment para public 'CODE' use32
.text$mn:000058A8                 assume cs:_text$mn
.text$mn:000058A8                 ;org 58A8h
.text$mn:000058A8 ; COMDAT (pick any)
.text$mn:000058A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058A8
.text$mn:000058A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058A8
.text$mn:000058A8 ; Attributes: bp-based frame
.text$mn:000058A8
.text$mn:000058A8 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000058A8                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000058A8 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000058A8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000058A8
.text$mn:000058A8 var_10          = dword ptr -10h
.text$mn:000058A8 var_C           = dword ptr -0Ch
.text$mn:000058A8 var_4           = dword ptr -4
.text$mn:000058A8
.text$mn:000058A8                 push    ebp
.text$mn:000058A9                 mov     ebp, esp
.text$mn:000058AB                 push    0FFFFFFFFh
.text$mn:000058AD                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000058B2                 mov     eax, large fs:0
.text$mn:000058B8                 push    eax
.text$mn:000058B9                 push    ecx
.text$mn:000058BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000058BF                 xor     eax, ebp
.text$mn:000058C1                 push    eax
.text$mn:000058C2                 lea     eax, [ebp+var_C]
.text$mn:000058C5                 mov     large fs:0, eax
.text$mn:000058CB                 mov     [ebp+var_10], ecx
.text$mn:000058CE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000058D1                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000058D6                 mov     [ebp+var_4], 0
.text$mn:000058DD                 mov     eax, [ebp+var_10]
.text$mn:000058E0                 mov     dword ptr [eax+14h], 0
.text$mn:000058E7                 mov     ecx, [ebp+var_10]
.text$mn:000058EA                 mov     dword ptr [ecx+18h], 0
.text$mn:000058F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000058F8                 mov     eax, [ebp+var_10]
.text$mn:000058FB                 mov     ecx, [ebp+var_C]
.text$mn:000058FE                 mov     large fs:0, ecx
.text$mn:00005905                 pop     ecx
.text$mn:00005906                 mov     esp, ebp
.text$mn:00005908                 pop     ebp
.text$mn:00005909                 retn
.text$mn:00005909 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00005909
.text$mn:00005909 ; ---------------------------------------------------------------------------
.text$mn:0000590A                 align 4
.text$mn:0000590A _text$mn        ends
.text$mn:0000590A
.text$x:0000590C ; ===========================================================================
.text$x:0000590C
.text$x:0000590C ; Segment type: Pure code
.text$x:0000590C ; Segment permissions: Read/Execute
.text$x:0000590C _text$x         segment para public 'CODE' use32
.text$x:0000590C                 assume cs:_text$x
.text$x:0000590C                 ;org 590Ch
.text$x:0000590C ; COMDAT (pick associative to section at 58A8)
.text$x:0000590C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000590C
.text$x:0000590C ; =============== S U B R O U T I N E =======================================
.text$x:0000590C
.text$x:0000590C
.text$x:0000590C __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:0000590C                                         ; DATA XREF: .xdata$x:0000CEBCo
.text$x:0000590C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000590F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000590F __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000590F
.text$x:00005914
.text$x:00005914 ; =============== S U B R O U T I N E =======================================
.text$x:00005914
.text$x:00005914
.text$x:00005914 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00005914                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00005914
.text$x:00005914 arg_4           = dword ptr  8
.text$x:00005914
.text$x:00005914                 mov     edx, [esp+arg_4]
.text$x:00005918                 lea     eax, [edx+0Ch]
.text$x:0000591B                 mov     ecx, [edx-8]
.text$x:0000591E                 xor     ecx, eax
.text$x:00005920                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005925                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000592A                 jmp     ___CxxFrameHandler3
.text$x:0000592A __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000592A
.text$x:0000592A ; ---------------------------------------------------------------------------
.text$x:0000592F                 align 10h
.text$x:0000592F _text$x         ends
.text$x:0000592F
.text$mn:00005930 ; ===========================================================================
.text$mn:00005930
.text$mn:00005930 ; Segment type: Pure code
.text$mn:00005930 ; Segment permissions: Read/Execute
.text$mn:00005930 _text$mn        segment para public 'CODE' use32
.text$mn:00005930                 assume cs:_text$mn
.text$mn:00005930                 ;org 5930h
.text$mn:00005930 ; COMDAT (pick any)
.text$mn:00005930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005930
.text$mn:00005930 ; =============== S U B R O U T I N E =======================================
.text$mn:00005930
.text$mn:00005930 ; Attributes: bp-based frame
.text$mn:00005930
.text$mn:00005930 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>(class std::allocator<struct TreeStateNode> const &)
.text$mn:00005930                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z
.text$mn:00005930 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z proc near
.text$mn:00005930                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+4Ap
.text$mn:00005930                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(void)+34p
.text$mn:00005930
.text$mn:00005930 var_10          = dword ptr -10h
.text$mn:00005930 var_C           = dword ptr -0Ch
.text$mn:00005930 var_4           = dword ptr -4
.text$mn:00005930
.text$mn:00005930                 push    ebp
.text$mn:00005931                 mov     ebp, esp
.text$mn:00005933                 push    0FFFFFFFFh
.text$mn:00005935                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z
.text$mn:0000593A                 mov     eax, large fs:0
.text$mn:00005940                 push    eax
.text$mn:00005941                 push    ecx
.text$mn:00005942                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005947                 xor     eax, ebp
.text$mn:00005949                 push    eax
.text$mn:0000594A                 lea     eax, [ebp+var_C]
.text$mn:0000594D                 mov     large fs:0, eax
.text$mn:00005953                 mov     [ebp+var_10], ecx
.text$mn:00005956                 mov     ecx, [ebp+var_10]
.text$mn:00005959                 call    ??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TreeStateNode>>::_Vector_val<std::_Simple_types<TreeStateNode>>(void)
.text$mn:0000595E                 mov     [ebp+var_4], 0
.text$mn:00005965                 mov     ecx, [ebp+var_10]
.text$mn:00005968                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Alloc_proxy(void)
.text$mn:0000596D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005974                 mov     eax, [ebp+var_10]
.text$mn:00005977                 mov     ecx, [ebp+var_C]
.text$mn:0000597A                 mov     large fs:0, ecx
.text$mn:00005981                 pop     ecx
.text$mn:00005982                 mov     esp, ebp
.text$mn:00005984                 pop     ebp
.text$mn:00005985                 retn    4
.text$mn:00005985 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z endp
.text$mn:00005985
.text$mn:00005985 _text$mn        ends
.text$mn:00005985
.text$x:00005988 ; ===========================================================================
.text$x:00005988
.text$x:00005988 ; Segment type: Pure code
.text$x:00005988 ; Segment permissions: Read/Execute
.text$x:00005988 _text$x         segment para public 'CODE' use32
.text$x:00005988                 assume cs:_text$x
.text$x:00005988                 ;org 5988h
.text$x:00005988 ; COMDAT (pick associative to section at 5930)
.text$x:00005988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005988
.text$x:00005988 ; =============== S U B R O U T I N E =======================================
.text$x:00005988
.text$x:00005988
.text$x:00005988 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z$0 proc near
.text$x:00005988                                         ; DATA XREF: .xdata$x:0000D5B4o
.text$x:00005988                 mov     ecx, [ebp-10h]
.text$x:0000598B                 jmp     ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TreeStateNode>>::~_Vector_val<std::_Simple_types<TreeStateNode>>(void)
.text$x:0000598B __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z$0 endp
.text$x:0000598B
.text$x:00005990
.text$x:00005990 ; =============== S U B R O U T I N E =======================================
.text$x:00005990
.text$x:00005990
.text$x:00005990 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z proc near
.text$x:00005990                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(std::allocator<TreeStateNode> const &)+5o
.text$x:00005990
.text$x:00005990 arg_4           = dword ptr  8
.text$x:00005990
.text$x:00005990                 mov     edx, [esp+arg_4]
.text$x:00005994                 lea     eax, [edx+0Ch]
.text$x:00005997                 mov     ecx, [edx-8]
.text$x:0000599A                 xor     ecx, eax
.text$x:0000599C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000059A1                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z
.text$x:000059A6                 jmp     ___CxxFrameHandler3
.text$x:000059A6 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z endp
.text$x:000059A6
.text$x:000059A6 ; ---------------------------------------------------------------------------
.text$x:000059AB                 align 4
.text$x:000059AB _text$x         ends
.text$x:000059AB
.text$mn:000059AC ; ===========================================================================
.text$mn:000059AC
.text$mn:000059AC ; Segment type: Pure code
.text$mn:000059AC ; Segment permissions: Read/Execute
.text$mn:000059AC _text$mn        segment para public 'CODE' use32
.text$mn:000059AC                 assume cs:_text$mn
.text$mn:000059AC                 ;org 59ACh
.text$mn:000059AC ; COMDAT (pick any)
.text$mn:000059AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059AC
.text$mn:000059AC ; =============== S U B R O U T I N E =======================================
.text$mn:000059AC
.text$mn:000059AC ; Attributes: bp-based frame
.text$mn:000059AC
.text$mn:000059AC ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>(class std::allocator<struct foundInfo> const &)
.text$mn:000059AC                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z
.text$mn:000059AC ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z proc near
.text$mn:000059AC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::vector<foundInfo,std::allocator<foundInfo>>(void)+34p
.text$mn:000059AC
.text$mn:000059AC var_10          = dword ptr -10h
.text$mn:000059AC var_C           = dword ptr -0Ch
.text$mn:000059AC var_4           = dword ptr -4
.text$mn:000059AC
.text$mn:000059AC                 push    ebp
.text$mn:000059AD                 mov     ebp, esp
.text$mn:000059AF                 push    0FFFFFFFFh
.text$mn:000059B1                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z
.text$mn:000059B6                 mov     eax, large fs:0
.text$mn:000059BC                 push    eax
.text$mn:000059BD                 push    ecx
.text$mn:000059BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000059C3                 xor     eax, ebp
.text$mn:000059C5                 push    eax
.text$mn:000059C6                 lea     eax, [ebp+var_C]
.text$mn:000059C9                 mov     large fs:0, eax
.text$mn:000059CF                 mov     [ebp+var_10], ecx
.text$mn:000059D2                 mov     ecx, [ebp+var_10]
.text$mn:000059D5                 call    ??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<foundInfo>>::_Vector_val<std::_Simple_types<foundInfo>>(void)
.text$mn:000059DA                 mov     [ebp+var_4], 0
.text$mn:000059E1                 mov     ecx, [ebp+var_10]
.text$mn:000059E4                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Alloc_proxy(void)
.text$mn:000059E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000059F0                 mov     eax, [ebp+var_10]
.text$mn:000059F3                 mov     ecx, [ebp+var_C]
.text$mn:000059F6                 mov     large fs:0, ecx
.text$mn:000059FD                 pop     ecx
.text$mn:000059FE                 mov     esp, ebp
.text$mn:00005A00                 pop     ebp
.text$mn:00005A01                 retn    4
.text$mn:00005A01 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z endp
.text$mn:00005A01
.text$mn:00005A01 _text$mn        ends
.text$mn:00005A01
.text$x:00005A04 ; ===========================================================================
.text$x:00005A04
.text$x:00005A04 ; Segment type: Pure code
.text$x:00005A04 ; Segment permissions: Read/Execute
.text$x:00005A04 _text$x         segment para public 'CODE' use32
.text$x:00005A04                 assume cs:_text$x
.text$x:00005A04                 ;org 5A04h
.text$x:00005A04 ; COMDAT (pick associative to section at 59AC)
.text$x:00005A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A04
.text$x:00005A04 ; =============== S U B R O U T I N E =======================================
.text$x:00005A04
.text$x:00005A04
.text$x:00005A04 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z$0 proc near
.text$x:00005A04                                         ; DATA XREF: .xdata$x:0000DE44o
.text$x:00005A04                 mov     ecx, [ebp-10h]
.text$x:00005A07                 jmp     ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<foundInfo>>::~_Vector_val<std::_Simple_types<foundInfo>>(void)
.text$x:00005A07 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z$0 endp
.text$x:00005A07
.text$x:00005A0C
.text$x:00005A0C ; =============== S U B R O U T I N E =======================================
.text$x:00005A0C
.text$x:00005A0C
.text$x:00005A0C __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z proc near
.text$x:00005A0C                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(std::allocator<foundInfo> const &)+5o
.text$x:00005A0C
.text$x:00005A0C arg_4           = dword ptr  8
.text$x:00005A0C
.text$x:00005A0C                 mov     edx, [esp+arg_4]
.text$x:00005A10                 lea     eax, [edx+0Ch]
.text$x:00005A13                 mov     ecx, [edx-8]
.text$x:00005A16                 xor     ecx, eax
.text$x:00005A18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A1D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z
.text$x:00005A22                 jmp     ___CxxFrameHandler3
.text$x:00005A22 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z endp
.text$x:00005A22
.text$x:00005A22 ; ---------------------------------------------------------------------------
.text$x:00005A27                 align 4
.text$x:00005A27 _text$x         ends
.text$x:00005A27
.text$mn:00005A28 ; ===========================================================================
.text$mn:00005A28
.text$mn:00005A28 ; Segment type: Pure code
.text$mn:00005A28 ; Segment permissions: Read/Execute
.text$mn:00005A28 _text$mn        segment para public 'CODE' use32
.text$mn:00005A28                 assume cs:_text$mn
.text$mn:00005A28                 ;org 5A28h
.text$mn:00005A28 ; COMDAT (pick any)
.text$mn:00005A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A28
.text$mn:00005A28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A28
.text$mn:00005A28 ; Attributes: bp-based frame
.text$mn:00005A28
.text$mn:00005A28 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00005A28                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00005A28 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00005A28                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+4Ap
.text$mn:00005A28
.text$mn:00005A28 var_10          = dword ptr -10h
.text$mn:00005A28 var_C           = dword ptr -0Ch
.text$mn:00005A28 var_4           = dword ptr -4
.text$mn:00005A28
.text$mn:00005A28                 push    ebp
.text$mn:00005A29                 mov     ebp, esp
.text$mn:00005A2B                 push    0FFFFFFFFh
.text$mn:00005A2D                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00005A32                 mov     eax, large fs:0
.text$mn:00005A38                 push    eax
.text$mn:00005A39                 push    ecx
.text$mn:00005A3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A3F                 xor     eax, ebp
.text$mn:00005A41                 push    eax
.text$mn:00005A42                 lea     eax, [ebp+var_C]
.text$mn:00005A45                 mov     large fs:0, eax
.text$mn:00005A4B                 mov     [ebp+var_10], ecx
.text$mn:00005A4E                 mov     ecx, [ebp+var_10]
.text$mn:00005A51                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00005A56                 mov     [ebp+var_4], 0
.text$mn:00005A5D                 mov     ecx, [ebp+var_10]
.text$mn:00005A60                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00005A65                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005A6C                 mov     eax, [ebp+var_10]
.text$mn:00005A6F                 mov     ecx, [ebp+var_C]
.text$mn:00005A72                 mov     large fs:0, ecx
.text$mn:00005A79                 pop     ecx
.text$mn:00005A7A                 mov     esp, ebp
.text$mn:00005A7C                 pop     ebp
.text$mn:00005A7D                 retn    4
.text$mn:00005A7D ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00005A7D
.text$mn:00005A7D _text$mn        ends
.text$mn:00005A7D
.text$x:00005A80 ; ===========================================================================
.text$x:00005A80
.text$x:00005A80 ; Segment type: Pure code
.text$x:00005A80 ; Segment permissions: Read/Execute
.text$x:00005A80 _text$x         segment para public 'CODE' use32
.text$x:00005A80                 assume cs:_text$x
.text$x:00005A80                 ;org 5A80h
.text$x:00005A80 ; COMDAT (pick associative to section at 5A28)
.text$x:00005A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A80
.text$x:00005A80 ; =============== S U B R O U T I N E =======================================
.text$x:00005A80
.text$x:00005A80
.text$x:00005A80 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00005A80                                         ; DATA XREF: .xdata$x:0000D2B4o
.text$x:00005A80                 mov     ecx, [ebp-10h]
.text$x:00005A83                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00005A83 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00005A83
.text$x:00005A88
.text$x:00005A88 ; =============== S U B R O U T I N E =======================================
.text$x:00005A88
.text$x:00005A88
.text$x:00005A88 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00005A88                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00005A88
.text$x:00005A88 arg_4           = dword ptr  8
.text$x:00005A88
.text$x:00005A88                 mov     edx, [esp+arg_4]
.text$x:00005A8C                 lea     eax, [edx+0Ch]
.text$x:00005A8F                 mov     ecx, [edx-8]
.text$x:00005A92                 xor     ecx, eax
.text$x:00005A94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A99                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:00005A9E                 jmp     ___CxxFrameHandler3
.text$x:00005A9E __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:00005A9E
.text$x:00005A9E ; ---------------------------------------------------------------------------
.text$x:00005AA3                 align 4
.text$x:00005AA3 _text$x         ends
.text$x:00005AA3
.text$mn:00005AA4 ; ===========================================================================
.text$mn:00005AA4
.text$mn:00005AA4 ; Segment type: Pure code
.text$mn:00005AA4 ; Segment permissions: Read/Execute
.text$mn:00005AA4 _text$mn        segment para public 'CODE' use32
.text$mn:00005AA4                 assume cs:_text$mn
.text$mn:00005AA4                 ;org 5AA4h
.text$mn:00005AA4 ; COMDAT (pick any)
.text$mn:00005AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AA4
.text$mn:00005AA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AA4
.text$mn:00005AA4 ; Attributes: bp-based frame
.text$mn:00005AA4
.text$mn:00005AA4 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(struct std::_Iterator_base12 *)
.text$mn:00005AA4                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005AA4 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00005AA4                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+4Fp
.text$mn:00005AA4                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+6Dp ...
.text$mn:00005AA4
.text$mn:00005AA4 var_10          = dword ptr -10h
.text$mn:00005AA4 var_C           = dword ptr -0Ch
.text$mn:00005AA4 var_4           = dword ptr -4
.text$mn:00005AA4 arg_0           = dword ptr  8
.text$mn:00005AA4
.text$mn:00005AA4                 push    ebp
.text$mn:00005AA5                 mov     ebp, esp
.text$mn:00005AA7                 push    0FFFFFFFFh
.text$mn:00005AA9                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005AAE                 mov     eax, large fs:0
.text$mn:00005AB4                 push    eax
.text$mn:00005AB5                 push    ecx
.text$mn:00005AB6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005ABB                 xor     eax, ebp
.text$mn:00005ABD                 push    eax
.text$mn:00005ABE                 lea     eax, [ebp+var_C]
.text$mn:00005AC1                 mov     large fs:0, eax
.text$mn:00005AC7                 mov     [ebp+var_10], ecx
.text$mn:00005ACA                 mov     eax, [ebp+arg_0]
.text$mn:00005ACD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005ACE                 mov     ecx, [ebp+var_10]
.text$mn:00005AD1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12> const &)
.text$mn:00005AD6                 mov     [ebp+var_4], 0
.text$mn:00005ADD                 mov     ecx, [ebp+var_10]
.text$mn:00005AE0                 mov     edx, [ebp+arg_0]
.text$mn:00005AE3                 mov     eax, [edx+8]
.text$mn:00005AE6                 mov     [ecx+8], eax
.text$mn:00005AE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005AF0                 mov     eax, [ebp+var_10]
.text$mn:00005AF3                 mov     ecx, [ebp+var_C]
.text$mn:00005AF6                 mov     large fs:0, ecx
.text$mn:00005AFD                 pop     ecx
.text$mn:00005AFE                 mov     esp, ebp
.text$mn:00005B00                 pop     ebp
.text$mn:00005B01                 retn    4
.text$mn:00005B01 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00005B01
.text$mn:00005B01 _text$mn        ends
.text$mn:00005B01
.text$x:00005B04 ; ===========================================================================
.text$x:00005B04
.text$x:00005B04 ; Segment type: Pure code
.text$x:00005B04 ; Segment permissions: Read/Execute
.text$x:00005B04 _text$x         segment para public 'CODE' use32
.text$x:00005B04                 assume cs:_text$x
.text$x:00005B04                 ;org 5B04h
.text$x:00005B04 ; COMDAT (pick associative to section at 5AA4)
.text$x:00005B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B04
.text$x:00005B04 ; =============== S U B R O U T I N E =======================================
.text$x:00005B04
.text$x:00005B04
.text$x:00005B04 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005B04                                         ; DATA XREF: .xdata$x:0000E240o
.text$x:00005B04                 mov     ecx, [ebp-10h]
.text$x:00005B07                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)
.text$x:00005B07 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005B07
.text$x:00005B0C
.text$x:00005B0C ; =============== S U B R O U T I N E =======================================
.text$x:00005B0C
.text$x:00005B0C
.text$x:00005B0C __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005B0C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>> const &)+5o
.text$x:00005B0C
.text$x:00005B0C arg_4           = dword ptr  8
.text$x:00005B0C
.text$x:00005B0C                 mov     edx, [esp+arg_4]
.text$x:00005B10                 lea     eax, [edx+0Ch]
.text$x:00005B13                 mov     ecx, [edx-8]
.text$x:00005B16                 xor     ecx, eax
.text$x:00005B18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B1D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00005B22                 jmp     ___CxxFrameHandler3
.text$x:00005B22 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00005B22
.text$x:00005B22 ; ---------------------------------------------------------------------------
.text$x:00005B27                 align 4
.text$x:00005B27 _text$x         ends
.text$x:00005B27
.text$mn:00005B28 ; ===========================================================================
.text$mn:00005B28
.text$mn:00005B28 ; Segment type: Pure code
.text$mn:00005B28 ; Segment permissions: Read/Execute
.text$mn:00005B28 _text$mn        segment para public 'CODE' use32
.text$mn:00005B28                 assume cs:_text$mn
.text$mn:00005B28                 ;org 5B28h
.text$mn:00005B28 ; COMDAT (pick any)
.text$mn:00005B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B28
.text$mn:00005B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B28
.text$mn:00005B28 ; Attributes: bp-based frame
.text$mn:00005B28
.text$mn:00005B28 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(int, struct std::_Container_base12 *)
.text$mn:00005B28                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z
.text$mn:00005B28 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z proc near
.text$mn:00005B28                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::begin(void)+3Dp
.text$mn:00005B28                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::end(void)+3Dp
.text$mn:00005B28
.text$mn:00005B28 var_10          = dword ptr -10h
.text$mn:00005B28 var_C           = dword ptr -0Ch
.text$mn:00005B28 var_4           = dword ptr -4
.text$mn:00005B28 arg_0           = dword ptr  8
.text$mn:00005B28 arg_4           = dword ptr  0Ch
.text$mn:00005B28
.text$mn:00005B28                 push    ebp
.text$mn:00005B29                 mov     ebp, esp
.text$mn:00005B2B                 push    0FFFFFFFFh
.text$mn:00005B2D                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z
.text$mn:00005B32                 mov     eax, large fs:0
.text$mn:00005B38                 push    eax
.text$mn:00005B39                 push    ecx
.text$mn:00005B3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B3F                 xor     eax, ebp
.text$mn:00005B41                 push    eax
.text$mn:00005B42                 lea     eax, [ebp+var_C]
.text$mn:00005B45                 mov     large fs:0, eax
.text$mn:00005B4B                 mov     [ebp+var_10], ecx
.text$mn:00005B4E                 mov     ecx, [ebp+var_10]
.text$mn:00005B51                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)
.text$mn:00005B56                 mov     [ebp+var_4], 0
.text$mn:00005B5D                 mov     eax, [ebp+var_10]
.text$mn:00005B60                 mov     ecx, [ebp+arg_0]
.text$mn:00005B63                 mov     [eax+8], ecx
.text$mn:00005B66                 mov     edx, [ebp+arg_4]
.text$mn:00005B69                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005B6A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005B6D                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00005B72                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B79                 mov     eax, [ebp+var_10]
.text$mn:00005B7C                 mov     ecx, [ebp+var_C]
.text$mn:00005B7F                 mov     large fs:0, ecx
.text$mn:00005B86                 pop     ecx
.text$mn:00005B87                 mov     esp, ebp
.text$mn:00005B89                 pop     ebp
.text$mn:00005B8A                 retn    8
.text$mn:00005B8A ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z endp
.text$mn:00005B8A
.text$mn:00005B8A ; ---------------------------------------------------------------------------
.text$mn:00005B8D                 align 10h
.text$mn:00005B8D _text$mn        ends
.text$mn:00005B8D
.text$x:00005B90 ; ===========================================================================
.text$x:00005B90
.text$x:00005B90 ; Segment type: Pure code
.text$x:00005B90 ; Segment permissions: Read/Execute
.text$x:00005B90 _text$x         segment para public 'CODE' use32
.text$x:00005B90                 assume cs:_text$x
.text$x:00005B90                 ;org 5B90h
.text$x:00005B90 ; COMDAT (pick associative to section at 5B28)
.text$x:00005B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B90
.text$x:00005B90 ; =============== S U B R O U T I N E =======================================
.text$x:00005B90
.text$x:00005B90
.text$x:00005B90 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z$0 proc near
.text$x:00005B90                                         ; DATA XREF: .xdata$x:0000E1E8o
.text$x:00005B90                 mov     ecx, [ebp-10h]
.text$x:00005B93                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)
.text$x:00005B93 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z$0 endp
.text$x:00005B93
.text$x:00005B98
.text$x:00005B98 ; =============== S U B R O U T I N E =======================================
.text$x:00005B98
.text$x:00005B98
.text$x:00005B98 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z proc near
.text$x:00005B98                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(TreeStateNode *,std::_Container_base12 const *)+5o
.text$x:00005B98
.text$x:00005B98 arg_4           = dword ptr  8
.text$x:00005B98
.text$x:00005B98                 mov     edx, [esp+arg_4]
.text$x:00005B9C                 lea     eax, [edx+0Ch]
.text$x:00005B9F                 mov     ecx, [edx-8]
.text$x:00005BA2                 xor     ecx, eax
.text$x:00005BA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BA9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z
.text$x:00005BAE                 jmp     ___CxxFrameHandler3
.text$x:00005BAE __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z endp
.text$x:00005BAE
.text$x:00005BAE ; ---------------------------------------------------------------------------
.text$x:00005BB3                 align 4
.text$x:00005BB3 _text$x         ends
.text$x:00005BB3
.text$mn:00005BB4 ; ===========================================================================
.text$mn:00005BB4
.text$mn:00005BB4 ; Segment type: Pure code
.text$mn:00005BB4 ; Segment permissions: Read/Execute
.text$mn:00005BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BB4                 assume cs:_text$mn
.text$mn:00005BB4                 ;org 5BB4h
.text$mn:00005BB4 ; COMDAT (pick any)
.text$mn:00005BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BB4
.text$mn:00005BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BB4
.text$mn:00005BB4 ; Attributes: bp-based frame
.text$mn:00005BB4
.text$mn:00005BB4 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(struct std::_Iterator_base12 *)
.text$mn:00005BB4                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005BB4 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00005BB4                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+1ECp
.text$mn:00005BB4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Fp ...
.text$mn:00005BB4
.text$mn:00005BB4 var_10          = dword ptr -10h
.text$mn:00005BB4 var_C           = dword ptr -0Ch
.text$mn:00005BB4 var_4           = dword ptr -4
.text$mn:00005BB4 arg_0           = dword ptr  8
.text$mn:00005BB4
.text$mn:00005BB4                 push    ebp
.text$mn:00005BB5                 mov     ebp, esp
.text$mn:00005BB7                 push    0FFFFFFFFh
.text$mn:00005BB9                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005BBE                 mov     eax, large fs:0
.text$mn:00005BC4                 push    eax
.text$mn:00005BC5                 push    ecx
.text$mn:00005BC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005BCB                 xor     eax, ebp
.text$mn:00005BCD                 push    eax
.text$mn:00005BCE                 lea     eax, [ebp+var_C]
.text$mn:00005BD1                 mov     large fs:0, eax
.text$mn:00005BD7                 mov     [ebp+var_10], ecx
.text$mn:00005BDA                 mov     eax, [ebp+arg_0]
.text$mn:00005BDD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005BDE                 mov     ecx, [ebp+var_10]
.text$mn:00005BE1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)
.text$mn:00005BE6                 mov     [ebp+var_4], 0
.text$mn:00005BED                 mov     ecx, [ebp+var_10]
.text$mn:00005BF0                 mov     edx, [ebp+arg_0]
.text$mn:00005BF3                 mov     eax, [edx+8]
.text$mn:00005BF6                 mov     [ecx+8], eax
.text$mn:00005BF9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C00                 mov     eax, [ebp+var_10]
.text$mn:00005C03                 mov     ecx, [ebp+var_C]
.text$mn:00005C06                 mov     large fs:0, ecx
.text$mn:00005C0D                 pop     ecx
.text$mn:00005C0E                 mov     esp, ebp
.text$mn:00005C10                 pop     ebp
.text$mn:00005C11                 retn    4
.text$mn:00005C11 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00005C11
.text$mn:00005C11 _text$mn        ends
.text$mn:00005C11
.text$x:00005C14 ; ===========================================================================
.text$x:00005C14
.text$x:00005C14 ; Segment type: Pure code
.text$x:00005C14 ; Segment permissions: Read/Execute
.text$x:00005C14 _text$x         segment para public 'CODE' use32
.text$x:00005C14                 assume cs:_text$x
.text$x:00005C14                 ;org 5C14h
.text$x:00005C14 ; COMDAT (pick associative to section at 5BB4)
.text$x:00005C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C14
.text$x:00005C14 ; =============== S U B R O U T I N E =======================================
.text$x:00005C14
.text$x:00005C14
.text$x:00005C14 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005C14                                         ; DATA XREF: .xdata$x:0000DD68o
.text$x:00005C14                 mov     ecx, [ebp-10h]
.text$x:00005C17                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00005C17 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005C17
.text$x:00005C1C
.text$x:00005C1C ; =============== S U B R O U T I N E =======================================
.text$x:00005C1C
.text$x:00005C1C
.text$x:00005C1C __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005C1C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+5o
.text$x:00005C1C
.text$x:00005C1C arg_4           = dword ptr  8
.text$x:00005C1C
.text$x:00005C1C                 mov     edx, [esp+arg_4]
.text$x:00005C20                 lea     eax, [edx+0Ch]
.text$x:00005C23                 mov     ecx, [edx-8]
.text$x:00005C26                 xor     ecx, eax
.text$x:00005C28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005C2D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00005C32                 jmp     ___CxxFrameHandler3
.text$x:00005C32 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00005C32
.text$x:00005C32 ; ---------------------------------------------------------------------------
.text$x:00005C37                 align 4
.text$x:00005C37 _text$x         ends
.text$x:00005C37
.text$mn:00005C38 ; ===========================================================================
.text$mn:00005C38
.text$mn:00005C38 ; Segment type: Pure code
.text$mn:00005C38 ; Segment permissions: Read/Execute
.text$mn:00005C38 _text$mn        segment para public 'CODE' use32
.text$mn:00005C38                 assume cs:_text$mn
.text$mn:00005C38                 ;org 5C38h
.text$mn:00005C38 ; COMDAT (pick any)
.text$mn:00005C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C38
.text$mn:00005C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C38
.text$mn:00005C38 ; Attributes: bp-based frame
.text$mn:00005C38
.text$mn:00005C38 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00005C38                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00005C38 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00005C38                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+31p
.text$mn:00005C38                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+3Dp ...
.text$mn:00005C38
.text$mn:00005C38 var_10          = dword ptr -10h
.text$mn:00005C38 var_C           = dword ptr -0Ch
.text$mn:00005C38 var_4           = dword ptr -4
.text$mn:00005C38 arg_0           = dword ptr  8
.text$mn:00005C38 arg_4           = dword ptr  0Ch
.text$mn:00005C38
.text$mn:00005C38                 push    ebp
.text$mn:00005C39                 mov     ebp, esp
.text$mn:00005C3B                 push    0FFFFFFFFh
.text$mn:00005C3D                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00005C42                 mov     eax, large fs:0
.text$mn:00005C48                 push    eax
.text$mn:00005C49                 push    ecx
.text$mn:00005C4A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005C4F                 xor     eax, ebp
.text$mn:00005C51                 push    eax
.text$mn:00005C52                 lea     eax, [ebp+var_C]
.text$mn:00005C55                 mov     large fs:0, eax
.text$mn:00005C5B                 mov     [ebp+var_10], ecx
.text$mn:00005C5E                 mov     ecx, [ebp+var_10]
.text$mn:00005C61                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:00005C66                 mov     [ebp+var_4], 0
.text$mn:00005C6D                 mov     eax, [ebp+var_10]
.text$mn:00005C70                 mov     ecx, [ebp+arg_0]
.text$mn:00005C73                 mov     [eax+8], ecx
.text$mn:00005C76                 mov     edx, [ebp+arg_4]
.text$mn:00005C79                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005C7A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005C7D                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00005C82                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C89                 mov     eax, [ebp+var_10]
.text$mn:00005C8C                 mov     ecx, [ebp+var_C]
.text$mn:00005C8F                 mov     large fs:0, ecx
.text$mn:00005C96                 pop     ecx
.text$mn:00005C97                 mov     esp, ebp
.text$mn:00005C99                 pop     ebp
.text$mn:00005C9A                 retn    8
.text$mn:00005C9A ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00005C9A
.text$mn:00005C9A ; ---------------------------------------------------------------------------
.text$mn:00005C9D                 align 10h
.text$mn:00005C9D _text$mn        ends
.text$mn:00005C9D
.text$x:00005CA0 ; ===========================================================================
.text$x:00005CA0
.text$x:00005CA0 ; Segment type: Pure code
.text$x:00005CA0 ; Segment permissions: Read/Execute
.text$x:00005CA0 _text$x         segment para public 'CODE' use32
.text$x:00005CA0                 assume cs:_text$x
.text$x:00005CA0                 ;org 5CA0h
.text$x:00005CA0 ; COMDAT (pick associative to section at 5C38)
.text$x:00005CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005CA0
.text$x:00005CA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005CA0
.text$x:00005CA0
.text$x:00005CA0 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00005CA0                                         ; DATA XREF: .xdata$x:0000DD10o
.text$x:00005CA0                 mov     ecx, [ebp-10h]
.text$x:00005CA3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00005CA3 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00005CA3
.text$x:00005CA8
.text$x:00005CA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005CA8
.text$x:00005CA8
.text$x:00005CA8 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00005CA8                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00005CA8
.text$x:00005CA8 arg_4           = dword ptr  8
.text$x:00005CA8
.text$x:00005CA8                 mov     edx, [esp+arg_4]
.text$x:00005CAC                 lea     eax, [edx+0Ch]
.text$x:00005CAF                 mov     ecx, [edx-8]
.text$x:00005CB2                 xor     ecx, eax
.text$x:00005CB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005CB9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00005CBE                 jmp     ___CxxFrameHandler3
.text$x:00005CBE __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00005CBE
.text$x:00005CBE ; ---------------------------------------------------------------------------
.text$x:00005CC3                 align 4
.text$x:00005CC3 _text$x         ends
.text$x:00005CC3
.text$mn:00005CC4 ; ===========================================================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Segment type: Pure code
.text$mn:00005CC4 ; Segment permissions: Read/Execute
.text$mn:00005CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CC4                 assume cs:_text$mn
.text$mn:00005CC4                 ;org 5CC4h
.text$mn:00005CC4 ; COMDAT (pick any)
.text$mn:00005CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CC4
.text$mn:00005CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Attributes: bp-based frame
.text$mn:00005CC4
.text$mn:00005CC4 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00005CC4                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00005CC4 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00005CC4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+41p
.text$mn:00005CC4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+3Dp
.text$mn:00005CC4
.text$mn:00005CC4 var_10          = dword ptr -10h
.text$mn:00005CC4 var_C           = dword ptr -0Ch
.text$mn:00005CC4 var_4           = dword ptr -4
.text$mn:00005CC4 arg_0           = dword ptr  8
.text$mn:00005CC4 arg_4           = dword ptr  0Ch
.text$mn:00005CC4
.text$mn:00005CC4                 push    ebp
.text$mn:00005CC5                 mov     ebp, esp
.text$mn:00005CC7                 push    0FFFFFFFFh
.text$mn:00005CC9                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00005CCE                 mov     eax, large fs:0
.text$mn:00005CD4                 push    eax
.text$mn:00005CD5                 push    ecx
.text$mn:00005CD6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CDB                 xor     eax, ebp
.text$mn:00005CDD                 push    eax
.text$mn:00005CDE                 lea     eax, [ebp+var_C]
.text$mn:00005CE1                 mov     large fs:0, eax
.text$mn:00005CE7                 mov     [ebp+var_10], ecx
.text$mn:00005CEA                 mov     eax, [ebp+arg_4]
.text$mn:00005CED                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005CEE                 mov     ecx, [ebp+arg_0]
.text$mn:00005CF1                 push    ecx             ; int
.text$mn:00005CF2                 mov     ecx, [ebp+var_10]
.text$mn:00005CF5                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:00005CFA                 mov     [ebp+var_4], 0
.text$mn:00005D01                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D08                 mov     eax, [ebp+var_10]
.text$mn:00005D0B                 mov     ecx, [ebp+var_C]
.text$mn:00005D0E                 mov     large fs:0, ecx
.text$mn:00005D15                 pop     ecx
.text$mn:00005D16                 mov     esp, ebp
.text$mn:00005D18                 pop     ebp
.text$mn:00005D19                 retn    8
.text$mn:00005D19 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00005D19
.text$mn:00005D19 _text$mn        ends
.text$mn:00005D19
.text$x:00005D1C ; ===========================================================================
.text$x:00005D1C
.text$x:00005D1C ; Segment type: Pure code
.text$x:00005D1C ; Segment permissions: Read/Execute
.text$x:00005D1C _text$x         segment para public 'CODE' use32
.text$x:00005D1C                 assume cs:_text$x
.text$x:00005D1C                 ;org 5D1Ch
.text$x:00005D1C ; COMDAT (pick associative to section at 5CC4)
.text$x:00005D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D1C
.text$x:00005D1C ; =============== S U B R O U T I N E =======================================
.text$x:00005D1C
.text$x:00005D1C
.text$x:00005D1C __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00005D1C                                         ; DATA XREF: .xdata$x:0000DD94o
.text$x:00005D1C                 mov     ecx, [ebp-10h]
.text$x:00005D1F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00005D1F __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00005D1F
.text$x:00005D24
.text$x:00005D24 ; =============== S U B R O U T I N E =======================================
.text$x:00005D24
.text$x:00005D24
.text$x:00005D24 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00005D24                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00005D24
.text$x:00005D24 arg_4           = dword ptr  8
.text$x:00005D24
.text$x:00005D24                 mov     edx, [esp+arg_4]
.text$x:00005D28                 lea     eax, [edx+0Ch]
.text$x:00005D2B                 mov     ecx, [edx-8]
.text$x:00005D2E                 xor     ecx, eax
.text$x:00005D30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D35                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00005D3A                 jmp     ___CxxFrameHandler3
.text$x:00005D3A __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00005D3A
.text$x:00005D3A ; ---------------------------------------------------------------------------
.text$x:00005D3F                 align 10h
.text$x:00005D3F _text$x         ends
.text$x:00005D3F
.text$mn:00005D40 ; ===========================================================================
.text$mn:00005D40
.text$mn:00005D40 ; Segment type: Pure code
.text$mn:00005D40 ; Segment permissions: Read/Execute
.text$mn:00005D40 _text$mn        segment para public 'CODE' use32
.text$mn:00005D40                 assume cs:_text$mn
.text$mn:00005D40                 ;org 5D40h
.text$mn:00005D40 ; COMDAT (pick any)
.text$mn:00005D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D40
.text$mn:00005D40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D40
.text$mn:00005D40 ; Attributes: bp-based frame
.text$mn:00005D40
.text$mn:00005D40 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>(void)
.text$mn:00005D40                 public ??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:00005D40 ??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$mn:00005D40                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(std::allocator<TreeStateNode> const &)+29p
.text$mn:00005D40
.text$mn:00005D40 var_10          = dword ptr -10h
.text$mn:00005D40 var_C           = dword ptr -0Ch
.text$mn:00005D40 var_4           = dword ptr -4
.text$mn:00005D40
.text$mn:00005D40                 push    ebp
.text$mn:00005D41                 mov     ebp, esp
.text$mn:00005D43                 push    0FFFFFFFFh
.text$mn:00005D45                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:00005D4A                 mov     eax, large fs:0
.text$mn:00005D50                 push    eax
.text$mn:00005D51                 push    ecx
.text$mn:00005D52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D57                 xor     eax, ebp
.text$mn:00005D59                 push    eax
.text$mn:00005D5A                 lea     eax, [ebp+var_C]
.text$mn:00005D5D                 mov     large fs:0, eax
.text$mn:00005D63                 mov     [ebp+var_10], ecx
.text$mn:00005D66                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005D69                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00005D6E                 mov     [ebp+var_4], 0
.text$mn:00005D75                 mov     eax, [ebp+var_10]
.text$mn:00005D78                 mov     dword ptr [eax+4], 0
.text$mn:00005D7F                 mov     ecx, [ebp+var_10]
.text$mn:00005D82                 mov     dword ptr [ecx+8], 0
.text$mn:00005D89                 mov     edx, [ebp+var_10]
.text$mn:00005D8C                 mov     dword ptr [edx+0Ch], 0
.text$mn:00005D93                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D9A                 mov     eax, [ebp+var_10]
.text$mn:00005D9D                 mov     ecx, [ebp+var_C]
.text$mn:00005DA0                 mov     large fs:0, ecx
.text$mn:00005DA7                 pop     ecx
.text$mn:00005DA8                 mov     esp, ebp
.text$mn:00005DAA                 pop     ebp
.text$mn:00005DAB                 retn
.text$mn:00005DAB ??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$mn:00005DAB
.text$mn:00005DAB _text$mn        ends
.text$mn:00005DAB
.text$x:00005DAC ; ===========================================================================
.text$x:00005DAC
.text$x:00005DAC ; Segment type: Pure code
.text$x:00005DAC ; Segment permissions: Read/Execute
.text$x:00005DAC _text$x         segment para public 'CODE' use32
.text$x:00005DAC                 assume cs:_text$x
.text$x:00005DAC                 ;org 5DACh
.text$x:00005DAC ; COMDAT (pick associative to section at 5D40)
.text$x:00005DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DAC
.text$x:00005DAC ; =============== S U B R O U T I N E =======================================
.text$x:00005DAC
.text$x:00005DAC
.text$x:00005DAC __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00005DAC                                         ; DATA XREF: .xdata$x:0000D55Co
.text$x:00005DAC                 mov     ecx, [ebp-10h]  ; this
.text$x:00005DAF                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005DAF __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0 endp
.text$x:00005DAF
.text$x:00005DB4
.text$x:00005DB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005DB4
.text$x:00005DB4
.text$x:00005DB4 __ehhandler$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$x:00005DB4                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<TreeStateNode>>::_Vector_val<std::_Simple_types<TreeStateNode>>(void)+5o
.text$x:00005DB4
.text$x:00005DB4 arg_4           = dword ptr  8
.text$x:00005DB4
.text$x:00005DB4                 mov     edx, [esp+arg_4]
.text$x:00005DB8                 lea     eax, [edx+0Ch]
.text$x:00005DBB                 mov     ecx, [edx-8]
.text$x:00005DBE                 xor     ecx, eax
.text$x:00005DC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DC5                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$x:00005DCA                 jmp     ___CxxFrameHandler3
.text$x:00005DCA __ehhandler$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$x:00005DCA
.text$x:00005DCA ; ---------------------------------------------------------------------------
.text$x:00005DCF                 align 10h
.text$x:00005DCF _text$x         ends
.text$x:00005DCF
.text$mn:00005DD0 ; ===========================================================================
.text$mn:00005DD0
.text$mn:00005DD0 ; Segment type: Pure code
.text$mn:00005DD0 ; Segment permissions: Read/Execute
.text$mn:00005DD0 _text$mn        segment para public 'CODE' use32
.text$mn:00005DD0                 assume cs:_text$mn
.text$mn:00005DD0                 ;org 5DD0h
.text$mn:00005DD0 ; COMDAT (pick any)
.text$mn:00005DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DD0
.text$mn:00005DD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DD0
.text$mn:00005DD0 ; Attributes: bp-based frame
.text$mn:00005DD0
.text$mn:00005DD0 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct foundInfo>>::_Vector_val<struct std::_Simple_types<struct foundInfo>>(void)
.text$mn:00005DD0                 public ??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:00005DD0 ??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:00005DD0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(std::allocator<foundInfo> const &)+29p
.text$mn:00005DD0
.text$mn:00005DD0 var_10          = dword ptr -10h
.text$mn:00005DD0 var_C           = dword ptr -0Ch
.text$mn:00005DD0 var_4           = dword ptr -4
.text$mn:00005DD0
.text$mn:00005DD0                 push    ebp
.text$mn:00005DD1                 mov     ebp, esp
.text$mn:00005DD3                 push    0FFFFFFFFh
.text$mn:00005DD5                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:00005DDA                 mov     eax, large fs:0
.text$mn:00005DE0                 push    eax
.text$mn:00005DE1                 push    ecx
.text$mn:00005DE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005DE7                 xor     eax, ebp
.text$mn:00005DE9                 push    eax
.text$mn:00005DEA                 lea     eax, [ebp+var_C]
.text$mn:00005DED                 mov     large fs:0, eax
.text$mn:00005DF3                 mov     [ebp+var_10], ecx
.text$mn:00005DF6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005DF9                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00005DFE                 mov     [ebp+var_4], 0
.text$mn:00005E05                 mov     eax, [ebp+var_10]
.text$mn:00005E08                 mov     dword ptr [eax+4], 0
.text$mn:00005E0F                 mov     ecx, [ebp+var_10]
.text$mn:00005E12                 mov     dword ptr [ecx+8], 0
.text$mn:00005E19                 mov     edx, [ebp+var_10]
.text$mn:00005E1C                 mov     dword ptr [edx+0Ch], 0
.text$mn:00005E23                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E2A                 mov     eax, [ebp+var_10]
.text$mn:00005E2D                 mov     ecx, [ebp+var_C]
.text$mn:00005E30                 mov     large fs:0, ecx
.text$mn:00005E37                 pop     ecx
.text$mn:00005E38                 mov     esp, ebp
.text$mn:00005E3A                 pop     ebp
.text$mn:00005E3B                 retn
.text$mn:00005E3B ??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00005E3B
.text$mn:00005E3B _text$mn        ends
.text$mn:00005E3B
.text$x:00005E3C ; ===========================================================================
.text$x:00005E3C
.text$x:00005E3C ; Segment type: Pure code
.text$x:00005E3C ; Segment permissions: Read/Execute
.text$x:00005E3C _text$x         segment para public 'CODE' use32
.text$x:00005E3C                 assume cs:_text$x
.text$x:00005E3C                 ;org 5E3Ch
.text$x:00005E3C ; COMDAT (pick associative to section at 5DD0)
.text$x:00005E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E3C
.text$x:00005E3C ; =============== S U B R O U T I N E =======================================
.text$x:00005E3C
.text$x:00005E3C
.text$x:00005E3C __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00005E3C                                         ; DATA XREF: .xdata$x:0000DDECo
.text$x:00005E3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005E3F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005E3F __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:00005E3F
.text$x:00005E44
.text$x:00005E44 ; =============== S U B R O U T I N E =======================================
.text$x:00005E44
.text$x:00005E44
.text$x:00005E44 __ehhandler$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00005E44                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<foundInfo>>::_Vector_val<std::_Simple_types<foundInfo>>(void)+5o
.text$x:00005E44
.text$x:00005E44 arg_4           = dword ptr  8
.text$x:00005E44
.text$x:00005E44                 mov     edx, [esp+arg_4]
.text$x:00005E48                 lea     eax, [edx+0Ch]
.text$x:00005E4B                 mov     ecx, [edx-8]
.text$x:00005E4E                 xor     ecx, eax
.text$x:00005E50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E55                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$x:00005E5A                 jmp     ___CxxFrameHandler3
.text$x:00005E5A __ehhandler$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$x:00005E5A
.text$x:00005E5A ; ---------------------------------------------------------------------------
.text$x:00005E5F                 align 10h
.text$x:00005E5F _text$x         ends
.text$x:00005E5F
.text$mn:00005E60 ; ===========================================================================
.text$mn:00005E60
.text$mn:00005E60 ; Segment type: Pure code
.text$mn:00005E60 ; Segment permissions: Read/Execute
.text$mn:00005E60 _text$mn        segment para public 'CODE' use32
.text$mn:00005E60                 assume cs:_text$mn
.text$mn:00005E60                 ;org 5E60h
.text$mn:00005E60 ; COMDAT (pick any)
.text$mn:00005E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E60
.text$mn:00005E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E60
.text$mn:00005E60 ; Attributes: bp-based frame
.text$mn:00005E60
.text$mn:00005E60 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00005E60                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00005E60 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005E60                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00005E60
.text$mn:00005E60 var_10          = dword ptr -10h
.text$mn:00005E60 var_C           = dword ptr -0Ch
.text$mn:00005E60 var_4           = dword ptr -4
.text$mn:00005E60
.text$mn:00005E60                 push    ebp
.text$mn:00005E61                 mov     ebp, esp
.text$mn:00005E63                 push    0FFFFFFFFh
.text$mn:00005E65                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00005E6A                 mov     eax, large fs:0
.text$mn:00005E70                 push    eax
.text$mn:00005E71                 push    ecx
.text$mn:00005E72                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E77                 xor     eax, ebp
.text$mn:00005E79                 push    eax
.text$mn:00005E7A                 lea     eax, [ebp+var_C]
.text$mn:00005E7D                 mov     large fs:0, eax
.text$mn:00005E83                 mov     [ebp+var_10], ecx
.text$mn:00005E86                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005E89                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00005E8E                 mov     [ebp+var_4], 0
.text$mn:00005E95                 mov     eax, [ebp+var_10]
.text$mn:00005E98                 mov     dword ptr [eax+4], 0
.text$mn:00005E9F                 mov     ecx, [ebp+var_10]
.text$mn:00005EA2                 mov     dword ptr [ecx+8], 0
.text$mn:00005EA9                 mov     edx, [ebp+var_10]
.text$mn:00005EAC                 mov     dword ptr [edx+0Ch], 0
.text$mn:00005EB3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005EBA                 mov     eax, [ebp+var_10]
.text$mn:00005EBD                 mov     ecx, [ebp+var_C]
.text$mn:00005EC0                 mov     large fs:0, ecx
.text$mn:00005EC7                 pop     ecx
.text$mn:00005EC8                 mov     esp, ebp
.text$mn:00005ECA                 pop     ebp
.text$mn:00005ECB                 retn
.text$mn:00005ECB ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00005ECB
.text$mn:00005ECB _text$mn        ends
.text$mn:00005ECB
.text$x:00005ECC ; ===========================================================================
.text$x:00005ECC
.text$x:00005ECC ; Segment type: Pure code
.text$x:00005ECC ; Segment permissions: Read/Execute
.text$x:00005ECC _text$x         segment para public 'CODE' use32
.text$x:00005ECC                 assume cs:_text$x
.text$x:00005ECC                 ;org 5ECCh
.text$x:00005ECC ; COMDAT (pick associative to section at 5E60)
.text$x:00005ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ECC
.text$x:00005ECC ; =============== S U B R O U T I N E =======================================
.text$x:00005ECC
.text$x:00005ECC
.text$x:00005ECC __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00005ECC                                         ; DATA XREF: .xdata$x:0000D25Co
.text$x:00005ECC                 mov     ecx, [ebp-10h]  ; this
.text$x:00005ECF                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005ECF __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00005ECF
.text$x:00005ED4
.text$x:00005ED4 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED4
.text$x:00005ED4
.text$x:00005ED4 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00005ED4                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00005ED4
.text$x:00005ED4 arg_4           = dword ptr  8
.text$x:00005ED4
.text$x:00005ED4                 mov     edx, [esp+arg_4]
.text$x:00005ED8                 lea     eax, [edx+0Ch]
.text$x:00005EDB                 mov     ecx, [edx-8]
.text$x:00005EDE                 xor     ecx, eax
.text$x:00005EE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EE5                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00005EEA                 jmp     ___CxxFrameHandler3
.text$x:00005EEA __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00005EEA
.text$x:00005EEA ; ---------------------------------------------------------------------------
.text$x:00005EEF                 align 10h
.text$x:00005EEF _text$x         ends
.text$x:00005EEF
.text$mn:00005EF0 ; ===========================================================================
.text$mn:00005EF0
.text$mn:00005EF0 ; Segment type: Pure code
.text$mn:00005EF0 ; Segment permissions: Read/Execute
.text$mn:00005EF0 _text$mn        segment para public 'CODE' use32
.text$mn:00005EF0                 assume cs:_text$mn
.text$mn:00005EF0                 ;org 5EF0h
.text$mn:00005EF0 ; COMDAT (pick any)
.text$mn:00005EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EF0
.text$mn:00005EF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EF0
.text$mn:00005EF0 ; Attributes: bp-based frame
.text$mn:00005EF0
.text$mn:00005EF0 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00005EF0                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00005EF0 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00005EF0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00005EF0
.text$mn:00005EF0 var_4           = dword ptr -4
.text$mn:00005EF0
.text$mn:00005EF0                 push    ebp
.text$mn:00005EF1                 mov     ebp, esp
.text$mn:00005EF3                 push    ecx
.text$mn:00005EF4                 mov     [ebp+var_4], ecx
.text$mn:00005EF7                 mov     ecx, [ebp+var_4]
.text$mn:00005EFA                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00005EFF                 mov     eax, [ebp+var_4]
.text$mn:00005F02                 mov     esp, ebp
.text$mn:00005F04                 pop     ebp
.text$mn:00005F05                 retn
.text$mn:00005F05 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00005F05
.text$mn:00005F05 ; ---------------------------------------------------------------------------
.text$mn:00005F06                 align 4
.text$mn:00005F06 _text$mn        ends
.text$mn:00005F06
.text$mn:00005F08 ; ===========================================================================
.text$mn:00005F08
.text$mn:00005F08 ; Segment type: Pure code
.text$mn:00005F08 ; Segment permissions: Read/Execute
.text$mn:00005F08 _text$mn        segment para public 'CODE' use32
.text$mn:00005F08                 assume cs:_text$mn
.text$mn:00005F08                 ;org 5F08h
.text$mn:00005F08 ; COMDAT (pick any)
.text$mn:00005F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F08
.text$mn:00005F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F08
.text$mn:00005F08 ; Attributes: bp-based frame
.text$mn:00005F08
.text$mn:00005F08 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::_Wrap_alloc<class std::allocator<struct TreeParams>>(void)
.text$mn:00005F08                 public ??0?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAE@XZ
.text$mn:00005F08 ??0?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAE@XZ proc near
.text$mn:00005F08                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)+Ap
.text$mn:00005F08
.text$mn:00005F08 var_4           = dword ptr -4
.text$mn:00005F08
.text$mn:00005F08                 push    ebp
.text$mn:00005F09                 mov     ebp, esp
.text$mn:00005F0B                 push    ecx
.text$mn:00005F0C                 mov     [ebp+var_4], ecx
.text$mn:00005F0F                 mov     ecx, [ebp+var_4]
.text$mn:00005F12                 call    ??0?$allocator@UTreeParams@@@std@@QAE@XZ ; std::allocator<TreeParams>::allocator<TreeParams>(void)
.text$mn:00005F17                 mov     eax, [ebp+var_4]
.text$mn:00005F1A                 mov     esp, ebp
.text$mn:00005F1C                 pop     ebp
.text$mn:00005F1D                 retn
.text$mn:00005F1D ??0?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAE@XZ endp
.text$mn:00005F1D
.text$mn:00005F1D ; ---------------------------------------------------------------------------
.text$mn:00005F1E                 align 10h
.text$mn:00005F1E _text$mn        ends
.text$mn:00005F1E
.text$mn:00005F20 ; ===========================================================================
.text$mn:00005F20
.text$mn:00005F20 ; Segment type: Pure code
.text$mn:00005F20 ; Segment permissions: Read/Execute
.text$mn:00005F20 _text$mn        segment para public 'CODE' use32
.text$mn:00005F20                 assume cs:_text$mn
.text$mn:00005F20                 ;org 5F20h
.text$mn:00005F20 ; COMDAT (pick any)
.text$mn:00005F20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F20
.text$mn:00005F20 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F20
.text$mn:00005F20 ; Attributes: bp-based frame
.text$mn:00005F20
.text$mn:00005F20 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::_Wrap_alloc<class std::allocator<struct TreeStateNode>>(class std::allocator<struct TreeStateNode> const &)
.text$mn:00005F20                 public ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z
.text$mn:00005F20 ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z proc near
.text$mn:00005F20                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00005F20
.text$mn:00005F20 var_4           = dword ptr -4
.text$mn:00005F20 arg_0           = dword ptr  8
.text$mn:00005F20
.text$mn:00005F20                 push    ebp
.text$mn:00005F21                 mov     ebp, esp
.text$mn:00005F23                 push    ecx
.text$mn:00005F24                 mov     [ebp+var_4], ecx
.text$mn:00005F27                 mov     eax, [ebp+arg_0]
.text$mn:00005F2A                 push    eax
.text$mn:00005F2B                 mov     ecx, [ebp+var_4]
.text$mn:00005F2E                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(std::allocator<TreeStateNode> const &)
.text$mn:00005F33                 mov     eax, [ebp+var_4]
.text$mn:00005F36                 mov     esp, ebp
.text$mn:00005F38                 pop     ebp
.text$mn:00005F39                 retn    4
.text$mn:00005F39 ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z endp
.text$mn:00005F39
.text$mn:00005F39 _text$mn        ends
.text$mn:00005F39
.text$mn:00005F3C ; ===========================================================================
.text$mn:00005F3C
.text$mn:00005F3C ; Segment type: Pure code
.text$mn:00005F3C ; Segment permissions: Read/Execute
.text$mn:00005F3C _text$mn        segment para public 'CODE' use32
.text$mn:00005F3C                 assume cs:_text$mn
.text$mn:00005F3C                 ;org 5F3Ch
.text$mn:00005F3C ; COMDAT (pick any)
.text$mn:00005F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F3C
.text$mn:00005F3C ; =============== S U B R O U T I N E =======================================
.text$mn:00005F3C
.text$mn:00005F3C ; Attributes: bp-based frame
.text$mn:00005F3C
.text$mn:00005F3C ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::_Wrap_alloc<class std::allocator<struct TreeStateNode>>(void)
.text$mn:00005F3C                 public ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:00005F3C ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$mn:00005F3C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)+Ap
.text$mn:00005F3C
.text$mn:00005F3C var_4           = dword ptr -4
.text$mn:00005F3C
.text$mn:00005F3C                 push    ebp
.text$mn:00005F3D                 mov     ebp, esp
.text$mn:00005F3F                 push    ecx
.text$mn:00005F40                 mov     [ebp+var_4], ecx
.text$mn:00005F43                 mov     ecx, [ebp+var_4]
.text$mn:00005F46                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@XZ ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(void)
.text$mn:00005F4B                 mov     eax, [ebp+var_4]
.text$mn:00005F4E                 mov     esp, ebp
.text$mn:00005F50                 pop     ebp
.text$mn:00005F51                 retn
.text$mn:00005F51 ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$mn:00005F51
.text$mn:00005F51 ; ---------------------------------------------------------------------------
.text$mn:00005F52                 align 4
.text$mn:00005F52 _text$mn        ends
.text$mn:00005F52
.text$mn:00005F54 ; ===========================================================================
.text$mn:00005F54
.text$mn:00005F54 ; Segment type: Pure code
.text$mn:00005F54 ; Segment permissions: Read/Execute
.text$mn:00005F54 _text$mn        segment para public 'CODE' use32
.text$mn:00005F54                 assume cs:_text$mn
.text$mn:00005F54                 ;org 5F54h
.text$mn:00005F54 ; COMDAT (pick any)
.text$mn:00005F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F54
.text$mn:00005F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F54
.text$mn:00005F54 ; Attributes: bp-based frame
.text$mn:00005F54
.text$mn:00005F54 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00005F54                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00005F54 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005F54                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Alloc_proxy(void)+Cp
.text$mn:00005F54                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00005F54
.text$mn:00005F54 var_4           = dword ptr -4
.text$mn:00005F54
.text$mn:00005F54                 push    ebp
.text$mn:00005F55                 mov     ebp, esp
.text$mn:00005F57                 push    ecx
.text$mn:00005F58                 mov     [ebp+var_4], ecx
.text$mn:00005F5B                 mov     ecx, [ebp+var_4]
.text$mn:00005F5E                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005F63                 mov     eax, [ebp+var_4]
.text$mn:00005F66                 mov     esp, ebp
.text$mn:00005F68                 pop     ebp
.text$mn:00005F69                 retn
.text$mn:00005F69 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00005F69
.text$mn:00005F69 ; ---------------------------------------------------------------------------
.text$mn:00005F6A                 align 4
.text$mn:00005F6A _text$mn        ends
.text$mn:00005F6A
.text$mn:00005F6C ; ===========================================================================
.text$mn:00005F6C
.text$mn:00005F6C ; Segment type: Pure code
.text$mn:00005F6C ; Segment permissions: Read/Execute
.text$mn:00005F6C _text$mn        segment para public 'CODE' use32
.text$mn:00005F6C                 assume cs:_text$mn
.text$mn:00005F6C                 ;org 5F6Ch
.text$mn:00005F6C ; COMDAT (pick any)
.text$mn:00005F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F6C
.text$mn:00005F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00005F6C
.text$mn:00005F6C ; Attributes: bp-based frame
.text$mn:00005F6C
.text$mn:00005F6C ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::_Wrap_alloc<class std::allocator<struct foundInfo>>(void)
.text$mn:00005F6C                 public ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:00005F6C ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:00005F6C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)+Ap
.text$mn:00005F6C
.text$mn:00005F6C var_4           = dword ptr -4
.text$mn:00005F6C
.text$mn:00005F6C                 push    ebp
.text$mn:00005F6D                 mov     ebp, esp
.text$mn:00005F6F                 push    ecx
.text$mn:00005F70                 mov     [ebp+var_4], ecx
.text$mn:00005F73                 mov     ecx, [ebp+var_4]
.text$mn:00005F76                 call    ??0?$allocator@UfoundInfo@@@std@@QAE@XZ ; std::allocator<foundInfo>::allocator<foundInfo>(void)
.text$mn:00005F7B                 mov     eax, [ebp+var_4]
.text$mn:00005F7E                 mov     esp, ebp
.text$mn:00005F80                 pop     ebp
.text$mn:00005F81                 retn
.text$mn:00005F81 ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00005F81
.text$mn:00005F81 ; ---------------------------------------------------------------------------
.text$mn:00005F82                 align 4
.text$mn:00005F82 _text$mn        ends
.text$mn:00005F82
.text$mn:00005F84 ; ===========================================================================
.text$mn:00005F84
.text$mn:00005F84 ; Segment type: Pure code
.text$mn:00005F84 ; Segment permissions: Read/Execute
.text$mn:00005F84 _text$mn        segment para public 'CODE' use32
.text$mn:00005F84                 assume cs:_text$mn
.text$mn:00005F84                 ;org 5F84h
.text$mn:00005F84 ; COMDAT (pick any)
.text$mn:00005F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F84
.text$mn:00005F84 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F84
.text$mn:00005F84 ; Attributes: bp-based frame
.text$mn:00005F84
.text$mn:00005F84 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00005F84                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00005F84 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00005F84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00005F84
.text$mn:00005F84 var_4           = dword ptr -4
.text$mn:00005F84 arg_0           = dword ptr  8
.text$mn:00005F84
.text$mn:00005F84                 push    ebp
.text$mn:00005F85                 mov     ebp, esp
.text$mn:00005F87                 push    ecx
.text$mn:00005F88                 mov     [ebp+var_4], ecx
.text$mn:00005F8B                 mov     eax, [ebp+arg_0]
.text$mn:00005F8E                 push    eax
.text$mn:00005F8F                 mov     ecx, [ebp+var_4]
.text$mn:00005F92                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00005F97                 mov     eax, [ebp+var_4]
.text$mn:00005F9A                 mov     esp, ebp
.text$mn:00005F9C                 pop     ebp
.text$mn:00005F9D                 retn    4
.text$mn:00005F9D ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00005F9D
.text$mn:00005F9D _text$mn        ends
.text$mn:00005F9D
.text$mn:00005FA0 ; ===========================================================================
.text$mn:00005FA0
.text$mn:00005FA0 ; Segment type: Pure code
.text$mn:00005FA0 ; Segment permissions: Read/Execute
.text$mn:00005FA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005FA0                 assume cs:_text$mn
.text$mn:00005FA0                 ;org 5FA0h
.text$mn:00005FA0 ; COMDAT (pick any)
.text$mn:00005FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FA0
.text$mn:00005FA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FA0
.text$mn:00005FA0 ; Attributes: bp-based frame
.text$mn:00005FA0
.text$mn:00005FA0 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00005FA0                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00005FA0 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005FA0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:00005FA0
.text$mn:00005FA0 var_4           = dword ptr -4
.text$mn:00005FA0
.text$mn:00005FA0                 push    ebp
.text$mn:00005FA1                 mov     ebp, esp
.text$mn:00005FA3                 push    ecx
.text$mn:00005FA4                 mov     [ebp+var_4], ecx
.text$mn:00005FA7                 mov     ecx, [ebp+var_4]
.text$mn:00005FAA                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00005FAF                 mov     eax, [ebp+var_4]
.text$mn:00005FB2                 mov     esp, ebp
.text$mn:00005FB4                 pop     ebp
.text$mn:00005FB5                 retn
.text$mn:00005FB5 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00005FB5
.text$mn:00005FB5 ; ---------------------------------------------------------------------------
.text$mn:00005FB6                 align 4
.text$mn:00005FB6 _text$mn        ends
.text$mn:00005FB6
.text$mn:00005FB8 ; ===========================================================================
.text$mn:00005FB8
.text$mn:00005FB8 ; Segment type: Pure code
.text$mn:00005FB8 ; Segment permissions: Read/Execute
.text$mn:00005FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00005FB8                 assume cs:_text$mn
.text$mn:00005FB8                 ;org 5FB8h
.text$mn:00005FB8 ; COMDAT (pick any)
.text$mn:00005FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FB8
.text$mn:00005FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FB8
.text$mn:00005FB8 ; Attributes: bp-based frame
.text$mn:00005FB8
.text$mn:00005FB8 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00005FB8                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00005FB8 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00005FB8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00005FB8
.text$mn:00005FB8 var_4           = dword ptr -4
.text$mn:00005FB8 arg_0           = dword ptr  8
.text$mn:00005FB8
.text$mn:00005FB8                 push    ebp
.text$mn:00005FB9                 mov     ebp, esp
.text$mn:00005FBB                 push    ecx
.text$mn:00005FBC                 mov     [ebp+var_4], ecx
.text$mn:00005FBF                 mov     eax, [ebp+arg_0]
.text$mn:00005FC2                 push    eax
.text$mn:00005FC3                 mov     ecx, [ebp+var_4]
.text$mn:00005FC6                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00005FCB                 mov     eax, [ebp+var_4]
.text$mn:00005FCE                 mov     esp, ebp
.text$mn:00005FD0                 pop     ebp
.text$mn:00005FD1                 retn    4
.text$mn:00005FD1 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00005FD1
.text$mn:00005FD1 _text$mn        ends
.text$mn:00005FD1
.text$mn:00005FD4 ; ===========================================================================
.text$mn:00005FD4
.text$mn:00005FD4 ; Segment type: Pure code
.text$mn:00005FD4 ; Segment permissions: Read/Execute
.text$mn:00005FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00005FD4                 assume cs:_text$mn
.text$mn:00005FD4                 ;org 5FD4h
.text$mn:00005FD4 ; COMDAT (pick any)
.text$mn:00005FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FD4
.text$mn:00005FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FD4
.text$mn:00005FD4 ; Attributes: bp-based frame
.text$mn:00005FD4
.text$mn:00005FD4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00005FD4                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00005FD4 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00005FD4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00005FD4
.text$mn:00005FD4 var_4           = dword ptr -4
.text$mn:00005FD4
.text$mn:00005FD4                 push    ebp
.text$mn:00005FD5                 mov     ebp, esp
.text$mn:00005FD7                 push    ecx
.text$mn:00005FD8                 mov     [ebp+var_4], ecx
.text$mn:00005FDB                 mov     ecx, [ebp+var_4]
.text$mn:00005FDE                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005FE3                 mov     eax, [ebp+var_4]
.text$mn:00005FE6                 mov     esp, ebp
.text$mn:00005FE8                 pop     ebp
.text$mn:00005FE9                 retn
.text$mn:00005FE9 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00005FE9
.text$mn:00005FE9 ; ---------------------------------------------------------------------------
.text$mn:00005FEA                 align 4
.text$mn:00005FEA _text$mn        ends
.text$mn:00005FEA
.text$mn:00005FEC ; ===========================================================================
.text$mn:00005FEC
.text$mn:00005FEC ; Segment type: Pure code
.text$mn:00005FEC ; Segment permissions: Read/Execute
.text$mn:00005FEC _text$mn        segment para public 'CODE' use32
.text$mn:00005FEC                 assume cs:_text$mn
.text$mn:00005FEC                 ;org 5FECh
.text$mn:00005FEC ; COMDAT (pick any)
.text$mn:00005FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FEC
.text$mn:00005FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FEC
.text$mn:00005FEC ; Attributes: bp-based frame
.text$mn:00005FEC
.text$mn:00005FEC ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00005FEC                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00005FEC ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00005FEC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00005FEC
.text$mn:00005FEC var_4           = dword ptr -4
.text$mn:00005FEC
.text$mn:00005FEC                 push    ebp
.text$mn:00005FED                 mov     ebp, esp
.text$mn:00005FEF                 push    ecx
.text$mn:00005FF0                 mov     [ebp+var_4], ecx
.text$mn:00005FF3                 mov     eax, [ebp+var_4]
.text$mn:00005FF6                 mov     esp, ebp
.text$mn:00005FF8                 pop     ebp
.text$mn:00005FF9                 retn
.text$mn:00005FF9 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00005FF9
.text$mn:00005FF9 ; ---------------------------------------------------------------------------
.text$mn:00005FFA                 align 4
.text$mn:00005FFA _text$mn        ends
.text$mn:00005FFA
.text$mn:00005FFC ; ===========================================================================
.text$mn:00005FFC
.text$mn:00005FFC ; Segment type: Pure code
.text$mn:00005FFC ; Segment permissions: Read/Execute
.text$mn:00005FFC _text$mn        segment para public 'CODE' use32
.text$mn:00005FFC                 assume cs:_text$mn
.text$mn:00005FFC                 ;org 5FFCh
.text$mn:00005FFC ; COMDAT (pick any)
.text$mn:00005FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FFC
.text$mn:00005FFC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FFC
.text$mn:00005FFC ; Attributes: bp-based frame
.text$mn:00005FFC
.text$mn:00005FFC ; public: __thiscall std::allocator<struct TreeParams>::allocator<struct TreeParams>(void)
.text$mn:00005FFC                 public ??0?$allocator@UTreeParams@@@std@@QAE@XZ
.text$mn:00005FFC ??0?$allocator@UTreeParams@@@std@@QAE@XZ proc near
.text$mn:00005FFC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::_Wrap_alloc<std::allocator<TreeParams>>(void)+Ap
.text$mn:00005FFC
.text$mn:00005FFC var_4           = dword ptr -4
.text$mn:00005FFC
.text$mn:00005FFC                 push    ebp
.text$mn:00005FFD                 mov     ebp, esp
.text$mn:00005FFF                 push    ecx
.text$mn:00006000                 mov     [ebp+var_4], ecx
.text$mn:00006003                 mov     eax, [ebp+var_4]
.text$mn:00006006                 mov     esp, ebp
.text$mn:00006008                 pop     ebp
.text$mn:00006009                 retn
.text$mn:00006009 ??0?$allocator@UTreeParams@@@std@@QAE@XZ endp
.text$mn:00006009
.text$mn:00006009 ; ---------------------------------------------------------------------------
.text$mn:0000600A                 align 4
.text$mn:0000600A _text$mn        ends
.text$mn:0000600A
.text$mn:0000600C ; ===========================================================================
.text$mn:0000600C
.text$mn:0000600C ; Segment type: Pure code
.text$mn:0000600C ; Segment permissions: Read/Execute
.text$mn:0000600C _text$mn        segment para public 'CODE' use32
.text$mn:0000600C                 assume cs:_text$mn
.text$mn:0000600C                 ;org 600Ch
.text$mn:0000600C ; COMDAT (pick any)
.text$mn:0000600C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000600C
.text$mn:0000600C ; =============== S U B R O U T I N E =======================================
.text$mn:0000600C
.text$mn:0000600C ; Attributes: bp-based frame
.text$mn:0000600C
.text$mn:0000600C ; public: __thiscall std::allocator<struct TreeStateNode>::allocator<struct TreeStateNode>(class std::allocator<struct TreeStateNode> const &)
.text$mn:0000600C                 public ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z
.text$mn:0000600C ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z proc near
.text$mn:0000600C                                         ; CODE XREF: std::operator==<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+Bp
.text$mn:0000600C                                         ; std::operator==<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)+18p ...
.text$mn:0000600C
.text$mn:0000600C var_4           = dword ptr -4
.text$mn:0000600C
.text$mn:0000600C                 push    ebp
.text$mn:0000600D                 mov     ebp, esp
.text$mn:0000600F                 push    ecx
.text$mn:00006010                 mov     [ebp+var_4], ecx
.text$mn:00006013                 mov     eax, [ebp+var_4]
.text$mn:00006016                 mov     esp, ebp
.text$mn:00006018                 pop     ebp
.text$mn:00006019                 retn    4
.text$mn:00006019 ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z endp
.text$mn:00006019
.text$mn:00006019 _text$mn        ends
.text$mn:00006019
.text$mn:0000601C ; ===========================================================================
.text$mn:0000601C
.text$mn:0000601C ; Segment type: Pure code
.text$mn:0000601C ; Segment permissions: Read/Execute
.text$mn:0000601C _text$mn        segment para public 'CODE' use32
.text$mn:0000601C                 assume cs:_text$mn
.text$mn:0000601C                 ;org 601Ch
.text$mn:0000601C ; COMDAT (pick any)
.text$mn:0000601C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000601C
.text$mn:0000601C ; =============== S U B R O U T I N E =======================================
.text$mn:0000601C
.text$mn:0000601C ; Attributes: bp-based frame
.text$mn:0000601C
.text$mn:0000601C ; public: __thiscall std::allocator<struct TreeStateNode>::allocator<struct TreeStateNode>(void)
.text$mn:0000601C                 public ??0?$allocator@UTreeStateNode@@@std@@QAE@XZ
.text$mn:0000601C ??0?$allocator@UTreeStateNode@@@std@@QAE@XZ proc near
.text$mn:0000601C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::_Wrap_alloc<std::allocator<TreeStateNode>>(void)+Ap
.text$mn:0000601C                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(void)+2Bp
.text$mn:0000601C
.text$mn:0000601C var_4           = dword ptr -4
.text$mn:0000601C
.text$mn:0000601C                 push    ebp
.text$mn:0000601D                 mov     ebp, esp
.text$mn:0000601F                 push    ecx
.text$mn:00006020                 mov     [ebp+var_4], ecx
.text$mn:00006023                 mov     eax, [ebp+var_4]
.text$mn:00006026                 mov     esp, ebp
.text$mn:00006028                 pop     ebp
.text$mn:00006029                 retn
.text$mn:00006029 ??0?$allocator@UTreeStateNode@@@std@@QAE@XZ endp
.text$mn:00006029
.text$mn:00006029 ; ---------------------------------------------------------------------------
.text$mn:0000602A                 align 4
.text$mn:0000602A _text$mn        ends
.text$mn:0000602A
.text$mn:0000602C ; ===========================================================================
.text$mn:0000602C
.text$mn:0000602C ; Segment type: Pure code
.text$mn:0000602C ; Segment permissions: Read/Execute
.text$mn:0000602C _text$mn        segment para public 'CODE' use32
.text$mn:0000602C                 assume cs:_text$mn
.text$mn:0000602C                 ;org 602Ch
.text$mn:0000602C ; COMDAT (pick any)
.text$mn:0000602C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000602C
.text$mn:0000602C ; =============== S U B R O U T I N E =======================================
.text$mn:0000602C
.text$mn:0000602C ; Attributes: bp-based frame
.text$mn:0000602C
.text$mn:0000602C ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:0000602C                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:0000602C ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:0000602C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:0000602C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:0000602C
.text$mn:0000602C var_4           = dword ptr -4
.text$mn:0000602C
.text$mn:0000602C                 push    ebp
.text$mn:0000602D                 mov     ebp, esp
.text$mn:0000602F                 push    ecx
.text$mn:00006030                 mov     [ebp+var_4], ecx
.text$mn:00006033                 mov     eax, [ebp+var_4]
.text$mn:00006036                 mov     esp, ebp
.text$mn:00006038                 pop     ebp
.text$mn:00006039                 retn
.text$mn:00006039 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00006039
.text$mn:00006039 ; ---------------------------------------------------------------------------
.text$mn:0000603A                 align 4
.text$mn:0000603A _text$mn        ends
.text$mn:0000603A
.text$mn:0000603C ; ===========================================================================
.text$mn:0000603C
.text$mn:0000603C ; Segment type: Pure code
.text$mn:0000603C ; Segment permissions: Read/Execute
.text$mn:0000603C _text$mn        segment para public 'CODE' use32
.text$mn:0000603C                 assume cs:_text$mn
.text$mn:0000603C                 ;org 603Ch
.text$mn:0000603C ; COMDAT (pick any)
.text$mn:0000603C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000603C
.text$mn:0000603C ; =============== S U B R O U T I N E =======================================
.text$mn:0000603C
.text$mn:0000603C ; Attributes: bp-based frame
.text$mn:0000603C
.text$mn:0000603C ; public: __thiscall std::allocator<struct foundInfo>::allocator<struct foundInfo>(void)
.text$mn:0000603C                 public ??0?$allocator@UfoundInfo@@@std@@QAE@XZ
.text$mn:0000603C ??0?$allocator@UfoundInfo@@@std@@QAE@XZ proc near
.text$mn:0000603C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::_Wrap_alloc<std::allocator<foundInfo>>(void)+Ap
.text$mn:0000603C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::vector<foundInfo,std::allocator<foundInfo>>(void)+2Bp
.text$mn:0000603C
.text$mn:0000603C var_4           = dword ptr -4
.text$mn:0000603C
.text$mn:0000603C                 push    ebp
.text$mn:0000603D                 mov     ebp, esp
.text$mn:0000603F                 push    ecx
.text$mn:00006040                 mov     [ebp+var_4], ecx
.text$mn:00006043                 mov     eax, [ebp+var_4]
.text$mn:00006046                 mov     esp, ebp
.text$mn:00006048                 pop     ebp
.text$mn:00006049                 retn
.text$mn:00006049 ??0?$allocator@UfoundInfo@@@std@@QAE@XZ endp
.text$mn:00006049
.text$mn:00006049 ; ---------------------------------------------------------------------------
.text$mn:0000604A                 align 4
.text$mn:0000604A _text$mn        ends
.text$mn:0000604A
.text$mn:0000604C ; ===========================================================================
.text$mn:0000604C
.text$mn:0000604C ; Segment type: Pure code
.text$mn:0000604C ; Segment permissions: Read/Execute
.text$mn:0000604C _text$mn        segment para public 'CODE' use32
.text$mn:0000604C                 assume cs:_text$mn
.text$mn:0000604C                 ;org 604Ch
.text$mn:0000604C ; COMDAT (pick any)
.text$mn:0000604C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000604C
.text$mn:0000604C ; =============== S U B R O U T I N E =======================================
.text$mn:0000604C
.text$mn:0000604C ; Attributes: bp-based frame
.text$mn:0000604C
.text$mn:0000604C ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000604C                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000604C ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:0000604C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+Ep
.text$mn:0000604C                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::select_on_container_copy_construction(void)+Ep
.text$mn:0000604C
.text$mn:0000604C var_4           = dword ptr -4
.text$mn:0000604C
.text$mn:0000604C                 push    ebp
.text$mn:0000604D                 mov     ebp, esp
.text$mn:0000604F                 push    ecx
.text$mn:00006050                 mov     [ebp+var_4], ecx
.text$mn:00006053                 mov     eax, [ebp+var_4]
.text$mn:00006056                 mov     esp, ebp
.text$mn:00006058                 pop     ebp
.text$mn:00006059                 retn    4
.text$mn:00006059 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006059
.text$mn:00006059 _text$mn        ends
.text$mn:00006059
.text$mn:0000605C ; ===========================================================================
.text$mn:0000605C
.text$mn:0000605C ; Segment type: Pure code
.text$mn:0000605C ; Segment permissions: Read/Execute
.text$mn:0000605C _text$mn        segment para public 'CODE' use32
.text$mn:0000605C                 assume cs:_text$mn
.text$mn:0000605C                 ;org 605Ch
.text$mn:0000605C ; COMDAT (pick any)
.text$mn:0000605C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000605C
.text$mn:0000605C ; =============== S U B R O U T I N E =======================================
.text$mn:0000605C
.text$mn:0000605C ; Attributes: bp-based frame
.text$mn:0000605C
.text$mn:0000605C ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:0000605C                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:0000605C ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:0000605C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:0000605C
.text$mn:0000605C var_4           = dword ptr -4
.text$mn:0000605C
.text$mn:0000605C                 push    ebp
.text$mn:0000605D                 mov     ebp, esp
.text$mn:0000605F                 push    ecx
.text$mn:00006060                 mov     [ebp+var_4], ecx
.text$mn:00006063                 mov     eax, [ebp+var_4]
.text$mn:00006066                 mov     esp, ebp
.text$mn:00006068                 pop     ebp
.text$mn:00006069                 retn
.text$mn:00006069 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:00006069
.text$mn:00006069 ; ---------------------------------------------------------------------------
.text$mn:0000606A                 align 4
.text$mn:0000606A _text$mn        ends
.text$mn:0000606A
.text$mn:0000606C ; ===========================================================================
.text$mn:0000606C
.text$mn:0000606C ; Segment type: Pure code
.text$mn:0000606C ; Segment permissions: Read/Execute
.text$mn:0000606C _text$mn        segment para public 'CODE' use32
.text$mn:0000606C                 assume cs:_text$mn
.text$mn:0000606C                 ;org 606Ch
.text$mn:0000606C ; COMDAT (pick any)
.text$mn:0000606C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000606C
.text$mn:0000606C ; =============== S U B R O U T I N E =======================================
.text$mn:0000606C
.text$mn:0000606C ; Attributes: bp-based frame
.text$mn:0000606C
.text$mn:0000606C ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:0000606C                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:0000606C ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:0000606C                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:0000606C                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:0000606C
.text$mn:0000606C var_4           = dword ptr -4
.text$mn:0000606C
.text$mn:0000606C                 push    ebp
.text$mn:0000606D                 mov     ebp, esp
.text$mn:0000606F                 push    ecx
.text$mn:00006070                 mov     [ebp+var_4], ecx
.text$mn:00006073                 mov     eax, [ebp+var_4]
.text$mn:00006076                 mov     esp, ebp
.text$mn:00006078                 pop     ebp
.text$mn:00006079                 retn    4
.text$mn:00006079 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00006079
.text$mn:00006079 _text$mn        ends
.text$mn:00006079
.text$mn:0000607C ; ===========================================================================
.text$mn:0000607C
.text$mn:0000607C ; Segment type: Pure code
.text$mn:0000607C ; Segment permissions: Read/Execute
.text$mn:0000607C _text$mn        segment para public 'CODE' use32
.text$mn:0000607C                 assume cs:_text$mn
.text$mn:0000607C                 ;org 607Ch
.text$mn:0000607C ; COMDAT (pick any)
.text$mn:0000607C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000607C
.text$mn:0000607C ; =============== S U B R O U T I N E =======================================
.text$mn:0000607C
.text$mn:0000607C ; Attributes: bp-based frame
.text$mn:0000607C
.text$mn:0000607C ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000607C                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:0000607C ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:0000607C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:0000607C
.text$mn:0000607C var_4           = dword ptr -4
.text$mn:0000607C
.text$mn:0000607C                 push    ebp
.text$mn:0000607D                 mov     ebp, esp
.text$mn:0000607F                 push    ecx
.text$mn:00006080                 mov     [ebp+var_4], ecx
.text$mn:00006083                 mov     eax, [ebp+var_4]
.text$mn:00006086                 mov     esp, ebp
.text$mn:00006088                 pop     ebp
.text$mn:00006089                 retn
.text$mn:00006089 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00006089
.text$mn:00006089 ; ---------------------------------------------------------------------------
.text$mn:0000608A                 align 4
.text$mn:0000608A _text$mn        ends
.text$mn:0000608A
.text$mn:0000608C ; ===========================================================================
.text$mn:0000608C
.text$mn:0000608C ; Segment type: Pure code
.text$mn:0000608C ; Segment permissions: Read/Execute
.text$mn:0000608C _text$mn        segment para public 'CODE' use32
.text$mn:0000608C                 assume cs:_text$mn
.text$mn:0000608C                 ;org 608Ch
.text$mn:0000608C ; COMDAT (pick any)
.text$mn:0000608C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000608C
.text$mn:0000608C ; =============== S U B R O U T I N E =======================================
.text$mn:0000608C
.text$mn:0000608C ; Attributes: bp-based frame
.text$mn:0000608C
.text$mn:0000608C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:0000608C                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:0000608C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:0000608C                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:0000608C                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:0000608C
.text$mn:0000608C var_14          = dword ptr -14h
.text$mn:0000608C var_D           = byte ptr -0Dh
.text$mn:0000608C var_C           = dword ptr -0Ch
.text$mn:0000608C var_4           = dword ptr -4
.text$mn:0000608C Str             = dword ptr  8
.text$mn:0000608C
.text$mn:0000608C                 push    ebp
.text$mn:0000608D                 mov     ebp, esp
.text$mn:0000608F                 push    0FFFFFFFFh
.text$mn:00006091                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00006096                 mov     eax, large fs:0
.text$mn:0000609C                 push    eax
.text$mn:0000609D                 sub     esp, 8
.text$mn:000060A0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000060A5                 xor     eax, ebp
.text$mn:000060A7                 push    eax
.text$mn:000060A8                 lea     eax, [ebp+var_C]
.text$mn:000060AB                 mov     large fs:0, eax
.text$mn:000060B1                 mov     [ebp+var_14], ecx
.text$mn:000060B4                 lea     ecx, [ebp+var_D]
.text$mn:000060B7                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000060BC                 push    eax
.text$mn:000060BD                 mov     ecx, [ebp+var_14]
.text$mn:000060C0                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:000060C5                 mov     [ebp+var_4], 0
.text$mn:000060CC                 push    0               ; Size
.text$mn:000060CE                 push    0               ; char
.text$mn:000060D0                 mov     ecx, [ebp+var_14]
.text$mn:000060D3                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000060D8                 mov     eax, [ebp+Str]
.text$mn:000060DB                 push    eax             ; Str
.text$mn:000060DC                 mov     ecx, [ebp+var_14]
.text$mn:000060DF                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:000060E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060EB                 mov     eax, [ebp+var_14]
.text$mn:000060EE                 mov     ecx, [ebp+var_C]
.text$mn:000060F1                 mov     large fs:0, ecx
.text$mn:000060F8                 pop     ecx
.text$mn:000060F9                 mov     esp, ebp
.text$mn:000060FB                 pop     ebp
.text$mn:000060FC                 retn    4
.text$mn:000060FC ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:000060FC
.text$mn:000060FC ; ---------------------------------------------------------------------------
.text$mn:000060FF                 align 10h
.text$mn:000060FF _text$mn        ends
.text$mn:000060FF
.text$x:00006100 ; ===========================================================================
.text$x:00006100
.text$x:00006100 ; Segment type: Pure code
.text$x:00006100 ; Segment permissions: Read/Execute
.text$x:00006100 _text$x         segment para public 'CODE' use32
.text$x:00006100                 assume cs:_text$x
.text$x:00006100                 ;org 6100h
.text$x:00006100 ; COMDAT (pick associative to section at 608C)
.text$x:00006100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006100
.text$x:00006100 ; =============== S U B R O U T I N E =======================================
.text$x:00006100
.text$x:00006100
.text$x:00006100 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00006100                                         ; DATA XREF: .xdata$x:0000CC4Co
.text$x:00006100                 mov     ecx, [ebp-14h]
.text$x:00006103                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00006103 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00006103
.text$x:00006108
.text$x:00006108 ; =============== S U B R O U T I N E =======================================
.text$x:00006108
.text$x:00006108
.text$x:00006108 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00006108                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00006108
.text$x:00006108 arg_4           = dword ptr  8
.text$x:00006108
.text$x:00006108                 mov     edx, [esp+arg_4]
.text$x:0000610C                 lea     eax, [edx+0Ch]
.text$x:0000610F                 mov     ecx, [edx-0Ch]
.text$x:00006112                 xor     ecx, eax
.text$x:00006114                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006119                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:0000611E                 jmp     ___CxxFrameHandler3
.text$x:0000611E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:0000611E
.text$x:0000611E ; ---------------------------------------------------------------------------
.text$x:00006123                 align 4
.text$x:00006123 _text$x         ends
.text$x:00006123
.text$mn:00006124 ; ===========================================================================
.text$mn:00006124
.text$mn:00006124 ; Segment type: Pure code
.text$mn:00006124 ; Segment permissions: Read/Execute
.text$mn:00006124 _text$mn        segment para public 'CODE' use32
.text$mn:00006124                 assume cs:_text$mn
.text$mn:00006124                 ;org 6124h
.text$mn:00006124 ; COMDAT (pick any)
.text$mn:00006124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006124
.text$mn:00006124 ; =============== S U B R O U T I N E =======================================
.text$mn:00006124
.text$mn:00006124 ; Attributes: bp-based frame
.text$mn:00006124
.text$mn:00006124 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006124                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00006124 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00006124                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+184p
.text$mn:00006124                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+1E7p ...
.text$mn:00006124
.text$mn:00006124 var_14          = dword ptr -14h
.text$mn:00006124 var_E           = byte ptr -0Eh
.text$mn:00006124 var_D           = byte ptr -0Dh
.text$mn:00006124 var_C           = dword ptr -0Ch
.text$mn:00006124 var_4           = dword ptr -4
.text$mn:00006124 arg_0           = dword ptr  8
.text$mn:00006124
.text$mn:00006124                 push    ebp
.text$mn:00006125                 mov     ebp, esp
.text$mn:00006127                 push    0FFFFFFFFh
.text$mn:00006129                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:0000612E                 mov     eax, large fs:0
.text$mn:00006134                 push    eax
.text$mn:00006135                 sub     esp, 8
.text$mn:00006138                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000613D                 xor     eax, ebp
.text$mn:0000613F                 push    eax
.text$mn:00006140                 lea     eax, [ebp+var_C]
.text$mn:00006143                 mov     large fs:0, eax
.text$mn:00006149                 mov     [ebp+var_14], ecx
.text$mn:0000614C                 lea     eax, [ebp+var_D]
.text$mn:0000614F                 push    eax
.text$mn:00006150                 lea     ecx, [ebp+var_E]
.text$mn:00006153                 push    ecx
.text$mn:00006154                 mov     ecx, [ebp+arg_0]
.text$mn:00006157                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000615C                 mov     ecx, eax
.text$mn:0000615E                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00006163                 push    eax
.text$mn:00006164                 mov     ecx, [ebp+var_14]
.text$mn:00006167                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000616C                 mov     [ebp+var_4], 0
.text$mn:00006173                 push    0
.text$mn:00006175                 push    0
.text$mn:00006177                 mov     ecx, [ebp+var_14]
.text$mn:0000617A                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000617F                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006185                 push    edx
.text$mn:00006186                 push    0
.text$mn:00006188                 mov     eax, [ebp+arg_0]
.text$mn:0000618B                 push    eax
.text$mn:0000618C                 mov     ecx, [ebp+var_14]
.text$mn:0000618F                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006194                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000619B                 mov     eax, [ebp+var_14]
.text$mn:0000619E                 mov     ecx, [ebp+var_C]
.text$mn:000061A1                 mov     large fs:0, ecx
.text$mn:000061A8                 pop     ecx
.text$mn:000061A9                 mov     esp, ebp
.text$mn:000061AB                 pop     ebp
.text$mn:000061AC                 retn    4
.text$mn:000061AC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:000061AC
.text$mn:000061AC ; ---------------------------------------------------------------------------
.text$mn:000061AF                 align 10h
.text$mn:000061AF _text$mn        ends
.text$mn:000061AF
.text$x:000061B0 ; ===========================================================================
.text$x:000061B0
.text$x:000061B0 ; Segment type: Pure code
.text$x:000061B0 ; Segment permissions: Read/Execute
.text$x:000061B0 _text$x         segment para public 'CODE' use32
.text$x:000061B0                 assume cs:_text$x
.text$x:000061B0                 ;org 61B0h
.text$x:000061B0 ; COMDAT (pick associative to section at 6124)
.text$x:000061B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000061B0
.text$x:000061B0 ; =============== S U B R O U T I N E =======================================
.text$x:000061B0
.text$x:000061B0
.text$x:000061B0 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000061B0                                         ; DATA XREF: .xdata$x:0000CF6Co
.text$x:000061B0                 mov     ecx, [ebp-14h]
.text$x:000061B3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000061B3 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:000061B3
.text$x:000061B8
.text$x:000061B8 ; =============== S U B R O U T I N E =======================================
.text$x:000061B8
.text$x:000061B8
.text$x:000061B8 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:000061B8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:000061B8
.text$x:000061B8 arg_4           = dword ptr  8
.text$x:000061B8
.text$x:000061B8                 mov     edx, [esp+arg_4]
.text$x:000061BC                 lea     eax, [edx+0Ch]
.text$x:000061BF                 mov     ecx, [edx-0Ch]
.text$x:000061C2                 xor     ecx, eax
.text$x:000061C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061C9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:000061CE                 jmp     ___CxxFrameHandler3
.text$x:000061CE __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:000061CE
.text$x:000061CE ; ---------------------------------------------------------------------------
.text$x:000061D3                 align 4
.text$x:000061D3 _text$x         ends
.text$x:000061D3
.text$mn:000061D4 ; ===========================================================================
.text$mn:000061D4
.text$mn:000061D4 ; Segment type: Pure code
.text$mn:000061D4 ; Segment permissions: Read/Execute
.text$mn:000061D4 _text$mn        segment para public 'CODE' use32
.text$mn:000061D4                 assume cs:_text$mn
.text$mn:000061D4                 ;org 61D4h
.text$mn:000061D4 ; COMDAT (pick any)
.text$mn:000061D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061D4
.text$mn:000061D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061D4
.text$mn:000061D4 ; Attributes: bp-based frame
.text$mn:000061D4
.text$mn:000061D4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:000061D4                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000061D4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:000061D4                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+9Ap
.text$mn:000061D4                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+107p ...
.text$mn:000061D4
.text$mn:000061D4 var_14          = dword ptr -14h
.text$mn:000061D4 var_D           = byte ptr -0Dh
.text$mn:000061D4 var_C           = dword ptr -0Ch
.text$mn:000061D4 var_4           = dword ptr -4
.text$mn:000061D4 Str             = dword ptr  8
.text$mn:000061D4
.text$mn:000061D4                 push    ebp
.text$mn:000061D5                 mov     ebp, esp
.text$mn:000061D7                 push    0FFFFFFFFh
.text$mn:000061D9                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000061DE                 mov     eax, large fs:0
.text$mn:000061E4                 push    eax
.text$mn:000061E5                 sub     esp, 8
.text$mn:000061E8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000061ED                 xor     eax, ebp
.text$mn:000061EF                 push    eax
.text$mn:000061F0                 lea     eax, [ebp+var_C]
.text$mn:000061F3                 mov     large fs:0, eax
.text$mn:000061F9                 mov     [ebp+var_14], ecx
.text$mn:000061FC                 lea     ecx, [ebp+var_D]
.text$mn:000061FF                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00006204                 push    eax
.text$mn:00006205                 mov     ecx, [ebp+var_14]
.text$mn:00006208                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000620D                 mov     [ebp+var_4], 0
.text$mn:00006214                 push    0
.text$mn:00006216                 push    0
.text$mn:00006218                 mov     ecx, [ebp+var_14]
.text$mn:0000621B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006220                 mov     eax, [ebp+Str]
.text$mn:00006223                 push    eax             ; Str
.text$mn:00006224                 mov     ecx, [ebp+var_14]
.text$mn:00006227                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:0000622C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006233                 mov     eax, [ebp+var_14]
.text$mn:00006236                 mov     ecx, [ebp+var_C]
.text$mn:00006239                 mov     large fs:0, ecx
.text$mn:00006240                 pop     ecx
.text$mn:00006241                 mov     esp, ebp
.text$mn:00006243                 pop     ebp
.text$mn:00006244                 retn    4
.text$mn:00006244 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00006244
.text$mn:00006244 ; ---------------------------------------------------------------------------
.text$mn:00006247                 align 4
.text$mn:00006247 _text$mn        ends
.text$mn:00006247
.text$x:00006248 ; ===========================================================================
.text$x:00006248
.text$x:00006248 ; Segment type: Pure code
.text$x:00006248 ; Segment permissions: Read/Execute
.text$x:00006248 _text$x         segment para public 'CODE' use32
.text$x:00006248                 assume cs:_text$x
.text$x:00006248                 ;org 6248h
.text$x:00006248 ; COMDAT (pick associative to section at 61D4)
.text$x:00006248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006248
.text$x:00006248 ; =============== S U B R O U T I N E =======================================
.text$x:00006248
.text$x:00006248
.text$x:00006248 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:00006248                                         ; DATA XREF: .xdata$x:0000CFC4o
.text$x:00006248                 mov     ecx, [ebp-14h]
.text$x:0000624B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000624B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:0000624B
.text$x:00006250
.text$x:00006250 ; =============== S U B R O U T I N E =======================================
.text$x:00006250
.text$x:00006250
.text$x:00006250 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00006250                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00006250
.text$x:00006250 arg_4           = dword ptr  8
.text$x:00006250
.text$x:00006250                 mov     edx, [esp+arg_4]
.text$x:00006254                 lea     eax, [edx+0Ch]
.text$x:00006257                 mov     ecx, [edx-0Ch]
.text$x:0000625A                 xor     ecx, eax
.text$x:0000625C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006261                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:00006266                 jmp     ___CxxFrameHandler3
.text$x:00006266 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:00006266
.text$x:00006266 ; ---------------------------------------------------------------------------
.text$x:0000626B                 align 4
.text$x:0000626B _text$x         ends
.text$x:0000626B
.text$mn:0000626C ; ===========================================================================
.text$mn:0000626C
.text$mn:0000626C ; Segment type: Pure code
.text$mn:0000626C ; Segment permissions: Read/Execute
.text$mn:0000626C _text$mn        segment para public 'CODE' use32
.text$mn:0000626C                 assume cs:_text$mn
.text$mn:0000626C                 ;org 626Ch
.text$mn:0000626C ; COMDAT (pick any)
.text$mn:0000626C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000626C
.text$mn:0000626C ; =============== S U B R O U T I N E =======================================
.text$mn:0000626C
.text$mn:0000626C ; Attributes: bp-based frame
.text$mn:0000626C
.text$mn:0000626C ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:0000626C                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000626C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:0000626C                                         ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+3Dp
.text$mn:0000626C                                         ; AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+4Fp ...
.text$mn:0000626C
.text$mn:0000626C var_14          = dword ptr -14h
.text$mn:0000626C var_D           = byte ptr -0Dh
.text$mn:0000626C var_C           = dword ptr -0Ch
.text$mn:0000626C var_4           = dword ptr -4
.text$mn:0000626C
.text$mn:0000626C                 push    ebp
.text$mn:0000626D                 mov     ebp, esp
.text$mn:0000626F                 push    0FFFFFFFFh
.text$mn:00006271                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006276                 mov     eax, large fs:0
.text$mn:0000627C                 push    eax
.text$mn:0000627D                 sub     esp, 8
.text$mn:00006280                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006285                 xor     eax, ebp
.text$mn:00006287                 push    eax
.text$mn:00006288                 lea     eax, [ebp+var_C]
.text$mn:0000628B                 mov     large fs:0, eax
.text$mn:00006291                 mov     [ebp+var_14], ecx
.text$mn:00006294                 lea     ecx, [ebp+var_D]
.text$mn:00006297                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000629C                 push    eax
.text$mn:0000629D                 mov     ecx, [ebp+var_14]
.text$mn:000062A0                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000062A5                 mov     [ebp+var_4], 0
.text$mn:000062AC                 push    0
.text$mn:000062AE                 push    0
.text$mn:000062B0                 mov     ecx, [ebp+var_14]
.text$mn:000062B3                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000062B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062BF                 mov     eax, [ebp+var_14]
.text$mn:000062C2                 mov     ecx, [ebp+var_C]
.text$mn:000062C5                 mov     large fs:0, ecx
.text$mn:000062CC                 pop     ecx
.text$mn:000062CD                 mov     esp, ebp
.text$mn:000062CF                 pop     ebp
.text$mn:000062D0                 retn
.text$mn:000062D0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000062D0
.text$mn:000062D0 ; ---------------------------------------------------------------------------
.text$mn:000062D1                 align 4
.text$mn:000062D1 _text$mn        ends
.text$mn:000062D1
.text$x:000062D4 ; ===========================================================================
.text$x:000062D4
.text$x:000062D4 ; Segment type: Pure code
.text$x:000062D4 ; Segment permissions: Read/Execute
.text$x:000062D4 _text$x         segment para public 'CODE' use32
.text$x:000062D4                 assume cs:_text$x
.text$x:000062D4                 ;org 62D4h
.text$x:000062D4 ; COMDAT (pick associative to section at 626C)
.text$x:000062D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062D4
.text$x:000062D4 ; =============== S U B R O U T I N E =======================================
.text$x:000062D4
.text$x:000062D4
.text$x:000062D4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000062D4                                         ; DATA XREF: .xdata$x:0000CF98o
.text$x:000062D4                 mov     ecx, [ebp-14h]
.text$x:000062D7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000062D7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000062D7
.text$x:000062DC
.text$x:000062DC ; =============== S U B R O U T I N E =======================================
.text$x:000062DC
.text$x:000062DC
.text$x:000062DC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000062DC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000062DC
.text$x:000062DC arg_4           = dword ptr  8
.text$x:000062DC
.text$x:000062DC                 mov     edx, [esp+arg_4]
.text$x:000062E0                 lea     eax, [edx+0Ch]
.text$x:000062E3                 mov     ecx, [edx-0Ch]
.text$x:000062E6                 xor     ecx, eax
.text$x:000062E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000062ED                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000062F2                 jmp     ___CxxFrameHandler3
.text$x:000062F2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000062F2
.text$x:000062F2 ; ---------------------------------------------------------------------------
.text$x:000062F7                 align 4
.text$x:000062F7 _text$x         ends
.text$x:000062F7
.text$mn:000062F8 ; ===========================================================================
.text$mn:000062F8
.text$mn:000062F8 ; Segment type: Pure code
.text$mn:000062F8 ; Segment permissions: Read/Execute
.text$mn:000062F8 _text$mn        segment para public 'CODE' use32
.text$mn:000062F8                 assume cs:_text$mn
.text$mn:000062F8                 ;org 62F8h
.text$mn:000062F8 ; COMDAT (pick any)
.text$mn:000062F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062F8
.text$mn:000062F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000062F8
.text$mn:000062F8 ; Attributes: bp-based frame
.text$mn:000062F8
.text$mn:000062F8 ; public: __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>(class std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>> const &)
.text$mn:000062F8                 public ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000062F8 ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000062F8                                         ; CODE XREF: TreeStateNode::TreeStateNode(TreeStateNode const &)+74p
.text$mn:000062F8
.text$mn:000062F8 var_34          = dword ptr -34h
.text$mn:000062F8 var_30          = dword ptr -30h
.text$mn:000062F8 var_2C          = dword ptr -2Ch
.text$mn:000062F8 var_28          = dword ptr -28h
.text$mn:000062F8 var_24          = dword ptr -24h
.text$mn:000062F8 var_20          = dword ptr -20h
.text$mn:000062F8 var_1C          = dword ptr -1Ch
.text$mn:000062F8 var_18          = dword ptr -18h
.text$mn:000062F8 var_12          = byte ptr -12h
.text$mn:000062F8 var_11          = byte ptr -11h
.text$mn:000062F8 var_10          = dword ptr -10h
.text$mn:000062F8 var_C           = dword ptr -0Ch
.text$mn:000062F8 var_4           = dword ptr -4
.text$mn:000062F8 arg_0           = dword ptr  8
.text$mn:000062F8
.text$mn:000062F8 ; FUNCTION CHUNK AT .text$mn:000063E2 SIZE 00000009 BYTES
.text$mn:000062F8 ; FUNCTION CHUNK AT .text$mn:000063F2 SIZE 0000001E BYTES
.text$mn:000062F8
.text$mn:000062F8                 push    ebp
.text$mn:000062F9                 mov     ebp, esp
.text$mn:000062FB                 push    0FFFFFFFFh
.text$mn:000062FD                 push    offset __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00006302                 mov     eax, large fs:0
.text$mn:00006308                 push    eax
.text$mn:00006309                 push    ecx
.text$mn:0000630A                 sub     esp, 24h
.text$mn:0000630D                 push    ebx
.text$mn:0000630E                 push    esi
.text$mn:0000630F                 push    edi
.text$mn:00006310                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006315                 xor     eax, ebp
.text$mn:00006317                 push    eax
.text$mn:00006318                 lea     eax, [ebp+var_C]
.text$mn:0000631B                 mov     large fs:0, eax
.text$mn:00006321                 mov     [ebp+var_10], esp
.text$mn:00006324                 mov     [ebp+var_18], ecx
.text$mn:00006327                 lea     eax, [ebp+var_11]
.text$mn:0000632A                 push    eax
.text$mn:0000632B                 lea     ecx, [ebp+var_12]
.text$mn:0000632E                 push    ecx
.text$mn:0000632F                 mov     ecx, [ebp+arg_0]
.text$mn:00006332                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00006337                 mov     ecx, eax
.text$mn:00006339                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::select_on_container_copy_construction(void)
.text$mn:0000633E                 push    eax
.text$mn:0000633F                 mov     ecx, [ebp+var_18]
.text$mn:00006342                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(std::allocator<TreeStateNode> const &)
.text$mn:00006347                 mov     [ebp+var_4], 0
.text$mn:0000634E                 mov     ecx, [ebp+arg_0]
.text$mn:00006351                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00006356                 push    eax
.text$mn:00006357                 mov     ecx, [ebp+var_18]
.text$mn:0000635A                 call    ?_Buy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAE_NI@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)
.text$mn:0000635F                 movzx   edx, al
.text$mn:00006362                 test    edx, edx
.text$mn:00006364                 jz      loc_63F2
.text$mn:0000636A                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000636E                 mov     eax, [ebp+var_18]
.text$mn:00006371                 mov     ecx, [eax+4]
.text$mn:00006374                 push    ecx
.text$mn:00006375                 sub     esp, 0Ch
.text$mn:00006378                 mov     edx, esp
.text$mn:0000637A                 mov     [ebp+var_28], esp
.text$mn:0000637D                 push    edx
.text$mn:0000637E                 mov     ecx, [ebp+arg_0]
.text$mn:00006381                 call    ?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::end(void)
.text$mn:00006386                 mov     [ebp+var_1C], eax
.text$mn:00006389                 mov     eax, [ebp+var_1C]
.text$mn:0000638C                 mov     [ebp+var_2C], eax
.text$mn:0000638F                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006393                 sub     esp, 0Ch
.text$mn:00006396                 mov     ecx, esp
.text$mn:00006398                 mov     [ebp+var_30], esp
.text$mn:0000639B                 push    ecx
.text$mn:0000639C                 mov     ecx, [ebp+arg_0]
.text$mn:0000639F                 call    ?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::begin(void)
.text$mn:000063A4                 mov     [ebp+var_20], eax
.text$mn:000063A7                 mov     edx, [ebp+var_20]
.text$mn:000063AA                 mov     [ebp+var_34], edx
.text$mn:000063AD                 mov     byte ptr [ebp+var_4], 3
.text$mn:000063B1                 mov     byte ptr [ebp+var_4], 1
.text$mn:000063B5                 mov     ecx, [ebp+var_18]
.text$mn:000063B8                 call    ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)
.text$mn:000063BD                 mov     [ebp+var_24], eax
.text$mn:000063C0                 mov     eax, [ebp+var_18]
.text$mn:000063C3                 mov     ecx, [ebp+var_24]
.text$mn:000063C6                 mov     [eax+8], ecx
.text$mn:000063C9                 jmp     short loc_63E2
.text$mn:000063C9 ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000063C9
.text$mn:000063CB
.text$mn:000063CB ; =============== S U B R O U T I N E =======================================
.text$mn:000063CB
.text$mn:000063CB ; Attributes: noreturn
.text$mn:000063CB
.text$mn:000063CB __catch$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$mn:000063CB                                         ; DATA XREF: .xdata$x:0000D640o
.text$mn:000063CB                 mov     ecx, [ebp-18h]
.text$mn:000063CE                 call    ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)
.text$mn:000063D3                 push    0
.text$mn:000063D5                 push    0
.text$mn:000063D7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000063D7 __catch$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$mn:000063D7
.text$mn:000063DC ; ---------------------------------------------------------------------------
.text$mn:000063DC                 mov     eax, offset $LN11_0
.text$mn:000063E1                 retn
.text$mn:000063E2 ; ---------------------------------------------------------------------------
.text$mn:000063E2 ; START OF FUNCTION CHUNK FOR ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000063E2
.text$mn:000063E2 loc_63E2:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+D1j
.text$mn:000063E2                 mov     [ebp+var_4], 0
.text$mn:000063E9                 jmp     short loc_63F2
.text$mn:000063E9 ; END OF FUNCTION CHUNK FOR ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000063EB
.text$mn:000063EB ; =============== S U B R O U T I N E =======================================
.text$mn:000063EB
.text$mn:000063EB
.text$mn:000063EB $LN11_0         proc near               ; DATA XREF: .text$mn:000063DCo
.text$mn:000063EB                 mov     dword ptr [ebp-4], 0
.text$mn:000063EB $LN11_0         endp ; sp-analysis failed
.text$mn:000063EB
.text$mn:000063F2 ; START OF FUNCTION CHUNK FOR ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000063F2
.text$mn:000063F2 loc_63F2:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+6Cj
.text$mn:000063F2                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+F1j
.text$mn:000063F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000063F9                 mov     eax, [ebp+var_18]
.text$mn:000063FC                 mov     ecx, [ebp+var_C]
.text$mn:000063FF                 mov     large fs:0, ecx
.text$mn:00006406                 pop     ecx
.text$mn:00006407                 pop     edi
.text$mn:00006408                 pop     esi
.text$mn:00006409                 pop     ebx
.text$mn:0000640A                 mov     esp, ebp
.text$mn:0000640C                 pop     ebp
.text$mn:0000640D                 retn    4
.text$mn:0000640D ; END OF FUNCTION CHUNK FOR ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000640D _text$mn        ends
.text$mn:0000640D
.text$x:00006410 ; ===========================================================================
.text$x:00006410
.text$x:00006410 ; Segment type: Pure code
.text$x:00006410 ; Segment permissions: Read/Execute
.text$x:00006410 _text$x         segment para public 'CODE' use32
.text$x:00006410                 assume cs:_text$x
.text$x:00006410                 ;org 6410h
.text$x:00006410 ; COMDAT (pick associative to section at 62F8)
.text$x:00006410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006410
.text$x:00006410 ; =============== S U B R O U T I N E =======================================
.text$x:00006410
.text$x:00006410
.text$x:00006410 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$2 proc near
.text$x:00006410                                         ; DATA XREF: .xdata$x:0000D680o
.text$x:00006410                 mov     ecx, [ebp-18h]
.text$x:00006413                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)
.text$x:00006413 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$2 endp
.text$x:00006413
.text$x:00006418
.text$x:00006418 ; =============== S U B R O U T I N E =======================================
.text$x:00006418
.text$x:00006418
.text$x:00006418 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$3 proc near
.text$x:00006418                                         ; DATA XREF: .xdata$x:0000D690o
.text$x:00006418                 mov     ecx, [ebp-28h]
.text$x:0000641B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:0000641B __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$3 endp
.text$x:0000641B
.text$x:00006420
.text$x:00006420 ; =============== S U B R O U T I N E =======================================
.text$x:00006420
.text$x:00006420
.text$x:00006420 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$4 proc near
.text$x:00006420                                         ; DATA XREF: .xdata$x:0000D698o
.text$x:00006420                 mov     ecx, [ebp-30h]
.text$x:00006423                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:00006423 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$4 endp
.text$x:00006423
.text$x:00006428
.text$x:00006428 ; =============== S U B R O U T I N E =======================================
.text$x:00006428
.text$x:00006428
.text$x:00006428 __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006428                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+5o
.text$x:00006428
.text$x:00006428 arg_4           = dword ptr  8
.text$x:00006428
.text$x:00006428                 mov     edx, [esp+arg_4]
.text$x:0000642C                 lea     eax, [edx+0Ch]
.text$x:0000642F                 mov     ecx, [edx-38h]
.text$x:00006432                 xor     ecx, eax
.text$x:00006434                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006439                 mov     eax, offset __ehfuncinfo$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.text$x:0000643E                 jmp     ___CxxFrameHandler3
.text$x:0000643E __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:0000643E
.text$x:0000643E ; ---------------------------------------------------------------------------
.text$x:00006443                 align 4
.text$x:00006443 _text$x         ends
.text$x:00006443
.text$mn:00006444 ; ===========================================================================
.text$mn:00006444
.text$mn:00006444 ; Segment type: Pure code
.text$mn:00006444 ; Segment permissions: Read/Execute
.text$mn:00006444 _text$mn        segment para public 'CODE' use32
.text$mn:00006444                 assume cs:_text$mn
.text$mn:00006444                 ;org 6444h
.text$mn:00006444 ; COMDAT (pick any)
.text$mn:00006444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006444
.text$mn:00006444 ; =============== S U B R O U T I N E =======================================
.text$mn:00006444
.text$mn:00006444 ; Attributes: bp-based frame
.text$mn:00006444
.text$mn:00006444 ; public: __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>(void)
.text$mn:00006444                 public ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:00006444 ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$mn:00006444                                         ; CODE XREF: TreeStateNode::TreeStateNode(void)+4Ap
.text$mn:00006444
.text$mn:00006444 var_14          = dword ptr -14h
.text$mn:00006444 var_D           = byte ptr -0Dh
.text$mn:00006444 var_C           = dword ptr -0Ch
.text$mn:00006444 var_4           = dword ptr -4
.text$mn:00006444
.text$mn:00006444                 push    ebp
.text$mn:00006445                 mov     ebp, esp
.text$mn:00006447                 push    0FFFFFFFFh
.text$mn:00006449                 push    offset __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:0000644E                 mov     eax, large fs:0
.text$mn:00006454                 push    eax
.text$mn:00006455                 sub     esp, 8
.text$mn:00006458                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000645D                 xor     eax, ebp
.text$mn:0000645F                 push    eax
.text$mn:00006460                 lea     eax, [ebp+var_C]
.text$mn:00006463                 mov     large fs:0, eax
.text$mn:00006469                 mov     [ebp+var_14], ecx
.text$mn:0000646C                 lea     ecx, [ebp+var_D]
.text$mn:0000646F                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@XZ ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(void)
.text$mn:00006474                 push    eax
.text$mn:00006475                 mov     ecx, [ebp+var_14]
.text$mn:00006478                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(std::allocator<TreeStateNode> const &)
.text$mn:0000647D                 mov     [ebp+var_4], 0
.text$mn:00006484                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000648B                 mov     eax, [ebp+var_14]
.text$mn:0000648E                 mov     ecx, [ebp+var_C]
.text$mn:00006491                 mov     large fs:0, ecx
.text$mn:00006498                 pop     ecx
.text$mn:00006499                 mov     esp, ebp
.text$mn:0000649B                 pop     ebp
.text$mn:0000649C                 retn
.text$mn:0000649C ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$mn:0000649C
.text$mn:0000649C ; ---------------------------------------------------------------------------
.text$mn:0000649D                 align 10h
.text$mn:0000649D _text$mn        ends
.text$mn:0000649D
.text$x:000064A0 ; ===========================================================================
.text$x:000064A0
.text$x:000064A0 ; Segment type: Pure code
.text$x:000064A0 ; Segment permissions: Read/Execute
.text$x:000064A0 _text$x         segment para public 'CODE' use32
.text$x:000064A0                 assume cs:_text$x
.text$x:000064A0                 ;org 64A0h
.text$x:000064A0 ; COMDAT (pick associative to section at 6444)
.text$x:000064A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000064A0
.text$x:000064A0 ; =============== S U B R O U T I N E =======================================
.text$x:000064A0
.text$x:000064A0
.text$x:000064A0 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000064A0                                         ; DATA XREF: .xdata$x:0000D60Co
.text$x:000064A0                 mov     ecx, [ebp-14h]
.text$x:000064A3                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)
.text$x:000064A3 __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0 endp
.text$x:000064A3
.text$x:000064A8
.text$x:000064A8 ; =============== S U B R O U T I N E =======================================
.text$x:000064A8
.text$x:000064A8
.text$x:000064A8 __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$x:000064A8                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(void)+5o
.text$x:000064A8
.text$x:000064A8 arg_4           = dword ptr  8
.text$x:000064A8
.text$x:000064A8                 mov     edx, [esp+arg_4]
.text$x:000064AC                 lea     eax, [edx+0Ch]
.text$x:000064AF                 mov     ecx, [edx-0Ch]
.text$x:000064B2                 xor     ecx, eax
.text$x:000064B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064B9                 mov     eax, offset __ehfuncinfo$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$x:000064BE                 jmp     ___CxxFrameHandler3
.text$x:000064BE __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$x:000064BE
.text$x:000064BE ; ---------------------------------------------------------------------------
.text$x:000064C3                 align 4
.text$x:000064C3 _text$x         ends
.text$x:000064C3
.text$mn:000064C4 ; ===========================================================================
.text$mn:000064C4
.text$mn:000064C4 ; Segment type: Pure code
.text$mn:000064C4 ; Segment permissions: Read/Execute
.text$mn:000064C4 _text$mn        segment para public 'CODE' use32
.text$mn:000064C4                 assume cs:_text$mn
.text$mn:000064C4                 ;org 64C4h
.text$mn:000064C4 ; COMDAT (pick any)
.text$mn:000064C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064C4
.text$mn:000064C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064C4
.text$mn:000064C4 ; Attributes: bp-based frame
.text$mn:000064C4
.text$mn:000064C4 ; public: __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::vector<struct foundInfo, class std::allocator<struct foundInfo>>(void)
.text$mn:000064C4                 public ??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:000064C4 ??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:000064C4                                         ; CODE XREF: FunctionListPanel::reload(void)+129p
.text$mn:000064C4
.text$mn:000064C4 var_14          = dword ptr -14h
.text$mn:000064C4 var_D           = byte ptr -0Dh
.text$mn:000064C4 var_C           = dword ptr -0Ch
.text$mn:000064C4 var_4           = dword ptr -4
.text$mn:000064C4
.text$mn:000064C4                 push    ebp
.text$mn:000064C5                 mov     ebp, esp
.text$mn:000064C7                 push    0FFFFFFFFh
.text$mn:000064C9                 push    offset __ehhandler$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:000064CE                 mov     eax, large fs:0
.text$mn:000064D4                 push    eax
.text$mn:000064D5                 sub     esp, 8
.text$mn:000064D8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000064DD                 xor     eax, ebp
.text$mn:000064DF                 push    eax
.text$mn:000064E0                 lea     eax, [ebp+var_C]
.text$mn:000064E3                 mov     large fs:0, eax
.text$mn:000064E9                 mov     [ebp+var_14], ecx
.text$mn:000064EC                 lea     ecx, [ebp+var_D]
.text$mn:000064EF                 call    ??0?$allocator@UfoundInfo@@@std@@QAE@XZ ; std::allocator<foundInfo>::allocator<foundInfo>(void)
.text$mn:000064F4                 push    eax
.text$mn:000064F5                 mov     ecx, [ebp+var_14]
.text$mn:000064F8                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(std::allocator<foundInfo> const &)
.text$mn:000064FD                 mov     [ebp+var_4], 0
.text$mn:00006504                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000650B                 mov     eax, [ebp+var_14]
.text$mn:0000650E                 mov     ecx, [ebp+var_C]
.text$mn:00006511                 mov     large fs:0, ecx
.text$mn:00006518                 pop     ecx
.text$mn:00006519                 mov     esp, ebp
.text$mn:0000651B                 pop     ebp
.text$mn:0000651C                 retn
.text$mn:0000651C ??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:0000651C
.text$mn:0000651C ; ---------------------------------------------------------------------------
.text$mn:0000651D                 align 10h
.text$mn:0000651D _text$mn        ends
.text$mn:0000651D
.text$x:00006520 ; ===========================================================================
.text$x:00006520
.text$x:00006520 ; Segment type: Pure code
.text$x:00006520 ; Segment permissions: Read/Execute
.text$x:00006520 _text$x         segment para public 'CODE' use32
.text$x:00006520                 assume cs:_text$x
.text$x:00006520                 ;org 6520h
.text$x:00006520 ; COMDAT (pick associative to section at 64C4)
.text$x:00006520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006520
.text$x:00006520 ; =============== S U B R O U T I N E =======================================
.text$x:00006520
.text$x:00006520
.text$x:00006520 __unwindfunclet$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006520                                         ; DATA XREF: .xdata$x:0000DE9Co
.text$x:00006520                 mov     ecx, [ebp-14h]
.text$x:00006523                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)
.text$x:00006523 __unwindfunclet$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006523
.text$x:00006528
.text$x:00006528 ; =============== S U B R O U T I N E =======================================
.text$x:00006528
.text$x:00006528
.text$x:00006528 __ehhandler$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00006528                                         ; DATA XREF: std::vector<foundInfo,std::allocator<foundInfo>>::vector<foundInfo,std::allocator<foundInfo>>(void)+5o
.text$x:00006528
.text$x:00006528 arg_4           = dword ptr  8
.text$x:00006528
.text$x:00006528                 mov     edx, [esp+arg_4]
.text$x:0000652C                 lea     eax, [edx+0Ch]
.text$x:0000652F                 mov     ecx, [edx-0Ch]
.text$x:00006532                 xor     ecx, eax
.text$x:00006534                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006539                 mov     eax, offset __ehfuncinfo$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$x:0000653E                 jmp     ___CxxFrameHandler3
.text$x:0000653E __ehhandler$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$x:0000653E
.text$x:0000653E ; ---------------------------------------------------------------------------
.text$x:00006543                 align 4
.text$x:00006543 _text$x         ends
.text$x:00006543
.text$mn:00006544 ; ===========================================================================
.text$mn:00006544
.text$mn:00006544 ; Segment type: Pure code
.text$mn:00006544 ; Segment permissions: Read/Execute
.text$mn:00006544 _text$mn        segment para public 'CODE' use32
.text$mn:00006544                 assume cs:_text$mn
.text$mn:00006544                 ;org 6544h
.text$mn:00006544 ; COMDAT (pick any)
.text$mn:00006544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006544
.text$mn:00006544 ; =============== S U B R O U T I N E =======================================
.text$mn:00006544
.text$mn:00006544 ; Attributes: bp-based frame
.text$mn:00006544
.text$mn:00006544 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const &)
.text$mn:00006544                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:00006544 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00006544                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+24Dp
.text$mn:00006544
.text$mn:00006544 var_34          = dword ptr -34h
.text$mn:00006544 var_30          = dword ptr -30h
.text$mn:00006544 var_2C          = dword ptr -2Ch
.text$mn:00006544 var_28          = dword ptr -28h
.text$mn:00006544 var_24          = dword ptr -24h
.text$mn:00006544 var_20          = dword ptr -20h
.text$mn:00006544 var_1C          = dword ptr -1Ch
.text$mn:00006544 var_18          = dword ptr -18h
.text$mn:00006544 var_12          = byte ptr -12h
.text$mn:00006544 var_11          = byte ptr -11h
.text$mn:00006544 var_10          = dword ptr -10h
.text$mn:00006544 var_C           = dword ptr -0Ch
.text$mn:00006544 var_4           = dword ptr -4
.text$mn:00006544 arg_0           = dword ptr  8
.text$mn:00006544
.text$mn:00006544 ; FUNCTION CHUNK AT .text$mn:0000662E SIZE 00000009 BYTES
.text$mn:00006544 ; FUNCTION CHUNK AT .text$mn:0000663E SIZE 0000001E BYTES
.text$mn:00006544
.text$mn:00006544                 push    ebp
.text$mn:00006545                 mov     ebp, esp
.text$mn:00006547                 push    0FFFFFFFFh
.text$mn:00006549                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:0000654E                 mov     eax, large fs:0
.text$mn:00006554                 push    eax
.text$mn:00006555                 push    ecx
.text$mn:00006556                 sub     esp, 24h
.text$mn:00006559                 push    ebx
.text$mn:0000655A                 push    esi
.text$mn:0000655B                 push    edi
.text$mn:0000655C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006561                 xor     eax, ebp
.text$mn:00006563                 push    eax
.text$mn:00006564                 lea     eax, [ebp+var_C]
.text$mn:00006567                 mov     large fs:0, eax
.text$mn:0000656D                 mov     [ebp+var_10], esp
.text$mn:00006570                 mov     [ebp+var_18], ecx
.text$mn:00006573                 lea     eax, [ebp+var_11]
.text$mn:00006576                 push    eax
.text$mn:00006577                 lea     ecx, [ebp+var_12]
.text$mn:0000657A                 push    ecx
.text$mn:0000657B                 mov     ecx, [ebp+arg_0]
.text$mn:0000657E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006583                 mov     ecx, eax
.text$mn:00006585                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)
.text$mn:0000658A                 push    eax
.text$mn:0000658B                 mov     ecx, [ebp+var_18]
.text$mn:0000658E                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00006593                 mov     [ebp+var_4], 0
.text$mn:0000659A                 mov     ecx, [ebp+arg_0]
.text$mn:0000659D                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000065A2                 push    eax
.text$mn:000065A3                 mov     ecx, [ebp+var_18]
.text$mn:000065A6                 call    ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)
.text$mn:000065AB                 movzx   edx, al
.text$mn:000065AE                 test    edx, edx
.text$mn:000065B0                 jz      loc_663E
.text$mn:000065B6                 mov     byte ptr [ebp+var_4], 1
.text$mn:000065BA                 mov     eax, [ebp+var_18]
.text$mn:000065BD                 mov     ecx, [eax+4]
.text$mn:000065C0                 push    ecx
.text$mn:000065C1                 sub     esp, 0Ch
.text$mn:000065C4                 mov     edx, esp
.text$mn:000065C6                 mov     [ebp+var_28], esp
.text$mn:000065C9                 push    edx
.text$mn:000065CA                 mov     ecx, [ebp+arg_0]
.text$mn:000065CD                 call    ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)
.text$mn:000065D2                 mov     [ebp+var_1C], eax
.text$mn:000065D5                 mov     eax, [ebp+var_1C]
.text$mn:000065D8                 mov     [ebp+var_2C], eax
.text$mn:000065DB                 mov     byte ptr [ebp+var_4], 2
.text$mn:000065DF                 sub     esp, 0Ch
.text$mn:000065E2                 mov     ecx, esp
.text$mn:000065E4                 mov     [ebp+var_30], esp
.text$mn:000065E7                 push    ecx
.text$mn:000065E8                 mov     ecx, [ebp+arg_0]
.text$mn:000065EB                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:000065F0                 mov     [ebp+var_20], eax
.text$mn:000065F3                 mov     edx, [ebp+var_20]
.text$mn:000065F6                 mov     [ebp+var_34], edx
.text$mn:000065F9                 mov     byte ptr [ebp+var_4], 3
.text$mn:000065FD                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006601                 mov     ecx, [ebp+var_18]
.text$mn:00006604                 call    ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006609                 mov     [ebp+var_24], eax
.text$mn:0000660C                 mov     eax, [ebp+var_18]
.text$mn:0000660F                 mov     ecx, [ebp+var_24]
.text$mn:00006612                 mov     [eax+8], ecx
.text$mn:00006615                 jmp     short loc_662E
.text$mn:00006615 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z endp
.text$mn:00006615
.text$mn:00006617
.text$mn:00006617 ; =============== S U B R O U T I N E =======================================
.text$mn:00006617
.text$mn:00006617 ; Attributes: noreturn
.text$mn:00006617
.text$mn:00006617 __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0 proc near
.text$mn:00006617                                         ; DATA XREF: .xdata$x:0000D314o
.text$mn:00006617                 mov     ecx, [ebp-18h]
.text$mn:0000661A                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000661F                 push    0
.text$mn:00006621                 push    0
.text$mn:00006623                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006623 __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0 endp
.text$mn:00006623
.text$mn:00006628 ; ---------------------------------------------------------------------------
.text$mn:00006628                 mov     eax, offset $LN11
.text$mn:0000662D                 retn
.text$mn:0000662E ; ---------------------------------------------------------------------------
.text$mn:0000662E ; START OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:0000662E
.text$mn:0000662E loc_662E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+D1j
.text$mn:0000662E                 mov     [ebp+var_4], 0
.text$mn:00006635                 jmp     short loc_663E
.text$mn:00006635 ; END OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:00006637
.text$mn:00006637 ; =============== S U B R O U T I N E =======================================
.text$mn:00006637
.text$mn:00006637
.text$mn:00006637 $LN11           proc near               ; DATA XREF: .text$mn:00006628o
.text$mn:00006637                 mov     dword ptr [ebp-4], 0
.text$mn:00006637 $LN11           endp ; sp-analysis failed
.text$mn:00006637
.text$mn:0000663E ; START OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:0000663E
.text$mn:0000663E loc_663E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+6Cj
.text$mn:0000663E                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+F1j
.text$mn:0000663E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006645                 mov     eax, [ebp+var_18]
.text$mn:00006648                 mov     ecx, [ebp+var_C]
.text$mn:0000664B                 mov     large fs:0, ecx
.text$mn:00006652                 pop     ecx
.text$mn:00006653                 pop     edi
.text$mn:00006654                 pop     esi
.text$mn:00006655                 pop     ebx
.text$mn:00006656                 mov     esp, ebp
.text$mn:00006658                 pop     ebp
.text$mn:00006659                 retn    4
.text$mn:00006659 ; END OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:00006659 _text$mn        ends
.text$mn:00006659
.text$x:0000665C ; ===========================================================================
.text$x:0000665C
.text$x:0000665C ; Segment type: Pure code
.text$x:0000665C ; Segment permissions: Read/Execute
.text$x:0000665C _text$x         segment para public 'CODE' use32
.text$x:0000665C                 assume cs:_text$x
.text$x:0000665C                 ;org 665Ch
.text$x:0000665C ; COMDAT (pick associative to section at 6544)
.text$x:0000665C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000665C
.text$x:0000665C ; =============== S U B R O U T I N E =======================================
.text$x:0000665C
.text$x:0000665C
.text$x:0000665C __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2 proc near
.text$x:0000665C                                         ; DATA XREF: .xdata$x:0000D354o
.text$x:0000665C                 mov     ecx, [ebp-18h]
.text$x:0000665F                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000665F __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2 endp
.text$x:0000665F
.text$x:00006664
.text$x:00006664 ; =============== S U B R O U T I N E =======================================
.text$x:00006664
.text$x:00006664
.text$x:00006664 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3 proc near
.text$x:00006664                                         ; DATA XREF: .xdata$x:0000D364o
.text$x:00006664                 mov     ecx, [ebp-28h]
.text$x:00006667                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006667 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3 endp
.text$x:00006667
.text$x:0000666C
.text$x:0000666C ; =============== S U B R O U T I N E =======================================
.text$x:0000666C
.text$x:0000666C
.text$x:0000666C __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4 proc near
.text$x:0000666C                                         ; DATA XREF: .xdata$x:0000D36Co
.text$x:0000666C                 mov     ecx, [ebp-30h]
.text$x:0000666F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000666F __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4 endp
.text$x:0000666F
.text$x:00006674
.text$x:00006674 ; =============== S U B R O U T I N E =======================================
.text$x:00006674
.text$x:00006674
.text$x:00006674 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z proc near
.text$x:00006674                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+5o
.text$x:00006674
.text$x:00006674 arg_4           = dword ptr  8
.text$x:00006674
.text$x:00006674                 mov     edx, [esp+arg_4]
.text$x:00006678                 lea     eax, [edx+0Ch]
.text$x:0000667B                 mov     ecx, [edx-38h]
.text$x:0000667E                 xor     ecx, eax
.text$x:00006680                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006685                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$x:0000668A                 jmp     ___CxxFrameHandler3
.text$x:0000668A __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z endp
.text$x:0000668A
.text$x:0000668A ; ---------------------------------------------------------------------------
.text$x:0000668F                 align 10h
.text$x:0000668F _text$x         ends
.text$x:0000668F
.text$mn:00006690 ; ===========================================================================
.text$mn:00006690
.text$mn:00006690 ; Segment type: Pure code
.text$mn:00006690 ; Segment permissions: Read/Execute
.text$mn:00006690 _text$mn        segment para public 'CODE' use32
.text$mn:00006690                 assume cs:_text$mn
.text$mn:00006690                 ;org 6690h
.text$mn:00006690 ; COMDAT (pick any)
.text$mn:00006690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006690
.text$mn:00006690 ; =============== S U B R O U T I N E =======================================
.text$mn:00006690
.text$mn:00006690 ; Attributes: bp-based frame
.text$mn:00006690
.text$mn:00006690 ; int __stdcall AssociationInfo::AssociationInfo(int, int, wchar_t *Str, wchar_t *)
.text$mn:00006690                 public ??0AssociationInfo@@QAE@HHPB_W0@Z
.text$mn:00006690 ??0AssociationInfo@@QAE@HHPB_W0@Z proc near
.text$mn:00006690                                         ; CODE XREF: FunctionListPanel::reload(void)+1D5p
.text$mn:00006690
.text$mn:00006690 var_10          = dword ptr -10h
.text$mn:00006690 var_C           = dword ptr -0Ch
.text$mn:00006690 var_4           = dword ptr -4
.text$mn:00006690 arg_0           = dword ptr  8
.text$mn:00006690 arg_4           = dword ptr  0Ch
.text$mn:00006690 Str             = dword ptr  10h
.text$mn:00006690 arg_C           = dword ptr  14h
.text$mn:00006690
.text$mn:00006690                 push    ebp
.text$mn:00006691                 mov     ebp, esp
.text$mn:00006693                 push    0FFFFFFFFh
.text$mn:00006695                 push    offset __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z
.text$mn:0000669A                 mov     eax, large fs:0
.text$mn:000066A0                 push    eax
.text$mn:000066A1                 push    ecx
.text$mn:000066A2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000066A7                 xor     eax, ebp
.text$mn:000066A9                 push    eax
.text$mn:000066AA                 lea     eax, [ebp+var_C]
.text$mn:000066AD                 mov     large fs:0, eax
.text$mn:000066B3                 mov     [ebp+var_10], ecx
.text$mn:000066B6                 mov     eax, [ebp+var_10]
.text$mn:000066B9                 mov     ecx, [ebp+arg_0]
.text$mn:000066BC                 mov     [eax], ecx
.text$mn:000066BE                 mov     edx, [ebp+var_10]
.text$mn:000066C1                 mov     eax, [ebp+arg_4]
.text$mn:000066C4                 mov     [edx+4], eax
.text$mn:000066C7                 mov     ecx, [ebp+var_10]
.text$mn:000066CA                 add     ecx, 8
.text$mn:000066CD                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000066D2                 mov     [ebp+var_4], 0
.text$mn:000066D9                 mov     ecx, [ebp+var_10]
.text$mn:000066DC                 add     ecx, 24h ; '$'
.text$mn:000066DF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000066E4                 mov     byte ptr [ebp+var_4], 1
.text$mn:000066E8                 cmp     [ebp+Str], 0
.text$mn:000066EC                 jz      short loc_66FF
.text$mn:000066EE                 mov     ecx, [ebp+Str]
.text$mn:000066F1                 push    ecx             ; Str
.text$mn:000066F2                 mov     ecx, [ebp+var_10]
.text$mn:000066F5                 add     ecx, 8
.text$mn:000066F8                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000066FD                 jmp     short loc_670F
.text$mn:000066FF ; ---------------------------------------------------------------------------
.text$mn:000066FF
.text$mn:000066FF loc_66FF:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+5Cj
.text$mn:000066FF                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00006704                 mov     ecx, [ebp+var_10]
.text$mn:00006707                 add     ecx, 8
.text$mn:0000670A                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000670F
.text$mn:0000670F loc_670F:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+6Dj
.text$mn:0000670F                 cmp     [ebp+arg_C], 0
.text$mn:00006713                 jz      short loc_6726
.text$mn:00006715                 mov     edx, [ebp+arg_C]
.text$mn:00006718                 push    edx             ; Str
.text$mn:00006719                 mov     ecx, [ebp+var_10]
.text$mn:0000671C                 add     ecx, 24h ; '$'
.text$mn:0000671F                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00006724                 jmp     short loc_6736
.text$mn:00006726 ; ---------------------------------------------------------------------------
.text$mn:00006726
.text$mn:00006726 loc_6726:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+83j
.text$mn:00006726                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:0000672B                 mov     ecx, [ebp+var_10]
.text$mn:0000672E                 add     ecx, 24h ; '$'
.text$mn:00006731                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00006736
.text$mn:00006736 loc_6736:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+94j
.text$mn:00006736                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000673D                 mov     eax, [ebp+var_10]
.text$mn:00006740                 mov     ecx, [ebp+var_C]
.text$mn:00006743                 mov     large fs:0, ecx
.text$mn:0000674A                 pop     ecx
.text$mn:0000674B                 mov     esp, ebp
.text$mn:0000674D                 pop     ebp
.text$mn:0000674E                 retn    10h
.text$mn:0000674E ??0AssociationInfo@@QAE@HHPB_W0@Z endp
.text$mn:0000674E
.text$mn:0000674E ; ---------------------------------------------------------------------------
.text$mn:00006751                 align 4
.text$mn:00006751 _text$mn        ends
.text$mn:00006751
.text$x:00006754 ; ===========================================================================
.text$x:00006754
.text$x:00006754 ; Segment type: Pure code
.text$x:00006754 ; Segment permissions: Read/Execute
.text$x:00006754 _text$x         segment para public 'CODE' use32
.text$x:00006754                 assume cs:_text$x
.text$x:00006754                 ;org 6754h
.text$x:00006754 ; COMDAT (pick associative to section at 6690)
.text$x:00006754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006754
.text$x:00006754 ; =============== S U B R O U T I N E =======================================
.text$x:00006754
.text$x:00006754
.text$x:00006754 __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0 proc near
.text$x:00006754                                         ; DATA XREF: .xdata$x:0000D4C8o
.text$x:00006754                 mov     ecx, [ebp-10h]
.text$x:00006757                 add     ecx, 8
.text$x:0000675A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000675A __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0 endp
.text$x:0000675A
.text$x:0000675F
.text$x:0000675F ; =============== S U B R O U T I N E =======================================
.text$x:0000675F
.text$x:0000675F
.text$x:0000675F __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1 proc near
.text$x:0000675F                                         ; DATA XREF: .xdata$x:0000D4D0o
.text$x:0000675F                 mov     ecx, [ebp-10h]
.text$x:00006762                 add     ecx, 24h ; '$'
.text$x:00006765                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006765 __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1 endp
.text$x:00006765
.text$x:0000676A
.text$x:0000676A ; =============== S U B R O U T I N E =======================================
.text$x:0000676A
.text$x:0000676A
.text$x:0000676A __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z proc near
.text$x:0000676A                                         ; DATA XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+5o
.text$x:0000676A
.text$x:0000676A arg_4           = dword ptr  8
.text$x:0000676A
.text$x:0000676A                 mov     edx, [esp+arg_4]
.text$x:0000676E                 lea     eax, [edx+0Ch]
.text$x:00006771                 mov     ecx, [edx-8]
.text$x:00006774                 xor     ecx, eax
.text$x:00006776                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000677B                 mov     eax, offset __ehfuncinfo$??0AssociationInfo@@QAE@HHPB_W0@Z
.text$x:00006780                 jmp     ___CxxFrameHandler3
.text$x:00006780 __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z endp
.text$x:00006780
.text$x:00006780 ; ---------------------------------------------------------------------------
.text$x:00006785                 align 4
.text$x:00006785 _text$x         ends
.text$x:00006785
.text$mn:00006788 ; ===========================================================================
.text$mn:00006788
.text$mn:00006788 ; Segment type: Pure code
.text$mn:00006788 ; Segment permissions: Read/Execute
.text$mn:00006788 _text$mn        segment para public 'CODE' use32
.text$mn:00006788                 assume cs:_text$mn
.text$mn:00006788                 ;org 6788h
.text$mn:00006788 ; COMDAT (pick any)
.text$mn:00006788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006788
.text$mn:00006788 ; =============== S U B R O U T I N E =======================================
.text$mn:00006788
.text$mn:00006788 ; Attributes: bp-based frame
.text$mn:00006788
.text$mn:00006788 ; public: __thiscall SearchParameters::SearchParameters(struct SearchParameters const &)
.text$mn:00006788                 public ??0SearchParameters@@QAE@ABU0@@Z
.text$mn:00006788 ??0SearchParameters@@QAE@ABU0@@Z proc near
.text$mn:00006788                                         ; CODE XREF: TreeParams::TreeParams(TreeParams const &)+46p
.text$mn:00006788
.text$mn:00006788 var_10          = dword ptr -10h
.text$mn:00006788 var_C           = dword ptr -0Ch
.text$mn:00006788 var_4           = dword ptr -4
.text$mn:00006788 arg_0           = dword ptr  8
.text$mn:00006788
.text$mn:00006788                 push    ebp
.text$mn:00006789                 mov     ebp, esp
.text$mn:0000678B                 push    0FFFFFFFFh
.text$mn:0000678D                 push    offset __ehhandler$??0SearchParameters@@QAE@ABU0@@Z
.text$mn:00006792                 mov     eax, large fs:0
.text$mn:00006798                 push    eax
.text$mn:00006799                 push    ecx
.text$mn:0000679A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000679F                 xor     eax, ebp
.text$mn:000067A1                 push    eax
.text$mn:000067A2                 lea     eax, [ebp+var_C]
.text$mn:000067A5                 mov     large fs:0, eax
.text$mn:000067AB                 mov     [ebp+var_10], ecx
.text$mn:000067AE                 mov     eax, [ebp+arg_0]
.text$mn:000067B1                 push    eax
.text$mn:000067B2                 mov     ecx, [ebp+var_10]
.text$mn:000067B5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000067BA                 mov     [ebp+var_4], 0
.text$mn:000067C1                 mov     ecx, [ebp+var_10]
.text$mn:000067C4                 mov     edx, [ebp+arg_0]
.text$mn:000067C7                 mov     al, [edx+1Ch]
.text$mn:000067CA                 mov     [ecx+1Ch], al
.text$mn:000067CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067D4                 mov     eax, [ebp+var_10]
.text$mn:000067D7                 mov     ecx, [ebp+var_C]
.text$mn:000067DA                 mov     large fs:0, ecx
.text$mn:000067E1                 pop     ecx
.text$mn:000067E2                 mov     esp, ebp
.text$mn:000067E4                 pop     ebp
.text$mn:000067E5                 retn    4
.text$mn:000067E5 ??0SearchParameters@@QAE@ABU0@@Z endp
.text$mn:000067E5
.text$mn:000067E5 _text$mn        ends
.text$mn:000067E5
.text$x:000067E8 ; ===========================================================================
.text$x:000067E8
.text$x:000067E8 ; Segment type: Pure code
.text$x:000067E8 ; Segment permissions: Read/Execute
.text$x:000067E8 _text$x         segment para public 'CODE' use32
.text$x:000067E8                 assume cs:_text$x
.text$x:000067E8                 ;org 67E8h
.text$x:000067E8 ; COMDAT (pick associative to section at 6788)
.text$x:000067E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000067E8
.text$x:000067E8 ; =============== S U B R O U T I N E =======================================
.text$x:000067E8
.text$x:000067E8
.text$x:000067E8 __unwindfunclet$??0SearchParameters@@QAE@ABU0@@Z$0 proc near
.text$x:000067E8                                         ; DATA XREF: .xdata$x:0000D890o
.text$x:000067E8                 mov     ecx, [ebp-10h]
.text$x:000067EB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000067EB __unwindfunclet$??0SearchParameters@@QAE@ABU0@@Z$0 endp
.text$x:000067EB
.text$x:000067F0
.text$x:000067F0 ; =============== S U B R O U T I N E =======================================
.text$x:000067F0
.text$x:000067F0
.text$x:000067F0 __ehhandler$??0SearchParameters@@QAE@ABU0@@Z proc near
.text$x:000067F0                                         ; DATA XREF: SearchParameters::SearchParameters(SearchParameters const &)+5o
.text$x:000067F0
.text$x:000067F0 arg_4           = dword ptr  8
.text$x:000067F0
.text$x:000067F0                 mov     edx, [esp+arg_4]
.text$x:000067F4                 lea     eax, [edx+0Ch]
.text$x:000067F7                 mov     ecx, [edx-8]
.text$x:000067FA                 xor     ecx, eax
.text$x:000067FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006801                 mov     eax, offset __ehfuncinfo$??0SearchParameters@@QAE@ABU0@@Z
.text$x:00006806                 jmp     ___CxxFrameHandler3
.text$x:00006806 __ehhandler$??0SearchParameters@@QAE@ABU0@@Z endp
.text$x:00006806
.text$x:00006806 ; ---------------------------------------------------------------------------
.text$x:0000680B                 align 4
.text$x:0000680B _text$x         ends
.text$x:0000680B
.text$mn:0000680C ; ===========================================================================
.text$mn:0000680C
.text$mn:0000680C ; Segment type: Pure code
.text$mn:0000680C ; Segment permissions: Read/Execute
.text$mn:0000680C _text$mn        segment para public 'CODE' use32
.text$mn:0000680C                 assume cs:_text$mn
.text$mn:0000680C                 ;org 680Ch
.text$mn:0000680C ; COMDAT (pick any)
.text$mn:0000680C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000680C
.text$mn:0000680C ; =============== S U B R O U T I N E =======================================
.text$mn:0000680C
.text$mn:0000680C ; Attributes: bp-based frame
.text$mn:0000680C
.text$mn:0000680C ; public: __thiscall SearchParameters::SearchParameters(void)
.text$mn:0000680C                 public ??0SearchParameters@@QAE@XZ
.text$mn:0000680C ??0SearchParameters@@QAE@XZ proc near   ; CODE XREF: TreeParams::TreeParams(void)+3Bp
.text$mn:0000680C
.text$mn:0000680C var_10          = dword ptr -10h
.text$mn:0000680C var_C           = dword ptr -0Ch
.text$mn:0000680C var_4           = dword ptr -4
.text$mn:0000680C
.text$mn:0000680C                 push    ebp
.text$mn:0000680D                 mov     ebp, esp
.text$mn:0000680F                 push    0FFFFFFFFh
.text$mn:00006811                 push    offset __ehhandler$??0SearchParameters@@QAE@XZ
.text$mn:00006816                 mov     eax, large fs:0
.text$mn:0000681C                 push    eax
.text$mn:0000681D                 push    ecx
.text$mn:0000681E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006823                 xor     eax, ebp
.text$mn:00006825                 push    eax
.text$mn:00006826                 lea     eax, [ebp+var_C]
.text$mn:00006829                 mov     large fs:0, eax
.text$mn:0000682F                 mov     [ebp+var_10], ecx
.text$mn:00006832                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00006837                 mov     ecx, [ebp+var_10]
.text$mn:0000683A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000683F                 mov     [ebp+var_4], 0
.text$mn:00006846                 mov     eax, [ebp+var_10]
.text$mn:00006849                 mov     byte ptr [eax+1Ch], 0
.text$mn:0000684D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006854                 mov     eax, [ebp+var_10]
.text$mn:00006857                 mov     ecx, [ebp+var_C]
.text$mn:0000685A                 mov     large fs:0, ecx
.text$mn:00006861                 pop     ecx
.text$mn:00006862                 mov     esp, ebp
.text$mn:00006864                 pop     ebp
.text$mn:00006865                 retn
.text$mn:00006865 ??0SearchParameters@@QAE@XZ endp
.text$mn:00006865
.text$mn:00006865 ; ---------------------------------------------------------------------------
.text$mn:00006866                 align 4
.text$mn:00006866 _text$mn        ends
.text$mn:00006866
.text$x:00006868 ; ===========================================================================
.text$x:00006868
.text$x:00006868 ; Segment type: Pure code
.text$x:00006868 ; Segment permissions: Read/Execute
.text$x:00006868 _text$x         segment para public 'CODE' use32
.text$x:00006868                 assume cs:_text$x
.text$x:00006868                 ;org 6868h
.text$x:00006868 ; COMDAT (pick associative to section at 680C)
.text$x:00006868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006868
.text$x:00006868 ; =============== S U B R O U T I N E =======================================
.text$x:00006868
.text$x:00006868
.text$x:00006868 __unwindfunclet$??0SearchParameters@@QAE@XZ$0 proc near
.text$x:00006868                                         ; DATA XREF: .xdata$x:0000D838o
.text$x:00006868                 mov     ecx, [ebp-10h]
.text$x:0000686B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000686B __unwindfunclet$??0SearchParameters@@QAE@XZ$0 endp
.text$x:0000686B
.text$x:00006870
.text$x:00006870 ; =============== S U B R O U T I N E =======================================
.text$x:00006870
.text$x:00006870
.text$x:00006870 __ehhandler$??0SearchParameters@@QAE@XZ proc near
.text$x:00006870                                         ; DATA XREF: SearchParameters::SearchParameters(void)+5o
.text$x:00006870
.text$x:00006870 arg_4           = dword ptr  8
.text$x:00006870
.text$x:00006870                 mov     edx, [esp+arg_4]
.text$x:00006874                 lea     eax, [edx+0Ch]
.text$x:00006877                 mov     ecx, [edx-8]
.text$x:0000687A                 xor     ecx, eax
.text$x:0000687C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006881                 mov     eax, offset __ehfuncinfo$??0SearchParameters@@QAE@XZ
.text$x:00006886                 jmp     ___CxxFrameHandler3
.text$x:00006886 __ehhandler$??0SearchParameters@@QAE@XZ endp
.text$x:00006886
.text$x:00006886 ; ---------------------------------------------------------------------------
.text$x:0000688B                 align 4
.text$x:0000688B _text$x         ends
.text$x:0000688B
.text$mn:0000688C ; ===========================================================================
.text$mn:0000688C
.text$mn:0000688C ; Segment type: Pure code
.text$mn:0000688C ; Segment permissions: Read/Execute
.text$mn:0000688C _text$mn        segment para public 'CODE' use32
.text$mn:0000688C                 assume cs:_text$mn
.text$mn:0000688C                 ;org 688Ch
.text$mn:0000688C ; COMDAT (pick any)
.text$mn:0000688C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000688C
.text$mn:0000688C ; =============== S U B R O U T I N E =======================================
.text$mn:0000688C
.text$mn:0000688C ; Attributes: bp-based frame
.text$mn:0000688C
.text$mn:0000688C ; public: __thiscall TreeParams::TreeParams(struct TreeParams const &)
.text$mn:0000688C                 public ??0TreeParams@@QAE@ABU0@@Z
.text$mn:0000688C ??0TreeParams@@QAE@ABU0@@Z proc near    ; CODE XREF: std::allocator<TreeParams>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)+56p
.text$mn:0000688C                                         ; std::allocator<TreeParams>::construct<TreeParams,TreeParams>(TreeParams *,TreeParams &&)+56p ...
.text$mn:0000688C
.text$mn:0000688C var_10          = dword ptr -10h
.text$mn:0000688C var_C           = dword ptr -0Ch
.text$mn:0000688C var_4           = dword ptr -4
.text$mn:0000688C arg_0           = dword ptr  8
.text$mn:0000688C
.text$mn:0000688C                 push    ebp
.text$mn:0000688D                 mov     ebp, esp
.text$mn:0000688F                 push    0FFFFFFFFh
.text$mn:00006891                 push    offset __ehhandler$??0TreeParams@@QAE@ABU0@@Z
.text$mn:00006896                 mov     eax, large fs:0
.text$mn:0000689C                 push    eax
.text$mn:0000689D                 push    ecx
.text$mn:0000689E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068A3                 xor     eax, ebp
.text$mn:000068A5                 push    eax
.text$mn:000068A6                 lea     eax, [ebp+var_C]
.text$mn:000068A9                 mov     large fs:0, eax
.text$mn:000068AF                 mov     [ebp+var_10], ecx
.text$mn:000068B2                 mov     eax, [ebp+arg_0]
.text$mn:000068B5                 push    eax
.text$mn:000068B6                 mov     ecx, [ebp+var_10]
.text$mn:000068B9                 call    ??0TreeStateNode@@QAE@ABU0@@Z ; TreeStateNode::TreeStateNode(TreeStateNode const &)
.text$mn:000068BE                 mov     [ebp+var_4], 0
.text$mn:000068C5                 mov     ecx, [ebp+arg_0]
.text$mn:000068C8                 add     ecx, 4Ch ; 'L'
.text$mn:000068CB                 push    ecx
.text$mn:000068CC                 mov     ecx, [ebp+var_10]
.text$mn:000068CF                 add     ecx, 4Ch ; 'L'
.text$mn:000068D2                 call    ??0SearchParameters@@QAE@ABU0@@Z ; SearchParameters::SearchParameters(SearchParameters const &)
.text$mn:000068D7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000068DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000068E2                 mov     eax, [ebp+var_10]
.text$mn:000068E5                 mov     ecx, [ebp+var_C]
.text$mn:000068E8                 mov     large fs:0, ecx
.text$mn:000068EF                 pop     ecx
.text$mn:000068F0                 mov     esp, ebp
.text$mn:000068F2                 pop     ebp
.text$mn:000068F3                 retn    4
.text$mn:000068F3 ??0TreeParams@@QAE@ABU0@@Z endp
.text$mn:000068F3
.text$mn:000068F3 ; ---------------------------------------------------------------------------
.text$mn:000068F6                 align 4
.text$mn:000068F6 _text$mn        ends
.text$mn:000068F6
.text$x:000068F8 ; ===========================================================================
.text$x:000068F8
.text$x:000068F8 ; Segment type: Pure code
.text$x:000068F8 ; Segment permissions: Read/Execute
.text$x:000068F8 _text$x         segment para public 'CODE' use32
.text$x:000068F8                 assume cs:_text$x
.text$x:000068F8                 ;org 68F8h
.text$x:000068F8 ; COMDAT (pick associative to section at 688C)
.text$x:000068F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000068F8
.text$x:000068F8 ; =============== S U B R O U T I N E =======================================
.text$x:000068F8
.text$x:000068F8
.text$x:000068F8 __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$0 proc near
.text$x:000068F8                                         ; DATA XREF: .xdata$x:0000D924o
.text$x:000068F8                 mov     ecx, [ebp-10h]  ; this
.text$x:000068FB                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:000068FB __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$0 endp
.text$x:000068FB
.text$x:00006900
.text$x:00006900 ; =============== S U B R O U T I N E =======================================
.text$x:00006900
.text$x:00006900
.text$x:00006900 __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$1 proc near
.text$x:00006900                                         ; DATA XREF: .xdata$x:0000D92Co
.text$x:00006900                 mov     ecx, [ebp-10h]
.text$x:00006903                 add     ecx, 4Ch ; 'L'  ; this
.text$x:00006906                 jmp     ??1SearchParameters@@QAE@XZ ; SearchParameters::~SearchParameters(void)
.text$x:00006906 __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$1 endp
.text$x:00006906
.text$x:0000690B
.text$x:0000690B ; =============== S U B R O U T I N E =======================================
.text$x:0000690B
.text$x:0000690B
.text$x:0000690B __ehhandler$??0TreeParams@@QAE@ABU0@@Z proc near
.text$x:0000690B                                         ; DATA XREF: TreeParams::TreeParams(TreeParams const &)+5o
.text$x:0000690B
.text$x:0000690B arg_4           = dword ptr  8
.text$x:0000690B
.text$x:0000690B                 mov     edx, [esp+arg_4]
.text$x:0000690F                 lea     eax, [edx+0Ch]
.text$x:00006912                 mov     ecx, [edx-8]
.text$x:00006915                 xor     ecx, eax
.text$x:00006917                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000691C                 mov     eax, offset __ehfuncinfo$??0TreeParams@@QAE@ABU0@@Z
.text$x:00006921                 jmp     ___CxxFrameHandler3
.text$x:00006921 __ehhandler$??0TreeParams@@QAE@ABU0@@Z endp
.text$x:00006921
.text$x:00006921 ; ---------------------------------------------------------------------------
.text$x:00006926                 align 4
.text$x:00006926 _text$x         ends
.text$x:00006926
.text$mn:00006928 ; ===========================================================================
.text$mn:00006928
.text$mn:00006928 ; Segment type: Pure code
.text$mn:00006928 ; Segment permissions: Read/Execute
.text$mn:00006928 _text$mn        segment para public 'CODE' use32
.text$mn:00006928                 assume cs:_text$mn
.text$mn:00006928                 ;org 6928h
.text$mn:00006928 ; COMDAT (pick any)
.text$mn:00006928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006928
.text$mn:00006928 ; =============== S U B R O U T I N E =======================================
.text$mn:00006928
.text$mn:00006928 ; Attributes: bp-based frame
.text$mn:00006928
.text$mn:00006928 ; _DWORD __thiscall TreeParams::TreeParams(TreeParams *__hidden this)
.text$mn:00006928                 public ??0TreeParams@@QAE@XZ
.text$mn:00006928 ??0TreeParams@@QAE@XZ proc near         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+12Ap
.text$mn:00006928
.text$mn:00006928 var_10          = dword ptr -10h
.text$mn:00006928 var_C           = dword ptr -0Ch
.text$mn:00006928 var_4           = dword ptr -4
.text$mn:00006928
.text$mn:00006928                 push    ebp
.text$mn:00006929                 mov     ebp, esp
.text$mn:0000692B                 push    0FFFFFFFFh
.text$mn:0000692D                 push    offset __ehhandler$??0TreeParams@@QAE@XZ
.text$mn:00006932                 mov     eax, large fs:0
.text$mn:00006938                 push    eax
.text$mn:00006939                 push    ecx
.text$mn:0000693A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000693F                 xor     eax, ebp
.text$mn:00006941                 push    eax
.text$mn:00006942                 lea     eax, [ebp+var_C]
.text$mn:00006945                 mov     large fs:0, eax
.text$mn:0000694B                 mov     [ebp+var_10], ecx
.text$mn:0000694E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006951                 call    ??0TreeStateNode@@QAE@XZ ; TreeStateNode::TreeStateNode(void)
.text$mn:00006956                 mov     [ebp+var_4], 0
.text$mn:0000695D                 mov     ecx, [ebp+var_10]
.text$mn:00006960                 add     ecx, 4Ch ; 'L'
.text$mn:00006963                 call    ??0SearchParameters@@QAE@XZ ; SearchParameters::SearchParameters(void)
.text$mn:00006968                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000696C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006973                 mov     eax, [ebp+var_10]
.text$mn:00006976                 mov     ecx, [ebp+var_C]
.text$mn:00006979                 mov     large fs:0, ecx
.text$mn:00006980                 pop     ecx
.text$mn:00006981                 mov     esp, ebp
.text$mn:00006983                 pop     ebp
.text$mn:00006984                 retn
.text$mn:00006984 ??0TreeParams@@QAE@XZ endp
.text$mn:00006984
.text$mn:00006984 ; ---------------------------------------------------------------------------
.text$mn:00006985                 align 4
.text$mn:00006985 _text$mn        ends
.text$mn:00006985
.text$x:00006988 ; ===========================================================================
.text$x:00006988
.text$x:00006988 ; Segment type: Pure code
.text$x:00006988 ; Segment permissions: Read/Execute
.text$x:00006988 _text$x         segment para public 'CODE' use32
.text$x:00006988                 assume cs:_text$x
.text$x:00006988                 ;org 6988h
.text$x:00006988 ; COMDAT (pick associative to section at 6928)
.text$x:00006988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006988
.text$x:00006988 ; =============== S U B R O U T I N E =======================================
.text$x:00006988
.text$x:00006988
.text$x:00006988 __unwindfunclet$??0TreeParams@@QAE@XZ$0 proc near
.text$x:00006988                                         ; DATA XREF: .xdata$x:0000D8BCo
.text$x:00006988                 mov     ecx, [ebp-10h]  ; this
.text$x:0000698B                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:0000698B __unwindfunclet$??0TreeParams@@QAE@XZ$0 endp
.text$x:0000698B
.text$x:00006990
.text$x:00006990 ; =============== S U B R O U T I N E =======================================
.text$x:00006990
.text$x:00006990
.text$x:00006990 __unwindfunclet$??0TreeParams@@QAE@XZ$1 proc near
.text$x:00006990                                         ; DATA XREF: .xdata$x:0000D8C4o
.text$x:00006990                 mov     ecx, [ebp-10h]
.text$x:00006993                 add     ecx, 4Ch ; 'L'  ; this
.text$x:00006996                 jmp     ??1SearchParameters@@QAE@XZ ; SearchParameters::~SearchParameters(void)
.text$x:00006996 __unwindfunclet$??0TreeParams@@QAE@XZ$1 endp
.text$x:00006996
.text$x:0000699B
.text$x:0000699B ; =============== S U B R O U T I N E =======================================
.text$x:0000699B
.text$x:0000699B
.text$x:0000699B __ehhandler$??0TreeParams@@QAE@XZ proc near
.text$x:0000699B                                         ; DATA XREF: TreeParams::TreeParams(void)+5o
.text$x:0000699B
.text$x:0000699B arg_4           = dword ptr  8
.text$x:0000699B
.text$x:0000699B                 mov     edx, [esp+arg_4]
.text$x:0000699F                 lea     eax, [edx+0Ch]
.text$x:000069A2                 mov     ecx, [edx-8]
.text$x:000069A5                 xor     ecx, eax
.text$x:000069A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069AC                 mov     eax, offset __ehfuncinfo$??0TreeParams@@QAE@XZ
.text$x:000069B1                 jmp     ___CxxFrameHandler3
.text$x:000069B1 __ehhandler$??0TreeParams@@QAE@XZ endp
.text$x:000069B1
.text$x:000069B1 ; ---------------------------------------------------------------------------
.text$x:000069B6                 align 4
.text$x:000069B6 _text$x         ends
.text$x:000069B6
.text$mn:000069B8 ; ===========================================================================
.text$mn:000069B8
.text$mn:000069B8 ; Segment type: Pure code
.text$mn:000069B8 ; Segment permissions: Read/Execute
.text$mn:000069B8 _text$mn        segment para public 'CODE' use32
.text$mn:000069B8                 assume cs:_text$mn
.text$mn:000069B8                 ;org 69B8h
.text$mn:000069B8 ; COMDAT (pick any)
.text$mn:000069B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069B8
.text$mn:000069B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000069B8
.text$mn:000069B8 ; Attributes: bp-based frame
.text$mn:000069B8
.text$mn:000069B8 ; public: __thiscall TreeStateNode::TreeStateNode(struct TreeStateNode const &)
.text$mn:000069B8                 public ??0TreeStateNode@@QAE@ABU0@@Z
.text$mn:000069B8 ??0TreeStateNode@@QAE@ABU0@@Z proc near ; CODE XREF: FunctionListPanel::reload(void)+C8p
.text$mn:000069B8                                         ; std::allocator<TreeStateNode>::construct<TreeStateNode,TreeStateNode &>(TreeStateNode *,TreeStateNode &)+56p ...
.text$mn:000069B8
.text$mn:000069B8 var_10          = dword ptr -10h
.text$mn:000069B8 var_C           = dword ptr -0Ch
.text$mn:000069B8 var_4           = dword ptr -4
.text$mn:000069B8 arg_0           = dword ptr  8
.text$mn:000069B8
.text$mn:000069B8                 push    ebp
.text$mn:000069B9                 mov     ebp, esp
.text$mn:000069BB                 push    0FFFFFFFFh
.text$mn:000069BD                 push    offset __ehhandler$??0TreeStateNode@@QAE@ABU0@@Z
.text$mn:000069C2                 mov     eax, large fs:0
.text$mn:000069C8                 push    eax
.text$mn:000069C9                 push    ecx
.text$mn:000069CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069CF                 xor     eax, ebp
.text$mn:000069D1                 push    eax
.text$mn:000069D2                 lea     eax, [ebp+var_C]
.text$mn:000069D5                 mov     large fs:0, eax
.text$mn:000069DB                 mov     [ebp+var_10], ecx
.text$mn:000069DE                 mov     eax, [ebp+arg_0]
.text$mn:000069E1                 push    eax
.text$mn:000069E2                 mov     ecx, [ebp+var_10]
.text$mn:000069E5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000069EA                 mov     [ebp+var_4], 0
.text$mn:000069F1                 mov     ecx, [ebp+arg_0]
.text$mn:000069F4                 add     ecx, 1Ch
.text$mn:000069F7                 push    ecx
.text$mn:000069F8                 mov     ecx, [ebp+var_10]
.text$mn:000069FB                 add     ecx, 1Ch
.text$mn:000069FE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00006A03                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006A07                 mov     edx, [ebp+var_10]
.text$mn:00006A0A                 mov     eax, [ebp+arg_0]
.text$mn:00006A0D                 mov     cl, [eax+38h]
.text$mn:00006A10                 mov     [edx+38h], cl
.text$mn:00006A13                 mov     edx, [ebp+var_10]
.text$mn:00006A16                 mov     eax, [ebp+arg_0]
.text$mn:00006A19                 mov     cl, [eax+39h]
.text$mn:00006A1C                 mov     [edx+39h], cl
.text$mn:00006A1F                 mov     edx, [ebp+arg_0]
.text$mn:00006A22                 add     edx, 3Ch ; '<'
.text$mn:00006A25                 push    edx
.text$mn:00006A26                 mov     ecx, [ebp+var_10]
.text$mn:00006A29                 add     ecx, 3Ch ; '<'
.text$mn:00006A2C                 call    ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)
.text$mn:00006A31                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006A35                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A3C                 mov     eax, [ebp+var_10]
.text$mn:00006A3F                 mov     ecx, [ebp+var_C]
.text$mn:00006A42                 mov     large fs:0, ecx
.text$mn:00006A49                 pop     ecx
.text$mn:00006A4A                 mov     esp, ebp
.text$mn:00006A4C                 pop     ebp
.text$mn:00006A4D                 retn    4
.text$mn:00006A4D ??0TreeStateNode@@QAE@ABU0@@Z endp
.text$mn:00006A4D
.text$mn:00006A4D _text$mn        ends
.text$mn:00006A4D
.text$x:00006A50 ; ===========================================================================
.text$x:00006A50
.text$x:00006A50 ; Segment type: Pure code
.text$x:00006A50 ; Segment permissions: Read/Execute
.text$x:00006A50 _text$x         segment para public 'CODE' use32
.text$x:00006A50                 assume cs:_text$x
.text$x:00006A50                 ;org 6A50h
.text$x:00006A50 ; COMDAT (pick associative to section at 69B8)
.text$x:00006A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A50
.text$x:00006A50 ; =============== S U B R O U T I N E =======================================
.text$x:00006A50
.text$x:00006A50
.text$x:00006A50 __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$0 proc near
.text$x:00006A50                                         ; DATA XREF: .xdata$x:0000D7FCo
.text$x:00006A50                 mov     ecx, [ebp-10h]
.text$x:00006A53                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006A53 __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$0 endp
.text$x:00006A53
.text$x:00006A58
.text$x:00006A58 ; =============== S U B R O U T I N E =======================================
.text$x:00006A58
.text$x:00006A58
.text$x:00006A58 __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$1 proc near
.text$x:00006A58                                         ; DATA XREF: .xdata$x:0000D804o
.text$x:00006A58                 mov     ecx, [ebp-10h]
.text$x:00006A5B                 add     ecx, 1Ch
.text$x:00006A5E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006A5E __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$1 endp
.text$x:00006A5E
.text$x:00006A63
.text$x:00006A63 ; =============== S U B R O U T I N E =======================================
.text$x:00006A63
.text$x:00006A63
.text$x:00006A63 __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$2 proc near
.text$x:00006A63                                         ; DATA XREF: .xdata$x:0000D80Co
.text$x:00006A63                 mov     ecx, [ebp-10h]
.text$x:00006A66                 add     ecx, 3Ch ; '<'
.text$x:00006A69                 jmp     ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)
.text$x:00006A69 __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$2 endp
.text$x:00006A69
.text$x:00006A6E
.text$x:00006A6E ; =============== S U B R O U T I N E =======================================
.text$x:00006A6E
.text$x:00006A6E
.text$x:00006A6E __ehhandler$??0TreeStateNode@@QAE@ABU0@@Z proc near
.text$x:00006A6E                                         ; DATA XREF: TreeStateNode::TreeStateNode(TreeStateNode const &)+5o
.text$x:00006A6E
.text$x:00006A6E arg_4           = dword ptr  8
.text$x:00006A6E
.text$x:00006A6E                 mov     edx, [esp+arg_4]
.text$x:00006A72                 lea     eax, [edx+0Ch]
.text$x:00006A75                 mov     ecx, [edx-8]
.text$x:00006A78                 xor     ecx, eax
.text$x:00006A7A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A7F                 mov     eax, offset __ehfuncinfo$??0TreeStateNode@@QAE@ABU0@@Z
.text$x:00006A84                 jmp     ___CxxFrameHandler3
.text$x:00006A84 __ehhandler$??0TreeStateNode@@QAE@ABU0@@Z endp
.text$x:00006A84
.text$x:00006A84 ; ---------------------------------------------------------------------------
.text$x:00006A89                 align 4
.text$x:00006A89 _text$x         ends
.text$x:00006A89
.text$mn:00006A8C ; ===========================================================================
.text$mn:00006A8C
.text$mn:00006A8C ; Segment type: Pure code
.text$mn:00006A8C ; Segment permissions: Read/Execute
.text$mn:00006A8C _text$mn        segment para public 'CODE' use32
.text$mn:00006A8C                 assume cs:_text$mn
.text$mn:00006A8C                 ;org 6A8Ch
.text$mn:00006A8C ; COMDAT (pick any)
.text$mn:00006A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A8C
.text$mn:00006A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A8C
.text$mn:00006A8C ; Attributes: bp-based frame
.text$mn:00006A8C
.text$mn:00006A8C ; _DWORD __thiscall TreeStateNode::TreeStateNode(TreeStateNode *__hidden this)
.text$mn:00006A8C                 public ??0TreeStateNode@@QAE@XZ
.text$mn:00006A8C ??0TreeStateNode@@QAE@XZ proc near      ; CODE XREF: FunctionListPanel::reload(void)+37p
.text$mn:00006A8C                                         ; TreeParams::TreeParams(void)+29p
.text$mn:00006A8C
.text$mn:00006A8C var_10          = dword ptr -10h
.text$mn:00006A8C var_C           = dword ptr -0Ch
.text$mn:00006A8C var_4           = dword ptr -4
.text$mn:00006A8C
.text$mn:00006A8C                 push    ebp
.text$mn:00006A8D                 mov     ebp, esp
.text$mn:00006A8F                 push    0FFFFFFFFh
.text$mn:00006A91                 push    offset __ehhandler$??0TreeStateNode@@QAE@XZ
.text$mn:00006A96                 mov     eax, large fs:0
.text$mn:00006A9C                 push    eax
.text$mn:00006A9D                 push    ecx
.text$mn:00006A9E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006AA3                 xor     eax, ebp
.text$mn:00006AA5                 push    eax
.text$mn:00006AA6                 lea     eax, [ebp+var_C]
.text$mn:00006AA9                 mov     large fs:0, eax
.text$mn:00006AAF                 mov     [ebp+var_10], ecx
.text$mn:00006AB2                 mov     ecx, [ebp+var_10]
.text$mn:00006AB5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006ABA                 mov     [ebp+var_4], 0
.text$mn:00006AC1                 mov     ecx, [ebp+var_10]
.text$mn:00006AC4                 add     ecx, 1Ch
.text$mn:00006AC7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006ACC                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006AD0                 mov     ecx, [ebp+var_10]
.text$mn:00006AD3                 add     ecx, 3Ch ; '<'
.text$mn:00006AD6                 call    ??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(void)
.text$mn:00006ADB                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006ADF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006AE6                 mov     eax, [ebp+var_10]
.text$mn:00006AE9                 mov     ecx, [ebp+var_C]
.text$mn:00006AEC                 mov     large fs:0, ecx
.text$mn:00006AF3                 pop     ecx
.text$mn:00006AF4                 mov     esp, ebp
.text$mn:00006AF6                 pop     ebp
.text$mn:00006AF7                 retn
.text$mn:00006AF7 ??0TreeStateNode@@QAE@XZ endp
.text$mn:00006AF7
.text$mn:00006AF7 _text$mn        ends
.text$mn:00006AF7
.text$x:00006AF8 ; ===========================================================================
.text$x:00006AF8
.text$x:00006AF8 ; Segment type: Pure code
.text$x:00006AF8 ; Segment permissions: Read/Execute
.text$x:00006AF8 _text$x         segment para public 'CODE' use32
.text$x:00006AF8                 assume cs:_text$x
.text$x:00006AF8                 ;org 6AF8h
.text$x:00006AF8 ; COMDAT (pick associative to section at 6A8C)
.text$x:00006AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AF8
.text$x:00006AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00006AF8
.text$x:00006AF8
.text$x:00006AF8 __unwindfunclet$??0TreeStateNode@@QAE@XZ$0 proc near
.text$x:00006AF8                                         ; DATA XREF: .xdata$x:0000D784o
.text$x:00006AF8                 mov     ecx, [ebp-10h]
.text$x:00006AFB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006AFB __unwindfunclet$??0TreeStateNode@@QAE@XZ$0 endp
.text$x:00006AFB
.text$x:00006B00
.text$x:00006B00 ; =============== S U B R O U T I N E =======================================
.text$x:00006B00
.text$x:00006B00
.text$x:00006B00 __unwindfunclet$??0TreeStateNode@@QAE@XZ$1 proc near
.text$x:00006B00                                         ; DATA XREF: .xdata$x:0000D78Co
.text$x:00006B00                 mov     ecx, [ebp-10h]
.text$x:00006B03                 add     ecx, 1Ch
.text$x:00006B06                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006B06 __unwindfunclet$??0TreeStateNode@@QAE@XZ$1 endp
.text$x:00006B06
.text$x:00006B0B
.text$x:00006B0B ; =============== S U B R O U T I N E =======================================
.text$x:00006B0B
.text$x:00006B0B
.text$x:00006B0B __unwindfunclet$??0TreeStateNode@@QAE@XZ$2 proc near
.text$x:00006B0B                                         ; DATA XREF: .xdata$x:0000D794o
.text$x:00006B0B                 mov     ecx, [ebp-10h]
.text$x:00006B0E                 add     ecx, 3Ch ; '<'
.text$x:00006B11                 jmp     ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)
.text$x:00006B11 __unwindfunclet$??0TreeStateNode@@QAE@XZ$2 endp
.text$x:00006B11
.text$x:00006B16
.text$x:00006B16 ; =============== S U B R O U T I N E =======================================
.text$x:00006B16
.text$x:00006B16
.text$x:00006B16 __ehhandler$??0TreeStateNode@@QAE@XZ proc near
.text$x:00006B16                                         ; DATA XREF: TreeStateNode::TreeStateNode(void)+5o
.text$x:00006B16
.text$x:00006B16 arg_4           = dword ptr  8
.text$x:00006B16
.text$x:00006B16                 mov     edx, [esp+arg_4]
.text$x:00006B1A                 lea     eax, [edx+0Ch]
.text$x:00006B1D                 mov     ecx, [edx-8]
.text$x:00006B20                 xor     ecx, eax
.text$x:00006B22                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B27                 mov     eax, offset __ehfuncinfo$??0TreeStateNode@@QAE@XZ
.text$x:00006B2C                 jmp     ___CxxFrameHandler3
.text$x:00006B2C __ehhandler$??0TreeStateNode@@QAE@XZ endp
.text$x:00006B2C
.text$x:00006B2C ; ---------------------------------------------------------------------------
.text$x:00006B31                 align 4
.text$x:00006B31 _text$x         ends
.text$x:00006B31
.text$mn:00006B34 ; ===========================================================================
.text$mn:00006B34
.text$mn:00006B34 ; Segment type: Pure code
.text$mn:00006B34 ; Segment permissions: Read/Execute
.text$mn:00006B34 _text$mn        segment para public 'CODE' use32
.text$mn:00006B34                 assume cs:_text$mn
.text$mn:00006B34                 ;org 6B34h
.text$mn:00006B34 ; COMDAT (pick any)
.text$mn:00006B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B34
.text$mn:00006B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B34
.text$mn:00006B34 ; Attributes: bp-based frame
.text$mn:00006B34
.text$mn:00006B34 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00006B34                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00006B34 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00006B34                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00006B34                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:00006B34
.text$mn:00006B34 var_4           = dword ptr -4
.text$mn:00006B34
.text$mn:00006B34                 push    ebp
.text$mn:00006B35                 mov     ebp, esp
.text$mn:00006B37                 push    ecx
.text$mn:00006B38                 mov     [ebp+var_4], ecx
.text$mn:00006B3B                 mov     eax, [ebp+var_4]
.text$mn:00006B3E                 mov     dword ptr [eax], 0
.text$mn:00006B44                 mov     eax, [ebp+var_4]
.text$mn:00006B47                 mov     esp, ebp
.text$mn:00006B49                 pop     ebp
.text$mn:00006B4A                 retn
.text$mn:00006B4A ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00006B4A
.text$mn:00006B4A ; ---------------------------------------------------------------------------
.text$mn:00006B4B                 align 4
.text$mn:00006B4B _text$mn        ends
.text$mn:00006B4B
.text$mn:00006B4C ; ===========================================================================
.text$mn:00006B4C
.text$mn:00006B4C ; Segment type: Pure code
.text$mn:00006B4C ; Segment permissions: Read/Execute
.text$mn:00006B4C _text$mn        segment para public 'CODE' use32
.text$mn:00006B4C                 assume cs:_text$mn
.text$mn:00006B4C                 ;org 6B4Ch
.text$mn:00006B4C ; COMDAT (pick any)
.text$mn:00006B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B4C
.text$mn:00006B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006B4C
.text$mn:00006B4C ; Attributes: bp-based frame
.text$mn:00006B4C
.text$mn:00006B4C ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00006B4C                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00006B4C ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00006B4C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00006B4C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:00006B4C
.text$mn:00006B4C var_4           = dword ptr -4
.text$mn:00006B4C
.text$mn:00006B4C                 push    ebp
.text$mn:00006B4D                 mov     ebp, esp
.text$mn:00006B4F                 push    ecx
.text$mn:00006B50                 mov     [ebp+var_4], ecx
.text$mn:00006B53                 mov     eax, [ebp+var_4]
.text$mn:00006B56                 mov     dword ptr [eax], 0
.text$mn:00006B5C                 mov     ecx, [ebp+var_4]
.text$mn:00006B5F                 mov     dword ptr [ecx+4], 0
.text$mn:00006B66                 mov     eax, [ebp+var_4]
.text$mn:00006B69                 mov     esp, ebp
.text$mn:00006B6B                 pop     ebp
.text$mn:00006B6C                 retn
.text$mn:00006B6C ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00006B6C
.text$mn:00006B6C ; ---------------------------------------------------------------------------
.text$mn:00006B6D                 align 10h
.text$mn:00006B6D _text$mn        ends
.text$mn:00006B6D
.text$mn:00006B70 ; ===========================================================================
.text$mn:00006B70
.text$mn:00006B70 ; Segment type: Pure code
.text$mn:00006B70 ; Segment permissions: Read/Execute
.text$mn:00006B70 _text$mn        segment para public 'CODE' use32
.text$mn:00006B70                 assume cs:_text$mn
.text$mn:00006B70                 ;org 6B70h
.text$mn:00006B70 ; COMDAT (pick any)
.text$mn:00006B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B70
.text$mn:00006B70 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B70
.text$mn:00006B70 ; Attributes: bp-based frame
.text$mn:00006B70
.text$mn:00006B70 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00006B70                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00006B70 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00006B70                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00006B70                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00006B70
.text$mn:00006B70 var_10          = dword ptr -10h
.text$mn:00006B70 var_C           = dword ptr -0Ch
.text$mn:00006B70 var_4           = dword ptr -4
.text$mn:00006B70
.text$mn:00006B70                 push    ebp
.text$mn:00006B71                 mov     ebp, esp
.text$mn:00006B73                 push    0FFFFFFFFh
.text$mn:00006B75                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00006B7A                 mov     eax, large fs:0
.text$mn:00006B80                 push    eax
.text$mn:00006B81                 push    ecx
.text$mn:00006B82                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B87                 xor     eax, ebp
.text$mn:00006B89                 push    eax
.text$mn:00006B8A                 lea     eax, [ebp+var_C]
.text$mn:00006B8D                 mov     large fs:0, eax
.text$mn:00006B93                 mov     [ebp+var_10], ecx
.text$mn:00006B96                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B99                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00006B9E                 mov     [ebp+var_4], 0
.text$mn:00006BA5                 mov     eax, [ebp+var_10]
.text$mn:00006BA8                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00006BAE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006BB5                 mov     eax, [ebp+var_10]
.text$mn:00006BB8                 mov     ecx, [ebp+var_C]
.text$mn:00006BBB                 mov     large fs:0, ecx
.text$mn:00006BC2                 pop     ecx
.text$mn:00006BC3                 mov     esp, ebp
.text$mn:00006BC5                 pop     ebp
.text$mn:00006BC6                 retn
.text$mn:00006BC6 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00006BC6
.text$mn:00006BC6 ; ---------------------------------------------------------------------------
.text$mn:00006BC7                 align 4
.text$mn:00006BC7 _text$mn        ends
.text$mn:00006BC7
.text$x:00006BC8 ; ===========================================================================
.text$x:00006BC8
.text$x:00006BC8 ; Segment type: Pure code
.text$x:00006BC8 ; Segment permissions: Read/Execute
.text$x:00006BC8 _text$x         segment para public 'CODE' use32
.text$x:00006BC8                 assume cs:_text$x
.text$x:00006BC8                 ;org 6BC8h
.text$x:00006BC8 ; COMDAT (pick associative to section at 6B70)
.text$x:00006BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006BC8
.text$x:00006BC8 ; =============== S U B R O U T I N E =======================================
.text$x:00006BC8
.text$x:00006BC8
.text$x:00006BC8 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00006BC8                                         ; DATA XREF: .xdata$x:0000CD30o
.text$x:00006BC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006BCB                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00006BCB __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00006BCB
.text$x:00006BD0
.text$x:00006BD0 ; =============== S U B R O U T I N E =======================================
.text$x:00006BD0
.text$x:00006BD0
.text$x:00006BD0 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00006BD0                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00006BD0
.text$x:00006BD0 arg_4           = dword ptr  8
.text$x:00006BD0
.text$x:00006BD0                 mov     edx, [esp+arg_4]
.text$x:00006BD4                 lea     eax, [edx+0Ch]
.text$x:00006BD7                 mov     ecx, [edx-8]
.text$x:00006BDA                 xor     ecx, eax
.text$x:00006BDC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BE1                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00006BE6                 jmp     ___CxxFrameHandler3
.text$x:00006BE6 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00006BE6
.text$x:00006BE6 ; ---------------------------------------------------------------------------
.text$x:00006BEB                 align 4
.text$x:00006BEB _text$x         ends
.text$x:00006BEB
.text$mn:00006BEC ; ===========================================================================
.text$mn:00006BEC
.text$mn:00006BEC ; Segment type: Pure code
.text$mn:00006BEC ; Segment permissions: Read/Execute
.text$mn:00006BEC _text$mn        segment para public 'CODE' use32
.text$mn:00006BEC                 assume cs:_text$mn
.text$mn:00006BEC                 ;org 6BECh
.text$mn:00006BEC ; COMDAT (pick any)
.text$mn:00006BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BEC
.text$mn:00006BEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BEC
.text$mn:00006BEC ; Attributes: bp-based frame
.text$mn:00006BEC
.text$mn:00006BEC ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:00006BEC                 public ??0_Ignore@std@@QAE@XZ
.text$mn:00006BEC ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:00006BEC
.text$mn:00006BEC var_4           = dword ptr -4
.text$mn:00006BEC
.text$mn:00006BEC                 push    ebp
.text$mn:00006BED                 mov     ebp, esp
.text$mn:00006BEF                 push    ecx
.text$mn:00006BF0                 mov     [ebp+var_4], ecx
.text$mn:00006BF3                 mov     eax, [ebp+var_4]
.text$mn:00006BF6                 mov     esp, ebp
.text$mn:00006BF8                 pop     ebp
.text$mn:00006BF9                 retn
.text$mn:00006BF9 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00006BF9
.text$mn:00006BF9 ; ---------------------------------------------------------------------------
.text$mn:00006BFA                 align 4
.text$mn:00006BFA _text$mn        ends
.text$mn:00006BFA
.text$mn:00006BFC ; ===========================================================================
.text$mn:00006BFC
.text$mn:00006BFC ; Segment type: Pure code
.text$mn:00006BFC ; Segment permissions: Read/Execute
.text$mn:00006BFC _text$mn        segment para public 'CODE' use32
.text$mn:00006BFC                 assume cs:_text$mn
.text$mn:00006BFC                 ;org 6BFCh
.text$mn:00006BFC ; COMDAT (pick any)
.text$mn:00006BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BFC
.text$mn:00006BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BFC
.text$mn:00006BFC ; Attributes: bp-based frame
.text$mn:00006BFC
.text$mn:00006BFC ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00006BFC                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00006BFC ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00006BFC                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00006BFC
.text$mn:00006BFC var_10          = dword ptr -10h
.text$mn:00006BFC var_C           = dword ptr -0Ch
.text$mn:00006BFC var_4           = dword ptr -4
.text$mn:00006BFC
.text$mn:00006BFC                 push    ebp
.text$mn:00006BFD                 mov     ebp, esp
.text$mn:00006BFF                 push    0FFFFFFFFh
.text$mn:00006C01                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00006C06                 mov     eax, large fs:0
.text$mn:00006C0C                 push    eax
.text$mn:00006C0D                 push    ecx
.text$mn:00006C0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C13                 xor     eax, ebp
.text$mn:00006C15                 push    eax
.text$mn:00006C16                 lea     eax, [ebp+var_C]
.text$mn:00006C19                 mov     large fs:0, eax
.text$mn:00006C1F                 mov     [ebp+var_10], ecx
.text$mn:00006C22                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C25                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00006C2A                 mov     [ebp+var_4], 0
.text$mn:00006C31                 mov     eax, [ebp+var_10]
.text$mn:00006C34                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00006C3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C41                 mov     eax, [ebp+var_10]
.text$mn:00006C44                 mov     ecx, [ebp+var_C]
.text$mn:00006C47                 mov     large fs:0, ecx
.text$mn:00006C4E                 pop     ecx
.text$mn:00006C4F                 mov     esp, ebp
.text$mn:00006C51                 pop     ebp
.text$mn:00006C52                 retn
.text$mn:00006C52 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00006C52
.text$mn:00006C52 ; ---------------------------------------------------------------------------
.text$mn:00006C53                 align 4
.text$mn:00006C53 _text$mn        ends
.text$mn:00006C53
.text$x:00006C54 ; ===========================================================================
.text$x:00006C54
.text$x:00006C54 ; Segment type: Pure code
.text$x:00006C54 ; Segment permissions: Read/Execute
.text$x:00006C54 _text$x         segment para public 'CODE' use32
.text$x:00006C54                 assume cs:_text$x
.text$x:00006C54                 ;org 6C54h
.text$x:00006C54 ; COMDAT (pick associative to section at 6BFC)
.text$x:00006C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C54
.text$x:00006C54 ; =============== S U B R O U T I N E =======================================
.text$x:00006C54
.text$x:00006C54
.text$x:00006C54 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00006C54                                         ; DATA XREF: .xdata$x:0000CDB4o
.text$x:00006C54                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C57                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006C57 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00006C57
.text$x:00006C5C
.text$x:00006C5C ; =============== S U B R O U T I N E =======================================
.text$x:00006C5C
.text$x:00006C5C
.text$x:00006C5C __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00006C5C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00006C5C
.text$x:00006C5C arg_4           = dword ptr  8
.text$x:00006C5C
.text$x:00006C5C                 mov     edx, [esp+arg_4]
.text$x:00006C60                 lea     eax, [edx+0Ch]
.text$x:00006C63                 mov     ecx, [edx-8]
.text$x:00006C66                 xor     ecx, eax
.text$x:00006C68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C6D                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00006C72                 jmp     ___CxxFrameHandler3
.text$x:00006C72 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00006C72
.text$x:00006C72 ; ---------------------------------------------------------------------------
.text$x:00006C77                 align 4
.text$x:00006C77 _text$x         ends
.text$x:00006C77
.text$mn:00006C78 ; ===========================================================================
.text$mn:00006C78
.text$mn:00006C78 ; Segment type: Pure code
.text$mn:00006C78 ; Segment permissions: Read/Execute
.text$mn:00006C78 _text$mn        segment para public 'CODE' use32
.text$mn:00006C78                 assume cs:_text$mn
.text$mn:00006C78                 ;org 6C78h
.text$mn:00006C78 ; COMDAT (pick any)
.text$mn:00006C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C78
.text$mn:00006C78 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C78
.text$mn:00006C78 ; Attributes: bp-based frame
.text$mn:00006C78
.text$mn:00006C78 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00006C78                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00006C78 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00006C78                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00006C78                                         ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+2Dp ...
.text$mn:00006C78
.text$mn:00006C78 var_4           = dword ptr -4
.text$mn:00006C78 arg_0           = dword ptr  8
.text$mn:00006C78
.text$mn:00006C78                 push    ebp
.text$mn:00006C79                 mov     ebp, esp
.text$mn:00006C7B                 push    ecx
.text$mn:00006C7C                 mov     [ebp+var_4], ecx
.text$mn:00006C7F                 mov     eax, [ebp+var_4]
.text$mn:00006C82                 mov     dword ptr [eax], 0
.text$mn:00006C88                 mov     ecx, [ebp+var_4]
.text$mn:00006C8B                 mov     dword ptr [ecx+4], 0
.text$mn:00006C92                 mov     edx, [ebp+arg_0]
.text$mn:00006C95                 push    edx
.text$mn:00006C96                 mov     ecx, [ebp+var_4]
.text$mn:00006C99                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00006C9E                 mov     eax, [ebp+var_4]
.text$mn:00006CA1                 mov     esp, ebp
.text$mn:00006CA3                 pop     ebp
.text$mn:00006CA4                 retn    4
.text$mn:00006CA4 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00006CA4
.text$mn:00006CA4 ; ---------------------------------------------------------------------------
.text$mn:00006CA7                 align 4
.text$mn:00006CA7 _text$mn        ends
.text$mn:00006CA7
.text$mn:00006CA8 ; ===========================================================================
.text$mn:00006CA8
.text$mn:00006CA8 ; Segment type: Pure code
.text$mn:00006CA8 ; Segment permissions: Read/Execute
.text$mn:00006CA8 _text$mn        segment para public 'CODE' use32
.text$mn:00006CA8                 assume cs:_text$mn
.text$mn:00006CA8                 ;org 6CA8h
.text$mn:00006CA8 ; COMDAT (pick any)
.text$mn:00006CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CA8
.text$mn:00006CA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CA8
.text$mn:00006CA8 ; Attributes: bp-based frame
.text$mn:00006CA8
.text$mn:00006CA8 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00006CA8                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00006CA8 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00006CA8                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)+29p
.text$mn:00006CA8                                         ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+29p ...
.text$mn:00006CA8
.text$mn:00006CA8 var_4           = dword ptr -4
.text$mn:00006CA8
.text$mn:00006CA8                 push    ebp
.text$mn:00006CA9                 mov     ebp, esp
.text$mn:00006CAB                 push    ecx
.text$mn:00006CAC                 mov     [ebp+var_4], ecx
.text$mn:00006CAF                 mov     eax, [ebp+var_4]
.text$mn:00006CB2                 mov     dword ptr [eax], 0
.text$mn:00006CB8                 mov     ecx, [ebp+var_4]
.text$mn:00006CBB                 mov     dword ptr [ecx+4], 0
.text$mn:00006CC2                 mov     eax, [ebp+var_4]
.text$mn:00006CC5                 mov     esp, ebp
.text$mn:00006CC7                 pop     ebp
.text$mn:00006CC8                 retn
.text$mn:00006CC8 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00006CC8
.text$mn:00006CC8 ; ---------------------------------------------------------------------------
.text$mn:00006CC9                 align 4
.text$mn:00006CC9 _text$mn        ends
.text$mn:00006CC9
.text$mn:00006CCC ; ===========================================================================
.text$mn:00006CCC
.text$mn:00006CCC ; Segment type: Pure code
.text$mn:00006CCC ; Segment permissions: Read/Execute
.text$mn:00006CCC _text$mn        segment para public 'CODE' use32
.text$mn:00006CCC                 assume cs:_text$mn
.text$mn:00006CCC                 ;org 6CCCh
.text$mn:00006CCC ; COMDAT (pick any)
.text$mn:00006CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CCC
.text$mn:00006CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00006CCC
.text$mn:00006CCC ; Attributes: bp-based frame
.text$mn:00006CCC
.text$mn:00006CCC ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00006CCC                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00006CCC ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00006CCC                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00006CCC
.text$mn:00006CCC var_10          = dword ptr -10h
.text$mn:00006CCC var_C           = dword ptr -0Ch
.text$mn:00006CCC var_4           = dword ptr -4
.text$mn:00006CCC
.text$mn:00006CCC                 push    ebp
.text$mn:00006CCD                 mov     ebp, esp
.text$mn:00006CCF                 push    0FFFFFFFFh
.text$mn:00006CD1                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00006CD6                 mov     eax, large fs:0
.text$mn:00006CDC                 push    eax
.text$mn:00006CDD                 push    ecx
.text$mn:00006CDE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CE3                 xor     eax, ebp
.text$mn:00006CE5                 push    eax
.text$mn:00006CE6                 lea     eax, [ebp+var_C]
.text$mn:00006CE9                 mov     large fs:0, eax
.text$mn:00006CEF                 mov     [ebp+var_10], ecx
.text$mn:00006CF2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006CF5                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00006CFA                 mov     [ebp+var_4], 0
.text$mn:00006D01                 mov     eax, [ebp+var_10]
.text$mn:00006D04                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00006D0A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D11                 mov     eax, [ebp+var_10]
.text$mn:00006D14                 mov     ecx, [ebp+var_C]
.text$mn:00006D17                 mov     large fs:0, ecx
.text$mn:00006D1E                 pop     ecx
.text$mn:00006D1F                 mov     esp, ebp
.text$mn:00006D21                 pop     ebp
.text$mn:00006D22                 retn
.text$mn:00006D22 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00006D22
.text$mn:00006D22 ; ---------------------------------------------------------------------------
.text$mn:00006D23                 align 4
.text$mn:00006D23 _text$mn        ends
.text$mn:00006D23
.text$x:00006D24 ; ===========================================================================
.text$x:00006D24
.text$x:00006D24 ; Segment type: Pure code
.text$x:00006D24 ; Segment permissions: Read/Execute
.text$x:00006D24 _text$x         segment para public 'CODE' use32
.text$x:00006D24                 assume cs:_text$x
.text$x:00006D24                 ;org 6D24h
.text$x:00006D24 ; COMDAT (pick associative to section at 6CCC)
.text$x:00006D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D24
.text$x:00006D24 ; =============== S U B R O U T I N E =======================================
.text$x:00006D24
.text$x:00006D24
.text$x:00006D24 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00006D24                                         ; DATA XREF: .xdata$x:0000CE38o
.text$x:00006D24                 mov     ecx, [ebp-10h]  ; this
.text$x:00006D27                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006D27 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00006D27
.text$x:00006D2C
.text$x:00006D2C ; =============== S U B R O U T I N E =======================================
.text$x:00006D2C
.text$x:00006D2C
.text$x:00006D2C __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00006D2C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00006D2C
.text$x:00006D2C arg_4           = dword ptr  8
.text$x:00006D2C
.text$x:00006D2C                 mov     edx, [esp+arg_4]
.text$x:00006D30                 lea     eax, [edx+0Ch]
.text$x:00006D33                 mov     ecx, [edx-8]
.text$x:00006D36                 xor     ecx, eax
.text$x:00006D38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D3D                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00006D42                 jmp     ___CxxFrameHandler3
.text$x:00006D42 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00006D42
.text$x:00006D42 ; ---------------------------------------------------------------------------
.text$x:00006D47                 align 4
.text$x:00006D47 _text$x         ends
.text$x:00006D47
.text$mn:00006D48 ; ===========================================================================
.text$mn:00006D48
.text$mn:00006D48 ; Segment type: Pure code
.text$mn:00006D48 ; Segment permissions: Read/Execute
.text$mn:00006D48 _text$mn        segment para public 'CODE' use32
.text$mn:00006D48                 assume cs:_text$mn
.text$mn:00006D48                 ;org 6D48h
.text$mn:00006D48 ; COMDAT (pick any)
.text$mn:00006D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D48
.text$mn:00006D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D48
.text$mn:00006D48 ; Attributes: bp-based frame
.text$mn:00006D48
.text$mn:00006D48 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00006D48                 public ??0error_category@std@@QAE@XZ
.text$mn:00006D48 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00006D48
.text$mn:00006D48 var_4           = dword ptr -4
.text$mn:00006D48
.text$mn:00006D48                 push    ebp
.text$mn:00006D49                 mov     ebp, esp
.text$mn:00006D4B                 push    ecx
.text$mn:00006D4C                 mov     [ebp+var_4], ecx
.text$mn:00006D4F                 mov     eax, [ebp+var_4]
.text$mn:00006D52                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00006D58                 mov     eax, [ebp+var_4]
.text$mn:00006D5B                 mov     esp, ebp
.text$mn:00006D5D                 pop     ebp
.text$mn:00006D5E                 retn
.text$mn:00006D5E ??0error_category@std@@QAE@XZ endp
.text$mn:00006D5E
.text$mn:00006D5E ; ---------------------------------------------------------------------------
.text$mn:00006D5F                 align 10h
.text$mn:00006D5F _text$mn        ends
.text$mn:00006D5F
.text$mn:00006D60 ; ===========================================================================
.text$mn:00006D60
.text$mn:00006D60 ; Segment type: Pure code
.text$mn:00006D60 ; Segment permissions: Read/Execute
.text$mn:00006D60 _text$mn        segment para public 'CODE' use32
.text$mn:00006D60                 assume cs:_text$mn
.text$mn:00006D60                 ;org 6D60h
.text$mn:00006D60 ; COMDAT (pick any)
.text$mn:00006D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D60
.text$mn:00006D60 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D60
.text$mn:00006D60 ; Attributes: bp-based frame
.text$mn:00006D60
.text$mn:00006D60 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00006D60                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00006D60 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00006D60                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00006D60                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00006D60
.text$mn:00006D60 var_4           = dword ptr -4
.text$mn:00006D60 arg_0           = dword ptr  8
.text$mn:00006D60 arg_4           = dword ptr  0Ch
.text$mn:00006D60
.text$mn:00006D60                 push    ebp
.text$mn:00006D61                 mov     ebp, esp
.text$mn:00006D63                 push    ecx
.text$mn:00006D64                 mov     [ebp+var_4], ecx
.text$mn:00006D67                 mov     eax, [ebp+var_4]
.text$mn:00006D6A                 mov     ecx, [ebp+arg_0]
.text$mn:00006D6D                 mov     [eax], ecx
.text$mn:00006D6F                 mov     edx, [ebp+var_4]
.text$mn:00006D72                 mov     eax, [ebp+arg_4]
.text$mn:00006D75                 mov     [edx+4], eax
.text$mn:00006D78                 mov     eax, [ebp+var_4]
.text$mn:00006D7B                 mov     esp, ebp
.text$mn:00006D7D                 pop     ebp
.text$mn:00006D7E                 retn    8
.text$mn:00006D7E ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00006D7E
.text$mn:00006D7E ; ---------------------------------------------------------------------------
.text$mn:00006D81                 align 4
.text$mn:00006D81 _text$mn        ends
.text$mn:00006D81
.text$mn:00006D84 ; ===========================================================================
.text$mn:00006D84
.text$mn:00006D84 ; Segment type: Pure code
.text$mn:00006D84 ; Segment permissions: Read/Execute
.text$mn:00006D84 _text$mn        segment para public 'CODE' use32
.text$mn:00006D84                 assume cs:_text$mn
.text$mn:00006D84                 ;org 6D84h
.text$mn:00006D84 ; COMDAT (pick any)
.text$mn:00006D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D84
.text$mn:00006D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D84
.text$mn:00006D84 ; Attributes: bp-based frame
.text$mn:00006D84
.text$mn:00006D84 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00006D84                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00006D84 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00006D84                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00006D84
.text$mn:00006D84 var_4           = dword ptr -4
.text$mn:00006D84 arg_0           = dword ptr  8
.text$mn:00006D84
.text$mn:00006D84                 push    ebp
.text$mn:00006D85                 mov     ebp, esp
.text$mn:00006D87                 push    ecx
.text$mn:00006D88                 mov     [ebp+var_4], ecx
.text$mn:00006D8B                 mov     eax, [ebp+var_4]
.text$mn:00006D8E                 mov     ecx, [ebp+arg_0]
.text$mn:00006D91                 mov     [eax], ecx
.text$mn:00006D93                 mov     eax, [ebp+var_4]
.text$mn:00006D96                 mov     esp, ebp
.text$mn:00006D98                 pop     ebp
.text$mn:00006D99                 retn    4
.text$mn:00006D99 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00006D99
.text$mn:00006D99 _text$mn        ends
.text$mn:00006D99
.text$mn:00006D9C ; ===========================================================================
.text$mn:00006D9C
.text$mn:00006D9C ; Segment type: Pure code
.text$mn:00006D9C ; Segment permissions: Read/Execute
.text$mn:00006D9C _text$mn        segment para public 'CODE' use32
.text$mn:00006D9C                 assume cs:_text$mn
.text$mn:00006D9C                 ;org 6D9Ch
.text$mn:00006D9C ; COMDAT (pick any)
.text$mn:00006D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D9C
.text$mn:00006D9C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D9C
.text$mn:00006D9C ; Attributes: bp-based frame
.text$mn:00006D9C
.text$mn:00006D9C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct TreeStateNode, int, struct TreeStateNode const *, struct TreeStateNode const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, struct TreeStateNode, int, struct TreeStateNode const *, struct TreeStateNode const &, struct std::_Iterator_base12>(void)
.text$mn:00006D9C                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006D9C ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006D9C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006D9C                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00006D9C
.text$mn:00006D9C var_10          = dword ptr -10h
.text$mn:00006D9C var_C           = dword ptr -0Ch
.text$mn:00006D9C var_4           = dword ptr -4
.text$mn:00006D9C
.text$mn:00006D9C                 push    ebp
.text$mn:00006D9D                 mov     ebp, esp
.text$mn:00006D9F                 push    0FFFFFFFFh
.text$mn:00006DA1                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006DA6                 mov     eax, large fs:0
.text$mn:00006DAC                 push    eax
.text$mn:00006DAD                 push    ecx
.text$mn:00006DAE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006DB3                 xor     eax, ebp
.text$mn:00006DB5                 push    eax
.text$mn:00006DB6                 lea     eax, [ebp+var_C]
.text$mn:00006DB9                 mov     large fs:0, eax
.text$mn:00006DBF                 mov     [ebp+var_10], ecx
.text$mn:00006DC2                 mov     [ebp+var_4], 0
.text$mn:00006DC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006DD0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006DD3                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00006DD8                 mov     ecx, [ebp+var_C]
.text$mn:00006DDB                 mov     large fs:0, ecx
.text$mn:00006DE2                 pop     ecx
.text$mn:00006DE3                 mov     esp, ebp
.text$mn:00006DE5                 pop     ebp
.text$mn:00006DE6                 retn
.text$mn:00006DE6 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006DE6
.text$mn:00006DE6 ; ---------------------------------------------------------------------------
.text$mn:00006DE7                 align 4
.text$mn:00006DE7 _text$mn        ends
.text$mn:00006DE7
.text$x:00006DE8 ; ===========================================================================
.text$x:00006DE8
.text$x:00006DE8 ; Segment type: Pure code
.text$x:00006DE8 ; Segment permissions: Read/Execute
.text$x:00006DE8 _text$x         segment para public 'CODE' use32
.text$x:00006DE8                 assume cs:_text$x
.text$x:00006DE8                 ;org 6DE8h
.text$x:00006DE8 ; COMDAT (pick associative to section at 6D9C)
.text$x:00006DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DE8
.text$x:00006DE8 ; =============== S U B R O U T I N E =======================================
.text$x:00006DE8
.text$x:00006DE8
.text$x:00006DE8 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006DE8                                         ; DATA XREF: .xdata$x:0000E190o
.text$x:00006DE8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006DEB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006DEB __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00006DEB
.text$x:00006DF0
.text$x:00006DF0 ; =============== S U B R O U T I N E =======================================
.text$x:00006DF0
.text$x:00006DF0
.text$x:00006DF0 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006DF0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)+5o
.text$x:00006DF0
.text$x:00006DF0 arg_4           = dword ptr  8
.text$x:00006DF0
.text$x:00006DF0                 mov     edx, [esp+arg_4]
.text$x:00006DF4                 lea     eax, [edx+0Ch]
.text$x:00006DF7                 mov     ecx, [edx-8]
.text$x:00006DFA                 xor     ecx, eax
.text$x:00006DFC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E01                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00006E06                 jmp     ___CxxFrameHandler3
.text$x:00006E06 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00006E06
.text$x:00006E06 ; ---------------------------------------------------------------------------
.text$x:00006E0B                 align 4
.text$x:00006E0B _text$x         ends
.text$x:00006E0B
.text$mn:00006E0C ; ===========================================================================
.text$mn:00006E0C
.text$mn:00006E0C ; Segment type: Pure code
.text$mn:00006E0C ; Segment permissions: Read/Execute
.text$mn:00006E0C _text$mn        segment para public 'CODE' use32
.text$mn:00006E0C                 assume cs:_text$mn
.text$mn:00006E0C                 ;org 6E0Ch
.text$mn:00006E0C ; COMDAT (pick any)
.text$mn:00006E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E0C
.text$mn:00006E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E0C
.text$mn:00006E0C ; Attributes: bp-based frame
.text$mn:00006E0C
.text$mn:00006E0C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:00006E0C                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006E0C ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006E0C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006E0C                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00006E0C
.text$mn:00006E0C var_10          = dword ptr -10h
.text$mn:00006E0C var_C           = dword ptr -0Ch
.text$mn:00006E0C var_4           = dword ptr -4
.text$mn:00006E0C
.text$mn:00006E0C                 push    ebp
.text$mn:00006E0D                 mov     ebp, esp
.text$mn:00006E0F                 push    0FFFFFFFFh
.text$mn:00006E11                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006E16                 mov     eax, large fs:0
.text$mn:00006E1C                 push    eax
.text$mn:00006E1D                 push    ecx
.text$mn:00006E1E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E23                 xor     eax, ebp
.text$mn:00006E25                 push    eax
.text$mn:00006E26                 lea     eax, [ebp+var_C]
.text$mn:00006E29                 mov     large fs:0, eax
.text$mn:00006E2F                 mov     [ebp+var_10], ecx
.text$mn:00006E32                 mov     [ebp+var_4], 0
.text$mn:00006E39                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E40                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006E43                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00006E48                 mov     ecx, [ebp+var_C]
.text$mn:00006E4B                 mov     large fs:0, ecx
.text$mn:00006E52                 pop     ecx
.text$mn:00006E53                 mov     esp, ebp
.text$mn:00006E55                 pop     ebp
.text$mn:00006E56                 retn
.text$mn:00006E56 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006E56
.text$mn:00006E56 ; ---------------------------------------------------------------------------
.text$mn:00006E57                 align 4
.text$mn:00006E57 _text$mn        ends
.text$mn:00006E57
.text$x:00006E58 ; ===========================================================================
.text$x:00006E58
.text$x:00006E58 ; Segment type: Pure code
.text$x:00006E58 ; Segment permissions: Read/Execute
.text$x:00006E58 _text$x         segment para public 'CODE' use32
.text$x:00006E58                 assume cs:_text$x
.text$x:00006E58                 ;org 6E58h
.text$x:00006E58 ; COMDAT (pick associative to section at 6E0C)
.text$x:00006E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E58
.text$x:00006E58 ; =============== S U B R O U T I N E =======================================
.text$x:00006E58
.text$x:00006E58
.text$x:00006E58 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006E58                                         ; DATA XREF: .xdata$x:0000DCB8o
.text$x:00006E58                 mov     ecx, [ebp-10h]  ; this
.text$x:00006E5B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006E5B __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00006E5B
.text$x:00006E60
.text$x:00006E60 ; =============== S U B R O U T I N E =======================================
.text$x:00006E60
.text$x:00006E60
.text$x:00006E60 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006E60                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:00006E60
.text$x:00006E60 arg_4           = dword ptr  8
.text$x:00006E60
.text$x:00006E60                 mov     edx, [esp+arg_4]
.text$x:00006E64                 lea     eax, [edx+0Ch]
.text$x:00006E67                 mov     ecx, [edx-8]
.text$x:00006E6A                 xor     ecx, eax
.text$x:00006E6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E71                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00006E76                 jmp     ___CxxFrameHandler3
.text$x:00006E76 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00006E76
.text$x:00006E76 ; ---------------------------------------------------------------------------
.text$x:00006E7B                 align 4
.text$x:00006E7B _text$x         ends
.text$x:00006E7B
.text$mn:00006E7C ; ===========================================================================
.text$mn:00006E7C
.text$mn:00006E7C ; Segment type: Pure code
.text$mn:00006E7C ; Segment permissions: Read/Execute
.text$mn:00006E7C _text$mn        segment para public 'CODE' use32
.text$mn:00006E7C                 assume cs:_text$mn
.text$mn:00006E7C                 ;org 6E7Ch
.text$mn:00006E7C ; COMDAT (pick any)
.text$mn:00006E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E7C
.text$mn:00006E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E7C
.text$mn:00006E7C ; Attributes: bp-based frame
.text$mn:00006E7C
.text$mn:00006E7C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00006E7C                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006E7C ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006E7C                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006E7C                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00006E7C
.text$mn:00006E7C var_10          = dword ptr -10h
.text$mn:00006E7C var_C           = dword ptr -0Ch
.text$mn:00006E7C var_4           = dword ptr -4
.text$mn:00006E7C
.text$mn:00006E7C                 push    ebp
.text$mn:00006E7D                 mov     ebp, esp
.text$mn:00006E7F                 push    0FFFFFFFFh
.text$mn:00006E81                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006E86                 mov     eax, large fs:0
.text$mn:00006E8C                 push    eax
.text$mn:00006E8D                 push    ecx
.text$mn:00006E8E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E93                 xor     eax, ebp
.text$mn:00006E95                 push    eax
.text$mn:00006E96                 lea     eax, [ebp+var_C]
.text$mn:00006E99                 mov     large fs:0, eax
.text$mn:00006E9F                 mov     [ebp+var_10], ecx
.text$mn:00006EA2                 mov     [ebp+var_4], 0
.text$mn:00006EA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006EB0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006EB3                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00006EB8                 mov     ecx, [ebp+var_C]
.text$mn:00006EBB                 mov     large fs:0, ecx
.text$mn:00006EC2                 pop     ecx
.text$mn:00006EC3                 mov     esp, ebp
.text$mn:00006EC5                 pop     ebp
.text$mn:00006EC6                 retn
.text$mn:00006EC6 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006EC6
.text$mn:00006EC6 ; ---------------------------------------------------------------------------
.text$mn:00006EC7                 align 4
.text$mn:00006EC7 _text$mn        ends
.text$mn:00006EC7
.text$x:00006EC8 ; ===========================================================================
.text$x:00006EC8
.text$x:00006EC8 ; Segment type: Pure code
.text$x:00006EC8 ; Segment permissions: Read/Execute
.text$x:00006EC8 _text$x         segment para public 'CODE' use32
.text$x:00006EC8                 assume cs:_text$x
.text$x:00006EC8                 ;org 6EC8h
.text$x:00006EC8 ; COMDAT (pick associative to section at 6E7C)
.text$x:00006EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006EC8
.text$x:00006EC8 ; =============== S U B R O U T I N E =======================================
.text$x:00006EC8
.text$x:00006EC8
.text$x:00006EC8 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006EC8                                         ; DATA XREF: .xdata$x:0000DF20o
.text$x:00006EC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006ECB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006ECB __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00006ECB
.text$x:00006ED0
.text$x:00006ED0 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED0
.text$x:00006ED0
.text$x:00006ED0 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006ED0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00006ED0
.text$x:00006ED0 arg_4           = dword ptr  8
.text$x:00006ED0
.text$x:00006ED0                 mov     edx, [esp+arg_4]
.text$x:00006ED4                 lea     eax, [edx+0Ch]
.text$x:00006ED7                 mov     ecx, [edx-8]
.text$x:00006EDA                 xor     ecx, eax
.text$x:00006EDC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006EE1                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00006EE6                 jmp     ___CxxFrameHandler3
.text$x:00006EE6 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00006EE6
.text$x:00006EE6 ; ---------------------------------------------------------------------------
.text$x:00006EEB                 align 4
.text$x:00006EEB _text$x         ends
.text$x:00006EEB
.text$mn:00006EEC ; ===========================================================================
.text$mn:00006EEC
.text$mn:00006EEC ; Segment type: Pure code
.text$mn:00006EEC ; Segment permissions: Read/Execute
.text$mn:00006EEC _text$mn        segment para public 'CODE' use32
.text$mn:00006EEC                 assume cs:_text$mn
.text$mn:00006EEC                 ;org 6EECh
.text$mn:00006EEC ; COMDAT (pick any)
.text$mn:00006EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EEC
.text$mn:00006EEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EEC
.text$mn:00006EEC ; Attributes: bp-based frame
.text$mn:00006EEC
.text$mn:00006EEC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00006EEC                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006EEC ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006EEC                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00006EEC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00006EEC
.text$mn:00006EEC var_10          = dword ptr -10h
.text$mn:00006EEC var_C           = dword ptr -0Ch
.text$mn:00006EEC var_4           = dword ptr -4
.text$mn:00006EEC
.text$mn:00006EEC                 push    ebp
.text$mn:00006EED                 mov     ebp, esp
.text$mn:00006EEF                 push    0FFFFFFFFh
.text$mn:00006EF1                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006EF6                 mov     eax, large fs:0
.text$mn:00006EFC                 push    eax
.text$mn:00006EFD                 push    ecx
.text$mn:00006EFE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F03                 xor     eax, ebp
.text$mn:00006F05                 push    eax
.text$mn:00006F06                 lea     eax, [ebp+var_C]
.text$mn:00006F09                 mov     large fs:0, eax
.text$mn:00006F0F                 mov     [ebp+var_10], ecx
.text$mn:00006F12                 mov     [ebp+var_4], 0
.text$mn:00006F19                 mov     ecx, [ebp+var_10]
.text$mn:00006F1C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00006F21                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F28                 mov     ecx, [ebp+var_10]
.text$mn:00006F2B                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00006F30                 mov     ecx, [ebp+var_C]
.text$mn:00006F33                 mov     large fs:0, ecx
.text$mn:00006F3A                 pop     ecx
.text$mn:00006F3B                 mov     esp, ebp
.text$mn:00006F3D                 pop     ebp
.text$mn:00006F3E                 retn
.text$mn:00006F3E ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006F3E
.text$mn:00006F3E ; ---------------------------------------------------------------------------
.text$mn:00006F3F                 align 10h
.text$mn:00006F3F _text$mn        ends
.text$mn:00006F3F
.text$x:00006F40 ; ===========================================================================
.text$x:00006F40
.text$x:00006F40 ; Segment type: Pure code
.text$x:00006F40 ; Segment permissions: Read/Execute
.text$x:00006F40 _text$x         segment para public 'CODE' use32
.text$x:00006F40                 assume cs:_text$x
.text$x:00006F40                 ;org 6F40h
.text$x:00006F40 ; COMDAT (pick associative to section at 6EEC)
.text$x:00006F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F40
.text$x:00006F40 ; =============== S U B R O U T I N E =======================================
.text$x:00006F40
.text$x:00006F40
.text$x:00006F40 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006F40                                         ; DATA XREF: .xdata$x:0000CC20o
.text$x:00006F40                 mov     ecx, [ebp-10h]
.text$x:00006F43                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00006F43 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006F43
.text$x:00006F48
.text$x:00006F48 ; =============== S U B R O U T I N E =======================================
.text$x:00006F48
.text$x:00006F48
.text$x:00006F48 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006F48                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00006F48
.text$x:00006F48 arg_4           = dword ptr  8
.text$x:00006F48
.text$x:00006F48                 mov     edx, [esp+arg_4]
.text$x:00006F4C                 lea     eax, [edx+0Ch]
.text$x:00006F4F                 mov     ecx, [edx-8]
.text$x:00006F52                 xor     ecx, eax
.text$x:00006F54                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F59                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00006F5E                 jmp     ___CxxFrameHandler3
.text$x:00006F5E __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00006F5E
.text$x:00006F5E ; ---------------------------------------------------------------------------
.text$x:00006F63                 align 4
.text$x:00006F63 _text$x         ends
.text$x:00006F63
.text$mn:00006F64 ; ===========================================================================
.text$mn:00006F64
.text$mn:00006F64 ; Segment type: Pure code
.text$mn:00006F64 ; Segment permissions: Read/Execute
.text$mn:00006F64 _text$mn        segment para public 'CODE' use32
.text$mn:00006F64                 assume cs:_text$mn
.text$mn:00006F64                 ;org 6F64h
.text$mn:00006F64 ; COMDAT (pick any)
.text$mn:00006F64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F64
.text$mn:00006F64 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F64
.text$mn:00006F64 ; Attributes: bp-based frame
.text$mn:00006F64
.text$mn:00006F64 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00006F64                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006F64 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006F64                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006F64                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j ...
.text$mn:00006F64
.text$mn:00006F64 var_10          = dword ptr -10h
.text$mn:00006F64 var_C           = dword ptr -0Ch
.text$mn:00006F64 var_4           = dword ptr -4
.text$mn:00006F64
.text$mn:00006F64                 push    ebp
.text$mn:00006F65                 mov     ebp, esp
.text$mn:00006F67                 push    0FFFFFFFFh
.text$mn:00006F69                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006F6E                 mov     eax, large fs:0
.text$mn:00006F74                 push    eax
.text$mn:00006F75                 push    ecx
.text$mn:00006F76                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F7B                 xor     eax, ebp
.text$mn:00006F7D                 push    eax
.text$mn:00006F7E                 lea     eax, [ebp+var_C]
.text$mn:00006F81                 mov     large fs:0, eax
.text$mn:00006F87                 mov     [ebp+var_10], ecx
.text$mn:00006F8A                 mov     [ebp+var_4], 0
.text$mn:00006F91                 mov     ecx, [ebp+var_10]
.text$mn:00006F94                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00006F99                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006FA0                 mov     ecx, [ebp+var_10]
.text$mn:00006FA3                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00006FA8                 mov     ecx, [ebp+var_C]
.text$mn:00006FAB                 mov     large fs:0, ecx
.text$mn:00006FB2                 pop     ecx
.text$mn:00006FB3                 mov     esp, ebp
.text$mn:00006FB5                 pop     ebp
.text$mn:00006FB6                 retn
.text$mn:00006FB6 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006FB6
.text$mn:00006FB6 ; ---------------------------------------------------------------------------
.text$mn:00006FB7                 align 4
.text$mn:00006FB7 _text$mn        ends
.text$mn:00006FB7
.text$x:00006FB8 ; ===========================================================================
.text$x:00006FB8
.text$x:00006FB8 ; Segment type: Pure code
.text$x:00006FB8 ; Segment permissions: Read/Execute
.text$x:00006FB8 _text$x         segment para public 'CODE' use32
.text$x:00006FB8                 assume cs:_text$x
.text$x:00006FB8                 ;org 6FB8h
.text$x:00006FB8 ; COMDAT (pick associative to section at 6F64)
.text$x:00006FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FB8
.text$x:00006FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB8
.text$x:00006FB8
.text$x:00006FB8 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006FB8                                         ; DATA XREF: .xdata$x:0000CF40o
.text$x:00006FB8                 mov     ecx, [ebp-10h]
.text$x:00006FBB                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00006FBB __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006FBB
.text$x:00006FC0
.text$x:00006FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC0
.text$x:00006FC0
.text$x:00006FC0 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006FC0                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00006FC0
.text$x:00006FC0 arg_4           = dword ptr  8
.text$x:00006FC0
.text$x:00006FC0                 mov     edx, [esp+arg_4]
.text$x:00006FC4                 lea     eax, [edx+0Ch]
.text$x:00006FC7                 mov     ecx, [edx-8]
.text$x:00006FCA                 xor     ecx, eax
.text$x:00006FCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FD1                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00006FD6                 jmp     ___CxxFrameHandler3
.text$x:00006FD6 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00006FD6
.text$x:00006FD6 ; ---------------------------------------------------------------------------
.text$x:00006FDB                 align 4
.text$x:00006FDB _text$x         ends
.text$x:00006FDB
.text$mn:00006FDC ; ===========================================================================
.text$mn:00006FDC
.text$mn:00006FDC ; Segment type: Pure code
.text$mn:00006FDC ; Segment permissions: Read/Execute
.text$mn:00006FDC _text$mn        segment para public 'CODE' use32
.text$mn:00006FDC                 assume cs:_text$mn
.text$mn:00006FDC                 ;org 6FDCh
.text$mn:00006FDC ; COMDAT (pick any)
.text$mn:00006FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FDC
.text$mn:00006FDC ; =============== S U B R O U T I N E =======================================
.text$mn:00006FDC
.text$mn:00006FDC ; Attributes: bp-based frame
.text$mn:00006FDC
.text$mn:00006FDC ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:00006FDC                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006FDC ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006FDC                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:00006FDC                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:00006FDC
.text$mn:00006FDC var_10          = dword ptr -10h
.text$mn:00006FDC var_C           = dword ptr -0Ch
.text$mn:00006FDC var_4           = dword ptr -4
.text$mn:00006FDC
.text$mn:00006FDC                 push    ebp
.text$mn:00006FDD                 mov     ebp, esp
.text$mn:00006FDF                 push    0FFFFFFFFh
.text$mn:00006FE1                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006FE6                 mov     eax, large fs:0
.text$mn:00006FEC                 push    eax
.text$mn:00006FED                 push    ecx
.text$mn:00006FEE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006FF3                 xor     eax, ebp
.text$mn:00006FF5                 push    eax
.text$mn:00006FF6                 lea     eax, [ebp+var_C]
.text$mn:00006FF9                 mov     large fs:0, eax
.text$mn:00006FFF                 mov     [ebp+var_10], ecx
.text$mn:00007002                 mov     [ebp+var_4], 0
.text$mn:00007009                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007010                 mov     ecx, [ebp+var_10]
.text$mn:00007013                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00007018                 mov     ecx, [ebp+var_C]
.text$mn:0000701B                 mov     large fs:0, ecx
.text$mn:00007022                 pop     ecx
.text$mn:00007023                 mov     esp, ebp
.text$mn:00007025                 pop     ebp
.text$mn:00007026                 retn
.text$mn:00007026 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007026
.text$mn:00007026 ; ---------------------------------------------------------------------------
.text$mn:00007027                 align 4
.text$mn:00007027 _text$mn        ends
.text$mn:00007027
.text$x:00007028 ; ===========================================================================
.text$x:00007028
.text$x:00007028 ; Segment type: Pure code
.text$x:00007028 ; Segment permissions: Read/Execute
.text$x:00007028 _text$x         segment para public 'CODE' use32
.text$x:00007028                 assume cs:_text$x
.text$x:00007028                 ;org 7028h
.text$x:00007028 ; COMDAT (pick associative to section at 6FDC)
.text$x:00007028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007028
.text$x:00007028 ; =============== S U B R O U T I N E =======================================
.text$x:00007028
.text$x:00007028
.text$x:00007028 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007028                                         ; DATA XREF: .xdata$x:0000DFA4o
.text$x:00007028                 mov     ecx, [ebp-10h]
.text$x:0000702B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:0000702B __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000702B
.text$x:00007030
.text$x:00007030 ; =============== S U B R O U T I N E =======================================
.text$x:00007030
.text$x:00007030
.text$x:00007030 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007030                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00007030
.text$x:00007030 arg_4           = dword ptr  8
.text$x:00007030
.text$x:00007030                 mov     edx, [esp+arg_4]
.text$x:00007034                 lea     eax, [edx+0Ch]
.text$x:00007037                 mov     ecx, [edx-8]
.text$x:0000703A                 xor     ecx, eax
.text$x:0000703C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007041                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00007046                 jmp     ___CxxFrameHandler3
.text$x:00007046 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00007046
.text$x:00007046 ; ---------------------------------------------------------------------------
.text$x:0000704B                 align 4
.text$x:0000704B _text$x         ends
.text$x:0000704B
.text$mn:0000704C ; ===========================================================================
.text$mn:0000704C
.text$mn:0000704C ; Segment type: Pure code
.text$mn:0000704C ; Segment permissions: Read/Execute
.text$mn:0000704C _text$mn        segment para public 'CODE' use32
.text$mn:0000704C                 assume cs:_text$mn
.text$mn:0000704C                 ;org 704Ch
.text$mn:0000704C ; COMDAT (pick any)
.text$mn:0000704C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000704C
.text$mn:0000704C ; =============== S U B R O U T I N E =======================================
.text$mn:0000704C
.text$mn:0000704C ; Attributes: bp-based frame
.text$mn:0000704C
.text$mn:0000704C ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:0000704C                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000704C ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000704C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:0000704C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:0000704C
.text$mn:0000704C var_10          = dword ptr -10h
.text$mn:0000704C var_C           = dword ptr -0Ch
.text$mn:0000704C var_4           = dword ptr -4
.text$mn:0000704C
.text$mn:0000704C                 push    ebp
.text$mn:0000704D                 mov     ebp, esp
.text$mn:0000704F                 push    0FFFFFFFFh
.text$mn:00007051                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00007056                 mov     eax, large fs:0
.text$mn:0000705C                 push    eax
.text$mn:0000705D                 push    ecx
.text$mn:0000705E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007063                 xor     eax, ebp
.text$mn:00007065                 push    eax
.text$mn:00007066                 lea     eax, [ebp+var_C]
.text$mn:00007069                 mov     large fs:0, eax
.text$mn:0000706F                 mov     [ebp+var_10], ecx
.text$mn:00007072                 mov     [ebp+var_4], 0
.text$mn:00007079                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007080                 mov     ecx, [ebp+var_10]
.text$mn:00007083                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00007088                 mov     ecx, [ebp+var_C]
.text$mn:0000708B                 mov     large fs:0, ecx
.text$mn:00007092                 pop     ecx
.text$mn:00007093                 mov     esp, ebp
.text$mn:00007095                 pop     ebp
.text$mn:00007096                 retn
.text$mn:00007096 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007096
.text$mn:00007096 ; ---------------------------------------------------------------------------
.text$mn:00007097                 align 4
.text$mn:00007097 _text$mn        ends
.text$mn:00007097
.text$x:00007098 ; ===========================================================================
.text$x:00007098
.text$x:00007098 ; Segment type: Pure code
.text$x:00007098 ; Segment permissions: Read/Execute
.text$x:00007098 _text$x         segment para public 'CODE' use32
.text$x:00007098                 assume cs:_text$x
.text$x:00007098                 ;org 7098h
.text$x:00007098 ; COMDAT (pick associative to section at 704C)
.text$x:00007098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007098
.text$x:00007098 ; =============== S U B R O U T I N E =======================================
.text$x:00007098
.text$x:00007098
.text$x:00007098 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007098                                         ; DATA XREF: .xdata$x:0000E054o
.text$x:00007098                 mov     ecx, [ebp-10h]
.text$x:0000709B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000709B __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000709B
.text$x:000070A0
.text$x:000070A0 ; =============== S U B R O U T I N E =======================================
.text$x:000070A0
.text$x:000070A0
.text$x:000070A0 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000070A0                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000070A0
.text$x:000070A0 arg_4           = dword ptr  8
.text$x:000070A0
.text$x:000070A0                 mov     edx, [esp+arg_4]
.text$x:000070A4                 lea     eax, [edx+0Ch]
.text$x:000070A7                 mov     ecx, [edx-8]
.text$x:000070AA                 xor     ecx, eax
.text$x:000070AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000070B1                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000070B6                 jmp     ___CxxFrameHandler3
.text$x:000070B6 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000070B6
.text$x:000070B6 ; ---------------------------------------------------------------------------
.text$x:000070BB                 align 4
.text$x:000070BB _text$x         ends
.text$x:000070BB
.text$mn:000070BC ; ===========================================================================
.text$mn:000070BC
.text$mn:000070BC ; Segment type: Pure code
.text$mn:000070BC ; Segment permissions: Read/Execute
.text$mn:000070BC _text$mn        segment para public 'CODE' use32
.text$mn:000070BC                 assume cs:_text$mn
.text$mn:000070BC                 ;org 70BCh
.text$mn:000070BC ; COMDAT (pick any)
.text$mn:000070BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070BC
.text$mn:000070BC ; =============== S U B R O U T I N E =======================================
.text$mn:000070BC
.text$mn:000070BC ; Attributes: bp-based frame
.text$mn:000070BC
.text$mn:000070BC ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000070BC                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000070BC ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000070BC                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:000070BC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:000070BC
.text$mn:000070BC var_10          = dword ptr -10h
.text$mn:000070BC var_C           = dword ptr -0Ch
.text$mn:000070BC var_4           = dword ptr -4
.text$mn:000070BC
.text$mn:000070BC                 push    ebp
.text$mn:000070BD                 mov     ebp, esp
.text$mn:000070BF                 push    0FFFFFFFFh
.text$mn:000070C1                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000070C6                 mov     eax, large fs:0
.text$mn:000070CC                 push    eax
.text$mn:000070CD                 push    ecx
.text$mn:000070CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000070D3                 xor     eax, ebp
.text$mn:000070D5                 push    eax
.text$mn:000070D6                 lea     eax, [ebp+var_C]
.text$mn:000070D9                 mov     large fs:0, eax
.text$mn:000070DF                 mov     [ebp+var_10], ecx
.text$mn:000070E2                 mov     [ebp+var_4], 0
.text$mn:000070E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000070F0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000070F3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000070F8                 mov     ecx, [ebp+var_C]
.text$mn:000070FB                 mov     large fs:0, ecx
.text$mn:00007102                 pop     ecx
.text$mn:00007103                 mov     esp, ebp
.text$mn:00007105                 pop     ebp
.text$mn:00007106                 retn
.text$mn:00007106 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00007106
.text$mn:00007106 ; ---------------------------------------------------------------------------
.text$mn:00007107                 align 4
.text$mn:00007107 _text$mn        ends
.text$mn:00007107
.text$x:00007108 ; ===========================================================================
.text$x:00007108
.text$x:00007108 ; Segment type: Pure code
.text$x:00007108 ; Segment permissions: Read/Execute
.text$x:00007108 _text$x         segment para public 'CODE' use32
.text$x:00007108                 assume cs:_text$x
.text$x:00007108                 ;org 7108h
.text$x:00007108 ; COMDAT (pick associative to section at 70BC)
.text$x:00007108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007108
.text$x:00007108 ; =============== S U B R O U T I N E =======================================
.text$x:00007108
.text$x:00007108
.text$x:00007108 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00007108                                         ; DATA XREF: .xdata$x:0000CBC8o
.text$x:00007108                 mov     ecx, [ebp-10h]  ; this
.text$x:0000710B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000710B __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000710B
.text$x:00007110
.text$x:00007110 ; =============== S U B R O U T I N E =======================================
.text$x:00007110
.text$x:00007110
.text$x:00007110 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00007110                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00007110
.text$x:00007110 arg_4           = dword ptr  8
.text$x:00007110
.text$x:00007110                 mov     edx, [esp+arg_4]
.text$x:00007114                 lea     eax, [edx+0Ch]
.text$x:00007117                 mov     ecx, [edx-8]
.text$x:0000711A                 xor     ecx, eax
.text$x:0000711C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007121                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00007126                 jmp     ___CxxFrameHandler3
.text$x:00007126 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00007126
.text$x:00007126 ; ---------------------------------------------------------------------------
.text$x:0000712B                 align 4
.text$x:0000712B _text$x         ends
.text$x:0000712B
.text$mn:0000712C ; ===========================================================================
.text$mn:0000712C
.text$mn:0000712C ; Segment type: Pure code
.text$mn:0000712C ; Segment permissions: Read/Execute
.text$mn:0000712C _text$mn        segment para public 'CODE' use32
.text$mn:0000712C                 assume cs:_text$mn
.text$mn:0000712C                 ;org 712Ch
.text$mn:0000712C ; COMDAT (pick any)
.text$mn:0000712C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000712C
.text$mn:0000712C ; =============== S U B R O U T I N E =======================================
.text$mn:0000712C
.text$mn:0000712C ; Attributes: bp-based frame
.text$mn:0000712C
.text$mn:0000712C ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:0000712C                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000712C ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:0000712C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:0000712C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:0000712C
.text$mn:0000712C var_10          = dword ptr -10h
.text$mn:0000712C var_C           = dword ptr -0Ch
.text$mn:0000712C var_4           = dword ptr -4
.text$mn:0000712C
.text$mn:0000712C                 push    ebp
.text$mn:0000712D                 mov     ebp, esp
.text$mn:0000712F                 push    0FFFFFFFFh
.text$mn:00007131                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00007136                 mov     eax, large fs:0
.text$mn:0000713C                 push    eax
.text$mn:0000713D                 push    ecx
.text$mn:0000713E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007143                 xor     eax, ebp
.text$mn:00007145                 push    eax
.text$mn:00007146                 lea     eax, [ebp+var_C]
.text$mn:00007149                 mov     large fs:0, eax
.text$mn:0000714F                 mov     [ebp+var_10], ecx
.text$mn:00007152                 mov     [ebp+var_4], 0
.text$mn:00007159                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007160                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007163                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00007168                 mov     ecx, [ebp+var_C]
.text$mn:0000716B                 mov     large fs:0, ecx
.text$mn:00007172                 pop     ecx
.text$mn:00007173                 mov     esp, ebp
.text$mn:00007175                 pop     ebp
.text$mn:00007176                 retn
.text$mn:00007176 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00007176
.text$mn:00007176 ; ---------------------------------------------------------------------------
.text$mn:00007177                 align 4
.text$mn:00007177 _text$mn        ends
.text$mn:00007177
.text$x:00007178 ; ===========================================================================
.text$x:00007178
.text$x:00007178 ; Segment type: Pure code
.text$x:00007178 ; Segment permissions: Read/Execute
.text$x:00007178 _text$x         segment para public 'CODE' use32
.text$x:00007178                 assume cs:_text$x
.text$x:00007178                 ;org 7178h
.text$x:00007178 ; COMDAT (pick associative to section at 712C)
.text$x:00007178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007178
.text$x:00007178 ; =============== S U B R O U T I N E =======================================
.text$x:00007178
.text$x:00007178
.text$x:00007178 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00007178                                         ; DATA XREF: .xdata$x:0000CEE8o
.text$x:00007178                 mov     ecx, [ebp-10h]  ; this
.text$x:0000717B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000717B __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000717B
.text$x:00007180
.text$x:00007180 ; =============== S U B R O U T I N E =======================================
.text$x:00007180
.text$x:00007180
.text$x:00007180 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00007180                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00007180
.text$x:00007180 arg_4           = dword ptr  8
.text$x:00007180
.text$x:00007180                 mov     edx, [esp+arg_4]
.text$x:00007184                 lea     eax, [edx+0Ch]
.text$x:00007187                 mov     ecx, [edx-8]
.text$x:0000718A                 xor     ecx, eax
.text$x:0000718C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007191                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00007196                 jmp     ___CxxFrameHandler3
.text$x:00007196 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00007196
.text$x:00007196 ; ---------------------------------------------------------------------------
.text$x:0000719B                 align 4
.text$x:0000719B _text$x         ends
.text$x:0000719B
.text$mn:0000719C ; ===========================================================================
.text$mn:0000719C
.text$mn:0000719C ; Segment type: Pure code
.text$mn:0000719C ; Segment permissions: Read/Execute
.text$mn:0000719C _text$mn        segment para public 'CODE' use32
.text$mn:0000719C                 assume cs:_text$mn
.text$mn:0000719C                 ;org 719Ch
.text$mn:0000719C ; COMDAT (pick any)
.text$mn:0000719C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000719C
.text$mn:0000719C ; =============== S U B R O U T I N E =======================================
.text$mn:0000719C
.text$mn:0000719C ; Attributes: bp-based frame
.text$mn:0000719C
.text$mn:0000719C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::~_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>(void)
.text$mn:0000719C                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000719C ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000719C                                         ; CODE XREF: __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$2+3j
.text$mn:0000719C                                         ; __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0+3j ...
.text$mn:0000719C
.text$mn:0000719C var_10          = dword ptr -10h
.text$mn:0000719C var_C           = dword ptr -0Ch
.text$mn:0000719C var_4           = dword ptr -4
.text$mn:0000719C
.text$mn:0000719C                 push    ebp
.text$mn:0000719D                 mov     ebp, esp
.text$mn:0000719F                 push    0FFFFFFFFh
.text$mn:000071A1                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$mn:000071A6                 mov     eax, large fs:0
.text$mn:000071AC                 push    eax
.text$mn:000071AD                 push    ecx
.text$mn:000071AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000071B3                 xor     eax, ebp
.text$mn:000071B5                 push    eax
.text$mn:000071B6                 lea     eax, [ebp+var_C]
.text$mn:000071B9                 mov     large fs:0, eax
.text$mn:000071BF                 mov     [ebp+var_10], ecx
.text$mn:000071C2                 mov     [ebp+var_4], 0
.text$mn:000071C9                 mov     ecx, [ebp+var_10]
.text$mn:000071CC                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Free_proxy(void)
.text$mn:000071D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000071D8                 mov     ecx, [ebp+var_10]
.text$mn:000071DB                 call    ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TreeStateNode>>::~_Vector_val<std::_Simple_types<TreeStateNode>>(void)
.text$mn:000071E0                 mov     ecx, [ebp+var_C]
.text$mn:000071E3                 mov     large fs:0, ecx
.text$mn:000071EA                 pop     ecx
.text$mn:000071EB                 mov     esp, ebp
.text$mn:000071ED                 pop     ebp
.text$mn:000071EE                 retn
.text$mn:000071EE ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:000071EE
.text$mn:000071EE ; ---------------------------------------------------------------------------
.text$mn:000071EF                 align 10h
.text$mn:000071EF _text$mn        ends
.text$mn:000071EF
.text$x:000071F0 ; ===========================================================================
.text$x:000071F0
.text$x:000071F0 ; Segment type: Pure code
.text$x:000071F0 ; Segment permissions: Read/Execute
.text$x:000071F0 _text$x         segment para public 'CODE' use32
.text$x:000071F0                 assume cs:_text$x
.text$x:000071F0                 ;org 71F0h
.text$x:000071F0 ; COMDAT (pick associative to section at 719C)
.text$x:000071F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000071F0
.text$x:000071F0 ; =============== S U B R O U T I N E =======================================
.text$x:000071F0
.text$x:000071F0
.text$x:000071F0 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000071F0                                         ; DATA XREF: .xdata$x:0000D5E0o
.text$x:000071F0                 mov     ecx, [ebp-10h]
.text$x:000071F3                 jmp     ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TreeStateNode>>::~_Vector_val<std::_Simple_types<TreeStateNode>>(void)
.text$x:000071F3 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000071F3
.text$x:000071F8
.text$x:000071F8 ; =============== S U B R O U T I N E =======================================
.text$x:000071F8
.text$x:000071F8
.text$x:000071F8 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000071F8                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)+5o
.text$x:000071F8
.text$x:000071F8 arg_4           = dword ptr  8
.text$x:000071F8
.text$x:000071F8                 mov     edx, [esp+arg_4]
.text$x:000071FC                 lea     eax, [edx+0Ch]
.text$x:000071FF                 mov     ecx, [edx-8]
.text$x:00007202                 xor     ecx, eax
.text$x:00007204                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007209                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$x:0000720E                 jmp     ___CxxFrameHandler3
.text$x:0000720E __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000720E
.text$x:0000720E ; ---------------------------------------------------------------------------
.text$x:00007213                 align 4
.text$x:00007213 _text$x         ends
.text$x:00007213
.text$mn:00007214 ; ===========================================================================
.text$mn:00007214
.text$mn:00007214 ; Segment type: Pure code
.text$mn:00007214 ; Segment permissions: Read/Execute
.text$mn:00007214 _text$mn        segment para public 'CODE' use32
.text$mn:00007214                 assume cs:_text$mn
.text$mn:00007214                 ;org 7214h
.text$mn:00007214 ; COMDAT (pick any)
.text$mn:00007214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007214
.text$mn:00007214 ; =============== S U B R O U T I N E =======================================
.text$mn:00007214
.text$mn:00007214 ; Attributes: bp-based frame
.text$mn:00007214
.text$mn:00007214 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::~_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>(void)
.text$mn:00007214                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ
.text$mn:00007214 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007214                                         ; CODE XREF: __unwindfunclet$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0+3j
.text$mn:00007214                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::~vector<foundInfo,std::allocator<foundInfo>>(void)+3Fp ...
.text$mn:00007214
.text$mn:00007214 var_10          = dword ptr -10h
.text$mn:00007214 var_C           = dword ptr -0Ch
.text$mn:00007214 var_4           = dword ptr -4
.text$mn:00007214
.text$mn:00007214                 push    ebp
.text$mn:00007215                 mov     ebp, esp
.text$mn:00007217                 push    0FFFFFFFFh
.text$mn:00007219                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000721E                 mov     eax, large fs:0
.text$mn:00007224                 push    eax
.text$mn:00007225                 push    ecx
.text$mn:00007226                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000722B                 xor     eax, ebp
.text$mn:0000722D                 push    eax
.text$mn:0000722E                 lea     eax, [ebp+var_C]
.text$mn:00007231                 mov     large fs:0, eax
.text$mn:00007237                 mov     [ebp+var_10], ecx
.text$mn:0000723A                 mov     [ebp+var_4], 0
.text$mn:00007241                 mov     ecx, [ebp+var_10]
.text$mn:00007244                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Free_proxy(void)
.text$mn:00007249                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007250                 mov     ecx, [ebp+var_10]
.text$mn:00007253                 call    ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<foundInfo>>::~_Vector_val<std::_Simple_types<foundInfo>>(void)
.text$mn:00007258                 mov     ecx, [ebp+var_C]
.text$mn:0000725B                 mov     large fs:0, ecx
.text$mn:00007262                 pop     ecx
.text$mn:00007263                 mov     esp, ebp
.text$mn:00007265                 pop     ebp
.text$mn:00007266                 retn
.text$mn:00007266 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007266
.text$mn:00007266 ; ---------------------------------------------------------------------------
.text$mn:00007267                 align 4
.text$mn:00007267 _text$mn        ends
.text$mn:00007267
.text$x:00007268 ; ===========================================================================
.text$x:00007268
.text$x:00007268 ; Segment type: Pure code
.text$x:00007268 ; Segment permissions: Read/Execute
.text$x:00007268 _text$x         segment para public 'CODE' use32
.text$x:00007268                 assume cs:_text$x
.text$x:00007268                 ;org 7268h
.text$x:00007268 ; COMDAT (pick associative to section at 7214)
.text$x:00007268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007268
.text$x:00007268 ; =============== S U B R O U T I N E =======================================
.text$x:00007268
.text$x:00007268
.text$x:00007268 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007268                                         ; DATA XREF: .xdata$x:0000DE70o
.text$x:00007268                 mov     ecx, [ebp-10h]
.text$x:0000726B                 jmp     ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<foundInfo>>::~_Vector_val<std::_Simple_types<foundInfo>>(void)
.text$x:0000726B __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000726B
.text$x:00007270
.text$x:00007270 ; =============== S U B R O U T I N E =======================================
.text$x:00007270
.text$x:00007270
.text$x:00007270 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007270                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)+5o
.text$x:00007270
.text$x:00007270 arg_4           = dword ptr  8
.text$x:00007270
.text$x:00007270                 mov     edx, [esp+arg_4]
.text$x:00007274                 lea     eax, [edx+0Ch]
.text$x:00007277                 mov     ecx, [edx-8]
.text$x:0000727A                 xor     ecx, eax
.text$x:0000727C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007281                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ
.text$x:00007286                 jmp     ___CxxFrameHandler3
.text$x:00007286 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00007286
.text$x:00007286 ; ---------------------------------------------------------------------------
.text$x:0000728B                 align 4
.text$x:0000728B _text$x         ends
.text$x:0000728B
.text$mn:0000728C ; ===========================================================================
.text$mn:0000728C
.text$mn:0000728C ; Segment type: Pure code
.text$mn:0000728C ; Segment permissions: Read/Execute
.text$mn:0000728C _text$mn        segment para public 'CODE' use32
.text$mn:0000728C                 assume cs:_text$mn
.text$mn:0000728C                 ;org 728Ch
.text$mn:0000728C ; COMDAT (pick any)
.text$mn:0000728C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000728C
.text$mn:0000728C ; =============== S U B R O U T I N E =======================================
.text$mn:0000728C
.text$mn:0000728C ; Attributes: bp-based frame
.text$mn:0000728C
.text$mn:0000728C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:0000728C                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:0000728C ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:0000728C                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2+3j
.text$mn:0000728C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+3Fp ...
.text$mn:0000728C
.text$mn:0000728C var_10          = dword ptr -10h
.text$mn:0000728C var_C           = dword ptr -0Ch
.text$mn:0000728C var_4           = dword ptr -4
.text$mn:0000728C
.text$mn:0000728C                 push    ebp
.text$mn:0000728D                 mov     ebp, esp
.text$mn:0000728F                 push    0FFFFFFFFh
.text$mn:00007291                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00007296                 mov     eax, large fs:0
.text$mn:0000729C                 push    eax
.text$mn:0000729D                 push    ecx
.text$mn:0000729E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072A3                 xor     eax, ebp
.text$mn:000072A5                 push    eax
.text$mn:000072A6                 lea     eax, [ebp+var_C]
.text$mn:000072A9                 mov     large fs:0, eax
.text$mn:000072AF                 mov     [ebp+var_10], ecx
.text$mn:000072B2                 mov     [ebp+var_4], 0
.text$mn:000072B9                 mov     ecx, [ebp+var_10]
.text$mn:000072BC                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:000072C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000072C8                 mov     ecx, [ebp+var_10]
.text$mn:000072CB                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000072D0                 mov     ecx, [ebp+var_C]
.text$mn:000072D3                 mov     large fs:0, ecx
.text$mn:000072DA                 pop     ecx
.text$mn:000072DB                 mov     esp, ebp
.text$mn:000072DD                 pop     ebp
.text$mn:000072DE                 retn
.text$mn:000072DE ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:000072DE
.text$mn:000072DE ; ---------------------------------------------------------------------------
.text$mn:000072DF                 align 10h
.text$mn:000072DF _text$mn        ends
.text$mn:000072DF
.text$x:000072E0 ; ===========================================================================
.text$x:000072E0
.text$x:000072E0 ; Segment type: Pure code
.text$x:000072E0 ; Segment permissions: Read/Execute
.text$x:000072E0 _text$x         segment para public 'CODE' use32
.text$x:000072E0                 assume cs:_text$x
.text$x:000072E0                 ;org 72E0h
.text$x:000072E0 ; COMDAT (pick associative to section at 728C)
.text$x:000072E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000072E0
.text$x:000072E0 ; =============== S U B R O U T I N E =======================================
.text$x:000072E0
.text$x:000072E0
.text$x:000072E0 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:000072E0                                         ; DATA XREF: .xdata$x:0000D2E0o
.text$x:000072E0                 mov     ecx, [ebp-10h]
.text$x:000072E3                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000072E3 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:000072E3
.text$x:000072E8
.text$x:000072E8 ; =============== S U B R O U T I N E =======================================
.text$x:000072E8
.text$x:000072E8
.text$x:000072E8 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:000072E8                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000072E8
.text$x:000072E8 arg_4           = dword ptr  8
.text$x:000072E8
.text$x:000072E8                 mov     edx, [esp+arg_4]
.text$x:000072EC                 lea     eax, [edx+0Ch]
.text$x:000072EF                 mov     ecx, [edx-8]
.text$x:000072F2                 xor     ecx, eax
.text$x:000072F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072F9                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:000072FE                 jmp     ___CxxFrameHandler3
.text$x:000072FE __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:000072FE
.text$x:000072FE ; ---------------------------------------------------------------------------
.text$x:00007303                 align 4
.text$x:00007303 _text$x         ends
.text$x:00007303
.text$mn:00007304 ; ===========================================================================
.text$mn:00007304
.text$mn:00007304 ; Segment type: Pure code
.text$mn:00007304 ; Segment permissions: Read/Execute
.text$mn:00007304 _text$mn        segment para public 'CODE' use32
.text$mn:00007304                 assume cs:_text$mn
.text$mn:00007304                 ;org 7304h
.text$mn:00007304 ; COMDAT (pick any)
.text$mn:00007304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007304
.text$mn:00007304 ; =============== S U B R O U T I N E =======================================
.text$mn:00007304
.text$mn:00007304 ; Attributes: bp-based frame
.text$mn:00007304
.text$mn:00007304 ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>(void)
.text$mn:00007304                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$mn:00007304 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007304                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+9Bp
.text$mn:00007304                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+AAp ...
.text$mn:00007304
.text$mn:00007304 var_10          = dword ptr -10h
.text$mn:00007304 var_C           = dword ptr -0Ch
.text$mn:00007304 var_4           = dword ptr -4
.text$mn:00007304
.text$mn:00007304                 push    ebp
.text$mn:00007305                 mov     ebp, esp
.text$mn:00007307                 push    0FFFFFFFFh
.text$mn:00007309                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000730E                 mov     eax, large fs:0
.text$mn:00007314                 push    eax
.text$mn:00007315                 push    ecx
.text$mn:00007316                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000731B                 xor     eax, ebp
.text$mn:0000731D                 push    eax
.text$mn:0000731E                 lea     eax, [ebp+var_C]
.text$mn:00007321                 mov     large fs:0, eax
.text$mn:00007327                 mov     [ebp+var_10], ecx
.text$mn:0000732A                 mov     [ebp+var_4], 0
.text$mn:00007331                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007338                 mov     ecx, [ebp+var_10]
.text$mn:0000733B                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)
.text$mn:00007340                 mov     ecx, [ebp+var_C]
.text$mn:00007343                 mov     large fs:0, ecx
.text$mn:0000734A                 pop     ecx
.text$mn:0000734B                 mov     esp, ebp
.text$mn:0000734D                 pop     ebp
.text$mn:0000734E                 retn
.text$mn:0000734E ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000734E
.text$mn:0000734E ; ---------------------------------------------------------------------------
.text$mn:0000734F                 align 10h
.text$mn:0000734F _text$mn        ends
.text$mn:0000734F
.text$x:00007350 ; ===========================================================================
.text$x:00007350
.text$x:00007350 ; Segment type: Pure code
.text$x:00007350 ; Segment permissions: Read/Execute
.text$x:00007350 _text$x         segment para public 'CODE' use32
.text$x:00007350                 assume cs:_text$x
.text$x:00007350                 ;org 7350h
.text$x:00007350 ; COMDAT (pick associative to section at 7304)
.text$x:00007350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007350
.text$x:00007350 ; =============== S U B R O U T I N E =======================================
.text$x:00007350
.text$x:00007350
.text$x:00007350 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007350                                         ; DATA XREF: .xdata$x:0000E214o
.text$x:00007350                 mov     ecx, [ebp-10h]
.text$x:00007353                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,TreeStateNode,int,TreeStateNode const *,TreeStateNode const &,std::_Iterator_base12>(void)
.text$x:00007353 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007353
.text$x:00007358
.text$x:00007358 ; =============== S U B R O U T I N E =======================================
.text$x:00007358
.text$x:00007358
.text$x:00007358 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007358                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)+5o
.text$x:00007358
.text$x:00007358 arg_4           = dword ptr  8
.text$x:00007358
.text$x:00007358                 mov     edx, [esp+arg_4]
.text$x:0000735C                 lea     eax, [edx+0Ch]
.text$x:0000735F                 mov     ecx, [edx-8]
.text$x:00007362                 xor     ecx, eax
.text$x:00007364                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007369                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.text$x:0000736E                 jmp     ___CxxFrameHandler3
.text$x:0000736E __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000736E
.text$x:0000736E ; ---------------------------------------------------------------------------
.text$x:00007373                 align 4
.text$x:00007373 _text$x         ends
.text$x:00007373
.text$mn:00007374 ; ===========================================================================
.text$mn:00007374
.text$mn:00007374 ; Segment type: Pure code
.text$mn:00007374 ; Segment permissions: Read/Execute
.text$mn:00007374 _text$mn        segment para public 'CODE' use32
.text$mn:00007374                 assume cs:_text$mn
.text$mn:00007374                 ;org 7374h
.text$mn:00007374 ; COMDAT (pick any)
.text$mn:00007374                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007374
.text$mn:00007374 ; =============== S U B R O U T I N E =======================================
.text$mn:00007374
.text$mn:00007374 ; Attributes: bp-based frame
.text$mn:00007374
.text$mn:00007374 ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00007374                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00007374 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007374                                         ; CODE XREF: __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$3+6j
.text$mn:00007374                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+9Bp ...
.text$mn:00007374
.text$mn:00007374 var_10          = dword ptr -10h
.text$mn:00007374 var_C           = dword ptr -0Ch
.text$mn:00007374 var_4           = dword ptr -4
.text$mn:00007374
.text$mn:00007374                 push    ebp
.text$mn:00007375                 mov     ebp, esp
.text$mn:00007377                 push    0FFFFFFFFh
.text$mn:00007379                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000737E                 mov     eax, large fs:0
.text$mn:00007384                 push    eax
.text$mn:00007385                 push    ecx
.text$mn:00007386                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000738B                 xor     eax, ebp
.text$mn:0000738D                 push    eax
.text$mn:0000738E                 lea     eax, [ebp+var_C]
.text$mn:00007391                 mov     large fs:0, eax
.text$mn:00007397                 mov     [ebp+var_10], ecx
.text$mn:0000739A                 mov     [ebp+var_4], 0
.text$mn:000073A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000073A8                 mov     ecx, [ebp+var_10]
.text$mn:000073AB                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:000073B0                 mov     ecx, [ebp+var_C]
.text$mn:000073B3                 mov     large fs:0, ecx
.text$mn:000073BA                 pop     ecx
.text$mn:000073BB                 mov     esp, ebp
.text$mn:000073BD                 pop     ebp
.text$mn:000073BE                 retn
.text$mn:000073BE ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:000073BE
.text$mn:000073BE ; ---------------------------------------------------------------------------
.text$mn:000073BF                 align 10h
.text$mn:000073BF _text$mn        ends
.text$mn:000073BF
.text$x:000073C0 ; ===========================================================================
.text$x:000073C0
.text$x:000073C0 ; Segment type: Pure code
.text$x:000073C0 ; Segment permissions: Read/Execute
.text$x:000073C0 _text$x         segment para public 'CODE' use32
.text$x:000073C0                 assume cs:_text$x
.text$x:000073C0                 ;org 73C0h
.text$x:000073C0 ; COMDAT (pick associative to section at 7374)
.text$x:000073C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073C0
.text$x:000073C0 ; =============== S U B R O U T I N E =======================================
.text$x:000073C0
.text$x:000073C0
.text$x:000073C0 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000073C0                                         ; DATA XREF: .xdata$x:0000DD3Co
.text$x:000073C0                 mov     ecx, [ebp-10h]
.text$x:000073C3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:000073C3 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000073C3
.text$x:000073C8
.text$x:000073C8 ; =============== S U B R O U T I N E =======================================
.text$x:000073C8
.text$x:000073C8
.text$x:000073C8 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000073C8                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000073C8
.text$x:000073C8 arg_4           = dword ptr  8
.text$x:000073C8
.text$x:000073C8                 mov     edx, [esp+arg_4]
.text$x:000073CC                 lea     eax, [edx+0Ch]
.text$x:000073CF                 mov     ecx, [edx-8]
.text$x:000073D2                 xor     ecx, eax
.text$x:000073D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073D9                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:000073DE                 jmp     ___CxxFrameHandler3
.text$x:000073DE __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:000073DE
.text$x:000073DE ; ---------------------------------------------------------------------------
.text$x:000073E3                 align 4
.text$x:000073E3 _text$x         ends
.text$x:000073E3
.text$mn:000073E4 ; ===========================================================================
.text$mn:000073E4
.text$mn:000073E4 ; Segment type: Pure code
.text$mn:000073E4 ; Segment permissions: Read/Execute
.text$mn:000073E4 _text$mn        segment para public 'CODE' use32
.text$mn:000073E4                 assume cs:_text$mn
.text$mn:000073E4                 ;org 73E4h
.text$mn:000073E4 ; COMDAT (pick any)
.text$mn:000073E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073E4
.text$mn:000073E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000073E4
.text$mn:000073E4 ; Attributes: bp-based frame
.text$mn:000073E4
.text$mn:000073E4 ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:000073E4                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:000073E4 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000073E4                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+226p
.text$mn:000073E4                                         ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+235p ...
.text$mn:000073E4
.text$mn:000073E4 var_10          = dword ptr -10h
.text$mn:000073E4 var_C           = dword ptr -0Ch
.text$mn:000073E4 var_4           = dword ptr -4
.text$mn:000073E4
.text$mn:000073E4                 push    ebp
.text$mn:000073E5                 mov     ebp, esp
.text$mn:000073E7                 push    0FFFFFFFFh
.text$mn:000073E9                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:000073EE                 mov     eax, large fs:0
.text$mn:000073F4                 push    eax
.text$mn:000073F5                 push    ecx
.text$mn:000073F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000073FB                 xor     eax, ebp
.text$mn:000073FD                 push    eax
.text$mn:000073FE                 lea     eax, [ebp+var_C]
.text$mn:00007401                 mov     large fs:0, eax
.text$mn:00007407                 mov     [ebp+var_10], ecx
.text$mn:0000740A                 mov     [ebp+var_4], 0
.text$mn:00007411                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007418                 mov     ecx, [ebp+var_10]
.text$mn:0000741B                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00007420                 mov     ecx, [ebp+var_C]
.text$mn:00007423                 mov     large fs:0, ecx
.text$mn:0000742A                 pop     ecx
.text$mn:0000742B                 mov     esp, ebp
.text$mn:0000742D                 pop     ebp
.text$mn:0000742E                 retn
.text$mn:0000742E ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000742E
.text$mn:0000742E ; ---------------------------------------------------------------------------
.text$mn:0000742F                 align 10h
.text$mn:0000742F _text$mn        ends
.text$mn:0000742F
.text$x:00007430 ; ===========================================================================
.text$x:00007430
.text$x:00007430 ; Segment type: Pure code
.text$x:00007430 ; Segment permissions: Read/Execute
.text$x:00007430 _text$x         segment para public 'CODE' use32
.text$x:00007430                 assume cs:_text$x
.text$x:00007430                 ;org 7430h
.text$x:00007430 ; COMDAT (pick associative to section at 73E4)
.text$x:00007430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007430
.text$x:00007430 ; =============== S U B R O U T I N E =======================================
.text$x:00007430
.text$x:00007430
.text$x:00007430 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007430                                         ; DATA XREF: .xdata$x:0000DDC0o
.text$x:00007430                 mov     ecx, [ebp-10h]
.text$x:00007433                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00007433 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007433
.text$x:00007438
.text$x:00007438 ; =============== S U B R O U T I N E =======================================
.text$x:00007438
.text$x:00007438
.text$x:00007438 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007438                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00007438
.text$x:00007438 arg_4           = dword ptr  8
.text$x:00007438
.text$x:00007438                 mov     edx, [esp+arg_4]
.text$x:0000743C                 lea     eax, [edx+0Ch]
.text$x:0000743F                 mov     ecx, [edx-8]
.text$x:00007442                 xor     ecx, eax
.text$x:00007444                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007449                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:0000744E                 jmp     ___CxxFrameHandler3
.text$x:0000744E __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000744E
.text$x:0000744E ; ---------------------------------------------------------------------------
.text$x:00007453                 align 4
.text$x:00007453 _text$x         ends
.text$x:00007453
.text$mn:00007454 ; ===========================================================================
.text$mn:00007454
.text$mn:00007454 ; Segment type: Pure code
.text$mn:00007454 ; Segment permissions: Read/Execute
.text$mn:00007454 _text$mn        segment para public 'CODE' use32
.text$mn:00007454                 assume cs:_text$mn
.text$mn:00007454                 ;org 7454h
.text$mn:00007454 ; COMDAT (pick any)
.text$mn:00007454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007454
.text$mn:00007454 ; =============== S U B R O U T I N E =======================================
.text$mn:00007454
.text$mn:00007454 ; Attributes: bp-based frame
.text$mn:00007454
.text$mn:00007454 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>::~_Vector_val<struct std::_Simple_types<struct TreeStateNode>>(void)
.text$mn:00007454                 public ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:00007454 ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$mn:00007454                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z$0+3j
.text$mn:00007454                                         ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)+3Fp ...
.text$mn:00007454
.text$mn:00007454 var_10          = dword ptr -10h
.text$mn:00007454 var_C           = dword ptr -0Ch
.text$mn:00007454 var_4           = dword ptr -4
.text$mn:00007454
.text$mn:00007454                 push    ebp
.text$mn:00007455                 mov     ebp, esp
.text$mn:00007457                 push    0FFFFFFFFh
.text$mn:00007459                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:0000745E                 mov     eax, large fs:0
.text$mn:00007464                 push    eax
.text$mn:00007465                 push    ecx
.text$mn:00007466                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000746B                 xor     eax, ebp
.text$mn:0000746D                 push    eax
.text$mn:0000746E                 lea     eax, [ebp+var_C]
.text$mn:00007471                 mov     large fs:0, eax
.text$mn:00007477                 mov     [ebp+var_10], ecx
.text$mn:0000747A                 mov     [ebp+var_4], 0
.text$mn:00007481                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007488                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000748B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00007490                 mov     ecx, [ebp+var_C]
.text$mn:00007493                 mov     large fs:0, ecx
.text$mn:0000749A                 pop     ecx
.text$mn:0000749B                 mov     esp, ebp
.text$mn:0000749D                 pop     ebp
.text$mn:0000749E                 retn
.text$mn:0000749E ??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$mn:0000749E
.text$mn:0000749E ; ---------------------------------------------------------------------------
.text$mn:0000749F                 align 10h
.text$mn:0000749F _text$mn        ends
.text$mn:0000749F
.text$x:000074A0 ; ===========================================================================
.text$x:000074A0
.text$x:000074A0 ; Segment type: Pure code
.text$x:000074A0 ; Segment permissions: Read/Execute
.text$x:000074A0 _text$x         segment para public 'CODE' use32
.text$x:000074A0                 assume cs:_text$x
.text$x:000074A0                 ;org 74A0h
.text$x:000074A0 ; COMDAT (pick associative to section at 7454)
.text$x:000074A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000074A0
.text$x:000074A0 ; =============== S U B R O U T I N E =======================================
.text$x:000074A0
.text$x:000074A0
.text$x:000074A0 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000074A0                                         ; DATA XREF: .xdata$x:0000D588o
.text$x:000074A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000074A3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000074A3 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0 endp
.text$x:000074A3
.text$x:000074A8
.text$x:000074A8 ; =============== S U B R O U T I N E =======================================
.text$x:000074A8
.text$x:000074A8
.text$x:000074A8 __ehhandler$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$x:000074A8                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<TreeStateNode>>::~_Vector_val<std::_Simple_types<TreeStateNode>>(void)+5o
.text$x:000074A8
.text$x:000074A8 arg_4           = dword ptr  8
.text$x:000074A8
.text$x:000074A8                 mov     edx, [esp+arg_4]
.text$x:000074AC                 lea     eax, [edx+0Ch]
.text$x:000074AF                 mov     ecx, [edx-8]
.text$x:000074B2                 xor     ecx, eax
.text$x:000074B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000074B9                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$x:000074BE                 jmp     ___CxxFrameHandler3
.text$x:000074BE __ehhandler$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$x:000074BE
.text$x:000074BE ; ---------------------------------------------------------------------------
.text$x:000074C3                 align 4
.text$x:000074C3 _text$x         ends
.text$x:000074C3
.text$mn:000074C4 ; ===========================================================================
.text$mn:000074C4
.text$mn:000074C4 ; Segment type: Pure code
.text$mn:000074C4 ; Segment permissions: Read/Execute
.text$mn:000074C4 _text$mn        segment para public 'CODE' use32
.text$mn:000074C4                 assume cs:_text$mn
.text$mn:000074C4                 ;org 74C4h
.text$mn:000074C4 ; COMDAT (pick any)
.text$mn:000074C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074C4
.text$mn:000074C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000074C4
.text$mn:000074C4 ; Attributes: bp-based frame
.text$mn:000074C4
.text$mn:000074C4 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct foundInfo>>::~_Vector_val<struct std::_Simple_types<struct foundInfo>>(void)
.text$mn:000074C4                 public ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:000074C4 ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:000074C4                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z$0+3j
.text$mn:000074C4                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)+3Fp ...
.text$mn:000074C4
.text$mn:000074C4 var_10          = dword ptr -10h
.text$mn:000074C4 var_C           = dword ptr -0Ch
.text$mn:000074C4 var_4           = dword ptr -4
.text$mn:000074C4
.text$mn:000074C4                 push    ebp
.text$mn:000074C5                 mov     ebp, esp
.text$mn:000074C7                 push    0FFFFFFFFh
.text$mn:000074C9                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:000074CE                 mov     eax, large fs:0
.text$mn:000074D4                 push    eax
.text$mn:000074D5                 push    ecx
.text$mn:000074D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000074DB                 xor     eax, ebp
.text$mn:000074DD                 push    eax
.text$mn:000074DE                 lea     eax, [ebp+var_C]
.text$mn:000074E1                 mov     large fs:0, eax
.text$mn:000074E7                 mov     [ebp+var_10], ecx
.text$mn:000074EA                 mov     [ebp+var_4], 0
.text$mn:000074F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000074F8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000074FB                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00007500                 mov     ecx, [ebp+var_C]
.text$mn:00007503                 mov     large fs:0, ecx
.text$mn:0000750A                 pop     ecx
.text$mn:0000750B                 mov     esp, ebp
.text$mn:0000750D                 pop     ebp
.text$mn:0000750E                 retn
.text$mn:0000750E ??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:0000750E
.text$mn:0000750E ; ---------------------------------------------------------------------------
.text$mn:0000750F                 align 10h
.text$mn:0000750F _text$mn        ends
.text$mn:0000750F
.text$x:00007510 ; ===========================================================================
.text$x:00007510
.text$x:00007510 ; Segment type: Pure code
.text$x:00007510 ; Segment permissions: Read/Execute
.text$x:00007510 _text$x         segment para public 'CODE' use32
.text$x:00007510                 assume cs:_text$x
.text$x:00007510                 ;org 7510h
.text$x:00007510 ; COMDAT (pick associative to section at 74C4)
.text$x:00007510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007510
.text$x:00007510 ; =============== S U B R O U T I N E =======================================
.text$x:00007510
.text$x:00007510
.text$x:00007510 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007510                                         ; DATA XREF: .xdata$x:0000DE18o
.text$x:00007510                 mov     ecx, [ebp-10h]  ; this
.text$x:00007513                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00007513 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007513
.text$x:00007518
.text$x:00007518 ; =============== S U B R O U T I N E =======================================
.text$x:00007518
.text$x:00007518
.text$x:00007518 __ehhandler$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00007518                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<foundInfo>>::~_Vector_val<std::_Simple_types<foundInfo>>(void)+5o
.text$x:00007518
.text$x:00007518 arg_4           = dword ptr  8
.text$x:00007518
.text$x:00007518                 mov     edx, [esp+arg_4]
.text$x:0000751C                 lea     eax, [edx+0Ch]
.text$x:0000751F                 mov     ecx, [edx-8]
.text$x:00007522                 xor     ecx, eax
.text$x:00007524                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007529                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.text$x:0000752E                 jmp     ___CxxFrameHandler3
.text$x:0000752E __ehhandler$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$x:0000752E
.text$x:0000752E ; ---------------------------------------------------------------------------
.text$x:00007533                 align 4
.text$x:00007533 _text$x         ends
.text$x:00007533
.text$mn:00007534 ; ===========================================================================
.text$mn:00007534
.text$mn:00007534 ; Segment type: Pure code
.text$mn:00007534 ; Segment permissions: Read/Execute
.text$mn:00007534 _text$mn        segment para public 'CODE' use32
.text$mn:00007534                 assume cs:_text$mn
.text$mn:00007534                 ;org 7534h
.text$mn:00007534 ; COMDAT (pick any)
.text$mn:00007534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007534
.text$mn:00007534 ; =============== S U B R O U T I N E =======================================
.text$mn:00007534
.text$mn:00007534 ; Attributes: bp-based frame
.text$mn:00007534
.text$mn:00007534 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00007534                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007534 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007534                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:00007534                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:00007534
.text$mn:00007534 var_10          = dword ptr -10h
.text$mn:00007534 var_C           = dword ptr -0Ch
.text$mn:00007534 var_4           = dword ptr -4
.text$mn:00007534
.text$mn:00007534                 push    ebp
.text$mn:00007535                 mov     ebp, esp
.text$mn:00007537                 push    0FFFFFFFFh
.text$mn:00007539                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:0000753E                 mov     eax, large fs:0
.text$mn:00007544                 push    eax
.text$mn:00007545                 push    ecx
.text$mn:00007546                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000754B                 xor     eax, ebp
.text$mn:0000754D                 push    eax
.text$mn:0000754E                 lea     eax, [ebp+var_C]
.text$mn:00007551                 mov     large fs:0, eax
.text$mn:00007557                 mov     [ebp+var_10], ecx
.text$mn:0000755A                 mov     [ebp+var_4], 0
.text$mn:00007561                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007568                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000756B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00007570                 mov     ecx, [ebp+var_C]
.text$mn:00007573                 mov     large fs:0, ecx
.text$mn:0000757A                 pop     ecx
.text$mn:0000757B                 mov     esp, ebp
.text$mn:0000757D                 pop     ebp
.text$mn:0000757E                 retn
.text$mn:0000757E ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000757E
.text$mn:0000757E ; ---------------------------------------------------------------------------
.text$mn:0000757F                 align 10h
.text$mn:0000757F _text$mn        ends
.text$mn:0000757F
.text$x:00007580 ; ===========================================================================
.text$x:00007580
.text$x:00007580 ; Segment type: Pure code
.text$x:00007580 ; Segment permissions: Read/Execute
.text$x:00007580 _text$x         segment para public 'CODE' use32
.text$x:00007580                 assume cs:_text$x
.text$x:00007580                 ;org 7580h
.text$x:00007580 ; COMDAT (pick associative to section at 7534)
.text$x:00007580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007580
.text$x:00007580 ; =============== S U B R O U T I N E =======================================
.text$x:00007580
.text$x:00007580
.text$x:00007580 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007580                                         ; DATA XREF: .xdata$x:0000D288o
.text$x:00007580                 mov     ecx, [ebp-10h]  ; this
.text$x:00007583                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00007583 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007583
.text$x:00007588
.text$x:00007588 ; =============== S U B R O U T I N E =======================================
.text$x:00007588
.text$x:00007588
.text$x:00007588 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007588                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00007588
.text$x:00007588 arg_4           = dword ptr  8
.text$x:00007588
.text$x:00007588                 mov     edx, [esp+arg_4]
.text$x:0000758C                 lea     eax, [edx+0Ch]
.text$x:0000758F                 mov     ecx, [edx-8]
.text$x:00007592                 xor     ecx, eax
.text$x:00007594                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007599                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:0000759E                 jmp     ___CxxFrameHandler3
.text$x:0000759E __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000759E
.text$x:0000759E ; ---------------------------------------------------------------------------
.text$x:000075A3                 align 4
.text$x:000075A3 _text$x         ends
.text$x:000075A3
.text$mn:000075A4 ; ===========================================================================
.text$mn:000075A4
.text$mn:000075A4 ; Segment type: Pure code
.text$mn:000075A4 ; Segment permissions: Read/Execute
.text$mn:000075A4 _text$mn        segment para public 'CODE' use32
.text$mn:000075A4                 assume cs:_text$mn
.text$mn:000075A4                 ;org 75A4h
.text$mn:000075A4 ; COMDAT (pick any)
.text$mn:000075A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075A4
.text$mn:000075A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000075A4
.text$mn:000075A4 ; Attributes: bp-based frame
.text$mn:000075A4
.text$mn:000075A4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000075A4                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000075A4 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000075A4                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:000075A4                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:000075A4
.text$mn:000075A4 var_10          = dword ptr -10h
.text$mn:000075A4 var_C           = dword ptr -0Ch
.text$mn:000075A4 var_4           = dword ptr -4
.text$mn:000075A4
.text$mn:000075A4                 push    ebp
.text$mn:000075A5                 mov     ebp, esp
.text$mn:000075A7                 push    0FFFFFFFFh
.text$mn:000075A9                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000075AE                 mov     eax, large fs:0
.text$mn:000075B4                 push    eax
.text$mn:000075B5                 push    ecx
.text$mn:000075B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000075BB                 xor     eax, ebp
.text$mn:000075BD                 push    eax
.text$mn:000075BE                 lea     eax, [ebp+var_C]
.text$mn:000075C1                 mov     large fs:0, eax
.text$mn:000075C7                 mov     [ebp+var_10], ecx
.text$mn:000075CA                 mov     [ebp+var_4], 0
.text$mn:000075D1                 push    0               ; Size
.text$mn:000075D3                 push    1               ; char
.text$mn:000075D5                 mov     ecx, [ebp+var_10]
.text$mn:000075D8                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000075DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000075E4                 mov     ecx, [ebp+var_10]
.text$mn:000075E7                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000075EC                 mov     ecx, [ebp+var_C]
.text$mn:000075EF                 mov     large fs:0, ecx
.text$mn:000075F6                 pop     ecx
.text$mn:000075F7                 mov     esp, ebp
.text$mn:000075F9                 pop     ebp
.text$mn:000075FA                 retn
.text$mn:000075FA ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000075FA
.text$mn:000075FA ; ---------------------------------------------------------------------------
.text$mn:000075FB                 align 4
.text$mn:000075FB _text$mn        ends
.text$mn:000075FB
.text$x:000075FC ; ===========================================================================
.text$x:000075FC
.text$x:000075FC ; Segment type: Pure code
.text$x:000075FC ; Segment permissions: Read/Execute
.text$x:000075FC _text$x         segment para public 'CODE' use32
.text$x:000075FC                 assume cs:_text$x
.text$x:000075FC                 ;org 75FCh
.text$x:000075FC ; COMDAT (pick associative to section at 75A4)
.text$x:000075FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000075FC
.text$x:000075FC ; =============== S U B R O U T I N E =======================================
.text$x:000075FC
.text$x:000075FC
.text$x:000075FC __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000075FC                                         ; DATA XREF: .xdata$x:0000CC78o
.text$x:000075FC                 mov     ecx, [ebp-10h]
.text$x:000075FF                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000075FF __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000075FF
.text$x:00007604
.text$x:00007604 ; =============== S U B R O U T I N E =======================================
.text$x:00007604
.text$x:00007604
.text$x:00007604 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00007604                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00007604
.text$x:00007604 arg_4           = dword ptr  8
.text$x:00007604
.text$x:00007604                 mov     edx, [esp+arg_4]
.text$x:00007608                 lea     eax, [edx+0Ch]
.text$x:0000760B                 mov     ecx, [edx-8]
.text$x:0000760E                 xor     ecx, eax
.text$x:00007610                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007615                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:0000761A                 jmp     ___CxxFrameHandler3
.text$x:0000761A __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:0000761A
.text$x:0000761A ; ---------------------------------------------------------------------------
.text$x:0000761F                 align 10h
.text$x:0000761F _text$x         ends
.text$x:0000761F
.text$mn:00007620 ; ===========================================================================
.text$mn:00007620
.text$mn:00007620 ; Segment type: Pure code
.text$mn:00007620 ; Segment permissions: Read/Execute
.text$mn:00007620 _text$mn        segment para public 'CODE' use32
.text$mn:00007620                 assume cs:_text$mn
.text$mn:00007620                 ;org 7620h
.text$mn:00007620 ; COMDAT (pick any)
.text$mn:00007620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007620
.text$mn:00007620 ; =============== S U B R O U T I N E =======================================
.text$mn:00007620
.text$mn:00007620 ; Attributes: bp-based frame
.text$mn:00007620
.text$mn:00007620 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00007620                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00007620 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00007620                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+C0p
.text$mn:00007620                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+CCp ...
.text$mn:00007620
.text$mn:00007620 var_10          = dword ptr -10h
.text$mn:00007620 var_C           = dword ptr -0Ch
.text$mn:00007620 var_4           = dword ptr -4
.text$mn:00007620
.text$mn:00007620                 push    ebp
.text$mn:00007621                 mov     ebp, esp
.text$mn:00007623                 push    0FFFFFFFFh
.text$mn:00007625                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000762A                 mov     eax, large fs:0
.text$mn:00007630                 push    eax
.text$mn:00007631                 push    ecx
.text$mn:00007632                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007637                 xor     eax, ebp
.text$mn:00007639                 push    eax
.text$mn:0000763A                 lea     eax, [ebp+var_C]
.text$mn:0000763D                 mov     large fs:0, eax
.text$mn:00007643                 mov     [ebp+var_10], ecx
.text$mn:00007646                 mov     [ebp+var_4], 0
.text$mn:0000764D                 push    0
.text$mn:0000764F                 push    1
.text$mn:00007651                 mov     ecx, [ebp+var_10]
.text$mn:00007654                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007659                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007660                 mov     ecx, [ebp+var_10]
.text$mn:00007663                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00007668                 mov     ecx, [ebp+var_C]
.text$mn:0000766B                 mov     large fs:0, ecx
.text$mn:00007672                 pop     ecx
.text$mn:00007673                 mov     esp, ebp
.text$mn:00007675                 pop     ebp
.text$mn:00007676                 retn
.text$mn:00007676 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00007676
.text$mn:00007676 ; ---------------------------------------------------------------------------
.text$mn:00007677                 align 4
.text$mn:00007677 _text$mn        ends
.text$mn:00007677
.text$x:00007678 ; ===========================================================================
.text$x:00007678
.text$x:00007678 ; Segment type: Pure code
.text$x:00007678 ; Segment permissions: Read/Execute
.text$x:00007678 _text$x         segment para public 'CODE' use32
.text$x:00007678                 assume cs:_text$x
.text$x:00007678                 ;org 7678h
.text$x:00007678 ; COMDAT (pick associative to section at 7620)
.text$x:00007678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007678
.text$x:00007678 ; =============== S U B R O U T I N E =======================================
.text$x:00007678
.text$x:00007678
.text$x:00007678 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00007678                                         ; DATA XREF: .xdata$x:0000D024o
.text$x:00007678                 mov     ecx, [ebp-10h]
.text$x:0000767B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000767B __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:0000767B
.text$x:00007680
.text$x:00007680 ; =============== S U B R O U T I N E =======================================
.text$x:00007680
.text$x:00007680
.text$x:00007680 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00007680                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00007680
.text$x:00007680 arg_4           = dword ptr  8
.text$x:00007680
.text$x:00007680                 mov     edx, [esp+arg_4]
.text$x:00007684                 lea     eax, [edx+0Ch]
.text$x:00007687                 mov     ecx, [edx-8]
.text$x:0000768A                 xor     ecx, eax
.text$x:0000768C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007691                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00007696                 jmp     ___CxxFrameHandler3
.text$x:00007696 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00007696
.text$x:00007696 ; ---------------------------------------------------------------------------
.text$x:0000769B                 align 4
.text$x:0000769B _text$x         ends
.text$x:0000769B
.text$mn:0000769C ; ===========================================================================
.text$mn:0000769C
.text$mn:0000769C ; Segment type: Pure code
.text$mn:0000769C ; Segment permissions: Read/Execute
.text$mn:0000769C _text$mn        segment para public 'CODE' use32
.text$mn:0000769C                 assume cs:_text$mn
.text$mn:0000769C                 ;org 769Ch
.text$mn:0000769C ; COMDAT (pick any)
.text$mn:0000769C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000769C
.text$mn:0000769C ; =============== S U B R O U T I N E =======================================
.text$mn:0000769C
.text$mn:0000769C ; Attributes: bp-based frame
.text$mn:0000769C
.text$mn:0000769C ; public: __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::~vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>(void)
.text$mn:0000769C                 public ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:0000769C ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$mn:0000769C                                         ; CODE XREF: __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$2+6j
.text$mn:0000769C                                         ; __unwindfunclet$??0TreeStateNode@@QAE@XZ$2+6j ...
.text$mn:0000769C
.text$mn:0000769C var_10          = dword ptr -10h
.text$mn:0000769C var_C           = dword ptr -0Ch
.text$mn:0000769C var_4           = dword ptr -4
.text$mn:0000769C
.text$mn:0000769C                 push    ebp
.text$mn:0000769D                 mov     ebp, esp
.text$mn:0000769F                 push    0FFFFFFFFh
.text$mn:000076A1                 push    offset __ehhandler$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$mn:000076A6                 mov     eax, large fs:0
.text$mn:000076AC                 push    eax
.text$mn:000076AD                 push    ecx
.text$mn:000076AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000076B3                 xor     eax, ebp
.text$mn:000076B5                 push    eax
.text$mn:000076B6                 lea     eax, [ebp+var_C]
.text$mn:000076B9                 mov     large fs:0, eax
.text$mn:000076BF                 mov     [ebp+var_10], ecx
.text$mn:000076C2                 mov     [ebp+var_4], 0
.text$mn:000076C9                 mov     ecx, [ebp+var_10]
.text$mn:000076CC                 call    ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)
.text$mn:000076D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000076D8                 mov     ecx, [ebp+var_10]
.text$mn:000076DB                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)
.text$mn:000076E0                 mov     ecx, [ebp+var_C]
.text$mn:000076E3                 mov     large fs:0, ecx
.text$mn:000076EA                 pop     ecx
.text$mn:000076EB                 mov     esp, ebp
.text$mn:000076ED                 pop     ebp
.text$mn:000076EE                 retn
.text$mn:000076EE ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$mn:000076EE
.text$mn:000076EE ; ---------------------------------------------------------------------------
.text$mn:000076EF                 align 10h
.text$mn:000076EF _text$mn        ends
.text$mn:000076EF
.text$x:000076F0 ; ===========================================================================
.text$x:000076F0
.text$x:000076F0 ; Segment type: Pure code
.text$x:000076F0 ; Segment permissions: Read/Execute
.text$x:000076F0 _text$x         segment para public 'CODE' use32
.text$x:000076F0                 assume cs:_text$x
.text$x:000076F0                 ;org 76F0h
.text$x:000076F0 ; COMDAT (pick associative to section at 769C)
.text$x:000076F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000076F0
.text$x:000076F0 ; =============== S U B R O U T I N E =======================================
.text$x:000076F0
.text$x:000076F0
.text$x:000076F0 __unwindfunclet$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000076F0                                         ; DATA XREF: .xdata$x:0000D6A8o
.text$x:000076F0                 mov     ecx, [ebp-10h]
.text$x:000076F3                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)
.text$x:000076F3 __unwindfunclet$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0 endp
.text$x:000076F3
.text$x:000076F8
.text$x:000076F8 ; =============== S U B R O U T I N E =======================================
.text$x:000076F8
.text$x:000076F8
.text$x:000076F8 __ehhandler$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ proc near
.text$x:000076F8                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)+5o
.text$x:000076F8
.text$x:000076F8 arg_4           = dword ptr  8
.text$x:000076F8
.text$x:000076F8                 mov     edx, [esp+arg_4]
.text$x:000076FC                 lea     eax, [edx+0Ch]
.text$x:000076FF                 mov     ecx, [edx-8]
.text$x:00007702                 xor     ecx, eax
.text$x:00007704                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007709                 mov     eax, offset __ehfuncinfo$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.text$x:0000770E                 jmp     ___CxxFrameHandler3
.text$x:0000770E __ehhandler$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ endp
.text$x:0000770E
.text$x:0000770E ; ---------------------------------------------------------------------------
.text$x:00007713                 align 4
.text$x:00007713 _text$x         ends
.text$x:00007713
.text$mn:00007714 ; ===========================================================================
.text$mn:00007714
.text$mn:00007714 ; Segment type: Pure code
.text$mn:00007714 ; Segment permissions: Read/Execute
.text$mn:00007714 _text$mn        segment para public 'CODE' use32
.text$mn:00007714                 assume cs:_text$mn
.text$mn:00007714                 ;org 7714h
.text$mn:00007714 ; COMDAT (pick any)
.text$mn:00007714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007714
.text$mn:00007714 ; =============== S U B R O U T I N E =======================================
.text$mn:00007714
.text$mn:00007714 ; Attributes: bp-based frame
.text$mn:00007714
.text$mn:00007714 ; public: __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::~vector<struct foundInfo, class std::allocator<struct foundInfo>>(void)
.text$mn:00007714                 public ??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:00007714 ??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:00007714                                         ; CODE XREF: FunctionListPanel::reload(void)+554p
.text$mn:00007714                                         ; __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$2+6j
.text$mn:00007714
.text$mn:00007714 var_10          = dword ptr -10h
.text$mn:00007714 var_C           = dword ptr -0Ch
.text$mn:00007714 var_4           = dword ptr -4
.text$mn:00007714
.text$mn:00007714                 push    ebp
.text$mn:00007715                 mov     ebp, esp
.text$mn:00007717                 push    0FFFFFFFFh
.text$mn:00007719                 push    offset __ehhandler$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:0000771E                 mov     eax, large fs:0
.text$mn:00007724                 push    eax
.text$mn:00007725                 push    ecx
.text$mn:00007726                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000772B                 xor     eax, ebp
.text$mn:0000772D                 push    eax
.text$mn:0000772E                 lea     eax, [ebp+var_C]
.text$mn:00007731                 mov     large fs:0, eax
.text$mn:00007737                 mov     [ebp+var_10], ecx
.text$mn:0000773A                 mov     [ebp+var_4], 0
.text$mn:00007741                 mov     ecx, [ebp+var_10]
.text$mn:00007744                 call    ?_Tidy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::_Tidy(void)
.text$mn:00007749                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007750                 mov     ecx, [ebp+var_10]
.text$mn:00007753                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)
.text$mn:00007758                 mov     ecx, [ebp+var_C]
.text$mn:0000775B                 mov     large fs:0, ecx
.text$mn:00007762                 pop     ecx
.text$mn:00007763                 mov     esp, ebp
.text$mn:00007765                 pop     ebp
.text$mn:00007766                 retn
.text$mn:00007766 ??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00007766
.text$mn:00007766 ; ---------------------------------------------------------------------------
.text$mn:00007767                 align 4
.text$mn:00007767 _text$mn        ends
.text$mn:00007767
.text$x:00007768 ; ===========================================================================
.text$x:00007768
.text$x:00007768 ; Segment type: Pure code
.text$x:00007768 ; Segment permissions: Read/Execute
.text$x:00007768 _text$x         segment para public 'CODE' use32
.text$x:00007768                 assume cs:_text$x
.text$x:00007768                 ;org 7768h
.text$x:00007768 ; COMDAT (pick associative to section at 7714)
.text$x:00007768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007768
.text$x:00007768 ; =============== S U B R O U T I N E =======================================
.text$x:00007768
.text$x:00007768
.text$x:00007768 __unwindfunclet$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007768                                         ; DATA XREF: .xdata$x:0000DEC8o
.text$x:00007768                 mov     ecx, [ebp-10h]
.text$x:0000776B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)
.text$x:0000776B __unwindfunclet$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000776B
.text$x:00007770
.text$x:00007770 ; =============== S U B R O U T I N E =======================================
.text$x:00007770
.text$x:00007770
.text$x:00007770 __ehhandler$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00007770                                         ; DATA XREF: std::vector<foundInfo,std::allocator<foundInfo>>::~vector<foundInfo,std::allocator<foundInfo>>(void)+5o
.text$x:00007770
.text$x:00007770 arg_4           = dword ptr  8
.text$x:00007770
.text$x:00007770                 mov     edx, [esp+arg_4]
.text$x:00007774                 lea     eax, [edx+0Ch]
.text$x:00007777                 mov     ecx, [edx-8]
.text$x:0000777A                 xor     ecx, eax
.text$x:0000777C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007781                 mov     eax, offset __ehfuncinfo$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$x:00007786                 jmp     ___CxxFrameHandler3
.text$x:00007786 __ehhandler$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$x:00007786
.text$x:00007786 ; ---------------------------------------------------------------------------
.text$x:0000778B                 align 4
.text$x:0000778B _text$x         ends
.text$x:0000778B
.text$mn:0000778C ; ===========================================================================
.text$mn:0000778C
.text$mn:0000778C ; Segment type: Pure code
.text$mn:0000778C ; Segment permissions: Read/Execute
.text$mn:0000778C _text$mn        segment para public 'CODE' use32
.text$mn:0000778C                 assume cs:_text$mn
.text$mn:0000778C                 ;org 778Ch
.text$mn:0000778C ; COMDAT (pick any)
.text$mn:0000778C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000778C
.text$mn:0000778C ; =============== S U B R O U T I N E =======================================
.text$mn:0000778C
.text$mn:0000778C ; Attributes: bp-based frame
.text$mn:0000778C
.text$mn:0000778C ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:0000778C                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:0000778C ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:0000778C                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+76p
.text$mn:0000778C                                         ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+B2p ...
.text$mn:0000778C
.text$mn:0000778C var_10          = dword ptr -10h
.text$mn:0000778C var_C           = dword ptr -0Ch
.text$mn:0000778C var_4           = dword ptr -4
.text$mn:0000778C
.text$mn:0000778C                 push    ebp
.text$mn:0000778D                 mov     ebp, esp
.text$mn:0000778F                 push    0FFFFFFFFh
.text$mn:00007791                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00007796                 mov     eax, large fs:0
.text$mn:0000779C                 push    eax
.text$mn:0000779D                 push    ecx
.text$mn:0000779E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000077A3                 xor     eax, ebp
.text$mn:000077A5                 push    eax
.text$mn:000077A6                 lea     eax, [ebp+var_C]
.text$mn:000077A9                 mov     large fs:0, eax
.text$mn:000077AF                 mov     [ebp+var_10], ecx
.text$mn:000077B2                 mov     [ebp+var_4], 0
.text$mn:000077B9                 mov     ecx, [ebp+var_10]
.text$mn:000077BC                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:000077C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000077C8                 mov     ecx, [ebp+var_10]
.text$mn:000077CB                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:000077D0                 mov     ecx, [ebp+var_C]
.text$mn:000077D3                 mov     large fs:0, ecx
.text$mn:000077DA                 pop     ecx
.text$mn:000077DB                 mov     esp, ebp
.text$mn:000077DD                 pop     ebp
.text$mn:000077DE                 retn
.text$mn:000077DE ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:000077DE
.text$mn:000077DE ; ---------------------------------------------------------------------------
.text$mn:000077DF                 align 10h
.text$mn:000077DF _text$mn        ends
.text$mn:000077DF
.text$x:000077E0 ; ===========================================================================
.text$x:000077E0
.text$x:000077E0 ; Segment type: Pure code
.text$x:000077E0 ; Segment permissions: Read/Execute
.text$x:000077E0 _text$x         segment para public 'CODE' use32
.text$x:000077E0                 assume cs:_text$x
.text$x:000077E0                 ;org 77E0h
.text$x:000077E0 ; COMDAT (pick associative to section at 778C)
.text$x:000077E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000077E0
.text$x:000077E0 ; =============== S U B R O U T I N E =======================================
.text$x:000077E0
.text$x:000077E0
.text$x:000077E0 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:000077E0                                         ; DATA XREF: .xdata$x:0000D37Co
.text$x:000077E0                 mov     ecx, [ebp-10h]
.text$x:000077E3                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000077E3 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:000077E3
.text$x:000077E8
.text$x:000077E8 ; =============== S U B R O U T I N E =======================================
.text$x:000077E8
.text$x:000077E8
.text$x:000077E8 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:000077E8                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:000077E8
.text$x:000077E8 arg_4           = dword ptr  8
.text$x:000077E8
.text$x:000077E8                 mov     edx, [esp+arg_4]
.text$x:000077EC                 lea     eax, [edx+0Ch]
.text$x:000077EF                 mov     ecx, [edx-8]
.text$x:000077F2                 xor     ecx, eax
.text$x:000077F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000077F9                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:000077FE                 jmp     ___CxxFrameHandler3
.text$x:000077FE __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:000077FE
.text$x:000077FE ; ---------------------------------------------------------------------------
.text$x:00007803                 align 4
.text$x:00007803 _text$x         ends
.text$x:00007803
.text$mn:00007804 ; ===========================================================================
.text$mn:00007804
.text$mn:00007804 ; Segment type: Pure code
.text$mn:00007804 ; Segment permissions: Read/Execute
.text$mn:00007804 _text$mn        segment para public 'CODE' use32
.text$mn:00007804                 assume cs:_text$mn
.text$mn:00007804                 ;org 7804h
.text$mn:00007804 ; COMDAT (pick any)
.text$mn:00007804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007804
.text$mn:00007804 ; =============== S U B R O U T I N E =======================================
.text$mn:00007804
.text$mn:00007804 ; Attributes: bp-based frame
.text$mn:00007804
.text$mn:00007804 ; _DWORD __thiscall AssociationInfo::~AssociationInfo(AssociationInfo *__hidden this)
.text$mn:00007804                 public ??1AssociationInfo@@QAE@XZ
.text$mn:00007804 ??1AssociationInfo@@QAE@XZ proc near    ; CODE XREF: FunctionListPanel::reload(void)+21Fp
.text$mn:00007804                                         ; __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$3+6j
.text$mn:00007804
.text$mn:00007804 var_10          = dword ptr -10h
.text$mn:00007804 var_C           = dword ptr -0Ch
.text$mn:00007804 var_4           = dword ptr -4
.text$mn:00007804
.text$mn:00007804                 push    ebp
.text$mn:00007805                 mov     ebp, esp
.text$mn:00007807                 push    0FFFFFFFFh
.text$mn:00007809                 push    offset __ehhandler$??1AssociationInfo@@QAE@XZ
.text$mn:0000780E                 mov     eax, large fs:0
.text$mn:00007814                 push    eax
.text$mn:00007815                 push    ecx
.text$mn:00007816                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000781B                 xor     eax, ebp
.text$mn:0000781D                 push    eax
.text$mn:0000781E                 lea     eax, [ebp+var_C]
.text$mn:00007821                 mov     large fs:0, eax
.text$mn:00007827                 mov     [ebp+var_10], ecx
.text$mn:0000782A                 mov     [ebp+var_4], 1
.text$mn:00007831                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007835                 mov     ecx, [ebp+var_10]
.text$mn:00007838                 add     ecx, 24h ; '$'
.text$mn:0000783B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007840                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007847                 mov     ecx, [ebp+var_10]
.text$mn:0000784A                 add     ecx, 8
.text$mn:0000784D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007852                 mov     ecx, [ebp+var_C]
.text$mn:00007855                 mov     large fs:0, ecx
.text$mn:0000785C                 pop     ecx
.text$mn:0000785D                 mov     esp, ebp
.text$mn:0000785F                 pop     ebp
.text$mn:00007860                 retn
.text$mn:00007860 ??1AssociationInfo@@QAE@XZ endp
.text$mn:00007860
.text$mn:00007860 ; ---------------------------------------------------------------------------
.text$mn:00007861                 align 4
.text$mn:00007861 _text$mn        ends
.text$mn:00007861
.text$x:00007864 ; ===========================================================================
.text$x:00007864
.text$x:00007864 ; Segment type: Pure code
.text$x:00007864 ; Segment permissions: Read/Execute
.text$x:00007864 _text$x         segment para public 'CODE' use32
.text$x:00007864                 assume cs:_text$x
.text$x:00007864                 ;org 7864h
.text$x:00007864 ; COMDAT (pick associative to section at 7804)
.text$x:00007864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007864
.text$x:00007864 ; =============== S U B R O U T I N E =======================================
.text$x:00007864
.text$x:00007864
.text$x:00007864 __unwindfunclet$??1AssociationInfo@@QAE@XZ$0 proc near
.text$x:00007864                                         ; DATA XREF: .xdata$x:0000D4FCo
.text$x:00007864                 mov     ecx, [ebp-10h]
.text$x:00007867                 add     ecx, 8
.text$x:0000786A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000786A __unwindfunclet$??1AssociationInfo@@QAE@XZ$0 endp
.text$x:0000786A
.text$x:0000786F
.text$x:0000786F ; =============== S U B R O U T I N E =======================================
.text$x:0000786F
.text$x:0000786F
.text$x:0000786F __unwindfunclet$??1AssociationInfo@@QAE@XZ$1 proc near
.text$x:0000786F                                         ; DATA XREF: .xdata$x:0000D504o
.text$x:0000786F                 mov     ecx, [ebp-10h]
.text$x:00007872                 add     ecx, 24h ; '$'
.text$x:00007875                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007875 __unwindfunclet$??1AssociationInfo@@QAE@XZ$1 endp
.text$x:00007875
.text$x:0000787A
.text$x:0000787A ; =============== S U B R O U T I N E =======================================
.text$x:0000787A
.text$x:0000787A
.text$x:0000787A __ehhandler$??1AssociationInfo@@QAE@XZ proc near
.text$x:0000787A                                         ; DATA XREF: AssociationInfo::~AssociationInfo(void)+5o
.text$x:0000787A
.text$x:0000787A arg_4           = dword ptr  8
.text$x:0000787A
.text$x:0000787A                 mov     edx, [esp+arg_4]
.text$x:0000787E                 lea     eax, [edx+0Ch]
.text$x:00007881                 mov     ecx, [edx-8]
.text$x:00007884                 xor     ecx, eax
.text$x:00007886                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000788B                 mov     eax, offset __ehfuncinfo$??1AssociationInfo@@QAE@XZ
.text$x:00007890                 jmp     ___CxxFrameHandler3
.text$x:00007890 __ehhandler$??1AssociationInfo@@QAE@XZ endp
.text$x:00007890
.text$x:00007890 ; ---------------------------------------------------------------------------
.text$x:00007895                 align 4
.text$x:00007895 _text$x         ends
.text$x:00007895
.text$mn:00007898 ; ===========================================================================
.text$mn:00007898
.text$mn:00007898 ; Segment type: Pure code
.text$mn:00007898 ; Segment permissions: Read/Execute
.text$mn:00007898 _text$mn        segment para public 'CODE' use32
.text$mn:00007898                 assume cs:_text$mn
.text$mn:00007898                 ;org 7898h
.text$mn:00007898 ; COMDAT (pick any)
.text$mn:00007898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007898
.text$mn:00007898 ; =============== S U B R O U T I N E =======================================
.text$mn:00007898
.text$mn:00007898 ; Attributes: bp-based frame
.text$mn:00007898
.text$mn:00007898 ; _DWORD __thiscall SearchParameters::~SearchParameters(SearchParameters *__hidden this)
.text$mn:00007898                 public ??1SearchParameters@@QAE@XZ
.text$mn:00007898 ??1SearchParameters@@QAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$1+6j
.text$mn:00007898                                         ; __unwindfunclet$??0TreeParams@@QAE@XZ$1+6j ...
.text$mn:00007898
.text$mn:00007898 var_10          = dword ptr -10h
.text$mn:00007898 var_C           = dword ptr -0Ch
.text$mn:00007898 var_4           = dword ptr -4
.text$mn:00007898
.text$mn:00007898                 push    ebp
.text$mn:00007899                 mov     ebp, esp
.text$mn:0000789B                 push    0FFFFFFFFh
.text$mn:0000789D                 push    offset __ehhandler$??1SearchParameters@@QAE@XZ
.text$mn:000078A2                 mov     eax, large fs:0
.text$mn:000078A8                 push    eax
.text$mn:000078A9                 push    ecx
.text$mn:000078AA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000078AF                 xor     eax, ebp
.text$mn:000078B1                 push    eax
.text$mn:000078B2                 lea     eax, [ebp+var_C]
.text$mn:000078B5                 mov     large fs:0, eax
.text$mn:000078BB                 mov     [ebp+var_10], ecx
.text$mn:000078BE                 mov     [ebp+var_4], 0
.text$mn:000078C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000078CC                 mov     ecx, [ebp+var_10]
.text$mn:000078CF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000078D4                 mov     ecx, [ebp+var_C]
.text$mn:000078D7                 mov     large fs:0, ecx
.text$mn:000078DE                 pop     ecx
.text$mn:000078DF                 mov     esp, ebp
.text$mn:000078E1                 pop     ebp
.text$mn:000078E2                 retn
.text$mn:000078E2 ??1SearchParameters@@QAE@XZ endp
.text$mn:000078E2
.text$mn:000078E2 ; ---------------------------------------------------------------------------
.text$mn:000078E3                 align 4
.text$mn:000078E3 _text$mn        ends
.text$mn:000078E3
.text$x:000078E4 ; ===========================================================================
.text$x:000078E4
.text$x:000078E4 ; Segment type: Pure code
.text$x:000078E4 ; Segment permissions: Read/Execute
.text$x:000078E4 _text$x         segment para public 'CODE' use32
.text$x:000078E4                 assume cs:_text$x
.text$x:000078E4                 ;org 78E4h
.text$x:000078E4 ; COMDAT (pick associative to section at 7898)
.text$x:000078E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000078E4
.text$x:000078E4 ; =============== S U B R O U T I N E =======================================
.text$x:000078E4
.text$x:000078E4
.text$x:000078E4 __unwindfunclet$??1SearchParameters@@QAE@XZ$0 proc near
.text$x:000078E4                                         ; DATA XREF: .xdata$x:0000D864o
.text$x:000078E4                 mov     ecx, [ebp-10h]
.text$x:000078E7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000078E7 __unwindfunclet$??1SearchParameters@@QAE@XZ$0 endp
.text$x:000078E7
.text$x:000078EC
.text$x:000078EC ; =============== S U B R O U T I N E =======================================
.text$x:000078EC
.text$x:000078EC
.text$x:000078EC __ehhandler$??1SearchParameters@@QAE@XZ proc near
.text$x:000078EC                                         ; DATA XREF: SearchParameters::~SearchParameters(void)+5o
.text$x:000078EC
.text$x:000078EC arg_4           = dword ptr  8
.text$x:000078EC
.text$x:000078EC                 mov     edx, [esp+arg_4]
.text$x:000078F0                 lea     eax, [edx+0Ch]
.text$x:000078F3                 mov     ecx, [edx-8]
.text$x:000078F6                 xor     ecx, eax
.text$x:000078F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000078FD                 mov     eax, offset __ehfuncinfo$??1SearchParameters@@QAE@XZ
.text$x:00007902                 jmp     ___CxxFrameHandler3
.text$x:00007902 __ehhandler$??1SearchParameters@@QAE@XZ endp
.text$x:00007902
.text$x:00007902 ; ---------------------------------------------------------------------------
.text$x:00007907                 align 4
.text$x:00007907 _text$x         ends
.text$x:00007907
.text$mn:00007908 ; ===========================================================================
.text$mn:00007908
.text$mn:00007908 ; Segment type: Pure code
.text$mn:00007908 ; Segment permissions: Read/Execute
.text$mn:00007908 _text$mn        segment para public 'CODE' use32
.text$mn:00007908                 assume cs:_text$mn
.text$mn:00007908                 ;org 7908h
.text$mn:00007908 ; COMDAT (pick any)
.text$mn:00007908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007908
.text$mn:00007908 ; =============== S U B R O U T I N E =======================================
.text$mn:00007908
.text$mn:00007908 ; Attributes: bp-based frame
.text$mn:00007908
.text$mn:00007908 ; _DWORD __thiscall TreeParams::~TreeParams(TreeParams *__hidden this)
.text$mn:00007908                 public ??1TreeParams@@QAE@XZ
.text$mn:00007908 ??1TreeParams@@QAE@XZ proc near         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+16Dp
.text$mn:00007908                                         ; __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$1+3j ...
.text$mn:00007908
.text$mn:00007908 var_10          = dword ptr -10h
.text$mn:00007908 var_C           = dword ptr -0Ch
.text$mn:00007908 var_4           = dword ptr -4
.text$mn:00007908
.text$mn:00007908                 push    ebp
.text$mn:00007909                 mov     ebp, esp
.text$mn:0000790B                 push    0FFFFFFFFh
.text$mn:0000790D                 push    offset __ehhandler$??1TreeParams@@QAE@XZ
.text$mn:00007912                 mov     eax, large fs:0
.text$mn:00007918                 push    eax
.text$mn:00007919                 push    ecx
.text$mn:0000791A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000791F                 xor     eax, ebp
.text$mn:00007921                 push    eax
.text$mn:00007922                 lea     eax, [ebp+var_C]
.text$mn:00007925                 mov     large fs:0, eax
.text$mn:0000792B                 mov     [ebp+var_10], ecx
.text$mn:0000792E                 mov     [ebp+var_4], 1
.text$mn:00007935                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007939                 mov     ecx, [ebp+var_10]
.text$mn:0000793C                 add     ecx, 4Ch ; 'L'  ; this
.text$mn:0000793F                 call    ??1SearchParameters@@QAE@XZ ; SearchParameters::~SearchParameters(void)
.text$mn:00007944                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000794B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000794E                 call    ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$mn:00007953                 mov     ecx, [ebp+var_C]
.text$mn:00007956                 mov     large fs:0, ecx
.text$mn:0000795D                 pop     ecx
.text$mn:0000795E                 mov     esp, ebp
.text$mn:00007960                 pop     ebp
.text$mn:00007961                 retn
.text$mn:00007961 ??1TreeParams@@QAE@XZ endp
.text$mn:00007961
.text$mn:00007961 ; ---------------------------------------------------------------------------
.text$mn:00007962                 align 4
.text$mn:00007962 _text$mn        ends
.text$mn:00007962
.text$x:00007964 ; ===========================================================================
.text$x:00007964
.text$x:00007964 ; Segment type: Pure code
.text$x:00007964 ; Segment permissions: Read/Execute
.text$x:00007964 _text$x         segment para public 'CODE' use32
.text$x:00007964                 assume cs:_text$x
.text$x:00007964                 ;org 7964h
.text$x:00007964 ; COMDAT (pick associative to section at 7908)
.text$x:00007964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007964
.text$x:00007964 ; =============== S U B R O U T I N E =======================================
.text$x:00007964
.text$x:00007964
.text$x:00007964 __unwindfunclet$??1TreeParams@@QAE@XZ$0 proc near
.text$x:00007964                                         ; DATA XREF: .xdata$x:0000D8F0o
.text$x:00007964                 mov     ecx, [ebp-10h]  ; this
.text$x:00007967                 jmp     ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$x:00007967 __unwindfunclet$??1TreeParams@@QAE@XZ$0 endp
.text$x:00007967
.text$x:0000796C
.text$x:0000796C ; =============== S U B R O U T I N E =======================================
.text$x:0000796C
.text$x:0000796C
.text$x:0000796C __unwindfunclet$??1TreeParams@@QAE@XZ$1 proc near
.text$x:0000796C                                         ; DATA XREF: .xdata$x:0000D8F8o
.text$x:0000796C                 mov     ecx, [ebp-10h]
.text$x:0000796F                 add     ecx, 4Ch ; 'L'  ; this
.text$x:00007972                 jmp     ??1SearchParameters@@QAE@XZ ; SearchParameters::~SearchParameters(void)
.text$x:00007972 __unwindfunclet$??1TreeParams@@QAE@XZ$1 endp
.text$x:00007972
.text$x:00007977
.text$x:00007977 ; =============== S U B R O U T I N E =======================================
.text$x:00007977
.text$x:00007977
.text$x:00007977 __ehhandler$??1TreeParams@@QAE@XZ proc near
.text$x:00007977                                         ; DATA XREF: TreeParams::~TreeParams(void)+5o
.text$x:00007977
.text$x:00007977 arg_4           = dword ptr  8
.text$x:00007977
.text$x:00007977                 mov     edx, [esp+arg_4]
.text$x:0000797B                 lea     eax, [edx+0Ch]
.text$x:0000797E                 mov     ecx, [edx-8]
.text$x:00007981                 xor     ecx, eax
.text$x:00007983                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007988                 mov     eax, offset __ehfuncinfo$??1TreeParams@@QAE@XZ
.text$x:0000798D                 jmp     ___CxxFrameHandler3
.text$x:0000798D __ehhandler$??1TreeParams@@QAE@XZ endp
.text$x:0000798D
.text$x:0000798D ; ---------------------------------------------------------------------------
.text$x:00007992                 align 4
.text$x:00007992 _text$x         ends
.text$x:00007992
.text$mn:00007994 ; ===========================================================================
.text$mn:00007994
.text$mn:00007994 ; Segment type: Pure code
.text$mn:00007994 ; Segment permissions: Read/Execute
.text$mn:00007994 _text$mn        segment para public 'CODE' use32
.text$mn:00007994                 assume cs:_text$mn
.text$mn:00007994                 ;org 7994h
.text$mn:00007994 ; COMDAT (pick any)
.text$mn:00007994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007994
.text$mn:00007994 ; =============== S U B R O U T I N E =======================================
.text$mn:00007994
.text$mn:00007994 ; Attributes: bp-based frame
.text$mn:00007994
.text$mn:00007994 ; _DWORD __thiscall TreeStateNode::~TreeStateNode(TreeStateNode *__hidden this)
.text$mn:00007994                 public ??1TreeStateNode@@QAE@XZ
.text$mn:00007994 ??1TreeStateNode@@QAE@XZ proc near      ; CODE XREF: FunctionListPanel::reload(void)+566p
.text$mn:00007994                                         ; FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+17Cp ...
.text$mn:00007994
.text$mn:00007994 var_10          = dword ptr -10h
.text$mn:00007994 var_C           = dword ptr -0Ch
.text$mn:00007994 var_4           = dword ptr -4
.text$mn:00007994
.text$mn:00007994                 push    ebp
.text$mn:00007995                 mov     ebp, esp
.text$mn:00007997                 push    0FFFFFFFFh
.text$mn:00007999                 push    offset __ehhandler$??1TreeStateNode@@QAE@XZ
.text$mn:0000799E                 mov     eax, large fs:0
.text$mn:000079A4                 push    eax
.text$mn:000079A5                 push    ecx
.text$mn:000079A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000079AB                 xor     eax, ebp
.text$mn:000079AD                 push    eax
.text$mn:000079AE                 lea     eax, [ebp+var_C]
.text$mn:000079B1                 mov     large fs:0, eax
.text$mn:000079B7                 mov     [ebp+var_10], ecx
.text$mn:000079BA                 mov     [ebp+var_4], 2
.text$mn:000079C1                 mov     byte ptr [ebp+var_4], 1
.text$mn:000079C5                 mov     ecx, [ebp+var_10]
.text$mn:000079C8                 add     ecx, 3Ch ; '<'
.text$mn:000079CB                 call    ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)
.text$mn:000079D0                 mov     byte ptr [ebp+var_4], 0
.text$mn:000079D4                 mov     ecx, [ebp+var_10]
.text$mn:000079D7                 add     ecx, 1Ch
.text$mn:000079DA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000079DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000079E6                 mov     ecx, [ebp+var_10]
.text$mn:000079E9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000079EE                 mov     ecx, [ebp+var_C]
.text$mn:000079F1                 mov     large fs:0, ecx
.text$mn:000079F8                 pop     ecx
.text$mn:000079F9                 mov     esp, ebp
.text$mn:000079FB                 pop     ebp
.text$mn:000079FC                 retn
.text$mn:000079FC ??1TreeStateNode@@QAE@XZ endp
.text$mn:000079FC
.text$mn:000079FC ; ---------------------------------------------------------------------------
.text$mn:000079FD                 align 10h
.text$mn:000079FD _text$mn        ends
.text$mn:000079FD
.text$x:00007A00 ; ===========================================================================
.text$x:00007A00
.text$x:00007A00 ; Segment type: Pure code
.text$x:00007A00 ; Segment permissions: Read/Execute
.text$x:00007A00 _text$x         segment para public 'CODE' use32
.text$x:00007A00                 assume cs:_text$x
.text$x:00007A00                 ;org 7A00h
.text$x:00007A00 ; COMDAT (pick associative to section at 7994)
.text$x:00007A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A00
.text$x:00007A00 ; =============== S U B R O U T I N E =======================================
.text$x:00007A00
.text$x:00007A00
.text$x:00007A00 __unwindfunclet$??1TreeStateNode@@QAE@XZ$0 proc near
.text$x:00007A00                                         ; DATA XREF: .xdata$x:0000D7C0o
.text$x:00007A00                 mov     ecx, [ebp-10h]
.text$x:00007A03                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007A03 __unwindfunclet$??1TreeStateNode@@QAE@XZ$0 endp
.text$x:00007A03
.text$x:00007A08
.text$x:00007A08 ; =============== S U B R O U T I N E =======================================
.text$x:00007A08
.text$x:00007A08
.text$x:00007A08 __unwindfunclet$??1TreeStateNode@@QAE@XZ$1 proc near
.text$x:00007A08                                         ; DATA XREF: .xdata$x:0000D7C8o
.text$x:00007A08                 mov     ecx, [ebp-10h]
.text$x:00007A0B                 add     ecx, 1Ch
.text$x:00007A0E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007A0E __unwindfunclet$??1TreeStateNode@@QAE@XZ$1 endp
.text$x:00007A0E
.text$x:00007A13
.text$x:00007A13 ; =============== S U B R O U T I N E =======================================
.text$x:00007A13
.text$x:00007A13
.text$x:00007A13 __unwindfunclet$??1TreeStateNode@@QAE@XZ$2 proc near
.text$x:00007A13                                         ; DATA XREF: .xdata$x:0000D7D0o
.text$x:00007A13                 mov     ecx, [ebp-10h]
.text$x:00007A16                 add     ecx, 3Ch ; '<'
.text$x:00007A19                 jmp     ??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)
.text$x:00007A19 __unwindfunclet$??1TreeStateNode@@QAE@XZ$2 endp
.text$x:00007A19
.text$x:00007A1E
.text$x:00007A1E ; =============== S U B R O U T I N E =======================================
.text$x:00007A1E
.text$x:00007A1E
.text$x:00007A1E __ehhandler$??1TreeStateNode@@QAE@XZ proc near
.text$x:00007A1E                                         ; DATA XREF: TreeStateNode::~TreeStateNode(void)+5o
.text$x:00007A1E
.text$x:00007A1E arg_4           = dword ptr  8
.text$x:00007A1E
.text$x:00007A1E                 mov     edx, [esp+arg_4]
.text$x:00007A22                 lea     eax, [edx+0Ch]
.text$x:00007A25                 mov     ecx, [edx-8]
.text$x:00007A28                 xor     ecx, eax
.text$x:00007A2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007A2F                 mov     eax, offset __ehfuncinfo$??1TreeStateNode@@QAE@XZ
.text$x:00007A34                 jmp     ___CxxFrameHandler3
.text$x:00007A34 __ehhandler$??1TreeStateNode@@QAE@XZ endp
.text$x:00007A34
.text$x:00007A34 ; ---------------------------------------------------------------------------
.text$x:00007A39                 align 4
.text$x:00007A39 _text$x         ends
.text$x:00007A39
.text$mn:00007A3C ; ===========================================================================
.text$mn:00007A3C
.text$mn:00007A3C ; Segment type: Pure code
.text$mn:00007A3C ; Segment permissions: Read/Execute
.text$mn:00007A3C _text$mn        segment para public 'CODE' use32
.text$mn:00007A3C                 assume cs:_text$mn
.text$mn:00007A3C                 ;org 7A3Ch
.text$mn:00007A3C ; COMDAT (pick any)
.text$mn:00007A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A3C
.text$mn:00007A3C ; =============== S U B R O U T I N E =======================================
.text$mn:00007A3C
.text$mn:00007A3C ; Attributes: bp-based frame
.text$mn:00007A3C
.text$mn:00007A3C ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00007A3C                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00007A3C ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00007A3C                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00007A3C                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00007A3C
.text$mn:00007A3C var_4           = dword ptr -4
.text$mn:00007A3C
.text$mn:00007A3C                 push    ebp
.text$mn:00007A3D                 mov     ebp, esp
.text$mn:00007A3F                 push    ecx
.text$mn:00007A40                 mov     [ebp+var_4], ecx
.text$mn:00007A43                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007A46                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007A4B                 mov     esp, ebp
.text$mn:00007A4D                 pop     ebp
.text$mn:00007A4E                 retn
.text$mn:00007A4E ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00007A4E
.text$mn:00007A4E ; ---------------------------------------------------------------------------
.text$mn:00007A4F                 align 10h
.text$mn:00007A4F _text$mn        ends
.text$mn:00007A4F
.text$mn:00007A50 ; ===========================================================================
.text$mn:00007A50
.text$mn:00007A50 ; Segment type: Pure code
.text$mn:00007A50 ; Segment permissions: Read/Execute
.text$mn:00007A50 _text$mn        segment para public 'CODE' use32
.text$mn:00007A50                 assume cs:_text$mn
.text$mn:00007A50                 ;org 7A50h
.text$mn:00007A50 ; COMDAT (pick any)
.text$mn:00007A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A50
.text$mn:00007A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A50
.text$mn:00007A50 ; Attributes: bp-based frame
.text$mn:00007A50
.text$mn:00007A50 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00007A50                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00007A50 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00007A50                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00007A50                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00007A50
.text$mn:00007A50 var_10          = dword ptr -10h
.text$mn:00007A50 var_C           = dword ptr -0Ch
.text$mn:00007A50 var_4           = dword ptr -4
.text$mn:00007A50
.text$mn:00007A50                 push    ebp
.text$mn:00007A51                 mov     ebp, esp
.text$mn:00007A53                 push    0FFFFFFFFh
.text$mn:00007A55                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00007A5A                 mov     eax, large fs:0
.text$mn:00007A60                 push    eax
.text$mn:00007A61                 push    ecx
.text$mn:00007A62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A67                 xor     eax, ebp
.text$mn:00007A69                 push    eax
.text$mn:00007A6A                 lea     eax, [ebp+var_C]
.text$mn:00007A6D                 mov     large fs:0, eax
.text$mn:00007A73                 mov     [ebp+var_10], ecx
.text$mn:00007A76                 mov     [ebp+var_4], 0
.text$mn:00007A7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007A84                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007A87                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00007A8C                 mov     ecx, [ebp+var_C]
.text$mn:00007A8F                 mov     large fs:0, ecx
.text$mn:00007A96                 pop     ecx
.text$mn:00007A97                 mov     esp, ebp
.text$mn:00007A99                 pop     ebp
.text$mn:00007A9A                 retn
.text$mn:00007A9A ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00007A9A
.text$mn:00007A9A ; ---------------------------------------------------------------------------
.text$mn:00007A9B                 align 4
.text$mn:00007A9B _text$mn        ends
.text$mn:00007A9B
.text$x:00007A9C ; ===========================================================================
.text$x:00007A9C
.text$x:00007A9C ; Segment type: Pure code
.text$x:00007A9C ; Segment permissions: Read/Execute
.text$x:00007A9C _text$x         segment para public 'CODE' use32
.text$x:00007A9C                 assume cs:_text$x
.text$x:00007A9C                 ;org 7A9Ch
.text$x:00007A9C ; COMDAT (pick associative to section at 7A50)
.text$x:00007A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A9C
.text$x:00007A9C ; =============== S U B R O U T I N E =======================================
.text$x:00007A9C
.text$x:00007A9C
.text$x:00007A9C __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00007A9C                                         ; DATA XREF: .xdata$x:0000CD88o
.text$x:00007A9C                 mov     ecx, [ebp-10h]  ; this
.text$x:00007A9F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00007A9F __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00007A9F
.text$x:00007AA4
.text$x:00007AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00007AA4
.text$x:00007AA4
.text$x:00007AA4 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00007AA4                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00007AA4
.text$x:00007AA4 arg_4           = dword ptr  8
.text$x:00007AA4
.text$x:00007AA4                 mov     edx, [esp+arg_4]
.text$x:00007AA8                 lea     eax, [edx+0Ch]
.text$x:00007AAB                 mov     ecx, [edx-8]
.text$x:00007AAE                 xor     ecx, eax
.text$x:00007AB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007AB5                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00007ABA                 jmp     ___CxxFrameHandler3
.text$x:00007ABA __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00007ABA
.text$x:00007ABA ; ---------------------------------------------------------------------------
.text$x:00007ABF                 align 10h
.text$x:00007ABF _text$x         ends
.text$x:00007ABF
.text$mn:00007AC0 ; ===========================================================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Segment type: Pure code
.text$mn:00007AC0 ; Segment permissions: Read/Execute
.text$mn:00007AC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AC0                 assume cs:_text$mn
.text$mn:00007AC0                 ;org 7AC0h
.text$mn:00007AC0 ; COMDAT (pick any)
.text$mn:00007AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AC0
.text$mn:00007AC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Attributes: bp-based frame
.text$mn:00007AC0
.text$mn:00007AC0 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00007AC0                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00007AC0 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00007AC0                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00007AC0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00007AC0
.text$mn:00007AC0 var_10          = dword ptr -10h
.text$mn:00007AC0 var_C           = dword ptr -0Ch
.text$mn:00007AC0 var_4           = dword ptr -4
.text$mn:00007AC0
.text$mn:00007AC0                 push    ebp
.text$mn:00007AC1                 mov     ebp, esp
.text$mn:00007AC3                 push    0FFFFFFFFh
.text$mn:00007AC5                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00007ACA                 mov     eax, large fs:0
.text$mn:00007AD0                 push    eax
.text$mn:00007AD1                 push    ecx
.text$mn:00007AD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007AD7                 xor     eax, ebp
.text$mn:00007AD9                 push    eax
.text$mn:00007ADA                 lea     eax, [ebp+var_C]
.text$mn:00007ADD                 mov     large fs:0, eax
.text$mn:00007AE3                 mov     [ebp+var_10], ecx
.text$mn:00007AE6                 mov     [ebp+var_4], 0
.text$mn:00007AED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007AF4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007AF7                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007AFC                 mov     ecx, [ebp+var_C]
.text$mn:00007AFF                 mov     large fs:0, ecx
.text$mn:00007B06                 pop     ecx
.text$mn:00007B07                 mov     esp, ebp
.text$mn:00007B09                 pop     ebp
.text$mn:00007B0A                 retn
.text$mn:00007B0A ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00007B0A
.text$mn:00007B0A ; ---------------------------------------------------------------------------
.text$mn:00007B0B                 align 4
.text$mn:00007B0B _text$mn        ends
.text$mn:00007B0B
.text$x:00007B0C ; ===========================================================================
.text$x:00007B0C
.text$x:00007B0C ; Segment type: Pure code
.text$x:00007B0C ; Segment permissions: Read/Execute
.text$x:00007B0C _text$x         segment para public 'CODE' use32
.text$x:00007B0C                 assume cs:_text$x
.text$x:00007B0C                 ;org 7B0Ch
.text$x:00007B0C ; COMDAT (pick associative to section at 7AC0)
.text$x:00007B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007B0C
.text$x:00007B0C ; =============== S U B R O U T I N E =======================================
.text$x:00007B0C
.text$x:00007B0C
.text$x:00007B0C __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00007B0C                                         ; DATA XREF: .xdata$x:0000CE0Co
.text$x:00007B0C                 mov     ecx, [ebp-10h]  ; this
.text$x:00007B0F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00007B0F __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00007B0F
.text$x:00007B14
.text$x:00007B14 ; =============== S U B R O U T I N E =======================================
.text$x:00007B14
.text$x:00007B14
.text$x:00007B14 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00007B14                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00007B14
.text$x:00007B14 arg_4           = dword ptr  8
.text$x:00007B14
.text$x:00007B14                 mov     edx, [esp+arg_4]
.text$x:00007B18                 lea     eax, [edx+0Ch]
.text$x:00007B1B                 mov     ecx, [edx-8]
.text$x:00007B1E                 xor     ecx, eax
.text$x:00007B20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B25                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00007B2A                 jmp     ___CxxFrameHandler3
.text$x:00007B2A __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00007B2A
.text$x:00007B2A ; ---------------------------------------------------------------------------
.text$x:00007B2F                 align 10h
.text$x:00007B2F _text$x         ends
.text$x:00007B2F
.text$mn:00007B30 ; ===========================================================================
.text$mn:00007B30
.text$mn:00007B30 ; Segment type: Pure code
.text$mn:00007B30 ; Segment permissions: Read/Execute
.text$mn:00007B30 _text$mn        segment para public 'CODE' use32
.text$mn:00007B30                 assume cs:_text$mn
.text$mn:00007B30                 ;org 7B30h
.text$mn:00007B30 ; COMDAT (pick any)
.text$mn:00007B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B30
.text$mn:00007B30 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B30
.text$mn:00007B30 ; Attributes: bp-based frame
.text$mn:00007B30
.text$mn:00007B30 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00007B30                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00007B30 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00007B30                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00007B30                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00007B30
.text$mn:00007B30 var_14          = byte ptr -14h
.text$mn:00007B30 var_10          = dword ptr -10h
.text$mn:00007B30 var_C           = dword ptr -0Ch
.text$mn:00007B30 var_4           = dword ptr -4
.text$mn:00007B30
.text$mn:00007B30                 push    ebp
.text$mn:00007B31                 mov     ebp, esp
.text$mn:00007B33                 push    0FFFFFFFFh
.text$mn:00007B35                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00007B3A                 mov     eax, large fs:0
.text$mn:00007B40                 push    eax
.text$mn:00007B41                 sub     esp, 8
.text$mn:00007B44                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007B49                 xor     eax, ebp
.text$mn:00007B4B                 push    eax
.text$mn:00007B4C                 lea     eax, [ebp+var_C]
.text$mn:00007B4F                 mov     large fs:0, eax
.text$mn:00007B55                 mov     [ebp+var_10], ecx
.text$mn:00007B58                 push    3               ; int
.text$mn:00007B5A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007B5D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007B62                 mov     [ebp+var_4], 0
.text$mn:00007B69                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007B6C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00007B71                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007B78                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007B7B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00007B80                 mov     ecx, [ebp+var_C]
.text$mn:00007B83                 mov     large fs:0, ecx
.text$mn:00007B8A                 pop     ecx
.text$mn:00007B8B                 mov     esp, ebp
.text$mn:00007B8D                 pop     ebp
.text$mn:00007B8E                 retn
.text$mn:00007B8E ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00007B8E
.text$mn:00007B8E ; ---------------------------------------------------------------------------
.text$mn:00007B8F                 align 10h
.text$mn:00007B8F _text$mn        ends
.text$mn:00007B8F
.text$x:00007B90 ; ===========================================================================
.text$x:00007B90
.text$x:00007B90 ; Segment type: Pure code
.text$x:00007B90 ; Segment permissions: Read/Execute
.text$x:00007B90 _text$x         segment para public 'CODE' use32
.text$x:00007B90                 assume cs:_text$x
.text$x:00007B90                 ;org 7B90h
.text$x:00007B90 ; COMDAT (pick associative to section at 7B30)
.text$x:00007B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007B90
.text$x:00007B90 ; =============== S U B R O U T I N E =======================================
.text$x:00007B90
.text$x:00007B90
.text$x:00007B90 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00007B90                                         ; DATA XREF: .xdata$x:0000CB3Co
.text$x:00007B90                 lea     ecx, [ebp-14h]  ; this
.text$x:00007B93                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007B93 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:00007B93
.text$x:00007B98
.text$x:00007B98 ; =============== S U B R O U T I N E =======================================
.text$x:00007B98
.text$x:00007B98
.text$x:00007B98 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00007B98                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00007B98
.text$x:00007B98 arg_4           = dword ptr  8
.text$x:00007B98
.text$x:00007B98                 mov     edx, [esp+arg_4]
.text$x:00007B9C                 lea     eax, [edx+0Ch]
.text$x:00007B9F                 mov     ecx, [edx-0Ch]
.text$x:00007BA2                 xor     ecx, eax
.text$x:00007BA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007BA9                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00007BAE                 jmp     ___CxxFrameHandler3
.text$x:00007BAE __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00007BAE
.text$x:00007BAE ; ---------------------------------------------------------------------------
.text$x:00007BB3                 align 4
.text$x:00007BB3 _text$x         ends
.text$x:00007BB3
.text$mn:00007BB4 ; ===========================================================================
.text$mn:00007BB4
.text$mn:00007BB4 ; Segment type: Pure code
.text$mn:00007BB4 ; Segment permissions: Read/Execute
.text$mn:00007BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00007BB4                 assume cs:_text$mn
.text$mn:00007BB4                 ;org 7BB4h
.text$mn:00007BB4 ; COMDAT (pick any)
.text$mn:00007BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BB4
.text$mn:00007BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BB4
.text$mn:00007BB4 ; Attributes: bp-based frame
.text$mn:00007BB4
.text$mn:00007BB4 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00007BB4                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00007BB4 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00007BB4                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00007BB4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00007BB4
.text$mn:00007BB4 var_10          = dword ptr -10h
.text$mn:00007BB4 var_C           = dword ptr -0Ch
.text$mn:00007BB4 var_4           = dword ptr -4
.text$mn:00007BB4
.text$mn:00007BB4                 push    ebp
.text$mn:00007BB5                 mov     ebp, esp
.text$mn:00007BB7                 push    0FFFFFFFFh
.text$mn:00007BB9                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00007BBE                 mov     eax, large fs:0
.text$mn:00007BC4                 push    eax
.text$mn:00007BC5                 push    ecx
.text$mn:00007BC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007BCB                 xor     eax, ebp
.text$mn:00007BCD                 push    eax
.text$mn:00007BCE                 lea     eax, [ebp+var_C]
.text$mn:00007BD1                 mov     large fs:0, eax
.text$mn:00007BD7                 mov     [ebp+var_10], ecx
.text$mn:00007BDA                 mov     [ebp+var_4], 0
.text$mn:00007BE1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007BE8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007BEB                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007BF0                 mov     ecx, [ebp+var_C]
.text$mn:00007BF3                 mov     large fs:0, ecx
.text$mn:00007BFA                 pop     ecx
.text$mn:00007BFB                 mov     esp, ebp
.text$mn:00007BFD                 pop     ebp
.text$mn:00007BFE                 retn
.text$mn:00007BFE ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00007BFE
.text$mn:00007BFE ; ---------------------------------------------------------------------------
.text$mn:00007BFF                 align 10h
.text$mn:00007BFF _text$mn        ends
.text$mn:00007BFF
.text$x:00007C00 ; ===========================================================================
.text$x:00007C00
.text$x:00007C00 ; Segment type: Pure code
.text$x:00007C00 ; Segment permissions: Read/Execute
.text$x:00007C00 _text$x         segment para public 'CODE' use32
.text$x:00007C00                 assume cs:_text$x
.text$x:00007C00                 ;org 7C00h
.text$x:00007C00 ; COMDAT (pick associative to section at 7BB4)
.text$x:00007C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007C00
.text$x:00007C00 ; =============== S U B R O U T I N E =======================================
.text$x:00007C00
.text$x:00007C00
.text$x:00007C00 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00007C00                                         ; DATA XREF: .xdata$x:0000CE90o
.text$x:00007C00                 mov     ecx, [ebp-10h]  ; this
.text$x:00007C03                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00007C03 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00007C03
.text$x:00007C08
.text$x:00007C08 ; =============== S U B R O U T I N E =======================================
.text$x:00007C08
.text$x:00007C08
.text$x:00007C08 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00007C08                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00007C08
.text$x:00007C08 arg_4           = dword ptr  8
.text$x:00007C08
.text$x:00007C08                 mov     edx, [esp+arg_4]
.text$x:00007C0C                 lea     eax, [edx+0Ch]
.text$x:00007C0F                 mov     ecx, [edx-8]
.text$x:00007C12                 xor     ecx, eax
.text$x:00007C14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007C19                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00007C1E                 jmp     ___CxxFrameHandler3
.text$x:00007C1E __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00007C1E
.text$x:00007C1E ; ---------------------------------------------------------------------------
.text$x:00007C23                 align 4
.text$x:00007C23 _text$x         ends
.text$x:00007C23
.text$mn:00007C24 ; ===========================================================================
.text$mn:00007C24
.text$mn:00007C24 ; Segment type: Pure code
.text$mn:00007C24 ; Segment permissions: Read/Execute
.text$mn:00007C24 _text$mn        segment para public 'CODE' use32
.text$mn:00007C24                 assume cs:_text$mn
.text$mn:00007C24                 ;org 7C24h
.text$mn:00007C24 ; COMDAT (pick any)
.text$mn:00007C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C24
.text$mn:00007C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C24
.text$mn:00007C24 ; Attributes: bp-based frame
.text$mn:00007C24
.text$mn:00007C24 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00007C24                 public ??1error_category@std@@UAE@XZ
.text$mn:00007C24 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00007C24                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00007C24
.text$mn:00007C24 var_4           = dword ptr -4
.text$mn:00007C24
.text$mn:00007C24                 push    ebp
.text$mn:00007C25                 mov     ebp, esp
.text$mn:00007C27                 push    ecx
.text$mn:00007C28                 mov     [ebp+var_4], ecx
.text$mn:00007C2B                 mov     eax, [ebp+var_4]
.text$mn:00007C2E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00007C34                 mov     esp, ebp
.text$mn:00007C36                 pop     ebp
.text$mn:00007C37                 retn
.text$mn:00007C37 ??1error_category@std@@UAE@XZ endp
.text$mn:00007C37
.text$mn:00007C37 _text$mn        ends
.text$mn:00007C37
.text$mn:00007C38 ; ===========================================================================
.text$mn:00007C38
.text$mn:00007C38 ; Segment type: Pure code
.text$mn:00007C38 ; Segment permissions: Read/Execute
.text$mn:00007C38 _text$mn        segment para public 'CODE' use32
.text$mn:00007C38                 assume cs:_text$mn
.text$mn:00007C38                 ;org 7C38h
.text$mn:00007C38 ; COMDAT (pick any)
.text$mn:00007C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C38
.text$mn:00007C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C38
.text$mn:00007C38 ; Attributes: bp-based frame
.text$mn:00007C38
.text$mn:00007C38 ; _DWORD __thiscall foundInfo::~foundInfo(foundInfo *__hidden this)
.text$mn:00007C38                 public ??1foundInfo@@QAE@XZ
.text$mn:00007C38 ??1foundInfo@@QAE@XZ proc near          ; CODE XREF: foundInfo::`scalar deleting destructor'(uint)+Ap
.text$mn:00007C38
.text$mn:00007C38 var_10          = dword ptr -10h
.text$mn:00007C38 var_C           = dword ptr -0Ch
.text$mn:00007C38 var_4           = dword ptr -4
.text$mn:00007C38
.text$mn:00007C38                 push    ebp
.text$mn:00007C39                 mov     ebp, esp
.text$mn:00007C3B                 push    0FFFFFFFFh
.text$mn:00007C3D                 push    offset __ehhandler$??1foundInfo@@QAE@XZ
.text$mn:00007C42                 mov     eax, large fs:0
.text$mn:00007C48                 push    eax
.text$mn:00007C49                 push    ecx
.text$mn:00007C4A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007C4F                 xor     eax, ebp
.text$mn:00007C51                 push    eax
.text$mn:00007C52                 lea     eax, [ebp+var_C]
.text$mn:00007C55                 mov     large fs:0, eax
.text$mn:00007C5B                 mov     [ebp+var_10], ecx
.text$mn:00007C5E                 mov     [ebp+var_4], 1
.text$mn:00007C65                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007C69                 mov     ecx, [ebp+var_10]
.text$mn:00007C6C                 add     ecx, 1Ch
.text$mn:00007C6F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007C74                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007C7B                 mov     ecx, [ebp+var_10]
.text$mn:00007C7E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007C83                 mov     ecx, [ebp+var_C]
.text$mn:00007C86                 mov     large fs:0, ecx
.text$mn:00007C8D                 pop     ecx
.text$mn:00007C8E                 mov     esp, ebp
.text$mn:00007C90                 pop     ebp
.text$mn:00007C91                 retn
.text$mn:00007C91 ??1foundInfo@@QAE@XZ endp
.text$mn:00007C91
.text$mn:00007C91 ; ---------------------------------------------------------------------------
.text$mn:00007C92                 align 4
.text$mn:00007C92 _text$mn        ends
.text$mn:00007C92
.text$x:00007C94 ; ===========================================================================
.text$x:00007C94
.text$x:00007C94 ; Segment type: Pure code
.text$x:00007C94 ; Segment permissions: Read/Execute
.text$x:00007C94 _text$x         segment para public 'CODE' use32
.text$x:00007C94                 assume cs:_text$x
.text$x:00007C94                 ;org 7C94h
.text$x:00007C94 ; COMDAT (pick associative to section at 7C38)
.text$x:00007C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007C94
.text$x:00007C94 ; =============== S U B R O U T I N E =======================================
.text$x:00007C94
.text$x:00007C94
.text$x:00007C94 __unwindfunclet$??1foundInfo@@QAE@XZ$0 proc near
.text$x:00007C94                                         ; DATA XREF: .xdata$x:0000D1FCo
.text$x:00007C94                 mov     ecx, [ebp-10h]
.text$x:00007C97                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C97 __unwindfunclet$??1foundInfo@@QAE@XZ$0 endp
.text$x:00007C97
.text$x:00007C9C
.text$x:00007C9C ; =============== S U B R O U T I N E =======================================
.text$x:00007C9C
.text$x:00007C9C
.text$x:00007C9C __unwindfunclet$??1foundInfo@@QAE@XZ$1 proc near
.text$x:00007C9C                                         ; DATA XREF: .xdata$x:0000D204o
.text$x:00007C9C                 mov     ecx, [ebp-10h]
.text$x:00007C9F                 add     ecx, 1Ch
.text$x:00007CA2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007CA2 __unwindfunclet$??1foundInfo@@QAE@XZ$1 endp
.text$x:00007CA2
.text$x:00007CA7
.text$x:00007CA7 ; =============== S U B R O U T I N E =======================================
.text$x:00007CA7
.text$x:00007CA7
.text$x:00007CA7 __ehhandler$??1foundInfo@@QAE@XZ proc near
.text$x:00007CA7                                         ; DATA XREF: foundInfo::~foundInfo(void)+5o
.text$x:00007CA7
.text$x:00007CA7 arg_4           = dword ptr  8
.text$x:00007CA7
.text$x:00007CA7                 mov     edx, [esp+arg_4]
.text$x:00007CAB                 lea     eax, [edx+0Ch]
.text$x:00007CAE                 mov     ecx, [edx-8]
.text$x:00007CB1                 xor     ecx, eax
.text$x:00007CB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007CB8                 mov     eax, offset __ehfuncinfo$??1foundInfo@@QAE@XZ
.text$x:00007CBD                 jmp     ___CxxFrameHandler3
.text$x:00007CBD __ehhandler$??1foundInfo@@QAE@XZ endp
.text$x:00007CBD
.text$x:00007CBD ; ---------------------------------------------------------------------------
.text$x:00007CC2                 align 4
.text$x:00007CC2 _text$x         ends
.text$x:00007CC2
.text$mn:00007CC4 ; ===========================================================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Segment type: Pure code
.text$mn:00007CC4 ; Segment permissions: Read/Execute
.text$mn:00007CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CC4                 assume cs:_text$mn
.text$mn:00007CC4                 ;org 7CC4h
.text$mn:00007CC4 ; COMDAT (pick any)
.text$mn:00007CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CC4
.text$mn:00007CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Attributes: bp-based frame
.text$mn:00007CC4
.text$mn:00007CC4 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00007CC4                 public ??2@YAPAXIPAX@Z
.text$mn:00007CC4 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00007CC4                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00007CC4
.text$mn:00007CC4 arg_4           = dword ptr  0Ch
.text$mn:00007CC4
.text$mn:00007CC4                 push    ebp
.text$mn:00007CC5                 mov     ebp, esp
.text$mn:00007CC7                 mov     eax, [ebp+arg_4]
.text$mn:00007CCA                 pop     ebp
.text$mn:00007CCB                 retn
.text$mn:00007CCB ??2@YAPAXIPAX@Z endp
.text$mn:00007CCB
.text$mn:00007CCB _text$mn        ends
.text$mn:00007CCB
.text$mn:00007CCC ; ===========================================================================
.text$mn:00007CCC
.text$mn:00007CCC ; Segment type: Pure code
.text$mn:00007CCC ; Segment permissions: Read/Execute
.text$mn:00007CCC _text$mn        segment para public 'CODE' use32
.text$mn:00007CCC                 assume cs:_text$mn
.text$mn:00007CCC                 ;org 7CCCh
.text$mn:00007CCC ; COMDAT (pick any)
.text$mn:00007CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CCC
.text$mn:00007CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00007CCC
.text$mn:00007CCC ; Attributes: bp-based frame
.text$mn:00007CCC
.text$mn:00007CCC ; void __cdecl operator delete(void *)
.text$mn:00007CCC                 public ??3@YAXPAX0@Z
.text$mn:00007CCC ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00007CCC                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00007CCC                 push    ebp
.text$mn:00007CCD                 mov     ebp, esp
.text$mn:00007CCF                 pop     ebp
.text$mn:00007CD0                 retn
.text$mn:00007CD0 ??3@YAXPAX0@Z   endp
.text$mn:00007CD0
.text$mn:00007CD0 ; ---------------------------------------------------------------------------
.text$mn:00007CD1                 align 4
.text$mn:00007CD1 _text$mn        ends
.text$mn:00007CD1
.text$mn:00007CD4 ; ===========================================================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Segment type: Pure code
.text$mn:00007CD4 ; Segment permissions: Read/Execute
.text$mn:00007CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD4                 assume cs:_text$mn
.text$mn:00007CD4                 ;org 7CD4h
.text$mn:00007CD4 ; COMDAT (pick any)
.text$mn:00007CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD4
.text$mn:00007CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Attributes: bp-based frame
.text$mn:00007CD4
.text$mn:00007CD4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00007CD4                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00007CD4 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00007CD4                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+426p
.text$mn:00007CD4                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+491p ...
.text$mn:00007CD4
.text$mn:00007CD4 var_2C          = dword ptr -2Ch
.text$mn:00007CD4 var_28          = dword ptr -28h
.text$mn:00007CD4 var_24          = dword ptr -24h
.text$mn:00007CD4 var_20          = dword ptr -20h
.text$mn:00007CD4 var_1C          = dword ptr -1Ch
.text$mn:00007CD4 var_18          = dword ptr -18h
.text$mn:00007CD4 var_14          = dword ptr -14h
.text$mn:00007CD4 var_F           = byte ptr -0Fh
.text$mn:00007CD4 var_E           = byte ptr -0Eh
.text$mn:00007CD4 var_D           = byte ptr -0Dh
.text$mn:00007CD4 var_C           = dword ptr -0Ch
.text$mn:00007CD4 var_4           = dword ptr -4
.text$mn:00007CD4 arg_0           = dword ptr  8
.text$mn:00007CD4
.text$mn:00007CD4                 push    ebp
.text$mn:00007CD5                 mov     ebp, esp
.text$mn:00007CD7                 push    0FFFFFFFFh
.text$mn:00007CD9                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00007CDE                 mov     eax, large fs:0
.text$mn:00007CE4                 push    eax
.text$mn:00007CE5                 sub     esp, 20h
.text$mn:00007CE8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007CED                 xor     eax, ebp
.text$mn:00007CEF                 push    eax
.text$mn:00007CF0                 lea     eax, [ebp+var_C]
.text$mn:00007CF3                 mov     large fs:0, eax
.text$mn:00007CF9                 mov     [ebp+var_14], ecx
.text$mn:00007CFC                 mov     eax, [ebp+var_14]
.text$mn:00007CFF                 cmp     eax, [ebp+arg_0]
.text$mn:00007D02                 jz      loc_7DBB
.text$mn:00007D08                 push    0
.text$mn:00007D0A                 push    1
.text$mn:00007D0C                 mov     ecx, [ebp+var_14]
.text$mn:00007D0F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007D14                 xor     ecx, ecx
.text$mn:00007D16                 jz      short loc_7D2D
.text$mn:00007D18                 lea     edx, [ebp+var_D]
.text$mn:00007D1B                 push    edx
.text$mn:00007D1C                 mov     ecx, [ebp+arg_0]
.text$mn:00007D1F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007D24                 push    eax
.text$mn:00007D25                 mov     ecx, [ebp+var_14]
.text$mn:00007D28                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00007D2D
.text$mn:00007D2D loc_7D2D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:00007D2D                 lea     eax, [ebp+var_E]
.text$mn:00007D30                 push    eax
.text$mn:00007D31                 mov     ecx, [ebp+arg_0]
.text$mn:00007D34                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007D39                 push    eax
.text$mn:00007D3A                 lea     ecx, [ebp+var_F]
.text$mn:00007D3D                 push    ecx
.text$mn:00007D3E                 mov     ecx, [ebp+var_14]
.text$mn:00007D41                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007D46                 push    eax
.text$mn:00007D47                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00007D4C                 add     esp, 8
.text$mn:00007D4F                 movzx   edx, al
.text$mn:00007D52                 test    edx, edx
.text$mn:00007D54                 jz      short loc_7DA6
.text$mn:00007D56                 sub     esp, 0Ch
.text$mn:00007D59                 mov     eax, esp
.text$mn:00007D5B                 mov     [ebp+var_20], esp
.text$mn:00007D5E                 push    eax
.text$mn:00007D5F                 mov     ecx, [ebp+arg_0]
.text$mn:00007D62                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00007D67                 mov     [ebp+var_18], eax
.text$mn:00007D6A                 mov     ecx, [ebp+var_18]
.text$mn:00007D6D                 mov     [ebp+var_24], ecx
.text$mn:00007D70                 mov     [ebp+var_4], 0
.text$mn:00007D77                 sub     esp, 0Ch
.text$mn:00007D7A                 mov     edx, esp
.text$mn:00007D7C                 mov     [ebp+var_28], esp
.text$mn:00007D7F                 push    edx
.text$mn:00007D80                 mov     ecx, [ebp+arg_0]
.text$mn:00007D83                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00007D88                 mov     [ebp+var_1C], eax
.text$mn:00007D8B                 mov     eax, [ebp+var_1C]
.text$mn:00007D8E                 mov     [ebp+var_2C], eax
.text$mn:00007D91                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007D95                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007D9C                 mov     ecx, [ebp+var_14]
.text$mn:00007D9F                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00007DA4                 jmp     short loc_7DBB
.text$mn:00007DA6 ; ---------------------------------------------------------------------------
.text$mn:00007DA6
.text$mn:00007DA6 loc_7DA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00007DA6                 mov     ecx, [ebp+arg_0]
.text$mn:00007DA9                 push    ecx
.text$mn:00007DAA                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00007DAF                 add     esp, 4
.text$mn:00007DB2                 push    eax
.text$mn:00007DB3                 mov     ecx, [ebp+var_14]
.text$mn:00007DB6                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00007DBB
.text$mn:00007DBB loc_7DBB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00007DBB                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00007DBB                 mov     eax, [ebp+var_14]
.text$mn:00007DBE                 mov     ecx, [ebp+var_C]
.text$mn:00007DC1                 mov     large fs:0, ecx
.text$mn:00007DC8                 pop     ecx
.text$mn:00007DC9                 mov     esp, ebp
.text$mn:00007DCB                 pop     ebp
.text$mn:00007DCC                 retn    4
.text$mn:00007DCC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00007DCC
.text$mn:00007DCC ; ---------------------------------------------------------------------------
.text$mn:00007DCF                 align 10h
.text$mn:00007DCF _text$mn        ends
.text$mn:00007DCF
.text$x:00007DD0 ; ===========================================================================
.text$x:00007DD0
.text$x:00007DD0 ; Segment type: Pure code
.text$x:00007DD0 ; Segment permissions: Read/Execute
.text$x:00007DD0 _text$x         segment para public 'CODE' use32
.text$x:00007DD0                 assume cs:_text$x
.text$x:00007DD0                 ;org 7DD0h
.text$x:00007DD0 ; COMDAT (pick associative to section at 7CD4)
.text$x:00007DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007DD0
.text$x:00007DD0 ; =============== S U B R O U T I N E =======================================
.text$x:00007DD0
.text$x:00007DD0
.text$x:00007DD0 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00007DD0                                         ; DATA XREF: .xdata$x:0000CFF0o
.text$x:00007DD0                 mov     ecx, [ebp-20h]
.text$x:00007DD3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007DD3 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00007DD3
.text$x:00007DD8
.text$x:00007DD8 ; =============== S U B R O U T I N E =======================================
.text$x:00007DD8
.text$x:00007DD8
.text$x:00007DD8 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00007DD8                                         ; DATA XREF: .xdata$x:0000CFF8o
.text$x:00007DD8                 mov     ecx, [ebp-28h]
.text$x:00007DDB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007DDB __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00007DDB
.text$x:00007DE0
.text$x:00007DE0 ; =============== S U B R O U T I N E =======================================
.text$x:00007DE0
.text$x:00007DE0
.text$x:00007DE0 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00007DE0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00007DE0
.text$x:00007DE0 arg_4           = dword ptr  8
.text$x:00007DE0
.text$x:00007DE0                 mov     edx, [esp+arg_4]
.text$x:00007DE4                 lea     eax, [edx+0Ch]
.text$x:00007DE7                 mov     ecx, [edx-24h]
.text$x:00007DEA                 xor     ecx, eax
.text$x:00007DEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007DF1                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00007DF6                 jmp     ___CxxFrameHandler3
.text$x:00007DF6 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00007DF6
.text$x:00007DF6 ; ---------------------------------------------------------------------------
.text$x:00007DFB                 align 4
.text$x:00007DFB _text$x         ends
.text$x:00007DFB
.text$mn:00007DFC ; ===========================================================================
.text$mn:00007DFC
.text$mn:00007DFC ; Segment type: Pure code
.text$mn:00007DFC ; Segment permissions: Read/Execute
.text$mn:00007DFC _text$mn        segment para public 'CODE' use32
.text$mn:00007DFC                 assume cs:_text$mn
.text$mn:00007DFC                 ;org 7DFCh
.text$mn:00007DFC ; COMDAT (pick any)
.text$mn:00007DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DFC
.text$mn:00007DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007DFC
.text$mn:00007DFC ; Attributes: bp-based frame
.text$mn:00007DFC
.text$mn:00007DFC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00007DFC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007DFC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00007DFC                                         ; CODE XREF: FunctionListPanel::reload(void)+2E9p
.text$mn:00007DFC                                         ; TreeStateNode::operator=(TreeStateNode const &)+Ep ...
.text$mn:00007DFC
.text$mn:00007DFC var_8           = dword ptr -8
.text$mn:00007DFC var_3           = byte ptr -3
.text$mn:00007DFC var_2           = byte ptr -2
.text$mn:00007DFC var_1           = byte ptr -1
.text$mn:00007DFC arg_0           = dword ptr  8
.text$mn:00007DFC
.text$mn:00007DFC                 push    ebp
.text$mn:00007DFD                 mov     ebp, esp
.text$mn:00007DFF                 sub     esp, 8
.text$mn:00007E02                 mov     [ebp+var_8], ecx
.text$mn:00007E05                 mov     eax, [ebp+var_8]
.text$mn:00007E08                 cmp     eax, [ebp+arg_0]
.text$mn:00007E0B                 jz      short loc_7E67
.text$mn:00007E0D                 lea     ecx, [ebp+var_1]
.text$mn:00007E10                 push    ecx
.text$mn:00007E11                 mov     ecx, [ebp+arg_0]
.text$mn:00007E14                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007E19                 push    eax
.text$mn:00007E1A                 lea     edx, [ebp+var_2]
.text$mn:00007E1D                 push    edx
.text$mn:00007E1E                 mov     ecx, [ebp+var_8]
.text$mn:00007E21                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007E26                 push    eax
.text$mn:00007E27                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00007E2C                 add     esp, 8
.text$mn:00007E2F                 movzx   eax, al
.text$mn:00007E32                 test    eax, eax
.text$mn:00007E34                 jz      short loc_7E5B
.text$mn:00007E36                 xor     ecx, ecx
.text$mn:00007E38                 jz      short loc_7E5B
.text$mn:00007E3A                 push    0
.text$mn:00007E3C                 push    1
.text$mn:00007E3E                 mov     ecx, [ebp+var_8]
.text$mn:00007E41                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007E46                 lea     edx, [ebp+var_3]
.text$mn:00007E49                 push    edx
.text$mn:00007E4A                 mov     ecx, [ebp+arg_0]
.text$mn:00007E4D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007E52                 push    eax
.text$mn:00007E53                 mov     ecx, [ebp+var_8]
.text$mn:00007E56                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00007E5B
.text$mn:00007E5B loc_7E5B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:00007E5B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:00007E5B                 mov     eax, [ebp+arg_0]
.text$mn:00007E5E                 push    eax
.text$mn:00007E5F                 mov     ecx, [ebp+var_8]
.text$mn:00007E62                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007E67
.text$mn:00007E67 loc_7E67:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:00007E67                 mov     eax, [ebp+var_8]
.text$mn:00007E6A                 mov     esp, ebp
.text$mn:00007E6C                 pop     ebp
.text$mn:00007E6D                 retn    4
.text$mn:00007E6D ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00007E6D
.text$mn:00007E6D _text$mn        ends
.text$mn:00007E6D
.text$mn:00007E70 ; ===========================================================================
.text$mn:00007E70
.text$mn:00007E70 ; Segment type: Pure code
.text$mn:00007E70 ; Segment permissions: Read/Execute
.text$mn:00007E70 _text$mn        segment para public 'CODE' use32
.text$mn:00007E70                 assume cs:_text$mn
.text$mn:00007E70                 ;org 7E70h
.text$mn:00007E70 ; COMDAT (pick any)
.text$mn:00007E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E70
.text$mn:00007E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E70
.text$mn:00007E70 ; Attributes: bp-based frame
.text$mn:00007E70
.text$mn:00007E70 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00007E70                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00007E70 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00007E70                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+D0p
.text$mn:00007E70                                         ; FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+146p ...
.text$mn:00007E70
.text$mn:00007E70 var_4           = dword ptr -4
.text$mn:00007E70 Str             = dword ptr  8
.text$mn:00007E70
.text$mn:00007E70                 push    ebp
.text$mn:00007E71                 mov     ebp, esp
.text$mn:00007E73                 push    ecx
.text$mn:00007E74                 mov     [ebp+var_4], ecx
.text$mn:00007E77                 mov     eax, [ebp+Str]
.text$mn:00007E7A                 push    eax             ; Str
.text$mn:00007E7B                 mov     ecx, [ebp+var_4]
.text$mn:00007E7E                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00007E83                 mov     esp, ebp
.text$mn:00007E85                 pop     ebp
.text$mn:00007E86                 retn    4
.text$mn:00007E86 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00007E86
.text$mn:00007E86 ; ---------------------------------------------------------------------------
.text$mn:00007E89                 align 4
.text$mn:00007E89 _text$mn        ends
.text$mn:00007E89
.text$mn:00007E8C ; ===========================================================================
.text$mn:00007E8C
.text$mn:00007E8C ; Segment type: Pure code
.text$mn:00007E8C ; Segment permissions: Read/Execute
.text$mn:00007E8C _text$mn        segment para public 'CODE' use32
.text$mn:00007E8C                 assume cs:_text$mn
.text$mn:00007E8C                 ;org 7E8Ch
.text$mn:00007E8C ; COMDAT (pick any)
.text$mn:00007E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E8C
.text$mn:00007E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E8C
.text$mn:00007E8C ; Attributes: bp-based frame
.text$mn:00007E8C
.text$mn:00007E8C ; public: class std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>> & __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::operator=(class std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>> const &)
.text$mn:00007E8C                 public ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007E8C ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00007E8C                                         ; CODE XREF: TreeStateNode::operator=(TreeStateNode const &)+4Ap
.text$mn:00007E8C
.text$mn:00007E8C var_20          = dword ptr -20h
.text$mn:00007E8C var_1C          = dword ptr -1Ch
.text$mn:00007E8C var_18          = dword ptr -18h
.text$mn:00007E8C var_14          = byte ptr -14h
.text$mn:00007E8C var_13          = byte ptr -13h
.text$mn:00007E8C var_12          = byte ptr -12h
.text$mn:00007E8C var_11          = byte ptr -11h
.text$mn:00007E8C var_10          = dword ptr -10h
.text$mn:00007E8C var_C           = dword ptr -0Ch
.text$mn:00007E8C var_4           = dword ptr -4
.text$mn:00007E8C arg_0           = dword ptr  8
.text$mn:00007E8C
.text$mn:00007E8C ; FUNCTION CHUNK AT .text$mn:000080AC SIZE 00000009 BYTES
.text$mn:00007E8C ; FUNCTION CHUNK AT .text$mn:000080BC SIZE 00000017 BYTES
.text$mn:00007E8C
.text$mn:00007E8C                 push    ebp
.text$mn:00007E8D                 mov     ebp, esp
.text$mn:00007E8F                 push    0FFFFFFFFh
.text$mn:00007E91                 push    offset __ehhandler$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007E96                 mov     eax, large fs:0
.text$mn:00007E9C                 push    eax
.text$mn:00007E9D                 push    ecx
.text$mn:00007E9E                 sub     esp, 10h
.text$mn:00007EA1                 push    ebx
.text$mn:00007EA2                 push    esi
.text$mn:00007EA3                 push    edi
.text$mn:00007EA4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007EA9                 xor     eax, ebp
.text$mn:00007EAB                 push    eax
.text$mn:00007EAC                 lea     eax, [ebp+var_C]
.text$mn:00007EAF                 mov     large fs:0, eax
.text$mn:00007EB5                 mov     [ebp+var_10], esp
.text$mn:00007EB8                 mov     [ebp+var_18], ecx
.text$mn:00007EBB                 mov     eax, [ebp+var_18]
.text$mn:00007EBE                 cmp     eax, [ebp+arg_0]
.text$mn:00007EC1                 jz      loc_80BC
.text$mn:00007EC7                 lea     ecx, [ebp+var_11]
.text$mn:00007ECA                 push    ecx
.text$mn:00007ECB                 mov     ecx, [ebp+arg_0]
.text$mn:00007ECE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00007ED3                 push    eax
.text$mn:00007ED4                 lea     edx, [ebp+var_12]
.text$mn:00007ED7                 push    edx
.text$mn:00007ED8                 mov     ecx, [ebp+var_18]
.text$mn:00007EDB                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00007EE0                 push    eax
.text$mn:00007EE1                 call    ??$?9V?$allocator@UTreeStateNode@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@0@Z ; std::operator!=<std::allocator<TreeStateNode>,std::allocator<TreeStateNode>>(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &,std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)
.text$mn:00007EE6                 add     esp, 8
.text$mn:00007EE9                 movzx   eax, al
.text$mn:00007EEC                 test    eax, eax
.text$mn:00007EEE                 jz      short loc_7F11
.text$mn:00007EF0                 xor     ecx, ecx
.text$mn:00007EF2                 jz      short loc_7F11
.text$mn:00007EF4                 mov     ecx, [ebp+var_18]
.text$mn:00007EF7                 call    ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)
.text$mn:00007EFC                 lea     edx, [ebp+var_13]
.text$mn:00007EFF                 push    edx
.text$mn:00007F00                 mov     ecx, [ebp+arg_0]
.text$mn:00007F03                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00007F08                 push    eax
.text$mn:00007F09                 mov     ecx, [ebp+var_18]
.text$mn:00007F0C                 call    ?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<TreeStateNode>> const &)
.text$mn:00007F11
.text$mn:00007F11 loc_7F11:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+62j
.text$mn:00007F11                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+66j
.text$mn:00007F11                 mov     ecx, [ebp+var_18] ; this
.text$mn:00007F14                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007F19                 mov     ecx, [ebp+arg_0]
.text$mn:00007F1C                 call    ?empty@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE_NXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::empty(void)
.text$mn:00007F21                 movzx   eax, al
.text$mn:00007F24                 test    eax, eax
.text$mn:00007F26                 jz      short loc_7F35
.text$mn:00007F28                 mov     ecx, [ebp+var_18]
.text$mn:00007F2B                 call    ?clear@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::clear(void)
.text$mn:00007F30                 jmp     loc_80BC
.text$mn:00007F35 ; ---------------------------------------------------------------------------
.text$mn:00007F35
.text$mn:00007F35 loc_7F35:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+9Aj
.text$mn:00007F35                 mov     ecx, [ebp+arg_0]
.text$mn:00007F38                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00007F3D                 mov     esi, eax
.text$mn:00007F3F                 mov     ecx, [ebp+var_18]
.text$mn:00007F42                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00007F47                 cmp     esi, eax
.text$mn:00007F49                 ja      short loc_7F9A
.text$mn:00007F4B                 mov     ecx, [ebp+var_18]
.text$mn:00007F4E                 mov     edx, [ecx+4]
.text$mn:00007F51                 push    edx
.text$mn:00007F52                 mov     eax, [ebp+arg_0]
.text$mn:00007F55                 mov     ecx, [eax+8]
.text$mn:00007F58                 push    ecx
.text$mn:00007F59                 mov     edx, [ebp+arg_0]
.text$mn:00007F5C                 mov     eax, [edx+4]
.text$mn:00007F5F                 push    eax
.text$mn:00007F60                 call    ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00@Z ; std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)
.text$mn:00007F65                 add     esp, 0Ch
.text$mn:00007F68                 mov     [ebp+var_20], eax
.text$mn:00007F6B                 mov     ecx, [ebp+var_18]
.text$mn:00007F6E                 mov     edx, [ecx+8]
.text$mn:00007F71                 push    edx
.text$mn:00007F72                 mov     eax, [ebp+var_20]
.text$mn:00007F75                 push    eax
.text$mn:00007F76                 mov     ecx, [ebp+var_18]
.text$mn:00007F79                 call    ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Destroy(TreeStateNode *,TreeStateNode *)
.text$mn:00007F7E                 mov     ecx, [ebp+arg_0]
.text$mn:00007F81                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00007F86                 imul    ecx, eax, 4Ch
.text$mn:00007F89                 mov     edx, [ebp+var_18]
.text$mn:00007F8C                 add     ecx, [edx+4]
.text$mn:00007F8F                 mov     eax, [ebp+var_18]
.text$mn:00007F92                 mov     [eax+8], ecx
.text$mn:00007F95                 jmp     loc_80BC
.text$mn:00007F9A ; ---------------------------------------------------------------------------
.text$mn:00007F9A
.text$mn:00007F9A loc_7F9A:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+BDj
.text$mn:00007F9A                 mov     ecx, [ebp+arg_0]
.text$mn:00007F9D                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00007FA2                 mov     esi, eax
.text$mn:00007FA4                 mov     ecx, [ebp+var_18]
.text$mn:00007FA7                 call    ?capacity@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::capacity(void)
.text$mn:00007FAC                 cmp     esi, eax
.text$mn:00007FAE                 ja      short loc_8003
.text$mn:00007FB0                 mov     ecx, [ebp+var_18]
.text$mn:00007FB3                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00007FB8                 imul    ecx, eax, 4Ch
.text$mn:00007FBB                 mov     edx, [ebp+arg_0]
.text$mn:00007FBE                 add     ecx, [edx+4]
.text$mn:00007FC1                 mov     [ebp+var_1C], ecx
.text$mn:00007FC4                 mov     eax, [ebp+var_18]
.text$mn:00007FC7                 mov     ecx, [eax+4]
.text$mn:00007FCA                 push    ecx
.text$mn:00007FCB                 mov     edx, [ebp+var_1C]
.text$mn:00007FCE                 push    edx
.text$mn:00007FCF                 mov     eax, [ebp+arg_0]
.text$mn:00007FD2                 mov     ecx, [eax+4]
.text$mn:00007FD5                 push    ecx
.text$mn:00007FD6                 call    ??$_Copy_impl@PAUTreeStateNode@@PAU1@@std@@YAPAUTreeStateNode@@PAU1@00@Z ; std::_Copy_impl<TreeStateNode *,TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)
.text$mn:00007FDB                 add     esp, 0Ch
.text$mn:00007FDE                 mov     edx, [ebp+var_18]
.text$mn:00007FE1                 mov     eax, [edx+8]
.text$mn:00007FE4                 push    eax
.text$mn:00007FE5                 mov     ecx, [ebp+arg_0]
.text$mn:00007FE8                 mov     edx, [ecx+8]
.text$mn:00007FEB                 push    edx
.text$mn:00007FEC                 mov     eax, [ebp+var_1C]
.text$mn:00007FEF                 push    eax
.text$mn:00007FF0                 mov     ecx, [ebp+var_18]
.text$mn:00007FF3                 call    ??$_Ucopy@PAUTreeStateNode@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@PAU2@00@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)
.text$mn:00007FF8                 mov     ecx, [ebp+var_18]
.text$mn:00007FFB                 mov     [ecx+8], eax
.text$mn:00007FFE                 jmp     loc_80BC
.text$mn:00008003 ; ---------------------------------------------------------------------------
.text$mn:00008003
.text$mn:00008003 loc_8003:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+122j
.text$mn:00008003                 mov     edx, [ebp+var_18]
.text$mn:00008006                 cmp     dword ptr [edx+4], 0
.text$mn:0000800A                 jz      short loc_8051
.text$mn:0000800C                 mov     eax, [ebp+var_18]
.text$mn:0000800F                 mov     ecx, [eax+8]
.text$mn:00008012                 push    ecx
.text$mn:00008013                 mov     edx, [ebp+var_18]
.text$mn:00008016                 mov     eax, [edx+4]
.text$mn:00008019                 push    eax
.text$mn:0000801A                 mov     ecx, [ebp+var_18]
.text$mn:0000801D                 call    ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Destroy(TreeStateNode *,TreeStateNode *)
.text$mn:00008022                 mov     ecx, [ebp+var_18]
.text$mn:00008025                 mov     edx, [ebp+var_18]
.text$mn:00008028                 mov     eax, [ecx+0Ch]
.text$mn:0000802B                 sub     eax, [edx+4]
.text$mn:0000802E                 cdq
.text$mn:0000802F                 mov     ecx, 4Ch ; 'L'
.text$mn:00008034                 idiv    ecx
.text$mn:00008036                 push    eax             ; int
.text$mn:00008037                 mov     edx, [ebp+var_18]
.text$mn:0000803A                 mov     eax, [edx+4]
.text$mn:0000803D                 push    eax             ; void *
.text$mn:0000803E                 lea     ecx, [ebp+var_14]
.text$mn:00008041                 push    ecx
.text$mn:00008042                 mov     ecx, [ebp+var_18]
.text$mn:00008045                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:0000804A                 mov     ecx, eax
.text$mn:0000804C                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@I@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::deallocate(TreeStateNode *,uint)
.text$mn:00008051
.text$mn:00008051 loc_8051:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+17Ej
.text$mn:00008051                 mov     ecx, [ebp+arg_0]
.text$mn:00008054                 call    ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::size(void)
.text$mn:00008059                 push    eax
.text$mn:0000805A                 mov     ecx, [ebp+var_18]
.text$mn:0000805D                 call    ?_Buy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAE_NI@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)
.text$mn:00008062                 movzx   edx, al
.text$mn:00008065                 test    edx, edx
.text$mn:00008067                 jz      short loc_80BC
.text$mn:00008069                 mov     [ebp+var_4], 0
.text$mn:00008070                 mov     eax, [ebp+var_18]
.text$mn:00008073                 mov     ecx, [eax+4]
.text$mn:00008076                 push    ecx
.text$mn:00008077                 mov     edx, [ebp+arg_0]
.text$mn:0000807A                 mov     eax, [edx+8]
.text$mn:0000807D                 push    eax
.text$mn:0000807E                 mov     ecx, [ebp+arg_0]
.text$mn:00008081                 mov     edx, [ecx+4]
.text$mn:00008084                 push    edx
.text$mn:00008085                 mov     ecx, [ebp+var_18]
.text$mn:00008088                 call    ??$_Ucopy@PAUTreeStateNode@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@PAU2@00@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)
.text$mn:0000808D                 mov     ecx, [ebp+var_18]
.text$mn:00008090                 mov     [ecx+8], eax
.text$mn:00008093                 jmp     short loc_80AC
.text$mn:00008093 ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00008093
.text$mn:00008095
.text$mn:00008095 ; =============== S U B R O U T I N E =======================================
.text$mn:00008095
.text$mn:00008095 ; Attributes: noreturn
.text$mn:00008095
.text$mn:00008095 __catch$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z$0 proc near
.text$mn:00008095                                         ; DATA XREF: .xdata$x:0000D6DCo
.text$mn:00008095                 mov     ecx, [ebp-18h]
.text$mn:00008098                 call    ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)
.text$mn:0000809D                 push    0
.text$mn:0000809F                 push    0
.text$mn:000080A1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000080A1 __catch$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z$0 endp
.text$mn:000080A1
.text$mn:000080A6 ; ---------------------------------------------------------------------------
.text$mn:000080A6                 mov     eax, offset $LN17_1
.text$mn:000080AB                 retn
.text$mn:000080AC ; ---------------------------------------------------------------------------
.text$mn:000080AC ; START OF FUNCTION CHUNK FOR ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:000080AC
.text$mn:000080AC loc_80AC:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+207j
.text$mn:000080AC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000080B3                 jmp     short loc_80BC
.text$mn:000080B3 ; END OF FUNCTION CHUNK FOR ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:000080B5
.text$mn:000080B5 ; =============== S U B R O U T I N E =======================================
.text$mn:000080B5
.text$mn:000080B5
.text$mn:000080B5 $LN17_1         proc near               ; DATA XREF: .text$mn:000080A6o
.text$mn:000080B5                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000080B5 $LN17_1         endp ; sp-analysis failed
.text$mn:000080B5
.text$mn:000080BC ; START OF FUNCTION CHUNK FOR ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:000080BC
.text$mn:000080BC loc_80BC:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+35j
.text$mn:000080BC                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+A4j ...
.text$mn:000080BC                 mov     eax, [ebp+var_18]
.text$mn:000080BF                 mov     ecx, [ebp+var_C]
.text$mn:000080C2                 mov     large fs:0, ecx
.text$mn:000080C9                 pop     ecx
.text$mn:000080CA                 pop     edi
.text$mn:000080CB                 pop     esi
.text$mn:000080CC                 pop     ebx
.text$mn:000080CD                 mov     esp, ebp
.text$mn:000080CF                 pop     ebp
.text$mn:000080D0                 retn    4
.text$mn:000080D0 ; END OF FUNCTION CHUNK FOR ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$mn:000080D0 ; ---------------------------------------------------------------------------
.text$mn:000080D3                 align 4
.text$mn:000080D3 _text$mn        ends
.text$mn:000080D3
.text$x:000080D4 ; ===========================================================================
.text$x:000080D4
.text$x:000080D4 ; Segment type: Pure code
.text$x:000080D4 ; Segment permissions: Read/Execute
.text$x:000080D4 _text$x         segment para public 'CODE' use32
.text$x:000080D4                 assume cs:_text$x
.text$x:000080D4                 ;org 80D4h
.text$x:000080D4 ; COMDAT (pick associative to section at 7E8C)
.text$x:000080D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000080D4
.text$x:000080D4 ; =============== S U B R O U T I N E =======================================
.text$x:000080D4
.text$x:000080D4
.text$x:000080D4 __ehhandler$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
.text$x:000080D4                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+5o
.text$x:000080D4
.text$x:000080D4 arg_4           = dword ptr  8
.text$x:000080D4
.text$x:000080D4                 mov     edx, [esp+arg_4]
.text$x:000080D8                 lea     eax, [edx+0Ch]
.text$x:000080DB                 mov     ecx, [edx-24h]
.text$x:000080DE                 xor     ecx, eax
.text$x:000080E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000080E5                 mov     eax, offset __ehfuncinfo$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.text$x:000080EA                 jmp     ___CxxFrameHandler3
.text$x:000080EA __ehhandler$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z endp
.text$x:000080EA
.text$x:000080EA ; ---------------------------------------------------------------------------
.text$x:000080EF                 align 10h
.text$x:000080EF _text$x         ends
.text$x:000080EF
.text$mn:000080F0 ; ===========================================================================
.text$mn:000080F0
.text$mn:000080F0 ; Segment type: Pure code
.text$mn:000080F0 ; Segment permissions: Read/Execute
.text$mn:000080F0 _text$mn        segment para public 'CODE' use32
.text$mn:000080F0                 assume cs:_text$mn
.text$mn:000080F0                 ;org 80F0h
.text$mn:000080F0 ; COMDAT (pick any)
.text$mn:000080F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080F0
.text$mn:000080F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080F0
.text$mn:000080F0 ; Attributes: bp-based frame
.text$mn:000080F0
.text$mn:000080F0 ; public: struct TreeStateNode & __thiscall TreeStateNode::operator=(struct TreeStateNode const &)
.text$mn:000080F0                 public ??4TreeStateNode@@QAEAAU0@ABU0@@Z
.text$mn:000080F0 ??4TreeStateNode@@QAEAAU0@ABU0@@Z proc near
.text$mn:000080F0                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+111p
.text$mn:000080F0                                         ; FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+13Ap ...
.text$mn:000080F0
.text$mn:000080F0 var_4           = dword ptr -4
.text$mn:000080F0 arg_0           = dword ptr  8
.text$mn:000080F0
.text$mn:000080F0                 push    ebp
.text$mn:000080F1                 mov     ebp, esp
.text$mn:000080F3                 push    ecx
.text$mn:000080F4                 mov     [ebp+var_4], ecx
.text$mn:000080F7                 mov     eax, [ebp+arg_0]
.text$mn:000080FA                 push    eax
.text$mn:000080FB                 mov     ecx, [ebp+var_4]
.text$mn:000080FE                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00008103                 mov     ecx, [ebp+arg_0]
.text$mn:00008106                 add     ecx, 1Ch
.text$mn:00008109                 push    ecx
.text$mn:0000810A                 mov     ecx, [ebp+var_4]
.text$mn:0000810D                 add     ecx, 1Ch
.text$mn:00008110                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00008115                 mov     edx, [ebp+var_4]
.text$mn:00008118                 mov     eax, [ebp+arg_0]
.text$mn:0000811B                 mov     cl, [eax+38h]
.text$mn:0000811E                 mov     [edx+38h], cl
.text$mn:00008121                 mov     edx, [ebp+var_4]
.text$mn:00008124                 mov     eax, [ebp+arg_0]
.text$mn:00008127                 mov     cl, [eax+39h]
.text$mn:0000812A                 mov     [edx+39h], cl
.text$mn:0000812D                 mov     edx, [ebp+arg_0]
.text$mn:00008130                 add     edx, 3Ch ; '<'
.text$mn:00008133                 push    edx
.text$mn:00008134                 mov     ecx, [ebp+var_4]
.text$mn:00008137                 add     ecx, 3Ch ; '<'
.text$mn:0000813A                 call    ??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)
.text$mn:0000813F                 mov     eax, [ebp+var_4]
.text$mn:00008142                 mov     esp, ebp
.text$mn:00008144                 pop     ebp
.text$mn:00008145                 retn    4
.text$mn:00008145 ??4TreeStateNode@@QAEAAU0@ABU0@@Z endp
.text$mn:00008145
.text$mn:00008145 _text$mn        ends
.text$mn:00008145
.text$mn:00008148 ; ===========================================================================
.text$mn:00008148
.text$mn:00008148 ; Segment type: Pure code
.text$mn:00008148 ; Segment permissions: Read/Execute
.text$mn:00008148 _text$mn        segment para public 'CODE' use32
.text$mn:00008148                 assume cs:_text$mn
.text$mn:00008148                 ;org 8148h
.text$mn:00008148 ; COMDAT (pick any)
.text$mn:00008148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008148
.text$mn:00008148 ; =============== S U B R O U T I N E =======================================
.text$mn:00008148
.text$mn:00008148 ; Attributes: bp-based frame
.text$mn:00008148
.text$mn:00008148 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00008148                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00008148 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00008148                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00008148
.text$mn:00008148 var_14          = byte ptr -14h
.text$mn:00008148 var_10          = dword ptr -10h
.text$mn:00008148 var_C           = dword ptr -0Ch
.text$mn:00008148 var_4           = dword ptr -4
.text$mn:00008148 arg_0           = dword ptr  8
.text$mn:00008148
.text$mn:00008148                 push    ebp
.text$mn:00008149                 mov     ebp, esp
.text$mn:0000814B                 push    0FFFFFFFFh
.text$mn:0000814D                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00008152                 mov     eax, large fs:0
.text$mn:00008158                 push    eax
.text$mn:00008159                 sub     esp, 8
.text$mn:0000815C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008161                 xor     eax, ebp
.text$mn:00008163                 push    eax
.text$mn:00008164                 lea     eax, [ebp+var_C]
.text$mn:00008167                 mov     large fs:0, eax
.text$mn:0000816D                 mov     [ebp+var_10], ecx
.text$mn:00008170                 mov     eax, [ebp+var_10]
.text$mn:00008173                 mov     ecx, [ebp+arg_0]
.text$mn:00008176                 mov     edx, [eax]
.text$mn:00008178                 cmp     edx, [ecx]
.text$mn:0000817A                 jnz     short loc_817E
.text$mn:0000817C                 jmp     short loc_81C0
.text$mn:0000817E ; ---------------------------------------------------------------------------
.text$mn:0000817E
.text$mn:0000817E loc_817E:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:0000817E                 mov     eax, [ebp+arg_0]
.text$mn:00008181                 cmp     dword ptr [eax], 0
.text$mn:00008184                 jz      short loc_8198
.text$mn:00008186                 mov     ecx, [ebp+arg_0]
.text$mn:00008189                 mov     edx, [ecx]
.text$mn:0000818B                 mov     eax, [edx]
.text$mn:0000818D                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000818E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008191                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00008196                 jmp     short loc_81C0
.text$mn:00008198 ; ---------------------------------------------------------------------------
.text$mn:00008198
.text$mn:00008198 loc_8198:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00008198                 push    3               ; int
.text$mn:0000819A                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000819D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000081A2                 mov     [ebp+var_4], 0
.text$mn:000081A9                 mov     ecx, [ebp+var_10] ; this
.text$mn:000081AC                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000081B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000081B8                 lea     ecx, [ebp+var_14] ; this
.text$mn:000081BB                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000081C0
.text$mn:000081C0 loc_81C0:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:000081C0                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:000081C0                 mov     eax, [ebp+var_10]
.text$mn:000081C3                 mov     ecx, [ebp+var_C]
.text$mn:000081C6                 mov     large fs:0, ecx
.text$mn:000081CD                 pop     ecx
.text$mn:000081CE                 mov     esp, ebp
.text$mn:000081D0                 pop     ebp
.text$mn:000081D1                 retn    4
.text$mn:000081D1 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:000081D1
.text$mn:000081D1 _text$mn        ends
.text$mn:000081D1
.text$x:000081D4 ; ===========================================================================
.text$x:000081D4
.text$x:000081D4 ; Segment type: Pure code
.text$x:000081D4 ; Segment permissions: Read/Execute
.text$x:000081D4 _text$x         segment para public 'CODE' use32
.text$x:000081D4                 assume cs:_text$x
.text$x:000081D4                 ;org 81D4h
.text$x:000081D4 ; COMDAT (pick associative to section at 8148)
.text$x:000081D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000081D4
.text$x:000081D4 ; =============== S U B R O U T I N E =======================================
.text$x:000081D4
.text$x:000081D4
.text$x:000081D4 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:000081D4                                         ; DATA XREF: .xdata$x:0000CB10o
.text$x:000081D4                 lea     ecx, [ebp-14h]  ; this
.text$x:000081D7                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000081D7 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:000081D7
.text$x:000081DC
.text$x:000081DC ; =============== S U B R O U T I N E =======================================
.text$x:000081DC
.text$x:000081DC
.text$x:000081DC __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:000081DC                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:000081DC
.text$x:000081DC arg_4           = dword ptr  8
.text$x:000081DC
.text$x:000081DC                 mov     edx, [esp+arg_4]
.text$x:000081E0                 lea     eax, [edx+0Ch]
.text$x:000081E3                 mov     ecx, [edx-0Ch]
.text$x:000081E6                 xor     ecx, eax
.text$x:000081E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000081ED                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:000081F2                 jmp     ___CxxFrameHandler3
.text$x:000081F2 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:000081F2
.text$x:000081F2 ; ---------------------------------------------------------------------------
.text$x:000081F7                 align 4
.text$x:000081F7 _text$x         ends
.text$x:000081F7
.text$mn:000081F8 ; ===========================================================================
.text$mn:000081F8
.text$mn:000081F8 ; Segment type: Pure code
.text$mn:000081F8 ; Segment permissions: Read/Execute
.text$mn:000081F8 _text$mn        segment para public 'CODE' use32
.text$mn:000081F8                 assume cs:_text$mn
.text$mn:000081F8                 ;org 81F8h
.text$mn:000081F8 ; COMDAT (pick any)
.text$mn:000081F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081F8
.text$mn:000081F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000081F8
.text$mn:000081F8 ; Attributes: bp-based frame
.text$mn:000081F8
.text$mn:000081F8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:000081F8                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:000081F8 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:000081F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:000081F8
.text$mn:000081F8 var_8           = dword ptr -8
.text$mn:000081F8 var_4           = dword ptr -4
.text$mn:000081F8 arg_0           = dword ptr  8
.text$mn:000081F8
.text$mn:000081F8                 push    ebp
.text$mn:000081F9                 mov     ebp, esp
.text$mn:000081FB                 sub     esp, 8
.text$mn:000081FE                 mov     [ebp+var_4], ecx
.text$mn:00008201                 mov     eax, [ebp+arg_0]
.text$mn:00008204                 push    eax             ; std::_Iterator_base12 *
.text$mn:00008205                 mov     ecx, [ebp+var_4]
.text$mn:00008208                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000820D                 mov     ecx, [ebp+var_4]
.text$mn:00008210                 mov     edx, [ebp+arg_0]
.text$mn:00008213                 mov     eax, [ecx+8]
.text$mn:00008216                 cmp     eax, [edx+8]
.text$mn:00008219                 jnz     short loc_8224
.text$mn:0000821B                 mov     [ebp+var_8], 1
.text$mn:00008222                 jmp     short loc_822B
.text$mn:00008224 ; ---------------------------------------------------------------------------
.text$mn:00008224
.text$mn:00008224 loc_8224:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00008224                 mov     [ebp+var_8], 0
.text$mn:0000822B
.text$mn:0000822B loc_822B:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:0000822B                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000822E                 mov     esp, ebp
.text$mn:00008230                 pop     ebp
.text$mn:00008231                 retn    4
.text$mn:00008231 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00008231
.text$mn:00008231 _text$mn        ends
.text$mn:00008231
.text$mn:00008234 ; ===========================================================================
.text$mn:00008234
.text$mn:00008234 ; Segment type: Pure code
.text$mn:00008234 ; Segment permissions: Read/Execute
.text$mn:00008234 _text$mn        segment para public 'CODE' use32
.text$mn:00008234                 assume cs:_text$mn
.text$mn:00008234                 ;org 8234h
.text$mn:00008234 ; COMDAT (pick any)
.text$mn:00008234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008234
.text$mn:00008234 ; =============== S U B R O U T I N E =======================================
.text$mn:00008234
.text$mn:00008234 ; Attributes: bp-based frame
.text$mn:00008234
.text$mn:00008234 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00008234                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00008234 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00008234                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00008234                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00008234
.text$mn:00008234 var_8           = dword ptr -8
.text$mn:00008234 var_4           = dword ptr -4
.text$mn:00008234 arg_0           = dword ptr  8
.text$mn:00008234
.text$mn:00008234                 push    ebp
.text$mn:00008235                 mov     ebp, esp
.text$mn:00008237                 sub     esp, 8
.text$mn:0000823A                 mov     [ebp+var_8], ecx
.text$mn:0000823D                 mov     eax, [ebp+var_8]
.text$mn:00008240                 cmp     eax, [ebp+arg_0]
.text$mn:00008243                 jnz     short loc_824E
.text$mn:00008245                 mov     [ebp+var_4], 1
.text$mn:0000824C                 jmp     short loc_8255
.text$mn:0000824E ; ---------------------------------------------------------------------------
.text$mn:0000824E
.text$mn:0000824E loc_824E:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000824E                 mov     [ebp+var_4], 0
.text$mn:00008255
.text$mn:00008255 loc_8255:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00008255                 mov     al, byte ptr [ebp+var_4]
.text$mn:00008258                 mov     esp, ebp
.text$mn:0000825A                 pop     ebp
.text$mn:0000825B                 retn    4
.text$mn:0000825B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:0000825B
.text$mn:0000825B ; ---------------------------------------------------------------------------
.text$mn:0000825E                 align 10h
.text$mn:0000825E _text$mn        ends
.text$mn:0000825E
.text$mn:00008260 ; ===========================================================================
.text$mn:00008260
.text$mn:00008260 ; Segment type: Pure code
.text$mn:00008260 ; Segment permissions: Read/Execute
.text$mn:00008260 _text$mn        segment para public 'CODE' use32
.text$mn:00008260                 assume cs:_text$mn
.text$mn:00008260                 ;org 8260h
.text$mn:00008260 ; COMDAT (pick any)
.text$mn:00008260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008260
.text$mn:00008260 ; =============== S U B R O U T I N E =======================================
.text$mn:00008260
.text$mn:00008260 ; Attributes: bp-based frame
.text$mn:00008260
.text$mn:00008260 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00008260                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00008260 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00008260                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00008260
.text$mn:00008260 var_8           = dword ptr -8
.text$mn:00008260 var_4           = dword ptr -4
.text$mn:00008260 arg_0           = dword ptr  8
.text$mn:00008260
.text$mn:00008260                 push    ebp
.text$mn:00008261                 mov     ebp, esp
.text$mn:00008263                 sub     esp, 8
.text$mn:00008266                 push    esi
.text$mn:00008267                 mov     [ebp+var_4], ecx
.text$mn:0000826A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000826D                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00008272                 push    eax
.text$mn:00008273                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008276                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000827B                 mov     ecx, eax
.text$mn:0000827D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00008282                 movzx   eax, al
.text$mn:00008285                 test    eax, eax
.text$mn:00008287                 jz      short loc_82A8
.text$mn:00008289                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000828C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00008291                 mov     esi, eax
.text$mn:00008293                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008296                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000829B                 cmp     esi, eax
.text$mn:0000829D                 jnz     short loc_82A8
.text$mn:0000829F                 mov     [ebp+var_8], 1
.text$mn:000082A6                 jmp     short loc_82AF
.text$mn:000082A8 ; ---------------------------------------------------------------------------
.text$mn:000082A8
.text$mn:000082A8 loc_82A8:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:000082A8                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:000082A8                 mov     [ebp+var_8], 0
.text$mn:000082AF
.text$mn:000082AF loc_82AF:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:000082AF                 mov     al, byte ptr [ebp+var_8]
.text$mn:000082B2                 pop     esi
.text$mn:000082B3                 mov     esp, ebp
.text$mn:000082B5                 pop     ebp
.text$mn:000082B6                 retn    4
.text$mn:000082B6 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:000082B6
.text$mn:000082B6 ; ---------------------------------------------------------------------------
.text$mn:000082B9                 align 4
.text$mn:000082B9 _text$mn        ends
.text$mn:000082B9
.text$mn:000082BC ; ===========================================================================
.text$mn:000082BC
.text$mn:000082BC ; Segment type: Pure code
.text$mn:000082BC ; Segment permissions: Read/Execute
.text$mn:000082BC _text$mn        segment para public 'CODE' use32
.text$mn:000082BC                 assume cs:_text$mn
.text$mn:000082BC                 ;org 82BCh
.text$mn:000082BC ; COMDAT (pick any)
.text$mn:000082BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082BC
.text$mn:000082BC ; =============== S U B R O U T I N E =======================================
.text$mn:000082BC
.text$mn:000082BC ; Attributes: bp-based frame
.text$mn:000082BC
.text$mn:000082BC ; public: struct TreeParams & __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::operator[](unsigned int)
.text$mn:000082BC                 public ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z
.text$mn:000082BC ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z proc near
.text$mn:000082BC                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+97p
.text$mn:000082BC                                         ; FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+C6p ...
.text$mn:000082BC
.text$mn:000082BC var_4           = dword ptr -4
.text$mn:000082BC arg_0           = dword ptr  8
.text$mn:000082BC
.text$mn:000082BC                 push    ebp
.text$mn:000082BD                 mov     ebp, esp
.text$mn:000082BF                 push    ecx
.text$mn:000082C0                 mov     [ebp+var_4], ecx
.text$mn:000082C3                 mov     ecx, [ebp+var_4]
.text$mn:000082C6                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:000082CB                 cmp     eax, [ebp+arg_0]
.text$mn:000082CE                 ja      short loc_8338
.text$mn:000082D0                 push    4B1h            ; unsigned int
.text$mn:000082D5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000082DA                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000082DF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000082E4                 add     esp, 0Ch
.text$mn:000082E7                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:000082EC                 test    eax, eax
.text$mn:000082EE                 jz      short loc_82F4
.text$mn:000082F0                 xor     ecx, ecx
.text$mn:000082F2                 jnz     short loc_831A
.text$mn:000082F4
.text$mn:000082F4 loc_82F4:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+32j
.text$mn:000082F4                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000082F9                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000082FE                 push    0
.text$mn:00008300                 push    4B2h
.text$mn:00008305                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000830A                 push    2
.text$mn:0000830C                 call    __CrtDbgReportW
.text$mn:00008311                 add     esp, 18h
.text$mn:00008314                 cmp     eax, 1
.text$mn:00008317                 jnz     short loc_831A
.text$mn:00008319                 int     3               ; Trap to Debugger
.text$mn:0000831A
.text$mn:0000831A loc_831A:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+36j
.text$mn:0000831A                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+5Bj
.text$mn:0000831A                 push    0
.text$mn:0000831C                 push    4B2h
.text$mn:00008321                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008326                 push    offset ??_C@_1KK@FJDFDCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAr?$AAe?$AAe?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?0?$AAc?$AAl@ ; "std::vector<struct TreeParams,class std"...
.text$mn:0000832B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00008330                 call    __invalid_parameter
.text$mn:00008335                 add     esp, 14h
.text$mn:00008338
.text$mn:00008338 loc_8338:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+12j
.text$mn:00008338                 imul    eax, [ebp+arg_0], 6Ch
.text$mn:0000833C                 mov     ecx, [ebp+var_4]
.text$mn:0000833F                 add     eax, [ecx+4]
.text$mn:00008342                 mov     esp, ebp
.text$mn:00008344                 pop     ebp
.text$mn:00008345                 retn    4
.text$mn:00008345 ??A?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEAAUTreeParams@@I@Z endp
.text$mn:00008345
.text$mn:00008345 _text$mn        ends
.text$mn:00008345
.text$mn:00008348 ; ===========================================================================
.text$mn:00008348
.text$mn:00008348 ; Segment type: Pure code
.text$mn:00008348 ; Segment permissions: Read/Execute
.text$mn:00008348 _text$mn        segment para public 'CODE' use32
.text$mn:00008348                 assume cs:_text$mn
.text$mn:00008348                 ;org 8348h
.text$mn:00008348 ; COMDAT (pick any)
.text$mn:00008348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008348
.text$mn:00008348 ; =============== S U B R O U T I N E =======================================
.text$mn:00008348
.text$mn:00008348 ; Attributes: bp-based frame
.text$mn:00008348
.text$mn:00008348 ; public: struct foundInfo & __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::operator[](unsigned int)
.text$mn:00008348                 public ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z
.text$mn:00008348 ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z proc near
.text$mn:00008348                                         ; CODE XREF: FunctionListPanel::reload(void)+2C2p
.text$mn:00008348                                         ; FunctionListPanel::reload(void)+2DAp ...
.text$mn:00008348
.text$mn:00008348 var_4           = dword ptr -4
.text$mn:00008348 arg_0           = dword ptr  8
.text$mn:00008348
.text$mn:00008348                 push    ebp
.text$mn:00008349                 mov     ebp, esp
.text$mn:0000834B                 push    ecx
.text$mn:0000834C                 mov     [ebp+var_4], ecx
.text$mn:0000834F                 mov     ecx, [ebp+var_4]
.text$mn:00008352                 call    ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::size(void)
.text$mn:00008357                 cmp     eax, [ebp+arg_0]
.text$mn:0000835A                 ja      short loc_83C4
.text$mn:0000835C                 push    4B1h            ; unsigned int
.text$mn:00008361                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008366                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000836B                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00008370                 add     esp, 0Ch
.text$mn:00008373                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00008378                 test    eax, eax
.text$mn:0000837A                 jz      short loc_8380
.text$mn:0000837C                 xor     ecx, ecx
.text$mn:0000837E                 jnz     short loc_83A6
.text$mn:00008380
.text$mn:00008380 loc_8380:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+32j
.text$mn:00008380                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00008385                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000838A                 push    0
.text$mn:0000838C                 push    4B2h
.text$mn:00008391                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008396                 push    2
.text$mn:00008398                 call    __CrtDbgReportW
.text$mn:0000839D                 add     esp, 18h
.text$mn:000083A0                 cmp     eax, 1
.text$mn:000083A3                 jnz     short loc_83A6
.text$mn:000083A5                 int     3               ; Trap to Debugger
.text$mn:000083A6
.text$mn:000083A6 loc_83A6:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+36j
.text$mn:000083A6                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+5Bj
.text$mn:000083A6                 push    0
.text$mn:000083A8                 push    4B2h
.text$mn:000083AD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000083B2                 push    offset ??_C@_1KG@KJPMAJE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AAI?$AAn?$AAf?$AAo?$AA?0?$AAc?$AAl?$AAa@ ; "std::vector<struct foundInfo,class std:"...
.text$mn:000083B7                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000083BC                 call    __invalid_parameter
.text$mn:000083C1                 add     esp, 14h
.text$mn:000083C4
.text$mn:000083C4 loc_83C4:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+12j
.text$mn:000083C4                 mov     eax, [ebp+arg_0]
.text$mn:000083C7                 shl     eax, 6
.text$mn:000083CA                 mov     ecx, [ebp+var_4]
.text$mn:000083CD                 add     eax, [ecx+4]
.text$mn:000083D0                 mov     esp, ebp
.text$mn:000083D2                 pop     ebp
.text$mn:000083D3                 retn    4
.text$mn:000083D3 ??A?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEAAUfoundInfo@@I@Z endp
.text$mn:000083D3
.text$mn:000083D3 ; ---------------------------------------------------------------------------
.text$mn:000083D6                 align 4
.text$mn:000083D6 _text$mn        ends
.text$mn:000083D6
.text$mn:000083D8 ; ===========================================================================
.text$mn:000083D8
.text$mn:000083D8 ; Segment type: Pure code
.text$mn:000083D8 ; Segment permissions: Read/Execute
.text$mn:000083D8 _text$mn        segment para public 'CODE' use32
.text$mn:000083D8                 assume cs:_text$mn
.text$mn:000083D8                 ;org 83D8h
.text$mn:000083D8 ; COMDAT (pick any)
.text$mn:000083D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083D8
.text$mn:000083D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000083D8
.text$mn:000083D8 ; Attributes: bp-based frame
.text$mn:000083D8
.text$mn:000083D8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)
.text$mn:000083D8                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:000083D8 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:000083D8                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+EFp
.text$mn:000083D8
.text$mn:000083D8 var_4           = dword ptr -4
.text$mn:000083D8 arg_0           = dword ptr  8
.text$mn:000083D8
.text$mn:000083D8                 push    ebp
.text$mn:000083D9                 mov     ebp, esp
.text$mn:000083DB                 push    ecx
.text$mn:000083DC                 mov     [ebp+var_4], ecx
.text$mn:000083DF                 mov     ecx, [ebp+var_4]
.text$mn:000083E2                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000083E7                 cmp     eax, [ebp+arg_0]
.text$mn:000083EA                 ja      short loc_8454
.text$mn:000083EC                 push    4B1h            ; unsigned int
.text$mn:000083F1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000083F6                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000083FB                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00008400                 add     esp, 0Ch
.text$mn:00008403                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00008408                 test    eax, eax
.text$mn:0000840A                 jz      short loc_8410
.text$mn:0000840C                 xor     ecx, ecx
.text$mn:0000840E                 jnz     short loc_8436
.text$mn:00008410
.text$mn:00008410 loc_8410:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00008410                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00008415                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000841A                 push    0
.text$mn:0000841C                 push    4B2h
.text$mn:00008421                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008426                 push    2
.text$mn:00008428                 call    __CrtDbgReportW
.text$mn:0000842D                 add     esp, 18h
.text$mn:00008430                 cmp     eax, 1
.text$mn:00008433                 jnz     short loc_8436
.text$mn:00008435                 int     3               ; Trap to Debugger
.text$mn:00008436
.text$mn:00008436 loc_8436:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:00008436                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:00008436                 push    0
.text$mn:00008438                 push    4B2h
.text$mn:0000843D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008442                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:00008447                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000844C                 call    __invalid_parameter
.text$mn:00008451                 add     esp, 14h
.text$mn:00008454
.text$mn:00008454 loc_8454:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:00008454                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00008458                 mov     ecx, [ebp+var_4]
.text$mn:0000845B                 add     eax, [ecx+4]
.text$mn:0000845E                 mov     esp, ebp
.text$mn:00008460                 pop     ebp
.text$mn:00008461                 retn    4
.text$mn:00008461 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:00008461
.text$mn:00008461 _text$mn        ends
.text$mn:00008461
.text$mn:00008464 ; ===========================================================================
.text$mn:00008464
.text$mn:00008464 ; Segment type: Pure code
.text$mn:00008464 ; Segment permissions: Read/Execute
.text$mn:00008464 _text$mn        segment para public 'CODE' use32
.text$mn:00008464                 assume cs:_text$mn
.text$mn:00008464                 ;org 8464h
.text$mn:00008464 ; COMDAT (pick any)
.text$mn:00008464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008464
.text$mn:00008464 ; =============== S U B R O U T I N E =======================================
.text$mn:00008464
.text$mn:00008464 ; Attributes: bp-based frame
.text$mn:00008464
.text$mn:00008464 ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00008464                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:00008464 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:00008464                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:00008464
.text$mn:00008464 var_4           = dword ptr -4
.text$mn:00008464
.text$mn:00008464                 push    ebp
.text$mn:00008465                 mov     ebp, esp
.text$mn:00008467                 push    ecx
.text$mn:00008468                 push    esi
.text$mn:00008469                 mov     [ebp+var_4], ecx
.text$mn:0000846C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000846F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008474                 test    eax, eax
.text$mn:00008476                 jz      short loc_84BF
.text$mn:00008478                 mov     eax, [ebp+var_4]
.text$mn:0000847B                 cmp     dword ptr [eax+8], 0
.text$mn:0000847F                 jz      short loc_84BF
.text$mn:00008481                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008484                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008489                 mov     ecx, eax
.text$mn:0000848B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008490                 mov     ecx, [ebp+var_4]
.text$mn:00008493                 cmp     [ecx+8], eax
.text$mn:00008496                 jb      short loc_84BF
.text$mn:00008498                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000849B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000084A0                 mov     ecx, eax
.text$mn:000084A2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000084A7                 mov     esi, eax
.text$mn:000084A9                 mov     ecx, [ebp+var_4] ; this
.text$mn:000084AC                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000084B1                 mov     edx, [eax+14h]
.text$mn:000084B4                 lea     eax, [esi+edx*2]
.text$mn:000084B7                 mov     ecx, [ebp+var_4]
.text$mn:000084BA                 cmp     eax, [ecx+8]
.text$mn:000084BD                 ja      short loc_851E
.text$mn:000084BF
.text$mn:000084BF loc_84BF:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:000084BF                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:000084BF                 push    4Fh ; 'O'       ; unsigned int
.text$mn:000084C1                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000084C6                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:000084CB                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000084D0                 add     esp, 0Ch
.text$mn:000084D3                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:000084D8                 test    edx, edx
.text$mn:000084DA                 jz      short loc_84E0
.text$mn:000084DC                 xor     eax, eax
.text$mn:000084DE                 jnz     short loc_8503
.text$mn:000084E0
.text$mn:000084E0 loc_84E0:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:000084E0                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000084E5                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000084EA                 push    0
.text$mn:000084EC                 push    50h ; 'P'
.text$mn:000084EE                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000084F3                 push    2
.text$mn:000084F5                 call    __CrtDbgReportW
.text$mn:000084FA                 add     esp, 18h
.text$mn:000084FD                 cmp     eax, 1
.text$mn:00008500                 jnz     short loc_8503
.text$mn:00008502                 int     3               ; Trap to Debugger
.text$mn:00008503
.text$mn:00008503 loc_8503:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:00008503                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:00008503                 push    0
.text$mn:00008505                 push    50h ; 'P'
.text$mn:00008507                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000850C                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00008511                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00008516                 call    __invalid_parameter
.text$mn:0000851B                 add     esp, 14h
.text$mn:0000851E
.text$mn:0000851E loc_851E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:0000851E                 mov     edx, [ebp+var_4]
.text$mn:00008521                 mov     eax, [edx+8]
.text$mn:00008524                 pop     esi
.text$mn:00008525                 mov     esp, ebp
.text$mn:00008527                 pop     ebp
.text$mn:00008528                 retn
.text$mn:00008528 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00008528
.text$mn:00008528 ; ---------------------------------------------------------------------------
.text$mn:00008529                 align 4
.text$mn:00008529 _text$mn        ends
.text$mn:00008529
.text$mn:0000852C ; ===========================================================================
.text$mn:0000852C
.text$mn:0000852C ; Segment type: Pure code
.text$mn:0000852C ; Segment permissions: Read/Execute
.text$mn:0000852C _text$mn        segment para public 'CODE' use32
.text$mn:0000852C                 assume cs:_text$mn
.text$mn:0000852C                 ;org 852Ch
.text$mn:0000852C ; COMDAT (pick any)
.text$mn:0000852C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000852C
.text$mn:0000852C ; =============== S U B R O U T I N E =======================================
.text$mn:0000852C
.text$mn:0000852C ; Attributes: bp-based frame
.text$mn:0000852C
.text$mn:0000852C ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:0000852C                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:0000852C ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:0000852C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:0000852C
.text$mn:0000852C var_4           = dword ptr -4
.text$mn:0000852C
.text$mn:0000852C                 push    ebp
.text$mn:0000852D                 mov     ebp, esp
.text$mn:0000852F                 push    ecx
.text$mn:00008530                 mov     [ebp+var_4], ecx
.text$mn:00008533                 mov     ecx, [ebp+var_4]
.text$mn:00008536                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000853B                 mov     esp, ebp
.text$mn:0000853D                 pop     ebp
.text$mn:0000853E                 retn
.text$mn:0000853E ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:0000853E
.text$mn:0000853E ; ---------------------------------------------------------------------------
.text$mn:0000853F                 align 10h
.text$mn:0000853F _text$mn        ends
.text$mn:0000853F
.text$mn:00008540 ; ===========================================================================
.text$mn:00008540
.text$mn:00008540 ; Segment type: Pure code
.text$mn:00008540 ; Segment permissions: Read/Execute
.text$mn:00008540 _text$mn        segment para public 'CODE' use32
.text$mn:00008540                 assume cs:_text$mn
.text$mn:00008540                 ;org 8540h
.text$mn:00008540 ; COMDAT (pick any)
.text$mn:00008540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008540
.text$mn:00008540 ; =============== S U B R O U T I N E =======================================
.text$mn:00008540
.text$mn:00008540 ; Attributes: bp-based frame
.text$mn:00008540
.text$mn:00008540 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00008540                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00008540 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00008540                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00008540                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00008540
.text$mn:00008540 var_4           = dword ptr -4
.text$mn:00008540 arg_0           = dword ptr  8
.text$mn:00008540
.text$mn:00008540                 push    ebp
.text$mn:00008541                 mov     ebp, esp
.text$mn:00008543                 push    ecx
.text$mn:00008544                 mov     [ebp+var_4], ecx
.text$mn:00008547                 mov     eax, [ebp+arg_0]
.text$mn:0000854A                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000854B                 mov     ecx, [ebp+var_4]
.text$mn:0000854E                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00008553                 mov     ecx, [ebp+var_4]
.text$mn:00008556                 mov     edx, [ebp+arg_0]
.text$mn:00008559                 mov     eax, [ecx+8]
.text$mn:0000855C                 sub     eax, [edx+8]
.text$mn:0000855F                 sar     eax, 1
.text$mn:00008561                 mov     esp, ebp
.text$mn:00008563                 pop     ebp
.text$mn:00008564                 retn    4
.text$mn:00008564 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:00008564
.text$mn:00008564 ; ---------------------------------------------------------------------------
.text$mn:00008567                 align 4
.text$mn:00008567 _text$mn        ends
.text$mn:00008567
.text$mn:00008568 ; ===========================================================================
.text$mn:00008568
.text$mn:00008568 ; Segment type: Pure code
.text$mn:00008568 ; Segment permissions: Read/Execute
.text$mn:00008568 _text$mn        segment para public 'CODE' use32
.text$mn:00008568                 assume cs:_text$mn
.text$mn:00008568                 ;org 8568h
.text$mn:00008568 ; COMDAT (pick any)
.text$mn:00008568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008568
.text$mn:00008568 ; =============== S U B R O U T I N E =======================================
.text$mn:00008568
.text$mn:00008568 ; Attributes: bp-based frame
.text$mn:00008568
.text$mn:00008568 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00008568                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00008568 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00008568                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00008568
.text$mn:00008568 var_28          = byte ptr -28h
.text$mn:00008568 var_1C          = dword ptr -1Ch
.text$mn:00008568 var_18          = dword ptr -18h
.text$mn:00008568 var_14          = dword ptr -14h
.text$mn:00008568 var_10          = dword ptr -10h
.text$mn:00008568 var_C           = dword ptr -0Ch
.text$mn:00008568 var_4           = dword ptr -4
.text$mn:00008568 arg_0           = dword ptr  8
.text$mn:00008568
.text$mn:00008568                 push    ebp
.text$mn:00008569                 mov     ebp, esp
.text$mn:0000856B                 push    0FFFFFFFFh
.text$mn:0000856D                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00008572                 mov     eax, large fs:0
.text$mn:00008578                 push    eax
.text$mn:00008579                 sub     esp, 1Ch
.text$mn:0000857C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008581                 xor     eax, ebp
.text$mn:00008583                 push    eax
.text$mn:00008584                 lea     eax, [ebp+var_C]
.text$mn:00008587                 mov     large fs:0, eax
.text$mn:0000858D                 mov     [ebp+var_10], ecx
.text$mn:00008590                 mov     eax, [ebp+arg_0]
.text$mn:00008593                 push    eax             ; std::_Iterator_base12 *
.text$mn:00008594                 mov     ecx, [ebp+var_10]
.text$mn:00008597                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:00008598                 lea     ecx, [ebp+var_28]
.text$mn:0000859B                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000085A0                 mov     [ebp+var_14], eax
.text$mn:000085A3                 mov     edx, [ebp+var_14]
.text$mn:000085A6                 mov     [ebp+var_18], edx
.text$mn:000085A9                 mov     [ebp+var_4], 0
.text$mn:000085B0                 mov     ecx, [ebp+var_18]
.text$mn:000085B3                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000085B8                 mov     [ebp+var_1C], eax
.text$mn:000085BB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000085C2                 lea     ecx, [ebp+var_28]
.text$mn:000085C5                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000085CA                 mov     eax, [ebp+var_1C]
.text$mn:000085CD                 mov     ecx, [ebp+var_C]
.text$mn:000085D0                 mov     large fs:0, ecx
.text$mn:000085D7                 pop     ecx
.text$mn:000085D8                 mov     esp, ebp
.text$mn:000085DA                 pop     ebp
.text$mn:000085DB                 retn    4
.text$mn:000085DB ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:000085DB
.text$mn:000085DB ; ---------------------------------------------------------------------------
.text$mn:000085DE                 align 10h
.text$mn:000085DE _text$mn        ends
.text$mn:000085DE
.text$x:000085E0 ; ===========================================================================
.text$x:000085E0
.text$x:000085E0 ; Segment type: Pure code
.text$x:000085E0 ; Segment permissions: Read/Execute
.text$x:000085E0 _text$x         segment para public 'CODE' use32
.text$x:000085E0                 assume cs:_text$x
.text$x:000085E0                 ;org 85E0h
.text$x:000085E0 ; COMDAT (pick associative to section at 8568)
.text$x:000085E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000085E0
.text$x:000085E0 ; =============== S U B R O U T I N E =======================================
.text$x:000085E0
.text$x:000085E0
.text$x:000085E0 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:000085E0                                         ; DATA XREF: .xdata$x:0000E028o
.text$x:000085E0                 lea     ecx, [ebp-28h]
.text$x:000085E3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000085E3 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:000085E3
.text$x:000085E8
.text$x:000085E8 ; =============== S U B R O U T I N E =======================================
.text$x:000085E8
.text$x:000085E8
.text$x:000085E8 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:000085E8                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:000085E8
.text$x:000085E8 arg_4           = dword ptr  8
.text$x:000085E8
.text$x:000085E8                 mov     edx, [esp+arg_4]
.text$x:000085EC                 lea     eax, [edx+0Ch]
.text$x:000085EF                 mov     ecx, [edx-20h]
.text$x:000085F2                 xor     ecx, eax
.text$x:000085F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000085F9                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:000085FE                 jmp     ___CxxFrameHandler3
.text$x:000085FE __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:000085FE
.text$x:000085FE ; ---------------------------------------------------------------------------
.text$x:00008603                 align 4
.text$x:00008603 _text$x         ends
.text$x:00008603
.text$mn:00008604 ; ===========================================================================
.text$mn:00008604
.text$mn:00008604 ; Segment type: Pure code
.text$mn:00008604 ; Segment permissions: Read/Execute
.text$mn:00008604 _text$mn        segment para public 'CODE' use32
.text$mn:00008604                 assume cs:_text$mn
.text$mn:00008604                 ;org 8604h
.text$mn:00008604 ; COMDAT (pick any)
.text$mn:00008604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008604
.text$mn:00008604 ; =============== S U B R O U T I N E =======================================
.text$mn:00008604
.text$mn:00008604 ; Attributes: bp-based frame
.text$mn:00008604
.text$mn:00008604 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00008604                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00008604 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00008604                                         ; CODE XREF: FunctionListPanel::reload(void)+317p
.text$mn:00008604
.text$mn:00008604 var_4           = dword ptr -4
.text$mn:00008604 arg_0           = dword ptr  8
.text$mn:00008604
.text$mn:00008604                 push    ebp
.text$mn:00008605                 mov     ebp, esp
.text$mn:00008607                 push    ecx
.text$mn:00008608                 mov     [ebp+var_4], ecx
.text$mn:0000860B                 mov     eax, [ebp+arg_0]
.text$mn:0000860E                 push    eax
.text$mn:0000860F                 mov     ecx, [ebp+var_4]
.text$mn:00008612                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00008617                 mov     esp, ebp
.text$mn:00008619                 pop     ebp
.text$mn:0000861A                 retn    4
.text$mn:0000861A ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:0000861A
.text$mn:0000861A ; ---------------------------------------------------------------------------
.text$mn:0000861D                 align 10h
.text$mn:0000861D _text$mn        ends
.text$mn:0000861D
.text$mn:00008620 ; ===========================================================================
.text$mn:00008620
.text$mn:00008620 ; Segment type: Pure code
.text$mn:00008620 ; Segment permissions: Read/Execute
.text$mn:00008620 _text$mn        segment para public 'CODE' use32
.text$mn:00008620                 assume cs:_text$mn
.text$mn:00008620                 ;org 8620h
.text$mn:00008620 ; COMDAT (pick any)
.text$mn:00008620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008620
.text$mn:00008620 ; =============== S U B R O U T I N E =======================================
.text$mn:00008620
.text$mn:00008620 ; Attributes: bp-based frame
.text$mn:00008620
.text$mn:00008620 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00008620                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00008620 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00008620                                         ; CODE XREF: FunctionListPanel::reload(void)+2F9p
.text$mn:00008620                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+70p ...
.text$mn:00008620
.text$mn:00008620 var_4           = dword ptr -4
.text$mn:00008620 Str             = dword ptr  8
.text$mn:00008620
.text$mn:00008620                 push    ebp
.text$mn:00008621                 mov     ebp, esp
.text$mn:00008623                 push    ecx
.text$mn:00008624                 mov     [ebp+var_4], ecx
.text$mn:00008627                 mov     eax, [ebp+Str]
.text$mn:0000862A                 push    eax             ; Str
.text$mn:0000862B                 mov     ecx, [ebp+var_4]
.text$mn:0000862E                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00008633                 mov     esp, ebp
.text$mn:00008635                 pop     ebp
.text$mn:00008636                 retn    4
.text$mn:00008636 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00008636
.text$mn:00008636 ; ---------------------------------------------------------------------------
.text$mn:00008639                 align 4
.text$mn:00008639 _text$mn        ends
.text$mn:00008639
.text$mn:0000863C ; ===========================================================================
.text$mn:0000863C
.text$mn:0000863C ; Segment type: Pure code
.text$mn:0000863C ; Segment permissions: Read/Execute
.text$mn:0000863C _text$mn        segment para public 'CODE' use32
.text$mn:0000863C                 assume cs:_text$mn
.text$mn:0000863C                 ;org 863Ch
.text$mn:0000863C ; COMDAT (pick any)
.text$mn:0000863C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000863C
.text$mn:0000863C ; =============== S U B R O U T I N E =======================================
.text$mn:0000863C
.text$mn:0000863C ; Attributes: bp-based frame
.text$mn:0000863C
.text$mn:0000863C ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:0000863C                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:0000863C ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:0000863C                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:0000863C
.text$mn:0000863C var_4           = dword ptr -4
.text$mn:0000863C arg_0           = dword ptr  8
.text$mn:0000863C
.text$mn:0000863C                 push    ebp
.text$mn:0000863D                 mov     ebp, esp
.text$mn:0000863F                 push    ecx
.text$mn:00008640                 mov     [ebp+var_4], ecx
.text$mn:00008643                 mov     ecx, [ebp+var_4]
.text$mn:00008646                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000864B                 mov     eax, [ebp+arg_0]
.text$mn:0000864E                 and     eax, 1
.text$mn:00008651                 jz      short loc_865F
.text$mn:00008653                 mov     ecx, [ebp+var_4]
.text$mn:00008656                 push    ecx             ; void *
.text$mn:00008657                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000865C                 add     esp, 4
.text$mn:0000865F
.text$mn:0000865F loc_865F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:0000865F                 mov     eax, [ebp+var_4]
.text$mn:00008662                 mov     esp, ebp
.text$mn:00008664                 pop     ebp
.text$mn:00008665                 retn    4
.text$mn:00008665 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:00008665
.text$mn:00008665 _text$mn        ends
.text$mn:00008665
.text$mn:00008668 ; ===========================================================================
.text$mn:00008668
.text$mn:00008668 ; Segment type: Pure code
.text$mn:00008668 ; Segment permissions: Read/Execute
.text$mn:00008668 _text$mn        segment para public 'CODE' use32
.text$mn:00008668                 assume cs:_text$mn
.text$mn:00008668                 ;org 8668h
.text$mn:00008668 ; COMDAT (pick any)
.text$mn:00008668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008668
.text$mn:00008668 ; =============== S U B R O U T I N E =======================================
.text$mn:00008668
.text$mn:00008668 ; Attributes: bp-based frame
.text$mn:00008668
.text$mn:00008668 ; public: void * __thiscall TreeParams::`scalar deleting destructor'(unsigned int)
.text$mn:00008668                 public ??_GTreeParams@@QAEPAXI@Z
.text$mn:00008668 ??_GTreeParams@@QAEPAXI@Z proc near     ; CODE XREF: std::allocator<TreeParams>::destroy<TreeParams>(TreeParams *)+Cp
.text$mn:00008668
.text$mn:00008668 var_4           = dword ptr -4
.text$mn:00008668 arg_0           = dword ptr  8
.text$mn:00008668
.text$mn:00008668                 push    ebp
.text$mn:00008669                 mov     ebp, esp
.text$mn:0000866B                 push    ecx
.text$mn:0000866C                 mov     [ebp+var_4], ecx
.text$mn:0000866F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008672                 call    ??1TreeParams@@QAE@XZ ; TreeParams::~TreeParams(void)
.text$mn:00008677                 mov     eax, [ebp+arg_0]
.text$mn:0000867A                 and     eax, 1
.text$mn:0000867D                 jz      short loc_868B
.text$mn:0000867F                 mov     ecx, [ebp+var_4]
.text$mn:00008682                 push    ecx             ; void *
.text$mn:00008683                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008688                 add     esp, 4
.text$mn:0000868B
.text$mn:0000868B loc_868B:                               ; CODE XREF: TreeParams::`scalar deleting destructor'(uint)+15j
.text$mn:0000868B                 mov     eax, [ebp+var_4]
.text$mn:0000868E                 mov     esp, ebp
.text$mn:00008690                 pop     ebp
.text$mn:00008691                 retn    4
.text$mn:00008691 ??_GTreeParams@@QAEPAXI@Z endp
.text$mn:00008691
.text$mn:00008691 _text$mn        ends
.text$mn:00008691
.text$mn:00008694 ; ===========================================================================
.text$mn:00008694
.text$mn:00008694 ; Segment type: Pure code
.text$mn:00008694 ; Segment permissions: Read/Execute
.text$mn:00008694 _text$mn        segment para public 'CODE' use32
.text$mn:00008694                 assume cs:_text$mn
.text$mn:00008694                 ;org 8694h
.text$mn:00008694 ; COMDAT (pick any)
.text$mn:00008694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008694
.text$mn:00008694 ; =============== S U B R O U T I N E =======================================
.text$mn:00008694
.text$mn:00008694 ; Attributes: bp-based frame
.text$mn:00008694
.text$mn:00008694 ; public: void * __thiscall TreeStateNode::`scalar deleting destructor'(unsigned int)
.text$mn:00008694                 public ??_GTreeStateNode@@QAEPAXI@Z
.text$mn:00008694 ??_GTreeStateNode@@QAEPAXI@Z proc near  ; CODE XREF: std::allocator<TreeStateNode>::destroy<TreeStateNode>(TreeStateNode *)+Cp
.text$mn:00008694
.text$mn:00008694 var_4           = dword ptr -4
.text$mn:00008694 arg_0           = dword ptr  8
.text$mn:00008694
.text$mn:00008694                 push    ebp
.text$mn:00008695                 mov     ebp, esp
.text$mn:00008697                 push    ecx
.text$mn:00008698                 mov     [ebp+var_4], ecx
.text$mn:0000869B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000869E                 call    ??1TreeStateNode@@QAE@XZ ; TreeStateNode::~TreeStateNode(void)
.text$mn:000086A3                 mov     eax, [ebp+arg_0]
.text$mn:000086A6                 and     eax, 1
.text$mn:000086A9                 jz      short loc_86B7
.text$mn:000086AB                 mov     ecx, [ebp+var_4]
.text$mn:000086AE                 push    ecx             ; void *
.text$mn:000086AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000086B4                 add     esp, 4
.text$mn:000086B7
.text$mn:000086B7 loc_86B7:                               ; CODE XREF: TreeStateNode::`scalar deleting destructor'(uint)+15j
.text$mn:000086B7                 mov     eax, [ebp+var_4]
.text$mn:000086BA                 mov     esp, ebp
.text$mn:000086BC                 pop     ebp
.text$mn:000086BD                 retn    4
.text$mn:000086BD ??_GTreeStateNode@@QAEPAXI@Z endp
.text$mn:000086BD
.text$mn:000086BD _text$mn        ends
.text$mn:000086BD
.text$mn:000086C0 ; ===========================================================================
.text$mn:000086C0
.text$mn:000086C0 ; Segment type: Pure code
.text$mn:000086C0 ; Segment permissions: Read/Execute
.text$mn:000086C0 _text$mn        segment para public 'CODE' use32
.text$mn:000086C0                 assume cs:_text$mn
.text$mn:000086C0                 ;org 86C0h
.text$mn:000086C0 ; COMDAT (pick any)
.text$mn:000086C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086C0
.text$mn:000086C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000086C0
.text$mn:000086C0 ; Attributes: bp-based frame
.text$mn:000086C0
.text$mn:000086C0 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000086C0                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:000086C0 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:000086C0
.text$mn:000086C0 var_4           = dword ptr -4
.text$mn:000086C0 arg_0           = dword ptr  8
.text$mn:000086C0
.text$mn:000086C0                 push    ebp
.text$mn:000086C1                 mov     ebp, esp
.text$mn:000086C3                 push    ecx
.text$mn:000086C4                 mov     [ebp+var_4], ecx
.text$mn:000086C7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000086CA                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000086CF                 mov     eax, [ebp+arg_0]
.text$mn:000086D2                 and     eax, 1
.text$mn:000086D5                 jz      short loc_86E3
.text$mn:000086D7                 mov     ecx, [ebp+var_4]
.text$mn:000086DA                 push    ecx             ; void *
.text$mn:000086DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000086E0                 add     esp, 4
.text$mn:000086E3
.text$mn:000086E3 loc_86E3:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000086E3                 mov     eax, [ebp+var_4]
.text$mn:000086E6                 mov     esp, ebp
.text$mn:000086E8                 pop     ebp
.text$mn:000086E9                 retn    4
.text$mn:000086E9 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:000086E9
.text$mn:000086E9 _text$mn        ends
.text$mn:000086E9
.text$mn:000086EC ; ===========================================================================
.text$mn:000086EC
.text$mn:000086EC ; Segment type: Pure code
.text$mn:000086EC ; Segment permissions: Read/Execute
.text$mn:000086EC _text$mn        segment para public 'CODE' use32
.text$mn:000086EC                 assume cs:_text$mn
.text$mn:000086EC                 ;org 86ECh
.text$mn:000086EC ; COMDAT (pick any)
.text$mn:000086EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086EC
.text$mn:000086EC ; =============== S U B R O U T I N E =======================================
.text$mn:000086EC
.text$mn:000086EC ; Attributes: bp-based frame
.text$mn:000086EC
.text$mn:000086EC ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000086EC                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:000086EC ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:000086EC
.text$mn:000086EC var_4           = dword ptr -4
.text$mn:000086EC arg_0           = dword ptr  8
.text$mn:000086EC
.text$mn:000086EC                 push    ebp
.text$mn:000086ED                 mov     ebp, esp
.text$mn:000086EF                 push    ecx
.text$mn:000086F0                 mov     [ebp+var_4], ecx
.text$mn:000086F3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000086F6                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:000086FB                 mov     eax, [ebp+arg_0]
.text$mn:000086FE                 and     eax, 1
.text$mn:00008701                 jz      short loc_870F
.text$mn:00008703                 mov     ecx, [ebp+var_4]
.text$mn:00008706                 push    ecx             ; void *
.text$mn:00008707                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000870C                 add     esp, 4
.text$mn:0000870F
.text$mn:0000870F loc_870F:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000870F                 mov     eax, [ebp+var_4]
.text$mn:00008712                 mov     esp, ebp
.text$mn:00008714                 pop     ebp
.text$mn:00008715                 retn    4
.text$mn:00008715 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00008715
.text$mn:00008715 _text$mn        ends
.text$mn:00008715
.text$mn:00008718 ; ===========================================================================
.text$mn:00008718
.text$mn:00008718 ; Segment type: Pure code
.text$mn:00008718 ; Segment permissions: Read/Execute
.text$mn:00008718 _text$mn        segment para public 'CODE' use32
.text$mn:00008718                 assume cs:_text$mn
.text$mn:00008718                 ;org 8718h
.text$mn:00008718 ; COMDAT (pick any)
.text$mn:00008718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008718
.text$mn:00008718 ; =============== S U B R O U T I N E =======================================
.text$mn:00008718
.text$mn:00008718 ; Attributes: bp-based frame
.text$mn:00008718
.text$mn:00008718 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00008718                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00008718 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00008718
.text$mn:00008718 var_4           = dword ptr -4
.text$mn:00008718 arg_0           = dword ptr  8
.text$mn:00008718
.text$mn:00008718                 push    ebp
.text$mn:00008719                 mov     ebp, esp
.text$mn:0000871B                 push    ecx
.text$mn:0000871C                 mov     [ebp+var_4], ecx
.text$mn:0000871F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008722                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00008727                 mov     eax, [ebp+arg_0]
.text$mn:0000872A                 and     eax, 1
.text$mn:0000872D                 jz      short loc_873B
.text$mn:0000872F                 mov     ecx, [ebp+var_4]
.text$mn:00008732                 push    ecx             ; void *
.text$mn:00008733                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008738                 add     esp, 4
.text$mn:0000873B
.text$mn:0000873B loc_873B:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000873B                 mov     eax, [ebp+var_4]
.text$mn:0000873E                 mov     esp, ebp
.text$mn:00008740                 pop     ebp
.text$mn:00008741                 retn    4
.text$mn:00008741 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00008741
.text$mn:00008741 _text$mn        ends
.text$mn:00008741
.text$mn:00008744 ; ===========================================================================
.text$mn:00008744
.text$mn:00008744 ; Segment type: Pure code
.text$mn:00008744 ; Segment permissions: Read/Execute
.text$mn:00008744 _text$mn        segment para public 'CODE' use32
.text$mn:00008744                 assume cs:_text$mn
.text$mn:00008744                 ;org 8744h
.text$mn:00008744 ; COMDAT (pick any)
.text$mn:00008744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008744
.text$mn:00008744 ; =============== S U B R O U T I N E =======================================
.text$mn:00008744
.text$mn:00008744 ; Attributes: bp-based frame
.text$mn:00008744
.text$mn:00008744 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00008744                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00008744 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00008744
.text$mn:00008744 var_4           = dword ptr -4
.text$mn:00008744 arg_0           = dword ptr  8
.text$mn:00008744
.text$mn:00008744                 push    ebp
.text$mn:00008745                 mov     ebp, esp
.text$mn:00008747                 push    ecx
.text$mn:00008748                 mov     [ebp+var_4], ecx
.text$mn:0000874B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000874E                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00008753                 mov     eax, [ebp+arg_0]
.text$mn:00008756                 and     eax, 1
.text$mn:00008759                 jz      short loc_8767
.text$mn:0000875B                 mov     ecx, [ebp+var_4]
.text$mn:0000875E                 push    ecx             ; void *
.text$mn:0000875F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008764                 add     esp, 4
.text$mn:00008767
.text$mn:00008767 loc_8767:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00008767                 mov     eax, [ebp+var_4]
.text$mn:0000876A                 mov     esp, ebp
.text$mn:0000876C                 pop     ebp
.text$mn:0000876D                 retn    4
.text$mn:0000876D ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:0000876D
.text$mn:0000876D _text$mn        ends
.text$mn:0000876D
.text$mn:00008770 ; ===========================================================================
.text$mn:00008770
.text$mn:00008770 ; Segment type: Pure code
.text$mn:00008770 ; Segment permissions: Read/Execute
.text$mn:00008770 _text$mn        segment para public 'CODE' use32
.text$mn:00008770                 assume cs:_text$mn
.text$mn:00008770                 ;org 8770h
.text$mn:00008770 ; COMDAT (pick any)
.text$mn:00008770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008770
.text$mn:00008770 ; =============== S U B R O U T I N E =======================================
.text$mn:00008770
.text$mn:00008770 ; Attributes: bp-based frame
.text$mn:00008770
.text$mn:00008770 ; public: void * __thiscall foundInfo::`scalar deleting destructor'(unsigned int)
.text$mn:00008770                 public ??_GfoundInfo@@QAEPAXI@Z
.text$mn:00008770 ??_GfoundInfo@@QAEPAXI@Z proc near      ; CODE XREF: std::allocator<foundInfo>::destroy<foundInfo>(foundInfo *)+Cp
.text$mn:00008770
.text$mn:00008770 var_4           = dword ptr -4
.text$mn:00008770 arg_0           = dword ptr  8
.text$mn:00008770
.text$mn:00008770                 push    ebp
.text$mn:00008771                 mov     ebp, esp
.text$mn:00008773                 push    ecx
.text$mn:00008774                 mov     [ebp+var_4], ecx
.text$mn:00008777                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000877A                 call    ??1foundInfo@@QAE@XZ ; foundInfo::~foundInfo(void)
.text$mn:0000877F                 mov     eax, [ebp+arg_0]
.text$mn:00008782                 and     eax, 1
.text$mn:00008785                 jz      short loc_8793
.text$mn:00008787                 mov     ecx, [ebp+var_4]
.text$mn:0000878A                 push    ecx             ; void *
.text$mn:0000878B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008790                 add     esp, 4
.text$mn:00008793
.text$mn:00008793 loc_8793:                               ; CODE XREF: foundInfo::`scalar deleting destructor'(uint)+15j
.text$mn:00008793                 mov     eax, [ebp+var_4]
.text$mn:00008796                 mov     esp, ebp
.text$mn:00008798                 pop     ebp
.text$mn:00008799                 retn    4
.text$mn:00008799 ??_GfoundInfo@@QAEPAXI@Z endp
.text$mn:00008799
.text$mn:00008799 _text$mn        ends
.text$mn:00008799
.text$di:0000879C ; ===========================================================================
.text$di:0000879C
.text$di:0000879C ; Segment type: Pure code
.text$di:0000879C ; Segment permissions: Read/Execute
.text$di:0000879C _text$di        segment para public 'CODE' use32
.text$di:0000879C                 assume cs:_text$di
.text$di:0000879C                 ;org 879Ch
.text$di:0000879C ; COMDAT (pick any)
.text$di:0000879C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000879C
.text$di:0000879C ; =============== S U B R O U T I N E =======================================
.text$di:0000879C
.text$di:0000879C ; Attributes: bp-based frame
.text$di:0000879C
.text$di:0000879C ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:0000879C ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:0000879C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:0000879C                 push    ebp
.text$di:0000879D                 mov     ebp, esp
.text$di:0000879F                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000087A4                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000087A9                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000087AE                 call    _atexit
.text$di:000087B3                 add     esp, 4
.text$di:000087B6                 pop     ebp
.text$di:000087B7                 retn
.text$di:000087B7 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000087B7
.text$di:000087B7 _text$di        ends
.text$di:000087B7
.text$di:000087B8 ; ===========================================================================
.text$di:000087B8
.text$di:000087B8 ; Segment type: Pure code
.text$di:000087B8 ; Segment permissions: Read/Execute
.text$di:000087B8 _text$di        segment para public 'CODE' use32
.text$di:000087B8                 assume cs:_text$di
.text$di:000087B8                 ;org 87B8h
.text$di:000087B8 ; COMDAT (pick any)
.text$di:000087B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000087B8
.text$di:000087B8 ; =============== S U B R O U T I N E =======================================
.text$di:000087B8
.text$di:000087B8 ; Attributes: bp-based frame
.text$di:000087B8
.text$di:000087B8 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000087B8 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000087B8                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000087B8                 push    ebp
.text$di:000087B9                 mov     ebp, esp
.text$di:000087BB                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:000087C0                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:000087C5                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000087CA                 call    _atexit
.text$di:000087CF                 add     esp, 4
.text$di:000087D2                 pop     ebp
.text$di:000087D3                 retn
.text$di:000087D3 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:000087D3
.text$di:000087D3 _text$di        ends
.text$di:000087D3
.text$di:000087D4 ; ===========================================================================
.text$di:000087D4
.text$di:000087D4 ; Segment type: Pure code
.text$di:000087D4 ; Segment permissions: Read/Execute
.text$di:000087D4 _text$di        segment para public 'CODE' use32
.text$di:000087D4                 assume cs:_text$di
.text$di:000087D4                 ;org 87D4h
.text$di:000087D4 ; COMDAT (pick any)
.text$di:000087D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000087D4
.text$di:000087D4 ; =============== S U B R O U T I N E =======================================
.text$di:000087D4
.text$di:000087D4 ; Attributes: bp-based frame
.text$di:000087D4
.text$di:000087D4 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:000087D4 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:000087D4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:000087D4                 push    ebp
.text$di:000087D5                 mov     ebp, esp
.text$di:000087D7                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:000087DC                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:000087E1                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000087E6                 call    _atexit
.text$di:000087EB                 add     esp, 4
.text$di:000087EE                 pop     ebp
.text$di:000087EF                 retn
.text$di:000087EF ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:000087EF
.text$di:000087EF _text$di        ends
.text$di:000087EF
.text$di:000087F0 ; ===========================================================================
.text$di:000087F0
.text$di:000087F0 ; Segment type: Pure code
.text$di:000087F0 ; Segment permissions: Read/Execute
.text$di:000087F0 _text$di        segment para public 'CODE' use32
.text$di:000087F0                 assume cs:_text$di
.text$di:000087F0                 ;org 87F0h
.text$di:000087F0 ; COMDAT (pick any)
.text$di:000087F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000087F0
.text$di:000087F0 ; =============== S U B R O U T I N E =======================================
.text$di:000087F0
.text$di:000087F0 ; Attributes: bp-based frame
.text$di:000087F0
.text$di:000087F0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:000087F0 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000087F0                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:000087F0                 push    ebp
.text$di:000087F1                 mov     ebp, esp
.text$di:000087F3                 push    0               ; unsigned int
.text$di:000087F5                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000087FA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000087FF                 pop     ebp
.text$di:00008800                 retn
.text$di:00008800 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00008800
.text$di:00008800 ; ---------------------------------------------------------------------------
.text$di:00008801                 align 4
.text$di:00008801 _text$di        ends
.text$di:00008801
.text$di:00008804 ; ===========================================================================
.text$di:00008804
.text$di:00008804 ; Segment type: Pure code
.text$di:00008804 ; Segment permissions: Read/Execute
.text$di:00008804 _text$di        segment para public 'CODE' use32
.text$di:00008804                 assume cs:_text$di
.text$di:00008804                 ;org 8804h
.text$di:00008804 ; COMDAT (pick any)
.text$di:00008804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008804
.text$di:00008804 ; =============== S U B R O U T I N E =======================================
.text$di:00008804
.text$di:00008804 ; Attributes: bp-based frame
.text$di:00008804
.text$di:00008804 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00008804 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00008804                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00008804                 push    ebp
.text$di:00008805                 mov     ebp, esp
.text$di:00008807                 push    0               ; unsigned int
.text$di:00008809                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000880E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00008813                 pop     ebp
.text$di:00008814                 retn
.text$di:00008814 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00008814
.text$di:00008814 ; ---------------------------------------------------------------------------
.text$di:00008815                 align 4
.text$di:00008815 _text$di        ends
.text$di:00008815
.text$di:00008818 ; ===========================================================================
.text$di:00008818
.text$di:00008818 ; Segment type: Pure code
.text$di:00008818 ; Segment permissions: Read/Execute
.text$di:00008818 _text$di        segment para public 'CODE' use32
.text$di:00008818                 assume cs:_text$di
.text$di:00008818                 ;org 8818h
.text$di:00008818 ; COMDAT (pick any)
.text$di:00008818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008818
.text$di:00008818 ; =============== S U B R O U T I N E =======================================
.text$di:00008818
.text$di:00008818 ; Attributes: bp-based frame
.text$di:00008818
.text$di:00008818 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00008818 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00008818                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00008818                 push    ebp
.text$di:00008819                 mov     ebp, esp
.text$di:0000881B                 push    0               ; unsigned int
.text$di:0000881D                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00008822                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00008827                 pop     ebp
.text$di:00008828                 retn
.text$di:00008828 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00008828
.text$di:00008828 ; ---------------------------------------------------------------------------
.text$di:00008829                 align 4
.text$di:00008829 _text$di        ends
.text$di:00008829
.text$di:0000882C ; ===========================================================================
.text$di:0000882C
.text$di:0000882C ; Segment type: Pure code
.text$di:0000882C ; Segment permissions: Read/Execute
.text$di:0000882C _text$di        segment para public 'CODE' use32
.text$di:0000882C                 assume cs:_text$di
.text$di:0000882C                 ;org 882Ch
.text$di:0000882C ; COMDAT (pick any)
.text$di:0000882C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000882C
.text$di:0000882C ; =============== S U B R O U T I N E =======================================
.text$di:0000882C
.text$di:0000882C ; Attributes: bp-based frame
.text$di:0000882C
.text$di:0000882C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:0000882C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000882C                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:0000882C                 push    ebp
.text$di:0000882D                 mov     ebp, esp
.text$di:0000882F                 push    0               ; unsigned int
.text$di:00008831                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00008836                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000883B                 pop     ebp
.text$di:0000883C                 retn
.text$di:0000883C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000883C
.text$di:0000883C ; ---------------------------------------------------------------------------
.text$di:0000883D                 align 10h
.text$di:0000883D _text$di        ends
.text$di:0000883D
.text$di:00008840 ; ===========================================================================
.text$di:00008840
.text$di:00008840 ; Segment type: Pure code
.text$di:00008840 ; Segment permissions: Read/Execute
.text$di:00008840 _text$di        segment para public 'CODE' use32
.text$di:00008840                 assume cs:_text$di
.text$di:00008840                 ;org 8840h
.text$di:00008840 ; COMDAT (pick any)
.text$di:00008840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008840
.text$di:00008840 ; =============== S U B R O U T I N E =======================================
.text$di:00008840
.text$di:00008840 ; Attributes: bp-based frame
.text$di:00008840
.text$di:00008840 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:00008840 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:00008840
.text$di:00008840 var_1           = byte ptr -1
.text$di:00008840
.text$di:00008840                 push    ebp
.text$di:00008841                 mov     ebp, esp
.text$di:00008843                 push    ecx
.text$di:00008844                 xor     eax, eax
.text$di:00008846                 mov     [ebp+var_1], al
.text$di:00008849                 mov     esp, ebp
.text$di:0000884B                 pop     ebp
.text$di:0000884C                 retn
.text$di:0000884C ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:0000884C
.text$di:0000884C ; ---------------------------------------------------------------------------
.text$di:0000884D                 align 10h
.text$di:0000884D _text$di        ends
.text$di:0000884D
.text$di:00008850 ; ===========================================================================
.text$di:00008850
.text$di:00008850 ; Segment type: Pure code
.text$di:00008850 ; Segment permissions: Read/Execute
.text$di:00008850 _text$di        segment para public 'CODE' use32
.text$di:00008850                 assume cs:_text$di
.text$di:00008850                 ;org 8850h
.text$di:00008850 ; COMDAT (pick any)
.text$di:00008850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008850
.text$di:00008850 ; =============== S U B R O U T I N E =======================================
.text$di:00008850
.text$di:00008850 ; Attributes: bp-based frame
.text$di:00008850
.text$di:00008850 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00008850 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00008850
.text$di:00008850 var_1           = byte ptr -1
.text$di:00008850
.text$di:00008850                 push    ebp
.text$di:00008851                 mov     ebp, esp
.text$di:00008853                 push    ecx
.text$di:00008854                 xor     eax, eax
.text$di:00008856                 mov     [ebp+var_1], al
.text$di:00008859                 mov     esp, ebp
.text$di:0000885B                 pop     ebp
.text$di:0000885C                 retn
.text$di:0000885C ??__Eallocator_arg@std@@YAXXZ endp
.text$di:0000885C
.text$di:0000885C ; ---------------------------------------------------------------------------
.text$di:0000885D                 align 10h
.text$di:0000885D _text$di        ends
.text$di:0000885D
.text$di:00008860 ; ===========================================================================
.text$di:00008860
.text$di:00008860 ; Segment type: Pure code
.text$di:00008860 ; Segment permissions: Read/Execute
.text$di:00008860 _text$di        segment para public 'CODE' use32
.text$di:00008860                 assume cs:_text$di
.text$di:00008860                 ;org 8860h
.text$di:00008860 ; COMDAT (pick any)
.text$di:00008860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008860
.text$di:00008860 ; =============== S U B R O U T I N E =======================================
.text$di:00008860
.text$di:00008860 ; Attributes: bp-based frame
.text$di:00008860
.text$di:00008860 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:00008860 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:00008860                 push    ebp
.text$di:00008861                 mov     ebp, esp
.text$di:00008863                 mov     ecx, offset _ignore ; this
.text$di:00008868                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:0000886D                 pop     ebp
.text$di:0000886E                 retn
.text$di:0000886E ??__Eignore@std@@YAXXZ endp
.text$di:0000886E
.text$di:0000886E ; ---------------------------------------------------------------------------
.text$di:0000886F                 align 10h
.text$di:0000886F _text$di        ends
.text$di:0000886F
.text$di:00008870 ; ===========================================================================
.text$di:00008870
.text$di:00008870 ; Segment type: Pure code
.text$di:00008870 ; Segment permissions: Read/Execute
.text$di:00008870 _text$di        segment para public 'CODE' use32
.text$di:00008870                 assume cs:_text$di
.text$di:00008870                 ;org 8870h
.text$di:00008870 ; COMDAT (pick any)
.text$di:00008870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008870
.text$di:00008870 ; =============== S U B R O U T I N E =======================================
.text$di:00008870
.text$di:00008870 ; Attributes: bp-based frame
.text$di:00008870
.text$di:00008870 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00008870 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00008870                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00008870
.text$di:00008870 var_1           = byte ptr -1
.text$di:00008870
.text$di:00008870                 push    ebp
.text$di:00008871                 mov     ebp, esp
.text$di:00008873                 push    ecx
.text$di:00008874                 xor     eax, eax
.text$di:00008876                 mov     [ebp+var_1], al
.text$di:00008879                 mov     esp, ebp
.text$di:0000887B                 pop     ebp
.text$di:0000887C                 retn
.text$di:0000887C ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:0000887C
.text$di:0000887C ; ---------------------------------------------------------------------------
.text$di:0000887D                 align 10h
.text$di:0000887D _text$di        ends
.text$di:0000887D
.text$yd:00008880 ; ===========================================================================
.text$yd:00008880
.text$yd:00008880 ; Segment type: Pure code
.text$yd:00008880 ; Segment permissions: Read/Execute
.text$yd:00008880 _text$yd        segment para public 'CODE' use32
.text$yd:00008880                 assume cs:_text$yd
.text$yd:00008880                 ;org 8880h
.text$yd:00008880 ; COMDAT (pick any)
.text$yd:00008880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00008880
.text$yd:00008880 ; =============== S U B R O U T I N E =======================================
.text$yd:00008880
.text$yd:00008880 ; Attributes: bp-based frame
.text$yd:00008880
.text$yd:00008880 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00008880 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00008880                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00008880                 push    ebp
.text$yd:00008881                 mov     ebp, esp
.text$yd:00008883                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00008888                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:0000888D                 pop     ebp
.text$yd:0000888E                 retn
.text$yd:0000888E ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:0000888E
.text$yd:0000888E ; ---------------------------------------------------------------------------
.text$yd:0000888F                 align 10h
.text$yd:0000888F _text$yd        ends
.text$yd:0000888F
.text$yd:00008890 ; ===========================================================================
.text$yd:00008890
.text$yd:00008890 ; Segment type: Pure code
.text$yd:00008890 ; Segment permissions: Read/Execute
.text$yd:00008890 _text$yd        segment para public 'CODE' use32
.text$yd:00008890                 assume cs:_text$yd
.text$yd:00008890                 ;org 8890h
.text$yd:00008890 ; COMDAT (pick any)
.text$yd:00008890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00008890
.text$yd:00008890 ; =============== S U B R O U T I N E =======================================
.text$yd:00008890
.text$yd:00008890 ; Attributes: bp-based frame
.text$yd:00008890
.text$yd:00008890 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00008890 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00008890                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00008890                 push    ebp
.text$yd:00008891                 mov     ebp, esp
.text$yd:00008893                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00008898                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:0000889D                 pop     ebp
.text$yd:0000889E                 retn
.text$yd:0000889E ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:0000889E
.text$yd:0000889E ; ---------------------------------------------------------------------------
.text$yd:0000889F                 align 10h
.text$yd:0000889F _text$yd        ends
.text$yd:0000889F
.text$yd:000088A0 ; ===========================================================================
.text$yd:000088A0
.text$yd:000088A0 ; Segment type: Pure code
.text$yd:000088A0 ; Segment permissions: Read/Execute
.text$yd:000088A0 _text$yd        segment para public 'CODE' use32
.text$yd:000088A0                 assume cs:_text$yd
.text$yd:000088A0                 ;org 88A0h
.text$yd:000088A0 ; COMDAT (pick any)
.text$yd:000088A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000088A0
.text$yd:000088A0 ; =============== S U B R O U T I N E =======================================
.text$yd:000088A0
.text$yd:000088A0 ; Attributes: bp-based frame
.text$yd:000088A0
.text$yd:000088A0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:000088A0 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:000088A0                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:000088A0                 push    ebp
.text$yd:000088A1                 mov     ebp, esp
.text$yd:000088A3                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:000088A8                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:000088AD                 pop     ebp
.text$yd:000088AE                 retn
.text$yd:000088AE ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:000088AE
.text$yd:000088AE ; ---------------------------------------------------------------------------
.text$yd:000088AF                 align 10h
.text$yd:000088AF _text$yd        ends
.text$yd:000088AF
.text$mn:000088B0 ; ===========================================================================
.text$mn:000088B0
.text$mn:000088B0 ; Segment type: Pure code
.text$mn:000088B0 ; Segment permissions: Read/Execute
.text$mn:000088B0 _text$mn        segment para public 'CODE' use32
.text$mn:000088B0                 assume cs:_text$mn
.text$mn:000088B0                 ;org 88B0h
.text$mn:000088B0 ; COMDAT (pick any)
.text$mn:000088B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088B0
.text$mn:000088B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000088B0
.text$mn:000088B0 ; Attributes: bp-based frame
.text$mn:000088B0
.text$mn:000088B0 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:000088B0                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000088B0 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:000088B0                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:000088B0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(TreeStateNode *,std::_Container_base12 const *)+45p ...
.text$mn:000088B0
.text$mn:000088B0 var_1C          = byte ptr -1Ch
.text$mn:000088B0 var_18          = byte ptr -18h
.text$mn:000088B0 var_14          = dword ptr -14h
.text$mn:000088B0 var_10          = dword ptr -10h
.text$mn:000088B0 var_C           = dword ptr -0Ch
.text$mn:000088B0 var_4           = dword ptr -4
.text$mn:000088B0 arg_0           = dword ptr  8
.text$mn:000088B0
.text$mn:000088B0                 push    ebp
.text$mn:000088B1                 mov     ebp, esp
.text$mn:000088B3                 push    0FFFFFFFFh
.text$mn:000088B5                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000088BA                 mov     eax, large fs:0
.text$mn:000088C0                 push    eax
.text$mn:000088C1                 sub     esp, 10h
.text$mn:000088C4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000088C9                 xor     eax, ebp
.text$mn:000088CB                 push    eax
.text$mn:000088CC                 lea     eax, [ebp+var_C]
.text$mn:000088CF                 mov     large fs:0, eax
.text$mn:000088D5                 mov     [ebp+var_10], ecx
.text$mn:000088D8                 cmp     [ebp+arg_0], 0
.text$mn:000088DC                 jnz     short loc_8908
.text$mn:000088DE                 push    3               ; int
.text$mn:000088E0                 lea     ecx, [ebp+var_18] ; this
.text$mn:000088E3                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000088E8                 mov     [ebp+var_4], 0
.text$mn:000088EF                 mov     ecx, [ebp+var_10] ; this
.text$mn:000088F2                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000088F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000088FE                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008901                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00008906                 jmp     short loc_895F
.text$mn:00008908 ; ---------------------------------------------------------------------------
.text$mn:00008908
.text$mn:00008908 loc_8908:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:00008908                 mov     eax, [ebp+arg_0]
.text$mn:0000890B                 mov     ecx, [eax]
.text$mn:0000890D                 mov     [ebp+var_14], ecx
.text$mn:00008910                 mov     edx, [ebp+var_10]
.text$mn:00008913                 mov     eax, [edx]
.text$mn:00008915                 cmp     eax, [ebp+var_14]
.text$mn:00008918                 jz      short loc_895F
.text$mn:0000891A                 push    3               ; int
.text$mn:0000891C                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000891F                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008924                 mov     [ebp+var_4], 1
.text$mn:0000892B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000892E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00008933                 mov     ecx, [ebp+var_10]
.text$mn:00008936                 mov     edx, [ebp+var_14]
.text$mn:00008939                 mov     eax, [edx+4]
.text$mn:0000893C                 mov     [ecx+4], eax
.text$mn:0000893F                 mov     ecx, [ebp+var_14]
.text$mn:00008942                 mov     edx, [ebp+var_10]
.text$mn:00008945                 mov     [ecx+4], edx
.text$mn:00008948                 mov     eax, [ebp+var_10]
.text$mn:0000894B                 mov     ecx, [ebp+var_14]
.text$mn:0000894E                 mov     [eax], ecx
.text$mn:00008950                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008957                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000895A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000895F
.text$mn:0000895F loc_895F:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000895F                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000895F                 mov     ecx, [ebp+var_C]
.text$mn:00008962                 mov     large fs:0, ecx
.text$mn:00008969                 pop     ecx
.text$mn:0000896A                 mov     esp, ebp
.text$mn:0000896C                 pop     ebp
.text$mn:0000896D                 retn    4
.text$mn:0000896D ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000896D
.text$mn:0000896D _text$mn        ends
.text$mn:0000896D
.text$x:00008970 ; ===========================================================================
.text$x:00008970
.text$x:00008970 ; Segment type: Pure code
.text$x:00008970 ; Segment permissions: Read/Execute
.text$x:00008970 _text$x         segment para public 'CODE' use32
.text$x:00008970                 assume cs:_text$x
.text$x:00008970                 ;org 8970h
.text$x:00008970 ; COMDAT (pick associative to section at 88B0)
.text$x:00008970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008970
.text$x:00008970 ; =============== S U B R O U T I N E =======================================
.text$x:00008970
.text$x:00008970
.text$x:00008970 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:00008970                                         ; DATA XREF: .xdata$x:0000CB68o
.text$x:00008970                 lea     ecx, [ebp-18h]  ; this
.text$x:00008973                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00008973 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:00008973
.text$x:00008978
.text$x:00008978 ; =============== S U B R O U T I N E =======================================
.text$x:00008978
.text$x:00008978
.text$x:00008978 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:00008978                                         ; DATA XREF: .xdata$x:0000CB70o
.text$x:00008978                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000897B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000897B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000897B
.text$x:00008980
.text$x:00008980 ; =============== S U B R O U T I N E =======================================
.text$x:00008980
.text$x:00008980
.text$x:00008980 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:00008980                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:00008980
.text$x:00008980 arg_4           = dword ptr  8
.text$x:00008980
.text$x:00008980                 mov     edx, [esp+arg_4]
.text$x:00008984                 lea     eax, [edx+0Ch]
.text$x:00008987                 mov     ecx, [edx-14h]
.text$x:0000898A                 xor     ecx, eax
.text$x:0000898C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008991                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:00008996                 jmp     ___CxxFrameHandler3
.text$x:00008996 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:00008996
.text$x:00008996 ; ---------------------------------------------------------------------------
.text$x:0000899B                 align 4
.text$x:0000899B _text$x         ends
.text$x:0000899B
.text$mn:0000899C ; ===========================================================================
.text$mn:0000899C
.text$mn:0000899C ; Segment type: Pure code
.text$mn:0000899C ; Segment permissions: Read/Execute
.text$mn:0000899C _text$mn        segment para public 'CODE' use32
.text$mn:0000899C                 assume cs:_text$mn
.text$mn:0000899C                 ;org 899Ch
.text$mn:0000899C ; COMDAT (pick any)
.text$mn:0000899C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000899C
.text$mn:0000899C ; =============== S U B R O U T I N E =======================================
.text$mn:0000899C
.text$mn:0000899C ; Attributes: bp-based frame
.text$mn:0000899C
.text$mn:0000899C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000899C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000899C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000899C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000899C
.text$mn:0000899C var_10          = byte ptr -10h
.text$mn:0000899C var_8           = dword ptr -8
.text$mn:0000899C var_1           = byte ptr -1
.text$mn:0000899C
.text$mn:0000899C                 push    ebp
.text$mn:0000899D                 mov     ebp, esp
.text$mn:0000899F                 sub     esp, 10h
.text$mn:000089A2                 mov     [ebp+var_8], ecx
.text$mn:000089A5                 lea     ecx, [ebp+var_1]
.text$mn:000089A8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000089AD                 push    1
.text$mn:000089AF                 lea     ecx, [ebp+var_1]
.text$mn:000089B2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000089B7                 mov     ecx, [ebp+var_8]
.text$mn:000089BA                 mov     [ecx], eax
.text$mn:000089BC                 lea     ecx, [ebp+var_10] ; this
.text$mn:000089BF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000089C4                 push    eax             ; int
.text$mn:000089C5                 mov     edx, [ebp+var_8]
.text$mn:000089C8                 mov     eax, [edx]
.text$mn:000089CA                 push    eax             ; void *
.text$mn:000089CB                 lea     ecx, [ebp+var_1]
.text$mn:000089CE                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000089D3                 mov     ecx, [ebp+var_8]
.text$mn:000089D6                 mov     edx, [ecx]
.text$mn:000089D8                 mov     eax, [ebp+var_8]
.text$mn:000089DB                 mov     [edx], eax
.text$mn:000089DD                 mov     esp, ebp
.text$mn:000089DF                 pop     ebp
.text$mn:000089E0                 retn
.text$mn:000089E0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000089E0
.text$mn:000089E0 ; ---------------------------------------------------------------------------
.text$mn:000089E1                 align 4
.text$mn:000089E1 _text$mn        ends
.text$mn:000089E1
.text$mn:000089E4 ; ===========================================================================
.text$mn:000089E4
.text$mn:000089E4 ; Segment type: Pure code
.text$mn:000089E4 ; Segment permissions: Read/Execute
.text$mn:000089E4 _text$mn        segment para public 'CODE' use32
.text$mn:000089E4                 assume cs:_text$mn
.text$mn:000089E4                 ;org 89E4h
.text$mn:000089E4 ; COMDAT (pick any)
.text$mn:000089E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089E4
.text$mn:000089E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000089E4
.text$mn:000089E4 ; Attributes: bp-based frame
.text$mn:000089E4
.text$mn:000089E4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000089E4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000089E4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000089E4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:000089E4
.text$mn:000089E4 var_10          = byte ptr -10h
.text$mn:000089E4 var_8           = dword ptr -8
.text$mn:000089E4 var_1           = byte ptr -1
.text$mn:000089E4
.text$mn:000089E4                 push    ebp
.text$mn:000089E5                 mov     ebp, esp
.text$mn:000089E7                 sub     esp, 10h
.text$mn:000089EA                 mov     [ebp+var_8], ecx
.text$mn:000089ED                 lea     ecx, [ebp+var_1]
.text$mn:000089F0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000089F5                 push    1
.text$mn:000089F7                 lea     ecx, [ebp+var_1]
.text$mn:000089FA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000089FF                 mov     ecx, [ebp+var_8]
.text$mn:00008A02                 mov     [ecx], eax
.text$mn:00008A04                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008A07                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008A0C                 push    eax             ; int
.text$mn:00008A0D                 mov     edx, [ebp+var_8]
.text$mn:00008A10                 mov     eax, [edx]
.text$mn:00008A12                 push    eax             ; void *
.text$mn:00008A13                 lea     ecx, [ebp+var_1]
.text$mn:00008A16                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008A1B                 mov     ecx, [ebp+var_8]
.text$mn:00008A1E                 mov     edx, [ecx]
.text$mn:00008A20                 mov     eax, [ebp+var_8]
.text$mn:00008A23                 mov     [edx], eax
.text$mn:00008A25                 mov     esp, ebp
.text$mn:00008A27                 pop     ebp
.text$mn:00008A28                 retn
.text$mn:00008A28 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008A28
.text$mn:00008A28 ; ---------------------------------------------------------------------------
.text$mn:00008A29                 align 4
.text$mn:00008A29 _text$mn        ends
.text$mn:00008A29
.text$mn:00008A2C ; ===========================================================================
.text$mn:00008A2C
.text$mn:00008A2C ; Segment type: Pure code
.text$mn:00008A2C ; Segment permissions: Read/Execute
.text$mn:00008A2C _text$mn        segment para public 'CODE' use32
.text$mn:00008A2C                 assume cs:_text$mn
.text$mn:00008A2C                 ;org 8A2Ch
.text$mn:00008A2C ; COMDAT (pick any)
.text$mn:00008A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A2C
.text$mn:00008A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00008A2C
.text$mn:00008A2C ; Attributes: bp-based frame
.text$mn:00008A2C
.text$mn:00008A2C ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::_Alloc_proxy(void)
.text$mn:00008A2C                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ
.text$mn:00008A2C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008A2C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(std::allocator<TreeStateNode> const &)+38p
.text$mn:00008A2C
.text$mn:00008A2C var_10          = byte ptr -10h
.text$mn:00008A2C var_8           = dword ptr -8
.text$mn:00008A2C var_1           = byte ptr -1
.text$mn:00008A2C
.text$mn:00008A2C                 push    ebp
.text$mn:00008A2D                 mov     ebp, esp
.text$mn:00008A2F                 sub     esp, 10h
.text$mn:00008A32                 mov     [ebp+var_8], ecx
.text$mn:00008A35                 lea     ecx, [ebp+var_1]
.text$mn:00008A38                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00008A3D                 push    1
.text$mn:00008A3F                 lea     ecx, [ebp+var_1]
.text$mn:00008A42                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00008A47                 mov     ecx, [ebp+var_8]
.text$mn:00008A4A                 mov     [ecx], eax
.text$mn:00008A4C                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008A4F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008A54                 push    eax             ; int
.text$mn:00008A55                 mov     edx, [ebp+var_8]
.text$mn:00008A58                 mov     eax, [edx]
.text$mn:00008A5A                 push    eax             ; void *
.text$mn:00008A5B                 lea     ecx, [ebp+var_1]
.text$mn:00008A5E                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008A63                 mov     ecx, [ebp+var_8]
.text$mn:00008A66                 mov     edx, [ecx]
.text$mn:00008A68                 mov     eax, [ebp+var_8]
.text$mn:00008A6B                 mov     [edx], eax
.text$mn:00008A6D                 mov     esp, ebp
.text$mn:00008A6F                 pop     ebp
.text$mn:00008A70                 retn
.text$mn:00008A70 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008A70
.text$mn:00008A70 ; ---------------------------------------------------------------------------
.text$mn:00008A71                 align 4
.text$mn:00008A71 _text$mn        ends
.text$mn:00008A71
.text$mn:00008A74 ; ===========================================================================
.text$mn:00008A74
.text$mn:00008A74 ; Segment type: Pure code
.text$mn:00008A74 ; Segment permissions: Read/Execute
.text$mn:00008A74 _text$mn        segment para public 'CODE' use32
.text$mn:00008A74                 assume cs:_text$mn
.text$mn:00008A74                 ;org 8A74h
.text$mn:00008A74 ; COMDAT (pick any)
.text$mn:00008A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A74
.text$mn:00008A74 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A74
.text$mn:00008A74 ; Attributes: bp-based frame
.text$mn:00008A74
.text$mn:00008A74 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::_Alloc_proxy(void)
.text$mn:00008A74                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ
.text$mn:00008A74 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008A74                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(std::allocator<foundInfo> const &)+38p
.text$mn:00008A74
.text$mn:00008A74 var_10          = byte ptr -10h
.text$mn:00008A74 var_8           = dword ptr -8
.text$mn:00008A74 var_1           = byte ptr -1
.text$mn:00008A74
.text$mn:00008A74                 push    ebp
.text$mn:00008A75                 mov     ebp, esp
.text$mn:00008A77                 sub     esp, 10h
.text$mn:00008A7A                 mov     [ebp+var_8], ecx
.text$mn:00008A7D                 lea     ecx, [ebp+var_1]
.text$mn:00008A80                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00008A85                 push    1
.text$mn:00008A87                 lea     ecx, [ebp+var_1]
.text$mn:00008A8A                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00008A8F                 mov     ecx, [ebp+var_8]
.text$mn:00008A92                 mov     [ecx], eax
.text$mn:00008A94                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008A97                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008A9C                 push    eax             ; int
.text$mn:00008A9D                 mov     edx, [ebp+var_8]
.text$mn:00008AA0                 mov     eax, [edx]
.text$mn:00008AA2                 push    eax             ; void *
.text$mn:00008AA3                 lea     ecx, [ebp+var_1]
.text$mn:00008AA6                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008AAB                 mov     ecx, [ebp+var_8]
.text$mn:00008AAE                 mov     edx, [ecx]
.text$mn:00008AB0                 mov     eax, [ebp+var_8]
.text$mn:00008AB3                 mov     [edx], eax
.text$mn:00008AB5                 mov     esp, ebp
.text$mn:00008AB7                 pop     ebp
.text$mn:00008AB8                 retn
.text$mn:00008AB8 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008AB8
.text$mn:00008AB8 ; ---------------------------------------------------------------------------
.text$mn:00008AB9                 align 4
.text$mn:00008AB9 _text$mn        ends
.text$mn:00008AB9
.text$mn:00008ABC ; ===========================================================================
.text$mn:00008ABC
.text$mn:00008ABC ; Segment type: Pure code
.text$mn:00008ABC ; Segment permissions: Read/Execute
.text$mn:00008ABC _text$mn        segment para public 'CODE' use32
.text$mn:00008ABC                 assume cs:_text$mn
.text$mn:00008ABC                 ;org 8ABCh
.text$mn:00008ABC ; COMDAT (pick any)
.text$mn:00008ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008ABC
.text$mn:00008ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00008ABC
.text$mn:00008ABC ; Attributes: bp-based frame
.text$mn:00008ABC
.text$mn:00008ABC ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00008ABC                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:00008ABC ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:00008ABC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:00008ABC
.text$mn:00008ABC var_10          = byte ptr -10h
.text$mn:00008ABC var_8           = dword ptr -8
.text$mn:00008ABC var_1           = byte ptr -1
.text$mn:00008ABC
.text$mn:00008ABC                 push    ebp
.text$mn:00008ABD                 mov     ebp, esp
.text$mn:00008ABF                 sub     esp, 10h
.text$mn:00008AC2                 mov     [ebp+var_8], ecx
.text$mn:00008AC5                 lea     ecx, [ebp+var_1]
.text$mn:00008AC8                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00008ACD                 push    1
.text$mn:00008ACF                 lea     ecx, [ebp+var_1]
.text$mn:00008AD2                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00008AD7                 mov     ecx, [ebp+var_8]
.text$mn:00008ADA                 mov     [ecx], eax
.text$mn:00008ADC                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008ADF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008AE4                 push    eax             ; int
.text$mn:00008AE5                 mov     edx, [ebp+var_8]
.text$mn:00008AE8                 mov     eax, [edx]
.text$mn:00008AEA                 push    eax             ; void *
.text$mn:00008AEB                 lea     ecx, [ebp+var_1]
.text$mn:00008AEE                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008AF3                 mov     ecx, [ebp+var_8]
.text$mn:00008AF6                 mov     edx, [ecx]
.text$mn:00008AF8                 mov     eax, [ebp+var_8]
.text$mn:00008AFB                 mov     [edx], eax
.text$mn:00008AFD                 mov     esp, ebp
.text$mn:00008AFF                 pop     ebp
.text$mn:00008B00                 retn
.text$mn:00008B00 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:00008B00
.text$mn:00008B00 ; ---------------------------------------------------------------------------
.text$mn:00008B01                 align 4
.text$mn:00008B01 _text$mn        ends
.text$mn:00008B01
.text$mn:00008B04 ; ===========================================================================
.text$mn:00008B04
.text$mn:00008B04 ; Segment type: Pure code
.text$mn:00008B04 ; Segment permissions: Read/Execute
.text$mn:00008B04 _text$mn        segment para public 'CODE' use32
.text$mn:00008B04                 assume cs:_text$mn
.text$mn:00008B04                 ;org 8B04h
.text$mn:00008B04 ; COMDAT (pick any)
.text$mn:00008B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B04
.text$mn:00008B04 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B04
.text$mn:00008B04 ; Attributes: bp-based frame
.text$mn:00008B04
.text$mn:00008B04 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00008B04                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:00008B04 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00008B04                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:00008B04
.text$mn:00008B04 var_8           = dword ptr -8
.text$mn:00008B04 var_1           = byte ptr -1
.text$mn:00008B04 arg_0           = dword ptr  8
.text$mn:00008B04
.text$mn:00008B04                 push    ebp
.text$mn:00008B05                 mov     ebp, esp
.text$mn:00008B07                 sub     esp, 8
.text$mn:00008B0A                 mov     [ebp+var_8], ecx
.text$mn:00008B0D                 mov     eax, [ebp+arg_0]
.text$mn:00008B10                 cmp     dword ptr [eax+18h], 8
.text$mn:00008B14                 jnb     short loc_8B38
.text$mn:00008B16                 mov     ecx, [ebp+arg_0]
.text$mn:00008B19                 mov     edx, [ecx+14h]
.text$mn:00008B1C                 add     edx, 1
.text$mn:00008B1F                 push    edx             ; int
.text$mn:00008B20                 mov     eax, [ebp+arg_0]
.text$mn:00008B23                 add     eax, 4
.text$mn:00008B26                 push    eax             ; Src
.text$mn:00008B27                 mov     ecx, [ebp+var_8]
.text$mn:00008B2A                 add     ecx, 4
.text$mn:00008B2D                 push    ecx             ; Dst
.text$mn:00008B2E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00008B33                 add     esp, 0Ch
.text$mn:00008B36                 jmp     short loc_8B63
.text$mn:00008B38 ; ---------------------------------------------------------------------------
.text$mn:00008B38
.text$mn:00008B38 loc_8B38:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:00008B38                 mov     edx, [ebp+arg_0]
.text$mn:00008B3B                 add     edx, 4
.text$mn:00008B3E                 push    edx             ; int
.text$mn:00008B3F                 mov     eax, [ebp+var_8]
.text$mn:00008B42                 add     eax, 4
.text$mn:00008B45                 push    eax             ; void *
.text$mn:00008B46                 lea     ecx, [ebp+var_1]
.text$mn:00008B49                 push    ecx
.text$mn:00008B4A                 mov     ecx, [ebp+var_8]
.text$mn:00008B4D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008B52                 mov     ecx, eax
.text$mn:00008B54                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00008B59                 mov     edx, [ebp+arg_0]
.text$mn:00008B5C                 mov     dword ptr [edx+4], 0
.text$mn:00008B63
.text$mn:00008B63 loc_8B63:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:00008B63                 mov     eax, [ebp+var_8]
.text$mn:00008B66                 mov     ecx, [ebp+arg_0]
.text$mn:00008B69                 mov     edx, [ecx+14h]
.text$mn:00008B6C                 mov     [eax+14h], edx
.text$mn:00008B6F                 mov     eax, [ebp+var_8]
.text$mn:00008B72                 mov     ecx, [ebp+arg_0]
.text$mn:00008B75                 mov     edx, [ecx+18h]
.text$mn:00008B78                 mov     [eax+18h], edx
.text$mn:00008B7B                 push    0
.text$mn:00008B7D                 push    0
.text$mn:00008B7F                 mov     ecx, [ebp+arg_0]
.text$mn:00008B82                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008B87                 mov     esp, ebp
.text$mn:00008B89                 pop     ebp
.text$mn:00008B8A                 retn    4
.text$mn:00008B8A ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00008B8A
.text$mn:00008B8A ; ---------------------------------------------------------------------------
.text$mn:00008B8D                 align 10h
.text$mn:00008B8D _text$mn        ends
.text$mn:00008B8D
.text$mn:00008B90 ; ===========================================================================
.text$mn:00008B90
.text$mn:00008B90 ; Segment type: Pure code
.text$mn:00008B90 ; Segment permissions: Read/Execute
.text$mn:00008B90 _text$mn        segment para public 'CODE' use32
.text$mn:00008B90                 assume cs:_text$mn
.text$mn:00008B90                 ;org 8B90h
.text$mn:00008B90 ; COMDAT (pick any)
.text$mn:00008B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B90
.text$mn:00008B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B90
.text$mn:00008B90 ; Attributes: bp-based frame
.text$mn:00008B90
.text$mn:00008B90 ; protected: bool __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Buy(unsigned int)
.text$mn:00008B90                 public ?_Buy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAE_NI@Z
.text$mn:00008B90 ?_Buy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAE_NI@Z proc near
.text$mn:00008B90                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+62p
.text$mn:00008B90                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+1D1p
.text$mn:00008B90
.text$mn:00008B90 var_8           = dword ptr -8
.text$mn:00008B90 var_1           = byte ptr -1
.text$mn:00008B90 arg_0           = dword ptr  8
.text$mn:00008B90
.text$mn:00008B90                 push    ebp
.text$mn:00008B91                 mov     ebp, esp
.text$mn:00008B93                 sub     esp, 8
.text$mn:00008B96                 mov     [ebp+var_8], ecx
.text$mn:00008B99                 mov     eax, [ebp+var_8]
.text$mn:00008B9C                 mov     dword ptr [eax+4], 0
.text$mn:00008BA3                 mov     ecx, [ebp+var_8]
.text$mn:00008BA6                 mov     dword ptr [ecx+8], 0
.text$mn:00008BAD                 mov     edx, [ebp+var_8]
.text$mn:00008BB0                 mov     dword ptr [edx+0Ch], 0
.text$mn:00008BB7                 cmp     [ebp+arg_0], 0
.text$mn:00008BBB                 jnz     short loc_8BC3
.text$mn:00008BBD                 xor     al, al
.text$mn:00008BBF                 jmp     short loc_8C15
.text$mn:00008BC1 ; ---------------------------------------------------------------------------
.text$mn:00008BC1                 jmp     short loc_8C13
.text$mn:00008BC3 ; ---------------------------------------------------------------------------
.text$mn:00008BC3
.text$mn:00008BC3 loc_8BC3:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+2Bj
.text$mn:00008BC3                 mov     ecx, [ebp+var_8]
.text$mn:00008BC6                 call    ?max_size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::max_size(void)
.text$mn:00008BCB                 cmp     eax, [ebp+arg_0]
.text$mn:00008BCE                 jnb     short loc_8BDA
.text$mn:00008BD0                 mov     ecx, [ebp+var_8]
.text$mn:00008BD3                 call    ?_Xlen@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IBEXXZ ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Xlen(void)
.text$mn:00008BD8                 jmp     short loc_8C13
.text$mn:00008BDA ; ---------------------------------------------------------------------------
.text$mn:00008BDA
.text$mn:00008BDA loc_8BDA:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+3Ej
.text$mn:00008BDA                 mov     eax, [ebp+arg_0]
.text$mn:00008BDD                 push    eax
.text$mn:00008BDE                 lea     ecx, [ebp+var_1]
.text$mn:00008BE1                 push    ecx
.text$mn:00008BE2                 mov     ecx, [ebp+var_8]
.text$mn:00008BE5                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00008BEA                 mov     ecx, eax
.text$mn:00008BEC                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEPAUTreeStateNode@@I@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::allocate(uint)
.text$mn:00008BF1                 mov     edx, [ebp+var_8]
.text$mn:00008BF4                 mov     [edx+4], eax
.text$mn:00008BF7                 mov     eax, [ebp+var_8]
.text$mn:00008BFA                 mov     ecx, [ebp+var_8]
.text$mn:00008BFD                 mov     edx, [ecx+4]
.text$mn:00008C00                 mov     [eax+8], edx
.text$mn:00008C03                 imul    eax, [ebp+arg_0], 4Ch
.text$mn:00008C07                 mov     ecx, [ebp+var_8]
.text$mn:00008C0A                 add     eax, [ecx+4]
.text$mn:00008C0D                 mov     edx, [ebp+var_8]
.text$mn:00008C10                 mov     [edx+0Ch], eax
.text$mn:00008C13
.text$mn:00008C13 loc_8C13:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+31j
.text$mn:00008C13                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+48j
.text$mn:00008C13                 mov     al, 1
.text$mn:00008C15
.text$mn:00008C15 loc_8C15:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+2Fj
.text$mn:00008C15                 mov     esp, ebp
.text$mn:00008C17                 pop     ebp
.text$mn:00008C18                 retn    4
.text$mn:00008C18 ?_Buy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAE_NI@Z endp
.text$mn:00008C18
.text$mn:00008C18 ; ---------------------------------------------------------------------------
.text$mn:00008C1B                 align 4
.text$mn:00008C1B _text$mn        ends
.text$mn:00008C1B
.text$mn:00008C1C ; ===========================================================================
.text$mn:00008C1C
.text$mn:00008C1C ; Segment type: Pure code
.text$mn:00008C1C ; Segment permissions: Read/Execute
.text$mn:00008C1C _text$mn        segment para public 'CODE' use32
.text$mn:00008C1C                 assume cs:_text$mn
.text$mn:00008C1C                 ;org 8C1Ch
.text$mn:00008C1C ; COMDAT (pick any)
.text$mn:00008C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C1C
.text$mn:00008C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C1C
.text$mn:00008C1C ; Attributes: bp-based frame
.text$mn:00008C1C
.text$mn:00008C1C ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Buy(unsigned int)
.text$mn:00008C1C                 public ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z
.text$mn:00008C1C ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z proc near
.text$mn:00008C1C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+62p
.text$mn:00008C1C
.text$mn:00008C1C var_8           = dword ptr -8
.text$mn:00008C1C var_1           = byte ptr -1
.text$mn:00008C1C arg_0           = dword ptr  8
.text$mn:00008C1C
.text$mn:00008C1C                 push    ebp
.text$mn:00008C1D                 mov     ebp, esp
.text$mn:00008C1F                 sub     esp, 8
.text$mn:00008C22                 mov     [ebp+var_8], ecx
.text$mn:00008C25                 mov     eax, [ebp+var_8]
.text$mn:00008C28                 mov     dword ptr [eax+4], 0
.text$mn:00008C2F                 mov     ecx, [ebp+var_8]
.text$mn:00008C32                 mov     dword ptr [ecx+8], 0
.text$mn:00008C39                 mov     edx, [ebp+var_8]
.text$mn:00008C3C                 mov     dword ptr [edx+0Ch], 0
.text$mn:00008C43                 cmp     [ebp+arg_0], 0
.text$mn:00008C47                 jnz     short loc_8C4F
.text$mn:00008C49                 xor     al, al
.text$mn:00008C4B                 jmp     short loc_8CA1
.text$mn:00008C4D ; ---------------------------------------------------------------------------
.text$mn:00008C4D                 jmp     short loc_8C9F
.text$mn:00008C4F ; ---------------------------------------------------------------------------
.text$mn:00008C4F
.text$mn:00008C4F loc_8C4F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+2Bj
.text$mn:00008C4F                 mov     ecx, [ebp+var_8]
.text$mn:00008C52                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00008C57                 cmp     eax, [ebp+arg_0]
.text$mn:00008C5A                 jnb     short loc_8C66
.text$mn:00008C5C                 mov     ecx, [ebp+var_8]
.text$mn:00008C5F                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:00008C64                 jmp     short loc_8C9F
.text$mn:00008C66 ; ---------------------------------------------------------------------------
.text$mn:00008C66
.text$mn:00008C66 loc_8C66:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+3Ej
.text$mn:00008C66                 mov     eax, [ebp+arg_0]
.text$mn:00008C69                 push    eax
.text$mn:00008C6A                 lea     ecx, [ebp+var_1]
.text$mn:00008C6D                 push    ecx
.text$mn:00008C6E                 mov     ecx, [ebp+var_8]
.text$mn:00008C71                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00008C76                 mov     ecx, eax
.text$mn:00008C78                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:00008C7D                 mov     edx, [ebp+var_8]
.text$mn:00008C80                 mov     [edx+4], eax
.text$mn:00008C83                 mov     eax, [ebp+var_8]
.text$mn:00008C86                 mov     ecx, [ebp+var_8]
.text$mn:00008C89                 mov     edx, [ecx+4]
.text$mn:00008C8C                 mov     [eax+8], edx
.text$mn:00008C8F                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00008C93                 mov     ecx, [ebp+var_8]
.text$mn:00008C96                 add     eax, [ecx+4]
.text$mn:00008C99                 mov     edx, [ebp+var_8]
.text$mn:00008C9C                 mov     [edx+0Ch], eax
.text$mn:00008C9F
.text$mn:00008C9F loc_8C9F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+31j
.text$mn:00008C9F                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+48j
.text$mn:00008C9F                 mov     al, 1
.text$mn:00008CA1
.text$mn:00008CA1 loc_8CA1:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+2Fj
.text$mn:00008CA1                 mov     esp, ebp
.text$mn:00008CA3                 pop     ebp
.text$mn:00008CA4                 retn    4
.text$mn:00008CA4 ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z endp
.text$mn:00008CA4
.text$mn:00008CA4 ; ---------------------------------------------------------------------------
.text$mn:00008CA7                 align 4
.text$mn:00008CA7 _text$mn        ends
.text$mn:00008CA7
.text$mn:00008CA8 ; ===========================================================================
.text$mn:00008CA8
.text$mn:00008CA8 ; Segment type: Pure code
.text$mn:00008CA8 ; Segment permissions: Read/Execute
.text$mn:00008CA8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CA8                 assume cs:_text$mn
.text$mn:00008CA8                 ;org 8CA8h
.text$mn:00008CA8 ; COMDAT (pick any)
.text$mn:00008CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CA8
.text$mn:00008CA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CA8
.text$mn:00008CA8 ; Attributes: bp-based frame
.text$mn:00008CA8
.text$mn:00008CA8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00008CA8                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:00008CA8 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:00008CA8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:00008CA8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:00008CA8
.text$mn:00008CA8 var_4           = dword ptr -4
.text$mn:00008CA8
.text$mn:00008CA8                 push    ebp
.text$mn:00008CA9                 mov     ebp, esp
.text$mn:00008CAB                 push    ecx
.text$mn:00008CAC                 mov     [ebp+var_4], ecx
.text$mn:00008CAF                 mov     esp, ebp
.text$mn:00008CB1                 pop     ebp
.text$mn:00008CB2                 retn    4
.text$mn:00008CB2 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:00008CB2
.text$mn:00008CB2 ; ---------------------------------------------------------------------------
.text$mn:00008CB5                 align 4
.text$mn:00008CB5 _text$mn        ends
.text$mn:00008CB5
.text$mn:00008CB8 ; ===========================================================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Segment type: Pure code
.text$mn:00008CB8 ; Segment permissions: Read/Execute
.text$mn:00008CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CB8                 assume cs:_text$mn
.text$mn:00008CB8                 ;org 8CB8h
.text$mn:00008CB8 ; COMDAT (pick any)
.text$mn:00008CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CB8
.text$mn:00008CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Attributes: bp-based frame
.text$mn:00008CB8
.text$mn:00008CB8 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> const &)
.text$mn:00008CB8                 public ?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@Z
.text$mn:00008CB8 ?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@Z proc near
.text$mn:00008CB8                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+80p
.text$mn:00008CB8
.text$mn:00008CB8 var_4           = dword ptr -4
.text$mn:00008CB8
.text$mn:00008CB8                 push    ebp
.text$mn:00008CB9                 mov     ebp, esp
.text$mn:00008CBB                 push    ecx
.text$mn:00008CBC                 mov     [ebp+var_4], ecx
.text$mn:00008CBF                 mov     esp, ebp
.text$mn:00008CC1                 pop     ebp
.text$mn:00008CC2                 retn    4
.text$mn:00008CC2 ?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@Z endp
.text$mn:00008CC2
.text$mn:00008CC2 ; ---------------------------------------------------------------------------
.text$mn:00008CC5                 align 4
.text$mn:00008CC5 _text$mn        ends
.text$mn:00008CC5
.text$mn:00008CC8 ; ===========================================================================
.text$mn:00008CC8
.text$mn:00008CC8 ; Segment type: Pure code
.text$mn:00008CC8 ; Segment permissions: Read/Execute
.text$mn:00008CC8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CC8                 assume cs:_text$mn
.text$mn:00008CC8                 ;org 8CC8h
.text$mn:00008CC8 ; COMDAT (pick any)
.text$mn:00008CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CC8
.text$mn:00008CC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CC8
.text$mn:00008CC8 ; Attributes: bp-based frame
.text$mn:00008CC8
.text$mn:00008CC8 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:00008CC8                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:00008CC8 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00008CC8                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+80p
.text$mn:00008CC8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+80p
.text$mn:00008CC8
.text$mn:00008CC8 var_4           = dword ptr -4
.text$mn:00008CC8
.text$mn:00008CC8                 push    ebp
.text$mn:00008CC9                 mov     ebp, esp
.text$mn:00008CCB                 push    ecx
.text$mn:00008CCC                 mov     [ebp+var_4], ecx
.text$mn:00008CCF                 mov     eax, [ebp+var_4]
.text$mn:00008CD2                 mov     dword ptr [eax], 0
.text$mn:00008CD8                 mov     esp, ebp
.text$mn:00008CDA                 pop     ebp
.text$mn:00008CDB                 retn
.text$mn:00008CDB ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00008CDB
.text$mn:00008CDB _text$mn        ends
.text$mn:00008CDB
.text$mn:00008CDC ; ===========================================================================
.text$mn:00008CDC
.text$mn:00008CDC ; Segment type: Pure code
.text$mn:00008CDC ; Segment permissions: Read/Execute
.text$mn:00008CDC _text$mn        segment para public 'CODE' use32
.text$mn:00008CDC                 assume cs:_text$mn
.text$mn:00008CDC                 ;org 8CDCh
.text$mn:00008CDC ; COMDAT (pick any)
.text$mn:00008CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CDC
.text$mn:00008CDC ; =============== S U B R O U T I N E =======================================
.text$mn:00008CDC
.text$mn:00008CDC ; Attributes: bp-based frame
.text$mn:00008CDC
.text$mn:00008CDC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:00008CDC                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:00008CDC ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:00008CDC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:00008CDC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:00008CDC
.text$mn:00008CDC var_4           = dword ptr -4
.text$mn:00008CDC arg_0           = dword ptr  8
.text$mn:00008CDC
.text$mn:00008CDC                 push    ebp
.text$mn:00008CDD                 mov     ebp, esp
.text$mn:00008CDF                 push    ecx
.text$mn:00008CE0                 push    esi
.text$mn:00008CE1                 mov     [ebp+var_4], ecx
.text$mn:00008CE4                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008CE7                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008CEC                 test    eax, eax
.text$mn:00008CEE                 jz      short loc_8D06
.text$mn:00008CF0                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008CF3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008CF8                 mov     esi, eax
.text$mn:00008CFA                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008CFD                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008D02                 cmp     esi, eax
.text$mn:00008D04                 jz      short loc_8D6E
.text$mn:00008D06
.text$mn:00008D06 loc_8D06:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:00008D06                 push    0FAh ; '·'      ; unsigned int
.text$mn:00008D0B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008D10                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:00008D15                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00008D1A                 add     esp, 0Ch
.text$mn:00008D1D                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:00008D22                 test    eax, eax
.text$mn:00008D24                 jz      short loc_8D2A
.text$mn:00008D26                 xor     ecx, ecx
.text$mn:00008D28                 jnz     short loc_8D50
.text$mn:00008D2A
.text$mn:00008D2A loc_8D2A:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:00008D2A                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:00008D2F                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00008D34                 push    0
.text$mn:00008D36                 push    0FBh ; 'v'
.text$mn:00008D3B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008D40                 push    2
.text$mn:00008D42                 call    __CrtDbgReportW
.text$mn:00008D47                 add     esp, 18h
.text$mn:00008D4A                 cmp     eax, 1
.text$mn:00008D4D                 jnz     short loc_8D50
.text$mn:00008D4F                 int     3               ; Trap to Debugger
.text$mn:00008D50
.text$mn:00008D50 loc_8D50:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:00008D50                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:00008D50                 push    0
.text$mn:00008D52                 push    0FBh ; 'v'
.text$mn:00008D57                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008D5C                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00008D61                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:00008D66                 call    __invalid_parameter
.text$mn:00008D6B                 add     esp, 14h
.text$mn:00008D6E
.text$mn:00008D6E loc_8D6E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:00008D6E                 pop     esi
.text$mn:00008D6F                 mov     esp, ebp
.text$mn:00008D71                 pop     ebp
.text$mn:00008D72                 retn    4
.text$mn:00008D72 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:00008D72
.text$mn:00008D72 ; ---------------------------------------------------------------------------
.text$mn:00008D75                 align 4
.text$mn:00008D75 _text$mn        ends
.text$mn:00008D75
.text$mn:00008D78 ; ===========================================================================
.text$mn:00008D78
.text$mn:00008D78 ; Segment type: Pure code
.text$mn:00008D78 ; Segment permissions: Read/Execute
.text$mn:00008D78 _text$mn        segment para public 'CODE' use32
.text$mn:00008D78                 assume cs:_text$mn
.text$mn:00008D78                 ;org 8D78h
.text$mn:00008D78 ; COMDAT (pick any)
.text$mn:00008D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D78
.text$mn:00008D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D78
.text$mn:00008D78 ; Attributes: bp-based frame
.text$mn:00008D78
.text$mn:00008D78 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00008D78                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008D78 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00008D78                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00008D78
.text$mn:00008D78 var_20          = dword ptr -20h
.text$mn:00008D78 var_1C          = dword ptr -1Ch
.text$mn:00008D78 var_18          = dword ptr -18h
.text$mn:00008D78 var_11          = byte ptr -11h
.text$mn:00008D78 var_10          = dword ptr -10h
.text$mn:00008D78 var_C           = byte ptr -0Ch
.text$mn:00008D78 var_4           = dword ptr -4
.text$mn:00008D78 arg_0           = dword ptr  8
.text$mn:00008D78
.text$mn:00008D78 ; FUNCTION CHUNK AT .text$mn:00008E9A SIZE 00000009 BYTES
.text$mn:00008D78
.text$mn:00008D78                 push    ebp
.text$mn:00008D79                 mov     ebp, esp
.text$mn:00008D7B                 push    0FFFFFFFFh
.text$mn:00008D7D                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008D82                 mov     eax, large fs:0
.text$mn:00008D88                 push    eax
.text$mn:00008D89                 push    ecx
.text$mn:00008D8A                 sub     esp, 10h
.text$mn:00008D8D                 push    ebx
.text$mn:00008D8E                 push    esi
.text$mn:00008D8F                 push    edi
.text$mn:00008D90                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008D95                 xor     eax, ebp
.text$mn:00008D97                 push    eax
.text$mn:00008D98                 lea     eax, [ebp+var_C]
.text$mn:00008D9B                 mov     large fs:0, eax
.text$mn:00008DA1                 mov     [ebp+var_10], esp
.text$mn:00008DA4                 mov     [ebp+var_18], ecx
.text$mn:00008DA7                 mov     eax, [ebp+arg_0]
.text$mn:00008DAA                 or      eax, 0Fh
.text$mn:00008DAD                 mov     [ebp+var_1C], eax
.text$mn:00008DB0                 mov     ecx, [ebp+var_18]
.text$mn:00008DB3                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008DB8                 cmp     eax, [ebp+var_1C]
.text$mn:00008DBB                 jnb     short loc_8DC5
.text$mn:00008DBD                 mov     ecx, [ebp+arg_0]
.text$mn:00008DC0                 mov     [ebp+var_1C], ecx
.text$mn:00008DC3                 jmp     short loc_8E17
.text$mn:00008DC5 ; ---------------------------------------------------------------------------
.text$mn:00008DC5
.text$mn:00008DC5 loc_8DC5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00008DC5                 mov     edx, [ebp+var_18]
.text$mn:00008DC8                 mov     ecx, [edx+18h]
.text$mn:00008DCB                 shr     ecx, 1
.text$mn:00008DCD                 mov     eax, [ebp+var_1C]
.text$mn:00008DD0                 xor     edx, edx
.text$mn:00008DD2                 mov     esi, 3
.text$mn:00008DD7                 div     esi
.text$mn:00008DD9                 cmp     ecx, eax
.text$mn:00008DDB                 ja      short loc_8DDF
.text$mn:00008DDD                 jmp     short loc_8E17
.text$mn:00008DDF ; ---------------------------------------------------------------------------
.text$mn:00008DDF
.text$mn:00008DDF loc_8DDF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00008DDF                 mov     ecx, [ebp+var_18]
.text$mn:00008DE2                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008DE7                 mov     edx, [ebp+var_18]
.text$mn:00008DEA                 mov     ecx, [edx+18h]
.text$mn:00008DED                 shr     ecx, 1
.text$mn:00008DEF                 sub     eax, ecx
.text$mn:00008DF1                 mov     edx, [ebp+var_18]
.text$mn:00008DF4                 cmp     [edx+18h], eax
.text$mn:00008DF7                 ja      short loc_8E0C
.text$mn:00008DF9                 mov     eax, [ebp+var_18]
.text$mn:00008DFC                 mov     ecx, [eax+18h]
.text$mn:00008DFF                 shr     ecx, 1
.text$mn:00008E01                 mov     edx, [ebp+var_18]
.text$mn:00008E04                 add     ecx, [edx+18h]
.text$mn:00008E07                 mov     [ebp+var_1C], ecx
.text$mn:00008E0A                 jmp     short loc_8E17
.text$mn:00008E0C ; ---------------------------------------------------------------------------
.text$mn:00008E0C
.text$mn:00008E0C loc_8E0C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00008E0C                 mov     ecx, [ebp+var_18]
.text$mn:00008E0F                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008E14                 mov     [ebp+var_1C], eax
.text$mn:00008E17
.text$mn:00008E17 loc_8E17:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00008E17                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00008E17                 mov     [ebp+var_4], 0
.text$mn:00008E1E                 mov     eax, [ebp+var_1C]
.text$mn:00008E21                 add     eax, 1
.text$mn:00008E24                 push    eax
.text$mn:00008E25                 lea     ecx, [ebp+var_11]
.text$mn:00008E28                 push    ecx
.text$mn:00008E29                 mov     ecx, [ebp+var_18]
.text$mn:00008E2C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008E31                 mov     ecx, eax
.text$mn:00008E33                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00008E38                 mov     [ebp+var_20], eax
.text$mn:00008E3B                 jmp     short loc_8E9A
.text$mn:00008E3B ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00008E3B
.text$mn:00008E3D
.text$mn:00008E3D ; =============== S U B R O U T I N E =======================================
.text$mn:00008E3D
.text$mn:00008E3D
.text$mn:00008E3D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00008E3D                                         ; DATA XREF: .xdata$x:0000CCACo
.text$mn:00008E3D
.text$mn:00008E3D ; FUNCTION CHUNK AT .text$mn:00008E84 SIZE 00000009 BYTES
.text$mn:00008E3D ; FUNCTION CHUNK AT .text$mn:00008E94 SIZE 00000006 BYTES
.text$mn:00008E3D
.text$mn:00008E3D                 mov     [ebp-10h], esp
.text$mn:00008E40                 mov     edx, [ebp+8]
.text$mn:00008E43                 mov     [ebp-1Ch], edx
.text$mn:00008E46                 mov     byte ptr [ebp-4], 2
.text$mn:00008E4A                 mov     eax, [ebp-1Ch]
.text$mn:00008E4D                 add     eax, 1
.text$mn:00008E50                 push    eax
.text$mn:00008E51                 lea     ecx, [ebp-12h]
.text$mn:00008E54                 push    ecx
.text$mn:00008E55                 mov     ecx, [ebp-18h]
.text$mn:00008E58                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008E5D                 mov     ecx, eax
.text$mn:00008E5F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00008E64                 mov     [ebp-20h], eax
.text$mn:00008E67                 jmp     short loc_8E84
.text$mn:00008E67 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00008E67
.text$mn:00008E69
.text$mn:00008E69 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E69
.text$mn:00008E69 ; Attributes: noreturn
.text$mn:00008E69
.text$mn:00008E69 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00008E69                                         ; DATA XREF: .xdata$x:0000CCBCo
.text$mn:00008E69                 push    0               ; Size
.text$mn:00008E6B                 push    1               ; char
.text$mn:00008E6D                 mov     ecx, [ebp-18h]
.text$mn:00008E70                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008E75                 push    0
.text$mn:00008E77                 push    0
.text$mn:00008E79                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00008E79 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00008E79
.text$mn:00008E7E ; ---------------------------------------------------------------------------
.text$mn:00008E7E                 mov     eax, offset $LN17
.text$mn:00008E83                 retn
.text$mn:00008E84 ; ---------------------------------------------------------------------------
.text$mn:00008E84 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008E84
.text$mn:00008E84 loc_8E84:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00008E84                 mov     dword ptr [ebp-4], 1
.text$mn:00008E8B                 jmp     short loc_8E94
.text$mn:00008E8B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008E8D
.text$mn:00008E8D ; =============== S U B R O U T I N E =======================================
.text$mn:00008E8D
.text$mn:00008E8D
.text$mn:00008E8D $LN17           proc near               ; DATA XREF: .text$mn:00008E7Eo
.text$mn:00008E8D                 mov     dword ptr [ebp-4], 1
.text$mn:00008E8D $LN17           endp ; sp-analysis failed
.text$mn:00008E8D
.text$mn:00008E94 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008E94
.text$mn:00008E94 loc_8E94:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00008E94                 mov     eax, offset $LN19
.text$mn:00008E99                 retn
.text$mn:00008E99 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008E9A ; ---------------------------------------------------------------------------
.text$mn:00008E9A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008E9A
.text$mn:00008E9A loc_8E9A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00008E9A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008EA1                 jmp     short loc_8EAA
.text$mn:00008EA1 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008EA3
.text$mn:00008EA3 ; =============== S U B R O U T I N E =======================================
.text$mn:00008EA3
.text$mn:00008EA3
.text$mn:00008EA3 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_8E94o
.text$mn:00008EA3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00008EAA
.text$mn:00008EAA loc_8EAA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00008EAA                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00008EAE                 jbe     short loc_8EC9
.text$mn:00008EB0                 mov     edx, [ebp+0Ch]
.text$mn:00008EB3                 push    edx             ; Size
.text$mn:00008EB4                 mov     ecx, [ebp-18h]
.text$mn:00008EB7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008EBC                 push    eax             ; Src
.text$mn:00008EBD                 mov     eax, [ebp-20h]
.text$mn:00008EC0                 push    eax             ; Dst
.text$mn:00008EC1                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008EC6                 add     esp, 0Ch
.text$mn:00008EC9
.text$mn:00008EC9 loc_8EC9:                               ; CODE XREF: $LN19+Bj
.text$mn:00008EC9                 push    0               ; Size
.text$mn:00008ECB                 push    1               ; char
.text$mn:00008ECD                 mov     ecx, [ebp-18h]
.text$mn:00008ED0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008ED5                 lea     ecx, [ebp-20h]
.text$mn:00008ED8                 push    ecx             ; int
.text$mn:00008ED9                 mov     edx, [ebp-18h]
.text$mn:00008EDC                 add     edx, 4
.text$mn:00008EDF                 push    edx             ; void *
.text$mn:00008EE0                 lea     eax, [ebp-13h]
.text$mn:00008EE3                 push    eax
.text$mn:00008EE4                 mov     ecx, [ebp-18h]
.text$mn:00008EE7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008EEC                 mov     ecx, eax
.text$mn:00008EEE                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00008EF3                 mov     ecx, [ebp-18h]
.text$mn:00008EF6                 mov     edx, [ebp-1Ch]
.text$mn:00008EF9                 mov     [ecx+18h], edx
.text$mn:00008EFC                 mov     eax, [ebp+0Ch]
.text$mn:00008EFF                 push    eax
.text$mn:00008F00                 mov     ecx, [ebp-18h]
.text$mn:00008F03                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008F08                 mov     ecx, [ebp-0Ch]
.text$mn:00008F0B                 mov     large fs:0, ecx
.text$mn:00008F12                 pop     ecx
.text$mn:00008F13                 pop     edi
.text$mn:00008F14                 pop     esi
.text$mn:00008F15                 pop     ebx
.text$mn:00008F16                 mov     esp, ebp
.text$mn:00008F18                 pop     ebp
.text$mn:00008F19                 retn    8
.text$mn:00008F19 $LN19           endp ; sp-analysis failed
.text$mn:00008F19
.text$mn:00008F19 _text$mn        ends
.text$mn:00008F19
.text$x:00008F1C ; ===========================================================================
.text$x:00008F1C
.text$x:00008F1C ; Segment type: Pure code
.text$x:00008F1C ; Segment permissions: Read/Execute
.text$x:00008F1C _text$x         segment para public 'CODE' use32
.text$x:00008F1C                 assume cs:_text$x
.text$x:00008F1C                 ;org 8F1Ch
.text$x:00008F1C ; COMDAT (pick associative to section at 8D78)
.text$x:00008F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008F1C
.text$x:00008F1C ; =============== S U B R O U T I N E =======================================
.text$x:00008F1C
.text$x:00008F1C
.text$x:00008F1C __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00008F1C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00008F1C
.text$x:00008F1C arg_4           = dword ptr  8
.text$x:00008F1C
.text$x:00008F1C                 mov     edx, [esp+arg_4]
.text$x:00008F20                 lea     eax, [edx+0Ch]
.text$x:00008F23                 mov     ecx, [edx-24h]
.text$x:00008F26                 xor     ecx, eax
.text$x:00008F28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008F2D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00008F32                 jmp     ___CxxFrameHandler3
.text$x:00008F32 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00008F32
.text$x:00008F32 ; ---------------------------------------------------------------------------
.text$x:00008F37                 align 4
.text$x:00008F37 _text$x         ends
.text$x:00008F37
.text$mn:00008F38 ; ===========================================================================
.text$mn:00008F38
.text$mn:00008F38 ; Segment type: Pure code
.text$mn:00008F38 ; Segment permissions: Read/Execute
.text$mn:00008F38 _text$mn        segment para public 'CODE' use32
.text$mn:00008F38                 assume cs:_text$mn
.text$mn:00008F38                 ;org 8F38h
.text$mn:00008F38 ; COMDAT (pick any)
.text$mn:00008F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F38
.text$mn:00008F38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F38
.text$mn:00008F38 ; Attributes: bp-based frame
.text$mn:00008F38
.text$mn:00008F38 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00008F38                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00008F38 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00008F38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00008F38
.text$mn:00008F38 var_20          = dword ptr -20h
.text$mn:00008F38 var_1C          = dword ptr -1Ch
.text$mn:00008F38 var_18          = dword ptr -18h
.text$mn:00008F38 var_11          = byte ptr -11h
.text$mn:00008F38 var_10          = dword ptr -10h
.text$mn:00008F38 var_C           = byte ptr -0Ch
.text$mn:00008F38 var_4           = dword ptr -4
.text$mn:00008F38 arg_0           = dword ptr  8
.text$mn:00008F38
.text$mn:00008F38 ; FUNCTION CHUNK AT .text$mn:0000905A SIZE 00000009 BYTES
.text$mn:00008F38
.text$mn:00008F38                 push    ebp
.text$mn:00008F39                 mov     ebp, esp
.text$mn:00008F3B                 push    0FFFFFFFFh
.text$mn:00008F3D                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00008F42                 mov     eax, large fs:0
.text$mn:00008F48                 push    eax
.text$mn:00008F49                 push    ecx
.text$mn:00008F4A                 sub     esp, 10h
.text$mn:00008F4D                 push    ebx
.text$mn:00008F4E                 push    esi
.text$mn:00008F4F                 push    edi
.text$mn:00008F50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F55                 xor     eax, ebp
.text$mn:00008F57                 push    eax
.text$mn:00008F58                 lea     eax, [ebp+var_C]
.text$mn:00008F5B                 mov     large fs:0, eax
.text$mn:00008F61                 mov     [ebp+var_10], esp
.text$mn:00008F64                 mov     [ebp+var_18], ecx
.text$mn:00008F67                 mov     eax, [ebp+arg_0]
.text$mn:00008F6A                 or      eax, 7
.text$mn:00008F6D                 mov     [ebp+var_1C], eax
.text$mn:00008F70                 mov     ecx, [ebp+var_18]
.text$mn:00008F73                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008F78                 cmp     eax, [ebp+var_1C]
.text$mn:00008F7B                 jnb     short loc_8F85
.text$mn:00008F7D                 mov     ecx, [ebp+arg_0]
.text$mn:00008F80                 mov     [ebp+var_1C], ecx
.text$mn:00008F83                 jmp     short loc_8FD7
.text$mn:00008F85 ; ---------------------------------------------------------------------------
.text$mn:00008F85
.text$mn:00008F85 loc_8F85:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00008F85                 mov     edx, [ebp+var_18]
.text$mn:00008F88                 mov     ecx, [edx+18h]
.text$mn:00008F8B                 shr     ecx, 1
.text$mn:00008F8D                 mov     eax, [ebp+var_1C]
.text$mn:00008F90                 xor     edx, edx
.text$mn:00008F92                 mov     esi, 3
.text$mn:00008F97                 div     esi
.text$mn:00008F99                 cmp     ecx, eax
.text$mn:00008F9B                 ja      short loc_8F9F
.text$mn:00008F9D                 jmp     short loc_8FD7
.text$mn:00008F9F ; ---------------------------------------------------------------------------
.text$mn:00008F9F
.text$mn:00008F9F loc_8F9F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00008F9F                 mov     ecx, [ebp+var_18]
.text$mn:00008FA2                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008FA7                 mov     edx, [ebp+var_18]
.text$mn:00008FAA                 mov     ecx, [edx+18h]
.text$mn:00008FAD                 shr     ecx, 1
.text$mn:00008FAF                 sub     eax, ecx
.text$mn:00008FB1                 mov     edx, [ebp+var_18]
.text$mn:00008FB4                 cmp     [edx+18h], eax
.text$mn:00008FB7                 ja      short loc_8FCC
.text$mn:00008FB9                 mov     eax, [ebp+var_18]
.text$mn:00008FBC                 mov     ecx, [eax+18h]
.text$mn:00008FBF                 shr     ecx, 1
.text$mn:00008FC1                 mov     edx, [ebp+var_18]
.text$mn:00008FC4                 add     ecx, [edx+18h]
.text$mn:00008FC7                 mov     [ebp+var_1C], ecx
.text$mn:00008FCA                 jmp     short loc_8FD7
.text$mn:00008FCC ; ---------------------------------------------------------------------------
.text$mn:00008FCC
.text$mn:00008FCC loc_8FCC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00008FCC                 mov     ecx, [ebp+var_18]
.text$mn:00008FCF                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008FD4                 mov     [ebp+var_1C], eax
.text$mn:00008FD7
.text$mn:00008FD7 loc_8FD7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:00008FD7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:00008FD7                 mov     [ebp+var_4], 0
.text$mn:00008FDE                 mov     eax, [ebp+var_1C]
.text$mn:00008FE1                 add     eax, 1
.text$mn:00008FE4                 push    eax
.text$mn:00008FE5                 lea     ecx, [ebp+var_11]
.text$mn:00008FE8                 push    ecx
.text$mn:00008FE9                 mov     ecx, [ebp+var_18]
.text$mn:00008FEC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008FF1                 mov     ecx, eax
.text$mn:00008FF3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00008FF8                 mov     [ebp+var_20], eax
.text$mn:00008FFB                 jmp     short loc_905A
.text$mn:00008FFB ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00008FFB
.text$mn:00008FFD
.text$mn:00008FFD ; =============== S U B R O U T I N E =======================================
.text$mn:00008FFD
.text$mn:00008FFD
.text$mn:00008FFD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00008FFD                                         ; DATA XREF: .xdata$x:0000D144o
.text$mn:00008FFD
.text$mn:00008FFD ; FUNCTION CHUNK AT .text$mn:00009044 SIZE 00000009 BYTES
.text$mn:00008FFD ; FUNCTION CHUNK AT .text$mn:00009054 SIZE 00000006 BYTES
.text$mn:00008FFD
.text$mn:00008FFD                 mov     [ebp-10h], esp
.text$mn:00009000                 mov     edx, [ebp+8]
.text$mn:00009003                 mov     [ebp-1Ch], edx
.text$mn:00009006                 mov     byte ptr [ebp-4], 2
.text$mn:0000900A                 mov     eax, [ebp-1Ch]
.text$mn:0000900D                 add     eax, 1
.text$mn:00009010                 push    eax
.text$mn:00009011                 lea     ecx, [ebp-12h]
.text$mn:00009014                 push    ecx
.text$mn:00009015                 mov     ecx, [ebp-18h]
.text$mn:00009018                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000901D                 mov     ecx, eax
.text$mn:0000901F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00009024                 mov     [ebp-20h], eax
.text$mn:00009027                 jmp     short loc_9044
.text$mn:00009027 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00009027
.text$mn:00009029
.text$mn:00009029 ; =============== S U B R O U T I N E =======================================
.text$mn:00009029
.text$mn:00009029 ; Attributes: noreturn
.text$mn:00009029
.text$mn:00009029 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00009029                                         ; DATA XREF: .xdata$x:0000D154o
.text$mn:00009029                 push    0
.text$mn:0000902B                 push    1
.text$mn:0000902D                 mov     ecx, [ebp-18h]
.text$mn:00009030                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009035                 push    0
.text$mn:00009037                 push    0
.text$mn:00009039                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00009039 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00009039
.text$mn:0000903E ; ---------------------------------------------------------------------------
.text$mn:0000903E                 mov     eax, offset $LN17_0
.text$mn:00009043                 retn
.text$mn:00009044 ; ---------------------------------------------------------------------------
.text$mn:00009044 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00009044
.text$mn:00009044 loc_9044:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00009044                 mov     dword ptr [ebp-4], 1
.text$mn:0000904B                 jmp     short loc_9054
.text$mn:0000904B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000904D
.text$mn:0000904D ; =============== S U B R O U T I N E =======================================
.text$mn:0000904D
.text$mn:0000904D
.text$mn:0000904D $LN17_0         proc near               ; DATA XREF: .text$mn:0000903Eo
.text$mn:0000904D                 mov     dword ptr [ebp-4], 1
.text$mn:0000904D $LN17_0         endp ; sp-analysis failed
.text$mn:0000904D
.text$mn:00009054 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00009054
.text$mn:00009054 loc_9054:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00009054                 mov     eax, offset $LN19_0
.text$mn:00009059                 retn
.text$mn:00009059 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000905A ; ---------------------------------------------------------------------------
.text$mn:0000905A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000905A
.text$mn:0000905A loc_905A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:0000905A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009061                 jmp     short loc_906A
.text$mn:00009061 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00009063
.text$mn:00009063 ; =============== S U B R O U T I N E =======================================
.text$mn:00009063
.text$mn:00009063
.text$mn:00009063 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_9054o
.text$mn:00009063                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000906A
.text$mn:0000906A loc_906A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:0000906A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000906E                 jbe     short loc_9089
.text$mn:00009070                 mov     edx, [ebp+0Ch]
.text$mn:00009073                 push    edx             ; int
.text$mn:00009074                 mov     ecx, [ebp-18h]
.text$mn:00009077                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000907C                 push    eax             ; Src
.text$mn:0000907D                 mov     eax, [ebp-20h]
.text$mn:00009080                 push    eax             ; Dst
.text$mn:00009081                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009086                 add     esp, 0Ch
.text$mn:00009089
.text$mn:00009089 loc_9089:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00009089                 push    0
.text$mn:0000908B                 push    1
.text$mn:0000908D                 mov     ecx, [ebp-18h]
.text$mn:00009090                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009095                 lea     ecx, [ebp-20h]
.text$mn:00009098                 push    ecx             ; int
.text$mn:00009099                 mov     edx, [ebp-18h]
.text$mn:0000909C                 add     edx, 4
.text$mn:0000909F                 push    edx             ; void *
.text$mn:000090A0                 lea     eax, [ebp-13h]
.text$mn:000090A3                 push    eax
.text$mn:000090A4                 mov     ecx, [ebp-18h]
.text$mn:000090A7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000090AC                 mov     ecx, eax
.text$mn:000090AE                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000090B3                 mov     ecx, [ebp-18h]
.text$mn:000090B6                 mov     edx, [ebp-1Ch]
.text$mn:000090B9                 mov     [ecx+18h], edx
.text$mn:000090BC                 mov     eax, [ebp+0Ch]
.text$mn:000090BF                 push    eax
.text$mn:000090C0                 mov     ecx, [ebp-18h]
.text$mn:000090C3                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000090C8                 mov     ecx, [ebp-0Ch]
.text$mn:000090CB                 mov     large fs:0, ecx
.text$mn:000090D2                 pop     ecx
.text$mn:000090D3                 pop     edi
.text$mn:000090D4                 pop     esi
.text$mn:000090D5                 pop     ebx
.text$mn:000090D6                 mov     esp, ebp
.text$mn:000090D8                 pop     ebp
.text$mn:000090D9                 retn    8
.text$mn:000090D9 $LN19_0         endp ; sp-analysis failed
.text$mn:000090D9
.text$mn:000090D9 _text$mn        ends
.text$mn:000090D9
.text$x:000090DC ; ===========================================================================
.text$x:000090DC
.text$x:000090DC ; Segment type: Pure code
.text$x:000090DC ; Segment permissions: Read/Execute
.text$x:000090DC _text$x         segment para public 'CODE' use32
.text$x:000090DC                 assume cs:_text$x
.text$x:000090DC                 ;org 90DCh
.text$x:000090DC ; COMDAT (pick associative to section at 8F38)
.text$x:000090DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090DC
.text$x:000090DC ; =============== S U B R O U T I N E =======================================
.text$x:000090DC
.text$x:000090DC
.text$x:000090DC __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:000090DC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:000090DC
.text$x:000090DC arg_4           = dword ptr  8
.text$x:000090DC
.text$x:000090DC                 mov     edx, [esp+arg_4]
.text$x:000090E0                 lea     eax, [edx+0Ch]
.text$x:000090E3                 mov     ecx, [edx-24h]
.text$x:000090E6                 xor     ecx, eax
.text$x:000090E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000090ED                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:000090F2                 jmp     ___CxxFrameHandler3
.text$x:000090F2 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:000090F2
.text$x:000090F2 ; ---------------------------------------------------------------------------
.text$x:000090F7                 align 4
.text$x:000090F7 _text$x         ends
.text$x:000090F7
.text$mn:000090F8 ; ===========================================================================
.text$mn:000090F8
.text$mn:000090F8 ; Segment type: Pure code
.text$mn:000090F8 ; Segment permissions: Read/Execute
.text$mn:000090F8 _text$mn        segment para public 'CODE' use32
.text$mn:000090F8                 assume cs:_text$mn
.text$mn:000090F8                 ;org 90F8h
.text$mn:000090F8 ; COMDAT (pick any)
.text$mn:000090F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090F8
.text$mn:000090F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090F8
.text$mn:000090F8 ; Attributes: bp-based frame
.text$mn:000090F8
.text$mn:000090F8 ; protected: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Destroy(struct TreeParams *, struct TreeParams *)
.text$mn:000090F8                 public ?_Destroy@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXPAUTreeParams@@0@Z
.text$mn:000090F8 ?_Destroy@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXPAUTreeParams@@0@Z proc near
.text$mn:000090F8                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+CBp
.text$mn:000090F8
.text$mn:000090F8 var_8           = dword ptr -8
.text$mn:000090F8 var_1           = byte ptr -1
.text$mn:000090F8 arg_0           = dword ptr  8
.text$mn:000090F8 arg_4           = dword ptr  0Ch
.text$mn:000090F8
.text$mn:000090F8                 push    ebp
.text$mn:000090F9                 mov     ebp, esp
.text$mn:000090FB                 sub     esp, 8
.text$mn:000090FE                 mov     [ebp+var_8], ecx
.text$mn:00009101                 lea     eax, [ebp+var_1]
.text$mn:00009104                 push    eax
.text$mn:00009105                 mov     ecx, [ebp+var_8]
.text$mn:00009108                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:0000910D                 lea     ecx, [ebp+var_1]
.text$mn:00009110                 push    ecx
.text$mn:00009111                 mov     edx, [ebp+arg_4]
.text$mn:00009114                 push    edx
.text$mn:00009115                 mov     eax, [ebp+arg_0]
.text$mn:00009118                 push    eax
.text$mn:00009119                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@@std@@YAXPAUTreeParams@@0AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeParams>>>(TreeParams *,TreeParams *,std::_Wrap_alloc<std::allocator<TreeParams>> &)
.text$mn:0000911E                 add     esp, 0Ch
.text$mn:00009121                 mov     esp, ebp
.text$mn:00009123                 pop     ebp
.text$mn:00009124                 retn    8
.text$mn:00009124 ?_Destroy@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXPAUTreeParams@@0@Z endp
.text$mn:00009124
.text$mn:00009124 ; ---------------------------------------------------------------------------
.text$mn:00009127                 align 4
.text$mn:00009127 _text$mn        ends
.text$mn:00009127
.text$mn:00009128 ; ===========================================================================
.text$mn:00009128
.text$mn:00009128 ; Segment type: Pure code
.text$mn:00009128 ; Segment permissions: Read/Execute
.text$mn:00009128 _text$mn        segment para public 'CODE' use32
.text$mn:00009128                 assume cs:_text$mn
.text$mn:00009128                 ;org 9128h
.text$mn:00009128 ; COMDAT (pick any)
.text$mn:00009128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009128
.text$mn:00009128 ; =============== S U B R O U T I N E =======================================
.text$mn:00009128
.text$mn:00009128 ; Attributes: bp-based frame
.text$mn:00009128
.text$mn:00009128 ; protected: void __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Destroy(struct TreeStateNode *, struct TreeStateNode *)
.text$mn:00009128                 public ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z
.text$mn:00009128 ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z proc near
.text$mn:00009128                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+EDp
.text$mn:00009128                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+191p ...
.text$mn:00009128
.text$mn:00009128 var_8           = dword ptr -8
.text$mn:00009128 var_1           = byte ptr -1
.text$mn:00009128 arg_0           = dword ptr  8
.text$mn:00009128 arg_4           = dword ptr  0Ch
.text$mn:00009128
.text$mn:00009128                 push    ebp
.text$mn:00009129                 mov     ebp, esp
.text$mn:0000912B                 sub     esp, 8
.text$mn:0000912E                 mov     [ebp+var_8], ecx
.text$mn:00009131                 lea     eax, [ebp+var_1]
.text$mn:00009134                 push    eax
.text$mn:00009135                 mov     ecx, [ebp+var_8]
.text$mn:00009138                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:0000913D                 lea     ecx, [ebp+var_1]
.text$mn:00009140                 push    ecx
.text$mn:00009141                 mov     edx, [ebp+arg_4]
.text$mn:00009144                 push    edx
.text$mn:00009145                 mov     eax, [ebp+arg_0]
.text$mn:00009148                 push    eax
.text$mn:00009149                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@YAXPAUTreeStateNode@@0AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TreeStateNode>>>(TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &)
.text$mn:0000914E                 add     esp, 0Ch
.text$mn:00009151                 mov     esp, ebp
.text$mn:00009153                 pop     ebp
.text$mn:00009154                 retn    8
.text$mn:00009154 ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z endp
.text$mn:00009154
.text$mn:00009154 ; ---------------------------------------------------------------------------
.text$mn:00009157                 align 4
.text$mn:00009157 _text$mn        ends
.text$mn:00009157
.text$mn:00009158 ; ===========================================================================
.text$mn:00009158
.text$mn:00009158 ; Segment type: Pure code
.text$mn:00009158 ; Segment permissions: Read/Execute
.text$mn:00009158 _text$mn        segment para public 'CODE' use32
.text$mn:00009158                 assume cs:_text$mn
.text$mn:00009158                 ;org 9158h
.text$mn:00009158 ; COMDAT (pick any)
.text$mn:00009158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009158
.text$mn:00009158 ; =============== S U B R O U T I N E =======================================
.text$mn:00009158
.text$mn:00009158 ; Attributes: bp-based frame
.text$mn:00009158
.text$mn:00009158 ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Destroy(struct foundInfo *, struct foundInfo *)
.text$mn:00009158                 public ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z
.text$mn:00009158 ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z proc near
.text$mn:00009158                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Tidy(void)+2Bp
.text$mn:00009158
.text$mn:00009158 var_8           = dword ptr -8
.text$mn:00009158 var_1           = byte ptr -1
.text$mn:00009158 arg_0           = dword ptr  8
.text$mn:00009158 arg_4           = dword ptr  0Ch
.text$mn:00009158
.text$mn:00009158                 push    ebp
.text$mn:00009159                 mov     ebp, esp
.text$mn:0000915B                 sub     esp, 8
.text$mn:0000915E                 mov     [ebp+var_8], ecx
.text$mn:00009161                 lea     eax, [ebp+var_1]
.text$mn:00009164                 push    eax
.text$mn:00009165                 mov     ecx, [ebp+var_8]
.text$mn:00009168                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000916D                 lea     ecx, [ebp+var_1]
.text$mn:00009170                 push    ecx
.text$mn:00009171                 mov     edx, [ebp+arg_4]
.text$mn:00009174                 push    edx
.text$mn:00009175                 mov     eax, [ebp+arg_0]
.text$mn:00009178                 push    eax
.text$mn:00009179                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)
.text$mn:0000917E                 add     esp, 0Ch
.text$mn:00009181                 mov     esp, ebp
.text$mn:00009183                 pop     ebp
.text$mn:00009184                 retn    8
.text$mn:00009184 ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z endp
.text$mn:00009184
.text$mn:00009184 ; ---------------------------------------------------------------------------
.text$mn:00009187                 align 4
.text$mn:00009187 _text$mn        ends
.text$mn:00009187
.text$mn:00009188 ; ===========================================================================
.text$mn:00009188
.text$mn:00009188 ; Segment type: Pure code
.text$mn:00009188 ; Segment permissions: Read/Execute
.text$mn:00009188 _text$mn        segment para public 'CODE' use32
.text$mn:00009188                 assume cs:_text$mn
.text$mn:00009188                 ;org 9188h
.text$mn:00009188 ; COMDAT (pick any)
.text$mn:00009188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009188
.text$mn:00009188 ; =============== S U B R O U T I N E =======================================
.text$mn:00009188
.text$mn:00009188 ; Attributes: bp-based frame
.text$mn:00009188
.text$mn:00009188 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00009188                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00009188 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00009188                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp
.text$mn:00009188                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+9Ep
.text$mn:00009188
.text$mn:00009188 var_8           = dword ptr -8
.text$mn:00009188 var_1           = byte ptr -1
.text$mn:00009188 arg_0           = dword ptr  8
.text$mn:00009188 arg_4           = dword ptr  0Ch
.text$mn:00009188
.text$mn:00009188                 push    ebp
.text$mn:00009189                 mov     ebp, esp
.text$mn:0000918B                 sub     esp, 8
.text$mn:0000918E                 mov     [ebp+var_8], ecx
.text$mn:00009191                 lea     eax, [ebp+var_1]
.text$mn:00009194                 push    eax
.text$mn:00009195                 mov     ecx, [ebp+var_8]
.text$mn:00009198                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000919D                 lea     ecx, [ebp+var_1]
.text$mn:000091A0                 push    ecx
.text$mn:000091A1                 mov     edx, [ebp+arg_4]
.text$mn:000091A4                 push    edx
.text$mn:000091A5                 mov     eax, [ebp+arg_0]
.text$mn:000091A8                 push    eax
.text$mn:000091A9                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:000091AE                 add     esp, 0Ch
.text$mn:000091B1                 mov     esp, ebp
.text$mn:000091B3                 pop     ebp
.text$mn:000091B4                 retn    8
.text$mn:000091B4 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:000091B4
.text$mn:000091B4 ; ---------------------------------------------------------------------------
.text$mn:000091B7                 align 4
.text$mn:000091B7 _text$mn        ends
.text$mn:000091B7
.text$mn:000091B8 ; ===========================================================================
.text$mn:000091B8
.text$mn:000091B8 ; Segment type: Pure code
.text$mn:000091B8 ; Segment permissions: Read/Execute
.text$mn:000091B8 _text$mn        segment para public 'CODE' use32
.text$mn:000091B8                 assume cs:_text$mn
.text$mn:000091B8                 ;org 91B8h
.text$mn:000091B8 ; COMDAT (pick any)
.text$mn:000091B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091B8
.text$mn:000091B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000091B8
.text$mn:000091B8 ; Attributes: bp-based frame
.text$mn:000091B8
.text$mn:000091B8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000091B8                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000091B8 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000091B8                                         ; CODE XREF: $LN19+60p
.text$mn:000091B8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000091B8
.text$mn:000091B8 var_8           = dword ptr -8
.text$mn:000091B8 var_1           = byte ptr -1
.text$mn:000091B8 arg_0           = dword ptr  8
.text$mn:000091B8
.text$mn:000091B8                 push    ebp
.text$mn:000091B9                 mov     ebp, esp
.text$mn:000091BB                 sub     esp, 8
.text$mn:000091BE                 mov     [ebp+var_8], ecx
.text$mn:000091C1                 mov     [ebp+var_1], 0
.text$mn:000091C5                 mov     eax, [ebp+var_8]
.text$mn:000091C8                 mov     ecx, [ebp+arg_0]
.text$mn:000091CB                 mov     [eax+14h], ecx
.text$mn:000091CE                 lea     edx, [ebp+var_1]
.text$mn:000091D1                 push    edx
.text$mn:000091D2                 mov     ecx, [ebp+var_8]
.text$mn:000091D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000091DA                 add     eax, [ebp+arg_0]
.text$mn:000091DD                 push    eax
.text$mn:000091DE                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000091E3                 add     esp, 8
.text$mn:000091E6                 mov     esp, ebp
.text$mn:000091E8                 pop     ebp
.text$mn:000091E9                 retn    4
.text$mn:000091E9 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000091E9
.text$mn:000091E9 _text$mn        ends
.text$mn:000091E9
.text$mn:000091EC ; ===========================================================================
.text$mn:000091EC
.text$mn:000091EC ; Segment type: Pure code
.text$mn:000091EC ; Segment permissions: Read/Execute
.text$mn:000091EC _text$mn        segment para public 'CODE' use32
.text$mn:000091EC                 assume cs:_text$mn
.text$mn:000091EC                 ;org 91ECh
.text$mn:000091EC ; COMDAT (pick any)
.text$mn:000091EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091EC
.text$mn:000091EC ; =============== S U B R O U T I N E =======================================
.text$mn:000091EC
.text$mn:000091EC ; Attributes: bp-based frame
.text$mn:000091EC
.text$mn:000091EC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000091EC                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000091EC ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000091EC                                         ; CODE XREF: $LN19_0+60p
.text$mn:000091EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000091EC
.text$mn:000091EC var_8           = dword ptr -8
.text$mn:000091EC var_2           = word ptr -2
.text$mn:000091EC arg_0           = dword ptr  8
.text$mn:000091EC
.text$mn:000091EC                 push    ebp
.text$mn:000091ED                 mov     ebp, esp
.text$mn:000091EF                 sub     esp, 8
.text$mn:000091F2                 mov     [ebp+var_8], ecx
.text$mn:000091F5                 xor     eax, eax
.text$mn:000091F7                 mov     [ebp+var_2], ax
.text$mn:000091FB                 mov     ecx, [ebp+var_8]
.text$mn:000091FE                 mov     edx, [ebp+arg_0]
.text$mn:00009201                 mov     [ecx+14h], edx
.text$mn:00009204                 lea     eax, [ebp+var_2]
.text$mn:00009207                 push    eax
.text$mn:00009208                 mov     ecx, [ebp+var_8]
.text$mn:0000920B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009210                 mov     ecx, [ebp+arg_0]
.text$mn:00009213                 lea     edx, [eax+ecx*2]
.text$mn:00009216                 push    edx
.text$mn:00009217                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000921C                 add     esp, 8
.text$mn:0000921F                 mov     esp, ebp
.text$mn:00009221                 pop     ebp
.text$mn:00009222                 retn    4
.text$mn:00009222 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00009222
.text$mn:00009222 ; ---------------------------------------------------------------------------
.text$mn:00009225                 align 4
.text$mn:00009225 _text$mn        ends
.text$mn:00009225
.text$mn:00009228 ; ===========================================================================
.text$mn:00009228
.text$mn:00009228 ; Segment type: Pure code
.text$mn:00009228 ; Segment permissions: Read/Execute
.text$mn:00009228 _text$mn        segment para public 'CODE' use32
.text$mn:00009228                 assume cs:_text$mn
.text$mn:00009228                 ;org 9228h
.text$mn:00009228 ; COMDAT (pick any)
.text$mn:00009228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009228
.text$mn:00009228 ; =============== S U B R O U T I N E =======================================
.text$mn:00009228
.text$mn:00009228 ; Attributes: bp-based frame
.text$mn:00009228
.text$mn:00009228 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00009228                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00009228 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00009228                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00009228
.text$mn:00009228 var_8           = dword ptr -8
.text$mn:00009228 var_1           = byte ptr -1
.text$mn:00009228
.text$mn:00009228                 push    ebp
.text$mn:00009229                 mov     ebp, esp
.text$mn:0000922B                 sub     esp, 8
.text$mn:0000922E                 mov     [ebp+var_8], ecx
.text$mn:00009231                 lea     ecx, [ebp+var_1]
.text$mn:00009234                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00009239                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000923C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009241                 mov     eax, [ebp+var_8]
.text$mn:00009244                 mov     ecx, [eax]
.text$mn:00009246                 push    ecx
.text$mn:00009247                 lea     ecx, [ebp+var_1]
.text$mn:0000924A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000924F                 push    1               ; int
.text$mn:00009251                 mov     edx, [ebp+var_8]
.text$mn:00009254                 mov     eax, [edx]
.text$mn:00009256                 push    eax             ; void *
.text$mn:00009257                 lea     ecx, [ebp+var_1]
.text$mn:0000925A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000925F                 mov     ecx, [ebp+var_8]
.text$mn:00009262                 mov     dword ptr [ecx], 0
.text$mn:00009268                 mov     esp, ebp
.text$mn:0000926A                 pop     ebp
.text$mn:0000926B                 retn
.text$mn:0000926B ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000926B
.text$mn:0000926B _text$mn        ends
.text$mn:0000926B
.text$mn:0000926C ; ===========================================================================
.text$mn:0000926C
.text$mn:0000926C ; Segment type: Pure code
.text$mn:0000926C ; Segment permissions: Read/Execute
.text$mn:0000926C _text$mn        segment para public 'CODE' use32
.text$mn:0000926C                 assume cs:_text$mn
.text$mn:0000926C                 ;org 926Ch
.text$mn:0000926C ; COMDAT (pick any)
.text$mn:0000926C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000926C
.text$mn:0000926C ; =============== S U B R O U T I N E =======================================
.text$mn:0000926C
.text$mn:0000926C ; Attributes: bp-based frame
.text$mn:0000926C
.text$mn:0000926C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000926C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000926C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000926C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000926C
.text$mn:0000926C var_8           = dword ptr -8
.text$mn:0000926C var_1           = byte ptr -1
.text$mn:0000926C
.text$mn:0000926C                 push    ebp
.text$mn:0000926D                 mov     ebp, esp
.text$mn:0000926F                 sub     esp, 8
.text$mn:00009272                 mov     [ebp+var_8], ecx
.text$mn:00009275                 lea     ecx, [ebp+var_1]
.text$mn:00009278                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000927D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009280                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009285                 mov     eax, [ebp+var_8]
.text$mn:00009288                 mov     ecx, [eax]
.text$mn:0000928A                 push    ecx
.text$mn:0000928B                 lea     ecx, [ebp+var_1]
.text$mn:0000928E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00009293                 push    1               ; int
.text$mn:00009295                 mov     edx, [ebp+var_8]
.text$mn:00009298                 mov     eax, [edx]
.text$mn:0000929A                 push    eax             ; void *
.text$mn:0000929B                 lea     ecx, [ebp+var_1]
.text$mn:0000929E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000092A3                 mov     ecx, [ebp+var_8]
.text$mn:000092A6                 mov     dword ptr [ecx], 0
.text$mn:000092AC                 mov     esp, ebp
.text$mn:000092AE                 pop     ebp
.text$mn:000092AF                 retn
.text$mn:000092AF ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000092AF
.text$mn:000092AF _text$mn        ends
.text$mn:000092AF
.text$mn:000092B0 ; ===========================================================================
.text$mn:000092B0
.text$mn:000092B0 ; Segment type: Pure code
.text$mn:000092B0 ; Segment permissions: Read/Execute
.text$mn:000092B0 _text$mn        segment para public 'CODE' use32
.text$mn:000092B0                 assume cs:_text$mn
.text$mn:000092B0                 ;org 92B0h
.text$mn:000092B0 ; COMDAT (pick any)
.text$mn:000092B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092B0
.text$mn:000092B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000092B0
.text$mn:000092B0 ; Attributes: bp-based frame
.text$mn:000092B0
.text$mn:000092B0 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::_Free_proxy(void)
.text$mn:000092B0                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ
.text$mn:000092B0 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000092B0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::~_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>(void)+30p
.text$mn:000092B0
.text$mn:000092B0 var_8           = dword ptr -8
.text$mn:000092B0 var_1           = byte ptr -1
.text$mn:000092B0
.text$mn:000092B0                 push    ebp
.text$mn:000092B1                 mov     ebp, esp
.text$mn:000092B3                 sub     esp, 8
.text$mn:000092B6                 mov     [ebp+var_8], ecx
.text$mn:000092B9                 lea     ecx, [ebp+var_1]
.text$mn:000092BC                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:000092C1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000092C4                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000092C9                 mov     eax, [ebp+var_8]
.text$mn:000092CC                 mov     ecx, [eax]
.text$mn:000092CE                 push    ecx
.text$mn:000092CF                 lea     ecx, [ebp+var_1]
.text$mn:000092D2                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000092D7                 push    1               ; int
.text$mn:000092D9                 mov     edx, [ebp+var_8]
.text$mn:000092DC                 mov     eax, [edx]
.text$mn:000092DE                 push    eax             ; void *
.text$mn:000092DF                 lea     ecx, [ebp+var_1]
.text$mn:000092E2                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:000092E7                 mov     ecx, [ebp+var_8]
.text$mn:000092EA                 mov     dword ptr [ecx], 0
.text$mn:000092F0                 mov     esp, ebp
.text$mn:000092F2                 pop     ebp
.text$mn:000092F3                 retn
.text$mn:000092F3 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:000092F3
.text$mn:000092F3 _text$mn        ends
.text$mn:000092F3
.text$mn:000092F4 ; ===========================================================================
.text$mn:000092F4
.text$mn:000092F4 ; Segment type: Pure code
.text$mn:000092F4 ; Segment permissions: Read/Execute
.text$mn:000092F4 _text$mn        segment para public 'CODE' use32
.text$mn:000092F4                 assume cs:_text$mn
.text$mn:000092F4                 ;org 92F4h
.text$mn:000092F4 ; COMDAT (pick any)
.text$mn:000092F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092F4
.text$mn:000092F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000092F4
.text$mn:000092F4 ; Attributes: bp-based frame
.text$mn:000092F4
.text$mn:000092F4 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::_Free_proxy(void)
.text$mn:000092F4                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ
.text$mn:000092F4 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000092F4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>(void)+30p
.text$mn:000092F4
.text$mn:000092F4 var_8           = dword ptr -8
.text$mn:000092F4 var_1           = byte ptr -1
.text$mn:000092F4
.text$mn:000092F4                 push    ebp
.text$mn:000092F5                 mov     ebp, esp
.text$mn:000092F7                 sub     esp, 8
.text$mn:000092FA                 mov     [ebp+var_8], ecx
.text$mn:000092FD                 lea     ecx, [ebp+var_1]
.text$mn:00009300                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00009305                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009308                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000930D                 mov     eax, [ebp+var_8]
.text$mn:00009310                 mov     ecx, [eax]
.text$mn:00009312                 push    ecx
.text$mn:00009313                 lea     ecx, [ebp+var_1]
.text$mn:00009316                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000931B                 push    1               ; int
.text$mn:0000931D                 mov     edx, [ebp+var_8]
.text$mn:00009320                 mov     eax, [edx]
.text$mn:00009322                 push    eax             ; void *
.text$mn:00009323                 lea     ecx, [ebp+var_1]
.text$mn:00009326                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000932B                 mov     ecx, [ebp+var_8]
.text$mn:0000932E                 mov     dword ptr [ecx], 0
.text$mn:00009334                 mov     esp, ebp
.text$mn:00009336                 pop     ebp
.text$mn:00009337                 retn
.text$mn:00009337 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:00009337
.text$mn:00009337 _text$mn        ends
.text$mn:00009337
.text$mn:00009338 ; ===========================================================================
.text$mn:00009338
.text$mn:00009338 ; Segment type: Pure code
.text$mn:00009338 ; Segment permissions: Read/Execute
.text$mn:00009338 _text$mn        segment para public 'CODE' use32
.text$mn:00009338                 assume cs:_text$mn
.text$mn:00009338                 ;org 9338h
.text$mn:00009338 ; COMDAT (pick any)
.text$mn:00009338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009338
.text$mn:00009338 ; =============== S U B R O U T I N E =======================================
.text$mn:00009338
.text$mn:00009338 ; Attributes: bp-based frame
.text$mn:00009338
.text$mn:00009338 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:00009338                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:00009338 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:00009338                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:00009338
.text$mn:00009338 var_8           = dword ptr -8
.text$mn:00009338 var_1           = byte ptr -1
.text$mn:00009338
.text$mn:00009338                 push    ebp
.text$mn:00009339                 mov     ebp, esp
.text$mn:0000933B                 sub     esp, 8
.text$mn:0000933E                 mov     [ebp+var_8], ecx
.text$mn:00009341                 lea     ecx, [ebp+var_1]
.text$mn:00009344                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00009349                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000934C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009351                 mov     eax, [ebp+var_8]
.text$mn:00009354                 mov     ecx, [eax]
.text$mn:00009356                 push    ecx
.text$mn:00009357                 lea     ecx, [ebp+var_1]
.text$mn:0000935A                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000935F                 push    1               ; int
.text$mn:00009361                 mov     edx, [ebp+var_8]
.text$mn:00009364                 mov     eax, [edx]
.text$mn:00009366                 push    eax             ; void *
.text$mn:00009367                 lea     ecx, [ebp+var_1]
.text$mn:0000936A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000936F                 mov     ecx, [ebp+var_8]
.text$mn:00009372                 mov     dword ptr [ecx], 0
.text$mn:00009378                 mov     esp, ebp
.text$mn:0000937A                 pop     ebp
.text$mn:0000937B                 retn
.text$mn:0000937B ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000937B
.text$mn:0000937B _text$mn        ends
.text$mn:0000937B
.text$mn:0000937C ; ===========================================================================
.text$mn:0000937C
.text$mn:0000937C ; Segment type: Pure code
.text$mn:0000937C ; Segment permissions: Read/Execute
.text$mn:0000937C _text$mn        segment para public 'CODE' use32
.text$mn:0000937C                 assume cs:_text$mn
.text$mn:0000937C                 ;org 937Ch
.text$mn:0000937C ; COMDAT (pick any)
.text$mn:0000937C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000937C
.text$mn:0000937C ; =============== S U B R O U T I N E =======================================
.text$mn:0000937C
.text$mn:0000937C ; Attributes: bp-based frame
.text$mn:0000937C
.text$mn:0000937C ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000937C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000937C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000937C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:0000937C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:0000937C
.text$mn:0000937C var_4           = dword ptr -4
.text$mn:0000937C arg_0           = dword ptr  8
.text$mn:0000937C
.text$mn:0000937C                 push    ebp
.text$mn:0000937D                 mov     ebp, esp
.text$mn:0000937F                 push    ecx
.text$mn:00009380                 mov     [ebp+var_4], ecx
.text$mn:00009383                 mov     ecx, [ebp+arg_0]
.text$mn:00009386                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000938B                 mov     eax, [ebp+arg_0]
.text$mn:0000938E                 mov     esp, ebp
.text$mn:00009390                 pop     ebp
.text$mn:00009391                 retn    4
.text$mn:00009391 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00009391
.text$mn:00009391 _text$mn        ends
.text$mn:00009391
.text$mn:00009394 ; ===========================================================================
.text$mn:00009394
.text$mn:00009394 ; Segment type: Pure code
.text$mn:00009394 ; Segment permissions: Read/Execute
.text$mn:00009394 _text$mn        segment para public 'CODE' use32
.text$mn:00009394                 assume cs:_text$mn
.text$mn:00009394                 ;org 9394h
.text$mn:00009394 ; COMDAT (pick any)
.text$mn:00009394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009394
.text$mn:00009394 ; =============== S U B R O U T I N E =======================================
.text$mn:00009394
.text$mn:00009394 ; Attributes: bp-based frame
.text$mn:00009394
.text$mn:00009394 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00009394                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00009394 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00009394                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p
.text$mn:00009394                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp ...
.text$mn:00009394
.text$mn:00009394 var_4           = dword ptr -4
.text$mn:00009394 arg_0           = dword ptr  8
.text$mn:00009394
.text$mn:00009394                 push    ebp
.text$mn:00009395                 mov     ebp, esp
.text$mn:00009397                 push    ecx
.text$mn:00009398                 mov     [ebp+var_4], ecx
.text$mn:0000939B                 mov     ecx, [ebp+arg_0]
.text$mn:0000939E                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:000093A3                 mov     eax, [ebp+arg_0]
.text$mn:000093A6                 mov     esp, ebp
.text$mn:000093A8                 pop     ebp
.text$mn:000093A9                 retn    4
.text$mn:000093A9 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:000093A9
.text$mn:000093A9 _text$mn        ends
.text$mn:000093A9
.text$mn:000093AC ; ===========================================================================
.text$mn:000093AC
.text$mn:000093AC ; Segment type: Pure code
.text$mn:000093AC ; Segment permissions: Read/Execute
.text$mn:000093AC _text$mn        segment para public 'CODE' use32
.text$mn:000093AC                 assume cs:_text$mn
.text$mn:000093AC                 ;org 93ACh
.text$mn:000093AC ; COMDAT (pick any)
.text$mn:000093AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093AC
.text$mn:000093AC ; =============== S U B R O U T I N E =======================================
.text$mn:000093AC
.text$mn:000093AC ; Attributes: bp-based frame
.text$mn:000093AC
.text$mn:000093AC ; public: struct std::_Wrap_alloc<class std::allocator<struct TreeParams>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeParams, class std::allocator<struct TreeParams>>>::_Getal(void)const
.text$mn:000093AC                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ
.text$mn:000093AC ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ proc near
.text$mn:000093AC                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Umove<TreeParams *>(TreeParams *,TreeParams *,TreeParams *)+10p
.text$mn:000093AC                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Destroy(TreeParams *,TreeParams *)+10p ...
.text$mn:000093AC
.text$mn:000093AC var_4           = dword ptr -4
.text$mn:000093AC arg_0           = dword ptr  8
.text$mn:000093AC
.text$mn:000093AC                 push    ebp
.text$mn:000093AD                 mov     ebp, esp
.text$mn:000093AF                 push    ecx
.text$mn:000093B0                 mov     [ebp+var_4], ecx
.text$mn:000093B3                 mov     ecx, [ebp+arg_0]
.text$mn:000093B6                 call    ??0?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TreeParams>>::_Wrap_alloc<std::allocator<TreeParams>>(void)
.text$mn:000093BB                 mov     eax, [ebp+arg_0]
.text$mn:000093BE                 mov     esp, ebp
.text$mn:000093C0                 pop     ebp
.text$mn:000093C1                 retn    4
.text$mn:000093C1 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ endp
.text$mn:000093C1
.text$mn:000093C1 _text$mn        ends
.text$mn:000093C1
.text$mn:000093C4 ; ===========================================================================
.text$mn:000093C4
.text$mn:000093C4 ; Segment type: Pure code
.text$mn:000093C4 ; Segment permissions: Read/Execute
.text$mn:000093C4 _text$mn        segment para public 'CODE' use32
.text$mn:000093C4                 assume cs:_text$mn
.text$mn:000093C4                 ;org 93C4h
.text$mn:000093C4 ; COMDAT (pick any)
.text$mn:000093C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093C4
.text$mn:000093C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000093C4
.text$mn:000093C4 ; Attributes: bp-based frame
.text$mn:000093C4
.text$mn:000093C4 ; public: struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct TreeStateNode, class std::allocator<struct TreeStateNode>>>::_Getal(void)const
.text$mn:000093C4                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ
.text$mn:000093C4 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ proc near
.text$mn:000093C4                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<TreeStateNode *>(TreeStateNode *,TreeStateNode *,TreeStateNode *)+10p
.text$mn:000093C4                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>,TreeStateNode *)+36p ...
.text$mn:000093C4
.text$mn:000093C4 var_4           = dword ptr -4
.text$mn:000093C4 arg_0           = dword ptr  8
.text$mn:000093C4
.text$mn:000093C4                 push    ebp
.text$mn:000093C5                 mov     ebp, esp
.text$mn:000093C7                 push    ecx
.text$mn:000093C8                 mov     [ebp+var_4], ecx
.text$mn:000093CB                 mov     ecx, [ebp+arg_0]
.text$mn:000093CE                 call    ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::_Wrap_alloc<std::allocator<TreeStateNode>>(void)
.text$mn:000093D3                 mov     eax, [ebp+arg_0]
.text$mn:000093D6                 mov     esp, ebp
.text$mn:000093D8                 pop     ebp
.text$mn:000093D9                 retn    4
.text$mn:000093D9 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ endp
.text$mn:000093D9
.text$mn:000093D9 _text$mn        ends
.text$mn:000093D9
.text$mn:000093DC ; ===========================================================================
.text$mn:000093DC
.text$mn:000093DC ; Segment type: Pure code
.text$mn:000093DC ; Segment permissions: Read/Execute
.text$mn:000093DC _text$mn        segment para public 'CODE' use32
.text$mn:000093DC                 assume cs:_text$mn
.text$mn:000093DC                 ;org 93DCh
.text$mn:000093DC ; COMDAT (pick any)
.text$mn:000093DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093DC
.text$mn:000093DC ; =============== S U B R O U T I N E =======================================
.text$mn:000093DC
.text$mn:000093DC ; Attributes: bp-based frame
.text$mn:000093DC
.text$mn:000093DC ; public: struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::_Getal(void)const
.text$mn:000093DC                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ
.text$mn:000093DC ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ proc near
.text$mn:000093DC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)+10p
.text$mn:000093DC                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Tidy(void)+4Ep
.text$mn:000093DC
.text$mn:000093DC var_4           = dword ptr -4
.text$mn:000093DC arg_0           = dword ptr  8
.text$mn:000093DC
.text$mn:000093DC                 push    ebp
.text$mn:000093DD                 mov     ebp, esp
.text$mn:000093DF                 push    ecx
.text$mn:000093E0                 mov     [ebp+var_4], ecx
.text$mn:000093E3                 mov     ecx, [ebp+arg_0]
.text$mn:000093E6                 call    ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<foundInfo>>::_Wrap_alloc<std::allocator<foundInfo>>(void)
.text$mn:000093EB                 mov     eax, [ebp+arg_0]
.text$mn:000093EE                 mov     esp, ebp
.text$mn:000093F0                 pop     ebp
.text$mn:000093F1                 retn    4
.text$mn:000093F1 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ endp
.text$mn:000093F1
.text$mn:000093F1 _text$mn        ends
.text$mn:000093F1
.text$mn:000093F4 ; ===========================================================================
.text$mn:000093F4
.text$mn:000093F4 ; Segment type: Pure code
.text$mn:000093F4 ; Segment permissions: Read/Execute
.text$mn:000093F4 _text$mn        segment para public 'CODE' use32
.text$mn:000093F4                 assume cs:_text$mn
.text$mn:000093F4                 ;org 93F4h
.text$mn:000093F4 ; COMDAT (pick any)
.text$mn:000093F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093F4
.text$mn:000093F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000093F4
.text$mn:000093F4 ; Attributes: bp-based frame
.text$mn:000093F4
.text$mn:000093F4 ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:000093F4                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:000093F4 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:000093F4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+36p
.text$mn:000093F4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+3Ap ...
.text$mn:000093F4
.text$mn:000093F4 var_4           = dword ptr -4
.text$mn:000093F4 arg_0           = dword ptr  8
.text$mn:000093F4
.text$mn:000093F4                 push    ebp
.text$mn:000093F5                 mov     ebp, esp
.text$mn:000093F7                 push    ecx
.text$mn:000093F8                 mov     [ebp+var_4], ecx
.text$mn:000093FB                 mov     ecx, [ebp+arg_0]
.text$mn:000093FE                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00009403                 mov     eax, [ebp+arg_0]
.text$mn:00009406                 mov     esp, ebp
.text$mn:00009408                 pop     ebp
.text$mn:00009409                 retn    4
.text$mn:00009409 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:00009409
.text$mn:00009409 _text$mn        ends
.text$mn:00009409
.text$mn:0000940C ; ===========================================================================
.text$mn:0000940C
.text$mn:0000940C ; Segment type: Pure code
.text$mn:0000940C ; Segment permissions: Read/Execute
.text$mn:0000940C _text$mn        segment para public 'CODE' use32
.text$mn:0000940C                 assume cs:_text$mn
.text$mn:0000940C                 ;org 940Ch
.text$mn:0000940C ; COMDAT (pick any)
.text$mn:0000940C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000940C
.text$mn:0000940C ; =============== S U B R O U T I N E =======================================
.text$mn:0000940C
.text$mn:0000940C ; Attributes: bp-based frame
.text$mn:0000940C
.text$mn:0000940C ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000940C                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:0000940C ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:0000940C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:0000940C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:0000940C
.text$mn:0000940C var_8           = dword ptr -8
.text$mn:0000940C var_4           = dword ptr -4
.text$mn:0000940C
.text$mn:0000940C                 push    ebp
.text$mn:0000940D                 mov     ebp, esp
.text$mn:0000940F                 sub     esp, 8
.text$mn:00009412                 mov     [ebp+var_4], ecx
.text$mn:00009415                 mov     eax, [ebp+var_4]
.text$mn:00009418                 cmp     dword ptr [eax], 0
.text$mn:0000941B                 jnz     short loc_9426
.text$mn:0000941D                 mov     [ebp+var_8], 0
.text$mn:00009424                 jmp     short loc_9430
.text$mn:00009426 ; ---------------------------------------------------------------------------
.text$mn:00009426
.text$mn:00009426 loc_9426:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:00009426                 mov     ecx, [ebp+var_4]
.text$mn:00009429                 mov     edx, [ecx]
.text$mn:0000942B                 mov     eax, [edx]
.text$mn:0000942D                 mov     [ebp+var_8], eax
.text$mn:00009430
.text$mn:00009430 loc_9430:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:00009430                 mov     eax, [ebp+var_8]
.text$mn:00009433                 mov     esp, ebp
.text$mn:00009435                 pop     ebp
.text$mn:00009436                 retn
.text$mn:00009436 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:00009436
.text$mn:00009436 ; ---------------------------------------------------------------------------
.text$mn:00009437                 align 4
.text$mn:00009437 _text$mn        ends
.text$mn:00009437
.text$mn:00009438 ; ===========================================================================
.text$mn:00009438
.text$mn:00009438 ; Segment type: Pure code
.text$mn:00009438 ; Segment permissions: Read/Execute
.text$mn:00009438 _text$mn        segment para public 'CODE' use32
.text$mn:00009438                 assume cs:_text$mn
.text$mn:00009438                 ;org 9438h
.text$mn:00009438 ; COMDAT (pick any)
.text$mn:00009438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009438
.text$mn:00009438 ; =============== S U B R O U T I N E =======================================
.text$mn:00009438
.text$mn:00009438 ; Attributes: bp-based frame
.text$mn:00009438
.text$mn:00009438 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:00009438                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:00009438 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:00009438                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+3Cp
.text$mn:00009438                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Cp
.text$mn:00009438
.text$mn:00009438 var_8           = dword ptr -8
.text$mn:00009438 var_4           = dword ptr -4
.text$mn:00009438
.text$mn:00009438                 push    ebp
.text$mn:00009439                 mov     ebp, esp
.text$mn:0000943B                 sub     esp, 8
.text$mn:0000943E                 mov     [ebp+var_4], ecx
.text$mn:00009441                 mov     eax, [ebp+var_4]
.text$mn:00009444                 cmp     dword ptr [eax], 0
.text$mn:00009447                 jnz     short loc_9452
.text$mn:00009449                 mov     [ebp+var_8], 0
.text$mn:00009450                 jmp     short loc_945D
.text$mn:00009452 ; ---------------------------------------------------------------------------
.text$mn:00009452
.text$mn:00009452 loc_9452:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:00009452                 mov     ecx, [ebp+var_4]
.text$mn:00009455                 mov     edx, [ecx]
.text$mn:00009457                 add     edx, 4
.text$mn:0000945A                 mov     [ebp+var_8], edx
.text$mn:0000945D
.text$mn:0000945D loc_945D:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:0000945D                 mov     eax, [ebp+var_8]
.text$mn:00009460                 mov     esp, ebp
.text$mn:00009462                 pop     ebp
.text$mn:00009463                 retn
.text$mn:00009463 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:00009463
.text$mn:00009463 _text$mn        ends
.text$mn:00009463
.text$mn:00009464 ; ===========================================================================
.text$mn:00009464
.text$mn:00009464 ; Segment type: Pure code
.text$mn:00009464 ; Segment permissions: Read/Execute
.text$mn:00009464 _text$mn        segment para public 'CODE' use32
.text$mn:00009464                 assume cs:_text$mn
.text$mn:00009464                 ;org 9464h
.text$mn:00009464 ; COMDAT (pick any)
.text$mn:00009464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009464
.text$mn:00009464 ; =============== S U B R O U T I N E =======================================
.text$mn:00009464
.text$mn:00009464 ; Attributes: bp-based frame
.text$mn:00009464
.text$mn:00009464 ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:00009464                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:00009464 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:00009464                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+71p
.text$mn:00009464                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+8Ap ...
.text$mn:00009464
.text$mn:00009464 var_4           = dword ptr -4
.text$mn:00009464
.text$mn:00009464                 push    ebp
.text$mn:00009465                 mov     ebp, esp
.text$mn:00009467                 push    ecx
.text$mn:00009468                 mov     [ebp+var_4], ecx
.text$mn:0000946B                 mov     eax, [ebp+var_4]
.text$mn:0000946E                 add     eax, 4
.text$mn:00009471                 mov     esp, ebp
.text$mn:00009473                 pop     ebp
.text$mn:00009474                 retn
.text$mn:00009474 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:00009474
.text$mn:00009474 ; ---------------------------------------------------------------------------
.text$mn:00009475                 align 4
.text$mn:00009475 _text$mn        ends
.text$mn:00009475
.text$mn:00009478 ; ===========================================================================
.text$mn:00009478
.text$mn:00009478 ; Segment type: Pure code
.text$mn:00009478 ; Segment permissions: Read/Execute
.text$mn:00009478 _text$mn        segment para public 'CODE' use32
.text$mn:00009478                 assume cs:_text$mn
.text$mn:00009478                 ;org 9478h
.text$mn:00009478 ; COMDAT (pick any)
.text$mn:00009478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009478
.text$mn:00009478 ; =============== S U B R O U T I N E =======================================
.text$mn:00009478
.text$mn:00009478 ; Attributes: bp-based frame
.text$mn:00009478
.text$mn:00009478 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00009478                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00009478 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00009478                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00009478                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00009478
.text$mn:00009478 var_C           = dword ptr -0Ch
.text$mn:00009478 Size            = dword ptr -8
.text$mn:00009478 var_4           = dword ptr -4
.text$mn:00009478 arg_0           = dword ptr  8
.text$mn:00009478 arg_4           = byte ptr  0Ch
.text$mn:00009478
.text$mn:00009478                 push    ebp
.text$mn:00009479                 mov     ebp, esp
.text$mn:0000947B                 sub     esp, 0Ch
.text$mn:0000947E                 mov     [ebp+var_4], ecx
.text$mn:00009481                 mov     ecx, [ebp+var_4]
.text$mn:00009484                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00009489                 cmp     eax, [ebp+arg_0]
.text$mn:0000948C                 jnb     short loc_9496
.text$mn:0000948E                 mov     ecx, [ebp+var_4]
.text$mn:00009491                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00009496
.text$mn:00009496 loc_9496:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00009496                 mov     eax, [ebp+var_4]
.text$mn:00009499                 mov     ecx, [eax+18h]
.text$mn:0000949C                 cmp     ecx, [ebp+arg_0]
.text$mn:0000949F                 jnb     short loc_94B6
.text$mn:000094A1                 mov     edx, [ebp+var_4]
.text$mn:000094A4                 mov     eax, [edx+14h]
.text$mn:000094A7                 push    eax
.text$mn:000094A8                 mov     ecx, [ebp+arg_0]
.text$mn:000094AB                 push    ecx
.text$mn:000094AC                 mov     ecx, [ebp+var_4]
.text$mn:000094AF                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:000094B4                 jmp     short loc_9500
.text$mn:000094B6 ; ---------------------------------------------------------------------------
.text$mn:000094B6
.text$mn:000094B6 loc_94B6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:000094B6                 movzx   edx, [ebp+arg_4]
.text$mn:000094BA                 test    edx, edx
.text$mn:000094BC                 jz      short loc_94F0
.text$mn:000094BE                 cmp     [ebp+arg_0], 10h
.text$mn:000094C2                 jnb     short loc_94F0
.text$mn:000094C4                 mov     eax, [ebp+var_4]
.text$mn:000094C7                 mov     ecx, [ebp+arg_0]
.text$mn:000094CA                 cmp     ecx, [eax+14h]
.text$mn:000094CD                 jnb     short loc_94D7
.text$mn:000094CF                 mov     edx, [ebp+arg_0]
.text$mn:000094D2                 mov     [ebp+Size], edx
.text$mn:000094D5                 jmp     short loc_94E0
.text$mn:000094D7 ; ---------------------------------------------------------------------------
.text$mn:000094D7
.text$mn:000094D7 loc_94D7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:000094D7                 mov     eax, [ebp+var_4]
.text$mn:000094DA                 mov     ecx, [eax+14h]
.text$mn:000094DD                 mov     [ebp+Size], ecx
.text$mn:000094E0
.text$mn:000094E0 loc_94E0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:000094E0                 mov     edx, [ebp+Size]
.text$mn:000094E3                 push    edx             ; Size
.text$mn:000094E4                 push    1               ; char
.text$mn:000094E6                 mov     ecx, [ebp+var_4]
.text$mn:000094E9                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000094EE                 jmp     short loc_9500
.text$mn:000094F0 ; ---------------------------------------------------------------------------
.text$mn:000094F0
.text$mn:000094F0 loc_94F0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:000094F0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:000094F0                 cmp     [ebp+arg_0], 0
.text$mn:000094F4                 jnz     short loc_9500
.text$mn:000094F6                 push    0
.text$mn:000094F8                 mov     ecx, [ebp+var_4]
.text$mn:000094FB                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009500
.text$mn:00009500 loc_9500:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00009500                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00009500                 cmp     [ebp+arg_0], 0
.text$mn:00009504                 jbe     short loc_950F
.text$mn:00009506                 mov     [ebp+var_C], 1
.text$mn:0000950D                 jmp     short loc_9516
.text$mn:0000950F ; ---------------------------------------------------------------------------
.text$mn:0000950F
.text$mn:0000950F loc_950F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:0000950F                 mov     [ebp+var_C], 0
.text$mn:00009516
.text$mn:00009516 loc_9516:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00009516                 mov     al, byte ptr [ebp+var_C]
.text$mn:00009519                 mov     esp, ebp
.text$mn:0000951B                 pop     ebp
.text$mn:0000951C                 retn    8
.text$mn:0000951C ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:0000951C
.text$mn:0000951C ; ---------------------------------------------------------------------------
.text$mn:0000951F                 align 10h
.text$mn:0000951F _text$mn        ends
.text$mn:0000951F
.text$mn:00009520 ; ===========================================================================
.text$mn:00009520
.text$mn:00009520 ; Segment type: Pure code
.text$mn:00009520 ; Segment permissions: Read/Execute
.text$mn:00009520 _text$mn        segment para public 'CODE' use32
.text$mn:00009520                 assume cs:_text$mn
.text$mn:00009520                 ;org 9520h
.text$mn:00009520 ; COMDAT (pick any)
.text$mn:00009520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009520
.text$mn:00009520 ; =============== S U B R O U T I N E =======================================
.text$mn:00009520
.text$mn:00009520 ; Attributes: bp-based frame
.text$mn:00009520
.text$mn:00009520 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00009520                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00009520 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00009520                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00009520                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00009520
.text$mn:00009520 var_C           = dword ptr -0Ch
.text$mn:00009520 var_8           = dword ptr -8
.text$mn:00009520 var_4           = dword ptr -4
.text$mn:00009520 arg_0           = dword ptr  8
.text$mn:00009520 arg_4           = byte ptr  0Ch
.text$mn:00009520
.text$mn:00009520                 push    ebp
.text$mn:00009521                 mov     ebp, esp
.text$mn:00009523                 sub     esp, 0Ch
.text$mn:00009526                 mov     [ebp+var_4], ecx
.text$mn:00009529                 mov     ecx, [ebp+var_4]
.text$mn:0000952C                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00009531                 cmp     eax, [ebp+arg_0]
.text$mn:00009534                 jnb     short loc_953E
.text$mn:00009536                 mov     ecx, [ebp+var_4]
.text$mn:00009539                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000953E
.text$mn:0000953E loc_953E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:0000953E                 mov     eax, [ebp+var_4]
.text$mn:00009541                 mov     ecx, [eax+18h]
.text$mn:00009544                 cmp     ecx, [ebp+arg_0]
.text$mn:00009547                 jnb     short loc_955E
.text$mn:00009549                 mov     edx, [ebp+var_4]
.text$mn:0000954C                 mov     eax, [edx+14h]
.text$mn:0000954F                 push    eax
.text$mn:00009550                 mov     ecx, [ebp+arg_0]
.text$mn:00009553                 push    ecx
.text$mn:00009554                 mov     ecx, [ebp+var_4]
.text$mn:00009557                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:0000955C                 jmp     short loc_95A8
.text$mn:0000955E ; ---------------------------------------------------------------------------
.text$mn:0000955E
.text$mn:0000955E loc_955E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:0000955E                 movzx   edx, [ebp+arg_4]
.text$mn:00009562                 test    edx, edx
.text$mn:00009564                 jz      short loc_9598
.text$mn:00009566                 cmp     [ebp+arg_0], 8
.text$mn:0000956A                 jnb     short loc_9598
.text$mn:0000956C                 mov     eax, [ebp+var_4]
.text$mn:0000956F                 mov     ecx, [ebp+arg_0]
.text$mn:00009572                 cmp     ecx, [eax+14h]
.text$mn:00009575                 jnb     short loc_957F
.text$mn:00009577                 mov     edx, [ebp+arg_0]
.text$mn:0000957A                 mov     [ebp+var_8], edx
.text$mn:0000957D                 jmp     short loc_9588
.text$mn:0000957F ; ---------------------------------------------------------------------------
.text$mn:0000957F
.text$mn:0000957F loc_957F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:0000957F                 mov     eax, [ebp+var_4]
.text$mn:00009582                 mov     ecx, [eax+14h]
.text$mn:00009585                 mov     [ebp+var_8], ecx
.text$mn:00009588
.text$mn:00009588 loc_9588:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00009588                 mov     edx, [ebp+var_8]
.text$mn:0000958B                 push    edx
.text$mn:0000958C                 push    1
.text$mn:0000958E                 mov     ecx, [ebp+var_4]
.text$mn:00009591                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009596                 jmp     short loc_95A8
.text$mn:00009598 ; ---------------------------------------------------------------------------
.text$mn:00009598
.text$mn:00009598 loc_9598:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00009598                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00009598                 cmp     [ebp+arg_0], 0
.text$mn:0000959C                 jnz     short loc_95A8
.text$mn:0000959E                 push    0
.text$mn:000095A0                 mov     ecx, [ebp+var_4]
.text$mn:000095A3                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000095A8
.text$mn:000095A8 loc_95A8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:000095A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:000095A8                 cmp     [ebp+arg_0], 0
.text$mn:000095AC                 jbe     short loc_95B7
.text$mn:000095AE                 mov     [ebp+var_C], 1
.text$mn:000095B5                 jmp     short loc_95BE
.text$mn:000095B7 ; ---------------------------------------------------------------------------
.text$mn:000095B7
.text$mn:000095B7 loc_95B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:000095B7                 mov     [ebp+var_C], 0
.text$mn:000095BE
.text$mn:000095BE loc_95BE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:000095BE                 mov     al, byte ptr [ebp+var_C]
.text$mn:000095C1                 mov     esp, ebp
.text$mn:000095C3                 pop     ebp
.text$mn:000095C4                 retn    8
.text$mn:000095C4 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:000095C4
.text$mn:000095C4 ; ---------------------------------------------------------------------------
.text$mn:000095C7                 align 4
.text$mn:000095C7 _text$mn        ends
.text$mn:000095C7
.text$mn:000095C8 ; ===========================================================================
.text$mn:000095C8
.text$mn:000095C8 ; Segment type: Pure code
.text$mn:000095C8 ; Segment permissions: Read/Execute
.text$mn:000095C8 _text$mn        segment para public 'CODE' use32
.text$mn:000095C8                 assume cs:_text$mn
.text$mn:000095C8                 ;org 95C8h
.text$mn:000095C8 ; COMDAT (pick any)
.text$mn:000095C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095C8
.text$mn:000095C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000095C8
.text$mn:000095C8 ; Attributes: bp-based frame
.text$mn:000095C8
.text$mn:000095C8 ; protected: unsigned int __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Grow_to(unsigned int)const
.text$mn:000095C8                 public ?_Grow_to@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEII@Z
.text$mn:000095C8 ?_Grow_to@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEII@Z proc near
.text$mn:000095C8                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+45p
.text$mn:000095C8
.text$mn:000095C8 var_C           = dword ptr -0Ch
.text$mn:000095C8 var_8           = dword ptr -8
.text$mn:000095C8 var_4           = dword ptr -4
.text$mn:000095C8 arg_0           = dword ptr  8
.text$mn:000095C8
.text$mn:000095C8                 push    ebp
.text$mn:000095C9                 mov     ebp, esp
.text$mn:000095CB                 sub     esp, 0Ch
.text$mn:000095CE                 mov     [ebp+var_8], ecx
.text$mn:000095D1                 mov     ecx, [ebp+var_8]
.text$mn:000095D4                 call    ?capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::capacity(void)
.text$mn:000095D9                 mov     [ebp+var_4], eax
.text$mn:000095DC                 mov     ecx, [ebp+var_8]
.text$mn:000095DF                 call    ?max_size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::max_size(void)
.text$mn:000095E4                 mov     ecx, [ebp+var_4]
.text$mn:000095E7                 shr     ecx, 1
.text$mn:000095E9                 sub     eax, ecx
.text$mn:000095EB                 cmp     eax, [ebp+var_4]
.text$mn:000095EE                 jnb     short loc_95F9
.text$mn:000095F0                 mov     [ebp+var_C], 0
.text$mn:000095F7                 jmp     short loc_9604
.text$mn:000095F9 ; ---------------------------------------------------------------------------
.text$mn:000095F9
.text$mn:000095F9 loc_95F9:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)+26j
.text$mn:000095F9                 mov     edx, [ebp+var_4]
.text$mn:000095FC                 shr     edx, 1
.text$mn:000095FE                 add     edx, [ebp+var_4]
.text$mn:00009601                 mov     [ebp+var_C], edx
.text$mn:00009604
.text$mn:00009604 loc_9604:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)+2Fj
.text$mn:00009604                 mov     eax, [ebp+var_C]
.text$mn:00009607                 mov     [ebp+var_4], eax
.text$mn:0000960A                 mov     ecx, [ebp+var_4]
.text$mn:0000960D                 cmp     ecx, [ebp+arg_0]
.text$mn:00009610                 jnb     short loc_9618
.text$mn:00009612                 mov     edx, [ebp+arg_0]
.text$mn:00009615                 mov     [ebp+var_4], edx
.text$mn:00009618
.text$mn:00009618 loc_9618:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)+48j
.text$mn:00009618                 mov     eax, [ebp+var_4]
.text$mn:0000961B                 mov     esp, ebp
.text$mn:0000961D                 pop     ebp
.text$mn:0000961E                 retn    4
.text$mn:0000961E ?_Grow_to@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEII@Z endp
.text$mn:0000961E
.text$mn:0000961E ; ---------------------------------------------------------------------------
.text$mn:00009621                 align 4
.text$mn:00009621 _text$mn        ends
.text$mn:00009621
.text$mn:00009624 ; ===========================================================================
.text$mn:00009624
.text$mn:00009624 ; Segment type: Pure code
.text$mn:00009624 ; Segment permissions: Read/Execute
.text$mn:00009624 _text$mn        segment para public 'CODE' use32
.text$mn:00009624                 assume cs:_text$mn
.text$mn:00009624                 ;org 9624h
.text$mn:00009624 ; COMDAT (pick any)
.text$mn:00009624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009624
.text$mn:00009624 ; =============== S U B R O U T I N E =======================================
.text$mn:00009624
.text$mn:00009624 ; Attributes: bp-based frame
.text$mn:00009624
.text$mn:00009624 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00009624                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00009624 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00009624                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00009624
.text$mn:00009624 var_4           = dword ptr -4
.text$mn:00009624 arg_0           = dword ptr  8
.text$mn:00009624
.text$mn:00009624                 push    ebp
.text$mn:00009625                 mov     ebp, esp
.text$mn:00009627                 push    ecx
.text$mn:00009628                 mov     [ebp+var_4], ecx
.text$mn:0000962B                 cmp     [ebp+arg_0], 0
.text$mn:0000962F                 jz      short loc_9651
.text$mn:00009631                 mov     ecx, [ebp+var_4]
.text$mn:00009634                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009639                 cmp     [ebp+arg_0], eax
.text$mn:0000963C                 jb      short loc_9651
.text$mn:0000963E                 mov     ecx, [ebp+var_4]
.text$mn:00009641                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009646                 mov     ecx, [ebp+var_4]
.text$mn:00009649                 add     eax, [ecx+14h]
.text$mn:0000964C                 cmp     eax, [ebp+arg_0]
.text$mn:0000964F                 ja      short loc_9657
.text$mn:00009651
.text$mn:00009651 loc_9651:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00009651                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00009651                 xor     al, al
.text$mn:00009653                 jmp     short loc_9659
.text$mn:00009655 ; ---------------------------------------------------------------------------
.text$mn:00009655                 jmp     short loc_9659
.text$mn:00009657 ; ---------------------------------------------------------------------------
.text$mn:00009657
.text$mn:00009657 loc_9657:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00009657                 mov     al, 1
.text$mn:00009659
.text$mn:00009659 loc_9659:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00009659                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00009659                 mov     esp, ebp
.text$mn:0000965B                 pop     ebp
.text$mn:0000965C                 retn    4
.text$mn:0000965C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:0000965C
.text$mn:0000965C ; ---------------------------------------------------------------------------
.text$mn:0000965F                 align 10h
.text$mn:0000965F _text$mn        ends
.text$mn:0000965F
.text$mn:00009660 ; ===========================================================================
.text$mn:00009660
.text$mn:00009660 ; Segment type: Pure code
.text$mn:00009660 ; Segment permissions: Read/Execute
.text$mn:00009660 _text$mn        segment para public 'CODE' use32
.text$mn:00009660                 assume cs:_text$mn
.text$mn:00009660                 ;org 9660h
.text$mn:00009660 ; COMDAT (pick any)
.text$mn:00009660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009660
.text$mn:00009660 ; =============== S U B R O U T I N E =======================================
.text$mn:00009660
.text$mn:00009660 ; Attributes: bp-based frame
.text$mn:00009660
.text$mn:00009660 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00009660                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00009660 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00009660                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00009660                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:00009660
.text$mn:00009660 var_4           = dword ptr -4
.text$mn:00009660 arg_0           = dword ptr  8
.text$mn:00009660
.text$mn:00009660                 push    ebp
.text$mn:00009661                 mov     ebp, esp
.text$mn:00009663                 push    ecx
.text$mn:00009664                 mov     [ebp+var_4], ecx
.text$mn:00009667                 cmp     [ebp+arg_0], 0
.text$mn:0000966B                 jz      short loc_9690
.text$mn:0000966D                 mov     ecx, [ebp+var_4]
.text$mn:00009670                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009675                 cmp     [ebp+arg_0], eax
.text$mn:00009678                 jb      short loc_9690
.text$mn:0000967A                 mov     ecx, [ebp+var_4]
.text$mn:0000967D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009682                 mov     ecx, [ebp+var_4]
.text$mn:00009685                 mov     edx, [ecx+14h]
.text$mn:00009688                 lea     eax, [eax+edx*2]
.text$mn:0000968B                 cmp     eax, [ebp+arg_0]
.text$mn:0000968E                 ja      short loc_9696
.text$mn:00009690
.text$mn:00009690 loc_9690:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00009690                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00009690                 xor     al, al
.text$mn:00009692                 jmp     short loc_9698
.text$mn:00009694 ; ---------------------------------------------------------------------------
.text$mn:00009694                 jmp     short loc_9698
.text$mn:00009696 ; ---------------------------------------------------------------------------
.text$mn:00009696
.text$mn:00009696 loc_9696:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00009696                 mov     al, 1
.text$mn:00009698
.text$mn:00009698 loc_9698:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00009698                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00009698                 mov     esp, ebp
.text$mn:0000969A                 pop     ebp
.text$mn:0000969B                 retn    4
.text$mn:0000969B ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:0000969B
.text$mn:0000969B ; ---------------------------------------------------------------------------
.text$mn:0000969E                 align 10h
.text$mn:0000969E _text$mn        ends
.text$mn:0000969E
.text$mn:000096A0 ; ===========================================================================
.text$mn:000096A0
.text$mn:000096A0 ; Segment type: Pure code
.text$mn:000096A0 ; Segment permissions: Read/Execute
.text$mn:000096A0 _text$mn        segment para public 'CODE' use32
.text$mn:000096A0                 assume cs:_text$mn
.text$mn:000096A0                 ;org 96A0h
.text$mn:000096A0 ; COMDAT (pick any)
.text$mn:000096A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096A0
.text$mn:000096A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000096A0
.text$mn:000096A0 ; Attributes: bp-based frame
.text$mn:000096A0
.text$mn:000096A0 ; protected: bool __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Inside(struct TreeParams const *)const
.text$mn:000096A0                 public ?_Inside@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBE_NPBUTreeParams@@@Z
.text$mn:000096A0 ?_Inside@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBE_NPBUTreeParams@@@Z proc near
.text$mn:000096A0                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+19p
.text$mn:000096A0
.text$mn:000096A0 var_8           = dword ptr -8
.text$mn:000096A0 var_4           = dword ptr -4
.text$mn:000096A0 arg_0           = dword ptr  8
.text$mn:000096A0
.text$mn:000096A0                 push    ebp
.text$mn:000096A1                 mov     ebp, esp
.text$mn:000096A3                 sub     esp, 8
.text$mn:000096A6                 mov     [ebp+var_4], ecx
.text$mn:000096A9                 mov     eax, [ebp+var_4]
.text$mn:000096AC                 mov     ecx, [ebp+arg_0]
.text$mn:000096AF                 cmp     ecx, [eax+8]
.text$mn:000096B2                 jnb     short loc_96C8
.text$mn:000096B4                 mov     edx, [ebp+var_4]
.text$mn:000096B7                 mov     eax, [edx+4]
.text$mn:000096BA                 cmp     eax, [ebp+arg_0]
.text$mn:000096BD                 ja      short loc_96C8
.text$mn:000096BF                 mov     [ebp+var_8], 1
.text$mn:000096C6                 jmp     short loc_96CF
.text$mn:000096C8 ; ---------------------------------------------------------------------------
.text$mn:000096C8
.text$mn:000096C8 loc_96C8:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Inside(TreeParams const *)+12j
.text$mn:000096C8                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Inside(TreeParams const *)+1Dj
.text$mn:000096C8                 mov     [ebp+var_8], 0
.text$mn:000096CF
.text$mn:000096CF loc_96CF:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Inside(TreeParams const *)+26j
.text$mn:000096CF                 mov     al, byte ptr [ebp+var_8]
.text$mn:000096D2                 mov     esp, ebp
.text$mn:000096D4                 pop     ebp
.text$mn:000096D5                 retn    4
.text$mn:000096D5 ?_Inside@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBE_NPBUTreeParams@@@Z endp
.text$mn:000096D5
.text$mn:000096D5 _text$mn        ends
.text$mn:000096D5
.text$mn:000096D8 ; ===========================================================================
.text$mn:000096D8
.text$mn:000096D8 ; Segment type: Pure code
.text$mn:000096D8 ; Segment permissions: Read/Execute
.text$mn:000096D8 _text$mn        segment para public 'CODE' use32
.text$mn:000096D8                 assume cs:_text$mn
.text$mn:000096D8                 ;org 96D8h
.text$mn:000096D8 ; COMDAT (pick any)
.text$mn:000096D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096D8
.text$mn:000096D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000096D8
.text$mn:000096D8 ; Attributes: bp-based frame
.text$mn:000096D8
.text$mn:000096D8 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Make_iter(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)const
.text$mn:000096D8                 public ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:000096D8 ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$mn:000096D8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+EEp
.text$mn:000096D8
.text$mn:000096D8 var_14          = dword ptr -14h
.text$mn:000096D8 var_10          = dword ptr -10h
.text$mn:000096D8 var_C           = dword ptr -0Ch
.text$mn:000096D8 var_4           = dword ptr -4
.text$mn:000096D8 arg_0           = dword ptr  8
.text$mn:000096D8 arg_4           = byte ptr  0Ch
.text$mn:000096D8 arg_C           = dword ptr  14h
.text$mn:000096D8
.text$mn:000096D8                 push    ebp
.text$mn:000096D9                 mov     ebp, esp
.text$mn:000096DB                 push    0FFFFFFFFh
.text$mn:000096DD                 push    offset __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:000096E2                 mov     eax, large fs:0
.text$mn:000096E8                 push    eax
.text$mn:000096E9                 sub     esp, 8
.text$mn:000096EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000096F1                 xor     eax, ebp
.text$mn:000096F3                 push    eax
.text$mn:000096F4                 lea     eax, [ebp+var_C]
.text$mn:000096F7                 mov     large fs:0, eax
.text$mn:000096FD                 mov     [ebp+var_14], ecx
.text$mn:00009700                 mov     [ebp+var_10], 0
.text$mn:00009707                 mov     [ebp+var_4], 1
.text$mn:0000970E                 mov     eax, [ebp+var_14]
.text$mn:00009711                 push    eax             ; struct std::_Container_base12 *
.text$mn:00009712                 mov     ecx, [ebp+arg_C]
.text$mn:00009715                 push    ecx             ; int
.text$mn:00009716                 mov     ecx, [ebp+arg_0]
.text$mn:00009719                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000971E                 mov     edx, [ebp+var_10]
.text$mn:00009721                 or      edx, 1
.text$mn:00009724                 mov     [ebp+var_10], edx
.text$mn:00009727                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000972B                 lea     ecx, [ebp+arg_4]
.text$mn:0000972E                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00009733                 mov     eax, [ebp+arg_0]
.text$mn:00009736                 mov     ecx, [ebp+var_C]
.text$mn:00009739                 mov     large fs:0, ecx
.text$mn:00009740                 pop     ecx
.text$mn:00009741                 mov     esp, ebp
.text$mn:00009743                 pop     ebp
.text$mn:00009744                 retn    10h
.text$mn:00009744 ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$mn:00009744
.text$mn:00009744 ; ---------------------------------------------------------------------------
.text$mn:00009747                 align 4
.text$mn:00009747 _text$mn        ends
.text$mn:00009747
.text$x:00009748 ; ===========================================================================
.text$x:00009748
.text$x:00009748 ; Segment type: Pure code
.text$x:00009748 ; Segment permissions: Read/Execute
.text$x:00009748 _text$x         segment para public 'CODE' use32
.text$x:00009748                 assume cs:_text$x
.text$x:00009748                 ;org 9748h
.text$x:00009748 ; COMDAT (pick associative to section at 96D8)
.text$x:00009748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009748
.text$x:00009748 ; =============== S U B R O U T I N E =======================================
.text$x:00009748
.text$x:00009748
.text$x:00009748 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 proc near
.text$x:00009748                                         ; DATA XREF: .xdata$x:0000D434o
.text$x:00009748                 lea     ecx, [ebp+0Ch]
.text$x:0000974B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000974B __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 endp
.text$x:0000974B
.text$x:00009750
.text$x:00009750 ; =============== S U B R O U T I N E =======================================
.text$x:00009750
.text$x:00009750
.text$x:00009750 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 proc near
.text$x:00009750                                         ; DATA XREF: .xdata$x:0000D42Co
.text$x:00009750                 mov     eax, [ebp-10h]
.text$x:00009753                 and     eax, 1
.text$x:00009756                 jz      $LN5
.text$x:0000975C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009760                 mov     ecx, [ebp+8]
.text$x:00009763                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00009768 ; ---------------------------------------------------------------------------
.text$x:00009768
.text$x:00009768 $LN5:                                   ; CODE XREF: __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1+6j
.text$x:00009768                 retn
.text$x:00009768 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 endp
.text$x:00009768
.text$x:00009769
.text$x:00009769 ; =============== S U B R O U T I N E =======================================
.text$x:00009769
.text$x:00009769
.text$x:00009769 __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$x:00009769                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:00009769
.text$x:00009769 arg_4           = dword ptr  8
.text$x:00009769
.text$x:00009769                 mov     edx, [esp+arg_4]
.text$x:0000976D                 lea     eax, [edx+0Ch]
.text$x:00009770                 mov     ecx, [edx-0Ch]
.text$x:00009773                 xor     ecx, eax
.text$x:00009775                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000977A                 mov     eax, offset __ehfuncinfo$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$x:0000977F                 jmp     ___CxxFrameHandler3
.text$x:0000977F __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$x:0000977F
.text$x:0000977F _text$x         ends
.text$x:0000977F
.text$mn:00009784 ; ===========================================================================
.text$mn:00009784
.text$mn:00009784 ; Segment type: Pure code
.text$mn:00009784 ; Segment permissions: Read/Execute
.text$mn:00009784 _text$mn        segment para public 'CODE' use32
.text$mn:00009784                 assume cs:_text$mn
.text$mn:00009784                 ;org 9784h
.text$mn:00009784 ; COMDAT (pick any)
.text$mn:00009784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009784
.text$mn:00009784 ; =============== S U B R O U T I N E =======================================
.text$mn:00009784
.text$mn:00009784 ; Attributes: bp-based frame
.text$mn:00009784
.text$mn:00009784 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009784                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00009784 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00009784                                         ; CODE XREF: $LN19+14p
.text$mn:00009784                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00009784
.text$mn:00009784 var_8           = dword ptr -8
.text$mn:00009784 var_4           = dword ptr -4
.text$mn:00009784
.text$mn:00009784                 push    ebp
.text$mn:00009785                 mov     ebp, esp
.text$mn:00009787                 sub     esp, 8
.text$mn:0000978A                 mov     [ebp+var_4], ecx
.text$mn:0000978D                 mov     eax, [ebp+var_4]
.text$mn:00009790                 cmp     dword ptr [eax+18h], 10h
.text$mn:00009794                 jb      short loc_97AA
.text$mn:00009796                 mov     ecx, [ebp+var_4]
.text$mn:00009799                 mov     edx, [ecx+4]
.text$mn:0000979C                 push    edx
.text$mn:0000979D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000097A2                 add     esp, 4
.text$mn:000097A5                 mov     [ebp+var_8], eax
.text$mn:000097A8                 jmp     short loc_97B3
.text$mn:000097AA ; ---------------------------------------------------------------------------
.text$mn:000097AA
.text$mn:000097AA loc_97AA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000097AA                 mov     eax, [ebp+var_4]
.text$mn:000097AD                 add     eax, 4
.text$mn:000097B0                 mov     [ebp+var_8], eax
.text$mn:000097B3
.text$mn:000097B3 loc_97B3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000097B3                 mov     eax, [ebp+var_8]
.text$mn:000097B6                 mov     esp, ebp
.text$mn:000097B8                 pop     ebp
.text$mn:000097B9                 retn
.text$mn:000097B9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:000097B9
.text$mn:000097B9 ; ---------------------------------------------------------------------------
.text$mn:000097BA                 align 4
.text$mn:000097BA _text$mn        ends
.text$mn:000097BA
.text$mn:000097BC ; ===========================================================================
.text$mn:000097BC
.text$mn:000097BC ; Segment type: Pure code
.text$mn:000097BC ; Segment permissions: Read/Execute
.text$mn:000097BC _text$mn        segment para public 'CODE' use32
.text$mn:000097BC                 assume cs:_text$mn
.text$mn:000097BC                 ;org 97BCh
.text$mn:000097BC ; COMDAT (pick any)
.text$mn:000097BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097BC
.text$mn:000097BC ; =============== S U B R O U T I N E =======================================
.text$mn:000097BC
.text$mn:000097BC ; Attributes: bp-based frame
.text$mn:000097BC
.text$mn:000097BC ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:000097BC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:000097BC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:000097BC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:000097BC
.text$mn:000097BC var_8           = dword ptr -8
.text$mn:000097BC var_4           = dword ptr -4
.text$mn:000097BC
.text$mn:000097BC                 push    ebp
.text$mn:000097BD                 mov     ebp, esp
.text$mn:000097BF                 sub     esp, 8
.text$mn:000097C2                 mov     [ebp+var_4], ecx
.text$mn:000097C5                 mov     eax, [ebp+var_4]
.text$mn:000097C8                 cmp     dword ptr [eax+18h], 10h
.text$mn:000097CC                 jb      short loc_97E2
.text$mn:000097CE                 mov     ecx, [ebp+var_4]
.text$mn:000097D1                 mov     edx, [ecx+4]
.text$mn:000097D4                 push    edx
.text$mn:000097D5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000097DA                 add     esp, 4
.text$mn:000097DD                 mov     [ebp+var_8], eax
.text$mn:000097E0                 jmp     short loc_97EB
.text$mn:000097E2 ; ---------------------------------------------------------------------------
.text$mn:000097E2
.text$mn:000097E2 loc_97E2:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000097E2                 mov     eax, [ebp+var_4]
.text$mn:000097E5                 add     eax, 4
.text$mn:000097E8                 mov     [ebp+var_8], eax
.text$mn:000097EB
.text$mn:000097EB loc_97EB:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000097EB                 mov     eax, [ebp+var_8]
.text$mn:000097EE                 mov     esp, ebp
.text$mn:000097F0                 pop     ebp
.text$mn:000097F1                 retn
.text$mn:000097F1 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:000097F1
.text$mn:000097F1 ; ---------------------------------------------------------------------------
.text$mn:000097F2                 align 4
.text$mn:000097F2 _text$mn        ends
.text$mn:000097F2
.text$mn:000097F4 ; ===========================================================================
.text$mn:000097F4
.text$mn:000097F4 ; Segment type: Pure code
.text$mn:000097F4 ; Segment permissions: Read/Execute
.text$mn:000097F4 _text$mn        segment para public 'CODE' use32
.text$mn:000097F4                 assume cs:_text$mn
.text$mn:000097F4                 ;org 97F4h
.text$mn:000097F4 ; COMDAT (pick any)
.text$mn:000097F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097F4
.text$mn:000097F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000097F4
.text$mn:000097F4 ; Attributes: bp-based frame
.text$mn:000097F4
.text$mn:000097F4 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000097F4                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:000097F4 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:000097F4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:000097F4                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:000097F4
.text$mn:000097F4 var_8           = dword ptr -8
.text$mn:000097F4 var_4           = dword ptr -4
.text$mn:000097F4
.text$mn:000097F4                 push    ebp
.text$mn:000097F5                 mov     ebp, esp
.text$mn:000097F7                 sub     esp, 8
.text$mn:000097FA                 mov     [ebp+var_4], ecx
.text$mn:000097FD                 mov     eax, [ebp+var_4]
.text$mn:00009800                 cmp     dword ptr [eax+18h], 8
.text$mn:00009804                 jb      short loc_981A
.text$mn:00009806                 mov     ecx, [ebp+var_4]
.text$mn:00009809                 mov     edx, [ecx+4]
.text$mn:0000980C                 push    edx
.text$mn:0000980D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00009812                 add     esp, 4
.text$mn:00009815                 mov     [ebp+var_8], eax
.text$mn:00009818                 jmp     short loc_9823
.text$mn:0000981A ; ---------------------------------------------------------------------------
.text$mn:0000981A
.text$mn:0000981A loc_981A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000981A                 mov     eax, [ebp+var_4]
.text$mn:0000981D                 add     eax, 4
.text$mn:00009820                 mov     [ebp+var_8], eax
.text$mn:00009823
.text$mn:00009823 loc_9823:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00009823                 mov     eax, [ebp+var_8]
.text$mn:00009826                 mov     esp, ebp
.text$mn:00009828                 pop     ebp
.text$mn:00009829                 retn
.text$mn:00009829 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00009829
.text$mn:00009829 ; ---------------------------------------------------------------------------
.text$mn:0000982A                 align 4
.text$mn:0000982A _text$mn        ends
.text$mn:0000982A
.text$mn:0000982C ; ===========================================================================
.text$mn:0000982C
.text$mn:0000982C ; Segment type: Pure code
.text$mn:0000982C ; Segment permissions: Read/Execute
.text$mn:0000982C _text$mn        segment para public 'CODE' use32
.text$mn:0000982C                 assume cs:_text$mn
.text$mn:0000982C                 ;org 982Ch
.text$mn:0000982C ; COMDAT (pick any)
.text$mn:0000982C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000982C
.text$mn:0000982C ; =============== S U B R O U T I N E =======================================
.text$mn:0000982C
.text$mn:0000982C ; Attributes: bp-based frame
.text$mn:0000982C
.text$mn:0000982C ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:0000982C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:0000982C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:0000982C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:0000982C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:0000982C
.text$mn:0000982C var_8           = dword ptr -8
.text$mn:0000982C var_4           = dword ptr -4
.text$mn:0000982C
.text$mn:0000982C                 push    ebp
.text$mn:0000982D                 mov     ebp, esp
.text$mn:0000982F                 sub     esp, 8
.text$mn:00009832                 mov     [ebp+var_4], ecx
.text$mn:00009835                 mov     eax, [ebp+var_4]
.text$mn:00009838                 cmp     dword ptr [eax+18h], 8
.text$mn:0000983C                 jb      short loc_9852
.text$mn:0000983E                 mov     ecx, [ebp+var_4]
.text$mn:00009841                 mov     edx, [ecx+4]
.text$mn:00009844                 push    edx
.text$mn:00009845                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000984A                 add     esp, 4
.text$mn:0000984D                 mov     [ebp+var_8], eax
.text$mn:00009850                 jmp     short loc_985B
.text$mn:00009852 ; ---------------------------------------------------------------------------
.text$mn:00009852
.text$mn:00009852 loc_9852:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00009852                 mov     eax, [ebp+var_4]
.text$mn:00009855                 add     eax, 4
.text$mn:00009858                 mov     [ebp+var_8], eax
.text$mn:0000985B
.text$mn:0000985B loc_985B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000985B                 mov     eax, [ebp+var_8]
.text$mn:0000985E                 mov     esp, ebp
.text$mn:00009860                 pop     ebp
.text$mn:00009861                 retn
.text$mn:00009861 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00009861
.text$mn:00009861 ; ---------------------------------------------------------------------------
.text$mn:00009862                 align 4
.text$mn:00009862 _text$mn        ends
.text$mn:00009862
.text$mn:00009864 ; ===========================================================================
.text$mn:00009864
.text$mn:00009864 ; Segment type: Pure code
.text$mn:00009864 ; Segment permissions: Read/Execute
.text$mn:00009864 _text$mn        segment para public 'CODE' use32
.text$mn:00009864                 assume cs:_text$mn
.text$mn:00009864                 ;org 9864h
.text$mn:00009864 ; COMDAT (pick any)
.text$mn:00009864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009864
.text$mn:00009864 ; =============== S U B R O U T I N E =======================================
.text$mn:00009864
.text$mn:00009864 ; Attributes: bp-based frame
.text$mn:00009864
.text$mn:00009864 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00009864                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00009864 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00009864                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00009864                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+88p ...
.text$mn:00009864
.text$mn:00009864 var_18          = byte ptr -18h
.text$mn:00009864 var_14          = dword ptr -14h
.text$mn:00009864 var_10          = dword ptr -10h
.text$mn:00009864 var_C           = dword ptr -0Ch
.text$mn:00009864 var_4           = dword ptr -4
.text$mn:00009864
.text$mn:00009864                 push    ebp
.text$mn:00009865                 mov     ebp, esp
.text$mn:00009867                 push    0FFFFFFFFh
.text$mn:00009869                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000986E                 mov     eax, large fs:0
.text$mn:00009874                 push    eax
.text$mn:00009875                 sub     esp, 0Ch
.text$mn:00009878                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000987D                 xor     eax, ebp
.text$mn:0000987F                 push    eax
.text$mn:00009880                 lea     eax, [ebp+var_C]
.text$mn:00009883                 mov     large fs:0, eax
.text$mn:00009889                 mov     [ebp+var_14], ecx
.text$mn:0000988C                 mov     eax, [ebp+var_14]
.text$mn:0000988F                 cmp     dword ptr [eax], 0
.text$mn:00009892                 jz      short loc_98EF
.text$mn:00009894                 push    3               ; int
.text$mn:00009896                 lea     ecx, [ebp+var_18] ; this
.text$mn:00009899                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000989E                 mov     [ebp+var_4], 0
.text$mn:000098A5                 mov     ecx, [ebp+var_14]
.text$mn:000098A8                 mov     edx, [ecx]
.text$mn:000098AA                 add     edx, 4
.text$mn:000098AD                 mov     [ebp+var_10], edx
.text$mn:000098B0                 jmp     short loc_98BF
.text$mn:000098B2 ; ---------------------------------------------------------------------------
.text$mn:000098B2
.text$mn:000098B2 loc_98B2:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:000098B2                 mov     eax, [ebp+var_10]
.text$mn:000098B5                 mov     ecx, [eax]
.text$mn:000098B7                 mov     edx, [ebp+var_10]
.text$mn:000098BA                 mov     eax, [ecx+4]
.text$mn:000098BD                 mov     [edx], eax
.text$mn:000098BF
.text$mn:000098BF loc_98BF:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:000098BF                 mov     ecx, [ebp+var_10]
.text$mn:000098C2                 cmp     dword ptr [ecx], 0
.text$mn:000098C5                 jz      short loc_98D4
.text$mn:000098C7                 mov     edx, [ebp+var_10]
.text$mn:000098CA                 mov     eax, [edx]
.text$mn:000098CC                 mov     dword ptr [eax], 0
.text$mn:000098D2                 jmp     short loc_98B2
.text$mn:000098D4 ; ---------------------------------------------------------------------------
.text$mn:000098D4
.text$mn:000098D4 loc_98D4:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:000098D4                 mov     ecx, [ebp+var_14]
.text$mn:000098D7                 mov     edx, [ecx]
.text$mn:000098D9                 mov     dword ptr [edx+4], 0
.text$mn:000098E0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000098E7                 lea     ecx, [ebp+var_18] ; this
.text$mn:000098EA                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000098EF
.text$mn:000098EF loc_98EF:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:000098EF                 mov     ecx, [ebp+var_C]
.text$mn:000098F2                 mov     large fs:0, ecx
.text$mn:000098F9                 pop     ecx
.text$mn:000098FA                 mov     esp, ebp
.text$mn:000098FC                 pop     ebp
.text$mn:000098FD                 retn
.text$mn:000098FD ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:000098FD
.text$mn:000098FD ; ---------------------------------------------------------------------------
.text$mn:000098FE                 align 10h
.text$mn:000098FE _text$mn        ends
.text$mn:000098FE
.text$x:00009900 ; ===========================================================================
.text$x:00009900
.text$x:00009900 ; Segment type: Pure code
.text$x:00009900 ; Segment permissions: Read/Execute
.text$x:00009900 _text$x         segment para public 'CODE' use32
.text$x:00009900                 assume cs:_text$x
.text$x:00009900                 ;org 9900h
.text$x:00009900 ; COMDAT (pick associative to section at 9864)
.text$x:00009900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009900
.text$x:00009900 ; =============== S U B R O U T I N E =======================================
.text$x:00009900
.text$x:00009900
.text$x:00009900 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00009900                                         ; DATA XREF: .xdata$x:0000CAE4o
.text$x:00009900                 lea     ecx, [ebp-18h]  ; this
.text$x:00009903                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009903 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00009903
.text$x:00009908
.text$x:00009908 ; =============== S U B R O U T I N E =======================================
.text$x:00009908
.text$x:00009908
.text$x:00009908 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00009908                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00009908
.text$x:00009908 arg_4           = dword ptr  8
.text$x:00009908
.text$x:00009908                 mov     edx, [esp+arg_4]
.text$x:0000990C                 lea     eax, [edx+0Ch]
.text$x:0000990F                 mov     ecx, [edx-10h]
.text$x:00009912                 xor     ecx, eax
.text$x:00009914                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009919                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:0000991E                 jmp     ___CxxFrameHandler3
.text$x:0000991E __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:0000991E
.text$x:0000991E ; ---------------------------------------------------------------------------
.text$x:00009923                 align 4
.text$x:00009923 _text$x         ends
.text$x:00009923
.text$mn:00009924 ; ===========================================================================
.text$mn:00009924
.text$mn:00009924 ; Segment type: Pure code
.text$mn:00009924 ; Segment permissions: Read/Execute
.text$mn:00009924 _text$mn        segment para public 'CODE' use32
.text$mn:00009924                 assume cs:_text$mn
.text$mn:00009924                 ;org 9924h
.text$mn:00009924 ; COMDAT (pick any)
.text$mn:00009924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009924
.text$mn:00009924 ; =============== S U B R O U T I N E =======================================
.text$mn:00009924
.text$mn:00009924 ; Attributes: bp-based frame
.text$mn:00009924
.text$mn:00009924 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00009924                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00009924 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00009924                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00009924                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00009924
.text$mn:00009924 var_8           = dword ptr -8
.text$mn:00009924 var_4           = dword ptr -4
.text$mn:00009924
.text$mn:00009924                 push    ebp
.text$mn:00009925                 mov     ebp, esp
.text$mn:00009927                 sub     esp, 8
.text$mn:0000992A                 mov     [ebp+var_8], ecx
.text$mn:0000992D                 mov     eax, [ebp+var_8]
.text$mn:00009930                 cmp     dword ptr [eax], 0
.text$mn:00009933                 jz      short loc_9992
.text$mn:00009935                 mov     ecx, [ebp+var_8]
.text$mn:00009938                 mov     edx, [ecx]
.text$mn:0000993A                 add     edx, 4
.text$mn:0000993D                 mov     [ebp+var_4], edx
.text$mn:00009940
.text$mn:00009940 loc_9940:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00009940                 mov     eax, [ebp+var_4]
.text$mn:00009943                 cmp     dword ptr [eax], 0
.text$mn:00009946                 jz      short loc_995F
.text$mn:00009948                 mov     ecx, [ebp+var_4]
.text$mn:0000994B                 mov     edx, [ecx]
.text$mn:0000994D                 cmp     edx, [ebp+var_8]
.text$mn:00009950                 jz      short loc_995F
.text$mn:00009952                 mov     eax, [ebp+var_4]
.text$mn:00009955                 mov     ecx, [eax]
.text$mn:00009957                 add     ecx, 4
.text$mn:0000995A                 mov     [ebp+var_4], ecx
.text$mn:0000995D                 jmp     short loc_9940
.text$mn:0000995F ; ---------------------------------------------------------------------------
.text$mn:0000995F
.text$mn:0000995F loc_995F:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:0000995F                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:0000995F                 mov     edx, [ebp+var_4]
.text$mn:00009962                 cmp     dword ptr [edx], 0
.text$mn:00009965                 jnz     short loc_997E
.text$mn:00009967                 push    0C9h ; '+'      ; unsigned int
.text$mn:0000996C                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009971                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:00009976                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000997B                 add     esp, 0Ch
.text$mn:0000997E
.text$mn:0000997E loc_997E:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:0000997E                 mov     eax, [ebp+var_4]
.text$mn:00009981                 mov     ecx, [ebp+var_8]
.text$mn:00009984                 mov     edx, [ecx+4]
.text$mn:00009987                 mov     [eax], edx
.text$mn:00009989                 mov     eax, [ebp+var_8]
.text$mn:0000998C                 mov     dword ptr [eax], 0
.text$mn:00009992
.text$mn:00009992 loc_9992:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:00009992                 mov     esp, ebp
.text$mn:00009994                 pop     ebp
.text$mn:00009995                 retn
.text$mn:00009995 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00009995
.text$mn:00009995 ; ---------------------------------------------------------------------------
.text$mn:00009996                 align 4
.text$mn:00009996 _text$mn        ends
.text$mn:00009996
.text$mn:00009998 ; ===========================================================================
.text$mn:00009998
.text$mn:00009998 ; Segment type: Pure code
.text$mn:00009998 ; Segment permissions: Read/Execute
.text$mn:00009998 _text$mn        segment para public 'CODE' use32
.text$mn:00009998                 assume cs:_text$mn
.text$mn:00009998                 ;org 9998h
.text$mn:00009998 ; COMDAT (pick any)
.text$mn:00009998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009998
.text$mn:00009998 ; =============== S U B R O U T I N E =======================================
.text$mn:00009998
.text$mn:00009998 ; Attributes: bp-based frame
.text$mn:00009998
.text$mn:00009998 ; protected: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Orphan_range(struct TreeParams *, struct TreeParams *)const
.text$mn:00009998                 public ?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z
.text$mn:00009998 ?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z proc near
.text$mn:00009998                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+6Fp
.text$mn:00009998                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+D3p
.text$mn:00009998
.text$mn:00009998 var_18          = byte ptr -18h
.text$mn:00009998 var_14          = dword ptr -14h
.text$mn:00009998 var_10          = dword ptr -10h
.text$mn:00009998 var_C           = dword ptr -0Ch
.text$mn:00009998 var_4           = dword ptr -4
.text$mn:00009998 arg_0           = dword ptr  8
.text$mn:00009998 arg_4           = dword ptr  0Ch
.text$mn:00009998
.text$mn:00009998                 push    ebp
.text$mn:00009999                 mov     ebp, esp
.text$mn:0000999B                 push    0FFFFFFFFh
.text$mn:0000999D                 push    offset __ehhandler$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z
.text$mn:000099A2                 mov     eax, large fs:0
.text$mn:000099A8                 push    eax
.text$mn:000099A9                 sub     esp, 0Ch
.text$mn:000099AC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000099B1                 xor     eax, ebp
.text$mn:000099B3                 push    eax
.text$mn:000099B4                 lea     eax, [ebp+var_C]
.text$mn:000099B7                 mov     large fs:0, eax
.text$mn:000099BD                 mov     [ebp+var_14], ecx
.text$mn:000099C0                 push    3               ; int
.text$mn:000099C2                 lea     ecx, [ebp+var_18] ; this
.text$mn:000099C5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000099CA                 mov     [ebp+var_4], 0
.text$mn:000099D1                 mov     ecx, [ebp+var_14] ; this
.text$mn:000099D4                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000099D9                 mov     [ebp+var_10], eax
.text$mn:000099DC                 cmp     [ebp+var_10], 0
.text$mn:000099E0                 jz      short loc_9A30
.text$mn:000099E2
.text$mn:000099E2 loc_99E2:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *):loc_9A2Ej
.text$mn:000099E2                 mov     eax, [ebp+var_10]
.text$mn:000099E5                 cmp     dword ptr [eax], 0
.text$mn:000099E8                 jz      short loc_9A30
.text$mn:000099EA                 mov     ecx, [ebp+var_10]
.text$mn:000099ED                 mov     edx, [ecx]
.text$mn:000099EF                 mov     eax, [edx+8]
.text$mn:000099F2                 cmp     eax, [ebp+arg_0]
.text$mn:000099F5                 jb      short loc_9A04
.text$mn:000099F7                 mov     ecx, [ebp+var_10]
.text$mn:000099FA                 mov     edx, [ecx]
.text$mn:000099FC                 mov     eax, [ebp+arg_4]
.text$mn:000099FF                 cmp     eax, [edx+8]
.text$mn:00009A02                 jnb     short loc_9A13
.text$mn:00009A04
.text$mn:00009A04 loc_9A04:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+5Dj
.text$mn:00009A04                 mov     ecx, [ebp+var_10]
.text$mn:00009A07                 mov     ecx, [ecx]      ; this
.text$mn:00009A09                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00009A0E                 mov     [ebp+var_10], eax
.text$mn:00009A11                 jmp     short loc_9A2E
.text$mn:00009A13 ; ---------------------------------------------------------------------------
.text$mn:00009A13
.text$mn:00009A13 loc_9A13:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+6Aj
.text$mn:00009A13                 mov     edx, [ebp+var_10]
.text$mn:00009A16                 mov     ecx, [edx]      ; this
.text$mn:00009A18                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00009A1D                 mov     eax, [ebp+var_10]
.text$mn:00009A20                 mov     ecx, [eax]      ; this
.text$mn:00009A22                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00009A27                 mov     ecx, [ebp+var_10]
.text$mn:00009A2A                 mov     edx, [eax]
.text$mn:00009A2C                 mov     [ecx], edx
.text$mn:00009A2E
.text$mn:00009A2E loc_9A2E:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+79j
.text$mn:00009A2E                 jmp     short loc_99E2
.text$mn:00009A30 ; ---------------------------------------------------------------------------
.text$mn:00009A30
.text$mn:00009A30 loc_9A30:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+48j
.text$mn:00009A30                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+50j
.text$mn:00009A30                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009A37                 lea     ecx, [ebp+var_18] ; this
.text$mn:00009A3A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00009A3F                 mov     ecx, [ebp+var_C]
.text$mn:00009A42                 mov     large fs:0, ecx
.text$mn:00009A49                 pop     ecx
.text$mn:00009A4A                 mov     esp, ebp
.text$mn:00009A4C                 pop     ebp
.text$mn:00009A4D                 retn    8
.text$mn:00009A4D ?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z endp
.text$mn:00009A4D
.text$mn:00009A4D _text$mn        ends
.text$mn:00009A4D
.text$x:00009A50 ; ===========================================================================
.text$x:00009A50
.text$x:00009A50 ; Segment type: Pure code
.text$x:00009A50 ; Segment permissions: Read/Execute
.text$x:00009A50 _text$x         segment para public 'CODE' use32
.text$x:00009A50                 assume cs:_text$x
.text$x:00009A50                 ;org 9A50h
.text$x:00009A50 ; COMDAT (pick associative to section at 9998)
.text$x:00009A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009A50
.text$x:00009A50 ; =============== S U B R O U T I N E =======================================
.text$x:00009A50
.text$x:00009A50
.text$x:00009A50 __unwindfunclet$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z$0 proc near
.text$x:00009A50                                         ; DATA XREF: .xdata$x:0000DC08o
.text$x:00009A50                 lea     ecx, [ebp-18h]  ; this
.text$x:00009A53                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009A53 __unwindfunclet$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z$0 endp
.text$x:00009A53
.text$x:00009A58
.text$x:00009A58 ; =============== S U B R O U T I N E =======================================
.text$x:00009A58
.text$x:00009A58
.text$x:00009A58 __ehhandler$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z proc near
.text$x:00009A58                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)+5o
.text$x:00009A58
.text$x:00009A58 arg_4           = dword ptr  8
.text$x:00009A58
.text$x:00009A58                 mov     edx, [esp+arg_4]
.text$x:00009A5C                 lea     eax, [edx+0Ch]
.text$x:00009A5F                 mov     ecx, [edx-10h]
.text$x:00009A62                 xor     ecx, eax
.text$x:00009A64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009A69                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z
.text$x:00009A6E                 jmp     ___CxxFrameHandler3
.text$x:00009A6E __ehhandler$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z endp
.text$x:00009A6E
.text$x:00009A6E ; ---------------------------------------------------------------------------
.text$x:00009A73                 align 4
.text$x:00009A73 _text$x         ends
.text$x:00009A73
.text$mn:00009A74 ; ===========================================================================
.text$mn:00009A74
.text$mn:00009A74 ; Segment type: Pure code
.text$mn:00009A74 ; Segment permissions: Read/Execute
.text$mn:00009A74 _text$mn        segment para public 'CODE' use32
.text$mn:00009A74                 assume cs:_text$mn
.text$mn:00009A74                 ;org 9A74h
.text$mn:00009A74 ; COMDAT (pick any)
.text$mn:00009A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A74
.text$mn:00009A74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A74
.text$mn:00009A74 ; Attributes: bp-based frame
.text$mn:00009A74
.text$mn:00009A74 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:00009A74                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00009A74 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00009A74                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+B1p
.text$mn:00009A74
.text$mn:00009A74 var_18          = byte ptr -18h
.text$mn:00009A74 var_14          = dword ptr -14h
.text$mn:00009A74 var_10          = dword ptr -10h
.text$mn:00009A74 var_C           = dword ptr -0Ch
.text$mn:00009A74 var_4           = dword ptr -4
.text$mn:00009A74 arg_0           = dword ptr  8
.text$mn:00009A74 arg_4           = dword ptr  0Ch
.text$mn:00009A74
.text$mn:00009A74                 push    ebp
.text$mn:00009A75                 mov     ebp, esp
.text$mn:00009A77                 push    0FFFFFFFFh
.text$mn:00009A79                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00009A7E                 mov     eax, large fs:0
.text$mn:00009A84                 push    eax
.text$mn:00009A85                 sub     esp, 0Ch
.text$mn:00009A88                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009A8D                 xor     eax, ebp
.text$mn:00009A8F                 push    eax
.text$mn:00009A90                 lea     eax, [ebp+var_C]
.text$mn:00009A93                 mov     large fs:0, eax
.text$mn:00009A99                 mov     [ebp+var_14], ecx
.text$mn:00009A9C                 push    3               ; int
.text$mn:00009A9E                 lea     ecx, [ebp+var_18] ; this
.text$mn:00009AA1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00009AA6                 mov     [ebp+var_4], 0
.text$mn:00009AAD                 mov     ecx, [ebp+var_14] ; this
.text$mn:00009AB0                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:00009AB5                 mov     [ebp+var_10], eax
.text$mn:00009AB8                 cmp     [ebp+var_10], 0
.text$mn:00009ABC                 jz      short loc_9B0C
.text$mn:00009ABE
.text$mn:00009ABE loc_9ABE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_9B0Aj
.text$mn:00009ABE                 mov     eax, [ebp+var_10]
.text$mn:00009AC1                 cmp     dword ptr [eax], 0
.text$mn:00009AC4                 jz      short loc_9B0C
.text$mn:00009AC6                 mov     ecx, [ebp+var_10]
.text$mn:00009AC9                 mov     edx, [ecx]
.text$mn:00009ACB                 mov     eax, [edx+8]
.text$mn:00009ACE                 cmp     eax, [ebp+arg_0]
.text$mn:00009AD1                 jb      short loc_9AE0
.text$mn:00009AD3                 mov     ecx, [ebp+var_10]
.text$mn:00009AD6                 mov     edx, [ecx]
.text$mn:00009AD8                 mov     eax, [ebp+arg_4]
.text$mn:00009ADB                 cmp     eax, [edx+8]
.text$mn:00009ADE                 jnb     short loc_9AEF
.text$mn:00009AE0
.text$mn:00009AE0 loc_9AE0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:00009AE0                 mov     ecx, [ebp+var_10]
.text$mn:00009AE3                 mov     ecx, [ecx]      ; this
.text$mn:00009AE5                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00009AEA                 mov     [ebp+var_10], eax
.text$mn:00009AED                 jmp     short loc_9B0A
.text$mn:00009AEF ; ---------------------------------------------------------------------------
.text$mn:00009AEF
.text$mn:00009AEF loc_9AEF:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:00009AEF                 mov     edx, [ebp+var_10]
.text$mn:00009AF2                 mov     ecx, [edx]      ; this
.text$mn:00009AF4                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00009AF9                 mov     eax, [ebp+var_10]
.text$mn:00009AFC                 mov     ecx, [eax]      ; this
.text$mn:00009AFE                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00009B03                 mov     ecx, [ebp+var_10]
.text$mn:00009B06                 mov     edx, [eax]
.text$mn:00009B08                 mov     [ecx], edx
.text$mn:00009B0A
.text$mn:00009B0A loc_9B0A:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:00009B0A                 jmp     short loc_9ABE
.text$mn:00009B0C ; ---------------------------------------------------------------------------
.text$mn:00009B0C
.text$mn:00009B0C loc_9B0C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:00009B0C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:00009B0C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009B13                 lea     ecx, [ebp+var_18] ; this
.text$mn:00009B16                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00009B1B                 mov     ecx, [ebp+var_C]
.text$mn:00009B1E                 mov     large fs:0, ecx
.text$mn:00009B25                 pop     ecx
.text$mn:00009B26                 mov     esp, ebp
.text$mn:00009B28                 pop     ebp
.text$mn:00009B29                 retn    8
.text$mn:00009B29 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:00009B29
.text$mn:00009B29 _text$mn        ends
.text$mn:00009B29
.text$x:00009B2C ; ===========================================================================
.text$x:00009B2C
.text$x:00009B2C ; Segment type: Pure code
.text$x:00009B2C ; Segment permissions: Read/Execute
.text$x:00009B2C _text$x         segment para public 'CODE' use32
.text$x:00009B2C                 assume cs:_text$x
.text$x:00009B2C                 ;org 9B2Ch
.text$x:00009B2C ; COMDAT (pick associative to section at 9A74)
.text$x:00009B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009B2C
.text$x:00009B2C ; =============== S U B R O U T I N E =======================================
.text$x:00009B2C
.text$x:00009B2C
.text$x:00009B2C __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:00009B2C                                         ; DATA XREF: .xdata$x:0000D49Co
.text$x:00009B2C                 lea     ecx, [ebp-18h]  ; this
.text$x:00009B2F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009B2F __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:00009B2F
.text$x:00009B34
.text$x:00009B34 ; =============== S U B R O U T I N E =======================================
.text$x:00009B34
.text$x:00009B34
.text$x:00009B34 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:00009B34                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00009B34
.text$x:00009B34 arg_4           = dword ptr  8
.text$x:00009B34
.text$x:00009B34                 mov     edx, [esp+arg_4]
.text$x:00009B38                 lea     eax, [edx+0Ch]
.text$x:00009B3B                 mov     ecx, [edx-10h]
.text$x:00009B3E                 xor     ecx, eax
.text$x:00009B40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009B45                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:00009B4A                 jmp     ___CxxFrameHandler3
.text$x:00009B4A __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:00009B4A
.text$x:00009B4A ; ---------------------------------------------------------------------------
.text$x:00009B4F                 align 10h
.text$x:00009B4F _text$x         ends
.text$x:00009B4F
.text$mn:00009B50 ; ===========================================================================
.text$mn:00009B50
.text$mn:00009B50 ; Segment type: Pure code
.text$mn:00009B50 ; Segment permissions: Read/Execute
.text$mn:00009B50 _text$mn        segment para public 'CODE' use32
.text$mn:00009B50                 assume cs:_text$mn
.text$mn:00009B50                 ;org 9B50h
.text$mn:00009B50 ; COMDAT (pick any)
.text$mn:00009B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B50
.text$mn:00009B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B50
.text$mn:00009B50 ; Attributes: bp-based frame
.text$mn:00009B50
.text$mn:00009B50 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00009B50                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00009B50 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:00009B50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:00009B50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:00009B50
.text$mn:00009B50 var_14          = dword ptr -14h
.text$mn:00009B50 var_10          = dword ptr -10h
.text$mn:00009B50 var_C           = dword ptr -0Ch
.text$mn:00009B50 var_4           = dword ptr -4
.text$mn:00009B50 arg_0           = byte ptr  8
.text$mn:00009B50 arg_8           = dword ptr  10h
.text$mn:00009B50 arg_C           = byte ptr  14h
.text$mn:00009B50
.text$mn:00009B50                 push    ebp
.text$mn:00009B51                 mov     ebp, esp
.text$mn:00009B53                 push    0FFFFFFFFh
.text$mn:00009B55                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00009B5A                 mov     eax, large fs:0
.text$mn:00009B60                 push    eax
.text$mn:00009B61                 sub     esp, 8
.text$mn:00009B64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009B69                 xor     eax, ebp
.text$mn:00009B6B                 push    eax
.text$mn:00009B6C                 lea     eax, [ebp+var_C]
.text$mn:00009B6F                 mov     large fs:0, eax
.text$mn:00009B75                 mov     [ebp+var_4], 1
.text$mn:00009B7C                 cmp     [ebp+arg_8], 0
.text$mn:00009B80                 jnz     short loc_9B8B
.text$mn:00009B82                 mov     [ebp+var_10], 0
.text$mn:00009B89                 jmp     short loc_9B9A
.text$mn:00009B8B ; ---------------------------------------------------------------------------
.text$mn:00009B8B
.text$mn:00009B8B loc_9B8B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:00009B8B                 lea     eax, [ebp+arg_C]
.text$mn:00009B8E                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009B8F                 lea     ecx, [ebp+arg_0]
.text$mn:00009B92                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009B97                 mov     [ebp+var_10], eax
.text$mn:00009B9A
.text$mn:00009B9A loc_9B9A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:00009B9A                 mov     ecx, [ebp+var_10]
.text$mn:00009B9D                 mov     [ebp+var_14], ecx
.text$mn:00009BA0                 mov     byte ptr [ebp+var_4], 0
.text$mn:00009BA4                 lea     ecx, [ebp+arg_0]
.text$mn:00009BA7                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009BAC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009BB3                 lea     ecx, [ebp+arg_C]
.text$mn:00009BB6                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009BBB                 mov     eax, [ebp+var_14]
.text$mn:00009BBE                 mov     ecx, [ebp+var_C]
.text$mn:00009BC1                 mov     large fs:0, ecx
.text$mn:00009BC8                 pop     ecx
.text$mn:00009BC9                 mov     esp, ebp
.text$mn:00009BCB                 pop     ebp
.text$mn:00009BCC                 retn
.text$mn:00009BCC ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:00009BCC
.text$mn:00009BCC ; ---------------------------------------------------------------------------
.text$mn:00009BCD                 align 10h
.text$mn:00009BCD _text$mn        ends
.text$mn:00009BCD
.text$x:00009BD0 ; ===========================================================================
.text$x:00009BD0
.text$x:00009BD0 ; Segment type: Pure code
.text$x:00009BD0 ; Segment permissions: Read/Execute
.text$x:00009BD0 _text$x         segment para public 'CODE' use32
.text$x:00009BD0                 assume cs:_text$x
.text$x:00009BD0                 ;org 9BD0h
.text$x:00009BD0 ; COMDAT (pick associative to section at 9B50)
.text$x:00009BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009BD0
.text$x:00009BD0 ; =============== S U B R O U T I N E =======================================
.text$x:00009BD0
.text$x:00009BD0
.text$x:00009BD0 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:00009BD0                                         ; DATA XREF: .xdata$x:0000D1C8o
.text$x:00009BD0                 lea     ecx, [ebp+14h]
.text$x:00009BD3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009BD3 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:00009BD3
.text$x:00009BD8
.text$x:00009BD8 ; =============== S U B R O U T I N E =======================================
.text$x:00009BD8
.text$x:00009BD8
.text$x:00009BD8 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:00009BD8                                         ; DATA XREF: .xdata$x:0000D1D0o
.text$x:00009BD8                 lea     ecx, [ebp+8]
.text$x:00009BDB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009BDB __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:00009BDB
.text$x:00009BE0
.text$x:00009BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00009BE0
.text$x:00009BE0
.text$x:00009BE0 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:00009BE0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00009BE0
.text$x:00009BE0 arg_4           = dword ptr  8
.text$x:00009BE0
.text$x:00009BE0                 mov     edx, [esp+arg_4]
.text$x:00009BE4                 lea     eax, [edx+0Ch]
.text$x:00009BE7                 mov     ecx, [edx-0Ch]
.text$x:00009BEA                 xor     ecx, eax
.text$x:00009BEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009BF1                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:00009BF6                 jmp     ___CxxFrameHandler3
.text$x:00009BF6 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:00009BF6
.text$x:00009BF6 ; ---------------------------------------------------------------------------
.text$x:00009BFB                 align 4
.text$x:00009BFB _text$x         ends
.text$x:00009BFB
.text$mn:00009BFC ; ===========================================================================
.text$mn:00009BFC
.text$mn:00009BFC ; Segment type: Pure code
.text$mn:00009BFC ; Segment permissions: Read/Execute
.text$mn:00009BFC _text$mn        segment para public 'CODE' use32
.text$mn:00009BFC                 assume cs:_text$mn
.text$mn:00009BFC                 ;org 9BFCh
.text$mn:00009BFC ; COMDAT (pick any)
.text$mn:00009BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BFC
.text$mn:00009BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009BFC
.text$mn:00009BFC ; Attributes: bp-based frame
.text$mn:00009BFC
.text$mn:00009BFC ; protected: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Reallocate(unsigned int)
.text$mn:00009BFC                 public ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009BFC ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z proc near
.text$mn:00009BFC                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+4Ep
.text$mn:00009BFC
.text$mn:00009BFC var_20          = dword ptr -20h
.text$mn:00009BFC var_1C          = dword ptr -1Ch
.text$mn:00009BFC var_18          = dword ptr -18h
.text$mn:00009BFC var_13          = byte ptr -13h
.text$mn:00009BFC var_11          = byte ptr -11h
.text$mn:00009BFC var_10          = dword ptr -10h
.text$mn:00009BFC var_C           = dword ptr -0Ch
.text$mn:00009BFC var_4           = dword ptr -4
.text$mn:00009BFC arg_0           = dword ptr  8
.text$mn:00009BFC
.text$mn:00009BFC ; FUNCTION CHUNK AT .text$mn:00009C92 SIZE 00000009 BYTES
.text$mn:00009BFC ; FUNCTION CHUNK AT .text$mn:00009CA2 SIZE 00000098 BYTES
.text$mn:00009BFC
.text$mn:00009BFC                 push    ebp
.text$mn:00009BFD                 mov     ebp, esp
.text$mn:00009BFF                 push    0FFFFFFFFh
.text$mn:00009C01                 push    offset __ehhandler$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009C06                 mov     eax, large fs:0
.text$mn:00009C0C                 push    eax
.text$mn:00009C0D                 push    ecx
.text$mn:00009C0E                 sub     esp, 10h
.text$mn:00009C11                 push    ebx
.text$mn:00009C12                 push    esi
.text$mn:00009C13                 push    edi
.text$mn:00009C14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009C19                 xor     eax, ebp
.text$mn:00009C1B                 push    eax
.text$mn:00009C1C                 lea     eax, [ebp+var_C]
.text$mn:00009C1F                 mov     large fs:0, eax
.text$mn:00009C25                 mov     [ebp+var_10], esp
.text$mn:00009C28                 mov     [ebp+var_18], ecx
.text$mn:00009C2B                 mov     eax, [ebp+arg_0]
.text$mn:00009C2E                 push    eax
.text$mn:00009C2F                 lea     ecx, [ebp+var_11]
.text$mn:00009C32                 push    ecx
.text$mn:00009C33                 mov     ecx, [ebp+var_18]
.text$mn:00009C36                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:00009C3B                 mov     ecx, eax
.text$mn:00009C3D                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEPAUTreeParams@@I@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::allocate(uint)
.text$mn:00009C42                 mov     [ebp+var_1C], eax
.text$mn:00009C45                 mov     [ebp+var_4], 0
.text$mn:00009C4C                 mov     edx, [ebp+var_1C]
.text$mn:00009C4F                 push    edx
.text$mn:00009C50                 mov     eax, [ebp+var_18]
.text$mn:00009C53                 mov     ecx, [eax+8]
.text$mn:00009C56                 push    ecx
.text$mn:00009C57                 mov     edx, [ebp+var_18]
.text$mn:00009C5A                 mov     eax, [edx+4]
.text$mn:00009C5D                 push    eax
.text$mn:00009C5E                 mov     ecx, [ebp+var_18]
.text$mn:00009C61                 call    ??$_Umove@PAUTreeParams@@@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEPAUTreeParams@@PAU2@00@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Umove<TreeParams *>(TreeParams *,TreeParams *,TreeParams *)
.text$mn:00009C66                 jmp     short loc_9C92
.text$mn:00009C66 ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z endp
.text$mn:00009C66
.text$mn:00009C68
.text$mn:00009C68 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C68
.text$mn:00009C68 ; Attributes: noreturn
.text$mn:00009C68
.text$mn:00009C68 __catch$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:00009C68                                         ; DATA XREF: .xdata$x:0000DBB8o
.text$mn:00009C68                 mov     ecx, [ebp+8]
.text$mn:00009C6B                 push    ecx             ; int
.text$mn:00009C6C                 mov     edx, [ebp-1Ch]
.text$mn:00009C6F                 push    edx             ; void *
.text$mn:00009C70                 lea     eax, [ebp-12h]
.text$mn:00009C73                 push    eax
.text$mn:00009C74                 mov     ecx, [ebp-18h]
.text$mn:00009C77                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:00009C7C                 mov     ecx, eax
.text$mn:00009C7E                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@I@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::deallocate(TreeParams *,uint)
.text$mn:00009C83                 push    0
.text$mn:00009C85                 push    0
.text$mn:00009C87                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00009C87 __catch$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:00009C87
.text$mn:00009C8C ; ---------------------------------------------------------------------------
.text$mn:00009C8C                 mov     eax, offset $LN8_0
.text$mn:00009C91                 retn
.text$mn:00009C92 ; ---------------------------------------------------------------------------
.text$mn:00009C92 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009C92
.text$mn:00009C92 loc_9C92:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+6Aj
.text$mn:00009C92                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009C99                 jmp     short loc_9CA2
.text$mn:00009C99 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009C9B
.text$mn:00009C9B ; =============== S U B R O U T I N E =======================================
.text$mn:00009C9B
.text$mn:00009C9B
.text$mn:00009C9B $LN8_0          proc near               ; DATA XREF: .text$mn:00009C8Co
.text$mn:00009C9B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00009C9B $LN8_0          endp ; sp-analysis failed
.text$mn:00009C9B
.text$mn:00009CA2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009CA2
.text$mn:00009CA2 loc_9CA2:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+9Dj
.text$mn:00009CA2                 mov     ecx, [ebp+var_18]
.text$mn:00009CA5                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:00009CAA                 mov     [ebp+var_20], eax
.text$mn:00009CAD                 mov     ecx, [ebp+var_18]
.text$mn:00009CB0                 cmp     dword ptr [ecx+4], 0
.text$mn:00009CB4                 jz      short loc_9CFB
.text$mn:00009CB6                 mov     edx, [ebp+var_18]
.text$mn:00009CB9                 mov     eax, [edx+8]
.text$mn:00009CBC                 push    eax
.text$mn:00009CBD                 mov     ecx, [ebp+var_18]
.text$mn:00009CC0                 mov     edx, [ecx+4]
.text$mn:00009CC3                 push    edx
.text$mn:00009CC4                 mov     ecx, [ebp+var_18]
.text$mn:00009CC7                 call    ?_Destroy@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXPAUTreeParams@@0@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Destroy(TreeParams *,TreeParams *)
.text$mn:00009CCC                 mov     eax, [ebp+var_18]
.text$mn:00009CCF                 mov     ecx, [ebp+var_18]
.text$mn:00009CD2                 mov     eax, [eax+0Ch]
.text$mn:00009CD5                 sub     eax, [ecx+4]
.text$mn:00009CD8                 cdq
.text$mn:00009CD9                 mov     ecx, 6Ch ; 'l'
.text$mn:00009CDE                 idiv    ecx
.text$mn:00009CE0                 push    eax             ; int
.text$mn:00009CE1                 mov     edx, [ebp+var_18]
.text$mn:00009CE4                 mov     eax, [edx+4]
.text$mn:00009CE7                 push    eax             ; void *
.text$mn:00009CE8                 lea     ecx, [ebp+var_13]
.text$mn:00009CEB                 push    ecx
.text$mn:00009CEC                 mov     ecx, [ebp+var_18]
.text$mn:00009CEF                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:00009CF4                 mov     ecx, eax
.text$mn:00009CF6                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@I@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::deallocate(TreeParams *,uint)
.text$mn:00009CFB
.text$mn:00009CFB loc_9CFB:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+B8j
.text$mn:00009CFB                 mov     ecx, [ebp+var_18] ; this
.text$mn:00009CFE                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009D03                 imul    edx, [ebp+arg_0], 6Ch
.text$mn:00009D07                 add     edx, [ebp+var_1C]
.text$mn:00009D0A                 mov     eax, [ebp+var_18]
.text$mn:00009D0D                 mov     [eax+0Ch], edx
.text$mn:00009D10                 imul    ecx, [ebp+var_20], 6Ch
.text$mn:00009D14                 add     ecx, [ebp+var_1C]
.text$mn:00009D17                 mov     edx, [ebp+var_18]
.text$mn:00009D1A                 mov     [edx+8], ecx
.text$mn:00009D1D                 mov     eax, [ebp+var_18]
.text$mn:00009D20                 mov     ecx, [ebp+var_1C]
.text$mn:00009D23                 mov     [eax+4], ecx
.text$mn:00009D26                 mov     ecx, [ebp+var_C]
.text$mn:00009D29                 mov     large fs:0, ecx
.text$mn:00009D30                 pop     ecx
.text$mn:00009D31                 pop     edi
.text$mn:00009D32                 pop     esi
.text$mn:00009D33                 pop     ebx
.text$mn:00009D34                 mov     esp, ebp
.text$mn:00009D36                 pop     ebp
.text$mn:00009D37                 retn    4
.text$mn:00009D37 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009D37 ; ---------------------------------------------------------------------------
.text$mn:00009D3A                 align 4
.text$mn:00009D3A _text$mn        ends
.text$mn:00009D3A
.text$x:00009D3C ; ===========================================================================
.text$x:00009D3C
.text$x:00009D3C ; Segment type: Pure code
.text$x:00009D3C ; Segment permissions: Read/Execute
.text$x:00009D3C _text$x         segment para public 'CODE' use32
.text$x:00009D3C                 assume cs:_text$x
.text$x:00009D3C                 ;org 9D3Ch
.text$x:00009D3C ; COMDAT (pick associative to section at 9BFC)
.text$x:00009D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009D3C
.text$x:00009D3C ; =============== S U B R O U T I N E =======================================
.text$x:00009D3C
.text$x:00009D3C
.text$x:00009D3C __ehhandler$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z proc near
.text$x:00009D3C                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+5o
.text$x:00009D3C
.text$x:00009D3C arg_4           = dword ptr  8
.text$x:00009D3C
.text$x:00009D3C                 mov     edx, [esp+arg_4]
.text$x:00009D40                 lea     eax, [edx+0Ch]
.text$x:00009D43                 mov     ecx, [edx-24h]
.text$x:00009D46                 xor     ecx, eax
.text$x:00009D48                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009D4D                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$x:00009D52                 jmp     ___CxxFrameHandler3
.text$x:00009D52 __ehhandler$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z endp
.text$x:00009D52
.text$x:00009D52 ; ---------------------------------------------------------------------------
.text$x:00009D57                 align 4
.text$x:00009D57 _text$x         ends
.text$x:00009D57
.text$mn:00009D58 ; ===========================================================================
.text$mn:00009D58
.text$mn:00009D58 ; Segment type: Pure code
.text$mn:00009D58 ; Segment permissions: Read/Execute
.text$mn:00009D58 _text$mn        segment para public 'CODE' use32
.text$mn:00009D58                 assume cs:_text$mn
.text$mn:00009D58                 ;org 9D58h
.text$mn:00009D58 ; COMDAT (pick any)
.text$mn:00009D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D58
.text$mn:00009D58 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D58
.text$mn:00009D58 ; Attributes: bp-based frame
.text$mn:00009D58
.text$mn:00009D58 ; protected: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Reserve(unsigned int)
.text$mn:00009D58                 public ?_Reserve@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.text$mn:00009D58 ?_Reserve@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z proc near
.text$mn:00009D58                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+59p
.text$mn:00009D58                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+BDp
.text$mn:00009D58
.text$mn:00009D58 var_4           = dword ptr -4
.text$mn:00009D58 arg_0           = dword ptr  8
.text$mn:00009D58
.text$mn:00009D58                 push    ebp
.text$mn:00009D59                 mov     ebp, esp
.text$mn:00009D5B                 push    ecx
.text$mn:00009D5C                 push    esi
.text$mn:00009D5D                 mov     [ebp+var_4], ecx
.text$mn:00009D60                 mov     ecx, [ebp+var_4]
.text$mn:00009D63                 call    ?_Unused_capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::_Unused_capacity(void)
.text$mn:00009D68                 cmp     eax, [ebp+arg_0]
.text$mn:00009D6B                 jnb     short loc_9DAB
.text$mn:00009D6D                 mov     ecx, [ebp+var_4]
.text$mn:00009D70                 call    ?max_size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::max_size(void)
.text$mn:00009D75                 mov     esi, eax
.text$mn:00009D77                 mov     ecx, [ebp+var_4]
.text$mn:00009D7A                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:00009D7F                 sub     esi, eax
.text$mn:00009D81                 cmp     esi, [ebp+arg_0]
.text$mn:00009D84                 jnb     short loc_9D8E
.text$mn:00009D86                 mov     ecx, [ebp+var_4]
.text$mn:00009D89                 call    ?_Xlen@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::_Xlen(void)
.text$mn:00009D8E
.text$mn:00009D8E loc_9D8E:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+2Cj
.text$mn:00009D8E                 mov     ecx, [ebp+var_4]
.text$mn:00009D91                 call    ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::vector<TreeParams,std::allocator<TreeParams>>::size(void)
.text$mn:00009D96                 add     eax, [ebp+arg_0]
.text$mn:00009D99                 push    eax
.text$mn:00009D9A                 mov     ecx, [ebp+var_4]
.text$mn:00009D9D                 call    ?_Grow_to@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEII@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)
.text$mn:00009DA2                 push    eax
.text$mn:00009DA3                 mov     ecx, [ebp+var_4]
.text$mn:00009DA6                 call    ?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)
.text$mn:00009DAB
.text$mn:00009DAB loc_9DAB:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+13j
.text$mn:00009DAB                 pop     esi
.text$mn:00009DAC                 mov     esp, ebp
.text$mn:00009DAE                 pop     ebp
.text$mn:00009DAF                 retn    4
.text$mn:00009DAF ?_Reserve@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z endp
.text$mn:00009DAF
.text$mn:00009DAF ; ---------------------------------------------------------------------------
.text$mn:00009DB2                 align 4
.text$mn:00009DB2 _text$mn        ends
.text$mn:00009DB2
.text$mn:00009DB4 ; ===========================================================================
.text$mn:00009DB4
.text$mn:00009DB4 ; Segment type: Pure code
.text$mn:00009DB4 ; Segment permissions: Read/Execute
.text$mn:00009DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009DB4                 assume cs:_text$mn
.text$mn:00009DB4                 ;org 9DB4h
.text$mn:00009DB4 ; COMDAT (pick any)
.text$mn:00009DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DB4
.text$mn:00009DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DB4
.text$mn:00009DB4 ; Attributes: bp-based frame
.text$mn:00009DB4
.text$mn:00009DB4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00009DB4                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00009DB4 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00009DB4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:00009DB4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:00009DB4
.text$mn:00009DB4 var_C           = dword ptr -0Ch
.text$mn:00009DB4 var_8           = dword ptr -8
.text$mn:00009DB4 var_2           = byte ptr -2
.text$mn:00009DB4 var_1           = byte ptr -1
.text$mn:00009DB4 arg_0           = byte ptr  8
.text$mn:00009DB4 Size            = dword ptr  0Ch
.text$mn:00009DB4
.text$mn:00009DB4                 push    ebp
.text$mn:00009DB5                 mov     ebp, esp
.text$mn:00009DB7                 sub     esp, 0Ch
.text$mn:00009DBA                 mov     [ebp+var_8], ecx
.text$mn:00009DBD                 movzx   eax, [ebp+arg_0]
.text$mn:00009DC1                 test    eax, eax
.text$mn:00009DC3                 jnz     short loc_9DC7
.text$mn:00009DC5                 jmp     short loc_9E3A
.text$mn:00009DC7 ; ---------------------------------------------------------------------------
.text$mn:00009DC7
.text$mn:00009DC7 loc_9DC7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00009DC7                 mov     ecx, [ebp+var_8]
.text$mn:00009DCA                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00009DCE                 jb      short loc_9E3A
.text$mn:00009DD0                 mov     edx, [ebp+var_8]
.text$mn:00009DD3                 mov     eax, [edx+4]
.text$mn:00009DD6                 mov     [ebp+var_C], eax
.text$mn:00009DD9                 mov     ecx, [ebp+var_8]
.text$mn:00009DDC                 add     ecx, 4
.text$mn:00009DDF                 push    ecx
.text$mn:00009DE0                 lea     edx, [ebp+var_1]
.text$mn:00009DE3                 push    edx
.text$mn:00009DE4                 mov     ecx, [ebp+var_8]
.text$mn:00009DE7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00009DEC                 mov     ecx, eax
.text$mn:00009DEE                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00009DF3                 cmp     [ebp+Size], 0
.text$mn:00009DF7                 jbe     short loc_9E19
.text$mn:00009DF9                 mov     eax, [ebp+Size]
.text$mn:00009DFC                 push    eax             ; Size
.text$mn:00009DFD                 mov     ecx, [ebp+var_C]
.text$mn:00009E00                 push    ecx
.text$mn:00009E01                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00009E06                 add     esp, 4
.text$mn:00009E09                 push    eax             ; Src
.text$mn:00009E0A                 mov     edx, [ebp+var_8]
.text$mn:00009E0D                 add     edx, 4
.text$mn:00009E10                 push    edx             ; Dst
.text$mn:00009E11                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009E16                 add     esp, 0Ch
.text$mn:00009E19
.text$mn:00009E19 loc_9E19:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00009E19                 mov     eax, [ebp+var_8]
.text$mn:00009E1C                 mov     ecx, [eax+18h]
.text$mn:00009E1F                 add     ecx, 1
.text$mn:00009E22                 push    ecx             ; int
.text$mn:00009E23                 mov     edx, [ebp+var_C]
.text$mn:00009E26                 push    edx             ; void *
.text$mn:00009E27                 lea     eax, [ebp+var_2]
.text$mn:00009E2A                 push    eax
.text$mn:00009E2B                 mov     ecx, [ebp+var_8]
.text$mn:00009E2E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00009E33                 mov     ecx, eax
.text$mn:00009E35                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00009E3A
.text$mn:00009E3A loc_9E3A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00009E3A                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00009E3A                 mov     ecx, [ebp+var_8]
.text$mn:00009E3D                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00009E44                 mov     edx, [ebp+Size]
.text$mn:00009E47                 push    edx
.text$mn:00009E48                 mov     ecx, [ebp+var_8]
.text$mn:00009E4B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009E50                 mov     esp, ebp
.text$mn:00009E52                 pop     ebp
.text$mn:00009E53                 retn    8
.text$mn:00009E53 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00009E53
.text$mn:00009E53 ; ---------------------------------------------------------------------------
.text$mn:00009E56                 align 4
.text$mn:00009E56 _text$mn        ends
.text$mn:00009E56
.text$mn:00009E58 ; ===========================================================================
.text$mn:00009E58
.text$mn:00009E58 ; Segment type: Pure code
.text$mn:00009E58 ; Segment permissions: Read/Execute
.text$mn:00009E58 _text$mn        segment para public 'CODE' use32
.text$mn:00009E58                 assume cs:_text$mn
.text$mn:00009E58                 ;org 9E58h
.text$mn:00009E58 ; COMDAT (pick any)
.text$mn:00009E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E58
.text$mn:00009E58 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E58
.text$mn:00009E58 ; Attributes: bp-based frame
.text$mn:00009E58
.text$mn:00009E58 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00009E58                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00009E58 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00009E58                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p
.text$mn:00009E58                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p ...
.text$mn:00009E58
.text$mn:00009E58 var_C           = dword ptr -0Ch
.text$mn:00009E58 var_8           = dword ptr -8
.text$mn:00009E58 var_2           = byte ptr -2
.text$mn:00009E58 var_1           = byte ptr -1
.text$mn:00009E58 arg_0           = byte ptr  8
.text$mn:00009E58 arg_4           = dword ptr  0Ch
.text$mn:00009E58
.text$mn:00009E58                 push    ebp
.text$mn:00009E59                 mov     ebp, esp
.text$mn:00009E5B                 sub     esp, 0Ch
.text$mn:00009E5E                 mov     [ebp+var_8], ecx
.text$mn:00009E61                 movzx   eax, [ebp+arg_0]
.text$mn:00009E65                 test    eax, eax
.text$mn:00009E67                 jnz     short loc_9E6B
.text$mn:00009E69                 jmp     short loc_9EDE
.text$mn:00009E6B ; ---------------------------------------------------------------------------
.text$mn:00009E6B
.text$mn:00009E6B loc_9E6B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00009E6B                 mov     ecx, [ebp+var_8]
.text$mn:00009E6E                 cmp     dword ptr [ecx+18h], 8
.text$mn:00009E72                 jb      short loc_9EDE
.text$mn:00009E74                 mov     edx, [ebp+var_8]
.text$mn:00009E77                 mov     eax, [edx+4]
.text$mn:00009E7A                 mov     [ebp+var_C], eax
.text$mn:00009E7D                 mov     ecx, [ebp+var_8]
.text$mn:00009E80                 add     ecx, 4
.text$mn:00009E83                 push    ecx
.text$mn:00009E84                 lea     edx, [ebp+var_1]
.text$mn:00009E87                 push    edx
.text$mn:00009E88                 mov     ecx, [ebp+var_8]
.text$mn:00009E8B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009E90                 mov     ecx, eax
.text$mn:00009E92                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00009E97                 cmp     [ebp+arg_4], 0
.text$mn:00009E9B                 jbe     short loc_9EBD
.text$mn:00009E9D                 mov     eax, [ebp+arg_4]
.text$mn:00009EA0                 push    eax             ; int
.text$mn:00009EA1                 mov     ecx, [ebp+var_C]
.text$mn:00009EA4                 push    ecx
.text$mn:00009EA5                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00009EAA                 add     esp, 4
.text$mn:00009EAD                 push    eax             ; Src
.text$mn:00009EAE                 mov     edx, [ebp+var_8]
.text$mn:00009EB1                 add     edx, 4
.text$mn:00009EB4                 push    edx             ; Dst
.text$mn:00009EB5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009EBA                 add     esp, 0Ch
.text$mn:00009EBD
.text$mn:00009EBD loc_9EBD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00009EBD                 mov     eax, [ebp+var_8]
.text$mn:00009EC0                 mov     ecx, [eax+18h]
.text$mn:00009EC3                 add     ecx, 1
.text$mn:00009EC6                 push    ecx             ; int
.text$mn:00009EC7                 mov     edx, [ebp+var_C]
.text$mn:00009ECA                 push    edx             ; void *
.text$mn:00009ECB                 lea     eax, [ebp+var_2]
.text$mn:00009ECE                 push    eax
.text$mn:00009ECF                 mov     ecx, [ebp+var_8]
.text$mn:00009ED2                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009ED7                 mov     ecx, eax
.text$mn:00009ED9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00009EDE
.text$mn:00009EDE loc_9EDE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00009EDE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00009EDE                 mov     ecx, [ebp+var_8]
.text$mn:00009EE1                 mov     dword ptr [ecx+18h], 7
.text$mn:00009EE8                 mov     edx, [ebp+arg_4]
.text$mn:00009EEB                 push    edx
.text$mn:00009EEC                 mov     ecx, [ebp+var_8]
.text$mn:00009EEF                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009EF4                 mov     esp, ebp
.text$mn:00009EF6                 pop     ebp
.text$mn:00009EF7                 retn    8
.text$mn:00009EF7 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00009EF7
.text$mn:00009EF7 ; ---------------------------------------------------------------------------
.text$mn:00009EFA                 align 4
.text$mn:00009EFA _text$mn        ends
.text$mn:00009EFA
.text$mn:00009EFC ; ===========================================================================
.text$mn:00009EFC
.text$mn:00009EFC ; Segment type: Pure code
.text$mn:00009EFC ; Segment permissions: Read/Execute
.text$mn:00009EFC _text$mn        segment para public 'CODE' use32
.text$mn:00009EFC                 assume cs:_text$mn
.text$mn:00009EFC                 ;org 9EFCh
.text$mn:00009EFC ; COMDAT (pick any)
.text$mn:00009EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EFC
.text$mn:00009EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009EFC
.text$mn:00009EFC ; Attributes: bp-based frame
.text$mn:00009EFC
.text$mn:00009EFC ; protected: void __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Tidy(void)
.text$mn:00009EFC                 public ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ
.text$mn:00009EFC ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ proc near
.text$mn:00009EFC                                         ; CODE XREF: __catch$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$0+3p
.text$mn:00009EFC                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::~vector<TreeStateNode,std::allocator<TreeStateNode>>(void)+30p ...
.text$mn:00009EFC
.text$mn:00009EFC var_8           = dword ptr -8
.text$mn:00009EFC var_1           = byte ptr -1
.text$mn:00009EFC
.text$mn:00009EFC                 push    ebp
.text$mn:00009EFD                 mov     ebp, esp
.text$mn:00009EFF                 sub     esp, 8
.text$mn:00009F02                 mov     [ebp+var_8], ecx
.text$mn:00009F05                 mov     eax, [ebp+var_8]
.text$mn:00009F08                 cmp     dword ptr [eax+4], 0
.text$mn:00009F0C                 jz      short loc_9F7B
.text$mn:00009F0E                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009F11                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009F16                 mov     ecx, [ebp+var_8]
.text$mn:00009F19                 mov     edx, [ecx+8]
.text$mn:00009F1C                 push    edx
.text$mn:00009F1D                 mov     eax, [ebp+var_8]
.text$mn:00009F20                 mov     ecx, [eax+4]
.text$mn:00009F23                 push    ecx
.text$mn:00009F24                 mov     ecx, [ebp+var_8]
.text$mn:00009F27                 call    ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Destroy(TreeStateNode *,TreeStateNode *)
.text$mn:00009F2C                 mov     edx, [ebp+var_8]
.text$mn:00009F2F                 mov     eax, [ebp+var_8]
.text$mn:00009F32                 mov     ecx, [edx+0Ch]
.text$mn:00009F35                 sub     ecx, [eax+4]
.text$mn:00009F38                 mov     eax, ecx
.text$mn:00009F3A                 cdq
.text$mn:00009F3B                 mov     ecx, 4Ch ; 'L'
.text$mn:00009F40                 idiv    ecx
.text$mn:00009F42                 push    eax             ; int
.text$mn:00009F43                 mov     edx, [ebp+var_8]
.text$mn:00009F46                 mov     eax, [edx+4]
.text$mn:00009F49                 push    eax             ; void *
.text$mn:00009F4A                 lea     ecx, [ebp+var_1]
.text$mn:00009F4D                 push    ecx
.text$mn:00009F4E                 mov     ecx, [ebp+var_8]
.text$mn:00009F51                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:00009F56                 mov     ecx, eax
.text$mn:00009F58                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@I@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::deallocate(TreeStateNode *,uint)
.text$mn:00009F5D                 mov     edx, [ebp+var_8]
.text$mn:00009F60                 mov     dword ptr [edx+4], 0
.text$mn:00009F67                 mov     eax, [ebp+var_8]
.text$mn:00009F6A                 mov     dword ptr [eax+8], 0
.text$mn:00009F71                 mov     ecx, [ebp+var_8]
.text$mn:00009F74                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00009F7B
.text$mn:00009F7B loc_9F7B:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)+10j
.text$mn:00009F7B                 mov     esp, ebp
.text$mn:00009F7D                 pop     ebp
.text$mn:00009F7E                 retn
.text$mn:00009F7E ?_Tidy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXXZ endp
.text$mn:00009F7E
.text$mn:00009F7E ; ---------------------------------------------------------------------------
.text$mn:00009F7F                 align 10h
.text$mn:00009F7F _text$mn        ends
.text$mn:00009F7F
.text$mn:00009F80 ; ===========================================================================
.text$mn:00009F80
.text$mn:00009F80 ; Segment type: Pure code
.text$mn:00009F80 ; Segment permissions: Read/Execute
.text$mn:00009F80 _text$mn        segment para public 'CODE' use32
.text$mn:00009F80                 assume cs:_text$mn
.text$mn:00009F80                 ;org 9F80h
.text$mn:00009F80 ; COMDAT (pick any)
.text$mn:00009F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F80
.text$mn:00009F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F80
.text$mn:00009F80 ; Attributes: bp-based frame
.text$mn:00009F80
.text$mn:00009F80 ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Tidy(void)
.text$mn:00009F80                 public ?_Tidy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXXZ
.text$mn:00009F80 ?_Tidy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXXZ proc near
.text$mn:00009F80                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::~vector<foundInfo,std::allocator<foundInfo>>(void)+30p
.text$mn:00009F80
.text$mn:00009F80 var_8           = dword ptr -8
.text$mn:00009F80 var_1           = byte ptr -1
.text$mn:00009F80
.text$mn:00009F80                 push    ebp
.text$mn:00009F81                 mov     ebp, esp
.text$mn:00009F83                 sub     esp, 8
.text$mn:00009F86                 mov     [ebp+var_8], ecx
.text$mn:00009F89                 mov     eax, [ebp+var_8]
.text$mn:00009F8C                 cmp     dword ptr [eax+4], 0
.text$mn:00009F90                 jz      short loc_9FF8
.text$mn:00009F92                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009F95                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009F9A                 mov     ecx, [ebp+var_8]
.text$mn:00009F9D                 mov     edx, [ecx+8]
.text$mn:00009FA0                 push    edx
.text$mn:00009FA1                 mov     eax, [ebp+var_8]
.text$mn:00009FA4                 mov     ecx, [eax+4]
.text$mn:00009FA7                 push    ecx
.text$mn:00009FA8                 mov     ecx, [ebp+var_8]
.text$mn:00009FAB                 call    ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)
.text$mn:00009FB0                 mov     edx, [ebp+var_8]
.text$mn:00009FB3                 mov     eax, [ebp+var_8]
.text$mn:00009FB6                 mov     ecx, [edx+0Ch]
.text$mn:00009FB9                 sub     ecx, [eax+4]
.text$mn:00009FBC                 sar     ecx, 6
.text$mn:00009FBF                 push    ecx             ; int
.text$mn:00009FC0                 mov     edx, [ebp+var_8]
.text$mn:00009FC3                 mov     eax, [edx+4]
.text$mn:00009FC6                 push    eax             ; void *
.text$mn:00009FC7                 lea     ecx, [ebp+var_1]
.text$mn:00009FCA                 push    ecx
.text$mn:00009FCB                 mov     ecx, [ebp+var_8]
.text$mn:00009FCE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:00009FD3                 mov     ecx, eax
.text$mn:00009FD5                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(foundInfo *,uint)
.text$mn:00009FDA                 mov     edx, [ebp+var_8]
.text$mn:00009FDD                 mov     dword ptr [edx+4], 0
.text$mn:00009FE4                 mov     eax, [ebp+var_8]
.text$mn:00009FE7                 mov     dword ptr [eax+8], 0
.text$mn:00009FEE                 mov     ecx, [ebp+var_8]
.text$mn:00009FF1                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00009FF8
.text$mn:00009FF8 loc_9FF8:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Tidy(void)+10j
.text$mn:00009FF8                 mov     esp, ebp
.text$mn:00009FFA                 pop     ebp
.text$mn:00009FFB                 retn
.text$mn:00009FFB ?_Tidy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXXZ endp
.text$mn:00009FFB
.text$mn:00009FFB _text$mn        ends
.text$mn:00009FFB
.text$mn:00009FFC ; ===========================================================================
.text$mn:00009FFC
.text$mn:00009FFC ; Segment type: Pure code
.text$mn:00009FFC ; Segment permissions: Read/Execute
.text$mn:00009FFC _text$mn        segment para public 'CODE' use32
.text$mn:00009FFC                 assume cs:_text$mn
.text$mn:00009FFC                 ;org 9FFCh
.text$mn:00009FFC ; COMDAT (pick any)
.text$mn:00009FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FFC
.text$mn:00009FFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009FFC
.text$mn:00009FFC ; Attributes: bp-based frame
.text$mn:00009FFC
.text$mn:00009FFC ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00009FFC                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:00009FFC ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:00009FFC                                         ; CODE XREF: __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0+3p
.text$mn:00009FFC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:00009FFC
.text$mn:00009FFC var_8           = dword ptr -8
.text$mn:00009FFC var_1           = byte ptr -1
.text$mn:00009FFC
.text$mn:00009FFC                 push    ebp
.text$mn:00009FFD                 mov     ebp, esp
.text$mn:00009FFF                 sub     esp, 8
.text$mn:0000A002                 mov     [ebp+var_8], ecx
.text$mn:0000A005                 mov     eax, [ebp+var_8]
.text$mn:0000A008                 cmp     dword ptr [eax+4], 0
.text$mn:0000A00C                 jz      short loc_A07B
.text$mn:0000A00E                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A011                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A016                 mov     ecx, [ebp+var_8]
.text$mn:0000A019                 mov     edx, [ecx+8]
.text$mn:0000A01C                 push    edx
.text$mn:0000A01D                 mov     eax, [ebp+var_8]
.text$mn:0000A020                 mov     ecx, [eax+4]
.text$mn:0000A023                 push    ecx
.text$mn:0000A024                 mov     ecx, [ebp+var_8]
.text$mn:0000A027                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000A02C                 mov     edx, [ebp+var_8]
.text$mn:0000A02F                 mov     eax, [ebp+var_8]
.text$mn:0000A032                 mov     ecx, [edx+0Ch]
.text$mn:0000A035                 sub     ecx, [eax+4]
.text$mn:0000A038                 mov     eax, ecx
.text$mn:0000A03A                 cdq
.text$mn:0000A03B                 mov     ecx, 1Ch
.text$mn:0000A040                 idiv    ecx
.text$mn:0000A042                 push    eax             ; int
.text$mn:0000A043                 mov     edx, [ebp+var_8]
.text$mn:0000A046                 mov     eax, [edx+4]
.text$mn:0000A049                 push    eax             ; void *
.text$mn:0000A04A                 lea     ecx, [ebp+var_1]
.text$mn:0000A04D                 push    ecx
.text$mn:0000A04E                 mov     ecx, [ebp+var_8]
.text$mn:0000A051                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000A056                 mov     ecx, eax
.text$mn:0000A058                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000A05D                 mov     edx, [ebp+var_8]
.text$mn:0000A060                 mov     dword ptr [edx+4], 0
.text$mn:0000A067                 mov     eax, [ebp+var_8]
.text$mn:0000A06A                 mov     dword ptr [eax+8], 0
.text$mn:0000A071                 mov     ecx, [ebp+var_8]
.text$mn:0000A074                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000A07B
.text$mn:0000A07B loc_A07B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:0000A07B                 mov     esp, ebp
.text$mn:0000A07D                 pop     ebp
.text$mn:0000A07E                 retn
.text$mn:0000A07E ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:0000A07E
.text$mn:0000A07E ; ---------------------------------------------------------------------------
.text$mn:0000A07F                 align 10h
.text$mn:0000A07F _text$mn        ends
.text$mn:0000A07F
.text$mn:0000A080 ; ===========================================================================
.text$mn:0000A080
.text$mn:0000A080 ; Segment type: Pure code
.text$mn:0000A080 ; Segment permissions: Read/Execute
.text$mn:0000A080 _text$mn        segment para public 'CODE' use32
.text$mn:0000A080                 assume cs:_text$mn
.text$mn:0000A080                 ;org 0A080h
.text$mn:0000A080 ; COMDAT (pick any)
.text$mn:0000A080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A080
.text$mn:0000A080 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A080
.text$mn:0000A080 ; Attributes: bp-based frame
.text$mn:0000A080
.text$mn:0000A080 ; public: struct TreeStateNode const * __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>>::_Unchecked(void)const
.text$mn:0000A080                 public ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QBEPBUTreeStateNode@@XZ
.text$mn:0000A080 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QBEPBUTreeStateNode@@XZ proc near
.text$mn:0000A080                                         ; CODE XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>)+2Dp
.text$mn:0000A080
.text$mn:0000A080 var_4           = dword ptr -4
.text$mn:0000A080
.text$mn:0000A080                 push    ebp
.text$mn:0000A081                 mov     ebp, esp
.text$mn:0000A083                 push    ecx
.text$mn:0000A084                 mov     [ebp+var_4], ecx
.text$mn:0000A087                 mov     eax, [ebp+var_4]
.text$mn:0000A08A                 mov     eax, [eax+8]
.text$mn:0000A08D                 mov     esp, ebp
.text$mn:0000A08F                 pop     ebp
.text$mn:0000A090                 retn
.text$mn:0000A090 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QBEPBUTreeStateNode@@XZ endp
.text$mn:0000A090
.text$mn:0000A090 ; ---------------------------------------------------------------------------
.text$mn:0000A091                 align 4
.text$mn:0000A091 _text$mn        ends
.text$mn:0000A091
.text$mn:0000A094 ; ===========================================================================
.text$mn:0000A094
.text$mn:0000A094 ; Segment type: Pure code
.text$mn:0000A094 ; Segment permissions: Read/Execute
.text$mn:0000A094 _text$mn        segment para public 'CODE' use32
.text$mn:0000A094                 assume cs:_text$mn
.text$mn:0000A094                 ;org 0A094h
.text$mn:0000A094 ; COMDAT (pick any)
.text$mn:0000A094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A094
.text$mn:0000A094 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A094
.text$mn:0000A094 ; Attributes: bp-based frame
.text$mn:0000A094
.text$mn:0000A094 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Unchecked(void)const
.text$mn:0000A094                 public ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000A094 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$mn:0000A094                                         ; CODE XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+2Dp
.text$mn:0000A094
.text$mn:0000A094 var_4           = dword ptr -4
.text$mn:0000A094
.text$mn:0000A094                 push    ebp
.text$mn:0000A095                 mov     ebp, esp
.text$mn:0000A097                 push    ecx
.text$mn:0000A098                 mov     [ebp+var_4], ecx
.text$mn:0000A09B                 mov     eax, [ebp+var_4]
.text$mn:0000A09E                 mov     eax, [eax+8]
.text$mn:0000A0A1                 mov     esp, ebp
.text$mn:0000A0A3                 pop     ebp
.text$mn:0000A0A4                 retn
.text$mn:0000A0A4 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$mn:0000A0A4
.text$mn:0000A0A4 ; ---------------------------------------------------------------------------
.text$mn:0000A0A5                 align 4
.text$mn:0000A0A5 _text$mn        ends
.text$mn:0000A0A5
.text$mn:0000A0A8 ; ===========================================================================
.text$mn:0000A0A8
.text$mn:0000A0A8 ; Segment type: Pure code
.text$mn:0000A0A8 ; Segment permissions: Read/Execute
.text$mn:0000A0A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0A8                 assume cs:_text$mn
.text$mn:0000A0A8                 ;org 0A0A8h
.text$mn:0000A0A8 ; COMDAT (pick any)
.text$mn:0000A0A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0A8
.text$mn:0000A0A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0A8
.text$mn:0000A0A8 ; Attributes: bp-based frame
.text$mn:0000A0A8
.text$mn:0000A0A8 ; public: unsigned int __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Unused_capacity(void)const
.text$mn:0000A0A8                 public ?_Unused_capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ
.text$mn:0000A0A8 ?_Unused_capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ proc near
.text$mn:0000A0A8                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+Bp
.text$mn:0000A0A8
.text$mn:0000A0A8 var_4           = dword ptr -4
.text$mn:0000A0A8
.text$mn:0000A0A8                 push    ebp
.text$mn:0000A0A9                 mov     ebp, esp
.text$mn:0000A0AB                 push    ecx
.text$mn:0000A0AC                 mov     [ebp+var_4], ecx
.text$mn:0000A0AF                 mov     eax, [ebp+var_4]
.text$mn:0000A0B2                 mov     ecx, [ebp+var_4]
.text$mn:0000A0B5                 mov     eax, [eax+0Ch]
.text$mn:0000A0B8                 sub     eax, [ecx+8]
.text$mn:0000A0BB                 cdq
.text$mn:0000A0BC                 mov     ecx, 6Ch ; 'l'
.text$mn:0000A0C1                 idiv    ecx
.text$mn:0000A0C3                 mov     esp, ebp
.text$mn:0000A0C5                 pop     ebp
.text$mn:0000A0C6                 retn
.text$mn:0000A0C6 ?_Unused_capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ endp
.text$mn:0000A0C6
.text$mn:0000A0C6 ; ---------------------------------------------------------------------------
.text$mn:0000A0C7                 align 4
.text$mn:0000A0C7 _text$mn        ends
.text$mn:0000A0C7
.text$mn:0000A0C8 ; ===========================================================================
.text$mn:0000A0C8
.text$mn:0000A0C8 ; Segment type: Pure code
.text$mn:0000A0C8 ; Segment permissions: Read/Execute
.text$mn:0000A0C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0C8                 assume cs:_text$mn
.text$mn:0000A0C8                 ;org 0A0C8h
.text$mn:0000A0C8 ; COMDAT (pick any)
.text$mn:0000A0C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0C8
.text$mn:0000A0C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0C8
.text$mn:0000A0C8 ; Attributes: bp-based frame
.text$mn:0000A0C8
.text$mn:0000A0C8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:0000A0C8                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000A0C8 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000A0C8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:0000A0C8
.text$mn:0000A0C8 var_4           = dword ptr -4
.text$mn:0000A0C8
.text$mn:0000A0C8                 push    ebp
.text$mn:0000A0C9                 mov     ebp, esp
.text$mn:0000A0CB                 push    ecx
.text$mn:0000A0CC                 mov     [ebp+var_4], ecx
.text$mn:0000A0CF                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000A0D4                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000A0D9                 mov     esp, ebp
.text$mn:0000A0DB                 pop     ebp
.text$mn:0000A0DC                 retn
.text$mn:0000A0DC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000A0DC
.text$mn:0000A0DC ; ---------------------------------------------------------------------------
.text$mn:0000A0DD                 align 10h
.text$mn:0000A0DD _text$mn        ends
.text$mn:0000A0DD
.text$mn:0000A0E0 ; ===========================================================================
.text$mn:0000A0E0
.text$mn:0000A0E0 ; Segment type: Pure code
.text$mn:0000A0E0 ; Segment permissions: Read/Execute
.text$mn:0000A0E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0E0                 assume cs:_text$mn
.text$mn:0000A0E0                 ;org 0A0E0h
.text$mn:0000A0E0 ; COMDAT (pick any)
.text$mn:0000A0E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0E0
.text$mn:0000A0E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0E0
.text$mn:0000A0E0 ; Attributes: bp-based frame
.text$mn:0000A0E0
.text$mn:0000A0E0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:0000A0E0                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000A0E0 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000A0E0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:0000A0E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:0000A0E0
.text$mn:0000A0E0 var_4           = dword ptr -4
.text$mn:0000A0E0
.text$mn:0000A0E0                 push    ebp
.text$mn:0000A0E1                 mov     ebp, esp
.text$mn:0000A0E3                 push    ecx
.text$mn:0000A0E4                 mov     [ebp+var_4], ecx
.text$mn:0000A0E7                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000A0EC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000A0F1                 mov     esp, ebp
.text$mn:0000A0F3                 pop     ebp
.text$mn:0000A0F4                 retn
.text$mn:0000A0F4 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000A0F4
.text$mn:0000A0F4 ; ---------------------------------------------------------------------------
.text$mn:0000A0F5                 align 4
.text$mn:0000A0F5 _text$mn        ends
.text$mn:0000A0F5
.text$mn:0000A0F8 ; ===========================================================================
.text$mn:0000A0F8
.text$mn:0000A0F8 ; Segment type: Pure code
.text$mn:0000A0F8 ; Segment permissions: Read/Execute
.text$mn:0000A0F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0F8                 assume cs:_text$mn
.text$mn:0000A0F8                 ;org 0A0F8h
.text$mn:0000A0F8 ; COMDAT (pick any)
.text$mn:0000A0F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0F8
.text$mn:0000A0F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0F8
.text$mn:0000A0F8 ; Attributes: bp-based frame
.text$mn:0000A0F8
.text$mn:0000A0F8 ; protected: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::_Xlen(void)const
.text$mn:0000A0F8                 public ?_Xlen@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXXZ
.text$mn:0000A0F8 ?_Xlen@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXXZ proc near
.text$mn:0000A0F8                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+31p
.text$mn:0000A0F8
.text$mn:0000A0F8 var_4           = dword ptr -4
.text$mn:0000A0F8
.text$mn:0000A0F8                 push    ebp
.text$mn:0000A0F9                 mov     ebp, esp
.text$mn:0000A0FB                 push    ecx
.text$mn:0000A0FC                 mov     [ebp+var_4], ecx
.text$mn:0000A0FF                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000A104                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000A109                 mov     esp, ebp
.text$mn:0000A10B                 pop     ebp
.text$mn:0000A10C                 retn
.text$mn:0000A10C ?_Xlen@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXXZ endp
.text$mn:0000A10C
.text$mn:0000A10C ; ---------------------------------------------------------------------------
.text$mn:0000A10D                 align 10h
.text$mn:0000A10D _text$mn        ends
.text$mn:0000A10D
.text$mn:0000A110 ; ===========================================================================
.text$mn:0000A110
.text$mn:0000A110 ; Segment type: Pure code
.text$mn:0000A110 ; Segment permissions: Read/Execute
.text$mn:0000A110 _text$mn        segment para public 'CODE' use32
.text$mn:0000A110                 assume cs:_text$mn
.text$mn:0000A110                 ;org 0A110h
.text$mn:0000A110 ; COMDAT (pick any)
.text$mn:0000A110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A110
.text$mn:0000A110 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A110
.text$mn:0000A110 ; Attributes: bp-based frame
.text$mn:0000A110
.text$mn:0000A110 ; protected: void __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::_Xlen(void)const
.text$mn:0000A110                 public ?_Xlen@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IBEXXZ
.text$mn:0000A110 ?_Xlen@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IBEXXZ proc near
.text$mn:0000A110                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+43p
.text$mn:0000A110
.text$mn:0000A110 var_4           = dword ptr -4
.text$mn:0000A110
.text$mn:0000A110                 push    ebp
.text$mn:0000A111                 mov     ebp, esp
.text$mn:0000A113                 push    ecx
.text$mn:0000A114                 mov     [ebp+var_4], ecx
.text$mn:0000A117                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000A11C                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000A121                 mov     esp, ebp
.text$mn:0000A123                 pop     ebp
.text$mn:0000A124                 retn
.text$mn:0000A124 ?_Xlen@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IBEXXZ endp
.text$mn:0000A124
.text$mn:0000A124 ; ---------------------------------------------------------------------------
.text$mn:0000A125                 align 4
.text$mn:0000A125 _text$mn        ends
.text$mn:0000A125
.text$mn:0000A128 ; ===========================================================================
.text$mn:0000A128
.text$mn:0000A128 ; Segment type: Pure code
.text$mn:0000A128 ; Segment permissions: Read/Execute
.text$mn:0000A128 _text$mn        segment para public 'CODE' use32
.text$mn:0000A128                 assume cs:_text$mn
.text$mn:0000A128                 ;org 0A128h
.text$mn:0000A128 ; COMDAT (pick any)
.text$mn:0000A128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A128
.text$mn:0000A128 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A128
.text$mn:0000A128 ; Attributes: bp-based frame
.text$mn:0000A128
.text$mn:0000A128 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:0000A128                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:0000A128 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:0000A128                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+43p
.text$mn:0000A128
.text$mn:0000A128 var_4           = dword ptr -4
.text$mn:0000A128
.text$mn:0000A128                 push    ebp
.text$mn:0000A129                 mov     ebp, esp
.text$mn:0000A12B                 push    ecx
.text$mn:0000A12C                 mov     [ebp+var_4], ecx
.text$mn:0000A12F                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000A134                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000A139                 mov     esp, ebp
.text$mn:0000A13B                 pop     ebp
.text$mn:0000A13C                 retn
.text$mn:0000A13C ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:0000A13C
.text$mn:0000A13C ; ---------------------------------------------------------------------------
.text$mn:0000A13D                 align 10h
.text$mn:0000A13D _text$mn        ends
.text$mn:0000A13D
.text$mn:0000A140 ; ===========================================================================
.text$mn:0000A140
.text$mn:0000A140 ; Segment type: Pure code
.text$mn:0000A140 ; Segment permissions: Read/Execute
.text$mn:0000A140 _text$mn        segment para public 'CODE' use32
.text$mn:0000A140                 assume cs:_text$mn
.text$mn:0000A140                 ;org 0A140h
.text$mn:0000A140 ; COMDAT (pick any)
.text$mn:0000A140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A140
.text$mn:0000A140 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A140
.text$mn:0000A140 ; Attributes: bp-based frame
.text$mn:0000A140
.text$mn:0000A140 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:0000A140                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000A140 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000A140                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:0000A140                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:0000A140
.text$mn:0000A140 var_4           = dword ptr -4
.text$mn:0000A140
.text$mn:0000A140                 push    ebp
.text$mn:0000A141                 mov     ebp, esp
.text$mn:0000A143                 push    ecx
.text$mn:0000A144                 mov     [ebp+var_4], ecx
.text$mn:0000A147                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000A14C                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000A151                 mov     esp, ebp
.text$mn:0000A153                 pop     ebp
.text$mn:0000A154                 retn
.text$mn:0000A154 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000A154
.text$mn:0000A154 ; ---------------------------------------------------------------------------
.text$mn:0000A155                 align 4
.text$mn:0000A155 _text$mn        ends
.text$mn:0000A155
.text$mn:0000A158 ; ===========================================================================
.text$mn:0000A158
.text$mn:0000A158 ; Segment type: Pure code
.text$mn:0000A158 ; Segment permissions: Read/Execute
.text$mn:0000A158 _text$mn        segment para public 'CODE' use32
.text$mn:0000A158                 assume cs:_text$mn
.text$mn:0000A158                 ;org 0A158h
.text$mn:0000A158 ; COMDAT (pick any)
.text$mn:0000A158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A158
.text$mn:0000A158 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A158
.text$mn:0000A158 ; Attributes: bp-based frame
.text$mn:0000A158
.text$mn:0000A158 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:0000A158                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000A158 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000A158                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:0000A158                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:0000A158
.text$mn:0000A158 var_4           = dword ptr -4
.text$mn:0000A158
.text$mn:0000A158                 push    ebp
.text$mn:0000A159                 mov     ebp, esp
.text$mn:0000A15B                 push    ecx
.text$mn:0000A15C                 mov     [ebp+var_4], ecx
.text$mn:0000A15F                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000A164                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000A169                 mov     esp, ebp
.text$mn:0000A16B                 pop     ebp
.text$mn:0000A16C                 retn
.text$mn:0000A16C ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000A16C
.text$mn:0000A16C ; ---------------------------------------------------------------------------
.text$mn:0000A16D                 align 10h
.text$mn:0000A16D _text$mn        ends
.text$mn:0000A16D
.text$mn:0000A170 ; ===========================================================================
.text$mn:0000A170
.text$mn:0000A170 ; Segment type: Pure code
.text$mn:0000A170 ; Segment permissions: Read/Execute
.text$mn:0000A170 _text$mn        segment para public 'CODE' use32
.text$mn:0000A170                 assume cs:_text$mn
.text$mn:0000A170                 ;org 0A170h
.text$mn:0000A170 ; COMDAT (pick any)
.text$mn:0000A170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A170
.text$mn:0000A170 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A170
.text$mn:0000A170 ; Attributes: bp-based frame
.text$mn:0000A170
.text$mn:0000A170 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:0000A170                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:0000A170 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:0000A170                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:0000A170                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:0000A170
.text$mn:0000A170 var_4           = dword ptr -4
.text$mn:0000A170 arg_0           = dword ptr  8
.text$mn:0000A170
.text$mn:0000A170                 push    ebp
.text$mn:0000A171                 mov     ebp, esp
.text$mn:0000A173                 push    ecx
.text$mn:0000A174                 mov     [ebp+var_4], ecx
.text$mn:0000A177                 mov     eax, [ebp+arg_0]
.text$mn:0000A17A                 push    eax
.text$mn:0000A17B                 mov     ecx, [ebp+var_4]
.text$mn:0000A17E                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000A183                 mov     esp, ebp
.text$mn:0000A185                 pop     ebp
.text$mn:0000A186                 retn    4
.text$mn:0000A186 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000A186
.text$mn:0000A186 ; ---------------------------------------------------------------------------
.text$mn:0000A189                 align 4
.text$mn:0000A189 _text$mn        ends
.text$mn:0000A189
.text$mn:0000A18C ; ===========================================================================
.text$mn:0000A18C
.text$mn:0000A18C ; Segment type: Pure code
.text$mn:0000A18C ; Segment permissions: Read/Execute
.text$mn:0000A18C _text$mn        segment para public 'CODE' use32
.text$mn:0000A18C                 assume cs:_text$mn
.text$mn:0000A18C                 ;org 0A18Ch
.text$mn:0000A18C ; COMDAT (pick any)
.text$mn:0000A18C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A18C
.text$mn:0000A18C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A18C
.text$mn:0000A18C ; Attributes: bp-based frame
.text$mn:0000A18C
.text$mn:0000A18C ; public: struct TreeParams * __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::allocate(unsigned int)
.text$mn:0000A18C                 public ?allocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEPAUTreeParams@@I@Z
.text$mn:0000A18C ?allocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEPAUTreeParams@@I@Z proc near
.text$mn:0000A18C                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+41p
.text$mn:0000A18C
.text$mn:0000A18C var_4           = dword ptr -4
.text$mn:0000A18C arg_0           = dword ptr  8
.text$mn:0000A18C
.text$mn:0000A18C                 push    ebp
.text$mn:0000A18D                 mov     ebp, esp
.text$mn:0000A18F                 push    ecx
.text$mn:0000A190                 mov     [ebp+var_4], ecx
.text$mn:0000A193                 mov     eax, [ebp+arg_0]
.text$mn:0000A196                 push    eax
.text$mn:0000A197                 mov     ecx, [ebp+var_4]
.text$mn:0000A19A                 call    ?allocate@?$allocator@UTreeParams@@@std@@QAEPAUTreeParams@@I@Z ; std::allocator<TreeParams>::allocate(uint)
.text$mn:0000A19F                 mov     esp, ebp
.text$mn:0000A1A1                 pop     ebp
.text$mn:0000A1A2                 retn    4
.text$mn:0000A1A2 ?allocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEPAUTreeParams@@I@Z endp
.text$mn:0000A1A2
.text$mn:0000A1A2 ; ---------------------------------------------------------------------------
.text$mn:0000A1A5                 align 4
.text$mn:0000A1A5 _text$mn        ends
.text$mn:0000A1A5
.text$mn:0000A1A8 ; ===========================================================================
.text$mn:0000A1A8
.text$mn:0000A1A8 ; Segment type: Pure code
.text$mn:0000A1A8 ; Segment permissions: Read/Execute
.text$mn:0000A1A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1A8                 assume cs:_text$mn
.text$mn:0000A1A8                 ;org 0A1A8h
.text$mn:0000A1A8 ; COMDAT (pick any)
.text$mn:0000A1A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1A8
.text$mn:0000A1A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1A8
.text$mn:0000A1A8 ; Attributes: bp-based frame
.text$mn:0000A1A8
.text$mn:0000A1A8 ; public: struct TreeStateNode * __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::allocate(unsigned int)
.text$mn:0000A1A8                 public ?allocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEPAUTreeStateNode@@I@Z
.text$mn:0000A1A8 ?allocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEPAUTreeStateNode@@I@Z proc near
.text$mn:0000A1A8                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+5Cp
.text$mn:0000A1A8
.text$mn:0000A1A8 var_4           = dword ptr -4
.text$mn:0000A1A8 arg_0           = dword ptr  8
.text$mn:0000A1A8
.text$mn:0000A1A8                 push    ebp
.text$mn:0000A1A9                 mov     ebp, esp
.text$mn:0000A1AB                 push    ecx
.text$mn:0000A1AC                 mov     [ebp+var_4], ecx
.text$mn:0000A1AF                 mov     eax, [ebp+arg_0]
.text$mn:0000A1B2                 push    eax
.text$mn:0000A1B3                 mov     ecx, [ebp+var_4]
.text$mn:0000A1B6                 call    ?allocate@?$allocator@UTreeStateNode@@@std@@QAEPAUTreeStateNode@@I@Z ; std::allocator<TreeStateNode>::allocate(uint)
.text$mn:0000A1BB                 mov     esp, ebp
.text$mn:0000A1BD                 pop     ebp
.text$mn:0000A1BE                 retn    4
.text$mn:0000A1BE ?allocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEPAUTreeStateNode@@I@Z endp
.text$mn:0000A1BE
.text$mn:0000A1BE ; ---------------------------------------------------------------------------
.text$mn:0000A1C1                 align 4
.text$mn:0000A1C1 _text$mn        ends
.text$mn:0000A1C1
.text$mn:0000A1C4 ; ===========================================================================
.text$mn:0000A1C4
.text$mn:0000A1C4 ; Segment type: Pure code
.text$mn:0000A1C4 ; Segment permissions: Read/Execute
.text$mn:0000A1C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1C4                 assume cs:_text$mn
.text$mn:0000A1C4                 ;org 0A1C4h
.text$mn:0000A1C4 ; COMDAT (pick any)
.text$mn:0000A1C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1C4
.text$mn:0000A1C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1C4
.text$mn:0000A1C4 ; Attributes: bp-based frame
.text$mn:0000A1C4
.text$mn:0000A1C4 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:0000A1C4                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000A1C4 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000A1C4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Alloc_proxy(void)+16p
.text$mn:0000A1C4                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Alloc_proxy(void)+16p ...
.text$mn:0000A1C4
.text$mn:0000A1C4 var_4           = dword ptr -4
.text$mn:0000A1C4 arg_0           = dword ptr  8
.text$mn:0000A1C4
.text$mn:0000A1C4                 push    ebp
.text$mn:0000A1C5                 mov     ebp, esp
.text$mn:0000A1C7                 push    ecx
.text$mn:0000A1C8                 mov     [ebp+var_4], ecx
.text$mn:0000A1CB                 mov     eax, [ebp+arg_0]
.text$mn:0000A1CE                 push    eax
.text$mn:0000A1CF                 mov     ecx, [ebp+var_4]
.text$mn:0000A1D2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000A1D7                 mov     esp, ebp
.text$mn:0000A1D9                 pop     ebp
.text$mn:0000A1DA                 retn    4
.text$mn:0000A1DA ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000A1DA
.text$mn:0000A1DA ; ---------------------------------------------------------------------------
.text$mn:0000A1DD                 align 10h
.text$mn:0000A1DD _text$mn        ends
.text$mn:0000A1DD
.text$mn:0000A1E0 ; ===========================================================================
.text$mn:0000A1E0
.text$mn:0000A1E0 ; Segment type: Pure code
.text$mn:0000A1E0 ; Segment permissions: Read/Execute
.text$mn:0000A1E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1E0                 assume cs:_text$mn
.text$mn:0000A1E0                 ;org 0A1E0h
.text$mn:0000A1E0 ; COMDAT (pick any)
.text$mn:0000A1E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1E0
.text$mn:0000A1E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1E0
.text$mn:0000A1E0 ; Attributes: bp-based frame
.text$mn:0000A1E0
.text$mn:0000A1E0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:0000A1E0                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000A1E0 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000A1E0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+5Cp
.text$mn:0000A1E0
.text$mn:0000A1E0 var_4           = dword ptr -4
.text$mn:0000A1E0 arg_0           = dword ptr  8
.text$mn:0000A1E0
.text$mn:0000A1E0                 push    ebp
.text$mn:0000A1E1                 mov     ebp, esp
.text$mn:0000A1E3                 push    ecx
.text$mn:0000A1E4                 mov     [ebp+var_4], ecx
.text$mn:0000A1E7                 mov     eax, [ebp+arg_0]
.text$mn:0000A1EA                 push    eax
.text$mn:0000A1EB                 mov     ecx, [ebp+var_4]
.text$mn:0000A1EE                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:0000A1F3                 mov     esp, ebp
.text$mn:0000A1F5                 pop     ebp
.text$mn:0000A1F6                 retn    4
.text$mn:0000A1F6 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000A1F6
.text$mn:0000A1F6 ; ---------------------------------------------------------------------------
.text$mn:0000A1F9                 align 4
.text$mn:0000A1F9 _text$mn        ends
.text$mn:0000A1F9
.text$mn:0000A1FC ; ===========================================================================
.text$mn:0000A1FC
.text$mn:0000A1FC ; Segment type: Pure code
.text$mn:0000A1FC ; Segment permissions: Read/Execute
.text$mn:0000A1FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A1FC                 assume cs:_text$mn
.text$mn:0000A1FC                 ;org 0A1FCh
.text$mn:0000A1FC ; COMDAT (pick any)
.text$mn:0000A1FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1FC
.text$mn:0000A1FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1FC
.text$mn:0000A1FC ; Attributes: bp-based frame
.text$mn:0000A1FC
.text$mn:0000A1FC ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:0000A1FC                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:0000A1FC ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:0000A1FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:0000A1FC                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:0000A1FC
.text$mn:0000A1FC var_4           = dword ptr -4
.text$mn:0000A1FC arg_0           = dword ptr  8
.text$mn:0000A1FC
.text$mn:0000A1FC                 push    ebp
.text$mn:0000A1FD                 mov     ebp, esp
.text$mn:0000A1FF                 push    ecx
.text$mn:0000A200                 mov     [ebp+var_4], ecx
.text$mn:0000A203                 mov     eax, [ebp+arg_0]
.text$mn:0000A206                 push    eax
.text$mn:0000A207                 mov     ecx, [ebp+var_4]
.text$mn:0000A20A                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000A20F                 mov     esp, ebp
.text$mn:0000A211                 pop     ebp
.text$mn:0000A212                 retn    4
.text$mn:0000A212 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:0000A212
.text$mn:0000A212 ; ---------------------------------------------------------------------------
.text$mn:0000A215                 align 4
.text$mn:0000A215 _text$mn        ends
.text$mn:0000A215
.text$mn:0000A218 ; ===========================================================================
.text$mn:0000A218
.text$mn:0000A218 ; Segment type: Pure code
.text$mn:0000A218 ; Segment permissions: Read/Execute
.text$mn:0000A218 _text$mn        segment para public 'CODE' use32
.text$mn:0000A218                 assume cs:_text$mn
.text$mn:0000A218                 ;org 0A218h
.text$mn:0000A218 ; COMDAT (pick any)
.text$mn:0000A218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A218
.text$mn:0000A218 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A218
.text$mn:0000A218 ; Attributes: bp-based frame
.text$mn:0000A218
.text$mn:0000A218 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:0000A218                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:0000A218 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:0000A218                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:0000A218
.text$mn:0000A218 var_4           = dword ptr -4
.text$mn:0000A218 arg_0           = dword ptr  8
.text$mn:0000A218
.text$mn:0000A218                 push    ebp
.text$mn:0000A219                 mov     ebp, esp
.text$mn:0000A21B                 push    ecx
.text$mn:0000A21C                 mov     [ebp+var_4], ecx
.text$mn:0000A21F                 push    0
.text$mn:0000A221                 mov     eax, [ebp+arg_0]
.text$mn:0000A224                 push    eax
.text$mn:0000A225                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000A22A                 add     esp, 8
.text$mn:0000A22D                 mov     esp, ebp
.text$mn:0000A22F                 pop     ebp
.text$mn:0000A230                 retn    4
.text$mn:0000A230 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:0000A230
.text$mn:0000A230 ; ---------------------------------------------------------------------------
.text$mn:0000A233                 align 4
.text$mn:0000A233 _text$mn        ends
.text$mn:0000A233
.text$mn:0000A234 ; ===========================================================================
.text$mn:0000A234
.text$mn:0000A234 ; Segment type: Pure code
.text$mn:0000A234 ; Segment permissions: Read/Execute
.text$mn:0000A234 _text$mn        segment para public 'CODE' use32
.text$mn:0000A234                 assume cs:_text$mn
.text$mn:0000A234                 ;org 0A234h
.text$mn:0000A234 ; COMDAT (pick any)
.text$mn:0000A234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A234
.text$mn:0000A234 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A234
.text$mn:0000A234 ; Attributes: bp-based frame
.text$mn:0000A234
.text$mn:0000A234 ; public: struct TreeParams * __thiscall std::allocator<struct TreeParams>::allocate(unsigned int)
.text$mn:0000A234                 public ?allocate@?$allocator@UTreeParams@@@std@@QAEPAUTreeParams@@I@Z
.text$mn:0000A234 ?allocate@?$allocator@UTreeParams@@@std@@QAEPAUTreeParams@@I@Z proc near
.text$mn:0000A234                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::allocate(uint)+Ep
.text$mn:0000A234
.text$mn:0000A234 var_4           = dword ptr -4
.text$mn:0000A234 arg_0           = dword ptr  8
.text$mn:0000A234
.text$mn:0000A234                 push    ebp
.text$mn:0000A235                 mov     ebp, esp
.text$mn:0000A237                 push    ecx
.text$mn:0000A238                 mov     [ebp+var_4], ecx
.text$mn:0000A23B                 push    0
.text$mn:0000A23D                 mov     eax, [ebp+arg_0]
.text$mn:0000A240                 push    eax
.text$mn:0000A241                 call    ??$_Allocate@UTreeParams@@@std@@YAPAUTreeParams@@IPAU1@@Z ; std::_Allocate<TreeParams>(uint,TreeParams *)
.text$mn:0000A246                 add     esp, 8
.text$mn:0000A249                 mov     esp, ebp
.text$mn:0000A24B                 pop     ebp
.text$mn:0000A24C                 retn    4
.text$mn:0000A24C ?allocate@?$allocator@UTreeParams@@@std@@QAEPAUTreeParams@@I@Z endp
.text$mn:0000A24C
.text$mn:0000A24C ; ---------------------------------------------------------------------------
.text$mn:0000A24F                 align 10h
.text$mn:0000A24F _text$mn        ends
.text$mn:0000A24F
.text$mn:0000A250 ; ===========================================================================
.text$mn:0000A250
.text$mn:0000A250 ; Segment type: Pure code
.text$mn:0000A250 ; Segment permissions: Read/Execute
.text$mn:0000A250 _text$mn        segment para public 'CODE' use32
.text$mn:0000A250                 assume cs:_text$mn
.text$mn:0000A250                 ;org 0A250h
.text$mn:0000A250 ; COMDAT (pick any)
.text$mn:0000A250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A250
.text$mn:0000A250 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A250
.text$mn:0000A250 ; Attributes: bp-based frame
.text$mn:0000A250
.text$mn:0000A250 ; public: struct TreeStateNode * __thiscall std::allocator<struct TreeStateNode>::allocate(unsigned int)
.text$mn:0000A250                 public ?allocate@?$allocator@UTreeStateNode@@@std@@QAEPAUTreeStateNode@@I@Z
.text$mn:0000A250 ?allocate@?$allocator@UTreeStateNode@@@std@@QAEPAUTreeStateNode@@I@Z proc near
.text$mn:0000A250                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::allocate(uint)+Ep
.text$mn:0000A250
.text$mn:0000A250 var_4           = dword ptr -4
.text$mn:0000A250 arg_0           = dword ptr  8
.text$mn:0000A250
.text$mn:0000A250                 push    ebp
.text$mn:0000A251                 mov     ebp, esp
.text$mn:0000A253                 push    ecx
.text$mn:0000A254                 mov     [ebp+var_4], ecx
.text$mn:0000A257                 push    0
.text$mn:0000A259                 mov     eax, [ebp+arg_0]
.text$mn:0000A25C                 push    eax
.text$mn:0000A25D                 call    ??$_Allocate@UTreeStateNode@@@std@@YAPAUTreeStateNode@@IPAU1@@Z ; std::_Allocate<TreeStateNode>(uint,TreeStateNode *)
.text$mn:0000A262                 add     esp, 8
.text$mn:0000A265                 mov     esp, ebp
.text$mn:0000A267                 pop     ebp
.text$mn:0000A268                 retn    4
.text$mn:0000A268 ?allocate@?$allocator@UTreeStateNode@@@std@@QAEPAUTreeStateNode@@I@Z endp
.text$mn:0000A268
.text$mn:0000A268 ; ---------------------------------------------------------------------------
.text$mn:0000A26B                 align 4
.text$mn:0000A26B _text$mn        ends
.text$mn:0000A26B
.text$mn:0000A26C ; ===========================================================================
.text$mn:0000A26C
.text$mn:0000A26C ; Segment type: Pure code
.text$mn:0000A26C ; Segment permissions: Read/Execute
.text$mn:0000A26C _text$mn        segment para public 'CODE' use32
.text$mn:0000A26C                 assume cs:_text$mn
.text$mn:0000A26C                 ;org 0A26Ch
.text$mn:0000A26C ; COMDAT (pick any)
.text$mn:0000A26C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A26C
.text$mn:0000A26C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A26C
.text$mn:0000A26C ; Attributes: bp-based frame
.text$mn:0000A26C
.text$mn:0000A26C ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:0000A26C                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000A26C ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000A26C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:0000A26C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:0000A26C
.text$mn:0000A26C var_4           = dword ptr -4
.text$mn:0000A26C arg_0           = dword ptr  8
.text$mn:0000A26C
.text$mn:0000A26C                 push    ebp
.text$mn:0000A26D                 mov     ebp, esp
.text$mn:0000A26F                 push    ecx
.text$mn:0000A270                 mov     [ebp+var_4], ecx
.text$mn:0000A273                 push    0
.text$mn:0000A275                 mov     eax, [ebp+arg_0]
.text$mn:0000A278                 push    eax
.text$mn:0000A279                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000A27E                 add     esp, 8
.text$mn:0000A281                 mov     esp, ebp
.text$mn:0000A283                 pop     ebp
.text$mn:0000A284                 retn    4
.text$mn:0000A284 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000A284
.text$mn:0000A284 ; ---------------------------------------------------------------------------
.text$mn:0000A287                 align 4
.text$mn:0000A287 _text$mn        ends
.text$mn:0000A287
.text$mn:0000A288 ; ===========================================================================
.text$mn:0000A288
.text$mn:0000A288 ; Segment type: Pure code
.text$mn:0000A288 ; Segment permissions: Read/Execute
.text$mn:0000A288 _text$mn        segment para public 'CODE' use32
.text$mn:0000A288                 assume cs:_text$mn
.text$mn:0000A288                 ;org 0A288h
.text$mn:0000A288 ; COMDAT (pick any)
.text$mn:0000A288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A288
.text$mn:0000A288 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A288
.text$mn:0000A288 ; Attributes: bp-based frame
.text$mn:0000A288
.text$mn:0000A288 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:0000A288                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000A288 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000A288                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:0000A288
.text$mn:0000A288 var_4           = dword ptr -4
.text$mn:0000A288 arg_0           = dword ptr  8
.text$mn:0000A288
.text$mn:0000A288                 push    ebp
.text$mn:0000A289                 mov     ebp, esp
.text$mn:0000A28B                 push    ecx
.text$mn:0000A28C                 mov     [ebp+var_4], ecx
.text$mn:0000A28F                 push    0
.text$mn:0000A291                 mov     eax, [ebp+arg_0]
.text$mn:0000A294                 push    eax
.text$mn:0000A295                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000A29A                 add     esp, 8
.text$mn:0000A29D                 mov     esp, ebp
.text$mn:0000A29F                 pop     ebp
.text$mn:0000A2A0                 retn    4
.text$mn:0000A2A0 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000A2A0
.text$mn:0000A2A0 ; ---------------------------------------------------------------------------
.text$mn:0000A2A3                 align 4
.text$mn:0000A2A3 _text$mn        ends
.text$mn:0000A2A3
.text$mn:0000A2A4 ; ===========================================================================
.text$mn:0000A2A4
.text$mn:0000A2A4 ; Segment type: Pure code
.text$mn:0000A2A4 ; Segment permissions: Read/Execute
.text$mn:0000A2A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2A4                 assume cs:_text$mn
.text$mn:0000A2A4                 ;org 0A2A4h
.text$mn:0000A2A4 ; COMDAT (pick any)
.text$mn:0000A2A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2A4
.text$mn:0000A2A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2A4
.text$mn:0000A2A4 ; Attributes: bp-based frame
.text$mn:0000A2A4
.text$mn:0000A2A4 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:0000A2A4                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:0000A2A4 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:0000A2A4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:0000A2A4
.text$mn:0000A2A4 var_4           = dword ptr -4
.text$mn:0000A2A4 arg_0           = dword ptr  8
.text$mn:0000A2A4
.text$mn:0000A2A4                 push    ebp
.text$mn:0000A2A5                 mov     ebp, esp
.text$mn:0000A2A7                 push    ecx
.text$mn:0000A2A8                 mov     [ebp+var_4], ecx
.text$mn:0000A2AB                 push    0
.text$mn:0000A2AD                 mov     eax, [ebp+arg_0]
.text$mn:0000A2B0                 push    eax
.text$mn:0000A2B1                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:0000A2B6                 add     esp, 8
.text$mn:0000A2B9                 mov     esp, ebp
.text$mn:0000A2BB                 pop     ebp
.text$mn:0000A2BC                 retn    4
.text$mn:0000A2BC ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000A2BC
.text$mn:0000A2BC ; ---------------------------------------------------------------------------
.text$mn:0000A2BF                 align 10h
.text$mn:0000A2BF _text$mn        ends
.text$mn:0000A2BF
.text$mn:0000A2C0 ; ===========================================================================
.text$mn:0000A2C0
.text$mn:0000A2C0 ; Segment type: Pure code
.text$mn:0000A2C0 ; Segment permissions: Read/Execute
.text$mn:0000A2C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2C0                 assume cs:_text$mn
.text$mn:0000A2C0                 ;org 0A2C0h
.text$mn:0000A2C0 ; COMDAT (pick any)
.text$mn:0000A2C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2C0
.text$mn:0000A2C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2C0
.text$mn:0000A2C0 ; Attributes: bp-based frame
.text$mn:0000A2C0
.text$mn:0000A2C0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000A2C0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000A2C0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000A2C0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:0000A2C0
.text$mn:0000A2C0 var_4           = dword ptr -4
.text$mn:0000A2C0 arg_0           = dword ptr  8
.text$mn:0000A2C0
.text$mn:0000A2C0                 push    ebp
.text$mn:0000A2C1                 mov     ebp, esp
.text$mn:0000A2C3                 push    ecx
.text$mn:0000A2C4                 mov     [ebp+var_4], ecx
.text$mn:0000A2C7                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A2CC                 push    eax
.text$mn:0000A2CD                 push    0
.text$mn:0000A2CF                 mov     ecx, [ebp+arg_0]
.text$mn:0000A2D2                 push    ecx
.text$mn:0000A2D3                 mov     ecx, [ebp+var_4]
.text$mn:0000A2D6                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A2DB                 mov     esp, ebp
.text$mn:0000A2DD                 pop     ebp
.text$mn:0000A2DE                 retn    4
.text$mn:0000A2DE ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000A2DE
.text$mn:0000A2DE ; ---------------------------------------------------------------------------
.text$mn:0000A2E1                 align 4
.text$mn:0000A2E1 _text$mn        ends
.text$mn:0000A2E1
.text$mn:0000A2E4 ; ===========================================================================
.text$mn:0000A2E4
.text$mn:0000A2E4 ; Segment type: Pure code
.text$mn:0000A2E4 ; Segment permissions: Read/Execute
.text$mn:0000A2E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2E4                 assume cs:_text$mn
.text$mn:0000A2E4                 ;org 0A2E4h
.text$mn:0000A2E4 ; COMDAT (pick any)
.text$mn:0000A2E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2E4
.text$mn:0000A2E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2E4
.text$mn:0000A2E4 ; Attributes: bp-based frame
.text$mn:0000A2E4
.text$mn:0000A2E4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000A2E4                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000A2E4 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000A2E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:0000A2E4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:0000A2E4
.text$mn:0000A2E4 var_8           = dword ptr -8
.text$mn:0000A2E4 var_4           = dword ptr -4
.text$mn:0000A2E4 arg_0           = dword ptr  8
.text$mn:0000A2E4 arg_4           = dword ptr  0Ch
.text$mn:0000A2E4 arg_8           = dword ptr  10h
.text$mn:0000A2E4
.text$mn:0000A2E4                 push    ebp
.text$mn:0000A2E5                 mov     ebp, esp
.text$mn:0000A2E7                 sub     esp, 8
.text$mn:0000A2EA                 mov     [ebp+var_4], ecx
.text$mn:0000A2ED                 mov     ecx, [ebp+arg_0]
.text$mn:0000A2F0                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A2F5                 cmp     eax, [ebp+arg_4]
.text$mn:0000A2F8                 jnb     short loc_A302
.text$mn:0000A2FA                 mov     ecx, [ebp+var_4]
.text$mn:0000A2FD                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A302
.text$mn:0000A302 loc_A302:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000A302                 mov     ecx, [ebp+arg_0]
.text$mn:0000A305                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A30A                 sub     eax, [ebp+arg_4]
.text$mn:0000A30D                 mov     [ebp+var_8], eax
.text$mn:0000A310                 mov     eax, [ebp+var_8]
.text$mn:0000A313                 cmp     eax, [ebp+arg_8]
.text$mn:0000A316                 jnb     short loc_A31E
.text$mn:0000A318                 mov     ecx, [ebp+var_8]
.text$mn:0000A31B                 mov     [ebp+arg_8], ecx
.text$mn:0000A31E
.text$mn:0000A31E loc_A31E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000A31E                 mov     edx, [ebp+var_4]
.text$mn:0000A321                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A326                 sub     eax, [edx+14h]
.text$mn:0000A329                 cmp     eax, [ebp+arg_8]
.text$mn:0000A32C                 ja      short loc_A336
.text$mn:0000A32E                 mov     ecx, [ebp+var_4]
.text$mn:0000A331                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000A336
.text$mn:0000A336 loc_A336:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:0000A336                 cmp     [ebp+arg_8], 0
.text$mn:0000A33A                 jbe     short loc_A396
.text$mn:0000A33C                 mov     ecx, [ebp+var_4]
.text$mn:0000A33F                 mov     edx, [ecx+14h]
.text$mn:0000A342                 add     edx, [ebp+arg_8]
.text$mn:0000A345                 mov     [ebp+var_8], edx
.text$mn:0000A348                 push    0
.text$mn:0000A34A                 mov     eax, [ebp+var_8]
.text$mn:0000A34D                 push    eax
.text$mn:0000A34E                 mov     ecx, [ebp+var_4]
.text$mn:0000A351                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A356                 movzx   ecx, al
.text$mn:0000A359                 test    ecx, ecx
.text$mn:0000A35B                 jz      short loc_A396
.text$mn:0000A35D                 mov     edx, [ebp+arg_8]
.text$mn:0000A360                 push    edx             ; int
.text$mn:0000A361                 mov     ecx, [ebp+arg_0]
.text$mn:0000A364                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A369                 mov     ecx, [ebp+arg_4]
.text$mn:0000A36C                 lea     edx, [eax+ecx*2]
.text$mn:0000A36F                 push    edx             ; Src
.text$mn:0000A370                 mov     ecx, [ebp+var_4]
.text$mn:0000A373                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A378                 mov     ecx, [ebp+var_4]
.text$mn:0000A37B                 mov     edx, [ecx+14h]
.text$mn:0000A37E                 lea     eax, [eax+edx*2]
.text$mn:0000A381                 push    eax             ; Dst
.text$mn:0000A382                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A387                 add     esp, 0Ch
.text$mn:0000A38A                 mov     ecx, [ebp+var_8]
.text$mn:0000A38D                 push    ecx
.text$mn:0000A38E                 mov     ecx, [ebp+var_4]
.text$mn:0000A391                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A396
.text$mn:0000A396 loc_A396:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:0000A396                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:0000A396                 mov     eax, [ebp+var_4]
.text$mn:0000A399                 mov     esp, ebp
.text$mn:0000A39B                 pop     ebp
.text$mn:0000A39C                 retn    0Ch
.text$mn:0000A39C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000A39C
.text$mn:0000A39C ; ---------------------------------------------------------------------------
.text$mn:0000A39F                 align 10h
.text$mn:0000A39F _text$mn        ends
.text$mn:0000A39F
.text$mn:0000A3A0 ; ===========================================================================
.text$mn:0000A3A0
.text$mn:0000A3A0 ; Segment type: Pure code
.text$mn:0000A3A0 ; Segment permissions: Read/Execute
.text$mn:0000A3A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A3A0                 assume cs:_text$mn
.text$mn:0000A3A0                 ;org 0A3A0h
.text$mn:0000A3A0 ; COMDAT (pick any)
.text$mn:0000A3A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3A0
.text$mn:0000A3A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3A0
.text$mn:0000A3A0 ; Attributes: bp-based frame
.text$mn:0000A3A0
.text$mn:0000A3A0 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:0000A3A0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000A3A0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000A3A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:0000A3A0
.text$mn:0000A3A0 var_4           = dword ptr -4
.text$mn:0000A3A0 Str             = dword ptr  8
.text$mn:0000A3A0
.text$mn:0000A3A0                 push    ebp
.text$mn:0000A3A1                 mov     ebp, esp
.text$mn:0000A3A3                 push    ecx
.text$mn:0000A3A4                 mov     [ebp+var_4], ecx
.text$mn:0000A3A7                 push    43Eh            ; unsigned int
.text$mn:0000A3AC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A3B1                 mov     eax, [ebp+Str]
.text$mn:0000A3B4                 push    eax             ; int
.text$mn:0000A3B5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A3BA                 add     esp, 0Ch
.text$mn:0000A3BD                 mov     ecx, [ebp+Str]
.text$mn:0000A3C0                 push    ecx             ; Str
.text$mn:0000A3C1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000A3C6                 add     esp, 4
.text$mn:0000A3C9                 push    eax             ; int
.text$mn:0000A3CA                 mov     edx, [ebp+Str]
.text$mn:0000A3CD                 push    edx             ; Src
.text$mn:0000A3CE                 mov     ecx, [ebp+var_4]
.text$mn:0000A3D1                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000A3D6                 mov     esp, ebp
.text$mn:0000A3D8                 pop     ebp
.text$mn:0000A3D9                 retn    4
.text$mn:0000A3D9 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000A3D9
.text$mn:0000A3D9 _text$mn        ends
.text$mn:0000A3D9
.text$mn:0000A3DC ; ===========================================================================
.text$mn:0000A3DC
.text$mn:0000A3DC ; Segment type: Pure code
.text$mn:0000A3DC ; Segment permissions: Read/Execute
.text$mn:0000A3DC _text$mn        segment para public 'CODE' use32
.text$mn:0000A3DC                 assume cs:_text$mn
.text$mn:0000A3DC                 ;org 0A3DCh
.text$mn:0000A3DC ; COMDAT (pick any)
.text$mn:0000A3DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3DC
.text$mn:0000A3DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3DC
.text$mn:0000A3DC ; Attributes: bp-based frame
.text$mn:0000A3DC
.text$mn:0000A3DC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:0000A3DC                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000A3DC ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000A3DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:0000A3DC
.text$mn:0000A3DC var_8           = dword ptr -8
.text$mn:0000A3DC var_4           = dword ptr -4
.text$mn:0000A3DC Src             = dword ptr  8
.text$mn:0000A3DC arg_4           = dword ptr  0Ch
.text$mn:0000A3DC
.text$mn:0000A3DC                 push    ebp
.text$mn:0000A3DD                 mov     ebp, esp
.text$mn:0000A3DF                 sub     esp, 8
.text$mn:0000A3E2                 mov     [ebp+var_4], ecx
.text$mn:0000A3E5                 cmp     [ebp+arg_4], 0
.text$mn:0000A3E9                 jz      short loc_A401
.text$mn:0000A3EB                 push    42Ah            ; unsigned int
.text$mn:0000A3F0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A3F5                 mov     eax, [ebp+Src]
.text$mn:0000A3F8                 push    eax             ; int
.text$mn:0000A3F9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A3FE                 add     esp, 0Ch
.text$mn:0000A401
.text$mn:0000A401 loc_A401:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:0000A401                 mov     ecx, [ebp+Src]
.text$mn:0000A404                 push    ecx
.text$mn:0000A405                 mov     ecx, [ebp+var_4]
.text$mn:0000A408                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000A40D                 movzx   edx, al
.text$mn:0000A410                 test    edx, edx
.text$mn:0000A412                 jz      short loc_A436
.text$mn:0000A414                 mov     eax, [ebp+arg_4]
.text$mn:0000A417                 push    eax
.text$mn:0000A418                 mov     ecx, [ebp+var_4]
.text$mn:0000A41B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A420                 mov     ecx, [ebp+Src]
.text$mn:0000A423                 sub     ecx, eax
.text$mn:0000A425                 sar     ecx, 1
.text$mn:0000A427                 push    ecx
.text$mn:0000A428                 mov     edx, [ebp+var_4]
.text$mn:0000A42B                 push    edx
.text$mn:0000A42C                 mov     ecx, [ebp+var_4]
.text$mn:0000A42F                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A434                 jmp     short loc_A4A7
.text$mn:0000A436 ; ---------------------------------------------------------------------------
.text$mn:0000A436
.text$mn:0000A436 loc_A436:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:0000A436                 mov     eax, [ebp+var_4]
.text$mn:0000A439                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A43F                 sub     ecx, [eax+14h]
.text$mn:0000A442                 cmp     ecx, [ebp+arg_4]
.text$mn:0000A445                 ja      short loc_A44F
.text$mn:0000A447                 mov     ecx, [ebp+var_4]
.text$mn:0000A44A                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000A44F
.text$mn:0000A44F loc_A44F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:0000A44F                 cmp     [ebp+arg_4], 0
.text$mn:0000A453                 jbe     short loc_A4A4
.text$mn:0000A455                 mov     edx, [ebp+var_4]
.text$mn:0000A458                 mov     eax, [edx+14h]
.text$mn:0000A45B                 add     eax, [ebp+arg_4]
.text$mn:0000A45E                 mov     [ebp+var_8], eax
.text$mn:0000A461                 push    0
.text$mn:0000A463                 mov     ecx, [ebp+var_8]
.text$mn:0000A466                 push    ecx
.text$mn:0000A467                 mov     ecx, [ebp+var_4]
.text$mn:0000A46A                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A46F                 movzx   edx, al
.text$mn:0000A472                 test    edx, edx
.text$mn:0000A474                 jz      short loc_A4A4
.text$mn:0000A476                 mov     eax, [ebp+arg_4]
.text$mn:0000A479                 push    eax             ; int
.text$mn:0000A47A                 mov     ecx, [ebp+Src]
.text$mn:0000A47D                 push    ecx             ; Src
.text$mn:0000A47E                 mov     ecx, [ebp+var_4]
.text$mn:0000A481                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A486                 mov     edx, [ebp+var_4]
.text$mn:0000A489                 mov     ecx, [edx+14h]
.text$mn:0000A48C                 lea     edx, [eax+ecx*2]
.text$mn:0000A48F                 push    edx             ; Dst
.text$mn:0000A490                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A495                 add     esp, 0Ch
.text$mn:0000A498                 mov     eax, [ebp+var_8]
.text$mn:0000A49B                 push    eax
.text$mn:0000A49C                 mov     ecx, [ebp+var_4]
.text$mn:0000A49F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A4A4
.text$mn:0000A4A4 loc_A4A4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:0000A4A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:0000A4A4                 mov     eax, [ebp+var_4]
.text$mn:0000A4A7
.text$mn:0000A4A7 loc_A4A7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:0000A4A7                 mov     esp, ebp
.text$mn:0000A4A9                 pop     ebp
.text$mn:0000A4AA                 retn    8
.text$mn:0000A4AA ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000A4AA
.text$mn:0000A4AA ; ---------------------------------------------------------------------------
.text$mn:0000A4AD                 align 10h
.text$mn:0000A4AD _text$mn        ends
.text$mn:0000A4AD
.text$mn:0000A4B0 ; ===========================================================================
.text$mn:0000A4B0
.text$mn:0000A4B0 ; Segment type: Pure code
.text$mn:0000A4B0 ; Segment permissions: Read/Execute
.text$mn:0000A4B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A4B0                 assume cs:_text$mn
.text$mn:0000A4B0                 ;org 0A4B0h
.text$mn:0000A4B0 ; COMDAT (pick any)
.text$mn:0000A4B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4B0
.text$mn:0000A4B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4B0
.text$mn:0000A4B0 ; Attributes: bp-based frame
.text$mn:0000A4B0
.text$mn:0000A4B0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:0000A4B0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000A4B0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000A4B0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:0000A4B0
.text$mn:0000A4B0 Size            = dword ptr -8
.text$mn:0000A4B0 var_4           = dword ptr -4
.text$mn:0000A4B0 arg_0           = dword ptr  8
.text$mn:0000A4B0 arg_4           = dword ptr  0Ch
.text$mn:0000A4B0 arg_8           = dword ptr  10h
.text$mn:0000A4B0
.text$mn:0000A4B0                 push    ebp
.text$mn:0000A4B1                 mov     ebp, esp
.text$mn:0000A4B3                 sub     esp, 8
.text$mn:0000A4B6                 mov     [ebp+var_4], ecx
.text$mn:0000A4B9                 mov     ecx, [ebp+arg_0]
.text$mn:0000A4BC                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000A4C1                 cmp     eax, [ebp+arg_4]
.text$mn:0000A4C4                 jnb     short loc_A4CE
.text$mn:0000A4C6                 mov     ecx, [ebp+var_4]
.text$mn:0000A4C9                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000A4CE
.text$mn:0000A4CE loc_A4CE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000A4CE                 mov     ecx, [ebp+arg_0]
.text$mn:0000A4D1                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000A4D6                 sub     eax, [ebp+arg_4]
.text$mn:0000A4D9                 mov     [ebp+Size], eax
.text$mn:0000A4DC                 mov     eax, [ebp+arg_8]
.text$mn:0000A4DF                 cmp     eax, [ebp+Size]
.text$mn:0000A4E2                 jnb     short loc_A4EA
.text$mn:0000A4E4                 mov     ecx, [ebp+arg_8]
.text$mn:0000A4E7                 mov     [ebp+Size], ecx
.text$mn:0000A4EA
.text$mn:0000A4EA loc_A4EA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000A4EA                 mov     edx, [ebp+var_4]
.text$mn:0000A4ED                 cmp     edx, [ebp+arg_0]
.text$mn:0000A4F0                 jnz     short loc_A511
.text$mn:0000A4F2                 mov     eax, [ebp+arg_4]
.text$mn:0000A4F5                 add     eax, [ebp+Size]
.text$mn:0000A4F8                 push    eax
.text$mn:0000A4F9                 mov     ecx, [ebp+var_4]
.text$mn:0000A4FC                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:0000A501                 mov     ecx, [ebp+arg_4]
.text$mn:0000A504                 push    ecx
.text$mn:0000A505                 push    0
.text$mn:0000A507                 mov     ecx, [ebp+var_4]
.text$mn:0000A50A                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:0000A50F                 jmp     short loc_A553
.text$mn:0000A511 ; ---------------------------------------------------------------------------
.text$mn:0000A511
.text$mn:0000A511 loc_A511:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:0000A511                 push    0
.text$mn:0000A513                 mov     edx, [ebp+Size]
.text$mn:0000A516                 push    edx
.text$mn:0000A517                 mov     ecx, [ebp+var_4]
.text$mn:0000A51A                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000A51F                 movzx   eax, al
.text$mn:0000A522                 test    eax, eax
.text$mn:0000A524                 jz      short loc_A553
.text$mn:0000A526                 mov     ecx, [ebp+Size]
.text$mn:0000A529                 push    ecx             ; Size
.text$mn:0000A52A                 mov     ecx, [ebp+arg_0]
.text$mn:0000A52D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A532                 add     eax, [ebp+arg_4]
.text$mn:0000A535                 push    eax             ; Src
.text$mn:0000A536                 mov     ecx, [ebp+var_4]
.text$mn:0000A539                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A53E                 push    eax             ; Dst
.text$mn:0000A53F                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000A544                 add     esp, 0Ch
.text$mn:0000A547                 mov     edx, [ebp+Size]
.text$mn:0000A54A                 push    edx
.text$mn:0000A54B                 mov     ecx, [ebp+var_4]
.text$mn:0000A54E                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A553
.text$mn:0000A553 loc_A553:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:0000A553                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:0000A553                 mov     eax, [ebp+var_4]
.text$mn:0000A556                 mov     esp, ebp
.text$mn:0000A558                 pop     ebp
.text$mn:0000A559                 retn    0Ch
.text$mn:0000A559 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000A559
.text$mn:0000A559 _text$mn        ends
.text$mn:0000A559
.text$mn:0000A55C ; ===========================================================================
.text$mn:0000A55C
.text$mn:0000A55C ; Segment type: Pure code
.text$mn:0000A55C ; Segment permissions: Read/Execute
.text$mn:0000A55C _text$mn        segment para public 'CODE' use32
.text$mn:0000A55C                 assume cs:_text$mn
.text$mn:0000A55C                 ;org 0A55Ch
.text$mn:0000A55C ; COMDAT (pick any)
.text$mn:0000A55C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A55C
.text$mn:0000A55C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A55C
.text$mn:0000A55C ; Attributes: bp-based frame
.text$mn:0000A55C
.text$mn:0000A55C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:0000A55C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:0000A55C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:0000A55C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:0000A55C
.text$mn:0000A55C var_4           = dword ptr -4
.text$mn:0000A55C Str             = dword ptr  8
.text$mn:0000A55C
.text$mn:0000A55C                 push    ebp
.text$mn:0000A55D                 mov     ebp, esp
.text$mn:0000A55F                 push    ecx
.text$mn:0000A560                 mov     [ebp+var_4], ecx
.text$mn:0000A563                 push    490h            ; unsigned int
.text$mn:0000A568                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A56D                 mov     eax, [ebp+Str]
.text$mn:0000A570                 push    eax             ; int
.text$mn:0000A571                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000A576                 add     esp, 0Ch
.text$mn:0000A579                 mov     ecx, [ebp+Str]
.text$mn:0000A57C                 push    ecx             ; Str
.text$mn:0000A57D                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000A582                 add     esp, 4
.text$mn:0000A585                 push    eax             ; Size
.text$mn:0000A586                 mov     edx, [ebp+Str]
.text$mn:0000A589                 push    edx             ; Src
.text$mn:0000A58A                 mov     ecx, [ebp+var_4]
.text$mn:0000A58D                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000A592                 mov     esp, ebp
.text$mn:0000A594                 pop     ebp
.text$mn:0000A595                 retn    4
.text$mn:0000A595 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:0000A595
.text$mn:0000A595 _text$mn        ends
.text$mn:0000A595
.text$mn:0000A598 ; ===========================================================================
.text$mn:0000A598
.text$mn:0000A598 ; Segment type: Pure code
.text$mn:0000A598 ; Segment permissions: Read/Execute
.text$mn:0000A598 _text$mn        segment para public 'CODE' use32
.text$mn:0000A598                 assume cs:_text$mn
.text$mn:0000A598                 ;org 0A598h
.text$mn:0000A598 ; COMDAT (pick any)
.text$mn:0000A598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A598
.text$mn:0000A598 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A598
.text$mn:0000A598 ; Attributes: bp-based frame
.text$mn:0000A598
.text$mn:0000A598 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:0000A598                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:0000A598 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:0000A598                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:0000A598
.text$mn:0000A598 var_4           = dword ptr -4
.text$mn:0000A598 Src             = dword ptr  8
.text$mn:0000A598 Size            = dword ptr  0Ch
.text$mn:0000A598
.text$mn:0000A598                 push    ebp
.text$mn:0000A599                 mov     ebp, esp
.text$mn:0000A59B                 push    ecx
.text$mn:0000A59C                 mov     [ebp+var_4], ecx
.text$mn:0000A59F                 cmp     [ebp+Size], 0
.text$mn:0000A5A3                 jz      short loc_A5BB
.text$mn:0000A5A5                 push    47Fh            ; unsigned int
.text$mn:0000A5AA                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A5AF                 mov     eax, [ebp+Src]
.text$mn:0000A5B2                 push    eax             ; int
.text$mn:0000A5B3                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000A5B8                 add     esp, 0Ch
.text$mn:0000A5BB
.text$mn:0000A5BB loc_A5BB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:0000A5BB                 mov     ecx, [ebp+Src]
.text$mn:0000A5BE                 push    ecx
.text$mn:0000A5BF                 mov     ecx, [ebp+var_4]
.text$mn:0000A5C2                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000A5C7                 movzx   edx, al
.text$mn:0000A5CA                 test    edx, edx
.text$mn:0000A5CC                 jz      short loc_A5EE
.text$mn:0000A5CE                 mov     eax, [ebp+Size]
.text$mn:0000A5D1                 push    eax
.text$mn:0000A5D2                 mov     ecx, [ebp+var_4]
.text$mn:0000A5D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A5DA                 mov     ecx, [ebp+Src]
.text$mn:0000A5DD                 sub     ecx, eax
.text$mn:0000A5DF                 push    ecx
.text$mn:0000A5E0                 mov     edx, [ebp+var_4]
.text$mn:0000A5E3                 push    edx
.text$mn:0000A5E4                 mov     ecx, [ebp+var_4]
.text$mn:0000A5E7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000A5EC                 jmp     short loc_A62B
.text$mn:0000A5EE ; ---------------------------------------------------------------------------
.text$mn:0000A5EE
.text$mn:0000A5EE loc_A5EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:0000A5EE                 push    0
.text$mn:0000A5F0                 mov     eax, [ebp+Size]
.text$mn:0000A5F3                 push    eax
.text$mn:0000A5F4                 mov     ecx, [ebp+var_4]
.text$mn:0000A5F7                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000A5FC                 movzx   ecx, al
.text$mn:0000A5FF                 test    ecx, ecx
.text$mn:0000A601                 jz      short loc_A628
.text$mn:0000A603                 mov     edx, [ebp+Size]
.text$mn:0000A606                 push    edx             ; Size
.text$mn:0000A607                 mov     eax, [ebp+Src]
.text$mn:0000A60A                 push    eax             ; Src
.text$mn:0000A60B                 mov     ecx, [ebp+var_4]
.text$mn:0000A60E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A613                 push    eax             ; Dst
.text$mn:0000A614                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000A619                 add     esp, 0Ch
.text$mn:0000A61C                 mov     ecx, [ebp+Size]
.text$mn:0000A61F                 push    ecx
.text$mn:0000A620                 mov     ecx, [ebp+var_4]
.text$mn:0000A623                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A628
.text$mn:0000A628 loc_A628:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:0000A628                 mov     eax, [ebp+var_4]
.text$mn:0000A62B
.text$mn:0000A62B loc_A62B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:0000A62B                 mov     esp, ebp
.text$mn:0000A62D                 pop     ebp
.text$mn:0000A62E                 retn    8
.text$mn:0000A62E ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:0000A62E
.text$mn:0000A62E ; ---------------------------------------------------------------------------
.text$mn:0000A631                 align 4
.text$mn:0000A631 _text$mn        ends
.text$mn:0000A631
.text$mn:0000A634 ; ===========================================================================
.text$mn:0000A634
.text$mn:0000A634 ; Segment type: Pure code
.text$mn:0000A634 ; Segment permissions: Read/Execute
.text$mn:0000A634 _text$mn        segment para public 'CODE' use32
.text$mn:0000A634                 assume cs:_text$mn
.text$mn:0000A634                 ;org 0A634h
.text$mn:0000A634 ; COMDAT (pick any)
.text$mn:0000A634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A634
.text$mn:0000A634 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A634
.text$mn:0000A634 ; Attributes: bp-based frame
.text$mn:0000A634
.text$mn:0000A634 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000A634                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000A634 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000A634                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:0000A634
.text$mn:0000A634 var_4           = dword ptr -4
.text$mn:0000A634 arg_0           = dword ptr  8
.text$mn:0000A634
.text$mn:0000A634                 push    ebp
.text$mn:0000A635                 mov     ebp, esp
.text$mn:0000A637                 push    ecx
.text$mn:0000A638                 mov     [ebp+var_4], ecx
.text$mn:0000A63B                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A640                 push    eax
.text$mn:0000A641                 push    0
.text$mn:0000A643                 mov     ecx, [ebp+arg_0]
.text$mn:0000A646                 push    ecx
.text$mn:0000A647                 mov     ecx, [ebp+var_4]
.text$mn:0000A64A                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A64F                 mov     esp, ebp
.text$mn:0000A651                 pop     ebp
.text$mn:0000A652                 retn    4
.text$mn:0000A652 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000A652
.text$mn:0000A652 ; ---------------------------------------------------------------------------
.text$mn:0000A655                 align 4
.text$mn:0000A655 _text$mn        ends
.text$mn:0000A655
.text$mn:0000A658 ; ===========================================================================
.text$mn:0000A658
.text$mn:0000A658 ; Segment type: Pure code
.text$mn:0000A658 ; Segment permissions: Read/Execute
.text$mn:0000A658 _text$mn        segment para public 'CODE' use32
.text$mn:0000A658                 assume cs:_text$mn
.text$mn:0000A658                 ;org 0A658h
.text$mn:0000A658 ; COMDAT (pick any)
.text$mn:0000A658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A658
.text$mn:0000A658 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A658
.text$mn:0000A658 ; Attributes: bp-based frame
.text$mn:0000A658
.text$mn:0000A658 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000A658                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000A658 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000A658                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:0000A658                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:0000A658
.text$mn:0000A658 var_8           = dword ptr -8
.text$mn:0000A658 var_4           = dword ptr -4
.text$mn:0000A658 arg_0           = dword ptr  8
.text$mn:0000A658 arg_4           = dword ptr  0Ch
.text$mn:0000A658 arg_8           = dword ptr  10h
.text$mn:0000A658
.text$mn:0000A658                 push    ebp
.text$mn:0000A659                 mov     ebp, esp
.text$mn:0000A65B                 sub     esp, 8
.text$mn:0000A65E                 mov     [ebp+var_4], ecx
.text$mn:0000A661                 mov     ecx, [ebp+arg_0]
.text$mn:0000A664                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A669                 cmp     eax, [ebp+arg_4]
.text$mn:0000A66C                 jnb     short loc_A676
.text$mn:0000A66E                 mov     ecx, [ebp+var_4]
.text$mn:0000A671                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A676
.text$mn:0000A676 loc_A676:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000A676                 mov     ecx, [ebp+arg_0]
.text$mn:0000A679                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A67E                 sub     eax, [ebp+arg_4]
.text$mn:0000A681                 mov     [ebp+var_8], eax
.text$mn:0000A684                 mov     eax, [ebp+arg_8]
.text$mn:0000A687                 cmp     eax, [ebp+var_8]
.text$mn:0000A68A                 jnb     short loc_A692
.text$mn:0000A68C                 mov     ecx, [ebp+arg_8]
.text$mn:0000A68F                 mov     [ebp+var_8], ecx
.text$mn:0000A692
.text$mn:0000A692 loc_A692:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000A692                 mov     edx, [ebp+var_4]
.text$mn:0000A695                 cmp     edx, [ebp+arg_0]
.text$mn:0000A698                 jnz     short loc_A6B9
.text$mn:0000A69A                 mov     eax, [ebp+arg_4]
.text$mn:0000A69D                 add     eax, [ebp+var_8]
.text$mn:0000A6A0                 push    eax
.text$mn:0000A6A1                 mov     ecx, [ebp+var_4]
.text$mn:0000A6A4                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:0000A6A9                 mov     ecx, [ebp+arg_4]
.text$mn:0000A6AC                 push    ecx
.text$mn:0000A6AD                 push    0
.text$mn:0000A6AF                 mov     ecx, [ebp+var_4]
.text$mn:0000A6B2                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000A6B7                 jmp     short loc_A6FE
.text$mn:0000A6B9 ; ---------------------------------------------------------------------------
.text$mn:0000A6B9
.text$mn:0000A6B9 loc_A6B9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:0000A6B9                 push    0
.text$mn:0000A6BB                 mov     edx, [ebp+var_8]
.text$mn:0000A6BE                 push    edx
.text$mn:0000A6BF                 mov     ecx, [ebp+var_4]
.text$mn:0000A6C2                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A6C7                 movzx   eax, al
.text$mn:0000A6CA                 test    eax, eax
.text$mn:0000A6CC                 jz      short loc_A6FE
.text$mn:0000A6CE                 mov     ecx, [ebp+var_8]
.text$mn:0000A6D1                 push    ecx             ; int
.text$mn:0000A6D2                 mov     ecx, [ebp+arg_0]
.text$mn:0000A6D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A6DA                 mov     edx, [ebp+arg_4]
.text$mn:0000A6DD                 lea     eax, [eax+edx*2]
.text$mn:0000A6E0                 push    eax             ; Src
.text$mn:0000A6E1                 mov     ecx, [ebp+var_4]
.text$mn:0000A6E4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A6E9                 push    eax             ; Dst
.text$mn:0000A6EA                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A6EF                 add     esp, 0Ch
.text$mn:0000A6F2                 mov     ecx, [ebp+var_8]
.text$mn:0000A6F5                 push    ecx
.text$mn:0000A6F6                 mov     ecx, [ebp+var_4]
.text$mn:0000A6F9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A6FE
.text$mn:0000A6FE loc_A6FE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:0000A6FE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:0000A6FE                 mov     eax, [ebp+var_4]
.text$mn:0000A701                 mov     esp, ebp
.text$mn:0000A703                 pop     ebp
.text$mn:0000A704                 retn    0Ch
.text$mn:0000A704 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000A704
.text$mn:0000A704 ; ---------------------------------------------------------------------------
.text$mn:0000A707                 align 4
.text$mn:0000A707 _text$mn        ends
.text$mn:0000A707
.text$mn:0000A708 ; ===========================================================================
.text$mn:0000A708
.text$mn:0000A708 ; Segment type: Pure code
.text$mn:0000A708 ; Segment permissions: Read/Execute
.text$mn:0000A708 _text$mn        segment para public 'CODE' use32
.text$mn:0000A708                 assume cs:_text$mn
.text$mn:0000A708                 ;org 0A708h
.text$mn:0000A708 ; COMDAT (pick any)
.text$mn:0000A708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A708
.text$mn:0000A708 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A708
.text$mn:0000A708 ; Attributes: bp-based frame
.text$mn:0000A708
.text$mn:0000A708 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:0000A708                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000A708 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000A708                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:0000A708                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:0000A708
.text$mn:0000A708 var_4           = dword ptr -4
.text$mn:0000A708 Str             = dword ptr  8
.text$mn:0000A708
.text$mn:0000A708                 push    ebp
.text$mn:0000A709                 mov     ebp, esp
.text$mn:0000A70B                 push    ecx
.text$mn:0000A70C                 mov     [ebp+var_4], ecx
.text$mn:0000A70F                 push    490h            ; unsigned int
.text$mn:0000A714                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A719                 mov     eax, [ebp+Str]
.text$mn:0000A71C                 push    eax             ; int
.text$mn:0000A71D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A722                 add     esp, 0Ch
.text$mn:0000A725                 mov     ecx, [ebp+Str]
.text$mn:0000A728                 push    ecx             ; Str
.text$mn:0000A729                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000A72E                 add     esp, 4
.text$mn:0000A731                 push    eax             ; int
.text$mn:0000A732                 mov     edx, [ebp+Str]
.text$mn:0000A735                 push    edx             ; Src
.text$mn:0000A736                 mov     ecx, [ebp+var_4]
.text$mn:0000A739                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000A73E                 mov     esp, ebp
.text$mn:0000A740                 pop     ebp
.text$mn:0000A741                 retn    4
.text$mn:0000A741 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000A741
.text$mn:0000A741 _text$mn        ends
.text$mn:0000A741
.text$mn:0000A744 ; ===========================================================================
.text$mn:0000A744
.text$mn:0000A744 ; Segment type: Pure code
.text$mn:0000A744 ; Segment permissions: Read/Execute
.text$mn:0000A744 _text$mn        segment para public 'CODE' use32
.text$mn:0000A744                 assume cs:_text$mn
.text$mn:0000A744                 ;org 0A744h
.text$mn:0000A744 ; COMDAT (pick any)
.text$mn:0000A744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A744
.text$mn:0000A744 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A744
.text$mn:0000A744 ; Attributes: bp-based frame
.text$mn:0000A744
.text$mn:0000A744 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:0000A744                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000A744 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000A744                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:0000A744
.text$mn:0000A744 var_4           = dword ptr -4
.text$mn:0000A744 Src             = dword ptr  8
.text$mn:0000A744 arg_4           = dword ptr  0Ch
.text$mn:0000A744
.text$mn:0000A744                 push    ebp
.text$mn:0000A745                 mov     ebp, esp
.text$mn:0000A747                 push    ecx
.text$mn:0000A748                 mov     [ebp+var_4], ecx
.text$mn:0000A74B                 cmp     [ebp+arg_4], 0
.text$mn:0000A74F                 jz      short loc_A767
.text$mn:0000A751                 push    47Fh            ; unsigned int
.text$mn:0000A756                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A75B                 mov     eax, [ebp+Src]
.text$mn:0000A75E                 push    eax             ; int
.text$mn:0000A75F                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A764                 add     esp, 0Ch
.text$mn:0000A767
.text$mn:0000A767 loc_A767:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:0000A767                 mov     ecx, [ebp+Src]
.text$mn:0000A76A                 push    ecx
.text$mn:0000A76B                 mov     ecx, [ebp+var_4]
.text$mn:0000A76E                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000A773                 movzx   edx, al
.text$mn:0000A776                 test    edx, edx
.text$mn:0000A778                 jz      short loc_A79C
.text$mn:0000A77A                 mov     eax, [ebp+arg_4]
.text$mn:0000A77D                 push    eax
.text$mn:0000A77E                 mov     ecx, [ebp+var_4]
.text$mn:0000A781                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A786                 mov     ecx, [ebp+Src]
.text$mn:0000A789                 sub     ecx, eax
.text$mn:0000A78B                 sar     ecx, 1
.text$mn:0000A78D                 push    ecx
.text$mn:0000A78E                 mov     edx, [ebp+var_4]
.text$mn:0000A791                 push    edx
.text$mn:0000A792                 mov     ecx, [ebp+var_4]
.text$mn:0000A795                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A79A                 jmp     short loc_A7D9
.text$mn:0000A79C ; ---------------------------------------------------------------------------
.text$mn:0000A79C
.text$mn:0000A79C loc_A79C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:0000A79C                 push    0
.text$mn:0000A79E                 mov     eax, [ebp+arg_4]
.text$mn:0000A7A1                 push    eax
.text$mn:0000A7A2                 mov     ecx, [ebp+var_4]
.text$mn:0000A7A5                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A7AA                 movzx   ecx, al
.text$mn:0000A7AD                 test    ecx, ecx
.text$mn:0000A7AF                 jz      short loc_A7D6
.text$mn:0000A7B1                 mov     edx, [ebp+arg_4]
.text$mn:0000A7B4                 push    edx             ; int
.text$mn:0000A7B5                 mov     eax, [ebp+Src]
.text$mn:0000A7B8                 push    eax             ; Src
.text$mn:0000A7B9                 mov     ecx, [ebp+var_4]
.text$mn:0000A7BC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A7C1                 push    eax             ; Dst
.text$mn:0000A7C2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A7C7                 add     esp, 0Ch
.text$mn:0000A7CA                 mov     ecx, [ebp+arg_4]
.text$mn:0000A7CD                 push    ecx
.text$mn:0000A7CE                 mov     ecx, [ebp+var_4]
.text$mn:0000A7D1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A7D6
.text$mn:0000A7D6 loc_A7D6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:0000A7D6                 mov     eax, [ebp+var_4]
.text$mn:0000A7D9
.text$mn:0000A7D9 loc_A7D9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:0000A7D9                 mov     esp, ebp
.text$mn:0000A7DB                 pop     ebp
.text$mn:0000A7DC                 retn    8
.text$mn:0000A7DC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000A7DC
.text$mn:0000A7DC ; ---------------------------------------------------------------------------
.text$mn:0000A7DF                 align 10h
.text$mn:0000A7DF _text$mn        ends
.text$mn:0000A7DF
.text$mn:0000A7E0 ; ===========================================================================
.text$mn:0000A7E0
.text$mn:0000A7E0 ; Segment type: Pure code
.text$mn:0000A7E0 ; Segment permissions: Read/Execute
.text$mn:0000A7E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7E0                 assume cs:_text$mn
.text$mn:0000A7E0                 ;org 0A7E0h
.text$mn:0000A7E0 ; COMDAT (pick any)
.text$mn:0000A7E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7E0
.text$mn:0000A7E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7E0
.text$mn:0000A7E0 ; Attributes: bp-based frame
.text$mn:0000A7E0
.text$mn:0000A7E0 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:0000A7E0                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:0000A7E0 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:0000A7E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:0000A7E0
.text$mn:0000A7E0 arg_0           = dword ptr  8
.text$mn:0000A7E0 arg_4           = dword ptr  0Ch
.text$mn:0000A7E0
.text$mn:0000A7E0                 push    ebp
.text$mn:0000A7E1                 mov     ebp, esp
.text$mn:0000A7E3                 mov     eax, [ebp+arg_0]
.text$mn:0000A7E6                 mov     ecx, [ebp+arg_4]
.text$mn:0000A7E9                 mov     dl, [ecx]
.text$mn:0000A7EB                 mov     [eax], dl
.text$mn:0000A7ED                 pop     ebp
.text$mn:0000A7EE                 retn
.text$mn:0000A7EE ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:0000A7EE
.text$mn:0000A7EE ; ---------------------------------------------------------------------------
.text$mn:0000A7EF                 align 10h
.text$mn:0000A7EF _text$mn        ends
.text$mn:0000A7EF
.text$mn:0000A7F0 ; ===========================================================================
.text$mn:0000A7F0
.text$mn:0000A7F0 ; Segment type: Pure code
.text$mn:0000A7F0 ; Segment permissions: Read/Execute
.text$mn:0000A7F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7F0                 assume cs:_text$mn
.text$mn:0000A7F0                 ;org 0A7F0h
.text$mn:0000A7F0 ; COMDAT (pick any)
.text$mn:0000A7F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7F0
.text$mn:0000A7F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7F0
.text$mn:0000A7F0 ; Attributes: bp-based frame
.text$mn:0000A7F0
.text$mn:0000A7F0 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:0000A7F0                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:0000A7F0 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:0000A7F0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:0000A7F0
.text$mn:0000A7F0 arg_0           = dword ptr  8
.text$mn:0000A7F0 arg_4           = dword ptr  0Ch
.text$mn:0000A7F0
.text$mn:0000A7F0                 push    ebp
.text$mn:0000A7F1                 mov     ebp, esp
.text$mn:0000A7F3                 mov     eax, [ebp+arg_0]
.text$mn:0000A7F6                 mov     ecx, [ebp+arg_4]
.text$mn:0000A7F9                 mov     dx, [ecx]
.text$mn:0000A7FC                 mov     [eax], dx
.text$mn:0000A7FF                 pop     ebp
.text$mn:0000A800                 retn
.text$mn:0000A800 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:0000A800
.text$mn:0000A800 ; ---------------------------------------------------------------------------
.text$mn:0000A801                 align 4
.text$mn:0000A801 _text$mn        ends
.text$mn:0000A801
.text$mn:0000A804 ; ===========================================================================
.text$mn:0000A804
.text$mn:0000A804 ; Segment type: Pure code
.text$mn:0000A804 ; Segment permissions: Read/Execute
.text$mn:0000A804 _text$mn        segment para public 'CODE' use32
.text$mn:0000A804                 assume cs:_text$mn
.text$mn:0000A804                 ;org 0A804h
.text$mn:0000A804 ; COMDAT (pick any)
.text$mn:0000A804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A804
.text$mn:0000A804 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A804
.text$mn:0000A804 ; Attributes: bp-based frame
.text$mn:0000A804
.text$mn:0000A804 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:0000A804                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000A804 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000A804                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:0000A804                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:0000A804
.text$mn:0000A804 var_14          = dword ptr -14h
.text$mn:0000A804 var_10          = dword ptr -10h
.text$mn:0000A804 var_C           = dword ptr -0Ch
.text$mn:0000A804 var_4           = dword ptr -4
.text$mn:0000A804 arg_0           = dword ptr  8
.text$mn:0000A804
.text$mn:0000A804                 push    ebp
.text$mn:0000A805                 mov     ebp, esp
.text$mn:0000A807                 push    0FFFFFFFFh
.text$mn:0000A809                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000A80E                 mov     eax, large fs:0
.text$mn:0000A814                 push    eax
.text$mn:0000A815                 sub     esp, 8
.text$mn:0000A818                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A81D                 xor     eax, ebp
.text$mn:0000A81F                 push    eax
.text$mn:0000A820                 lea     eax, [ebp+var_C]
.text$mn:0000A823                 mov     large fs:0, eax
.text$mn:0000A829                 mov     [ebp+var_10], ecx
.text$mn:0000A82C                 mov     [ebp+var_14], 0
.text$mn:0000A833                 mov     eax, [ebp+var_10]
.text$mn:0000A836                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000A837                 mov     ecx, [ebp+var_10]
.text$mn:0000A83A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A83F                 push    eax             ; int
.text$mn:0000A840                 mov     ecx, [ebp+arg_0]
.text$mn:0000A843                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000A848                 mov     [ebp+var_4], 0
.text$mn:0000A84F                 mov     ecx, [ebp+var_14]
.text$mn:0000A852                 or      ecx, 1
.text$mn:0000A855                 mov     [ebp+var_14], ecx
.text$mn:0000A858                 mov     eax, [ebp+arg_0]
.text$mn:0000A85B                 mov     ecx, [ebp+var_C]
.text$mn:0000A85E                 mov     large fs:0, ecx
.text$mn:0000A865                 pop     ecx
.text$mn:0000A866                 mov     esp, ebp
.text$mn:0000A868                 pop     ebp
.text$mn:0000A869                 retn    4
.text$mn:0000A869 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000A869
.text$mn:0000A869 _text$mn        ends
.text$mn:0000A869
.text$x:0000A86C ; ===========================================================================
.text$x:0000A86C
.text$x:0000A86C ; Segment type: Pure code
.text$x:0000A86C ; Segment permissions: Read/Execute
.text$x:0000A86C _text$x         segment para public 'CODE' use32
.text$x:0000A86C                 assume cs:_text$x
.text$x:0000A86C                 ;org 0A86Ch
.text$x:0000A86C ; COMDAT (pick associative to section at A804)
.text$x:0000A86C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A86C
.text$x:0000A86C ; =============== S U B R O U T I N E =======================================
.text$x:0000A86C
.text$x:0000A86C
.text$x:0000A86C __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000A86C                                         ; DATA XREF: .xdata$x:0000D0E4o
.text$x:0000A86C                 mov     eax, [ebp-14h]
.text$x:0000A86F                 and     eax, 1
.text$x:0000A872                 jz      $LN4
.text$x:0000A878                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000A87C                 mov     ecx, [ebp+8]
.text$x:0000A87F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A884 ; ---------------------------------------------------------------------------
.text$x:0000A884
.text$x:0000A884 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000A884                 retn
.text$x:0000A884 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000A884
.text$x:0000A885
.text$x:0000A885 ; =============== S U B R O U T I N E =======================================
.text$x:0000A885
.text$x:0000A885
.text$x:0000A885 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000A885                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:0000A885
.text$x:0000A885 arg_4           = dword ptr  8
.text$x:0000A885
.text$x:0000A885                 mov     edx, [esp+arg_4]
.text$x:0000A889                 lea     eax, [edx+0Ch]
.text$x:0000A88C                 mov     ecx, [edx-0Ch]
.text$x:0000A88F                 xor     ecx, eax
.text$x:0000A891                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A896                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000A89B                 jmp     ___CxxFrameHandler3
.text$x:0000A89B __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000A89B
.text$x:0000A89B _text$x         ends
.text$x:0000A89B
.text$mn:0000A8A0 ; ===========================================================================
.text$mn:0000A8A0
.text$mn:0000A8A0 ; Segment type: Pure code
.text$mn:0000A8A0 ; Segment permissions: Read/Execute
.text$mn:0000A8A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A8A0                 assume cs:_text$mn
.text$mn:0000A8A0                 ;org 0A8A0h
.text$mn:0000A8A0 ; COMDAT (pick any)
.text$mn:0000A8A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A8A0
.text$mn:0000A8A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A8A0
.text$mn:0000A8A0 ; Attributes: bp-based frame
.text$mn:0000A8A0
.text$mn:0000A8A0 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>> __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::begin(void)const
.text$mn:0000A8A0                 public ?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$mn:0000A8A0 ?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ proc near
.text$mn:0000A8A0                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+A7p
.text$mn:0000A8A0
.text$mn:0000A8A0 var_14          = dword ptr -14h
.text$mn:0000A8A0 var_10          = dword ptr -10h
.text$mn:0000A8A0 var_C           = dword ptr -0Ch
.text$mn:0000A8A0 var_4           = dword ptr -4
.text$mn:0000A8A0 arg_0           = dword ptr  8
.text$mn:0000A8A0
.text$mn:0000A8A0                 push    ebp
.text$mn:0000A8A1                 mov     ebp, esp
.text$mn:0000A8A3                 push    0FFFFFFFFh
.text$mn:0000A8A5                 push    offset __ehhandler$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$mn:0000A8AA                 mov     eax, large fs:0
.text$mn:0000A8B0                 push    eax
.text$mn:0000A8B1                 sub     esp, 8
.text$mn:0000A8B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A8B9                 xor     eax, ebp
.text$mn:0000A8BB                 push    eax
.text$mn:0000A8BC                 lea     eax, [ebp+var_C]
.text$mn:0000A8BF                 mov     large fs:0, eax
.text$mn:0000A8C5                 mov     [ebp+var_10], ecx
.text$mn:0000A8C8                 mov     [ebp+var_14], 0
.text$mn:0000A8CF                 mov     eax, [ebp+var_10]
.text$mn:0000A8D2                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000A8D3                 mov     ecx, [ebp+var_10]
.text$mn:0000A8D6                 mov     edx, [ecx+4]
.text$mn:0000A8D9                 push    edx             ; int
.text$mn:0000A8DA                 mov     ecx, [ebp+arg_0]
.text$mn:0000A8DD                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(TreeStateNode *,std::_Container_base12 const *)
.text$mn:0000A8E2                 mov     [ebp+var_4], 0
.text$mn:0000A8E9                 mov     eax, [ebp+var_14]
.text$mn:0000A8EC                 or      eax, 1
.text$mn:0000A8EF                 mov     [ebp+var_14], eax
.text$mn:0000A8F2                 mov     eax, [ebp+arg_0]
.text$mn:0000A8F5                 mov     ecx, [ebp+var_C]
.text$mn:0000A8F8                 mov     large fs:0, ecx
.text$mn:0000A8FF                 pop     ecx
.text$mn:0000A900                 mov     esp, ebp
.text$mn:0000A902                 pop     ebp
.text$mn:0000A903                 retn    4
.text$mn:0000A903 ?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ endp
.text$mn:0000A903
.text$mn:0000A903 ; ---------------------------------------------------------------------------
.text$mn:0000A906                 align 4
.text$mn:0000A906 _text$mn        ends
.text$mn:0000A906
.text$x:0000A908 ; ===========================================================================
.text$x:0000A908
.text$x:0000A908 ; Segment type: Pure code
.text$x:0000A908 ; Segment permissions: Read/Execute
.text$x:0000A908 _text$x         segment para public 'CODE' use32
.text$x:0000A908                 assume cs:_text$x
.text$x:0000A908                 ;org 0A908h
.text$x:0000A908 ; COMDAT (pick associative to section at A8A0)
.text$x:0000A908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A908
.text$x:0000A908 ; =============== S U B R O U T I N E =======================================
.text$x:0000A908
.text$x:0000A908
.text$x:0000A908 __unwindfunclet$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000A908                                         ; DATA XREF: .xdata$x:0000D72Co
.text$x:0000A908                 mov     eax, [ebp-14h]
.text$x:0000A90B                 and     eax, 1
.text$x:0000A90E                 jz      $LN4_4
.text$x:0000A914                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000A918                 mov     ecx, [ebp+8]
.text$x:0000A91B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:0000A920 ; ---------------------------------------------------------------------------
.text$x:0000A920
.text$x:0000A920 $LN4_4:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0+6j
.text$x:0000A920                 retn
.text$x:0000A920 __unwindfunclet$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0 endp
.text$x:0000A920
.text$x:0000A921
.text$x:0000A921 ; =============== S U B R O U T I N E =======================================
.text$x:0000A921
.text$x:0000A921
.text$x:0000A921 __ehhandler$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ proc near
.text$x:0000A921                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::begin(void)+5o
.text$x:0000A921
.text$x:0000A921 arg_4           = dword ptr  8
.text$x:0000A921
.text$x:0000A921                 mov     edx, [esp+arg_4]
.text$x:0000A925                 lea     eax, [edx+0Ch]
.text$x:0000A928                 mov     ecx, [edx-0Ch]
.text$x:0000A92B                 xor     ecx, eax
.text$x:0000A92D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A932                 mov     eax, offset __ehfuncinfo$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$x:0000A937                 jmp     ___CxxFrameHandler3
.text$x:0000A937 __ehhandler$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ endp
.text$x:0000A937
.text$x:0000A937 _text$x         ends
.text$x:0000A937
.text$mn:0000A93C ; ===========================================================================
.text$mn:0000A93C
.text$mn:0000A93C ; Segment type: Pure code
.text$mn:0000A93C ; Segment permissions: Read/Execute
.text$mn:0000A93C _text$mn        segment para public 'CODE' use32
.text$mn:0000A93C                 assume cs:_text$mn
.text$mn:0000A93C                 ;org 0A93Ch
.text$mn:0000A93C ; COMDAT (pick any)
.text$mn:0000A93C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A93C
.text$mn:0000A93C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A93C
.text$mn:0000A93C ; Attributes: bp-based frame
.text$mn:0000A93C
.text$mn:0000A93C ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::begin(void)
.text$mn:0000A93C                 public ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000A93C ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000A93C                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+1BFp
.text$mn:0000A93C
.text$mn:0000A93C var_14          = dword ptr -14h
.text$mn:0000A93C var_10          = dword ptr -10h
.text$mn:0000A93C var_C           = dword ptr -0Ch
.text$mn:0000A93C var_4           = dword ptr -4
.text$mn:0000A93C arg_0           = dword ptr  8
.text$mn:0000A93C
.text$mn:0000A93C                 push    ebp
.text$mn:0000A93D                 mov     ebp, esp
.text$mn:0000A93F                 push    0FFFFFFFFh
.text$mn:0000A941                 push    offset __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000A946                 mov     eax, large fs:0
.text$mn:0000A94C                 push    eax
.text$mn:0000A94D                 sub     esp, 8
.text$mn:0000A950                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A955                 xor     eax, ebp
.text$mn:0000A957                 push    eax
.text$mn:0000A958                 lea     eax, [ebp+var_C]
.text$mn:0000A95B                 mov     large fs:0, eax
.text$mn:0000A961                 mov     [ebp+var_10], ecx
.text$mn:0000A964                 mov     [ebp+var_14], 0
.text$mn:0000A96B                 mov     eax, [ebp+var_10]
.text$mn:0000A96E                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000A96F                 mov     ecx, [ebp+var_10]
.text$mn:0000A972                 mov     edx, [ecx+4]
.text$mn:0000A975                 push    edx             ; int
.text$mn:0000A976                 mov     ecx, [ebp+arg_0]
.text$mn:0000A979                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000A97E                 mov     [ebp+var_4], 0
.text$mn:0000A985                 mov     eax, [ebp+var_14]
.text$mn:0000A988                 or      eax, 1
.text$mn:0000A98B                 mov     [ebp+var_14], eax
.text$mn:0000A98E                 mov     eax, [ebp+arg_0]
.text$mn:0000A991                 mov     ecx, [ebp+var_C]
.text$mn:0000A994                 mov     large fs:0, ecx
.text$mn:0000A99B                 pop     ecx
.text$mn:0000A99C                 mov     esp, ebp
.text$mn:0000A99E                 pop     ebp
.text$mn:0000A99F                 retn    4
.text$mn:0000A99F ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000A99F
.text$mn:0000A99F ; ---------------------------------------------------------------------------
.text$mn:0000A9A2                 align 4
.text$mn:0000A9A2 _text$mn        ends
.text$mn:0000A9A2
.text$x:0000A9A4 ; ===========================================================================
.text$x:0000A9A4
.text$x:0000A9A4 ; Segment type: Pure code
.text$x:0000A9A4 ; Segment permissions: Read/Execute
.text$x:0000A9A4 _text$x         segment para public 'CODE' use32
.text$x:0000A9A4                 assume cs:_text$x
.text$x:0000A9A4                 ;org 0A9A4h
.text$x:0000A9A4 ; COMDAT (pick associative to section at A93C)
.text$x:0000A9A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A9A4
.text$x:0000A9A4 ; =============== S U B R O U T I N E =======================================
.text$x:0000A9A4
.text$x:0000A9A4
.text$x:0000A9A4 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000A9A4                                         ; DATA XREF: .xdata$x:0000D3A8o
.text$x:0000A9A4                 mov     eax, [ebp-14h]
.text$x:0000A9A7                 and     eax, 1
.text$x:0000A9AA                 jz      $LN4_1
.text$x:0000A9B0                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000A9B4                 mov     ecx, [ebp+8]
.text$x:0000A9B7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000A9BC ; ---------------------------------------------------------------------------
.text$x:0000A9BC
.text$x:0000A9BC $LN4_1:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000A9BC                 retn
.text$x:0000A9BC __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000A9BC
.text$x:0000A9BD
.text$x:0000A9BD ; =============== S U B R O U T I N E =======================================
.text$x:0000A9BD
.text$x:0000A9BD
.text$x:0000A9BD __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000A9BD                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+5o
.text$x:0000A9BD
.text$x:0000A9BD arg_4           = dword ptr  8
.text$x:0000A9BD
.text$x:0000A9BD                 mov     edx, [esp+arg_4]
.text$x:0000A9C1                 lea     eax, [edx+0Ch]
.text$x:0000A9C4                 mov     ecx, [edx-0Ch]
.text$x:0000A9C7                 xor     ecx, eax
.text$x:0000A9C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A9CE                 mov     eax, offset __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000A9D3                 jmp     ___CxxFrameHandler3
.text$x:0000A9D3 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000A9D3
.text$x:0000A9D3 _text$x         ends
.text$x:0000A9D3
.text$mn:0000A9D8 ; ===========================================================================
.text$mn:0000A9D8
.text$mn:0000A9D8 ; Segment type: Pure code
.text$mn:0000A9D8 ; Segment permissions: Read/Execute
.text$mn:0000A9D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9D8                 assume cs:_text$mn
.text$mn:0000A9D8                 ;org 0A9D8h
.text$mn:0000A9D8 ; COMDAT (pick any)
.text$mn:0000A9D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9D8
.text$mn:0000A9D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9D8
.text$mn:0000A9D8 ; Attributes: bp-based frame
.text$mn:0000A9D8
.text$mn:0000A9D8 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::begin(void)const
.text$mn:0000A9D8                 public ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000A9D8 ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000A9D8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+A7p
.text$mn:0000A9D8
.text$mn:0000A9D8 var_14          = dword ptr -14h
.text$mn:0000A9D8 var_10          = dword ptr -10h
.text$mn:0000A9D8 var_C           = dword ptr -0Ch
.text$mn:0000A9D8 var_4           = dword ptr -4
.text$mn:0000A9D8 arg_0           = dword ptr  8
.text$mn:0000A9D8
.text$mn:0000A9D8                 push    ebp
.text$mn:0000A9D9                 mov     ebp, esp
.text$mn:0000A9DB                 push    0FFFFFFFFh
.text$mn:0000A9DD                 push    offset __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000A9E2                 mov     eax, large fs:0
.text$mn:0000A9E8                 push    eax
.text$mn:0000A9E9                 sub     esp, 8
.text$mn:0000A9EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A9F1                 xor     eax, ebp
.text$mn:0000A9F3                 push    eax
.text$mn:0000A9F4                 lea     eax, [ebp+var_C]
.text$mn:0000A9F7                 mov     large fs:0, eax
.text$mn:0000A9FD                 mov     [ebp+var_10], ecx
.text$mn:0000AA00                 mov     [ebp+var_14], 0
.text$mn:0000AA07                 mov     eax, [ebp+var_10]
.text$mn:0000AA0A                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000AA0B                 mov     ecx, [ebp+var_10]
.text$mn:0000AA0E                 mov     edx, [ecx+4]
.text$mn:0000AA11                 push    edx             ; int
.text$mn:0000AA12                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA15                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000AA1A                 mov     [ebp+var_4], 0
.text$mn:0000AA21                 mov     eax, [ebp+var_14]
.text$mn:0000AA24                 or      eax, 1
.text$mn:0000AA27                 mov     [ebp+var_14], eax
.text$mn:0000AA2A                 mov     eax, [ebp+arg_0]
.text$mn:0000AA2D                 mov     ecx, [ebp+var_C]
.text$mn:0000AA30                 mov     large fs:0, ecx
.text$mn:0000AA37                 pop     ecx
.text$mn:0000AA38                 mov     esp, ebp
.text$mn:0000AA3A                 pop     ebp
.text$mn:0000AA3B                 retn    4
.text$mn:0000AA3B ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000AA3B
.text$mn:0000AA3B ; ---------------------------------------------------------------------------
.text$mn:0000AA3E                 align 10h
.text$mn:0000AA3E _text$mn        ends
.text$mn:0000AA3E
.text$x:0000AA40 ; ===========================================================================
.text$x:0000AA40
.text$x:0000AA40 ; Segment type: Pure code
.text$x:0000AA40 ; Segment permissions: Read/Execute
.text$x:0000AA40 _text$x         segment para public 'CODE' use32
.text$x:0000AA40                 assume cs:_text$x
.text$x:0000AA40                 ;org 0AA40h
.text$x:0000AA40 ; COMDAT (pick associative to section at A9D8)
.text$x:0000AA40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AA40
.text$x:0000AA40 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA40
.text$x:0000AA40
.text$x:0000AA40 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000AA40                                         ; DATA XREF: .xdata$x:0000D3D4o
.text$x:0000AA40                 mov     eax, [ebp-14h]
.text$x:0000AA43                 and     eax, 1
.text$x:0000AA46                 jz      $LN4_2
.text$x:0000AA4C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000AA50                 mov     ecx, [ebp+8]
.text$x:0000AA53                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000AA58 ; ---------------------------------------------------------------------------
.text$x:0000AA58
.text$x:0000AA58 $LN4_2:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000AA58                 retn
.text$x:0000AA58 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000AA58
.text$x:0000AA59
.text$x:0000AA59 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA59
.text$x:0000AA59
.text$x:0000AA59 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000AA59                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+5o
.text$x:0000AA59
.text$x:0000AA59 arg_4           = dword ptr  8
.text$x:0000AA59
.text$x:0000AA59                 mov     edx, [esp+arg_4]
.text$x:0000AA5D                 lea     eax, [edx+0Ch]
.text$x:0000AA60                 mov     ecx, [edx-0Ch]
.text$x:0000AA63                 xor     ecx, eax
.text$x:0000AA65                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AA6A                 mov     eax, offset __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000AA6F                 jmp     ___CxxFrameHandler3
.text$x:0000AA6F __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000AA6F
.text$x:0000AA6F _text$x         ends
.text$x:0000AA6F
.text$mn:0000AA74 ; ===========================================================================
.text$mn:0000AA74
.text$mn:0000AA74 ; Segment type: Pure code
.text$mn:0000AA74 ; Segment permissions: Read/Execute
.text$mn:0000AA74 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA74                 assume cs:_text$mn
.text$mn:0000AA74                 ;org 0AA74h
.text$mn:0000AA74 ; COMDAT (pick any)
.text$mn:0000AA74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA74
.text$mn:0000AA74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA74
.text$mn:0000AA74 ; Attributes: bp-based frame
.text$mn:0000AA74
.text$mn:0000AA74 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:0000AA74                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:0000AA74 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:0000AA74                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+D4p
.text$mn:0000AA74                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+147p ...
.text$mn:0000AA74
.text$mn:0000AA74 var_4           = dword ptr -4
.text$mn:0000AA74
.text$mn:0000AA74                 push    ebp
.text$mn:0000AA75                 mov     ebp, esp
.text$mn:0000AA77                 push    ecx
.text$mn:0000AA78                 mov     [ebp+var_4], ecx
.text$mn:0000AA7B                 mov     ecx, [ebp+var_4]
.text$mn:0000AA7E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AA83                 mov     esp, ebp
.text$mn:0000AA85                 pop     ebp
.text$mn:0000AA86                 retn
.text$mn:0000AA86 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:0000AA86
.text$mn:0000AA86 ; ---------------------------------------------------------------------------
.text$mn:0000AA87                 align 4
.text$mn:0000AA87 _text$mn        ends
.text$mn:0000AA87
.text$mn:0000AA88 ; ===========================================================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Segment type: Pure code
.text$mn:0000AA88 ; Segment permissions: Read/Execute
.text$mn:0000AA88 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA88                 assume cs:_text$mn
.text$mn:0000AA88                 ;org 0AA88h
.text$mn:0000AA88 ; COMDAT (pick any)
.text$mn:0000AA88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA88
.text$mn:0000AA88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Attributes: bp-based frame
.text$mn:0000AA88
.text$mn:0000AA88 ; public: unsigned int __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::capacity(void)const
.text$mn:0000AA88                 public ?capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ
.text$mn:0000AA88 ?capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ proc near
.text$mn:0000AA88                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)+Cp
.text$mn:0000AA88
.text$mn:0000AA88 var_4           = dword ptr -4
.text$mn:0000AA88
.text$mn:0000AA88                 push    ebp
.text$mn:0000AA89                 mov     ebp, esp
.text$mn:0000AA8B                 push    ecx
.text$mn:0000AA8C                 mov     [ebp+var_4], ecx
.text$mn:0000AA8F                 mov     eax, [ebp+var_4]
.text$mn:0000AA92                 mov     ecx, [ebp+var_4]
.text$mn:0000AA95                 mov     eax, [eax+0Ch]
.text$mn:0000AA98                 sub     eax, [ecx+4]
.text$mn:0000AA9B                 cdq
.text$mn:0000AA9C                 mov     ecx, 6Ch ; 'l'
.text$mn:0000AAA1                 idiv    ecx
.text$mn:0000AAA3                 mov     esp, ebp
.text$mn:0000AAA5                 pop     ebp
.text$mn:0000AAA6                 retn
.text$mn:0000AAA6 ?capacity@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ endp
.text$mn:0000AAA6
.text$mn:0000AAA6 ; ---------------------------------------------------------------------------
.text$mn:0000AAA7                 align 4
.text$mn:0000AAA7 _text$mn        ends
.text$mn:0000AAA7
.text$mn:0000AAA8 ; ===========================================================================
.text$mn:0000AAA8
.text$mn:0000AAA8 ; Segment type: Pure code
.text$mn:0000AAA8 ; Segment permissions: Read/Execute
.text$mn:0000AAA8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAA8                 assume cs:_text$mn
.text$mn:0000AAA8                 ;org 0AAA8h
.text$mn:0000AAA8 ; COMDAT (pick any)
.text$mn:0000AAA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAA8
.text$mn:0000AAA8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAA8
.text$mn:0000AAA8 ; Attributes: bp-based frame
.text$mn:0000AAA8
.text$mn:0000AAA8 ; public: unsigned int __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::capacity(void)const
.text$mn:0000AAA8                 public ?capacity@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ
.text$mn:0000AAA8 ?capacity@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ proc near
.text$mn:0000AAA8                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+11Bp
.text$mn:0000AAA8
.text$mn:0000AAA8 var_4           = dword ptr -4
.text$mn:0000AAA8
.text$mn:0000AAA8                 push    ebp
.text$mn:0000AAA9                 mov     ebp, esp
.text$mn:0000AAAB                 push    ecx
.text$mn:0000AAAC                 mov     [ebp+var_4], ecx
.text$mn:0000AAAF                 mov     eax, [ebp+var_4]
.text$mn:0000AAB2                 mov     ecx, [ebp+var_4]
.text$mn:0000AAB5                 mov     eax, [eax+0Ch]
.text$mn:0000AAB8                 sub     eax, [ecx+4]
.text$mn:0000AABB                 cdq
.text$mn:0000AABC                 mov     ecx, 4Ch ; 'L'
.text$mn:0000AAC1                 idiv    ecx
.text$mn:0000AAC3                 mov     esp, ebp
.text$mn:0000AAC5                 pop     ebp
.text$mn:0000AAC6                 retn
.text$mn:0000AAC6 ?capacity@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ endp
.text$mn:0000AAC6
.text$mn:0000AAC6 ; ---------------------------------------------------------------------------
.text$mn:0000AAC7                 align 4
.text$mn:0000AAC7 _text$mn        ends
.text$mn:0000AAC7
.text$mn:0000AAC8 ; ===========================================================================
.text$mn:0000AAC8
.text$mn:0000AAC8 ; Segment type: Pure code
.text$mn:0000AAC8 ; Segment permissions: Read/Execute
.text$mn:0000AAC8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAC8                 assume cs:_text$mn
.text$mn:0000AAC8                 ;org 0AAC8h
.text$mn:0000AAC8 ; COMDAT (pick any)
.text$mn:0000AAC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAC8
.text$mn:0000AAC8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAC8
.text$mn:0000AAC8 ; Attributes: bp-based frame
.text$mn:0000AAC8
.text$mn:0000AAC8 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:0000AAC8                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:0000AAC8 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000AAC8                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:0000AAC8
.text$mn:0000AAC8 var_4           = dword ptr -4
.text$mn:0000AAC8
.text$mn:0000AAC8                 push    ebp
.text$mn:0000AAC9                 mov     ebp, esp
.text$mn:0000AACB                 push    ecx
.text$mn:0000AACC                 mov     [ebp+var_4], ecx
.text$mn:0000AACF                 mov     eax, [ebp+var_4]
.text$mn:0000AAD2                 mov     eax, [eax+4]
.text$mn:0000AAD5                 mov     esp, ebp
.text$mn:0000AAD7                 pop     ebp
.text$mn:0000AAD8                 retn
.text$mn:0000AAD8 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000AAD8
.text$mn:0000AAD8 ; ---------------------------------------------------------------------------
.text$mn:0000AAD9                 align 4
.text$mn:0000AAD9 _text$mn        ends
.text$mn:0000AAD9
.text$mn:0000AADC ; ===========================================================================
.text$mn:0000AADC
.text$mn:0000AADC ; Segment type: Pure code
.text$mn:0000AADC ; Segment permissions: Read/Execute
.text$mn:0000AADC _text$mn        segment para public 'CODE' use32
.text$mn:0000AADC                 assume cs:_text$mn
.text$mn:0000AADC                 ;org 0AADCh
.text$mn:0000AADC ; COMDAT (pick any)
.text$mn:0000AADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AADC
.text$mn:0000AADC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AADC
.text$mn:0000AADC ; Attributes: bp-based frame
.text$mn:0000AADC
.text$mn:0000AADC ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:0000AADC                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:0000AADC ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000AADC                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:0000AADC                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:0000AADC
.text$mn:0000AADC var_4           = dword ptr -4
.text$mn:0000AADC
.text$mn:0000AADC                 push    ebp
.text$mn:0000AADD                 mov     ebp, esp
.text$mn:0000AADF                 push    ecx
.text$mn:0000AAE0                 mov     [ebp+var_4], ecx
.text$mn:0000AAE3                 mov     eax, [ebp+var_4]
.text$mn:0000AAE6                 mov     eax, [eax+4]
.text$mn:0000AAE9                 mov     esp, ebp
.text$mn:0000AAEB                 pop     ebp
.text$mn:0000AAEC                 retn
.text$mn:0000AAEC ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000AAEC
.text$mn:0000AAEC ; ---------------------------------------------------------------------------
.text$mn:0000AAED                 align 10h
.text$mn:0000AAED _text$mn        ends
.text$mn:0000AAED
.text$mn:0000AAF0 ; ===========================================================================
.text$mn:0000AAF0
.text$mn:0000AAF0 ; Segment type: Pure code
.text$mn:0000AAF0 ; Segment permissions: Read/Execute
.text$mn:0000AAF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAF0                 assume cs:_text$mn
.text$mn:0000AAF0                 ;org 0AAF0h
.text$mn:0000AAF0 ; COMDAT (pick any)
.text$mn:0000AAF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAF0
.text$mn:0000AAF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAF0
.text$mn:0000AAF0 ; Attributes: bp-based frame
.text$mn:0000AAF0
.text$mn:0000AAF0 ; public: void __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::clear(void)
.text$mn:0000AAF0                 public ?clear@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXXZ
.text$mn:0000AAF0 ?clear@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXXZ proc near
.text$mn:0000AAF0                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+9Fp
.text$mn:0000AAF0
.text$mn:0000AAF0 var_4           = dword ptr -4
.text$mn:0000AAF0
.text$mn:0000AAF0                 push    ebp
.text$mn:0000AAF1                 mov     ebp, esp
.text$mn:0000AAF3                 push    ecx
.text$mn:0000AAF4                 mov     [ebp+var_4], ecx
.text$mn:0000AAF7                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AAFA                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000AAFF                 mov     eax, [ebp+var_4]
.text$mn:0000AB02                 mov     ecx, [eax+8]
.text$mn:0000AB05                 push    ecx
.text$mn:0000AB06                 mov     edx, [ebp+var_4]
.text$mn:0000AB09                 mov     eax, [edx+4]
.text$mn:0000AB0C                 push    eax
.text$mn:0000AB0D                 mov     ecx, [ebp+var_4]
.text$mn:0000AB10                 call    ?_Destroy@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEXPAUTreeStateNode@@0@Z ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Destroy(TreeStateNode *,TreeStateNode *)
.text$mn:0000AB15                 mov     ecx, [ebp+var_4]
.text$mn:0000AB18                 mov     edx, [ebp+var_4]
.text$mn:0000AB1B                 mov     eax, [edx+4]
.text$mn:0000AB1E                 mov     [ecx+8], eax
.text$mn:0000AB21                 mov     esp, ebp
.text$mn:0000AB23                 pop     ebp
.text$mn:0000AB24                 retn
.text$mn:0000AB24 ?clear@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXXZ endp
.text$mn:0000AB24
.text$mn:0000AB24 ; ---------------------------------------------------------------------------
.text$mn:0000AB25                 align 4
.text$mn:0000AB25 _text$mn        ends
.text$mn:0000AB25
.text$mn:0000AB28 ; ===========================================================================
.text$mn:0000AB28
.text$mn:0000AB28 ; Segment type: Pure code
.text$mn:0000AB28 ; Segment permissions: Read/Execute
.text$mn:0000AB28 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB28                 assume cs:_text$mn
.text$mn:0000AB28                 ;org 0AB28h
.text$mn:0000AB28 ; COMDAT (pick any)
.text$mn:0000AB28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB28
.text$mn:0000AB28 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB28
.text$mn:0000AB28 ; Attributes: bp-based frame
.text$mn:0000AB28
.text$mn:0000AB28 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:0000AB28                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:0000AB28 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:0000AB28                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:0000AB28
.text$mn:0000AB28 var_4           = dword ptr -4
.text$mn:0000AB28 arg_0           = dword ptr  8
.text$mn:0000AB28
.text$mn:0000AB28                 push    ebp
.text$mn:0000AB29                 mov     ebp, esp
.text$mn:0000AB2B                 push    ecx
.text$mn:0000AB2C                 mov     [ebp+var_4], ecx
.text$mn:0000AB2F                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB32                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000AB37                 push    eax
.text$mn:0000AB38                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB3B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AB40                 push    eax
.text$mn:0000AB41                 mov     eax, [ebp+var_4]
.text$mn:0000AB44                 mov     ecx, [eax+14h]
.text$mn:0000AB47                 push    ecx
.text$mn:0000AB48                 push    0
.text$mn:0000AB4A                 mov     ecx, [ebp+var_4]
.text$mn:0000AB4D                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000AB52                 mov     esp, ebp
.text$mn:0000AB54                 pop     ebp
.text$mn:0000AB55                 retn    4
.text$mn:0000AB55 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:0000AB55
.text$mn:0000AB55 _text$mn        ends
.text$mn:0000AB55
.text$mn:0000AB58 ; ===========================================================================
.text$mn:0000AB58
.text$mn:0000AB58 ; Segment type: Pure code
.text$mn:0000AB58 ; Segment permissions: Read/Execute
.text$mn:0000AB58 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB58                 assume cs:_text$mn
.text$mn:0000AB58                 ;org 0AB58h
.text$mn:0000AB58 ; COMDAT (pick any)
.text$mn:0000AB58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB58
.text$mn:0000AB58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB58
.text$mn:0000AB58 ; Attributes: bp-based frame
.text$mn:0000AB58
.text$mn:0000AB58 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:0000AB58                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:0000AB58 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:0000AB58                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:0000AB58
.text$mn:0000AB58 var_18          = dword ptr -18h
.text$mn:0000AB58 var_14          = dword ptr -14h
.text$mn:0000AB58 var_10          = dword ptr -10h
.text$mn:0000AB58 var_C           = dword ptr -0Ch
.text$mn:0000AB58 var_8           = dword ptr -8
.text$mn:0000AB58 var_4           = dword ptr -4
.text$mn:0000AB58 arg_0           = dword ptr  8
.text$mn:0000AB58 arg_4           = dword ptr  0Ch
.text$mn:0000AB58 arg_8           = dword ptr  10h
.text$mn:0000AB58 arg_C           = dword ptr  14h
.text$mn:0000AB58
.text$mn:0000AB58                 push    ebp
.text$mn:0000AB59                 mov     ebp, esp
.text$mn:0000AB5B                 sub     esp, 18h
.text$mn:0000AB5E                 mov     [ebp+var_4], ecx
.text$mn:0000AB61                 cmp     [ebp+arg_C], 0
.text$mn:0000AB65                 jz      short loc_AB7D
.text$mn:0000AB67                 push    87Dh            ; unsigned int
.text$mn:0000AB6C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AB71                 mov     eax, [ebp+arg_8]
.text$mn:0000AB74                 push    eax             ; int
.text$mn:0000AB75                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000AB7A                 add     esp, 0Ch
.text$mn:0000AB7D
.text$mn:0000AB7D loc_AB7D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000AB7D                 mov     ecx, [ebp+var_4]
.text$mn:0000AB80                 mov     edx, [ecx+14h]
.text$mn:0000AB83                 cmp     edx, [ebp+arg_0]
.text$mn:0000AB86                 jnb     short loc_AB90
.text$mn:0000AB88                 mov     ecx, [ebp+var_4]
.text$mn:0000AB8B                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000AB90
.text$mn:0000AB90 loc_AB90:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:0000AB90                 mov     eax, [ebp+var_4]
.text$mn:0000AB93                 mov     ecx, [eax+14h]
.text$mn:0000AB96                 sub     ecx, [ebp+arg_0]
.text$mn:0000AB99                 cmp     ecx, [ebp+arg_4]
.text$mn:0000AB9C                 jnb     short loc_ABAA
.text$mn:0000AB9E                 mov     edx, [ebp+var_4]
.text$mn:0000ABA1                 mov     eax, [edx+14h]
.text$mn:0000ABA4                 sub     eax, [ebp+arg_0]
.text$mn:0000ABA7                 mov     [ebp+arg_4], eax
.text$mn:0000ABAA
.text$mn:0000ABAA loc_ABAA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:0000ABAA                 mov     ecx, [ebp+arg_4]
.text$mn:0000ABAD                 cmp     ecx, [ebp+arg_C]
.text$mn:0000ABB0                 jnb     short loc_ABBA
.text$mn:0000ABB2                 mov     edx, [ebp+arg_4]
.text$mn:0000ABB5                 mov     [ebp+var_8], edx
.text$mn:0000ABB8                 jmp     short loc_ABC0
.text$mn:0000ABBA ; ---------------------------------------------------------------------------
.text$mn:0000ABBA
.text$mn:0000ABBA loc_ABBA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:0000ABBA                 mov     eax, [ebp+arg_C]
.text$mn:0000ABBD                 mov     [ebp+var_8], eax
.text$mn:0000ABC0
.text$mn:0000ABC0 loc_ABC0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000ABC0                 mov     ecx, [ebp+var_8]
.text$mn:0000ABC3                 push    ecx
.text$mn:0000ABC4                 mov     edx, [ebp+arg_8]
.text$mn:0000ABC7                 push    edx
.text$mn:0000ABC8                 mov     ecx, [ebp+var_4]
.text$mn:0000ABCB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000ABD0                 mov     ecx, [ebp+arg_0]
.text$mn:0000ABD3                 lea     edx, [eax+ecx*2]
.text$mn:0000ABD6                 push    edx
.text$mn:0000ABD7                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000ABDC                 add     esp, 0Ch
.text$mn:0000ABDF                 mov     [ebp+var_C], eax
.text$mn:0000ABE2                 cmp     [ebp+var_C], 0
.text$mn:0000ABE6                 jz      short loc_ABF0
.text$mn:0000ABE8                 mov     eax, [ebp+var_C]
.text$mn:0000ABEB                 mov     [ebp+var_18], eax
.text$mn:0000ABEE                 jmp     short loc_AC25
.text$mn:0000ABF0 ; ---------------------------------------------------------------------------
.text$mn:0000ABF0
.text$mn:0000ABF0 loc_ABF0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:0000ABF0                 mov     ecx, [ebp+arg_4]
.text$mn:0000ABF3                 cmp     ecx, [ebp+arg_C]
.text$mn:0000ABF6                 jnb     short loc_AC01
.text$mn:0000ABF8                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000ABFF                 jmp     short loc_AC1F
.text$mn:0000AC01 ; ---------------------------------------------------------------------------
.text$mn:0000AC01
.text$mn:0000AC01 loc_AC01:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:0000AC01                 mov     edx, [ebp+arg_4]
.text$mn:0000AC04                 cmp     edx, [ebp+arg_C]
.text$mn:0000AC07                 jnz     short loc_AC12
.text$mn:0000AC09                 mov     [ebp+var_10], 0
.text$mn:0000AC10                 jmp     short loc_AC19
.text$mn:0000AC12 ; ---------------------------------------------------------------------------
.text$mn:0000AC12
.text$mn:0000AC12 loc_AC12:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000AC12                 mov     [ebp+var_10], 1
.text$mn:0000AC19
.text$mn:0000AC19 loc_AC19:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:0000AC19                 mov     eax, [ebp+var_10]
.text$mn:0000AC1C                 mov     [ebp+var_14], eax
.text$mn:0000AC1F
.text$mn:0000AC1F loc_AC1F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000AC1F                 mov     ecx, [ebp+var_14]
.text$mn:0000AC22                 mov     [ebp+var_18], ecx
.text$mn:0000AC25
.text$mn:0000AC25 loc_AC25:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000AC25                 mov     eax, [ebp+var_18]
.text$mn:0000AC28                 mov     esp, ebp
.text$mn:0000AC2A                 pop     ebp
.text$mn:0000AC2B                 retn    10h
.text$mn:0000AC2B ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000AC2B
.text$mn:0000AC2B ; ---------------------------------------------------------------------------
.text$mn:0000AC2E                 align 10h
.text$mn:0000AC2E _text$mn        ends
.text$mn:0000AC2E
.text$mn:0000AC30 ; ===========================================================================
.text$mn:0000AC30
.text$mn:0000AC30 ; Segment type: Pure code
.text$mn:0000AC30 ; Segment permissions: Read/Execute
.text$mn:0000AC30 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC30                 assume cs:_text$mn
.text$mn:0000AC30                 ;org 0AC30h
.text$mn:0000AC30 ; COMDAT (pick any)
.text$mn:0000AC30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC30
.text$mn:0000AC30 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC30
.text$mn:0000AC30 ; Attributes: bp-based frame
.text$mn:0000AC30
.text$mn:0000AC30 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:0000AC30                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:0000AC30 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:0000AC30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:0000AC30
.text$mn:0000AC30 var_4           = dword ptr -4
.text$mn:0000AC30 arg_0           = dword ptr  8
.text$mn:0000AC30 arg_4           = dword ptr  0Ch
.text$mn:0000AC30 arg_8           = dword ptr  10h
.text$mn:0000AC30
.text$mn:0000AC30                 push    ebp
.text$mn:0000AC31                 mov     ebp, esp
.text$mn:0000AC33                 push    ecx
.text$mn:0000AC34                 cmp     [ebp+arg_8], 0
.text$mn:0000AC38                 jnz     short loc_AC43
.text$mn:0000AC3A                 mov     [ebp+var_4], 0
.text$mn:0000AC41                 jmp     short loc_AC5A
.text$mn:0000AC43 ; ---------------------------------------------------------------------------
.text$mn:0000AC43
.text$mn:0000AC43 loc_AC43:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:0000AC43                 mov     eax, [ebp+arg_8]
.text$mn:0000AC46                 push    eax
.text$mn:0000AC47                 mov     ecx, [ebp+arg_4]
.text$mn:0000AC4A                 push    ecx
.text$mn:0000AC4B                 mov     edx, [ebp+arg_0]
.text$mn:0000AC4E                 push    edx
.text$mn:0000AC4F                 call    _wmemcmp
.text$mn:0000AC54                 add     esp, 0Ch
.text$mn:0000AC57                 mov     [ebp+var_4], eax
.text$mn:0000AC5A
.text$mn:0000AC5A loc_AC5A:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000AC5A                 mov     eax, [ebp+var_4]
.text$mn:0000AC5D                 mov     esp, ebp
.text$mn:0000AC5F                 pop     ebp
.text$mn:0000AC60                 retn
.text$mn:0000AC60 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:0000AC60
.text$mn:0000AC60 ; ---------------------------------------------------------------------------
.text$mn:0000AC61                 align 4
.text$mn:0000AC61 _text$mn        ends
.text$mn:0000AC61
.text$mn:0000AC64 ; ===========================================================================
.text$mn:0000AC64
.text$mn:0000AC64 ; Segment type: Pure code
.text$mn:0000AC64 ; Segment permissions: Read/Execute
.text$mn:0000AC64 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC64                 assume cs:_text$mn
.text$mn:0000AC64                 ;org 0AC64h
.text$mn:0000AC64 ; COMDAT (pick any)
.text$mn:0000AC64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC64
.text$mn:0000AC64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC64
.text$mn:0000AC64 ; Attributes: bp-based frame
.text$mn:0000AC64
.text$mn:0000AC64 ; int __stdcall std::allocator<TreeParams>::construct(void *, int)
.text$mn:0000AC64                 public ?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z
.text$mn:0000AC64 ?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z proc near
.text$mn:0000AC64                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(std::allocator<TreeParams> &,TreeParams *,TreeParams const &)+17p
.text$mn:0000AC64
.text$mn:0000AC64 var_1C          = dword ptr -1Ch
.text$mn:0000AC64 var_18          = dword ptr -18h
.text$mn:0000AC64 var_14          = dword ptr -14h
.text$mn:0000AC64 var_10          = dword ptr -10h
.text$mn:0000AC64 var_C           = dword ptr -0Ch
.text$mn:0000AC64 var_4           = dword ptr -4
.text$mn:0000AC64 arg_0           = dword ptr  8
.text$mn:0000AC64 arg_4           = dword ptr  0Ch
.text$mn:0000AC64
.text$mn:0000AC64                 push    ebp
.text$mn:0000AC65                 mov     ebp, esp
.text$mn:0000AC67                 push    0FFFFFFFFh
.text$mn:0000AC69                 push    offset __ehhandler$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z
.text$mn:0000AC6E                 mov     eax, large fs:0
.text$mn:0000AC74                 push    eax
.text$mn:0000AC75                 sub     esp, 10h
.text$mn:0000AC78                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AC7D                 xor     eax, ebp
.text$mn:0000AC7F                 push    eax
.text$mn:0000AC80                 lea     eax, [ebp+var_C]
.text$mn:0000AC83                 mov     large fs:0, eax
.text$mn:0000AC89                 mov     [ebp+var_18], ecx
.text$mn:0000AC8C                 mov     eax, [ebp+arg_0]
.text$mn:0000AC8F                 push    eax             ; void *
.text$mn:0000AC90                 push    6Ch ; 'l'       ; unsigned int
.text$mn:0000AC92                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000AC97                 add     esp, 8
.text$mn:0000AC9A                 mov     [ebp+var_10], eax
.text$mn:0000AC9D                 mov     [ebp+var_4], 0
.text$mn:0000ACA4                 cmp     [ebp+var_10], 0
.text$mn:0000ACA8                 jz      short loc_ACBB
.text$mn:0000ACAA                 mov     ecx, [ebp+arg_4]
.text$mn:0000ACAD                 push    ecx
.text$mn:0000ACAE                 mov     ecx, [ebp+var_10]
.text$mn:0000ACB1                 call    ??0TreeParams@@QAE@ABU0@@Z ; TreeParams::TreeParams(TreeParams const &)
.text$mn:0000ACB6                 mov     [ebp+var_14], eax
.text$mn:0000ACB9                 jmp     short loc_ACC2
.text$mn:0000ACBB ; ---------------------------------------------------------------------------
.text$mn:0000ACBB
.text$mn:0000ACBB loc_ACBB:                               ; CODE XREF: std::allocator<TreeParams>::construct(TreeParams *,TreeParams const &)+44j
.text$mn:0000ACBB                 mov     [ebp+var_14], 0
.text$mn:0000ACC2
.text$mn:0000ACC2 loc_ACC2:                               ; CODE XREF: std::allocator<TreeParams>::construct(TreeParams *,TreeParams const &)+55j
.text$mn:0000ACC2                 mov     edx, [ebp+var_14]
.text$mn:0000ACC5                 mov     [ebp+var_1C], edx
.text$mn:0000ACC8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000ACCF                 mov     ecx, [ebp+var_C]
.text$mn:0000ACD2                 mov     large fs:0, ecx
.text$mn:0000ACD9                 pop     ecx
.text$mn:0000ACDA                 mov     esp, ebp
.text$mn:0000ACDC                 pop     ebp
.text$mn:0000ACDD                 retn    8
.text$mn:0000ACDD ?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z endp
.text$mn:0000ACDD
.text$mn:0000ACDD _text$mn        ends
.text$mn:0000ACDD
.text$x:0000ACE0 ; ===========================================================================
.text$x:0000ACE0
.text$x:0000ACE0 ; Segment type: Pure code
.text$x:0000ACE0 ; Segment permissions: Read/Execute
.text$x:0000ACE0 _text$x         segment para public 'CODE' use32
.text$x:0000ACE0                 assume cs:_text$x
.text$x:0000ACE0                 ;org 0ACE0h
.text$x:0000ACE0 ; COMDAT (pick associative to section at AC64)
.text$x:0000ACE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000ACE0
.text$x:0000ACE0 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACE0
.text$x:0000ACE0
.text$x:0000ACE0 __unwindfunclet$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z$0 proc near
.text$x:0000ACE0                                         ; DATA XREF: .xdata$x:0000DB84o
.text$x:0000ACE0                 mov     eax, [ebp+8]
.text$x:0000ACE3                 push    eax
.text$x:0000ACE4                 mov     eax, [ebp-10h]
.text$x:0000ACE7                 push    eax             ; void *
.text$x:0000ACE8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000ACED                 add     esp, 8
.text$x:0000ACF0                 retn
.text$x:0000ACF0 __unwindfunclet$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z$0 endp
.text$x:0000ACF0
.text$x:0000ACF1
.text$x:0000ACF1 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACF1
.text$x:0000ACF1
.text$x:0000ACF1 __ehhandler$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z proc near
.text$x:0000ACF1                                         ; DATA XREF: std::allocator<TreeParams>::construct(TreeParams *,TreeParams const &)+5o
.text$x:0000ACF1
.text$x:0000ACF1 arg_4           = dword ptr  8
.text$x:0000ACF1
.text$x:0000ACF1                 mov     edx, [esp+arg_4]
.text$x:0000ACF5                 lea     eax, [edx+0Ch]
.text$x:0000ACF8                 mov     ecx, [edx-14h]
.text$x:0000ACFB                 xor     ecx, eax
.text$x:0000ACFD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AD02                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z
.text$x:0000AD07                 jmp     ___CxxFrameHandler3
.text$x:0000AD07 __ehhandler$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z endp
.text$x:0000AD07
.text$x:0000AD07 _text$x         ends
.text$x:0000AD07
.text$mn:0000AD0C ; ===========================================================================
.text$mn:0000AD0C
.text$mn:0000AD0C ; Segment type: Pure code
.text$mn:0000AD0C ; Segment permissions: Read/Execute
.text$mn:0000AD0C _text$mn        segment para public 'CODE' use32
.text$mn:0000AD0C                 assume cs:_text$mn
.text$mn:0000AD0C                 ;org 0AD0Ch
.text$mn:0000AD0C ; COMDAT (pick any)
.text$mn:0000AD0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD0C
.text$mn:0000AD0C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD0C
.text$mn:0000AD0C ; Attributes: bp-based frame
.text$mn:0000AD0C
.text$mn:0000AD0C ; int __stdcall std::allocator<TreeStateNode>::construct(void *, int)
.text$mn:0000AD0C                 public ?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z
.text$mn:0000AD0C ?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z proc near
.text$mn:0000AD0C                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeStateNode>>::construct<TreeStateNode,TreeStateNode const &>(std::allocator<TreeStateNode> &,TreeStateNode *,TreeStateNode const &)+17p
.text$mn:0000AD0C
.text$mn:0000AD0C var_1C          = dword ptr -1Ch
.text$mn:0000AD0C var_18          = dword ptr -18h
.text$mn:0000AD0C var_14          = dword ptr -14h
.text$mn:0000AD0C var_10          = dword ptr -10h
.text$mn:0000AD0C var_C           = dword ptr -0Ch
.text$mn:0000AD0C var_4           = dword ptr -4
.text$mn:0000AD0C arg_0           = dword ptr  8
.text$mn:0000AD0C arg_4           = dword ptr  0Ch
.text$mn:0000AD0C
.text$mn:0000AD0C                 push    ebp
.text$mn:0000AD0D                 mov     ebp, esp
.text$mn:0000AD0F                 push    0FFFFFFFFh
.text$mn:0000AD11                 push    offset __ehhandler$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z
.text$mn:0000AD16                 mov     eax, large fs:0
.text$mn:0000AD1C                 push    eax
.text$mn:0000AD1D                 sub     esp, 10h
.text$mn:0000AD20                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AD25                 xor     eax, ebp
.text$mn:0000AD27                 push    eax
.text$mn:0000AD28                 lea     eax, [ebp+var_C]
.text$mn:0000AD2B                 mov     large fs:0, eax
.text$mn:0000AD31                 mov     [ebp+var_18], ecx
.text$mn:0000AD34                 mov     eax, [ebp+arg_0]
.text$mn:0000AD37                 push    eax             ; void *
.text$mn:0000AD38                 push    4Ch ; 'L'       ; unsigned int
.text$mn:0000AD3A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000AD3F                 add     esp, 8
.text$mn:0000AD42                 mov     [ebp+var_10], eax
.text$mn:0000AD45                 mov     [ebp+var_4], 0
.text$mn:0000AD4C                 cmp     [ebp+var_10], 0
.text$mn:0000AD50                 jz      short loc_AD63
.text$mn:0000AD52                 mov     ecx, [ebp+arg_4]
.text$mn:0000AD55                 push    ecx
.text$mn:0000AD56                 mov     ecx, [ebp+var_10]
.text$mn:0000AD59                 call    ??0TreeStateNode@@QAE@ABU0@@Z ; TreeStateNode::TreeStateNode(TreeStateNode const &)
.text$mn:0000AD5E                 mov     [ebp+var_14], eax
.text$mn:0000AD61                 jmp     short loc_AD6A
.text$mn:0000AD63 ; ---------------------------------------------------------------------------
.text$mn:0000AD63
.text$mn:0000AD63 loc_AD63:                               ; CODE XREF: std::allocator<TreeStateNode>::construct(TreeStateNode *,TreeStateNode const &)+44j
.text$mn:0000AD63                 mov     [ebp+var_14], 0
.text$mn:0000AD6A
.text$mn:0000AD6A loc_AD6A:                               ; CODE XREF: std::allocator<TreeStateNode>::construct(TreeStateNode *,TreeStateNode const &)+55j
.text$mn:0000AD6A                 mov     edx, [ebp+var_14]
.text$mn:0000AD6D                 mov     [ebp+var_1C], edx
.text$mn:0000AD70                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000AD77                 mov     ecx, [ebp+var_C]
.text$mn:0000AD7A                 mov     large fs:0, ecx
.text$mn:0000AD81                 pop     ecx
.text$mn:0000AD82                 mov     esp, ebp
.text$mn:0000AD84                 pop     ebp
.text$mn:0000AD85                 retn    8
.text$mn:0000AD85 ?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z endp
.text$mn:0000AD85
.text$mn:0000AD85 _text$mn        ends
.text$mn:0000AD85
.text$x:0000AD88 ; ===========================================================================
.text$x:0000AD88
.text$x:0000AD88 ; Segment type: Pure code
.text$x:0000AD88 ; Segment permissions: Read/Execute
.text$x:0000AD88 _text$x         segment para public 'CODE' use32
.text$x:0000AD88                 assume cs:_text$x
.text$x:0000AD88                 ;org 0AD88h
.text$x:0000AD88 ; COMDAT (pick associative to section at AD0C)
.text$x:0000AD88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AD88
.text$x:0000AD88 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD88
.text$x:0000AD88
.text$x:0000AD88 __unwindfunclet$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z$0 proc near
.text$x:0000AD88                                         ; DATA XREF: .xdata$x:0000D530o
.text$x:0000AD88                 mov     eax, [ebp+8]
.text$x:0000AD8B                 push    eax
.text$x:0000AD8C                 mov     eax, [ebp-10h]
.text$x:0000AD8F                 push    eax             ; void *
.text$x:0000AD90                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000AD95                 add     esp, 8
.text$x:0000AD98                 retn
.text$x:0000AD98 __unwindfunclet$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z$0 endp
.text$x:0000AD98
.text$x:0000AD99
.text$x:0000AD99 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD99
.text$x:0000AD99
.text$x:0000AD99 __ehhandler$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z proc near
.text$x:0000AD99                                         ; DATA XREF: std::allocator<TreeStateNode>::construct(TreeStateNode *,TreeStateNode const &)+5o
.text$x:0000AD99
.text$x:0000AD99 arg_4           = dword ptr  8
.text$x:0000AD99
.text$x:0000AD99                 mov     edx, [esp+arg_4]
.text$x:0000AD9D                 lea     eax, [edx+0Ch]
.text$x:0000ADA0                 mov     ecx, [edx-14h]
.text$x:0000ADA3                 xor     ecx, eax
.text$x:0000ADA5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ADAA                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z
.text$x:0000ADAF                 jmp     ___CxxFrameHandler3
.text$x:0000ADAF __ehhandler$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z endp
.text$x:0000ADAF
.text$x:0000ADAF _text$x         ends
.text$x:0000ADAF
.text$mn:0000ADB4 ; ===========================================================================
.text$mn:0000ADB4
.text$mn:0000ADB4 ; Segment type: Pure code
.text$mn:0000ADB4 ; Segment permissions: Read/Execute
.text$mn:0000ADB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADB4                 assume cs:_text$mn
.text$mn:0000ADB4                 ;org 0ADB4h
.text$mn:0000ADB4 ; COMDAT (pick any)
.text$mn:0000ADB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADB4
.text$mn:0000ADB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADB4
.text$mn:0000ADB4 ; Attributes: bp-based frame
.text$mn:0000ADB4
.text$mn:0000ADB4 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(void *, int)
.text$mn:0000ADB4                 public ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000ADB4 ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$mn:0000ADB4                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+17p
.text$mn:0000ADB4
.text$mn:0000ADB4 var_1C          = dword ptr -1Ch
.text$mn:0000ADB4 var_18          = dword ptr -18h
.text$mn:0000ADB4 var_14          = dword ptr -14h
.text$mn:0000ADB4 var_10          = dword ptr -10h
.text$mn:0000ADB4 var_C           = dword ptr -0Ch
.text$mn:0000ADB4 var_4           = dword ptr -4
.text$mn:0000ADB4 arg_0           = dword ptr  8
.text$mn:0000ADB4 arg_4           = dword ptr  0Ch
.text$mn:0000ADB4
.text$mn:0000ADB4                 push    ebp
.text$mn:0000ADB5                 mov     ebp, esp
.text$mn:0000ADB7                 push    0FFFFFFFFh
.text$mn:0000ADB9                 push    offset __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000ADBE                 mov     eax, large fs:0
.text$mn:0000ADC4                 push    eax
.text$mn:0000ADC5                 sub     esp, 10h
.text$mn:0000ADC8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000ADCD                 xor     eax, ebp
.text$mn:0000ADCF                 push    eax
.text$mn:0000ADD0                 lea     eax, [ebp+var_C]
.text$mn:0000ADD3                 mov     large fs:0, eax
.text$mn:0000ADD9                 mov     [ebp+var_18], ecx
.text$mn:0000ADDC                 mov     eax, [ebp+arg_0]
.text$mn:0000ADDF                 push    eax             ; void *
.text$mn:0000ADE0                 push    1Ch             ; unsigned int
.text$mn:0000ADE2                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000ADE7                 add     esp, 8
.text$mn:0000ADEA                 mov     [ebp+var_10], eax
.text$mn:0000ADED                 mov     [ebp+var_4], 0
.text$mn:0000ADF4                 cmp     [ebp+var_10], 0
.text$mn:0000ADF8                 jz      short loc_AE0B
.text$mn:0000ADFA                 mov     ecx, [ebp+arg_4]
.text$mn:0000ADFD                 push    ecx
.text$mn:0000ADFE                 mov     ecx, [ebp+var_10]
.text$mn:0000AE01                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000AE06                 mov     [ebp+var_14], eax
.text$mn:0000AE09                 jmp     short loc_AE12
.text$mn:0000AE0B ; ---------------------------------------------------------------------------
.text$mn:0000AE0B
.text$mn:0000AE0B loc_AE0B:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+44j
.text$mn:0000AE0B                 mov     [ebp+var_14], 0
.text$mn:0000AE12
.text$mn:0000AE12 loc_AE12:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+55j
.text$mn:0000AE12                 mov     edx, [ebp+var_14]
.text$mn:0000AE15                 mov     [ebp+var_1C], edx
.text$mn:0000AE18                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000AE1F                 mov     ecx, [ebp+var_C]
.text$mn:0000AE22                 mov     large fs:0, ecx
.text$mn:0000AE29                 pop     ecx
.text$mn:0000AE2A                 mov     esp, ebp
.text$mn:0000AE2C                 pop     ebp
.text$mn:0000AE2D                 retn    8
.text$mn:0000AE2D ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$mn:0000AE2D
.text$mn:0000AE2D _text$mn        ends
.text$mn:0000AE2D
.text$x:0000AE30 ; ===========================================================================
.text$x:0000AE30
.text$x:0000AE30 ; Segment type: Pure code
.text$x:0000AE30 ; Segment permissions: Read/Execute
.text$x:0000AE30 _text$x         segment para public 'CODE' use32
.text$x:0000AE30                 assume cs:_text$x
.text$x:0000AE30                 ;org 0AE30h
.text$x:0000AE30 ; COMDAT (pick associative to section at ADB4)
.text$x:0000AE30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AE30
.text$x:0000AE30 ; =============== S U B R O U T I N E =======================================
.text$x:0000AE30
.text$x:0000AE30
.text$x:0000AE30 __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 proc near
.text$x:0000AE30                                         ; DATA XREF: .xdata$x:0000D230o
.text$x:0000AE30                 mov     eax, [ebp+8]
.text$x:0000AE33                 push    eax
.text$x:0000AE34                 mov     eax, [ebp-10h]
.text$x:0000AE37                 push    eax             ; void *
.text$x:0000AE38                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000AE3D                 add     esp, 8
.text$x:0000AE40                 retn
.text$x:0000AE40 __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 endp
.text$x:0000AE40
.text$x:0000AE41
.text$x:0000AE41 ; =============== S U B R O U T I N E =======================================
.text$x:0000AE41
.text$x:0000AE41
.text$x:0000AE41 __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$x:0000AE41                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:0000AE41
.text$x:0000AE41 arg_4           = dword ptr  8
.text$x:0000AE41
.text$x:0000AE41                 mov     edx, [esp+arg_4]
.text$x:0000AE45                 lea     eax, [edx+0Ch]
.text$x:0000AE48                 mov     ecx, [edx-14h]
.text$x:0000AE4B                 xor     ecx, eax
.text$x:0000AE4D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AE52                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$x:0000AE57                 jmp     ___CxxFrameHandler3
.text$x:0000AE57 __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$x:0000AE57
.text$x:0000AE57 _text$x         ends
.text$x:0000AE57
.text$mn:0000AE5C ; ===========================================================================
.text$mn:0000AE5C
.text$mn:0000AE5C ; Segment type: Pure code
.text$mn:0000AE5C ; Segment permissions: Read/Execute
.text$mn:0000AE5C _text$mn        segment para public 'CODE' use32
.text$mn:0000AE5C                 assume cs:_text$mn
.text$mn:0000AE5C                 ;org 0AE5Ch
.text$mn:0000AE5C ; COMDAT (pick any)
.text$mn:0000AE5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE5C
.text$mn:0000AE5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE5C
.text$mn:0000AE5C ; Attributes: bp-based frame
.text$mn:0000AE5C
.text$mn:0000AE5C ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:0000AE5C                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000AE5C ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:0000AE5C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000AE5C
.text$mn:0000AE5C var_4           = dword ptr -4
.text$mn:0000AE5C Dst             = dword ptr  8
.text$mn:0000AE5C Src             = dword ptr  0Ch
.text$mn:0000AE5C Size            = dword ptr  10h
.text$mn:0000AE5C
.text$mn:0000AE5C                 push    ebp
.text$mn:0000AE5D                 mov     ebp, esp
.text$mn:0000AE5F                 push    ecx
.text$mn:0000AE60                 cmp     [ebp+Size], 0
.text$mn:0000AE64                 jnz     short loc_AE6E
.text$mn:0000AE66                 mov     eax, [ebp+Dst]
.text$mn:0000AE69                 mov     [ebp+var_4], eax
.text$mn:0000AE6C                 jmp     short loc_AE85
.text$mn:0000AE6E ; ---------------------------------------------------------------------------
.text$mn:0000AE6E
.text$mn:0000AE6E loc_AE6E:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000AE6E                 mov     ecx, [ebp+Size]
.text$mn:0000AE71                 push    ecx             ; Size
.text$mn:0000AE72                 mov     edx, [ebp+Src]
.text$mn:0000AE75                 push    edx             ; Src
.text$mn:0000AE76                 mov     eax, [ebp+Dst]
.text$mn:0000AE79                 push    eax             ; Dst
.text$mn:0000AE7A                 call    _memcpy
.text$mn:0000AE7F                 add     esp, 0Ch
.text$mn:0000AE82                 mov     [ebp+var_4], eax
.text$mn:0000AE85
.text$mn:0000AE85 loc_AE85:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000AE85                 mov     eax, [ebp+var_4]
.text$mn:0000AE88                 mov     esp, ebp
.text$mn:0000AE8A                 pop     ebp
.text$mn:0000AE8B                 retn
.text$mn:0000AE8B ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000AE8B
.text$mn:0000AE8B _text$mn        ends
.text$mn:0000AE8B
.text$mn:0000AE8C ; ===========================================================================
.text$mn:0000AE8C
.text$mn:0000AE8C ; Segment type: Pure code
.text$mn:0000AE8C ; Segment permissions: Read/Execute
.text$mn:0000AE8C _text$mn        segment para public 'CODE' use32
.text$mn:0000AE8C                 assume cs:_text$mn
.text$mn:0000AE8C                 ;org 0AE8Ch
.text$mn:0000AE8C ; COMDAT (pick any)
.text$mn:0000AE8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE8C
.text$mn:0000AE8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE8C
.text$mn:0000AE8C ; Attributes: bp-based frame
.text$mn:0000AE8C
.text$mn:0000AE8C ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:0000AE8C                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000AE8C ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000AE8C                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:0000AE8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000AE8C
.text$mn:0000AE8C var_4           = dword ptr -4
.text$mn:0000AE8C Dst             = dword ptr  8
.text$mn:0000AE8C Src             = dword ptr  0Ch
.text$mn:0000AE8C arg_8           = dword ptr  10h
.text$mn:0000AE8C
.text$mn:0000AE8C                 push    ebp
.text$mn:0000AE8D                 mov     ebp, esp
.text$mn:0000AE8F                 push    ecx
.text$mn:0000AE90                 cmp     [ebp+arg_8], 0
.text$mn:0000AE94                 jnz     short loc_AE9E
.text$mn:0000AE96                 mov     eax, [ebp+Dst]
.text$mn:0000AE99                 mov     [ebp+var_4], eax
.text$mn:0000AE9C                 jmp     short loc_AEB5
.text$mn:0000AE9E ; ---------------------------------------------------------------------------
.text$mn:0000AE9E
.text$mn:0000AE9E loc_AE9E:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000AE9E                 mov     ecx, [ebp+arg_8]
.text$mn:0000AEA1                 push    ecx             ; int
.text$mn:0000AEA2                 mov     edx, [ebp+Src]
.text$mn:0000AEA5                 push    edx             ; Src
.text$mn:0000AEA6                 mov     eax, [ebp+Dst]
.text$mn:0000AEA9                 push    eax             ; Dst
.text$mn:0000AEAA                 call    _wmemcpy
.text$mn:0000AEAF                 add     esp, 0Ch
.text$mn:0000AEB2                 mov     [ebp+var_4], eax
.text$mn:0000AEB5
.text$mn:0000AEB5 loc_AEB5:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000AEB5                 mov     eax, [ebp+var_4]
.text$mn:0000AEB8                 mov     esp, ebp
.text$mn:0000AEBA                 pop     ebp
.text$mn:0000AEBB                 retn
.text$mn:0000AEBB ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000AEBB
.text$mn:0000AEBB _text$mn        ends
.text$mn:0000AEBB
.text$mn:0000AEBC ; ===========================================================================
.text$mn:0000AEBC
.text$mn:0000AEBC ; Segment type: Pure code
.text$mn:0000AEBC ; Segment permissions: Read/Execute
.text$mn:0000AEBC _text$mn        segment para public 'CODE' use32
.text$mn:0000AEBC                 assume cs:_text$mn
.text$mn:0000AEBC                 ;org 0AEBCh
.text$mn:0000AEBC ; COMDAT (pick any)
.text$mn:0000AEBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEBC
.text$mn:0000AEBC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEBC
.text$mn:0000AEBC ; Attributes: bp-based frame
.text$mn:0000AEBC
.text$mn:0000AEBC ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000AEBC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000AEBC ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000AEBC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000AEBC
.text$mn:0000AEBC var_4           = dword ptr -4
.text$mn:0000AEBC arg_0           = dword ptr  8
.text$mn:0000AEBC arg_4           = dword ptr  0Ch
.text$mn:0000AEBC
.text$mn:0000AEBC                 push    ebp
.text$mn:0000AEBD                 mov     ebp, esp
.text$mn:0000AEBF                 push    ecx
.text$mn:0000AEC0                 mov     [ebp+var_4], ecx
.text$mn:0000AEC3                 mov     eax, [ebp+arg_4]
.text$mn:0000AEC6                 push    eax             ; int
.text$mn:0000AEC7                 mov     ecx, [ebp+arg_0]
.text$mn:0000AECA                 push    ecx             ; void *
.text$mn:0000AECB                 mov     ecx, [ebp+var_4]
.text$mn:0000AECE                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000AED3                 mov     esp, ebp
.text$mn:0000AED5                 pop     ebp
.text$mn:0000AED6                 retn    8
.text$mn:0000AED6 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000AED6
.text$mn:0000AED6 ; ---------------------------------------------------------------------------
.text$mn:0000AED9                 align 4
.text$mn:0000AED9 _text$mn        ends
.text$mn:0000AED9
.text$mn:0000AEDC ; ===========================================================================
.text$mn:0000AEDC
.text$mn:0000AEDC ; Segment type: Pure code
.text$mn:0000AEDC ; Segment permissions: Read/Execute
.text$mn:0000AEDC _text$mn        segment para public 'CODE' use32
.text$mn:0000AEDC                 assume cs:_text$mn
.text$mn:0000AEDC                 ;org 0AEDCh
.text$mn:0000AEDC ; COMDAT (pick any)
.text$mn:0000AEDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEDC
.text$mn:0000AEDC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEDC
.text$mn:0000AEDC ; Attributes: bp-based frame
.text$mn:0000AEDC
.text$mn:0000AEDC ; int __stdcall std::_Wrap_alloc<std::allocator<TreeParams>>::deallocate(void *, int)
.text$mn:0000AEDC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@I@Z
.text$mn:0000AEDC ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@I@Z proc near
.text$mn:0000AEDC                                         ; CODE XREF: __catch$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000AEDC                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Reallocate(uint)+FAp
.text$mn:0000AEDC
.text$mn:0000AEDC var_4           = dword ptr -4
.text$mn:0000AEDC arg_0           = dword ptr  8
.text$mn:0000AEDC arg_4           = dword ptr  0Ch
.text$mn:0000AEDC
.text$mn:0000AEDC                 push    ebp
.text$mn:0000AEDD                 mov     ebp, esp
.text$mn:0000AEDF                 push    ecx
.text$mn:0000AEE0                 mov     [ebp+var_4], ecx
.text$mn:0000AEE3                 mov     eax, [ebp+arg_4]
.text$mn:0000AEE6                 push    eax             ; int
.text$mn:0000AEE7                 mov     ecx, [ebp+arg_0]
.text$mn:0000AEEA                 push    ecx             ; void *
.text$mn:0000AEEB                 mov     ecx, [ebp+var_4]
.text$mn:0000AEEE                 call    ?deallocate@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@I@Z ; std::allocator<TreeParams>::deallocate(TreeParams *,uint)
.text$mn:0000AEF3                 mov     esp, ebp
.text$mn:0000AEF5                 pop     ebp
.text$mn:0000AEF6                 retn    8
.text$mn:0000AEF6 ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@I@Z endp
.text$mn:0000AEF6
.text$mn:0000AEF6 ; ---------------------------------------------------------------------------
.text$mn:0000AEF9                 align 4
.text$mn:0000AEF9 _text$mn        ends
.text$mn:0000AEF9
.text$mn:0000AEFC ; ===========================================================================
.text$mn:0000AEFC
.text$mn:0000AEFC ; Segment type: Pure code
.text$mn:0000AEFC ; Segment permissions: Read/Execute
.text$mn:0000AEFC _text$mn        segment para public 'CODE' use32
.text$mn:0000AEFC                 assume cs:_text$mn
.text$mn:0000AEFC                 ;org 0AEFCh
.text$mn:0000AEFC ; COMDAT (pick any)
.text$mn:0000AEFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEFC
.text$mn:0000AEFC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEFC
.text$mn:0000AEFC ; Attributes: bp-based frame
.text$mn:0000AEFC
.text$mn:0000AEFC ; int __stdcall std::_Wrap_alloc<std::allocator<TreeStateNode>>::deallocate(void *, int)
.text$mn:0000AEFC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@I@Z
.text$mn:0000AEFC ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@I@Z proc near
.text$mn:0000AEFC                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+1C0p
.text$mn:0000AEFC                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Tidy(void)+5Cp
.text$mn:0000AEFC
.text$mn:0000AEFC var_4           = dword ptr -4
.text$mn:0000AEFC arg_0           = dword ptr  8
.text$mn:0000AEFC arg_4           = dword ptr  0Ch
.text$mn:0000AEFC
.text$mn:0000AEFC                 push    ebp
.text$mn:0000AEFD                 mov     ebp, esp
.text$mn:0000AEFF                 push    ecx
.text$mn:0000AF00                 mov     [ebp+var_4], ecx
.text$mn:0000AF03                 mov     eax, [ebp+arg_4]
.text$mn:0000AF06                 push    eax             ; int
.text$mn:0000AF07                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF0A                 push    ecx             ; void *
.text$mn:0000AF0B                 mov     ecx, [ebp+var_4]
.text$mn:0000AF0E                 call    ?deallocate@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@I@Z ; std::allocator<TreeStateNode>::deallocate(TreeStateNode *,uint)
.text$mn:0000AF13                 mov     esp, ebp
.text$mn:0000AF15                 pop     ebp
.text$mn:0000AF16                 retn    8
.text$mn:0000AF16 ?deallocate@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAEXPAUTreeStateNode@@I@Z endp
.text$mn:0000AF16
.text$mn:0000AF16 ; ---------------------------------------------------------------------------
.text$mn:0000AF19                 align 4
.text$mn:0000AF19 _text$mn        ends
.text$mn:0000AF19
.text$mn:0000AF1C ; ===========================================================================
.text$mn:0000AF1C
.text$mn:0000AF1C ; Segment type: Pure code
.text$mn:0000AF1C ; Segment permissions: Read/Execute
.text$mn:0000AF1C _text$mn        segment para public 'CODE' use32
.text$mn:0000AF1C                 assume cs:_text$mn
.text$mn:0000AF1C                 ;org 0AF1Ch
.text$mn:0000AF1C ; COMDAT (pick any)
.text$mn:0000AF1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF1C
.text$mn:0000AF1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF1C
.text$mn:0000AF1C ; Attributes: bp-based frame
.text$mn:0000AF1C
.text$mn:0000AF1C ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:0000AF1C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000AF1C ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000AF1C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Free_proxy(void)+32p
.text$mn:0000AF1C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Free_proxy(void)+32p ...
.text$mn:0000AF1C
.text$mn:0000AF1C var_4           = dword ptr -4
.text$mn:0000AF1C arg_0           = dword ptr  8
.text$mn:0000AF1C arg_4           = dword ptr  0Ch
.text$mn:0000AF1C
.text$mn:0000AF1C                 push    ebp
.text$mn:0000AF1D                 mov     ebp, esp
.text$mn:0000AF1F                 push    ecx
.text$mn:0000AF20                 mov     [ebp+var_4], ecx
.text$mn:0000AF23                 mov     eax, [ebp+arg_4]
.text$mn:0000AF26                 push    eax             ; int
.text$mn:0000AF27                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF2A                 push    ecx             ; void *
.text$mn:0000AF2B                 mov     ecx, [ebp+var_4]
.text$mn:0000AF2E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000AF33                 mov     esp, ebp
.text$mn:0000AF35                 pop     ebp
.text$mn:0000AF36                 retn    8
.text$mn:0000AF36 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000AF36
.text$mn:0000AF36 ; ---------------------------------------------------------------------------
.text$mn:0000AF39                 align 4
.text$mn:0000AF39 _text$mn        ends
.text$mn:0000AF39
.text$mn:0000AF3C ; ===========================================================================
.text$mn:0000AF3C
.text$mn:0000AF3C ; Segment type: Pure code
.text$mn:0000AF3C ; Segment permissions: Read/Execute
.text$mn:0000AF3C _text$mn        segment para public 'CODE' use32
.text$mn:0000AF3C                 assume cs:_text$mn
.text$mn:0000AF3C                 ;org 0AF3Ch
.text$mn:0000AF3C ; COMDAT (pick any)
.text$mn:0000AF3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF3C
.text$mn:0000AF3C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF3C
.text$mn:0000AF3C ; Attributes: bp-based frame
.text$mn:0000AF3C
.text$mn:0000AF3C ; int __stdcall std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(void *, int)
.text$mn:0000AF3C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z
.text$mn:0000AF3C ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z proc near
.text$mn:0000AF3C                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Tidy(void)+55p
.text$mn:0000AF3C
.text$mn:0000AF3C var_4           = dword ptr -4
.text$mn:0000AF3C arg_0           = dword ptr  8
.text$mn:0000AF3C arg_4           = dword ptr  0Ch
.text$mn:0000AF3C
.text$mn:0000AF3C                 push    ebp
.text$mn:0000AF3D                 mov     ebp, esp
.text$mn:0000AF3F                 push    ecx
.text$mn:0000AF40                 mov     [ebp+var_4], ecx
.text$mn:0000AF43                 mov     eax, [ebp+arg_4]
.text$mn:0000AF46                 push    eax             ; int
.text$mn:0000AF47                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF4A                 push    ecx             ; void *
.text$mn:0000AF4B                 mov     ecx, [ebp+var_4]
.text$mn:0000AF4E                 call    ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z ; std::allocator<foundInfo>::deallocate(foundInfo *,uint)
.text$mn:0000AF53                 mov     esp, ebp
.text$mn:0000AF55                 pop     ebp
.text$mn:0000AF56                 retn    8
.text$mn:0000AF56 ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z endp
.text$mn:0000AF56
.text$mn:0000AF56 ; ---------------------------------------------------------------------------
.text$mn:0000AF59                 align 4
.text$mn:0000AF59 _text$mn        ends
.text$mn:0000AF59
.text$mn:0000AF5C ; ===========================================================================
.text$mn:0000AF5C
.text$mn:0000AF5C ; Segment type: Pure code
.text$mn:0000AF5C ; Segment permissions: Read/Execute
.text$mn:0000AF5C _text$mn        segment para public 'CODE' use32
.text$mn:0000AF5C                 assume cs:_text$mn
.text$mn:0000AF5C                 ;org 0AF5Ch
.text$mn:0000AF5C ; COMDAT (pick any)
.text$mn:0000AF5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF5C
.text$mn:0000AF5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF5C
.text$mn:0000AF5C ; Attributes: bp-based frame
.text$mn:0000AF5C
.text$mn:0000AF5C ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:0000AF5C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000AF5C ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000AF5C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+5Cp
.text$mn:0000AF5C
.text$mn:0000AF5C var_4           = dword ptr -4
.text$mn:0000AF5C arg_0           = dword ptr  8
.text$mn:0000AF5C arg_4           = dword ptr  0Ch
.text$mn:0000AF5C
.text$mn:0000AF5C                 push    ebp
.text$mn:0000AF5D                 mov     ebp, esp
.text$mn:0000AF5F                 push    ecx
.text$mn:0000AF60                 mov     [ebp+var_4], ecx
.text$mn:0000AF63                 mov     eax, [ebp+arg_4]
.text$mn:0000AF66                 push    eax             ; int
.text$mn:0000AF67                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF6A                 push    ecx             ; void *
.text$mn:0000AF6B                 mov     ecx, [ebp+var_4]
.text$mn:0000AF6E                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000AF73                 mov     esp, ebp
.text$mn:0000AF75                 pop     ebp
.text$mn:0000AF76                 retn    8
.text$mn:0000AF76 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000AF76
.text$mn:0000AF76 ; ---------------------------------------------------------------------------
.text$mn:0000AF79                 align 4
.text$mn:0000AF79 _text$mn        ends
.text$mn:0000AF79
.text$mn:0000AF7C ; ===========================================================================
.text$mn:0000AF7C
.text$mn:0000AF7C ; Segment type: Pure code
.text$mn:0000AF7C ; Segment permissions: Read/Execute
.text$mn:0000AF7C _text$mn        segment para public 'CODE' use32
.text$mn:0000AF7C                 assume cs:_text$mn
.text$mn:0000AF7C                 ;org 0AF7Ch
.text$mn:0000AF7C ; COMDAT (pick any)
.text$mn:0000AF7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF7C
.text$mn:0000AF7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF7C
.text$mn:0000AF7C ; Attributes: bp-based frame
.text$mn:0000AF7C
.text$mn:0000AF7C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000AF7C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000AF7C ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000AF7C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000AF7C
.text$mn:0000AF7C var_4           = dword ptr -4
.text$mn:0000AF7C arg_0           = dword ptr  8
.text$mn:0000AF7C arg_4           = dword ptr  0Ch
.text$mn:0000AF7C
.text$mn:0000AF7C                 push    ebp
.text$mn:0000AF7D                 mov     ebp, esp
.text$mn:0000AF7F                 push    ecx
.text$mn:0000AF80                 mov     [ebp+var_4], ecx
.text$mn:0000AF83                 mov     eax, [ebp+arg_4]
.text$mn:0000AF86                 push    eax             ; int
.text$mn:0000AF87                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF8A                 push    ecx             ; void *
.text$mn:0000AF8B                 mov     ecx, [ebp+var_4]
.text$mn:0000AF8E                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000AF93                 mov     esp, ebp
.text$mn:0000AF95                 pop     ebp
.text$mn:0000AF96                 retn    8
.text$mn:0000AF96 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000AF96
.text$mn:0000AF96 ; ---------------------------------------------------------------------------
.text$mn:0000AF99                 align 4
.text$mn:0000AF99 _text$mn        ends
.text$mn:0000AF99
.text$mn:0000AF9C ; ===========================================================================
.text$mn:0000AF9C
.text$mn:0000AF9C ; Segment type: Pure code
.text$mn:0000AF9C ; Segment permissions: Read/Execute
.text$mn:0000AF9C _text$mn        segment para public 'CODE' use32
.text$mn:0000AF9C                 assume cs:_text$mn
.text$mn:0000AF9C                 ;org 0AF9Ch
.text$mn:0000AF9C ; COMDAT (pick any)
.text$mn:0000AF9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF9C
.text$mn:0000AF9C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF9C
.text$mn:0000AF9C ; Attributes: bp-based frame
.text$mn:0000AF9C
.text$mn:0000AF9C ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000AF9C                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000AF9C ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000AF9C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000AF9C
.text$mn:0000AF9C var_4           = dword ptr -4
.text$mn:0000AF9C arg_0           = dword ptr  8
.text$mn:0000AF9C
.text$mn:0000AF9C                 push    ebp
.text$mn:0000AF9D                 mov     ebp, esp
.text$mn:0000AF9F                 push    ecx
.text$mn:0000AFA0                 mov     [ebp+var_4], ecx
.text$mn:0000AFA3                 mov     eax, [ebp+arg_0]
.text$mn:0000AFA6                 push    eax             ; void *
.text$mn:0000AFA7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000AFAC                 add     esp, 4
.text$mn:0000AFAF                 mov     esp, ebp
.text$mn:0000AFB1                 pop     ebp
.text$mn:0000AFB2                 retn    8
.text$mn:0000AFB2 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000AFB2
.text$mn:0000AFB2 ; ---------------------------------------------------------------------------
.text$mn:0000AFB5                 align 4
.text$mn:0000AFB5 _text$mn        ends
.text$mn:0000AFB5
.text$mn:0000AFB8 ; ===========================================================================
.text$mn:0000AFB8
.text$mn:0000AFB8 ; Segment type: Pure code
.text$mn:0000AFB8 ; Segment permissions: Read/Execute
.text$mn:0000AFB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFB8                 assume cs:_text$mn
.text$mn:0000AFB8                 ;org 0AFB8h
.text$mn:0000AFB8 ; COMDAT (pick any)
.text$mn:0000AFB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFB8
.text$mn:0000AFB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFB8
.text$mn:0000AFB8 ; Attributes: bp-based frame
.text$mn:0000AFB8
.text$mn:0000AFB8 ; int __stdcall std::allocator<TreeParams>::deallocate(void *, int)
.text$mn:0000AFB8                 public ?deallocate@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@I@Z
.text$mn:0000AFB8 ?deallocate@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@I@Z proc near
.text$mn:0000AFB8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::deallocate(TreeParams *,uint)+12p
.text$mn:0000AFB8
.text$mn:0000AFB8 var_4           = dword ptr -4
.text$mn:0000AFB8 arg_0           = dword ptr  8
.text$mn:0000AFB8
.text$mn:0000AFB8                 push    ebp
.text$mn:0000AFB9                 mov     ebp, esp
.text$mn:0000AFBB                 push    ecx
.text$mn:0000AFBC                 mov     [ebp+var_4], ecx
.text$mn:0000AFBF                 mov     eax, [ebp+arg_0]
.text$mn:0000AFC2                 push    eax             ; void *
.text$mn:0000AFC3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000AFC8                 add     esp, 4
.text$mn:0000AFCB                 mov     esp, ebp
.text$mn:0000AFCD                 pop     ebp
.text$mn:0000AFCE                 retn    8
.text$mn:0000AFCE ?deallocate@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@I@Z endp
.text$mn:0000AFCE
.text$mn:0000AFCE ; ---------------------------------------------------------------------------
.text$mn:0000AFD1                 align 4
.text$mn:0000AFD1 _text$mn        ends
.text$mn:0000AFD1
.text$mn:0000AFD4 ; ===========================================================================
.text$mn:0000AFD4
.text$mn:0000AFD4 ; Segment type: Pure code
.text$mn:0000AFD4 ; Segment permissions: Read/Execute
.text$mn:0000AFD4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFD4                 assume cs:_text$mn
.text$mn:0000AFD4                 ;org 0AFD4h
.text$mn:0000AFD4 ; COMDAT (pick any)
.text$mn:0000AFD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFD4
.text$mn:0000AFD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFD4
.text$mn:0000AFD4 ; Attributes: bp-based frame
.text$mn:0000AFD4
.text$mn:0000AFD4 ; int __stdcall std::allocator<TreeStateNode>::deallocate(void *, int)
.text$mn:0000AFD4                 public ?deallocate@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@I@Z
.text$mn:0000AFD4 ?deallocate@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@I@Z proc near
.text$mn:0000AFD4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::deallocate(TreeStateNode *,uint)+12p
.text$mn:0000AFD4
.text$mn:0000AFD4 var_4           = dword ptr -4
.text$mn:0000AFD4 arg_0           = dword ptr  8
.text$mn:0000AFD4
.text$mn:0000AFD4                 push    ebp
.text$mn:0000AFD5                 mov     ebp, esp
.text$mn:0000AFD7                 push    ecx
.text$mn:0000AFD8                 mov     [ebp+var_4], ecx
.text$mn:0000AFDB                 mov     eax, [ebp+arg_0]
.text$mn:0000AFDE                 push    eax             ; void *
.text$mn:0000AFDF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000AFE4                 add     esp, 4
.text$mn:0000AFE7                 mov     esp, ebp
.text$mn:0000AFE9                 pop     ebp
.text$mn:0000AFEA                 retn    8
.text$mn:0000AFEA ?deallocate@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@I@Z endp
.text$mn:0000AFEA
.text$mn:0000AFEA ; ---------------------------------------------------------------------------
.text$mn:0000AFED                 align 10h
.text$mn:0000AFED _text$mn        ends
.text$mn:0000AFED
.text$mn:0000AFF0 ; ===========================================================================
.text$mn:0000AFF0
.text$mn:0000AFF0 ; Segment type: Pure code
.text$mn:0000AFF0 ; Segment permissions: Read/Execute
.text$mn:0000AFF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFF0                 assume cs:_text$mn
.text$mn:0000AFF0                 ;org 0AFF0h
.text$mn:0000AFF0 ; COMDAT (pick any)
.text$mn:0000AFF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFF0
.text$mn:0000AFF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFF0
.text$mn:0000AFF0 ; Attributes: bp-based frame
.text$mn:0000AFF0
.text$mn:0000AFF0 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:0000AFF0                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000AFF0 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000AFF0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:0000AFF0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:0000AFF0
.text$mn:0000AFF0 var_4           = dword ptr -4
.text$mn:0000AFF0 arg_0           = dword ptr  8
.text$mn:0000AFF0
.text$mn:0000AFF0                 push    ebp
.text$mn:0000AFF1                 mov     ebp, esp
.text$mn:0000AFF3                 push    ecx
.text$mn:0000AFF4                 mov     [ebp+var_4], ecx
.text$mn:0000AFF7                 mov     eax, [ebp+arg_0]
.text$mn:0000AFFA                 push    eax             ; void *
.text$mn:0000AFFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000B000                 add     esp, 4
.text$mn:0000B003                 mov     esp, ebp
.text$mn:0000B005                 pop     ebp
.text$mn:0000B006                 retn    8
.text$mn:0000B006 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000B006
.text$mn:0000B006 ; ---------------------------------------------------------------------------
.text$mn:0000B009                 align 4
.text$mn:0000B009 _text$mn        ends
.text$mn:0000B009
.text$mn:0000B00C ; ===========================================================================
.text$mn:0000B00C
.text$mn:0000B00C ; Segment type: Pure code
.text$mn:0000B00C ; Segment permissions: Read/Execute
.text$mn:0000B00C _text$mn        segment para public 'CODE' use32
.text$mn:0000B00C                 assume cs:_text$mn
.text$mn:0000B00C                 ;org 0B00Ch
.text$mn:0000B00C ; COMDAT (pick any)
.text$mn:0000B00C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B00C
.text$mn:0000B00C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B00C
.text$mn:0000B00C ; Attributes: bp-based frame
.text$mn:0000B00C
.text$mn:0000B00C ; int __stdcall std::allocator<foundInfo>::deallocate(void *, int)
.text$mn:0000B00C                 public ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z
.text$mn:0000B00C ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z proc near
.text$mn:0000B00C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(foundInfo *,uint)+12p
.text$mn:0000B00C
.text$mn:0000B00C var_4           = dword ptr -4
.text$mn:0000B00C arg_0           = dword ptr  8
.text$mn:0000B00C
.text$mn:0000B00C                 push    ebp
.text$mn:0000B00D                 mov     ebp, esp
.text$mn:0000B00F                 push    ecx
.text$mn:0000B010                 mov     [ebp+var_4], ecx
.text$mn:0000B013                 mov     eax, [ebp+arg_0]
.text$mn:0000B016                 push    eax             ; void *
.text$mn:0000B017                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000B01C                 add     esp, 4
.text$mn:0000B01F                 mov     esp, ebp
.text$mn:0000B021                 pop     ebp
.text$mn:0000B022                 retn    8
.text$mn:0000B022 ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z endp
.text$mn:0000B022
.text$mn:0000B022 ; ---------------------------------------------------------------------------
.text$mn:0000B025                 align 4
.text$mn:0000B025 _text$mn        ends
.text$mn:0000B025
.text$mn:0000B028 ; ===========================================================================
.text$mn:0000B028
.text$mn:0000B028 ; Segment type: Pure code
.text$mn:0000B028 ; Segment permissions: Read/Execute
.text$mn:0000B028 _text$mn        segment para public 'CODE' use32
.text$mn:0000B028                 assume cs:_text$mn
.text$mn:0000B028                 ;org 0B028h
.text$mn:0000B028 ; COMDAT (pick any)
.text$mn:0000B028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B028
.text$mn:0000B028 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B028
.text$mn:0000B028 ; Attributes: bp-based frame
.text$mn:0000B028
.text$mn:0000B028 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:0000B028                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000B028 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000B028                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:0000B028
.text$mn:0000B028 var_4           = dword ptr -4
.text$mn:0000B028 arg_0           = dword ptr  8
.text$mn:0000B028
.text$mn:0000B028                 push    ebp
.text$mn:0000B029                 mov     ebp, esp
.text$mn:0000B02B                 push    ecx
.text$mn:0000B02C                 mov     [ebp+var_4], ecx
.text$mn:0000B02F                 mov     eax, [ebp+arg_0]
.text$mn:0000B032                 push    eax             ; void *
.text$mn:0000B033                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000B038                 add     esp, 4
.text$mn:0000B03B                 mov     esp, ebp
.text$mn:0000B03D                 pop     ebp
.text$mn:0000B03E                 retn    8
.text$mn:0000B03E ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000B03E
.text$mn:0000B03E ; ---------------------------------------------------------------------------
.text$mn:0000B041                 align 4
.text$mn:0000B041 _text$mn        ends
.text$mn:0000B041
.text$mn:0000B044 ; ===========================================================================
.text$mn:0000B044
.text$mn:0000B044 ; Segment type: Pure code
.text$mn:0000B044 ; Segment permissions: Read/Execute
.text$mn:0000B044 _text$mn        segment para public 'CODE' use32
.text$mn:0000B044                 assume cs:_text$mn
.text$mn:0000B044                 ;org 0B044h
.text$mn:0000B044 ; COMDAT (pick any)
.text$mn:0000B044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B044
.text$mn:0000B044 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B044
.text$mn:0000B044 ; Attributes: bp-based frame
.text$mn:0000B044
.text$mn:0000B044 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000B044                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000B044 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000B044                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:0000B044
.text$mn:0000B044 var_4           = dword ptr -4
.text$mn:0000B044 arg_0           = dword ptr  8
.text$mn:0000B044
.text$mn:0000B044                 push    ebp
.text$mn:0000B045                 mov     ebp, esp
.text$mn:0000B047                 push    ecx
.text$mn:0000B048                 mov     [ebp+var_4], ecx
.text$mn:0000B04B                 mov     eax, [ebp+arg_0]
.text$mn:0000B04E                 push    eax             ; void *
.text$mn:0000B04F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000B054                 add     esp, 4
.text$mn:0000B057                 mov     esp, ebp
.text$mn:0000B059                 pop     ebp
.text$mn:0000B05A                 retn    8
.text$mn:0000B05A ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:0000B05A
.text$mn:0000B05A ; ---------------------------------------------------------------------------
.text$mn:0000B05D                 align 10h
.text$mn:0000B05D _text$mn        ends
.text$mn:0000B05D
.text$mn:0000B060 ; ===========================================================================
.text$mn:0000B060
.text$mn:0000B060 ; Segment type: Pure code
.text$mn:0000B060 ; Segment permissions: Read/Execute
.text$mn:0000B060 _text$mn        segment para public 'CODE' use32
.text$mn:0000B060                 assume cs:_text$mn
.text$mn:0000B060                 ;org 0B060h
.text$mn:0000B060 ; COMDAT (pick any)
.text$mn:0000B060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B060
.text$mn:0000B060 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B060
.text$mn:0000B060 ; Attributes: bp-based frame
.text$mn:0000B060
.text$mn:0000B060 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000B060                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000B060 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000B060                                         ; DATA XREF: .rdata:0000E758o
.text$mn:0000B060
.text$mn:0000B060 var_4           = dword ptr -4
.text$mn:0000B060 arg_0           = dword ptr  8
.text$mn:0000B060 arg_4           = dword ptr  0Ch
.text$mn:0000B060
.text$mn:0000B060                 push    ebp
.text$mn:0000B061                 mov     ebp, esp
.text$mn:0000B063                 push    ecx
.text$mn:0000B064                 mov     [ebp+var_4], ecx
.text$mn:0000B067                 mov     eax, [ebp+arg_4]
.text$mn:0000B06A                 push    eax             ; int
.text$mn:0000B06B                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000B070                 add     esp, 4
.text$mn:0000B073                 test    eax, eax
.text$mn:0000B075                 jz      short loc_B090
.text$mn:0000B077                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:0000B07C                 push    eax             ; struct std::error_category *
.text$mn:0000B07D                 mov     ecx, [ebp+arg_4]
.text$mn:0000B080                 push    ecx             ; int
.text$mn:0000B081                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000B084                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000B089                 mov     eax, [ebp+arg_0]
.text$mn:0000B08C                 jmp     short loc_B0A5
.text$mn:0000B08E ; ---------------------------------------------------------------------------
.text$mn:0000B08E                 jmp     short loc_B0A5
.text$mn:0000B090 ; ---------------------------------------------------------------------------
.text$mn:0000B090
.text$mn:0000B090 loc_B090:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000B090                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000B095                 push    eax             ; struct std::error_category *
.text$mn:0000B096                 mov     edx, [ebp+arg_4]
.text$mn:0000B099                 push    edx             ; int
.text$mn:0000B09A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000B09D                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000B0A2                 mov     eax, [ebp+arg_0]
.text$mn:0000B0A5
.text$mn:0000B0A5 loc_B0A5:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000B0A5                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000B0A5                 mov     esp, ebp
.text$mn:0000B0A7                 pop     ebp
.text$mn:0000B0A8                 retn    8
.text$mn:0000B0A8 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000B0A8
.text$mn:0000B0A8 ; ---------------------------------------------------------------------------
.text$mn:0000B0AB                 align 4
.text$mn:0000B0AB _text$mn        ends
.text$mn:0000B0AB
.text$mn:0000B0AC ; ===========================================================================
.text$mn:0000B0AC
.text$mn:0000B0AC ; Segment type: Pure code
.text$mn:0000B0AC ; Segment permissions: Read/Execute
.text$mn:0000B0AC _text$mn        segment para public 'CODE' use32
.text$mn:0000B0AC                 assume cs:_text$mn
.text$mn:0000B0AC                 ;org 0B0ACh
.text$mn:0000B0AC ; COMDAT (pick any)
.text$mn:0000B0AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0AC
.text$mn:0000B0AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0AC
.text$mn:0000B0AC ; Attributes: bp-based frame
.text$mn:0000B0AC
.text$mn:0000B0AC ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:0000B0AC                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000B0AC ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000B0AC                                         ; DATA XREF: .rdata:0000E6C8o
.text$mn:0000B0AC                                         ; .rdata:0000E6E4o ...
.text$mn:0000B0AC
.text$mn:0000B0AC var_4           = dword ptr -4
.text$mn:0000B0AC arg_0           = dword ptr  8
.text$mn:0000B0AC arg_4           = dword ptr  0Ch
.text$mn:0000B0AC
.text$mn:0000B0AC                 push    ebp
.text$mn:0000B0AD                 mov     ebp, esp
.text$mn:0000B0AF                 push    ecx
.text$mn:0000B0B0                 mov     [ebp+var_4], ecx
.text$mn:0000B0B3                 mov     eax, [ebp+var_4]
.text$mn:0000B0B6                 push    eax             ; struct std::error_category *
.text$mn:0000B0B7                 mov     ecx, [ebp+arg_4]
.text$mn:0000B0BA                 push    ecx             ; int
.text$mn:0000B0BB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000B0BE                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000B0C3                 mov     eax, [ebp+arg_0]
.text$mn:0000B0C6                 mov     esp, ebp
.text$mn:0000B0C8                 pop     ebp
.text$mn:0000B0C9                 retn    8
.text$mn:0000B0C9 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000B0C9
.text$mn:0000B0C9 _text$mn        ends
.text$mn:0000B0C9
.text$mn:0000B0CC ; ===========================================================================
.text$mn:0000B0CC
.text$mn:0000B0CC ; Segment type: Pure code
.text$mn:0000B0CC ; Segment permissions: Read/Execute
.text$mn:0000B0CC _text$mn        segment para public 'CODE' use32
.text$mn:0000B0CC                 assume cs:_text$mn
.text$mn:0000B0CC                 ;org 0B0CCh
.text$mn:0000B0CC ; COMDAT (pick any)
.text$mn:0000B0CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0CC
.text$mn:0000B0CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0CC
.text$mn:0000B0CC ; Attributes: bp-based frame
.text$mn:0000B0CC
.text$mn:0000B0CC ; public: bool __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::empty(void)const
.text$mn:0000B0CC                 public ?empty@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE_NXZ
.text$mn:0000B0CC ?empty@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE_NXZ proc near
.text$mn:0000B0CC                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+90p
.text$mn:0000B0CC
.text$mn:0000B0CC var_8           = dword ptr -8
.text$mn:0000B0CC var_4           = dword ptr -4
.text$mn:0000B0CC
.text$mn:0000B0CC                 push    ebp
.text$mn:0000B0CD                 mov     ebp, esp
.text$mn:0000B0CF                 sub     esp, 8
.text$mn:0000B0D2                 mov     [ebp+var_4], ecx
.text$mn:0000B0D5                 mov     eax, [ebp+var_4]
.text$mn:0000B0D8                 mov     ecx, [ebp+var_4]
.text$mn:0000B0DB                 mov     edx, [eax+4]
.text$mn:0000B0DE                 cmp     edx, [ecx+8]
.text$mn:0000B0E1                 jnz     short loc_B0EC
.text$mn:0000B0E3                 mov     [ebp+var_8], 1
.text$mn:0000B0EA                 jmp     short loc_B0F3
.text$mn:0000B0EC ; ---------------------------------------------------------------------------
.text$mn:0000B0EC
.text$mn:0000B0EC loc_B0EC:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::empty(void)+15j
.text$mn:0000B0EC                 mov     [ebp+var_8], 0
.text$mn:0000B0F3
.text$mn:0000B0F3 loc_B0F3:                               ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::empty(void)+1Ej
.text$mn:0000B0F3                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000B0F6                 mov     esp, ebp
.text$mn:0000B0F8                 pop     ebp
.text$mn:0000B0F9                 retn
.text$mn:0000B0F9 ?empty@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE_NXZ endp
.text$mn:0000B0F9
.text$mn:0000B0F9 ; ---------------------------------------------------------------------------
.text$mn:0000B0FA                 align 4
.text$mn:0000B0FA _text$mn        ends
.text$mn:0000B0FA
.text$mn:0000B0FC ; ===========================================================================
.text$mn:0000B0FC
.text$mn:0000B0FC ; Segment type: Pure code
.text$mn:0000B0FC ; Segment permissions: Read/Execute
.text$mn:0000B0FC _text$mn        segment para public 'CODE' use32
.text$mn:0000B0FC                 assume cs:_text$mn
.text$mn:0000B0FC                 ;org 0B0FCh
.text$mn:0000B0FC ; COMDAT (pick any)
.text$mn:0000B0FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0FC
.text$mn:0000B0FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0FC
.text$mn:0000B0FC ; Attributes: bp-based frame
.text$mn:0000B0FC
.text$mn:0000B0FC ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:0000B0FC                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000B0FC ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000B0FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:0000B0FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:0000B0FC
.text$mn:0000B0FC var_14          = dword ptr -14h
.text$mn:0000B0FC var_10          = dword ptr -10h
.text$mn:0000B0FC var_C           = dword ptr -0Ch
.text$mn:0000B0FC var_4           = dword ptr -4
.text$mn:0000B0FC arg_0           = dword ptr  8
.text$mn:0000B0FC
.text$mn:0000B0FC                 push    ebp
.text$mn:0000B0FD                 mov     ebp, esp
.text$mn:0000B0FF                 push    0FFFFFFFFh
.text$mn:0000B101                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000B106                 mov     eax, large fs:0
.text$mn:0000B10C                 push    eax
.text$mn:0000B10D                 sub     esp, 8
.text$mn:0000B110                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B115                 xor     eax, ebp
.text$mn:0000B117                 push    eax
.text$mn:0000B118                 lea     eax, [ebp+var_C]
.text$mn:0000B11B                 mov     large fs:0, eax
.text$mn:0000B121                 mov     [ebp+var_10], ecx
.text$mn:0000B124                 mov     [ebp+var_14], 0
.text$mn:0000B12B                 mov     eax, [ebp+var_10]
.text$mn:0000B12E                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000B12F                 mov     ecx, [ebp+var_10]
.text$mn:0000B132                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B137                 mov     ecx, [ebp+var_10]
.text$mn:0000B13A                 mov     edx, [ecx+14h]
.text$mn:0000B13D                 lea     eax, [eax+edx*2]
.text$mn:0000B140                 push    eax             ; int
.text$mn:0000B141                 mov     ecx, [ebp+arg_0]
.text$mn:0000B144                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000B149                 mov     [ebp+var_4], 0
.text$mn:0000B150                 mov     ecx, [ebp+var_14]
.text$mn:0000B153                 or      ecx, 1
.text$mn:0000B156                 mov     [ebp+var_14], ecx
.text$mn:0000B159                 mov     eax, [ebp+arg_0]
.text$mn:0000B15C                 mov     ecx, [ebp+var_C]
.text$mn:0000B15F                 mov     large fs:0, ecx
.text$mn:0000B166                 pop     ecx
.text$mn:0000B167                 mov     esp, ebp
.text$mn:0000B169                 pop     ebp
.text$mn:0000B16A                 retn    4
.text$mn:0000B16A ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000B16A
.text$mn:0000B16A ; ---------------------------------------------------------------------------
.text$mn:0000B16D                 align 10h
.text$mn:0000B16D _text$mn        ends
.text$mn:0000B16D
.text$x:0000B170 ; ===========================================================================
.text$x:0000B170
.text$x:0000B170 ; Segment type: Pure code
.text$x:0000B170 ; Segment permissions: Read/Execute
.text$x:0000B170 _text$x         segment para public 'CODE' use32
.text$x:0000B170                 assume cs:_text$x
.text$x:0000B170                 ;org 0B170h
.text$x:0000B170 ; COMDAT (pick associative to section at B0FC)
.text$x:0000B170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B170
.text$x:0000B170 ; =============== S U B R O U T I N E =======================================
.text$x:0000B170
.text$x:0000B170
.text$x:0000B170 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000B170                                         ; DATA XREF: .xdata$x:0000D110o
.text$x:0000B170                 mov     eax, [ebp-14h]
.text$x:0000B173                 and     eax, 1
.text$x:0000B176                 jz      $LN4_0
.text$x:0000B17C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000B180                 mov     ecx, [ebp+8]
.text$x:0000B183                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000B188 ; ---------------------------------------------------------------------------
.text$x:0000B188
.text$x:0000B188 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000B188                 retn
.text$x:0000B188 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000B188
.text$x:0000B189
.text$x:0000B189 ; =============== S U B R O U T I N E =======================================
.text$x:0000B189
.text$x:0000B189
.text$x:0000B189 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000B189                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:0000B189
.text$x:0000B189 arg_4           = dword ptr  8
.text$x:0000B189
.text$x:0000B189                 mov     edx, [esp+arg_4]
.text$x:0000B18D                 lea     eax, [edx+0Ch]
.text$x:0000B190                 mov     ecx, [edx-0Ch]
.text$x:0000B193                 xor     ecx, eax
.text$x:0000B195                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B19A                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000B19F                 jmp     ___CxxFrameHandler3
.text$x:0000B19F __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000B19F
.text$x:0000B19F _text$x         ends
.text$x:0000B19F
.text$mn:0000B1A4 ; ===========================================================================
.text$mn:0000B1A4
.text$mn:0000B1A4 ; Segment type: Pure code
.text$mn:0000B1A4 ; Segment permissions: Read/Execute
.text$mn:0000B1A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B1A4                 assume cs:_text$mn
.text$mn:0000B1A4                 ;org 0B1A4h
.text$mn:0000B1A4 ; COMDAT (pick any)
.text$mn:0000B1A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B1A4
.text$mn:0000B1A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B1A4
.text$mn:0000B1A4 ; Attributes: bp-based frame
.text$mn:0000B1A4
.text$mn:0000B1A4 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct TreeStateNode>>> __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::end(void)const
.text$mn:0000B1A4                 public ?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$mn:0000B1A4 ?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ proc near
.text$mn:0000B1A4                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+89p
.text$mn:0000B1A4
.text$mn:0000B1A4 var_14          = dword ptr -14h
.text$mn:0000B1A4 var_10          = dword ptr -10h
.text$mn:0000B1A4 var_C           = dword ptr -0Ch
.text$mn:0000B1A4 var_4           = dword ptr -4
.text$mn:0000B1A4 arg_0           = dword ptr  8
.text$mn:0000B1A4
.text$mn:0000B1A4                 push    ebp
.text$mn:0000B1A5                 mov     ebp, esp
.text$mn:0000B1A7                 push    0FFFFFFFFh
.text$mn:0000B1A9                 push    offset __ehhandler$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$mn:0000B1AE                 mov     eax, large fs:0
.text$mn:0000B1B4                 push    eax
.text$mn:0000B1B5                 sub     esp, 8
.text$mn:0000B1B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B1BD                 xor     eax, ebp
.text$mn:0000B1BF                 push    eax
.text$mn:0000B1C0                 lea     eax, [ebp+var_C]
.text$mn:0000B1C3                 mov     large fs:0, eax
.text$mn:0000B1C9                 mov     [ebp+var_10], ecx
.text$mn:0000B1CC                 mov     [ebp+var_14], 0
.text$mn:0000B1D3                 mov     eax, [ebp+var_10]
.text$mn:0000B1D6                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000B1D7                 mov     ecx, [ebp+var_10]
.text$mn:0000B1DA                 mov     edx, [ecx+8]
.text$mn:0000B1DD                 push    edx             ; int
.text$mn:0000B1DE                 mov     ecx, [ebp+arg_0]
.text$mn:0000B1E1                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(TreeStateNode *,std::_Container_base12 const *)
.text$mn:0000B1E6                 mov     [ebp+var_4], 0
.text$mn:0000B1ED                 mov     eax, [ebp+var_14]
.text$mn:0000B1F0                 or      eax, 1
.text$mn:0000B1F3                 mov     [ebp+var_14], eax
.text$mn:0000B1F6                 mov     eax, [ebp+arg_0]
.text$mn:0000B1F9                 mov     ecx, [ebp+var_C]
.text$mn:0000B1FC                 mov     large fs:0, ecx
.text$mn:0000B203                 pop     ecx
.text$mn:0000B204                 mov     esp, ebp
.text$mn:0000B206                 pop     ebp
.text$mn:0000B207                 retn    4
.text$mn:0000B207 ?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ endp
.text$mn:0000B207
.text$mn:0000B207 ; ---------------------------------------------------------------------------
.text$mn:0000B20A                 align 4
.text$mn:0000B20A _text$mn        ends
.text$mn:0000B20A
.text$x:0000B20C ; ===========================================================================
.text$x:0000B20C
.text$x:0000B20C ; Segment type: Pure code
.text$x:0000B20C ; Segment permissions: Read/Execute
.text$x:0000B20C _text$x         segment para public 'CODE' use32
.text$x:0000B20C                 assume cs:_text$x
.text$x:0000B20C                 ;org 0B20Ch
.text$x:0000B20C ; COMDAT (pick associative to section at B1A4)
.text$x:0000B20C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B20C
.text$x:0000B20C ; =============== S U B R O U T I N E =======================================
.text$x:0000B20C
.text$x:0000B20C
.text$x:0000B20C __unwindfunclet$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000B20C                                         ; DATA XREF: .xdata$x:0000D758o
.text$x:0000B20C                 mov     eax, [ebp-14h]
.text$x:0000B20F                 and     eax, 1
.text$x:0000B212                 jz      $LN4_5
.text$x:0000B218                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000B21C                 mov     ecx, [ebp+8]
.text$x:0000B21F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<TreeStateNode>>>(void)
.text$x:0000B224 ; ---------------------------------------------------------------------------
.text$x:0000B224
.text$x:0000B224 $LN4_5:                                 ; CODE XREF: __unwindfunclet$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0+6j
.text$x:0000B224                 retn
.text$x:0000B224 __unwindfunclet$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0 endp
.text$x:0000B224
.text$x:0000B225
.text$x:0000B225 ; =============== S U B R O U T I N E =======================================
.text$x:0000B225
.text$x:0000B225
.text$x:0000B225 __ehhandler$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ proc near
.text$x:0000B225                                         ; DATA XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::end(void)+5o
.text$x:0000B225
.text$x:0000B225 arg_4           = dword ptr  8
.text$x:0000B225
.text$x:0000B225                 mov     edx, [esp+arg_4]
.text$x:0000B229                 lea     eax, [edx+0Ch]
.text$x:0000B22C                 mov     ecx, [edx-0Ch]
.text$x:0000B22F                 xor     ecx, eax
.text$x:0000B231                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B236                 mov     eax, offset __ehfuncinfo$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.text$x:0000B23B                 jmp     ___CxxFrameHandler3
.text$x:0000B23B __ehhandler$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ endp
.text$x:0000B23B
.text$x:0000B23B _text$x         ends
.text$x:0000B23B
.text$mn:0000B240 ; ===========================================================================
.text$mn:0000B240
.text$mn:0000B240 ; Segment type: Pure code
.text$mn:0000B240 ; Segment permissions: Read/Execute
.text$mn:0000B240 _text$mn        segment para public 'CODE' use32
.text$mn:0000B240                 assume cs:_text$mn
.text$mn:0000B240                 ;org 0B240h
.text$mn:0000B240 ; COMDAT (pick any)
.text$mn:0000B240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B240
.text$mn:0000B240 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B240
.text$mn:0000B240 ; Attributes: bp-based frame
.text$mn:0000B240
.text$mn:0000B240 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::end(void)const
.text$mn:0000B240                 public ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000B240 ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000B240                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+89p
.text$mn:0000B240
.text$mn:0000B240 var_14          = dword ptr -14h
.text$mn:0000B240 var_10          = dword ptr -10h
.text$mn:0000B240 var_C           = dword ptr -0Ch
.text$mn:0000B240 var_4           = dword ptr -4
.text$mn:0000B240 arg_0           = dword ptr  8
.text$mn:0000B240
.text$mn:0000B240                 push    ebp
.text$mn:0000B241                 mov     ebp, esp
.text$mn:0000B243                 push    0FFFFFFFFh
.text$mn:0000B245                 push    offset __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000B24A                 mov     eax, large fs:0
.text$mn:0000B250                 push    eax
.text$mn:0000B251                 sub     esp, 8
.text$mn:0000B254                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B259                 xor     eax, ebp
.text$mn:0000B25B                 push    eax
.text$mn:0000B25C                 lea     eax, [ebp+var_C]
.text$mn:0000B25F                 mov     large fs:0, eax
.text$mn:0000B265                 mov     [ebp+var_10], ecx
.text$mn:0000B268                 mov     [ebp+var_14], 0
.text$mn:0000B26F                 mov     eax, [ebp+var_10]
.text$mn:0000B272                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000B273                 mov     ecx, [ebp+var_10]
.text$mn:0000B276                 mov     edx, [ecx+8]
.text$mn:0000B279                 push    edx             ; int
.text$mn:0000B27A                 mov     ecx, [ebp+arg_0]
.text$mn:0000B27D                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000B282                 mov     [ebp+var_4], 0
.text$mn:0000B289                 mov     eax, [ebp+var_14]
.text$mn:0000B28C                 or      eax, 1
.text$mn:0000B28F                 mov     [ebp+var_14], eax
.text$mn:0000B292                 mov     eax, [ebp+arg_0]
.text$mn:0000B295                 mov     ecx, [ebp+var_C]
.text$mn:0000B298                 mov     large fs:0, ecx
.text$mn:0000B29F                 pop     ecx
.text$mn:0000B2A0                 mov     esp, ebp
.text$mn:0000B2A2                 pop     ebp
.text$mn:0000B2A3                 retn    4
.text$mn:0000B2A3 ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000B2A3
.text$mn:0000B2A3 ; ---------------------------------------------------------------------------
.text$mn:0000B2A6                 align 4
.text$mn:0000B2A6 _text$mn        ends
.text$mn:0000B2A6
.text$x:0000B2A8 ; ===========================================================================
.text$x:0000B2A8
.text$x:0000B2A8 ; Segment type: Pure code
.text$x:0000B2A8 ; Segment permissions: Read/Execute
.text$x:0000B2A8 _text$x         segment para public 'CODE' use32
.text$x:0000B2A8                 assume cs:_text$x
.text$x:0000B2A8                 ;org 0B2A8h
.text$x:0000B2A8 ; COMDAT (pick associative to section at B240)
.text$x:0000B2A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B2A8
.text$x:0000B2A8 ; =============== S U B R O U T I N E =======================================
.text$x:0000B2A8
.text$x:0000B2A8
.text$x:0000B2A8 __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000B2A8                                         ; DATA XREF: .xdata$x:0000D400o
.text$x:0000B2A8                 mov     eax, [ebp-14h]
.text$x:0000B2AB                 and     eax, 1
.text$x:0000B2AE                 jz      $LN4_3
.text$x:0000B2B4                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000B2B8                 mov     ecx, [ebp+8]
.text$x:0000B2BB                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B2C0 ; ---------------------------------------------------------------------------
.text$x:0000B2C0
.text$x:0000B2C0 $LN4_3:                                 ; CODE XREF: __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000B2C0                 retn
.text$x:0000B2C0 __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000B2C0
.text$x:0000B2C1
.text$x:0000B2C1 ; =============== S U B R O U T I N E =======================================
.text$x:0000B2C1
.text$x:0000B2C1
.text$x:0000B2C1 __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000B2C1                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)+5o
.text$x:0000B2C1
.text$x:0000B2C1 arg_4           = dword ptr  8
.text$x:0000B2C1
.text$x:0000B2C1                 mov     edx, [esp+arg_4]
.text$x:0000B2C5                 lea     eax, [edx+0Ch]
.text$x:0000B2C8                 mov     ecx, [edx-0Ch]
.text$x:0000B2CB                 xor     ecx, eax
.text$x:0000B2CD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B2D2                 mov     eax, offset __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000B2D7                 jmp     ___CxxFrameHandler3
.text$x:0000B2D7 __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000B2D7
.text$x:0000B2D7 _text$x         ends
.text$x:0000B2D7
.text$mn:0000B2DC ; ===========================================================================
.text$mn:0000B2DC
.text$mn:0000B2DC ; Segment type: Pure code
.text$mn:0000B2DC ; Segment permissions: Read/Execute
.text$mn:0000B2DC _text$mn        segment para public 'CODE' use32
.text$mn:0000B2DC                 assume cs:_text$mn
.text$mn:0000B2DC                 ;org 0B2DCh
.text$mn:0000B2DC ; COMDAT (pick any)
.text$mn:0000B2DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2DC
.text$mn:0000B2DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2DC
.text$mn:0000B2DC ; Attributes: bp-based frame
.text$mn:0000B2DC
.text$mn:0000B2DC ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000B2DC                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000B2DC ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000B2DC                                         ; DATA XREF: .rdata:0000E6CCo
.text$mn:0000B2DC                                         ; .rdata:0000E6E8o ...
.text$mn:0000B2DC
.text$mn:0000B2DC var_8           = dword ptr -8
.text$mn:0000B2DC var_4           = dword ptr -4
.text$mn:0000B2DC arg_0           = dword ptr  8
.text$mn:0000B2DC arg_4           = dword ptr  0Ch
.text$mn:0000B2DC
.text$mn:0000B2DC                 push    ebp
.text$mn:0000B2DD                 mov     ebp, esp
.text$mn:0000B2DF                 sub     esp, 8
.text$mn:0000B2E2                 mov     [ebp+var_8], ecx
.text$mn:0000B2E5                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000B2E8                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000B2ED                 push    eax
.text$mn:0000B2EE                 mov     ecx, [ebp+var_8]
.text$mn:0000B2F1                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000B2F6                 movzx   eax, al
.text$mn:0000B2F9                 test    eax, eax
.text$mn:0000B2FB                 jz      short loc_B313
.text$mn:0000B2FD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000B300                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000B305                 cmp     eax, [ebp+arg_4]
.text$mn:0000B308                 jnz     short loc_B313
.text$mn:0000B30A                 mov     [ebp+var_4], 1
.text$mn:0000B311                 jmp     short loc_B31A
.text$mn:0000B313 ; ---------------------------------------------------------------------------
.text$mn:0000B313
.text$mn:0000B313 loc_B313:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000B313                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000B313                 mov     [ebp+var_4], 0
.text$mn:0000B31A
.text$mn:0000B31A loc_B31A:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000B31A                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000B31D                 mov     esp, ebp
.text$mn:0000B31F                 pop     ebp
.text$mn:0000B320                 retn    8
.text$mn:0000B320 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000B320
.text$mn:0000B320 ; ---------------------------------------------------------------------------
.text$mn:0000B323                 align 4
.text$mn:0000B323 _text$mn        ends
.text$mn:0000B323
.text$mn:0000B324 ; ===========================================================================
.text$mn:0000B324
.text$mn:0000B324 ; Segment type: Pure code
.text$mn:0000B324 ; Segment permissions: Read/Execute
.text$mn:0000B324 _text$mn        segment para public 'CODE' use32
.text$mn:0000B324                 assume cs:_text$mn
.text$mn:0000B324                 ;org 0B324h
.text$mn:0000B324 ; COMDAT (pick any)
.text$mn:0000B324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B324
.text$mn:0000B324 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B324
.text$mn:0000B324 ; Attributes: bp-based frame
.text$mn:0000B324
.text$mn:0000B324 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:0000B324                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:0000B324 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:0000B324                                         ; DATA XREF: .rdata:0000E6D0o
.text$mn:0000B324                                         ; .rdata:0000E6ECo ...
.text$mn:0000B324
.text$mn:0000B324 var_C           = byte ptr -0Ch
.text$mn:0000B324 var_4           = dword ptr -4
.text$mn:0000B324 arg_0           = dword ptr  8
.text$mn:0000B324 arg_4           = dword ptr  0Ch
.text$mn:0000B324
.text$mn:0000B324                 push    ebp
.text$mn:0000B325                 mov     ebp, esp
.text$mn:0000B327                 sub     esp, 0Ch
.text$mn:0000B32A                 mov     [ebp+var_4], ecx
.text$mn:0000B32D                 mov     eax, [ebp+arg_4]
.text$mn:0000B330                 push    eax             ; std::error_condition *
.text$mn:0000B331                 mov     ecx, [ebp+arg_0]
.text$mn:0000B334                 push    ecx
.text$mn:0000B335                 lea     edx, [ebp+var_C]
.text$mn:0000B338                 push    edx
.text$mn:0000B339                 mov     eax, [ebp+var_4]
.text$mn:0000B33C                 mov     edx, [eax]
.text$mn:0000B33E                 mov     ecx, [ebp+var_4]
.text$mn:0000B341                 mov     eax, [edx+0Ch]
.text$mn:0000B344                 call    eax
.text$mn:0000B346                 mov     ecx, eax
.text$mn:0000B348                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:0000B34D                 mov     esp, ebp
.text$mn:0000B34F                 pop     ebp
.text$mn:0000B350                 retn    8
.text$mn:0000B350 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000B350
.text$mn:0000B350 ; ---------------------------------------------------------------------------
.text$mn:0000B353                 align 4
.text$mn:0000B353 _text$mn        ends
.text$mn:0000B353
.text$mn:0000B354 ; ===========================================================================
.text$mn:0000B354
.text$mn:0000B354 ; Segment type: Pure code
.text$mn:0000B354 ; Segment permissions: Read/Execute
.text$mn:0000B354 _text$mn        segment para public 'CODE' use32
.text$mn:0000B354                 assume cs:_text$mn
.text$mn:0000B354                 ;org 0B354h
.text$mn:0000B354 ; COMDAT (pick any)
.text$mn:0000B354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B354
.text$mn:0000B354 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B354
.text$mn:0000B354 ; Attributes: bp-based frame
.text$mn:0000B354
.text$mn:0000B354 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:0000B354                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:0000B354 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000B354                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:0000B354
.text$mn:0000B354 var_4           = dword ptr -4
.text$mn:0000B354 arg_0           = dword ptr  8
.text$mn:0000B354
.text$mn:0000B354                 push    ebp
.text$mn:0000B355                 mov     ebp, esp
.text$mn:0000B357                 push    ecx
.text$mn:0000B358                 mov     [ebp+var_4], ecx
.text$mn:0000B35B                 mov     eax, [ebp+var_4]
.text$mn:0000B35E                 mov     ecx, [eax+14h]
.text$mn:0000B361                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B364                 jnb     short loc_B36E
.text$mn:0000B366                 mov     ecx, [ebp+var_4]
.text$mn:0000B369                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000B36E
.text$mn:0000B36E loc_B36E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000B36E                 mov     edx, [ebp+arg_0]
.text$mn:0000B371                 push    edx
.text$mn:0000B372                 mov     ecx, [ebp+var_4]
.text$mn:0000B375                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000B37A                 mov     eax, [ebp+var_4]
.text$mn:0000B37D                 mov     esp, ebp
.text$mn:0000B37F                 pop     ebp
.text$mn:0000B380                 retn    4
.text$mn:0000B380 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000B380
.text$mn:0000B380 ; ---------------------------------------------------------------------------
.text$mn:0000B383                 align 4
.text$mn:0000B383 _text$mn        ends
.text$mn:0000B383
.text$mn:0000B384 ; ===========================================================================
.text$mn:0000B384
.text$mn:0000B384 ; Segment type: Pure code
.text$mn:0000B384 ; Segment permissions: Read/Execute
.text$mn:0000B384 _text$mn        segment para public 'CODE' use32
.text$mn:0000B384                 assume cs:_text$mn
.text$mn:0000B384                 ;org 0B384h
.text$mn:0000B384 ; COMDAT (pick any)
.text$mn:0000B384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B384
.text$mn:0000B384 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B384
.text$mn:0000B384 ; Attributes: bp-based frame
.text$mn:0000B384
.text$mn:0000B384 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000B384                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000B384 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000B384                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000B384
.text$mn:0000B384 var_C           = dword ptr -0Ch
.text$mn:0000B384 Dst             = dword ptr -8
.text$mn:0000B384 var_4           = dword ptr -4
.text$mn:0000B384 arg_0           = dword ptr  8
.text$mn:0000B384 arg_4           = dword ptr  0Ch
.text$mn:0000B384
.text$mn:0000B384                 push    ebp
.text$mn:0000B385                 mov     ebp, esp
.text$mn:0000B387                 sub     esp, 0Ch
.text$mn:0000B38A                 mov     [ebp+var_4], ecx
.text$mn:0000B38D                 mov     eax, [ebp+var_4]
.text$mn:0000B390                 mov     ecx, [eax+14h]
.text$mn:0000B393                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B396                 jnb     short loc_B3A0
.text$mn:0000B398                 mov     ecx, [ebp+var_4]
.text$mn:0000B39B                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000B3A0
.text$mn:0000B3A0 loc_B3A0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000B3A0                 mov     edx, [ebp+var_4]
.text$mn:0000B3A3                 mov     eax, [edx+14h]
.text$mn:0000B3A6                 sub     eax, [ebp+arg_0]
.text$mn:0000B3A9                 cmp     eax, [ebp+arg_4]
.text$mn:0000B3AC                 ja      short loc_B3BC
.text$mn:0000B3AE                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3B1                 push    ecx
.text$mn:0000B3B2                 mov     ecx, [ebp+var_4]
.text$mn:0000B3B5                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000B3BA                 jmp     short loc_B402
.text$mn:0000B3BC ; ---------------------------------------------------------------------------
.text$mn:0000B3BC
.text$mn:0000B3BC loc_B3BC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000B3BC                 cmp     [ebp+arg_4], 0
.text$mn:0000B3C0                 jbe     short loc_B402
.text$mn:0000B3C2                 mov     ecx, [ebp+var_4]
.text$mn:0000B3C5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000B3CA                 add     eax, [ebp+arg_0]
.text$mn:0000B3CD                 mov     [ebp+Dst], eax
.text$mn:0000B3D0                 mov     edx, [ebp+var_4]
.text$mn:0000B3D3                 mov     eax, [edx+14h]
.text$mn:0000B3D6                 sub     eax, [ebp+arg_4]
.text$mn:0000B3D9                 mov     [ebp+var_C], eax
.text$mn:0000B3DC                 mov     ecx, [ebp+var_C]
.text$mn:0000B3DF                 sub     ecx, [ebp+arg_0]
.text$mn:0000B3E2                 push    ecx             ; Size
.text$mn:0000B3E3                 mov     edx, [ebp+Dst]
.text$mn:0000B3E6                 add     edx, [ebp+arg_4]
.text$mn:0000B3E9                 push    edx             ; Src
.text$mn:0000B3EA                 mov     eax, [ebp+Dst]
.text$mn:0000B3ED                 push    eax             ; Dst
.text$mn:0000B3EE                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000B3F3                 add     esp, 0Ch
.text$mn:0000B3F6                 mov     ecx, [ebp+var_C]
.text$mn:0000B3F9                 push    ecx
.text$mn:0000B3FA                 mov     ecx, [ebp+var_4]
.text$mn:0000B3FD                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000B402
.text$mn:0000B402 loc_B402:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000B402                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000B402                 mov     eax, [ebp+var_4]
.text$mn:0000B405                 mov     esp, ebp
.text$mn:0000B407                 pop     ebp
.text$mn:0000B408                 retn    8
.text$mn:0000B408 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000B408
.text$mn:0000B408 ; ---------------------------------------------------------------------------
.text$mn:0000B40B                 align 4
.text$mn:0000B40B _text$mn        ends
.text$mn:0000B40B
.text$mn:0000B40C ; ===========================================================================
.text$mn:0000B40C
.text$mn:0000B40C ; Segment type: Pure code
.text$mn:0000B40C ; Segment permissions: Read/Execute
.text$mn:0000B40C _text$mn        segment para public 'CODE' use32
.text$mn:0000B40C                 assume cs:_text$mn
.text$mn:0000B40C                 ;org 0B40Ch
.text$mn:0000B40C ; COMDAT (pick any)
.text$mn:0000B40C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B40C
.text$mn:0000B40C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B40C
.text$mn:0000B40C ; Attributes: bp-based frame
.text$mn:0000B40C
.text$mn:0000B40C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000B40C                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000B40C ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000B40C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000B40C
.text$mn:0000B40C var_4           = dword ptr -4
.text$mn:0000B40C arg_0           = dword ptr  8
.text$mn:0000B40C
.text$mn:0000B40C                 push    ebp
.text$mn:0000B40D                 mov     ebp, esp
.text$mn:0000B40F                 push    ecx
.text$mn:0000B410                 mov     [ebp+var_4], ecx
.text$mn:0000B413                 mov     eax, [ebp+var_4]
.text$mn:0000B416                 mov     ecx, [eax+14h]
.text$mn:0000B419                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B41C                 jnb     short loc_B426
.text$mn:0000B41E                 mov     ecx, [ebp+var_4]
.text$mn:0000B421                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000B426
.text$mn:0000B426 loc_B426:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:0000B426                 mov     edx, [ebp+arg_0]
.text$mn:0000B429                 push    edx
.text$mn:0000B42A                 mov     ecx, [ebp+var_4]
.text$mn:0000B42D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B432                 mov     eax, [ebp+var_4]
.text$mn:0000B435                 mov     esp, ebp
.text$mn:0000B437                 pop     ebp
.text$mn:0000B438                 retn    4
.text$mn:0000B438 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000B438
.text$mn:0000B438 ; ---------------------------------------------------------------------------
.text$mn:0000B43B                 align 4
.text$mn:0000B43B _text$mn        ends
.text$mn:0000B43B
.text$mn:0000B43C ; ===========================================================================
.text$mn:0000B43C
.text$mn:0000B43C ; Segment type: Pure code
.text$mn:0000B43C ; Segment permissions: Read/Execute
.text$mn:0000B43C _text$mn        segment para public 'CODE' use32
.text$mn:0000B43C                 assume cs:_text$mn
.text$mn:0000B43C                 ;org 0B43Ch
.text$mn:0000B43C ; COMDAT (pick any)
.text$mn:0000B43C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B43C
.text$mn:0000B43C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B43C
.text$mn:0000B43C ; Attributes: bp-based frame
.text$mn:0000B43C
.text$mn:0000B43C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:0000B43C                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:0000B43C ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000B43C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:0000B43C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:0000B43C
.text$mn:0000B43C var_C           = dword ptr -0Ch
.text$mn:0000B43C Dst             = dword ptr -8
.text$mn:0000B43C var_4           = dword ptr -4
.text$mn:0000B43C arg_0           = dword ptr  8
.text$mn:0000B43C arg_4           = dword ptr  0Ch
.text$mn:0000B43C
.text$mn:0000B43C                 push    ebp
.text$mn:0000B43D                 mov     ebp, esp
.text$mn:0000B43F                 sub     esp, 0Ch
.text$mn:0000B442                 mov     [ebp+var_4], ecx
.text$mn:0000B445                 mov     eax, [ebp+var_4]
.text$mn:0000B448                 mov     ecx, [eax+14h]
.text$mn:0000B44B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B44E                 jnb     short loc_B458
.text$mn:0000B450                 mov     ecx, [ebp+var_4]
.text$mn:0000B453                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000B458
.text$mn:0000B458 loc_B458:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:0000B458                 mov     edx, [ebp+var_4]
.text$mn:0000B45B                 mov     eax, [edx+14h]
.text$mn:0000B45E                 sub     eax, [ebp+arg_0]
.text$mn:0000B461                 cmp     eax, [ebp+arg_4]
.text$mn:0000B464                 ja      short loc_B474
.text$mn:0000B466                 mov     ecx, [ebp+arg_0]
.text$mn:0000B469                 push    ecx
.text$mn:0000B46A                 mov     ecx, [ebp+var_4]
.text$mn:0000B46D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B472                 jmp     short loc_B4C0
.text$mn:0000B474 ; ---------------------------------------------------------------------------
.text$mn:0000B474
.text$mn:0000B474 loc_B474:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:0000B474                 cmp     [ebp+arg_4], 0
.text$mn:0000B478                 jbe     short loc_B4C0
.text$mn:0000B47A                 mov     ecx, [ebp+var_4]
.text$mn:0000B47D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B482                 mov     edx, [ebp+arg_0]
.text$mn:0000B485                 lea     eax, [eax+edx*2]
.text$mn:0000B488                 mov     [ebp+Dst], eax
.text$mn:0000B48B                 mov     ecx, [ebp+var_4]
.text$mn:0000B48E                 mov     edx, [ecx+14h]
.text$mn:0000B491                 sub     edx, [ebp+arg_4]
.text$mn:0000B494                 mov     [ebp+var_C], edx
.text$mn:0000B497                 mov     eax, [ebp+var_C]
.text$mn:0000B49A                 sub     eax, [ebp+arg_0]
.text$mn:0000B49D                 push    eax             ; int
.text$mn:0000B49E                 mov     ecx, [ebp+arg_4]
.text$mn:0000B4A1                 mov     edx, [ebp+Dst]
.text$mn:0000B4A4                 lea     eax, [edx+ecx*2]
.text$mn:0000B4A7                 push    eax             ; Src
.text$mn:0000B4A8                 mov     ecx, [ebp+Dst]
.text$mn:0000B4AB                 push    ecx             ; Dst
.text$mn:0000B4AC                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B4B1                 add     esp, 0Ch
.text$mn:0000B4B4                 mov     edx, [ebp+var_C]
.text$mn:0000B4B7                 push    edx
.text$mn:0000B4B8                 mov     ecx, [ebp+var_4]
.text$mn:0000B4BB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B4C0
.text$mn:0000B4C0 loc_B4C0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000B4C0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000B4C0                 mov     eax, [ebp+var_4]
.text$mn:0000B4C3                 mov     esp, ebp
.text$mn:0000B4C5                 pop     ebp
.text$mn:0000B4C6                 retn    8
.text$mn:0000B4C6 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000B4C6
.text$mn:0000B4C6 ; ---------------------------------------------------------------------------
.text$mn:0000B4C9                 align 4
.text$mn:0000B4C9 _text$mn        ends
.text$mn:0000B4C9
.text$mn:0000B4CC ; ===========================================================================
.text$mn:0000B4CC
.text$mn:0000B4CC ; Segment type: Pure code
.text$mn:0000B4CC ; Segment permissions: Read/Execute
.text$mn:0000B4CC _text$mn        segment para public 'CODE' use32
.text$mn:0000B4CC                 assume cs:_text$mn
.text$mn:0000B4CC                 ;org 0B4CCh
.text$mn:0000B4CC ; COMDAT (pick any)
.text$mn:0000B4CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B4CC
.text$mn:0000B4CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B4CC
.text$mn:0000B4CC ; Attributes: bp-based frame
.text$mn:0000B4CC
.text$mn:0000B4CC ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::erase(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:0000B4CC                 public ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000B4CC ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$mn:0000B4CC                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+215p
.text$mn:0000B4CC
.text$mn:0000B4CC var_24          = dword ptr -24h
.text$mn:0000B4CC var_20          = dword ptr -20h
.text$mn:0000B4CC var_1C          = dword ptr -1Ch
.text$mn:0000B4CC var_18          = dword ptr -18h
.text$mn:0000B4CC var_14          = dword ptr -14h
.text$mn:0000B4CC var_10          = dword ptr -10h
.text$mn:0000B4CC var_C           = dword ptr -0Ch
.text$mn:0000B4CC var_4           = dword ptr -4
.text$mn:0000B4CC arg_0           = dword ptr  8
.text$mn:0000B4CC arg_4           = byte ptr  0Ch
.text$mn:0000B4CC arg_C           = dword ptr  14h
.text$mn:0000B4CC
.text$mn:0000B4CC                 push    ebp
.text$mn:0000B4CD                 mov     ebp, esp
.text$mn:0000B4CF                 push    0FFFFFFFFh
.text$mn:0000B4D1                 push    offset __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000B4D6                 mov     eax, large fs:0
.text$mn:0000B4DC                 push    eax
.text$mn:0000B4DD                 sub     esp, 18h
.text$mn:0000B4E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B4E5                 xor     eax, ebp
.text$mn:0000B4E7                 push    eax
.text$mn:0000B4E8                 lea     eax, [ebp+var_C]
.text$mn:0000B4EB                 mov     large fs:0, eax
.text$mn:0000B4F1                 mov     [ebp+var_10], ecx
.text$mn:0000B4F4                 mov     [ebp+var_14], 0
.text$mn:0000B4FB                 mov     [ebp+var_4], 1
.text$mn:0000B502                 lea     ecx, [ebp+arg_4] ; this
.text$mn:0000B505                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000B50A                 cmp     eax, [ebp+var_10]
.text$mn:0000B50D                 jnz     short loc_B525
.text$mn:0000B50F                 mov     eax, [ebp+var_10]
.text$mn:0000B512                 mov     ecx, [ebp+arg_C]
.text$mn:0000B515                 cmp     ecx, [eax+4]
.text$mn:0000B518                 jb      short loc_B525
.text$mn:0000B51A                 mov     edx, [ebp+var_10]
.text$mn:0000B51D                 mov     eax, [edx+8]
.text$mn:0000B520                 cmp     eax, [ebp+arg_C]
.text$mn:0000B523                 ja      short loc_B53C
.text$mn:0000B525
.text$mn:0000B525 loc_B525:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+41j
.text$mn:0000B525                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+4Cj
.text$mn:0000B525                 push    5A2h            ; unsigned int
.text$mn:0000B52A                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000B52F                 push    offset ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; "vector erase iterator outside range"
.text$mn:0000B534                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000B539                 add     esp, 0Ch
.text$mn:0000B53C
.text$mn:0000B53C loc_B53C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+57j
.text$mn:0000B53C                 mov     ecx, [ebp+arg_C]
.text$mn:0000B53F                 push    ecx
.text$mn:0000B540                 mov     edx, [ebp+var_10]
.text$mn:0000B543                 mov     eax, [edx+8]
.text$mn:0000B546                 push    eax
.text$mn:0000B547                 mov     ecx, [ebp+arg_C]
.text$mn:0000B54A                 add     ecx, 1Ch
.text$mn:0000B54D                 push    ecx
.text$mn:0000B54E                 call    ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000B553                 add     esp, 0Ch
.text$mn:0000B556                 mov     edx, [ebp+var_10]
.text$mn:0000B559                 mov     eax, [edx+8]
.text$mn:0000B55C                 push    eax
.text$mn:0000B55D                 mov     ecx, [ebp+var_10]
.text$mn:0000B560                 mov     edx, [ecx+8]
.text$mn:0000B563                 sub     edx, 1Ch
.text$mn:0000B566                 push    edx
.text$mn:0000B567                 mov     ecx, [ebp+var_10]
.text$mn:0000B56A                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000B56F                 mov     eax, [ebp+var_10]
.text$mn:0000B572                 mov     ecx, [eax+8]
.text$mn:0000B575                 push    ecx
.text$mn:0000B576                 mov     edx, [ebp+arg_C]
.text$mn:0000B579                 push    edx
.text$mn:0000B57A                 mov     ecx, [ebp+var_10]
.text$mn:0000B57D                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000B582                 mov     eax, [ebp+var_10]
.text$mn:0000B585                 mov     ecx, [eax+8]
.text$mn:0000B588                 sub     ecx, 1Ch
.text$mn:0000B58B                 mov     edx, [ebp+var_10]
.text$mn:0000B58E                 mov     [edx+8], ecx
.text$mn:0000B591                 sub     esp, 0Ch
.text$mn:0000B594                 mov     ecx, esp
.text$mn:0000B596                 mov     [ebp+var_1C], esp
.text$mn:0000B599                 lea     eax, [ebp+arg_4]
.text$mn:0000B59C                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000B59D                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000B5A2                 mov     [ebp+var_18], eax
.text$mn:0000B5A5                 mov     ecx, [ebp+var_18]
.text$mn:0000B5A8                 mov     [ebp+var_20], ecx
.text$mn:0000B5AB                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000B5AF                 mov     edx, [ebp+arg_0]
.text$mn:0000B5B2                 push    edx
.text$mn:0000B5B3                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000B5B7                 mov     ecx, [ebp+var_10]
.text$mn:0000B5BA                 call    ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:0000B5BF                 mov     [ebp+var_24], eax
.text$mn:0000B5C2                 mov     eax, [ebp+var_14]
.text$mn:0000B5C5                 or      eax, 1
.text$mn:0000B5C8                 mov     [ebp+var_14], eax
.text$mn:0000B5CB                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000B5CF                 lea     ecx, [ebp+arg_4]
.text$mn:0000B5D2                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000B5D7                 mov     eax, [ebp+arg_0]
.text$mn:0000B5DA                 mov     ecx, [ebp+var_C]
.text$mn:0000B5DD                 mov     large fs:0, ecx
.text$mn:0000B5E4                 pop     ecx
.text$mn:0000B5E5                 mov     esp, ebp
.text$mn:0000B5E7                 pop     ebp
.text$mn:0000B5E8                 retn    10h
.text$mn:0000B5E8 ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$mn:0000B5E8
.text$mn:0000B5E8 ; ---------------------------------------------------------------------------
.text$mn:0000B5EB                 align 4
.text$mn:0000B5EB _text$mn        ends
.text$mn:0000B5EB
.text$x:0000B5EC ; ===========================================================================
.text$x:0000B5EC
.text$x:0000B5EC ; Segment type: Pure code
.text$x:0000B5EC ; Segment permissions: Read/Execute
.text$x:0000B5EC _text$x         segment para public 'CODE' use32
.text$x:0000B5EC                 assume cs:_text$x
.text$x:0000B5EC                 ;org 0B5ECh
.text$x:0000B5EC ; COMDAT (pick associative to section at B4CC)
.text$x:0000B5EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B5EC
.text$x:0000B5EC ; =============== S U B R O U T I N E =======================================
.text$x:0000B5EC
.text$x:0000B5EC
.text$x:0000B5EC __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000B5EC                                         ; DATA XREF: .xdata$x:0000D468o
.text$x:0000B5EC                 lea     ecx, [ebp+0Ch]
.text$x:0000B5EF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B5EF __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 endp
.text$x:0000B5EF
.text$x:0000B5F4
.text$x:0000B5F4 ; =============== S U B R O U T I N E =======================================
.text$x:0000B5F4
.text$x:0000B5F4
.text$x:0000B5F4 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 proc near
.text$x:0000B5F4                                         ; DATA XREF: .xdata$x:0000D470o
.text$x:0000B5F4                 mov     ecx, [ebp-1Ch]
.text$x:0000B5F7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B5F7 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 endp
.text$x:0000B5F7
.text$x:0000B5FC
.text$x:0000B5FC ; =============== S U B R O U T I N E =======================================
.text$x:0000B5FC
.text$x:0000B5FC
.text$x:0000B5FC __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2 proc near
.text$x:0000B5FC                                         ; DATA XREF: .xdata$x:0000D460o
.text$x:0000B5FC                 mov     eax, [ebp-14h]
.text$x:0000B5FF                 and     eax, 1
.text$x:0000B602                 jz      $LN8
.text$x:0000B608                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000B60C                 mov     ecx, [ebp+8]
.text$x:0000B60F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B614 ; ---------------------------------------------------------------------------
.text$x:0000B614
.text$x:0000B614 $LN8:                                   ; CODE XREF: __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2+6j
.text$x:0000B614                 retn
.text$x:0000B614 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2 endp
.text$x:0000B614
.text$x:0000B615
.text$x:0000B615 ; =============== S U B R O U T I N E =======================================
.text$x:0000B615
.text$x:0000B615
.text$x:0000B615 __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$x:0000B615                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:0000B615
.text$x:0000B615 arg_4           = dword ptr  8
.text$x:0000B615
.text$x:0000B615                 mov     edx, [esp+arg_4]
.text$x:0000B619                 lea     eax, [edx+0Ch]
.text$x:0000B61C                 mov     ecx, [edx-1Ch]
.text$x:0000B61F                 xor     ecx, eax
.text$x:0000B621                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B626                 mov     eax, offset __ehfuncinfo$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$x:0000B62B                 jmp     ___CxxFrameHandler3
.text$x:0000B62B __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$x:0000B62B
.text$x:0000B62B _text$x         ends
.text$x:0000B62B
.text$mn:0000B630 ; ===========================================================================
.text$mn:0000B630
.text$mn:0000B630 ; Segment type: Pure code
.text$mn:0000B630 ; Segment permissions: Read/Execute
.text$mn:0000B630 _text$mn        segment para public 'CODE' use32
.text$mn:0000B630                 assume cs:_text$mn
.text$mn:0000B630                 ;org 0B630h
.text$mn:0000B630 ; COMDAT (pick any)
.text$mn:0000B630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B630
.text$mn:0000B630 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B630
.text$mn:0000B630 ; Attributes: bp-based frame
.text$mn:0000B630
.text$mn:0000B630 ; __int32 __thiscall ScintillaEditView::execute(ScintillaEditView *this, unsigned int, unsigned int, __int32)
.text$mn:0000B630                 public ?execute@ScintillaEditView@@QBEJIIJ@Z
.text$mn:0000B630 ?execute@ScintillaEditView@@QBEJIIJ@Z proc near
.text$mn:0000B630                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+E5p
.text$mn:0000B630                                         ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+199p ...
.text$mn:0000B630
.text$mn:0000B630 var_4           = dword ptr -4
.text$mn:0000B630 arg_0           = dword ptr  8
.text$mn:0000B630 arg_4           = dword ptr  0Ch
.text$mn:0000B630 arg_8           = dword ptr  10h
.text$mn:0000B630
.text$mn:0000B630                 push    ebp
.text$mn:0000B631                 mov     ebp, esp
.text$mn:0000B633                 push    ecx
.text$mn:0000B634                 mov     [ebp+var_4], ecx
.text$mn:0000B637                 mov     eax, [ebp+arg_8]
.text$mn:0000B63A                 push    eax
.text$mn:0000B63B                 mov     ecx, [ebp+arg_4]
.text$mn:0000B63E                 push    ecx
.text$mn:0000B63F                 mov     edx, [ebp+arg_0]
.text$mn:0000B642                 push    edx
.text$mn:0000B643                 mov     eax, [ebp+var_4]
.text$mn:0000B646                 mov     ecx, [eax+14h]
.text$mn:0000B649                 push    ecx
.text$mn:0000B64A                 mov     edx, [ebp+var_4]
.text$mn:0000B64D                 mov     eax, [edx+10h]
.text$mn:0000B650                 call    eax
.text$mn:0000B652                 add     esp, 10h
.text$mn:0000B655                 mov     esp, ebp
.text$mn:0000B657                 pop     ebp
.text$mn:0000B658                 retn    0Ch
.text$mn:0000B658 ?execute@ScintillaEditView@@QBEJIIJ@Z endp
.text$mn:0000B658
.text$mn:0000B658 ; ---------------------------------------------------------------------------
.text$mn:0000B65B                 align 4
.text$mn:0000B65B _text$mn        ends
.text$mn:0000B65B
.text$mn:0000B65C ; ===========================================================================
.text$mn:0000B65C
.text$mn:0000B65C ; Segment type: Pure code
.text$mn:0000B65C ; Segment permissions: Read/Execute
.text$mn:0000B65C _text$mn        segment para public 'CODE' use32
.text$mn:0000B65C                 assume cs:_text$mn
.text$mn:0000B65C                 ;org 0B65Ch
.text$mn:0000B65C ; COMDAT (pick any)
.text$mn:0000B65C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B65C
.text$mn:0000B65C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B65C
.text$mn:0000B65C ; Attributes: bp-based frame
.text$mn:0000B65C
.text$mn:0000B65C ; void __thiscall TreeView::expand(TreeView *this, struct _TREEITEM *)
.text$mn:0000B65C                 public ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z
.text$mn:0000B65C ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z proc near
.text$mn:0000B65C                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+1B1p
.text$mn:0000B65C                                         ; FunctionListPanel::reload(void)+4A3p ...
.text$mn:0000B65C
.text$mn:0000B65C var_4           = dword ptr -4
.text$mn:0000B65C lParam          = dword ptr  8
.text$mn:0000B65C
.text$mn:0000B65C                 push    ebp
.text$mn:0000B65D                 mov     ebp, esp
.text$mn:0000B65F                 push    ecx
.text$mn:0000B660                 mov     [ebp+var_4], ecx
.text$mn:0000B663                 mov     eax, [ebp+lParam]
.text$mn:0000B666                 push    eax             ; lParam
.text$mn:0000B667                 push    2               ; wParam
.text$mn:0000B669                 push    1102h           ; Msg
.text$mn:0000B66E                 mov     ecx, [ebp+var_4]
.text$mn:0000B671                 mov     edx, [ecx+0Ch]
.text$mn:0000B674                 push    edx             ; hWnd
.text$mn:0000B675                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000B67B                 mov     esp, ebp
.text$mn:0000B67D                 pop     ebp
.text$mn:0000B67E                 retn    4
.text$mn:0000B67E ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z endp
.text$mn:0000B67E
.text$mn:0000B67E ; ---------------------------------------------------------------------------
.text$mn:0000B681                 align 4
.text$mn:0000B681 _text$mn        ends
.text$mn:0000B681
.text$mn:0000B684 ; ===========================================================================
.text$mn:0000B684
.text$mn:0000B684 ; Segment type: Pure code
.text$mn:0000B684 ; Segment permissions: Read/Execute
.text$mn:0000B684 _text$mn        segment para public 'CODE' use32
.text$mn:0000B684                 assume cs:_text$mn
.text$mn:0000B684                 ;org 0B684h
.text$mn:0000B684 ; COMDAT (pick any)
.text$mn:0000B684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B684
.text$mn:0000B684 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B684
.text$mn:0000B684 ; Attributes: bp-based frame
.text$mn:0000B684
.text$mn:0000B684 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:0000B684                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:0000B684 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000B684                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:0000B684                 push    ebp
.text$mn:0000B685                 mov     ebp, esp
.text$mn:0000B687                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:0000B68C                 pop     ebp
.text$mn:0000B68D                 retn
.text$mn:0000B68D ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000B68D
.text$mn:0000B68D ; ---------------------------------------------------------------------------
.text$mn:0000B68E                 align 10h
.text$mn:0000B68E _text$mn        ends
.text$mn:0000B68E
.text$mn:0000B690 ; ===========================================================================
.text$mn:0000B690
.text$mn:0000B690 ; Segment type: Pure code
.text$mn:0000B690 ; Segment permissions: Read/Execute
.text$mn:0000B690 _text$mn        segment para public 'CODE' use32
.text$mn:0000B690                 assume cs:_text$mn
.text$mn:0000B690                 ;org 0B690h
.text$mn:0000B690 ; COMDAT (pick any)
.text$mn:0000B690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B690
.text$mn:0000B690 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B690
.text$mn:0000B690 ; Attributes: bp-based frame
.text$mn:0000B690
.text$mn:0000B690 ; struct _TREEITEM *__thiscall TreeView::getChildFrom(TreeView *this, struct _TREEITEM *)
.text$mn:0000B690                 public ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z
.text$mn:0000B690 ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z proc near
.text$mn:0000B690                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+138p
.text$mn:0000B690
.text$mn:0000B690 var_4           = dword ptr -4
.text$mn:0000B690 lParam          = dword ptr  8
.text$mn:0000B690
.text$mn:0000B690                 push    ebp
.text$mn:0000B691                 mov     ebp, esp
.text$mn:0000B693                 push    ecx
.text$mn:0000B694                 mov     [ebp+var_4], ecx
.text$mn:0000B697                 mov     eax, [ebp+lParam]
.text$mn:0000B69A                 push    eax             ; lParam
.text$mn:0000B69B                 push    4               ; wParam
.text$mn:0000B69D                 push    110Ah           ; Msg
.text$mn:0000B6A2                 mov     ecx, [ebp+var_4]
.text$mn:0000B6A5                 mov     edx, [ecx+0Ch]
.text$mn:0000B6A8                 push    edx             ; hWnd
.text$mn:0000B6A9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000B6AF                 mov     esp, ebp
.text$mn:0000B6B1                 pop     ebp
.text$mn:0000B6B2                 retn    4
.text$mn:0000B6B2 ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z endp
.text$mn:0000B6B2
.text$mn:0000B6B2 ; ---------------------------------------------------------------------------
.text$mn:0000B6B5                 align 4
.text$mn:0000B6B5 _text$mn        ends
.text$mn:0000B6B5
.text$mn:0000B6B8 ; ===========================================================================
.text$mn:0000B6B8
.text$mn:0000B6B8 ; Segment type: Pure code
.text$mn:0000B6B8 ; Segment permissions: Read/Execute
.text$mn:0000B6B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B6B8                 assume cs:_text$mn
.text$mn:0000B6B8                 ;org 0B6B8h
.text$mn:0000B6B8 ; COMDAT (pick any)
.text$mn:0000B6B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6B8
.text$mn:0000B6B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6B8
.text$mn:0000B6B8 ; Attributes: bp-based frame
.text$mn:0000B6B8
.text$mn:0000B6B8 ; struct Buffer *__thiscall ScintillaEditView::getCurrentBuffer(ScintillaEditView *__hidden this)
.text$mn:0000B6B8                 public ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ
.text$mn:0000B6B8 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ proc near
.text$mn:0000B6B8                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+F2p
.text$mn:0000B6B8                                         ; FunctionListPanel::reload(void)+140p ...
.text$mn:0000B6B8
.text$mn:0000B6B8 var_4           = dword ptr -4
.text$mn:0000B6B8
.text$mn:0000B6B8                 push    ebp
.text$mn:0000B6B9                 mov     ebp, esp
.text$mn:0000B6BB                 push    ecx
.text$mn:0000B6BC                 mov     [ebp+var_4], ecx
.text$mn:0000B6BF                 mov     eax, [ebp+var_4]
.text$mn:0000B6C2                 mov     eax, [eax+20h]
.text$mn:0000B6C5                 mov     esp, ebp
.text$mn:0000B6C7                 pop     ebp
.text$mn:0000B6C8                 retn
.text$mn:0000B6C8 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ endp
.text$mn:0000B6C8
.text$mn:0000B6C8 ; ---------------------------------------------------------------------------
.text$mn:0000B6C9                 align 4
.text$mn:0000B6C9 _text$mn        ends
.text$mn:0000B6C9
.text$mn:0000B6CC ; ===========================================================================
.text$mn:0000B6CC
.text$mn:0000B6CC ; Segment type: Pure code
.text$mn:0000B6CC ; Segment permissions: Read/Execute
.text$mn:0000B6CC _text$mn        segment para public 'CODE' use32
.text$mn:0000B6CC                 assume cs:_text$mn
.text$mn:0000B6CC                 ;org 0B6CCh
.text$mn:0000B6CC ; COMDAT (pick any)
.text$mn:0000B6CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6CC
.text$mn:0000B6CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6CC
.text$mn:0000B6CC ; Attributes: bp-based frame
.text$mn:0000B6CC
.text$mn:0000B6CC ; int __thiscall ScintillaEditView::getCurrentDocLen(ScintillaEditView *__hidden this)
.text$mn:0000B6CC                 public ?getCurrentDocLen@ScintillaEditView@@QBEHXZ
.text$mn:0000B6CC ?getCurrentDocLen@ScintillaEditView@@QBEHXZ proc near
.text$mn:0000B6CC                                         ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+3Dp
.text$mn:0000B6CC
.text$mn:0000B6CC var_4           = dword ptr -4
.text$mn:0000B6CC
.text$mn:0000B6CC                 push    ebp
.text$mn:0000B6CD                 mov     ebp, esp
.text$mn:0000B6CF                 push    ecx
.text$mn:0000B6D0                 mov     [ebp+var_4], ecx
.text$mn:0000B6D3                 push    0               ; __int32
.text$mn:0000B6D5                 push    0               ; unsigned int
.text$mn:0000B6D7                 push    7D6h            ; unsigned int
.text$mn:0000B6DC                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000B6DF                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000B6E4                 mov     esp, ebp
.text$mn:0000B6E6                 pop     ebp
.text$mn:0000B6E7                 retn
.text$mn:0000B6E7 ?getCurrentDocLen@ScintillaEditView@@QBEHXZ endp
.text$mn:0000B6E7
.text$mn:0000B6E7 _text$mn        ends
.text$mn:0000B6E7
.text$mn:0000B6E8 ; ===========================================================================
.text$mn:0000B6E8
.text$mn:0000B6E8 ; Segment type: Pure code
.text$mn:0000B6E8 ; Segment permissions: Read/Execute
.text$mn:0000B6E8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B6E8                 assume cs:_text$mn
.text$mn:0000B6E8                 ;org 0B6E8h
.text$mn:0000B6E8 ; COMDAT (pick any)
.text$mn:0000B6E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6E8
.text$mn:0000B6E8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6E8
.text$mn:0000B6E8 ; Attributes: bp-based frame
.text$mn:0000B6E8
.text$mn:0000B6E8 ; const wchar_t *__thiscall Buffer::getFileName(Buffer *__hidden this)
.text$mn:0000B6E8                 public ?getFileName@Buffer@@QBEPB_WXZ
.text$mn:0000B6E8 ?getFileName@Buffer@@QBEPB_WXZ proc near
.text$mn:0000B6E8                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+F9p
.text$mn:0000B6E8                                         ; FunctionListPanel::reload(void)+147p ...
.text$mn:0000B6E8
.text$mn:0000B6E8 var_4           = dword ptr -4
.text$mn:0000B6E8
.text$mn:0000B6E8                 push    ebp
.text$mn:0000B6E9                 mov     ebp, esp
.text$mn:0000B6EB                 push    ecx
.text$mn:0000B6EC                 mov     [ebp+var_4], ecx
.text$mn:0000B6EF                 mov     eax, [ebp+var_4]
.text$mn:0000B6F2                 mov     eax, [eax+0A8h]
.text$mn:0000B6F8                 mov     esp, ebp
.text$mn:0000B6FA                 pop     ebp
.text$mn:0000B6FB                 retn
.text$mn:0000B6FB ?getFileName@Buffer@@QBEPB_WXZ endp
.text$mn:0000B6FB
.text$mn:0000B6FB _text$mn        ends
.text$mn:0000B6FB
.text$mn:0000B6FC ; ===========================================================================
.text$mn:0000B6FC
.text$mn:0000B6FC ; Segment type: Pure code
.text$mn:0000B6FC ; Segment permissions: Read/Execute
.text$mn:0000B6FC _text$mn        segment para public 'CODE' use32
.text$mn:0000B6FC                 assume cs:_text$mn
.text$mn:0000B6FC                 ;org 0B6FCh
.text$mn:0000B6FC ; COMDAT (pick any)
.text$mn:0000B6FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6FC
.text$mn:0000B6FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6FC
.text$mn:0000B6FC ; Attributes: bp-based frame
.text$mn:0000B6FC
.text$mn:0000B6FC ; const wchar_t *__thiscall Buffer::getFullPathName(Buffer *__hidden this)
.text$mn:0000B6FC                 public ?getFullPathName@Buffer@@QBEPB_WXZ
.text$mn:0000B6FC ?getFullPathName@Buffer@@QBEPB_WXZ proc near
.text$mn:0000B6FC                                         ; CODE XREF: FunctionListPanel::reload(void)+3E2p
.text$mn:0000B6FC
.text$mn:0000B6FC var_4           = dword ptr -4
.text$mn:0000B6FC
.text$mn:0000B6FC                 push    ebp
.text$mn:0000B6FD                 mov     ebp, esp
.text$mn:0000B6FF                 push    ecx
.text$mn:0000B700                 mov     [ebp+var_4], ecx
.text$mn:0000B703                 mov     ecx, [ebp+var_4]
.text$mn:0000B706                 add     ecx, 8Ch ; 'î'
.text$mn:0000B70C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000B711                 mov     esp, ebp
.text$mn:0000B713                 pop     ebp
.text$mn:0000B714                 retn
.text$mn:0000B714 ?getFullPathName@Buffer@@QBEPB_WXZ endp
.text$mn:0000B714
.text$mn:0000B714 ; ---------------------------------------------------------------------------
.text$mn:0000B715                 align 4
.text$mn:0000B715 _text$mn        ends
.text$mn:0000B715
.text$mn:0000B718 ; ===========================================================================
.text$mn:0000B718
.text$mn:0000B718 ; Segment type: Pure code
.text$mn:0000B718 ; Segment permissions: Read/Execute
.text$mn:0000B718 _text$mn        segment para public 'CODE' use32
.text$mn:0000B718                 assume cs:_text$mn
.text$mn:0000B718                 ;org 0B718h
.text$mn:0000B718 ; COMDAT (pick any)
.text$mn:0000B718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B718
.text$mn:0000B718 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B718
.text$mn:0000B718 ; Attributes: bp-based frame
.text$mn:0000B718
.text$mn:0000B718 ; HWND __thiscall Window::getHSelf(Window *__hidden this)
.text$mn:0000B718                 public ?getHSelf@Window@@QBEPAUHWND__@@XZ
.text$mn:0000B718 ?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
.text$mn:0000B718                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+6E8p
.text$mn:0000B718                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+737p ...
.text$mn:0000B718
.text$mn:0000B718 var_4           = dword ptr -4
.text$mn:0000B718
.text$mn:0000B718                 push    ebp
.text$mn:0000B719                 mov     ebp, esp
.text$mn:0000B71B                 push    ecx
.text$mn:0000B71C                 mov     [ebp+var_4], ecx
.text$mn:0000B71F                 mov     eax, [ebp+var_4]
.text$mn:0000B722                 mov     eax, [eax+0Ch]
.text$mn:0000B725                 mov     esp, ebp
.text$mn:0000B727                 pop     ebp
.text$mn:0000B728                 retn
.text$mn:0000B728 ?getHSelf@Window@@QBEPAUHWND__@@XZ endp
.text$mn:0000B728
.text$mn:0000B728 ; ---------------------------------------------------------------------------
.text$mn:0000B729                 align 4
.text$mn:0000B729 _text$mn        ends
.text$mn:0000B729
.text$mn:0000B72C ; ===========================================================================
.text$mn:0000B72C
.text$mn:0000B72C ; Segment type: Pure code
.text$mn:0000B72C ; Segment permissions: Read/Execute
.text$mn:0000B72C _text$mn        segment para public 'CODE' use32
.text$mn:0000B72C                 assume cs:_text$mn
.text$mn:0000B72C                 ;org 0B72Ch
.text$mn:0000B72C ; COMDAT (pick any)
.text$mn:0000B72C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B72C
.text$mn:0000B72C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B72C
.text$mn:0000B72C ; Attributes: bp-based frame
.text$mn:0000B72C
.text$mn:0000B72C ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:0000B72C                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:0000B72C ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:0000B72C                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+5Ap
.text$mn:0000B72C                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+7Fp ...
.text$mn:0000B72C                 push    ebp
.text$mn:0000B72D                 mov     ebp, esp
.text$mn:0000B72F                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:0000B734                 pop     ebp
.text$mn:0000B735                 retn
.text$mn:0000B735 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:0000B735
.text$mn:0000B735 ; ---------------------------------------------------------------------------
.text$mn:0000B736                 align 4
.text$mn:0000B736 _text$mn        ends
.text$mn:0000B736
.text$mn:0000B738 ; ===========================================================================
.text$mn:0000B738
.text$mn:0000B738 ; Segment type: Pure code
.text$mn:0000B738 ; Segment permissions: Read/Execute
.text$mn:0000B738 _text$mn        segment para public 'CODE' use32
.text$mn:0000B738                 assume cs:_text$mn
.text$mn:0000B738                 ;org 0B738h
.text$mn:0000B738 ; COMDAT (pick any)
.text$mn:0000B738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B738
.text$mn:0000B738 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B738
.text$mn:0000B738 ; Attributes: bp-based frame
.text$mn:0000B738
.text$mn:0000B738 ; public: enum  LangType __thiscall Buffer::getLangType(void)const
.text$mn:0000B738                 public ?getLangType@Buffer@@QBE?AW4LangType@@XZ
.text$mn:0000B738 ?getLangType@Buffer@@QBE?AW4LangType@@XZ proc near
.text$mn:0000B738                                         ; CODE XREF: FunctionListPanel::reload(void)+167p
.text$mn:0000B738
.text$mn:0000B738 var_4           = dword ptr -4
.text$mn:0000B738
.text$mn:0000B738                 push    ebp
.text$mn:0000B739                 mov     ebp, esp
.text$mn:0000B73B                 push    ecx
.text$mn:0000B73C                 mov     [ebp+var_4], ecx
.text$mn:0000B73F                 mov     eax, [ebp+var_4]
.text$mn:0000B742                 mov     eax, [eax+14h]
.text$mn:0000B745                 mov     esp, ebp
.text$mn:0000B747                 pop     ebp
.text$mn:0000B748                 retn
.text$mn:0000B748 ?getLangType@Buffer@@QBE?AW4LangType@@XZ endp
.text$mn:0000B748
.text$mn:0000B748 ; ---------------------------------------------------------------------------
.text$mn:0000B749                 align 4
.text$mn:0000B749 _text$mn        ends
.text$mn:0000B749
.text$mn:0000B74C ; ===========================================================================
.text$mn:0000B74C
.text$mn:0000B74C ; Segment type: Pure code
.text$mn:0000B74C ; Segment permissions: Read/Execute
.text$mn:0000B74C _text$mn        segment para public 'CODE' use32
.text$mn:0000B74C                 assume cs:_text$mn
.text$mn:0000B74C                 ;org 0B74Ch
.text$mn:0000B74C ; COMDAT (pick any)
.text$mn:0000B74C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B74C
.text$mn:0000B74C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B74C
.text$mn:0000B74C ; Attributes: bp-based frame
.text$mn:0000B74C
.text$mn:0000B74C ; struct NativeLangSpeaker *__thiscall NppParameters::getNativeLangSpeaker(NppParameters *__hidden this)
.text$mn:0000B74C                 public ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ
.text$mn:0000B74C ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ proc near
.text$mn:0000B74C                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3C7p
.text$mn:0000B74C
.text$mn:0000B74C var_4           = dword ptr -4
.text$mn:0000B74C
.text$mn:0000B74C                 push    ebp
.text$mn:0000B74D                 mov     ebp, esp
.text$mn:0000B74F                 push    ecx
.text$mn:0000B750                 mov     [ebp+var_4], ecx
.text$mn:0000B753                 mov     eax, [ebp+var_4]
.text$mn:0000B756                 mov     eax, [eax+1CC20h]
.text$mn:0000B75C                 mov     esp, ebp
.text$mn:0000B75E                 pop     ebp
.text$mn:0000B75F                 retn
.text$mn:0000B75F ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ endp
.text$mn:0000B75F
.text$mn:0000B75F _text$mn        ends
.text$mn:0000B75F
.text$mn:0000B760 ; ===========================================================================
.text$mn:0000B760
.text$mn:0000B760 ; Segment type: Pure code
.text$mn:0000B760 ; Segment permissions: Read/Execute
.text$mn:0000B760 _text$mn        segment para public 'CODE' use32
.text$mn:0000B760                 assume cs:_text$mn
.text$mn:0000B760                 ;org 0B760h
.text$mn:0000B760 ; COMDAT (pick any)
.text$mn:0000B760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B760
.text$mn:0000B760 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B760
.text$mn:0000B760 ; Attributes: bp-based frame
.text$mn:0000B760
.text$mn:0000B760 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NppParameters::getNppPath(void)const
.text$mn:0000B760                 public ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000B760 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:0000B760                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+F3p
.text$mn:0000B760                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+248p
.text$mn:0000B760
.text$mn:0000B760 var_14          = dword ptr -14h
.text$mn:0000B760 var_10          = dword ptr -10h
.text$mn:0000B760 var_C           = dword ptr -0Ch
.text$mn:0000B760 var_4           = dword ptr -4
.text$mn:0000B760 arg_0           = dword ptr  8
.text$mn:0000B760
.text$mn:0000B760                 push    ebp
.text$mn:0000B761                 mov     ebp, esp
.text$mn:0000B763                 push    0FFFFFFFFh
.text$mn:0000B765                 push    offset __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000B76A                 mov     eax, large fs:0
.text$mn:0000B770                 push    eax
.text$mn:0000B771                 sub     esp, 8
.text$mn:0000B774                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B779                 xor     eax, ebp
.text$mn:0000B77B                 push    eax
.text$mn:0000B77C                 lea     eax, [ebp+var_C]
.text$mn:0000B77F                 mov     large fs:0, eax
.text$mn:0000B785                 mov     [ebp+var_14], ecx
.text$mn:0000B788                 mov     [ebp+var_10], 0
.text$mn:0000B78F                 mov     eax, [ebp+var_14]
.text$mn:0000B792                 add     eax, 1CAC0h
.text$mn:0000B797                 push    eax
.text$mn:0000B798                 mov     ecx, [ebp+arg_0]
.text$mn:0000B79B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000B7A0                 mov     [ebp+var_4], 0
.text$mn:0000B7A7                 mov     ecx, [ebp+var_10]
.text$mn:0000B7AA                 or      ecx, 1
.text$mn:0000B7AD                 mov     [ebp+var_10], ecx
.text$mn:0000B7B0                 mov     eax, [ebp+arg_0]
.text$mn:0000B7B3                 mov     ecx, [ebp+var_C]
.text$mn:0000B7B6                 mov     large fs:0, ecx
.text$mn:0000B7BD                 pop     ecx
.text$mn:0000B7BE                 mov     esp, ebp
.text$mn:0000B7C0                 pop     ebp
.text$mn:0000B7C1                 retn    4
.text$mn:0000B7C1 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:0000B7C1
.text$mn:0000B7C1 _text$mn        ends
.text$mn:0000B7C1
.text$x:0000B7C4 ; ===========================================================================
.text$x:0000B7C4
.text$x:0000B7C4 ; Segment type: Pure code
.text$x:0000B7C4 ; Segment permissions: Read/Execute
.text$x:0000B7C4 _text$x         segment para public 'CODE' use32
.text$x:0000B7C4                 assume cs:_text$x
.text$x:0000B7C4                 ;org 0B7C4h
.text$x:0000B7C4 ; COMDAT (pick associative to section at B760)
.text$x:0000B7C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B7C4
.text$x:0000B7C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000B7C4
.text$x:0000B7C4
.text$x:0000B7C4 __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:0000B7C4                                         ; DATA XREF: .xdata$x:0000DC34o
.text$x:0000B7C4                 mov     eax, [ebp-10h]
.text$x:0000B7C7                 and     eax, 1
.text$x:0000B7CA                 jz      $LN4_6
.text$x:0000B7D0                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B7D4                 mov     ecx, [ebp+8]
.text$x:0000B7D7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000B7DC ; ---------------------------------------------------------------------------
.text$x:0000B7DC
.text$x:0000B7DC $LN4_6:                                 ; CODE XREF: __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:0000B7DC                 retn
.text$x:0000B7DC __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:0000B7DC
.text$x:0000B7DD
.text$x:0000B7DD ; =============== S U B R O U T I N E =======================================
.text$x:0000B7DD
.text$x:0000B7DD
.text$x:0000B7DD __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:0000B7DD                                         ; DATA XREF: NppParameters::getNppPath(void)+5o
.text$x:0000B7DD
.text$x:0000B7DD arg_4           = dword ptr  8
.text$x:0000B7DD
.text$x:0000B7DD                 mov     edx, [esp+arg_4]
.text$x:0000B7E1                 lea     eax, [edx+0Ch]
.text$x:0000B7E4                 mov     ecx, [edx-0Ch]
.text$x:0000B7E7                 xor     ecx, eax
.text$x:0000B7E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B7EE                 mov     eax, offset __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:0000B7F3                 jmp     ___CxxFrameHandler3
.text$x:0000B7F3 __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:0000B7F3
.text$x:0000B7F3 _text$x         ends
.text$x:0000B7F3
.text$mn:0000B7F8 ; ===========================================================================
.text$mn:0000B7F8
.text$mn:0000B7F8 ; Segment type: Pure code
.text$mn:0000B7F8 ; Segment permissions: Read/Execute
.text$mn:0000B7F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7F8                 assume cs:_text$mn
.text$mn:0000B7F8                 ;org 0B7F8h
.text$mn:0000B7F8 ; COMDAT (pick any)
.text$mn:0000B7F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7F8
.text$mn:0000B7F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7F8
.text$mn:0000B7F8 ; Attributes: bp-based frame
.text$mn:0000B7F8
.text$mn:0000B7F8 ; struct _TREEITEM *__thiscall TreeView::getRoot(TreeView *__hidden this)
.text$mn:0000B7F8                 public ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ
.text$mn:0000B7F8 ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ proc near
.text$mn:0000B7F8                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+56p
.text$mn:0000B7F8                                         ; FunctionListPanel::sortOrUnsort(void)+C5p ...
.text$mn:0000B7F8
.text$mn:0000B7F8 var_4           = dword ptr -4
.text$mn:0000B7F8
.text$mn:0000B7F8                 push    ebp
.text$mn:0000B7F9                 mov     ebp, esp
.text$mn:0000B7FB                 push    ecx
.text$mn:0000B7FC                 mov     [ebp+var_4], ecx
.text$mn:0000B7FF                 push    0               ; lParam
.text$mn:0000B801                 push    0               ; wParam
.text$mn:0000B803                 push    110Ah           ; Msg
.text$mn:0000B808                 mov     eax, [ebp+var_4]
.text$mn:0000B80B                 mov     ecx, [eax+0Ch]
.text$mn:0000B80E                 push    ecx             ; hWnd
.text$mn:0000B80F                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000B815                 mov     esp, ebp
.text$mn:0000B817                 pop     ebp
.text$mn:0000B818                 retn
.text$mn:0000B818 ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ endp
.text$mn:0000B818
.text$mn:0000B818 ; ---------------------------------------------------------------------------
.text$mn:0000B819                 align 4
.text$mn:0000B819 _text$mn        ends
.text$mn:0000B819
.text$mn:0000B81C ; ===========================================================================
.text$mn:0000B81C
.text$mn:0000B81C ; Segment type: Pure code
.text$mn:0000B81C ; Segment permissions: Read/Execute
.text$mn:0000B81C _text$mn        segment para public 'CODE' use32
.text$mn:0000B81C                 assume cs:_text$mn
.text$mn:0000B81C                 ;org 0B81Ch
.text$mn:0000B81C ; COMDAT (pick any)
.text$mn:0000B81C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B81C
.text$mn:0000B81C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B81C
.text$mn:0000B81C ; Attributes: bp-based frame
.text$mn:0000B81C
.text$mn:0000B81C ; struct _TREEITEM *__thiscall TreeView::getSelection(TreeView *__hidden this)
.text$mn:0000B81C                 public ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ
.text$mn:0000B81C ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ proc near
.text$mn:0000B81C                                         ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+12Ep
.text$mn:0000B81C                                         ; FunctionListPanel::openSelection(TreeView const &)+13p
.text$mn:0000B81C
.text$mn:0000B81C var_4           = dword ptr -4
.text$mn:0000B81C
.text$mn:0000B81C                 push    ebp
.text$mn:0000B81D                 mov     ebp, esp
.text$mn:0000B81F                 push    ecx
.text$mn:0000B820                 mov     [ebp+var_4], ecx
.text$mn:0000B823                 push    0               ; lParam
.text$mn:0000B825                 push    9               ; wParam
.text$mn:0000B827                 push    110Ah           ; Msg
.text$mn:0000B82C                 mov     eax, [ebp+var_4]
.text$mn:0000B82F                 mov     ecx, [eax+0Ch]
.text$mn:0000B832                 push    ecx             ; hWnd
.text$mn:0000B833                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000B839                 mov     esp, ebp
.text$mn:0000B83B                 pop     ebp
.text$mn:0000B83C                 retn
.text$mn:0000B83C ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ endp
.text$mn:0000B83C
.text$mn:0000B83C ; ---------------------------------------------------------------------------
.text$mn:0000B83D                 align 10h
.text$mn:0000B83D _text$mn        ends
.text$mn:0000B83D
.text$mn:0000B840 ; ===========================================================================
.text$mn:0000B840
.text$mn:0000B840 ; Segment type: Pure code
.text$mn:0000B840 ; Segment permissions: Read/Execute
.text$mn:0000B840 _text$mn        segment para public 'CODE' use32
.text$mn:0000B840                 assume cs:_text$mn
.text$mn:0000B840                 ;org 0B840h
.text$mn:0000B840 ; COMDAT (pick any)
.text$mn:0000B840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B840
.text$mn:0000B840 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B840
.text$mn:0000B840 ; Attributes: bp-based frame
.text$mn:0000B840
.text$mn:0000B840 ; const wchar_t *__thiscall Buffer::getUserDefineLangName(Buffer *__hidden this)
.text$mn:0000B840                 public ?getUserDefineLangName@Buffer@@QBEPB_WXZ
.text$mn:0000B840 ?getUserDefineLangName@Buffer@@QBEPB_WXZ proc near
.text$mn:0000B840                                         ; CODE XREF: FunctionListPanel::reload(void)+19Ap
.text$mn:0000B840
.text$mn:0000B840 var_4           = dword ptr -4
.text$mn:0000B840
.text$mn:0000B840                 push    ebp
.text$mn:0000B841                 mov     ebp, esp
.text$mn:0000B843                 push    ecx
.text$mn:0000B844                 mov     [ebp+var_4], ecx
.text$mn:0000B847                 mov     ecx, [ebp+var_4]
.text$mn:0000B84A                 add     ecx, 18h
.text$mn:0000B84D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000B852                 mov     esp, ebp
.text$mn:0000B854                 pop     ebp
.text$mn:0000B855                 retn
.text$mn:0000B855 ?getUserDefineLangName@Buffer@@QBEPB_WXZ endp
.text$mn:0000B855
.text$mn:0000B855 ; ---------------------------------------------------------------------------
.text$mn:0000B856                 align 4
.text$mn:0000B856 _text$mn        ends
.text$mn:0000B856
.text$mn:0000B858 ; ===========================================================================
.text$mn:0000B858
.text$mn:0000B858 ; Segment type: Pure code
.text$mn:0000B858 ; Segment permissions: Read/Execute
.text$mn:0000B858 _text$mn        segment para public 'CODE' use32
.text$mn:0000B858                 assume cs:_text$mn
.text$mn:0000B858                 ;org 0B858h
.text$mn:0000B858 ; COMDAT (pick any)
.text$mn:0000B858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B858
.text$mn:0000B858 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B858
.text$mn:0000B858 ; Attributes: bp-based frame
.text$mn:0000B858
.text$mn:0000B858 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NppParameters::getUserPath(void)const
.text$mn:0000B858                 public ?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000B858 ?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:0000B858                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+86p
.text$mn:0000B858
.text$mn:0000B858 var_14          = dword ptr -14h
.text$mn:0000B858 var_10          = dword ptr -10h
.text$mn:0000B858 var_C           = dword ptr -0Ch
.text$mn:0000B858 var_4           = dword ptr -4
.text$mn:0000B858 arg_0           = dword ptr  8
.text$mn:0000B858
.text$mn:0000B858                 push    ebp
.text$mn:0000B859                 mov     ebp, esp
.text$mn:0000B85B                 push    0FFFFFFFFh
.text$mn:0000B85D                 push    offset __ehhandler$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000B862                 mov     eax, large fs:0
.text$mn:0000B868                 push    eax
.text$mn:0000B869                 sub     esp, 8
.text$mn:0000B86C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B871                 xor     eax, ebp
.text$mn:0000B873                 push    eax
.text$mn:0000B874                 lea     eax, [ebp+var_C]
.text$mn:0000B877                 mov     large fs:0, eax
.text$mn:0000B87D                 mov     [ebp+var_14], ecx
.text$mn:0000B880                 mov     [ebp+var_10], 0
.text$mn:0000B887                 mov     eax, [ebp+var_14]
.text$mn:0000B88A                 add     eax, 1CADCh
.text$mn:0000B88F                 push    eax
.text$mn:0000B890                 mov     ecx, [ebp+arg_0]
.text$mn:0000B893                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000B898                 mov     [ebp+var_4], 0
.text$mn:0000B89F                 mov     ecx, [ebp+var_10]
.text$mn:0000B8A2                 or      ecx, 1
.text$mn:0000B8A5                 mov     [ebp+var_10], ecx
.text$mn:0000B8A8                 mov     eax, [ebp+arg_0]
.text$mn:0000B8AB                 mov     ecx, [ebp+var_C]
.text$mn:0000B8AE                 mov     large fs:0, ecx
.text$mn:0000B8B5                 pop     ecx
.text$mn:0000B8B6                 mov     esp, ebp
.text$mn:0000B8B8                 pop     ebp
.text$mn:0000B8B9                 retn    4
.text$mn:0000B8B9 ?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:0000B8B9
.text$mn:0000B8B9 _text$mn        ends
.text$mn:0000B8B9
.text$x:0000B8BC ; ===========================================================================
.text$x:0000B8BC
.text$x:0000B8BC ; Segment type: Pure code
.text$x:0000B8BC ; Segment permissions: Read/Execute
.text$x:0000B8BC _text$x         segment para public 'CODE' use32
.text$x:0000B8BC                 assume cs:_text$x
.text$x:0000B8BC                 ;org 0B8BCh
.text$x:0000B8BC ; COMDAT (pick associative to section at B858)
.text$x:0000B8BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B8BC
.text$x:0000B8BC ; =============== S U B R O U T I N E =======================================
.text$x:0000B8BC
.text$x:0000B8BC
.text$x:0000B8BC __unwindfunclet$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:0000B8BC                                         ; DATA XREF: .xdata$x:0000DC60o
.text$x:0000B8BC                 mov     eax, [ebp-10h]
.text$x:0000B8BF                 and     eax, 1
.text$x:0000B8C2                 jz      $LN4_7
.text$x:0000B8C8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B8CC                 mov     ecx, [ebp+8]
.text$x:0000B8CF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000B8D4 ; ---------------------------------------------------------------------------
.text$x:0000B8D4
.text$x:0000B8D4 $LN4_7:                                 ; CODE XREF: __unwindfunclet$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:0000B8D4                 retn
.text$x:0000B8D4 __unwindfunclet$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:0000B8D4
.text$x:0000B8D5
.text$x:0000B8D5 ; =============== S U B R O U T I N E =======================================
.text$x:0000B8D5
.text$x:0000B8D5
.text$x:0000B8D5 __ehhandler$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:0000B8D5                                         ; DATA XREF: NppParameters::getUserPath(void)+5o
.text$x:0000B8D5
.text$x:0000B8D5 arg_4           = dword ptr  8
.text$x:0000B8D5
.text$x:0000B8D5                 mov     edx, [esp+arg_4]
.text$x:0000B8D9                 lea     eax, [edx+0Ch]
.text$x:0000B8DC                 mov     ecx, [edx-0Ch]
.text$x:0000B8DF                 xor     ecx, eax
.text$x:0000B8E1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B8E6                 mov     eax, offset __ehfuncinfo$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:0000B8EB                 jmp     ___CxxFrameHandler3
.text$x:0000B8EB __ehhandler$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:0000B8EB
.text$x:0000B8EB _text$x         ends
.text$x:0000B8EB
.text$mn:0000B8F0 ; ===========================================================================
.text$mn:0000B8F0
.text$mn:0000B8F0 ; Segment type: Pure code
.text$mn:0000B8F0 ; Segment permissions: Read/Execute
.text$mn:0000B8F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B8F0                 assume cs:_text$mn
.text$mn:0000B8F0                 ;org 0B8F0h
.text$mn:0000B8F0 ; COMDAT (pick any)
.text$mn:0000B8F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B8F0
.text$mn:0000B8F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B8F0
.text$mn:0000B8F0 ; Attributes: bp-based frame
.text$mn:0000B8F0
.text$mn:0000B8F0 ; void __thiscall DockingDlgInterface::init(DockingDlgInterface *this, HINSTANCE hModule, HWND)
.text$mn:0000B8F0                 public ?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:0000B8F0 ?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:0000B8F0                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+3Fp
.text$mn:0000B8F0
.text$mn:0000B8F0 var_210         = dword ptr -210h
.text$mn:0000B8F0 Filename        = word ptr -20Ch
.text$mn:0000B8F0 var_4           = dword ptr -4
.text$mn:0000B8F0 hModule         = dword ptr  8
.text$mn:0000B8F0 arg_4           = dword ptr  0Ch
.text$mn:0000B8F0
.text$mn:0000B8F0                 push    ebp
.text$mn:0000B8F1                 mov     ebp, esp
.text$mn:0000B8F3                 sub     esp, 210h
.text$mn:0000B8F9                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B8FE                 xor     eax, ebp
.text$mn:0000B900                 mov     [ebp+var_4], eax
.text$mn:0000B903                 mov     [ebp+var_210], ecx
.text$mn:0000B909                 mov     eax, [ebp+arg_4]
.text$mn:0000B90C                 push    eax             ; HWND
.text$mn:0000B90D                 mov     ecx, [ebp+hModule]
.text$mn:0000B910                 push    ecx             ; HINSTANCE
.text$mn:0000B911                 mov     ecx, [ebp+var_210] ; this
.text$mn:0000B917                 call    ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.text$mn:0000B91C                 push    104h            ; nSize
.text$mn:0000B921                 lea     edx, [ebp+Filename]
.text$mn:0000B927                 push    edx             ; lpFilename
.text$mn:0000B928                 mov     eax, [ebp+hModule]
.text$mn:0000B92B                 push    eax             ; hModule
.text$mn:0000B92C                 call    dword ptr ds:__imp__GetModuleFileNameW@12 ; GetModuleFileNameW(x,x,x)
.text$mn:0000B932                 lea     ecx, [ebp+Filename]
.text$mn:0000B938                 push    ecx             ; pszPath
.text$mn:0000B939                 call    dword ptr ds:__imp__PathFindFileNameW@4 ; PathFindFileNameW(x)
.text$mn:0000B93F                 push    eax             ; Str
.text$mn:0000B940                 mov     ecx, [ebp+var_210]
.text$mn:0000B946                 add     ecx, 30h ; '0'
.text$mn:0000B949                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000B94E                 mov     ecx, [ebp+var_4]
.text$mn:0000B951                 xor     ecx, ebp
.text$mn:0000B953                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000B958                 mov     esp, ebp
.text$mn:0000B95A                 pop     ebp
.text$mn:0000B95B                 retn    8
.text$mn:0000B95B ?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:0000B95B
.text$mn:0000B95B ; ---------------------------------------------------------------------------
.text$mn:0000B95E                 align 10h
.text$mn:0000B95E _text$mn        ends
.text$mn:0000B95E
.text$mn:0000B960 ; ===========================================================================
.text$mn:0000B960
.text$mn:0000B960 ; Segment type: Pure code
.text$mn:0000B960 ; Segment permissions: Read/Execute
.text$mn:0000B960 _text$mn        segment para public 'CODE' use32
.text$mn:0000B960                 assume cs:_text$mn
.text$mn:0000B960                 ;org 0B960h
.text$mn:0000B960 ; COMDAT (pick any)
.text$mn:0000B960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B960
.text$mn:0000B960 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B960
.text$mn:0000B960 ; Attributes: bp-based frame
.text$mn:0000B960
.text$mn:0000B960 ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:0000B960                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:0000B960 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:0000B960                                         ; CODE XREF: DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)+27p
.text$mn:0000B960
.text$mn:0000B960 var_4           = dword ptr -4
.text$mn:0000B960 arg_0           = dword ptr  8
.text$mn:0000B960 arg_4           = dword ptr  0Ch
.text$mn:0000B960
.text$mn:0000B960                 push    ebp
.text$mn:0000B961                 mov     ebp, esp
.text$mn:0000B963                 push    ecx
.text$mn:0000B964                 mov     [ebp+var_4], ecx
.text$mn:0000B967                 mov     eax, [ebp+var_4]
.text$mn:0000B96A                 mov     ecx, [ebp+arg_0]
.text$mn:0000B96D                 mov     [eax+4], ecx
.text$mn:0000B970                 mov     edx, [ebp+var_4]
.text$mn:0000B973                 mov     eax, [ebp+arg_4]
.text$mn:0000B976                 mov     [edx+8], eax
.text$mn:0000B979                 mov     esp, ebp
.text$mn:0000B97B                 pop     ebp
.text$mn:0000B97C                 retn    8
.text$mn:0000B97C ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:0000B97C
.text$mn:0000B97C ; ---------------------------------------------------------------------------
.text$mn:0000B97F                 align 10h
.text$mn:0000B97F _text$mn        ends
.text$mn:0000B97F
.text$mn:0000B980 ; ===========================================================================
.text$mn:0000B980
.text$mn:0000B980 ; Segment type: Pure code
.text$mn:0000B980 ; Segment permissions: Read/Execute
.text$mn:0000B980 _text$mn        segment para public 'CODE' use32
.text$mn:0000B980                 assume cs:_text$mn
.text$mn:0000B980                 ;org 0B980h
.text$mn:0000B980 ; COMDAT (pick any)
.text$mn:0000B980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B980
.text$mn:0000B980 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B980
.text$mn:0000B980 ; Attributes: bp-based frame
.text$mn:0000B980
.text$mn:0000B980 ; bool __thiscall NppParameters::isLocal(NppParameters *__hidden this)
.text$mn:0000B980                 public ?isLocal@NppParameters@@QBE_NXZ
.text$mn:0000B980 ?isLocal@NppParameters@@QBE_NXZ proc near
.text$mn:0000B980                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+61p
.text$mn:0000B980
.text$mn:0000B980 var_4           = dword ptr -4
.text$mn:0000B980
.text$mn:0000B980                 push    ebp
.text$mn:0000B981                 mov     ebp, esp
.text$mn:0000B983                 push    ecx
.text$mn:0000B984                 mov     [ebp+var_4], ecx
.text$mn:0000B987                 mov     eax, [ebp+var_4]
.text$mn:0000B98A                 mov     al, [eax+1C900h]
.text$mn:0000B990                 mov     esp, ebp
.text$mn:0000B992                 pop     ebp
.text$mn:0000B993                 retn
.text$mn:0000B993 ?isLocal@NppParameters@@QBE_NXZ endp
.text$mn:0000B993
.text$mn:0000B993 _text$mn        ends
.text$mn:0000B993
.text$mn:0000B994 ; ===========================================================================
.text$mn:0000B994
.text$mn:0000B994 ; Segment type: Pure code
.text$mn:0000B994 ; Segment permissions: Read/Execute
.text$mn:0000B994 _text$mn        segment para public 'CODE' use32
.text$mn:0000B994                 assume cs:_text$mn
.text$mn:0000B994                 ;org 0B994h
.text$mn:0000B994 ; COMDAT (pick any)
.text$mn:0000B994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B994
.text$mn:0000B994 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B994
.text$mn:0000B994 ; Attributes: bp-based frame
.text$mn:0000B994
.text$mn:0000B994 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:0000B994                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000B994 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000B994                                         ; CODE XREF: FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+C8p
.text$mn:0000B994                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+17Dp
.text$mn:0000B994
.text$mn:0000B994 var_4           = dword ptr -4
.text$mn:0000B994
.text$mn:0000B994                 push    ebp
.text$mn:0000B995                 mov     ebp, esp
.text$mn:0000B997                 push    ecx
.text$mn:0000B998                 mov     [ebp+var_4], ecx
.text$mn:0000B99B                 mov     eax, [ebp+var_4]
.text$mn:0000B99E                 mov     eax, [eax+14h]
.text$mn:0000B9A1                 mov     esp, ebp
.text$mn:0000B9A3                 pop     ebp
.text$mn:0000B9A4                 retn
.text$mn:0000B9A4 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000B9A4
.text$mn:0000B9A4 ; ---------------------------------------------------------------------------
.text$mn:0000B9A5                 align 4
.text$mn:0000B9A5 _text$mn        ends
.text$mn:0000B9A5
.text$mn:0000B9A8 ; ===========================================================================
.text$mn:0000B9A8
.text$mn:0000B9A8 ; Segment type: Pure code
.text$mn:0000B9A8 ; Segment permissions: Read/Execute
.text$mn:0000B9A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B9A8                 assume cs:_text$mn
.text$mn:0000B9A8                 ;org 0B9A8h
.text$mn:0000B9A8 ; COMDAT (pick any)
.text$mn:0000B9A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B9A8
.text$mn:0000B9A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B9A8
.text$mn:0000B9A8 ; Attributes: bp-based frame
.text$mn:0000B9A8
.text$mn:0000B9A8 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:0000B9A8                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:0000B9A8 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:0000B9A8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:0000B9A8
.text$mn:0000B9A8 var_4           = dword ptr -4
.text$mn:0000B9A8 Str             = dword ptr  8
.text$mn:0000B9A8
.text$mn:0000B9A8                 push    ebp
.text$mn:0000B9A9                 mov     ebp, esp
.text$mn:0000B9AB                 push    ecx
.text$mn:0000B9AC                 mov     eax, [ebp+Str]
.text$mn:0000B9AF                 movsx   ecx, byte ptr [eax]
.text$mn:0000B9B2                 test    ecx, ecx
.text$mn:0000B9B4                 jnz     short loc_B9BF
.text$mn:0000B9B6                 mov     [ebp+var_4], 0
.text$mn:0000B9BD                 jmp     short loc_B9CE
.text$mn:0000B9BF ; ---------------------------------------------------------------------------
.text$mn:0000B9BF
.text$mn:0000B9BF loc_B9BF:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000B9BF                 mov     edx, [ebp+Str]
.text$mn:0000B9C2                 push    edx             ; Str
.text$mn:0000B9C3                 call    _strlen
.text$mn:0000B9C8                 add     esp, 4
.text$mn:0000B9CB                 mov     [ebp+var_4], eax
.text$mn:0000B9CE
.text$mn:0000B9CE loc_B9CE:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000B9CE                 mov     eax, [ebp+var_4]
.text$mn:0000B9D1                 mov     esp, ebp
.text$mn:0000B9D3                 pop     ebp
.text$mn:0000B9D4                 retn
.text$mn:0000B9D4 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:0000B9D4
.text$mn:0000B9D4 ; ---------------------------------------------------------------------------
.text$mn:0000B9D5                 align 4
.text$mn:0000B9D5 _text$mn        ends
.text$mn:0000B9D5
.text$mn:0000B9D8 ; ===========================================================================
.text$mn:0000B9D8
.text$mn:0000B9D8 ; Segment type: Pure code
.text$mn:0000B9D8 ; Segment permissions: Read/Execute
.text$mn:0000B9D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B9D8                 assume cs:_text$mn
.text$mn:0000B9D8                 ;org 0B9D8h
.text$mn:0000B9D8 ; COMDAT (pick any)
.text$mn:0000B9D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B9D8
.text$mn:0000B9D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B9D8
.text$mn:0000B9D8 ; Attributes: bp-based frame
.text$mn:0000B9D8
.text$mn:0000B9D8 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:0000B9D8                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:0000B9D8 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:0000B9D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:0000B9D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:0000B9D8
.text$mn:0000B9D8 var_4           = dword ptr -4
.text$mn:0000B9D8 Str             = dword ptr  8
.text$mn:0000B9D8
.text$mn:0000B9D8                 push    ebp
.text$mn:0000B9D9                 mov     ebp, esp
.text$mn:0000B9DB                 push    ecx
.text$mn:0000B9DC                 mov     eax, [ebp+Str]
.text$mn:0000B9DF                 movzx   ecx, word ptr [eax]
.text$mn:0000B9E2                 test    ecx, ecx
.text$mn:0000B9E4                 jnz     short loc_B9EF
.text$mn:0000B9E6                 mov     [ebp+var_4], 0
.text$mn:0000B9ED                 jmp     short loc_B9FE
.text$mn:0000B9EF ; ---------------------------------------------------------------------------
.text$mn:0000B9EF
.text$mn:0000B9EF loc_B9EF:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000B9EF                 mov     edx, [ebp+Str]
.text$mn:0000B9F2                 push    edx             ; Str
.text$mn:0000B9F3                 call    _wcslen
.text$mn:0000B9F8                 add     esp, 4
.text$mn:0000B9FB                 mov     [ebp+var_4], eax
.text$mn:0000B9FE
.text$mn:0000B9FE loc_B9FE:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000B9FE                 mov     eax, [ebp+var_4]
.text$mn:0000BA01                 mov     esp, ebp
.text$mn:0000BA03                 pop     ebp
.text$mn:0000BA04                 retn
.text$mn:0000BA04 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:0000BA04
.text$mn:0000BA04 ; ---------------------------------------------------------------------------
.text$mn:0000BA05                 align 4
.text$mn:0000BA05 _text$mn        ends
.text$mn:0000BA05
.text$mn:0000BA08 ; ===========================================================================
.text$mn:0000BA08
.text$mn:0000BA08 ; Segment type: Pure code
.text$mn:0000BA08 ; Segment permissions: Read/Execute
.text$mn:0000BA08 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA08                 assume cs:_text$mn
.text$mn:0000BA08                 ;org 0BA08h
.text$mn:0000BA08 ; COMDAT (pick any)
.text$mn:0000BA08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA08
.text$mn:0000BA08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA08
.text$mn:0000BA08 ; Attributes: bp-based frame
.text$mn:0000BA08
.text$mn:0000BA08 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000BA08                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000BA08 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000BA08                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000BA08
.text$mn:0000BA08 var_4           = dword ptr -4
.text$mn:0000BA08
.text$mn:0000BA08                 push    ebp
.text$mn:0000BA09                 mov     ebp, esp
.text$mn:0000BA0B                 push    ecx
.text$mn:0000BA0C                 mov     [ebp+var_4], ecx
.text$mn:0000BA0F                 mov     eax, [ebp+var_4]
.text$mn:0000BA12                 push    eax
.text$mn:0000BA13                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000BA18                 add     esp, 4
.text$mn:0000BA1B                 mov     esp, ebp
.text$mn:0000BA1D                 pop     ebp
.text$mn:0000BA1E                 retn
.text$mn:0000BA1E ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000BA1E
.text$mn:0000BA1E ; ---------------------------------------------------------------------------
.text$mn:0000BA1F                 align 10h
.text$mn:0000BA1F _text$mn        ends
.text$mn:0000BA1F
.text$mn:0000BA20 ; ===========================================================================
.text$mn:0000BA20
.text$mn:0000BA20 ; Segment type: Pure code
.text$mn:0000BA20 ; Segment permissions: Read/Execute
.text$mn:0000BA20 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA20                 assume cs:_text$mn
.text$mn:0000BA20                 ;org 0BA20h
.text$mn:0000BA20 ; COMDAT (pick any)
.text$mn:0000BA20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA20
.text$mn:0000BA20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA20
.text$mn:0000BA20 ; Attributes: bp-based frame
.text$mn:0000BA20
.text$mn:0000BA20 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct TreeParams>>::max_size(void)const
.text$mn:0000BA20                 public ?max_size@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ
.text$mn:0000BA20 ?max_size@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ proc near
.text$mn:0000BA20                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::max_size(void)+17p
.text$mn:0000BA20
.text$mn:0000BA20 var_4           = dword ptr -4
.text$mn:0000BA20
.text$mn:0000BA20                 push    ebp
.text$mn:0000BA21                 mov     ebp, esp
.text$mn:0000BA23                 push    ecx
.text$mn:0000BA24                 mov     [ebp+var_4], ecx
.text$mn:0000BA27                 mov     eax, [ebp+var_4]
.text$mn:0000BA2A                 push    eax
.text$mn:0000BA2B                 call    ?max_size@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAIABV?$allocator@UTreeParams@@@2@@Z ; std::allocator_traits<std::allocator<TreeParams>>::max_size(std::allocator<TreeParams> const &)
.text$mn:0000BA30                 add     esp, 4
.text$mn:0000BA33                 mov     esp, ebp
.text$mn:0000BA35                 pop     ebp
.text$mn:0000BA36                 retn
.text$mn:0000BA36 ?max_size@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ endp
.text$mn:0000BA36
.text$mn:0000BA36 ; ---------------------------------------------------------------------------
.text$mn:0000BA37                 align 4
.text$mn:0000BA37 _text$mn        ends
.text$mn:0000BA37
.text$mn:0000BA38 ; ===========================================================================
.text$mn:0000BA38
.text$mn:0000BA38 ; Segment type: Pure code
.text$mn:0000BA38 ; Segment permissions: Read/Execute
.text$mn:0000BA38 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA38                 assume cs:_text$mn
.text$mn:0000BA38                 ;org 0BA38h
.text$mn:0000BA38 ; COMDAT (pick any)
.text$mn:0000BA38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA38
.text$mn:0000BA38 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA38
.text$mn:0000BA38 ; Attributes: bp-based frame
.text$mn:0000BA38
.text$mn:0000BA38 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::max_size(void)const
.text$mn:0000BA38                 public ?max_size@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ
.text$mn:0000BA38 ?max_size@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ proc near
.text$mn:0000BA38                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::max_size(void)+17p
.text$mn:0000BA38
.text$mn:0000BA38 var_4           = dword ptr -4
.text$mn:0000BA38
.text$mn:0000BA38                 push    ebp
.text$mn:0000BA39                 mov     ebp, esp
.text$mn:0000BA3B                 push    ecx
.text$mn:0000BA3C                 mov     [ebp+var_4], ecx
.text$mn:0000BA3F                 mov     eax, [ebp+var_4]
.text$mn:0000BA42                 push    eax
.text$mn:0000BA43                 call    ?max_size@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAIABV?$allocator@UTreeStateNode@@@2@@Z ; std::allocator_traits<std::allocator<TreeStateNode>>::max_size(std::allocator<TreeStateNode> const &)
.text$mn:0000BA48                 add     esp, 4
.text$mn:0000BA4B                 mov     esp, ebp
.text$mn:0000BA4D                 pop     ebp
.text$mn:0000BA4E                 retn
.text$mn:0000BA4E ?max_size@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ endp
.text$mn:0000BA4E
.text$mn:0000BA4E ; ---------------------------------------------------------------------------
.text$mn:0000BA4F                 align 10h
.text$mn:0000BA4F _text$mn        ends
.text$mn:0000BA4F
.text$mn:0000BA50 ; ===========================================================================
.text$mn:0000BA50
.text$mn:0000BA50 ; Segment type: Pure code
.text$mn:0000BA50 ; Segment permissions: Read/Execute
.text$mn:0000BA50 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA50                 assume cs:_text$mn
.text$mn:0000BA50                 ;org 0BA50h
.text$mn:0000BA50 ; COMDAT (pick any)
.text$mn:0000BA50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA50
.text$mn:0000BA50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA50
.text$mn:0000BA50 ; Attributes: bp-based frame
.text$mn:0000BA50
.text$mn:0000BA50 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000BA50                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:0000BA50 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000BA50                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:0000BA50
.text$mn:0000BA50 var_4           = dword ptr -4
.text$mn:0000BA50
.text$mn:0000BA50                 push    ebp
.text$mn:0000BA51                 mov     ebp, esp
.text$mn:0000BA53                 push    ecx
.text$mn:0000BA54                 mov     [ebp+var_4], ecx
.text$mn:0000BA57                 mov     eax, [ebp+var_4]
.text$mn:0000BA5A                 push    eax
.text$mn:0000BA5B                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000BA60                 add     esp, 4
.text$mn:0000BA63                 mov     esp, ebp
.text$mn:0000BA65                 pop     ebp
.text$mn:0000BA66                 retn
.text$mn:0000BA66 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000BA66
.text$mn:0000BA66 ; ---------------------------------------------------------------------------
.text$mn:0000BA67                 align 4
.text$mn:0000BA67 _text$mn        ends
.text$mn:0000BA67
.text$mn:0000BA68 ; ===========================================================================
.text$mn:0000BA68
.text$mn:0000BA68 ; Segment type: Pure code
.text$mn:0000BA68 ; Segment permissions: Read/Execute
.text$mn:0000BA68 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA68                 assume cs:_text$mn
.text$mn:0000BA68                 ;org 0BA68h
.text$mn:0000BA68 ; COMDAT (pick any)
.text$mn:0000BA68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA68
.text$mn:0000BA68 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA68
.text$mn:0000BA68 ; Attributes: bp-based frame
.text$mn:0000BA68
.text$mn:0000BA68 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000BA68                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000BA68 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000BA68                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000BA68
.text$mn:0000BA68 var_4           = dword ptr -4
.text$mn:0000BA68
.text$mn:0000BA68                 push    ebp
.text$mn:0000BA69                 mov     ebp, esp
.text$mn:0000BA6B                 push    ecx
.text$mn:0000BA6C                 mov     [ebp+var_4], ecx
.text$mn:0000BA6F                 mov     eax, [ebp+var_4]
.text$mn:0000BA72                 push    eax
.text$mn:0000BA73                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000BA78                 add     esp, 4
.text$mn:0000BA7B                 mov     esp, ebp
.text$mn:0000BA7D                 pop     ebp
.text$mn:0000BA7E                 retn
.text$mn:0000BA7E ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000BA7E
.text$mn:0000BA7E ; ---------------------------------------------------------------------------
.text$mn:0000BA7F                 align 10h
.text$mn:0000BA7F _text$mn        ends
.text$mn:0000BA7F
.text$mn:0000BA80 ; ===========================================================================
.text$mn:0000BA80
.text$mn:0000BA80 ; Segment type: Pure code
.text$mn:0000BA80 ; Segment permissions: Read/Execute
.text$mn:0000BA80 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA80                 assume cs:_text$mn
.text$mn:0000BA80                 ;org 0BA80h
.text$mn:0000BA80 ; COMDAT (pick any)
.text$mn:0000BA80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA80
.text$mn:0000BA80 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA80
.text$mn:0000BA80 ; Attributes: bp-based frame
.text$mn:0000BA80
.text$mn:0000BA80 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000BA80                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000BA80 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000BA80                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000BA80
.text$mn:0000BA80 var_4           = dword ptr -4
.text$mn:0000BA80
.text$mn:0000BA80                 push    ebp
.text$mn:0000BA81                 mov     ebp, esp
.text$mn:0000BA83                 push    ecx
.text$mn:0000BA84                 mov     [ebp+var_4], ecx
.text$mn:0000BA87                 or      eax, 0FFFFFFFFh
.text$mn:0000BA8A                 mov     esp, ebp
.text$mn:0000BA8C                 pop     ebp
.text$mn:0000BA8D                 retn
.text$mn:0000BA8D ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:0000BA8D
.text$mn:0000BA8D ; ---------------------------------------------------------------------------
.text$mn:0000BA8E                 align 10h
.text$mn:0000BA8E _text$mn        ends
.text$mn:0000BA8E
.text$mn:0000BA90 ; ===========================================================================
.text$mn:0000BA90
.text$mn:0000BA90 ; Segment type: Pure code
.text$mn:0000BA90 ; Segment permissions: Read/Execute
.text$mn:0000BA90 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA90                 assume cs:_text$mn
.text$mn:0000BA90                 ;org 0BA90h
.text$mn:0000BA90 ; COMDAT (pick any)
.text$mn:0000BA90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA90
.text$mn:0000BA90 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA90
.text$mn:0000BA90 ; Attributes: bp-based frame
.text$mn:0000BA90
.text$mn:0000BA90 ; public: unsigned int __thiscall std::allocator<struct TreeParams>::max_size(void)const
.text$mn:0000BA90                 public ?max_size@?$allocator@UTreeParams@@@std@@QBEIXZ
.text$mn:0000BA90 ?max_size@?$allocator@UTreeParams@@@std@@QBEIXZ proc near
.text$mn:0000BA90                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeParams>>::max_size(std::allocator<TreeParams> const &)+6p
.text$mn:0000BA90
.text$mn:0000BA90 var_4           = dword ptr -4
.text$mn:0000BA90
.text$mn:0000BA90                 push    ebp
.text$mn:0000BA91                 mov     ebp, esp
.text$mn:0000BA93                 push    ecx
.text$mn:0000BA94                 mov     [ebp+var_4], ecx
.text$mn:0000BA97                 mov     eax, 25ED097h
.text$mn:0000BA9C                 mov     esp, ebp
.text$mn:0000BA9E                 pop     ebp
.text$mn:0000BA9F                 retn
.text$mn:0000BA9F ?max_size@?$allocator@UTreeParams@@@std@@QBEIXZ endp
.text$mn:0000BA9F
.text$mn:0000BA9F _text$mn        ends
.text$mn:0000BA9F
.text$mn:0000BAA0 ; ===========================================================================
.text$mn:0000BAA0
.text$mn:0000BAA0 ; Segment type: Pure code
.text$mn:0000BAA0 ; Segment permissions: Read/Execute
.text$mn:0000BAA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAA0                 assume cs:_text$mn
.text$mn:0000BAA0                 ;org 0BAA0h
.text$mn:0000BAA0 ; COMDAT (pick any)
.text$mn:0000BAA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAA0
.text$mn:0000BAA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAA0
.text$mn:0000BAA0 ; Attributes: bp-based frame
.text$mn:0000BAA0
.text$mn:0000BAA0 ; public: unsigned int __thiscall std::allocator<struct TreeStateNode>::max_size(void)const
.text$mn:0000BAA0                 public ?max_size@?$allocator@UTreeStateNode@@@std@@QBEIXZ
.text$mn:0000BAA0 ?max_size@?$allocator@UTreeStateNode@@@std@@QBEIXZ proc near
.text$mn:0000BAA0                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeStateNode>>::max_size(std::allocator<TreeStateNode> const &)+6p
.text$mn:0000BAA0
.text$mn:0000BAA0 var_4           = dword ptr -4
.text$mn:0000BAA0
.text$mn:0000BAA0                 push    ebp
.text$mn:0000BAA1                 mov     ebp, esp
.text$mn:0000BAA3                 push    ecx
.text$mn:0000BAA4                 mov     [ebp+var_4], ecx
.text$mn:0000BAA7                 mov     eax, 35E50D7h
.text$mn:0000BAAC                 mov     esp, ebp
.text$mn:0000BAAE                 pop     ebp
.text$mn:0000BAAF                 retn
.text$mn:0000BAAF ?max_size@?$allocator@UTreeStateNode@@@std@@QBEIXZ endp
.text$mn:0000BAAF
.text$mn:0000BAAF _text$mn        ends
.text$mn:0000BAAF
.text$mn:0000BAB0 ; ===========================================================================
.text$mn:0000BAB0
.text$mn:0000BAB0 ; Segment type: Pure code
.text$mn:0000BAB0 ; Segment permissions: Read/Execute
.text$mn:0000BAB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAB0                 assume cs:_text$mn
.text$mn:0000BAB0                 ;org 0BAB0h
.text$mn:0000BAB0 ; COMDAT (pick any)
.text$mn:0000BAB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAB0
.text$mn:0000BAB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAB0
.text$mn:0000BAB0 ; Attributes: bp-based frame
.text$mn:0000BAB0
.text$mn:0000BAB0 ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:0000BAB0                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:0000BAB0 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:0000BAB0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:0000BAB0
.text$mn:0000BAB0 var_4           = dword ptr -4
.text$mn:0000BAB0
.text$mn:0000BAB0                 push    ebp
.text$mn:0000BAB1                 mov     ebp, esp
.text$mn:0000BAB3                 push    ecx
.text$mn:0000BAB4                 mov     [ebp+var_4], ecx
.text$mn:0000BAB7                 mov     eax, 9249249h
.text$mn:0000BABC                 mov     esp, ebp
.text$mn:0000BABE                 pop     ebp
.text$mn:0000BABF                 retn
.text$mn:0000BABF ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:0000BABF
.text$mn:0000BABF _text$mn        ends
.text$mn:0000BABF
.text$mn:0000BAC0 ; ===========================================================================
.text$mn:0000BAC0
.text$mn:0000BAC0 ; Segment type: Pure code
.text$mn:0000BAC0 ; Segment permissions: Read/Execute
.text$mn:0000BAC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAC0                 assume cs:_text$mn
.text$mn:0000BAC0                 ;org 0BAC0h
.text$mn:0000BAC0 ; COMDAT (pick any)
.text$mn:0000BAC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAC0
.text$mn:0000BAC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAC0
.text$mn:0000BAC0 ; Attributes: bp-based frame
.text$mn:0000BAC0
.text$mn:0000BAC0 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000BAC0                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000BAC0 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000BAC0                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000BAC0
.text$mn:0000BAC0 var_4           = dword ptr -4
.text$mn:0000BAC0
.text$mn:0000BAC0                 push    ebp
.text$mn:0000BAC1                 mov     ebp, esp
.text$mn:0000BAC3                 push    ecx
.text$mn:0000BAC4                 mov     [ebp+var_4], ecx
.text$mn:0000BAC7                 mov     eax, 7FFFFFFFh
.text$mn:0000BACC                 mov     esp, ebp
.text$mn:0000BACE                 pop     ebp
.text$mn:0000BACF                 retn
.text$mn:0000BACF ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000BACF
.text$mn:0000BACF _text$mn        ends
.text$mn:0000BACF
.text$mn:0000BAD0 ; ===========================================================================
.text$mn:0000BAD0
.text$mn:0000BAD0 ; Segment type: Pure code
.text$mn:0000BAD0 ; Segment permissions: Read/Execute
.text$mn:0000BAD0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAD0                 assume cs:_text$mn
.text$mn:0000BAD0                 ;org 0BAD0h
.text$mn:0000BAD0 ; COMDAT (pick any)
.text$mn:0000BAD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAD0
.text$mn:0000BAD0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAD0
.text$mn:0000BAD0 ; Attributes: bp-based frame
.text$mn:0000BAD0
.text$mn:0000BAD0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000BAD0                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000BAD0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000BAD0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000BAD0
.text$mn:0000BAD0 arg_0           = dword ptr  8
.text$mn:0000BAD0
.text$mn:0000BAD0                 push    ebp
.text$mn:0000BAD1                 mov     ebp, esp
.text$mn:0000BAD3                 mov     ecx, [ebp+arg_0]
.text$mn:0000BAD6                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000BADB                 pop     ebp
.text$mn:0000BADC                 retn
.text$mn:0000BADC ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:0000BADC
.text$mn:0000BADC ; ---------------------------------------------------------------------------
.text$mn:0000BADD                 align 10h
.text$mn:0000BADD _text$mn        ends
.text$mn:0000BADD
.text$mn:0000BAE0 ; ===========================================================================
.text$mn:0000BAE0
.text$mn:0000BAE0 ; Segment type: Pure code
.text$mn:0000BAE0 ; Segment permissions: Read/Execute
.text$mn:0000BAE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAE0                 assume cs:_text$mn
.text$mn:0000BAE0                 ;org 0BAE0h
.text$mn:0000BAE0 ; COMDAT (pick any)
.text$mn:0000BAE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAE0
.text$mn:0000BAE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAE0
.text$mn:0000BAE0 ; Attributes: bp-based frame
.text$mn:0000BAE0
.text$mn:0000BAE0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct TreeParams>>::max_size(class std::allocator<struct TreeParams> const &)
.text$mn:0000BAE0                 public ?max_size@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAIABV?$allocator@UTreeParams@@@2@@Z
.text$mn:0000BAE0 ?max_size@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAIABV?$allocator@UTreeParams@@@2@@Z proc near
.text$mn:0000BAE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeParams>>::max_size(void)+Bp
.text$mn:0000BAE0
.text$mn:0000BAE0 arg_0           = dword ptr  8
.text$mn:0000BAE0
.text$mn:0000BAE0                 push    ebp
.text$mn:0000BAE1                 mov     ebp, esp
.text$mn:0000BAE3                 mov     ecx, [ebp+arg_0]
.text$mn:0000BAE6                 call    ?max_size@?$allocator@UTreeParams@@@std@@QBEIXZ ; std::allocator<TreeParams>::max_size(void)
.text$mn:0000BAEB                 pop     ebp
.text$mn:0000BAEC                 retn
.text$mn:0000BAEC ?max_size@?$allocator_traits@V?$allocator@UTreeParams@@@std@@@std@@SAIABV?$allocator@UTreeParams@@@2@@Z endp
.text$mn:0000BAEC
.text$mn:0000BAEC ; ---------------------------------------------------------------------------
.text$mn:0000BAED                 align 10h
.text$mn:0000BAED _text$mn        ends
.text$mn:0000BAED
.text$mn:0000BAF0 ; ===========================================================================
.text$mn:0000BAF0
.text$mn:0000BAF0 ; Segment type: Pure code
.text$mn:0000BAF0 ; Segment permissions: Read/Execute
.text$mn:0000BAF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAF0                 assume cs:_text$mn
.text$mn:0000BAF0                 ;org 0BAF0h
.text$mn:0000BAF0 ; COMDAT (pick any)
.text$mn:0000BAF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAF0
.text$mn:0000BAF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAF0
.text$mn:0000BAF0 ; Attributes: bp-based frame
.text$mn:0000BAF0
.text$mn:0000BAF0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct TreeStateNode>>::max_size(class std::allocator<struct TreeStateNode> const &)
.text$mn:0000BAF0                 public ?max_size@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAIABV?$allocator@UTreeStateNode@@@2@@Z
.text$mn:0000BAF0 ?max_size@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAIABV?$allocator@UTreeStateNode@@@2@@Z proc near
.text$mn:0000BAF0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::max_size(void)+Bp
.text$mn:0000BAF0
.text$mn:0000BAF0 arg_0           = dword ptr  8
.text$mn:0000BAF0
.text$mn:0000BAF0                 push    ebp
.text$mn:0000BAF1                 mov     ebp, esp
.text$mn:0000BAF3                 mov     ecx, [ebp+arg_0]
.text$mn:0000BAF6                 call    ?max_size@?$allocator@UTreeStateNode@@@std@@QBEIXZ ; std::allocator<TreeStateNode>::max_size(void)
.text$mn:0000BAFB                 pop     ebp
.text$mn:0000BAFC                 retn
.text$mn:0000BAFC ?max_size@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SAIABV?$allocator@UTreeStateNode@@@2@@Z endp
.text$mn:0000BAFC
.text$mn:0000BAFC ; ---------------------------------------------------------------------------
.text$mn:0000BAFD                 align 10h
.text$mn:0000BAFD _text$mn        ends
.text$mn:0000BAFD
.text$mn:0000BB00 ; ===========================================================================
.text$mn:0000BB00
.text$mn:0000BB00 ; Segment type: Pure code
.text$mn:0000BB00 ; Segment permissions: Read/Execute
.text$mn:0000BB00 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB00                 assume cs:_text$mn
.text$mn:0000BB00                 ;org 0BB00h
.text$mn:0000BB00 ; COMDAT (pick any)
.text$mn:0000BB00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB00
.text$mn:0000BB00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB00
.text$mn:0000BB00 ; Attributes: bp-based frame
.text$mn:0000BB00
.text$mn:0000BB00 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000BB00                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:0000BB00 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:0000BB00                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:0000BB00
.text$mn:0000BB00 arg_0           = dword ptr  8
.text$mn:0000BB00
.text$mn:0000BB00                 push    ebp
.text$mn:0000BB01                 mov     ebp, esp
.text$mn:0000BB03                 mov     ecx, [ebp+arg_0]
.text$mn:0000BB06                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:0000BB0B                 pop     ebp
.text$mn:0000BB0C                 retn
.text$mn:0000BB0C ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:0000BB0C
.text$mn:0000BB0C ; ---------------------------------------------------------------------------
.text$mn:0000BB0D                 align 10h
.text$mn:0000BB0D _text$mn        ends
.text$mn:0000BB0D
.text$mn:0000BB10 ; ===========================================================================
.text$mn:0000BB10
.text$mn:0000BB10 ; Segment type: Pure code
.text$mn:0000BB10 ; Segment permissions: Read/Execute
.text$mn:0000BB10 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB10                 assume cs:_text$mn
.text$mn:0000BB10                 ;org 0BB10h
.text$mn:0000BB10 ; COMDAT (pick any)
.text$mn:0000BB10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB10
.text$mn:0000BB10 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB10
.text$mn:0000BB10 ; Attributes: bp-based frame
.text$mn:0000BB10
.text$mn:0000BB10 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000BB10                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000BB10 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000BB10                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000BB10
.text$mn:0000BB10 arg_0           = dword ptr  8
.text$mn:0000BB10
.text$mn:0000BB10                 push    ebp
.text$mn:0000BB11                 mov     ebp, esp
.text$mn:0000BB13                 mov     ecx, [ebp+arg_0]
.text$mn:0000BB16                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000BB1B                 pop     ebp
.text$mn:0000BB1C                 retn
.text$mn:0000BB1C ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:0000BB1C
.text$mn:0000BB1C ; ---------------------------------------------------------------------------
.text$mn:0000BB1D                 align 10h
.text$mn:0000BB1D _text$mn        ends
.text$mn:0000BB1D
.text$mn:0000BB20 ; ===========================================================================
.text$mn:0000BB20
.text$mn:0000BB20 ; Segment type: Pure code
.text$mn:0000BB20 ; Segment permissions: Read/Execute
.text$mn:0000BB20 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB20                 assume cs:_text$mn
.text$mn:0000BB20                 ;org 0BB20h
.text$mn:0000BB20 ; COMDAT (pick any)
.text$mn:0000BB20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB20
.text$mn:0000BB20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB20
.text$mn:0000BB20 ; Attributes: bp-based frame
.text$mn:0000BB20
.text$mn:0000BB20 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000BB20                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000BB20 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000BB20                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000BB20                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000BB20
.text$mn:0000BB20 var_10          = dword ptr -10h
.text$mn:0000BB20 var_C           = dword ptr -0Ch
.text$mn:0000BB20 var_8           = dword ptr -8
.text$mn:0000BB20 var_1           = byte ptr -1
.text$mn:0000BB20
.text$mn:0000BB20                 push    ebp
.text$mn:0000BB21                 mov     ebp, esp
.text$mn:0000BB23                 sub     esp, 10h
.text$mn:0000BB26                 mov     [ebp+var_10], ecx
.text$mn:0000BB29                 lea     eax, [ebp+var_1]
.text$mn:0000BB2C                 push    eax
.text$mn:0000BB2D                 mov     ecx, [ebp+var_10]
.text$mn:0000BB30                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000BB35                 mov     ecx, eax
.text$mn:0000BB37                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:0000BB3C                 mov     [ebp+var_8], eax
.text$mn:0000BB3F                 cmp     [ebp+var_8], 1
.text$mn:0000BB43                 ja      short loc_BB4E
.text$mn:0000BB45                 mov     [ebp+var_C], 1
.text$mn:0000BB4C                 jmp     short loc_BB57
.text$mn:0000BB4E ; ---------------------------------------------------------------------------
.text$mn:0000BB4E
.text$mn:0000BB4E loc_BB4E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000BB4E                 mov     ecx, [ebp+var_8]
.text$mn:0000BB51                 sub     ecx, 1
.text$mn:0000BB54                 mov     [ebp+var_C], ecx
.text$mn:0000BB57
.text$mn:0000BB57 loc_BB57:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000BB57                 mov     eax, [ebp+var_C]
.text$mn:0000BB5A                 mov     esp, ebp
.text$mn:0000BB5C                 pop     ebp
.text$mn:0000BB5D                 retn
.text$mn:0000BB5D ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000BB5D
.text$mn:0000BB5D ; ---------------------------------------------------------------------------
.text$mn:0000BB5E                 align 10h
.text$mn:0000BB5E _text$mn        ends
.text$mn:0000BB5E
.text$mn:0000BB60 ; ===========================================================================
.text$mn:0000BB60
.text$mn:0000BB60 ; Segment type: Pure code
.text$mn:0000BB60 ; Segment permissions: Read/Execute
.text$mn:0000BB60 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB60                 assume cs:_text$mn
.text$mn:0000BB60                 ;org 0BB60h
.text$mn:0000BB60 ; COMDAT (pick any)
.text$mn:0000BB60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB60
.text$mn:0000BB60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB60
.text$mn:0000BB60 ; Attributes: bp-based frame
.text$mn:0000BB60
.text$mn:0000BB60 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000BB60                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000BB60 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000BB60                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000BB60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000BB60
.text$mn:0000BB60 var_10          = dword ptr -10h
.text$mn:0000BB60 var_C           = dword ptr -0Ch
.text$mn:0000BB60 var_8           = dword ptr -8
.text$mn:0000BB60 var_1           = byte ptr -1
.text$mn:0000BB60
.text$mn:0000BB60                 push    ebp
.text$mn:0000BB61                 mov     ebp, esp
.text$mn:0000BB63                 sub     esp, 10h
.text$mn:0000BB66                 mov     [ebp+var_10], ecx
.text$mn:0000BB69                 lea     eax, [ebp+var_1]
.text$mn:0000BB6C                 push    eax
.text$mn:0000BB6D                 mov     ecx, [ebp+var_10]
.text$mn:0000BB70                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000BB75                 mov     ecx, eax
.text$mn:0000BB77                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:0000BB7C                 mov     [ebp+var_8], eax
.text$mn:0000BB7F                 cmp     [ebp+var_8], 1
.text$mn:0000BB83                 ja      short loc_BB8E
.text$mn:0000BB85                 mov     [ebp+var_C], 1
.text$mn:0000BB8C                 jmp     short loc_BB97
.text$mn:0000BB8E ; ---------------------------------------------------------------------------
.text$mn:0000BB8E
.text$mn:0000BB8E loc_BB8E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000BB8E                 mov     ecx, [ebp+var_8]
.text$mn:0000BB91                 sub     ecx, 1
.text$mn:0000BB94                 mov     [ebp+var_C], ecx
.text$mn:0000BB97
.text$mn:0000BB97 loc_BB97:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000BB97                 mov     eax, [ebp+var_C]
.text$mn:0000BB9A                 mov     esp, ebp
.text$mn:0000BB9C                 pop     ebp
.text$mn:0000BB9D                 retn
.text$mn:0000BB9D ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000BB9D
.text$mn:0000BB9D ; ---------------------------------------------------------------------------
.text$mn:0000BB9E                 align 10h
.text$mn:0000BB9E _text$mn        ends
.text$mn:0000BB9E
.text$mn:0000BBA0 ; ===========================================================================
.text$mn:0000BBA0
.text$mn:0000BBA0 ; Segment type: Pure code
.text$mn:0000BBA0 ; Segment permissions: Read/Execute
.text$mn:0000BBA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BBA0                 assume cs:_text$mn
.text$mn:0000BBA0                 ;org 0BBA0h
.text$mn:0000BBA0 ; COMDAT (pick any)
.text$mn:0000BBA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BBA0
.text$mn:0000BBA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BBA0
.text$mn:0000BBA0 ; Attributes: bp-based frame
.text$mn:0000BBA0
.text$mn:0000BBA0 ; public: unsigned int __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::max_size(void)const
.text$mn:0000BBA0                 public ?max_size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ
.text$mn:0000BBA0 ?max_size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ proc near
.text$mn:0000BBA0                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Grow_to(uint)+17p
.text$mn:0000BBA0                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)+18p
.text$mn:0000BBA0
.text$mn:0000BBA0 var_8           = dword ptr -8
.text$mn:0000BBA0 var_1           = byte ptr -1
.text$mn:0000BBA0
.text$mn:0000BBA0                 push    ebp
.text$mn:0000BBA1                 mov     ebp, esp
.text$mn:0000BBA3                 sub     esp, 8
.text$mn:0000BBA6                 mov     [ebp+var_8], ecx
.text$mn:0000BBA9                 lea     eax, [ebp+var_1]
.text$mn:0000BBAC                 push    eax
.text$mn:0000BBAD                 mov     ecx, [ebp+var_8]
.text$mn:0000BBB0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:0000BBB5                 mov     ecx, eax
.text$mn:0000BBB7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TreeParams>>::max_size(void)
.text$mn:0000BBBC                 mov     esp, ebp
.text$mn:0000BBBE                 pop     ebp
.text$mn:0000BBBF                 retn
.text$mn:0000BBBF ?max_size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ endp
.text$mn:0000BBBF
.text$mn:0000BBBF _text$mn        ends
.text$mn:0000BBBF
.text$mn:0000BBC0 ; ===========================================================================
.text$mn:0000BBC0
.text$mn:0000BBC0 ; Segment type: Pure code
.text$mn:0000BBC0 ; Segment permissions: Read/Execute
.text$mn:0000BBC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BBC0                 assume cs:_text$mn
.text$mn:0000BBC0                 ;org 0BBC0h
.text$mn:0000BBC0 ; COMDAT (pick any)
.text$mn:0000BBC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BBC0
.text$mn:0000BBC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BBC0
.text$mn:0000BBC0 ; Attributes: bp-based frame
.text$mn:0000BBC0
.text$mn:0000BBC0 ; public: unsigned int __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::max_size(void)const
.text$mn:0000BBC0                 public ?max_size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ
.text$mn:0000BBC0 ?max_size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ proc near
.text$mn:0000BBC0                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Buy(uint)+36p
.text$mn:0000BBC0
.text$mn:0000BBC0 var_8           = dword ptr -8
.text$mn:0000BBC0 var_1           = byte ptr -1
.text$mn:0000BBC0
.text$mn:0000BBC0                 push    ebp
.text$mn:0000BBC1                 mov     ebp, esp
.text$mn:0000BBC3                 sub     esp, 8
.text$mn:0000BBC6                 mov     [ebp+var_8], ecx
.text$mn:0000BBC9                 lea     eax, [ebp+var_1]
.text$mn:0000BBCC                 push    eax
.text$mn:0000BBCD                 mov     ecx, [ebp+var_8]
.text$mn:0000BBD0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeStateNode,std::allocator<TreeStateNode>>>::_Getal(void)
.text$mn:0000BBD5                 mov     ecx, eax
.text$mn:0000BBD7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::max_size(void)
.text$mn:0000BBDC                 mov     esp, ebp
.text$mn:0000BBDE                 pop     ebp
.text$mn:0000BBDF                 retn
.text$mn:0000BBDF ?max_size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ endp
.text$mn:0000BBDF
.text$mn:0000BBDF _text$mn        ends
.text$mn:0000BBDF
.text$mn:0000BBE0 ; ===========================================================================
.text$mn:0000BBE0
.text$mn:0000BBE0 ; Segment type: Pure code
.text$mn:0000BBE0 ; Segment permissions: Read/Execute
.text$mn:0000BBE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BBE0                 assume cs:_text$mn
.text$mn:0000BBE0                 ;org 0BBE0h
.text$mn:0000BBE0 ; COMDAT (pick any)
.text$mn:0000BBE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BBE0
.text$mn:0000BBE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BBE0
.text$mn:0000BBE0 ; Attributes: bp-based frame
.text$mn:0000BBE0
.text$mn:0000BBE0 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000BBE0                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000BBE0 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000BBE0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+36p
.text$mn:0000BBE0
.text$mn:0000BBE0 var_8           = dword ptr -8
.text$mn:0000BBE0 var_1           = byte ptr -1
.text$mn:0000BBE0
.text$mn:0000BBE0                 push    ebp
.text$mn:0000BBE1                 mov     ebp, esp
.text$mn:0000BBE3                 sub     esp, 8
.text$mn:0000BBE6                 mov     [ebp+var_8], ecx
.text$mn:0000BBE9                 lea     eax, [ebp+var_1]
.text$mn:0000BBEC                 push    eax
.text$mn:0000BBED                 mov     ecx, [ebp+var_8]
.text$mn:0000BBF0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BBF5                 mov     ecx, eax
.text$mn:0000BBF7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000BBFC                 mov     esp, ebp
.text$mn:0000BBFE                 pop     ebp
.text$mn:0000BBFF                 retn
.text$mn:0000BBFF ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000BBFF
.text$mn:0000BBFF _text$mn        ends
.text$mn:0000BBFF
.text$mn:0000BC00 ; ===========================================================================
.text$mn:0000BC00
.text$mn:0000BC00 ; Segment type: Pure code
.text$mn:0000BC00 ; Segment permissions: Read/Execute
.text$mn:0000BC00 _text$mn        segment para public 'CODE' use32
.text$mn:0000BC00                 assume cs:_text$mn
.text$mn:0000BC00                 ;org 0BC00h
.text$mn:0000BC00 ; COMDAT (pick any)
.text$mn:0000BC00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BC00
.text$mn:0000BC00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BC00
.text$mn:0000BC00 ; Attributes: bp-based frame
.text$mn:0000BC00
.text$mn:0000BC00 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000BC00                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BC00 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000BC00                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000BC00                                         ; DATA XREF: .rdata:0000E6E0o
.text$mn:0000BC00
.text$mn:0000BC00 var_1C          = dword ptr -1Ch
.text$mn:0000BC00 var_18          = dword ptr -18h
.text$mn:0000BC00 Str             = dword ptr -14h
.text$mn:0000BC00 var_10          = dword ptr -10h
.text$mn:0000BC00 var_C           = dword ptr -0Ch
.text$mn:0000BC00 var_4           = dword ptr -4
.text$mn:0000BC00 arg_0           = dword ptr  8
.text$mn:0000BC00 arg_4           = dword ptr  0Ch
.text$mn:0000BC00
.text$mn:0000BC00                 push    ebp
.text$mn:0000BC01                 mov     ebp, esp
.text$mn:0000BC03                 push    0FFFFFFFFh
.text$mn:0000BC05                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BC0A                 mov     eax, large fs:0
.text$mn:0000BC10                 push    eax
.text$mn:0000BC11                 sub     esp, 10h
.text$mn:0000BC14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BC19                 xor     eax, ebp
.text$mn:0000BC1B                 push    eax
.text$mn:0000BC1C                 lea     eax, [ebp+var_C]
.text$mn:0000BC1F                 mov     large fs:0, eax
.text$mn:0000BC25                 mov     [ebp+var_1C], ecx
.text$mn:0000BC28                 mov     [ebp+var_18], 0
.text$mn:0000BC2F                 mov     eax, [ebp+arg_4]
.text$mn:0000BC32                 push    eax             ; int
.text$mn:0000BC33                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000BC38                 add     esp, 4
.text$mn:0000BC3B                 mov     [ebp+var_10], eax
.text$mn:0000BC3E                 cmp     [ebp+var_10], 0
.text$mn:0000BC42                 jz      short loc_BC4C
.text$mn:0000BC44                 mov     ecx, [ebp+var_10]
.text$mn:0000BC47                 mov     [ebp+Str], ecx
.text$mn:0000BC4A                 jmp     short loc_BC53
.text$mn:0000BC4C ; ---------------------------------------------------------------------------
.text$mn:0000BC4C
.text$mn:0000BC4C loc_BC4C:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:0000BC4C                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000BC53
.text$mn:0000BC53 loc_BC53:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000BC53                 mov     edx, [ebp+Str]
.text$mn:0000BC56                 push    edx             ; Str
.text$mn:0000BC57                 mov     ecx, [ebp+arg_0]
.text$mn:0000BC5A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000BC5F                 mov     [ebp+var_4], 0
.text$mn:0000BC66                 mov     eax, [ebp+var_18]
.text$mn:0000BC69                 or      eax, 1
.text$mn:0000BC6C                 mov     [ebp+var_18], eax
.text$mn:0000BC6F                 mov     eax, [ebp+arg_0]
.text$mn:0000BC72                 mov     ecx, [ebp+var_C]
.text$mn:0000BC75                 mov     large fs:0, ecx
.text$mn:0000BC7C                 pop     ecx
.text$mn:0000BC7D                 mov     esp, ebp
.text$mn:0000BC7F                 pop     ebp
.text$mn:0000BC80                 retn    8
.text$mn:0000BC80 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000BC80
.text$mn:0000BC80 ; ---------------------------------------------------------------------------
.text$mn:0000BC83                 align 4
.text$mn:0000BC83 _text$mn        ends
.text$mn:0000BC83
.text$x:0000BC84 ; ===========================================================================
.text$x:0000BC84
.text$x:0000BC84 ; Segment type: Pure code
.text$x:0000BC84 ; Segment permissions: Read/Execute
.text$x:0000BC84 _text$x         segment para public 'CODE' use32
.text$x:0000BC84                 assume cs:_text$x
.text$x:0000BC84                 ;org 0BC84h
.text$x:0000BC84 ; COMDAT (pick associative to section at BC00)
.text$x:0000BC84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BC84
.text$x:0000BC84 ; =============== S U B R O U T I N E =======================================
.text$x:0000BC84
.text$x:0000BC84
.text$x:0000BC84 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000BC84                                         ; DATA XREF: .xdata$x:0000CD5Co
.text$x:0000BC84                 mov     eax, [ebp-18h]
.text$x:0000BC87                 and     eax, 1
.text$x:0000BC8A                 jz      $LN6
.text$x:0000BC90                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000BC94                 mov     ecx, [ebp+8]
.text$x:0000BC97                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000BC9C ; ---------------------------------------------------------------------------
.text$x:0000BC9C
.text$x:0000BC9C $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000BC9C                 retn
.text$x:0000BC9C __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000BC9C
.text$x:0000BC9D
.text$x:0000BC9D ; =============== S U B R O U T I N E =======================================
.text$x:0000BC9D
.text$x:0000BC9D
.text$x:0000BC9D __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000BC9D                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:0000BC9D
.text$x:0000BC9D arg_4           = dword ptr  8
.text$x:0000BC9D
.text$x:0000BC9D                 mov     edx, [esp+arg_4]
.text$x:0000BCA1                 lea     eax, [edx+0Ch]
.text$x:0000BCA4                 mov     ecx, [edx-14h]
.text$x:0000BCA7                 xor     ecx, eax
.text$x:0000BCA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BCAE                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000BCB3                 jmp     ___CxxFrameHandler3
.text$x:0000BCB3 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000BCB3
.text$x:0000BCB3 _text$x         ends
.text$x:0000BCB3
.text$mn:0000BCB8 ; ===========================================================================
.text$mn:0000BCB8
.text$mn:0000BCB8 ; Segment type: Pure code
.text$mn:0000BCB8 ; Segment permissions: Read/Execute
.text$mn:0000BCB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BCB8                 assume cs:_text$mn
.text$mn:0000BCB8                 ;org 0BCB8h
.text$mn:0000BCB8 ; COMDAT (pick any)
.text$mn:0000BCB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCB8
.text$mn:0000BCB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCB8
.text$mn:0000BCB8 ; Attributes: bp-based frame
.text$mn:0000BCB8
.text$mn:0000BCB8 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000BCB8                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BCB8 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000BCB8                                         ; DATA XREF: .rdata:0000E714o
.text$mn:0000BCB8
.text$mn:0000BCB8 var_14          = dword ptr -14h
.text$mn:0000BCB8 var_10          = dword ptr -10h
.text$mn:0000BCB8 var_C           = dword ptr -0Ch
.text$mn:0000BCB8 var_4           = dword ptr -4
.text$mn:0000BCB8 arg_0           = dword ptr  8
.text$mn:0000BCB8 arg_4           = dword ptr  0Ch
.text$mn:0000BCB8
.text$mn:0000BCB8                 push    ebp
.text$mn:0000BCB9                 mov     ebp, esp
.text$mn:0000BCBB                 push    0FFFFFFFFh
.text$mn:0000BCBD                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BCC2                 mov     eax, large fs:0
.text$mn:0000BCC8                 push    eax
.text$mn:0000BCC9                 sub     esp, 8
.text$mn:0000BCCC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BCD1                 xor     eax, ebp
.text$mn:0000BCD3                 push    eax
.text$mn:0000BCD4                 lea     eax, [ebp+var_C]
.text$mn:0000BCD7                 mov     large fs:0, eax
.text$mn:0000BCDD                 mov     [ebp+var_14], ecx
.text$mn:0000BCE0                 mov     [ebp+var_10], 0
.text$mn:0000BCE7                 cmp     [ebp+arg_4], 1
.text$mn:0000BCEB                 jnz     short loc_BD11
.text$mn:0000BCED                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000BCF2                 mov     ecx, [ebp+arg_0]
.text$mn:0000BCF5                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000BCFA                 mov     [ebp+var_4], 0
.text$mn:0000BD01                 mov     eax, [ebp+var_10]
.text$mn:0000BD04                 or      eax, 1
.text$mn:0000BD07                 mov     [ebp+var_10], eax
.text$mn:0000BD0A                 mov     eax, [ebp+arg_0]
.text$mn:0000BD0D                 jmp     short loc_BD34
.text$mn:0000BD0F ; ---------------------------------------------------------------------------
.text$mn:0000BD0F                 jmp     short loc_BD34
.text$mn:0000BD11 ; ---------------------------------------------------------------------------
.text$mn:0000BD11
.text$mn:0000BD11 loc_BD11:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000BD11                 mov     ecx, [ebp+arg_4]
.text$mn:0000BD14                 push    ecx
.text$mn:0000BD15                 mov     edx, [ebp+arg_0]
.text$mn:0000BD18                 push    edx
.text$mn:0000BD19                 mov     ecx, [ebp+var_14]
.text$mn:0000BD1C                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000BD21                 mov     [ebp+var_4], 0
.text$mn:0000BD28                 mov     eax, [ebp+var_10]
.text$mn:0000BD2B                 or      eax, 1
.text$mn:0000BD2E                 mov     [ebp+var_10], eax
.text$mn:0000BD31                 mov     eax, [ebp+arg_0]
.text$mn:0000BD34
.text$mn:0000BD34 loc_BD34:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:0000BD34                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:0000BD34                 mov     ecx, [ebp+var_C]
.text$mn:0000BD37                 mov     large fs:0, ecx
.text$mn:0000BD3E                 pop     ecx
.text$mn:0000BD3F                 mov     esp, ebp
.text$mn:0000BD41                 pop     ebp
.text$mn:0000BD42                 retn    8
.text$mn:0000BD42 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000BD42
.text$mn:0000BD42 ; ---------------------------------------------------------------------------
.text$mn:0000BD45                 align 4
.text$mn:0000BD45 _text$mn        ends
.text$mn:0000BD45
.text$x:0000BD48 ; ===========================================================================
.text$x:0000BD48
.text$x:0000BD48 ; Segment type: Pure code
.text$x:0000BD48 ; Segment permissions: Read/Execute
.text$x:0000BD48 _text$x         segment para public 'CODE' use32
.text$x:0000BD48                 assume cs:_text$x
.text$x:0000BD48                 ;org 0BD48h
.text$x:0000BD48 ; COMDAT (pick associative to section at BCB8)
.text$x:0000BD48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BD48
.text$x:0000BD48 ; =============== S U B R O U T I N E =======================================
.text$x:0000BD48
.text$x:0000BD48
.text$x:0000BD48 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000BD48                                         ; DATA XREF: .xdata$x:0000CDE0o
.text$x:0000BD48                 mov     eax, [ebp-10h]
.text$x:0000BD4B                 and     eax, 1
.text$x:0000BD4E                 jz      $LN6_0
.text$x:0000BD54                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000BD58                 mov     ecx, [ebp+8]
.text$x:0000BD5B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000BD60 ; ---------------------------------------------------------------------------
.text$x:0000BD60
.text$x:0000BD60 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000BD60                 retn
.text$x:0000BD60 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000BD60
.text$x:0000BD61
.text$x:0000BD61 ; =============== S U B R O U T I N E =======================================
.text$x:0000BD61
.text$x:0000BD61
.text$x:0000BD61 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000BD61                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000BD61
.text$x:0000BD61 arg_4           = dword ptr  8
.text$x:0000BD61
.text$x:0000BD61                 mov     edx, [esp+arg_4]
.text$x:0000BD65                 lea     eax, [edx+0Ch]
.text$x:0000BD68                 mov     ecx, [edx-0Ch]
.text$x:0000BD6B                 xor     ecx, eax
.text$x:0000BD6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BD72                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000BD77                 jmp     ___CxxFrameHandler3
.text$x:0000BD77 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000BD77
.text$x:0000BD77 _text$x         ends
.text$x:0000BD77
.text$mn:0000BD7C ; ===========================================================================
.text$mn:0000BD7C
.text$mn:0000BD7C ; Segment type: Pure code
.text$mn:0000BD7C ; Segment permissions: Read/Execute
.text$mn:0000BD7C _text$mn        segment para public 'CODE' use32
.text$mn:0000BD7C                 assume cs:_text$mn
.text$mn:0000BD7C                 ;org 0BD7Ch
.text$mn:0000BD7C ; COMDAT (pick any)
.text$mn:0000BD7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD7C
.text$mn:0000BD7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD7C
.text$mn:0000BD7C ; Attributes: bp-based frame
.text$mn:0000BD7C
.text$mn:0000BD7C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:0000BD7C                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BD7C ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000BD7C                                         ; DATA XREF: .rdata:0000E754o
.text$mn:0000BD7C
.text$mn:0000BD7C var_1C          = dword ptr -1Ch
.text$mn:0000BD7C var_18          = dword ptr -18h
.text$mn:0000BD7C Str             = dword ptr -14h
.text$mn:0000BD7C var_10          = dword ptr -10h
.text$mn:0000BD7C var_C           = dword ptr -0Ch
.text$mn:0000BD7C var_4           = dword ptr -4
.text$mn:0000BD7C arg_0           = dword ptr  8
.text$mn:0000BD7C arg_4           = dword ptr  0Ch
.text$mn:0000BD7C
.text$mn:0000BD7C                 push    ebp
.text$mn:0000BD7D                 mov     ebp, esp
.text$mn:0000BD7F                 push    0FFFFFFFFh
.text$mn:0000BD81                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000BD86                 mov     eax, large fs:0
.text$mn:0000BD8C                 push    eax
.text$mn:0000BD8D                 sub     esp, 10h
.text$mn:0000BD90                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BD95                 xor     eax, ebp
.text$mn:0000BD97                 push    eax
.text$mn:0000BD98                 lea     eax, [ebp+var_C]
.text$mn:0000BD9B                 mov     large fs:0, eax
.text$mn:0000BDA1                 mov     [ebp+var_1C], ecx
.text$mn:0000BDA4                 mov     [ebp+var_18], 0
.text$mn:0000BDAB                 mov     eax, [ebp+arg_4]
.text$mn:0000BDAE                 push    eax             ; int
.text$mn:0000BDAF                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000BDB4                 add     esp, 4
.text$mn:0000BDB7                 mov     [ebp+var_10], eax
.text$mn:0000BDBA                 cmp     [ebp+var_10], 0
.text$mn:0000BDBE                 jz      short loc_BDC8
.text$mn:0000BDC0                 mov     ecx, [ebp+var_10]
.text$mn:0000BDC3                 mov     [ebp+Str], ecx
.text$mn:0000BDC6                 jmp     short loc_BDCF
.text$mn:0000BDC8 ; ---------------------------------------------------------------------------
.text$mn:0000BDC8
.text$mn:0000BDC8 loc_BDC8:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000BDC8                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000BDCF
.text$mn:0000BDCF loc_BDCF:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000BDCF                 mov     edx, [ebp+Str]
.text$mn:0000BDD2                 push    edx             ; Str
.text$mn:0000BDD3                 mov     ecx, [ebp+arg_0]
.text$mn:0000BDD6                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000BDDB                 mov     [ebp+var_4], 0
.text$mn:0000BDE2                 mov     eax, [ebp+var_18]
.text$mn:0000BDE5                 or      eax, 1
.text$mn:0000BDE8                 mov     [ebp+var_18], eax
.text$mn:0000BDEB                 mov     eax, [ebp+arg_0]
.text$mn:0000BDEE                 mov     ecx, [ebp+var_C]
.text$mn:0000BDF1                 mov     large fs:0, ecx
.text$mn:0000BDF8                 pop     ecx
.text$mn:0000BDF9                 mov     esp, ebp
.text$mn:0000BDFB                 pop     ebp
.text$mn:0000BDFC                 retn    8
.text$mn:0000BDFC ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000BDFC
.text$mn:0000BDFC ; ---------------------------------------------------------------------------
.text$mn:0000BDFF                 align 10h
.text$mn:0000BDFF _text$mn        ends
.text$mn:0000BDFF
.text$x:0000BE00 ; ===========================================================================
.text$x:0000BE00
.text$x:0000BE00 ; Segment type: Pure code
.text$x:0000BE00 ; Segment permissions: Read/Execute
.text$x:0000BE00 _text$x         segment para public 'CODE' use32
.text$x:0000BE00                 assume cs:_text$x
.text$x:0000BE00                 ;org 0BE00h
.text$x:0000BE00 ; COMDAT (pick associative to section at BD7C)
.text$x:0000BE00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BE00
.text$x:0000BE00 ; =============== S U B R O U T I N E =======================================
.text$x:0000BE00
.text$x:0000BE00
.text$x:0000BE00 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000BE00                                         ; DATA XREF: .xdata$x:0000CE64o
.text$x:0000BE00                 mov     eax, [ebp-18h]
.text$x:0000BE03                 and     eax, 1
.text$x:0000BE06                 jz      $LN6_1
.text$x:0000BE0C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000BE10                 mov     ecx, [ebp+8]
.text$x:0000BE13                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000BE18 ; ---------------------------------------------------------------------------
.text$x:0000BE18
.text$x:0000BE18 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000BE18                 retn
.text$x:0000BE18 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000BE18
.text$x:0000BE19
.text$x:0000BE19 ; =============== S U B R O U T I N E =======================================
.text$x:0000BE19
.text$x:0000BE19
.text$x:0000BE19 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000BE19                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000BE19
.text$x:0000BE19 arg_4           = dword ptr  8
.text$x:0000BE19
.text$x:0000BE19                 mov     edx, [esp+arg_4]
.text$x:0000BE1D                 lea     eax, [edx+0Ch]
.text$x:0000BE20                 mov     ecx, [edx-14h]
.text$x:0000BE23                 xor     ecx, eax
.text$x:0000BE25                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BE2A                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000BE2F                 jmp     ___CxxFrameHandler3
.text$x:0000BE2F __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000BE2F
.text$x:0000BE2F _text$x         ends
.text$x:0000BE2F
.text$mn:0000BE34 ; ===========================================================================
.text$mn:0000BE34
.text$mn:0000BE34 ; Segment type: Pure code
.text$mn:0000BE34 ; Segment permissions: Read/Execute
.text$mn:0000BE34 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE34                 assume cs:_text$mn
.text$mn:0000BE34                 ;org 0BE34h
.text$mn:0000BE34 ; COMDAT (pick any)
.text$mn:0000BE34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE34
.text$mn:0000BE34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE34
.text$mn:0000BE34 ; Attributes: bp-based frame
.text$mn:0000BE34
.text$mn:0000BE34 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:0000BE34                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000BE34 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:0000BE34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:0000BE34
.text$mn:0000BE34 var_4           = dword ptr -4
.text$mn:0000BE34 Dst             = dword ptr  8
.text$mn:0000BE34 Src             = dword ptr  0Ch
.text$mn:0000BE34 Size            = dword ptr  10h
.text$mn:0000BE34
.text$mn:0000BE34                 push    ebp
.text$mn:0000BE35                 mov     ebp, esp
.text$mn:0000BE37                 push    ecx
.text$mn:0000BE38                 cmp     [ebp+Size], 0
.text$mn:0000BE3C                 jnz     short loc_BE46
.text$mn:0000BE3E                 mov     eax, [ebp+Dst]
.text$mn:0000BE41                 mov     [ebp+var_4], eax
.text$mn:0000BE44                 jmp     short loc_BE5D
.text$mn:0000BE46 ; ---------------------------------------------------------------------------
.text$mn:0000BE46
.text$mn:0000BE46 loc_BE46:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000BE46                 mov     ecx, [ebp+Size]
.text$mn:0000BE49                 push    ecx             ; Size
.text$mn:0000BE4A                 mov     edx, [ebp+Src]
.text$mn:0000BE4D                 push    edx             ; Src
.text$mn:0000BE4E                 mov     eax, [ebp+Dst]
.text$mn:0000BE51                 push    eax             ; Dst
.text$mn:0000BE52                 call    _memmove
.text$mn:0000BE57                 add     esp, 0Ch
.text$mn:0000BE5A                 mov     [ebp+var_4], eax
.text$mn:0000BE5D
.text$mn:0000BE5D loc_BE5D:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:0000BE5D                 mov     eax, [ebp+var_4]
.text$mn:0000BE60                 mov     esp, ebp
.text$mn:0000BE62                 pop     ebp
.text$mn:0000BE63                 retn
.text$mn:0000BE63 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000BE63
.text$mn:0000BE63 _text$mn        ends
.text$mn:0000BE63
.text$mn:0000BE64 ; ===========================================================================
.text$mn:0000BE64
.text$mn:0000BE64 ; Segment type: Pure code
.text$mn:0000BE64 ; Segment permissions: Read/Execute
.text$mn:0000BE64 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE64                 assume cs:_text$mn
.text$mn:0000BE64                 ;org 0BE64h
.text$mn:0000BE64 ; COMDAT (pick any)
.text$mn:0000BE64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE64
.text$mn:0000BE64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE64
.text$mn:0000BE64 ; Attributes: bp-based frame
.text$mn:0000BE64
.text$mn:0000BE64 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000BE64                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000BE64 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000BE64                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000BE64                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:0000BE64
.text$mn:0000BE64 var_4           = dword ptr -4
.text$mn:0000BE64 Dst             = dword ptr  8
.text$mn:0000BE64 Src             = dword ptr  0Ch
.text$mn:0000BE64 arg_8           = dword ptr  10h
.text$mn:0000BE64
.text$mn:0000BE64                 push    ebp
.text$mn:0000BE65                 mov     ebp, esp
.text$mn:0000BE67                 push    ecx
.text$mn:0000BE68                 cmp     [ebp+arg_8], 0
.text$mn:0000BE6C                 jnz     short loc_BE76
.text$mn:0000BE6E                 mov     eax, [ebp+Dst]
.text$mn:0000BE71                 mov     [ebp+var_4], eax
.text$mn:0000BE74                 jmp     short loc_BE8D
.text$mn:0000BE76 ; ---------------------------------------------------------------------------
.text$mn:0000BE76
.text$mn:0000BE76 loc_BE76:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000BE76                 mov     ecx, [ebp+arg_8]
.text$mn:0000BE79                 push    ecx             ; int
.text$mn:0000BE7A                 mov     edx, [ebp+Src]
.text$mn:0000BE7D                 push    edx             ; Src
.text$mn:0000BE7E                 mov     eax, [ebp+Dst]
.text$mn:0000BE81                 push    eax             ; Dst
.text$mn:0000BE82                 call    _wmemmove
.text$mn:0000BE87                 add     esp, 0Ch
.text$mn:0000BE8A                 mov     [ebp+var_4], eax
.text$mn:0000BE8D
.text$mn:0000BE8D loc_BE8D:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000BE8D                 mov     eax, [ebp+var_4]
.text$mn:0000BE90                 mov     esp, ebp
.text$mn:0000BE92                 pop     ebp
.text$mn:0000BE93                 retn
.text$mn:0000BE93 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000BE93
.text$mn:0000BE93 _text$mn        ends
.text$mn:0000BE93
.text$mn:0000BE94 ; ===========================================================================
.text$mn:0000BE94
.text$mn:0000BE94 ; Segment type: Pure code
.text$mn:0000BE94 ; Segment permissions: Read/Execute
.text$mn:0000BE94 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE94                 assume cs:_text$mn
.text$mn:0000BE94                 ;org 0BE94h
.text$mn:0000BE94 ; COMDAT (pick any)
.text$mn:0000BE94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE94
.text$mn:0000BE94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE94
.text$mn:0000BE94 ; Attributes: bp-based frame
.text$mn:0000BE94
.text$mn:0000BE94 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000BE94                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000BE94 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000BE94                                         ; DATA XREF: .rdata:0000E6DCo
.text$mn:0000BE94
.text$mn:0000BE94 var_4           = dword ptr -4
.text$mn:0000BE94
.text$mn:0000BE94                 push    ebp
.text$mn:0000BE95                 mov     ebp, esp
.text$mn:0000BE97                 push    ecx
.text$mn:0000BE98                 mov     [ebp+var_4], ecx
.text$mn:0000BE9B                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000BEA0                 mov     esp, ebp
.text$mn:0000BEA2                 pop     ebp
.text$mn:0000BEA3                 retn
.text$mn:0000BEA3 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000BEA3
.text$mn:0000BEA3 _text$mn        ends
.text$mn:0000BEA3
.text$mn:0000BEA4 ; ===========================================================================
.text$mn:0000BEA4
.text$mn:0000BEA4 ; Segment type: Pure code
.text$mn:0000BEA4 ; Segment permissions: Read/Execute
.text$mn:0000BEA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEA4                 assume cs:_text$mn
.text$mn:0000BEA4                 ;org 0BEA4h
.text$mn:0000BEA4 ; COMDAT (pick any)
.text$mn:0000BEA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEA4
.text$mn:0000BEA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEA4
.text$mn:0000BEA4 ; Attributes: bp-based frame
.text$mn:0000BEA4
.text$mn:0000BEA4 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000BEA4                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000BEA4 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000BEA4                                         ; DATA XREF: .rdata:0000E710o
.text$mn:0000BEA4
.text$mn:0000BEA4 var_4           = dword ptr -4
.text$mn:0000BEA4
.text$mn:0000BEA4                 push    ebp
.text$mn:0000BEA5                 mov     ebp, esp
.text$mn:0000BEA7                 push    ecx
.text$mn:0000BEA8                 mov     [ebp+var_4], ecx
.text$mn:0000BEAB                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000BEB0                 mov     esp, ebp
.text$mn:0000BEB2                 pop     ebp
.text$mn:0000BEB3                 retn
.text$mn:0000BEB3 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000BEB3
.text$mn:0000BEB3 _text$mn        ends
.text$mn:0000BEB3
.text$mn:0000BEB4 ; ===========================================================================
.text$mn:0000BEB4
.text$mn:0000BEB4 ; Segment type: Pure code
.text$mn:0000BEB4 ; Segment permissions: Read/Execute
.text$mn:0000BEB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEB4                 assume cs:_text$mn
.text$mn:0000BEB4                 ;org 0BEB4h
.text$mn:0000BEB4 ; COMDAT (pick any)
.text$mn:0000BEB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEB4
.text$mn:0000BEB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEB4
.text$mn:0000BEB4 ; Attributes: bp-based frame
.text$mn:0000BEB4
.text$mn:0000BEB4 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000BEB4                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000BEB4 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000BEB4                                         ; DATA XREF: .rdata:0000E750o
.text$mn:0000BEB4
.text$mn:0000BEB4 var_4           = dword ptr -4
.text$mn:0000BEB4
.text$mn:0000BEB4                 push    ebp
.text$mn:0000BEB5                 mov     ebp, esp
.text$mn:0000BEB7                 push    ecx
.text$mn:0000BEB8                 mov     [ebp+var_4], ecx
.text$mn:0000BEBB                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000BEC0                 mov     esp, ebp
.text$mn:0000BEC2                 pop     ebp
.text$mn:0000BEC3                 retn
.text$mn:0000BEC3 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000BEC3
.text$mn:0000BEC3 _text$mn        ends
.text$mn:0000BEC3
.text$mn:0000BEC4 ; ===========================================================================
.text$mn:0000BEC4
.text$mn:0000BEC4 ; Segment type: Pure code
.text$mn:0000BEC4 ; Segment permissions: Read/Execute
.text$mn:0000BEC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEC4                 assume cs:_text$mn
.text$mn:0000BEC4                 ;org 0BEC4h
.text$mn:0000BEC4 ; COMDAT (pick any)
.text$mn:0000BEC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEC4
.text$mn:0000BEC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEC4
.text$mn:0000BEC4 ; Attributes: bp-based frame
.text$mn:0000BEC4
.text$mn:0000BEC4 ; public: void __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::push_back(struct TreeParams const &)
.text$mn:0000BEC4                 public ?push_back@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEXABUTreeParams@@@Z
.text$mn:0000BEC4 ?push_back@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEXABUTreeParams@@@Z proc near
.text$mn:0000BEC4                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+161p
.text$mn:0000BEC4
.text$mn:0000BEC4 var_C           = dword ptr -0Ch
.text$mn:0000BEC4 var_8           = dword ptr -8
.text$mn:0000BEC4 var_2           = byte ptr -2
.text$mn:0000BEC4 var_1           = byte ptr -1
.text$mn:0000BEC4 arg_0           = dword ptr  8
.text$mn:0000BEC4
.text$mn:0000BEC4                 push    ebp
.text$mn:0000BEC5                 mov     ebp, esp
.text$mn:0000BEC7                 sub     esp, 0Ch
.text$mn:0000BECA                 mov     [ebp+var_8], ecx
.text$mn:0000BECD                 mov     eax, [ebp+arg_0]
.text$mn:0000BED0                 push    eax
.text$mn:0000BED1                 call    ??$addressof@$$CBUTreeParams@@@std@@YAPBUTreeParams@@ABU1@@Z ; std::addressof<TreeParams const>(TreeParams const &)
.text$mn:0000BED6                 add     esp, 4
.text$mn:0000BED9                 push    eax
.text$mn:0000BEDA                 mov     ecx, [ebp+var_8]
.text$mn:0000BEDD                 call    ?_Inside@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBE_NPBUTreeParams@@@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Inside(TreeParams const *)
.text$mn:0000BEE2                 movzx   ecx, al
.text$mn:0000BEE5                 test    ecx, ecx
.text$mn:0000BEE7                 jz      loc_BF6E
.text$mn:0000BEED                 mov     edx, [ebp+arg_0]
.text$mn:0000BEF0                 push    edx
.text$mn:0000BEF1                 call    ??$addressof@$$CBUTreeParams@@@std@@YAPBUTreeParams@@ABU1@@Z ; std::addressof<TreeParams const>(TreeParams const &)
.text$mn:0000BEF6                 add     esp, 4
.text$mn:0000BEF9                 mov     ecx, [ebp+var_8]
.text$mn:0000BEFC                 sub     eax, [ecx+4]
.text$mn:0000BEFF                 cdq
.text$mn:0000BF00                 mov     ecx, 6Ch ; 'l'
.text$mn:0000BF05                 idiv    ecx
.text$mn:0000BF07                 mov     [ebp+var_C], eax
.text$mn:0000BF0A                 mov     edx, [ebp+var_8]
.text$mn:0000BF0D                 mov     eax, [ebp+var_8]
.text$mn:0000BF10                 mov     ecx, [edx+8]
.text$mn:0000BF13                 cmp     ecx, [eax+0Ch]
.text$mn:0000BF16                 jnz     short loc_BF22
.text$mn:0000BF18                 push    1
.text$mn:0000BF1A                 mov     ecx, [ebp+var_8]
.text$mn:0000BF1D                 call    ?_Reserve@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)
.text$mn:0000BF22
.text$mn:0000BF22 loc_BF22:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+52j
.text$mn:0000BF22                 mov     edx, [ebp+var_8]
.text$mn:0000BF25                 mov     eax, [edx+8]
.text$mn:0000BF28                 push    eax
.text$mn:0000BF29                 mov     ecx, [ebp+var_8]
.text$mn:0000BF2C                 mov     edx, [ecx+8]
.text$mn:0000BF2F                 push    edx
.text$mn:0000BF30                 mov     ecx, [ebp+var_8]
.text$mn:0000BF33                 call    ?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)
.text$mn:0000BF38                 imul    eax, [ebp+var_C], 6Ch
.text$mn:0000BF3C                 mov     ecx, [ebp+var_8]
.text$mn:0000BF3F                 add     eax, [ecx+4]
.text$mn:0000BF42                 push    eax
.text$mn:0000BF43                 mov     edx, [ebp+var_8]
.text$mn:0000BF46                 mov     eax, [edx+8]
.text$mn:0000BF49                 push    eax
.text$mn:0000BF4A                 lea     ecx, [ebp+var_1]
.text$mn:0000BF4D                 push    ecx
.text$mn:0000BF4E                 mov     ecx, [ebp+var_8]
.text$mn:0000BF51                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:0000BF56                 mov     ecx, eax
.text$mn:0000BF58                 call    ??$construct@UTreeParams@@AAU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams &>(TreeParams *,TreeParams &)
.text$mn:0000BF5D                 mov     edx, [ebp+var_8]
.text$mn:0000BF60                 mov     eax, [edx+8]
.text$mn:0000BF63                 add     eax, 6Ch ; 'l'
.text$mn:0000BF66                 mov     ecx, [ebp+var_8]
.text$mn:0000BF69                 mov     [ecx+8], eax
.text$mn:0000BF6C                 jmp     short loc_BFC9
.text$mn:0000BF6E ; ---------------------------------------------------------------------------
.text$mn:0000BF6E
.text$mn:0000BF6E loc_BF6E:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+23j
.text$mn:0000BF6E                 mov     edx, [ebp+var_8]
.text$mn:0000BF71                 mov     eax, [ebp+var_8]
.text$mn:0000BF74                 mov     ecx, [edx+8]
.text$mn:0000BF77                 cmp     ecx, [eax+0Ch]
.text$mn:0000BF7A                 jnz     short loc_BF86
.text$mn:0000BF7C                 push    1
.text$mn:0000BF7E                 mov     ecx, [ebp+var_8]
.text$mn:0000BF81                 call    ?_Reserve@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Reserve(uint)
.text$mn:0000BF86
.text$mn:0000BF86 loc_BF86:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+B6j
.text$mn:0000BF86                 mov     edx, [ebp+var_8]
.text$mn:0000BF89                 mov     eax, [edx+8]
.text$mn:0000BF8C                 push    eax
.text$mn:0000BF8D                 mov     ecx, [ebp+var_8]
.text$mn:0000BF90                 mov     edx, [ecx+8]
.text$mn:0000BF93                 push    edx
.text$mn:0000BF94                 mov     ecx, [ebp+var_8]
.text$mn:0000BF97                 call    ?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z ; std::vector<TreeParams,std::allocator<TreeParams>>::_Orphan_range(TreeParams *,TreeParams *)
.text$mn:0000BF9C                 mov     eax, [ebp+arg_0]
.text$mn:0000BF9F                 push    eax
.text$mn:0000BFA0                 mov     ecx, [ebp+var_8]
.text$mn:0000BFA3                 mov     edx, [ecx+8]
.text$mn:0000BFA6                 push    edx
.text$mn:0000BFA7                 lea     eax, [ebp+var_2]
.text$mn:0000BFAA                 push    eax
.text$mn:0000BFAB                 mov     ecx, [ebp+var_8]
.text$mn:0000BFAE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TreeParams,std::allocator<TreeParams>>>::_Getal(void)
.text$mn:0000BFB3                 mov     ecx, eax
.text$mn:0000BFB5                 call    ??$construct@UTreeParams@@ABU1@@?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@std@@QAEXPAUTreeParams@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<TreeParams>>::construct<TreeParams,TreeParams const &>(TreeParams *,TreeParams const &)
.text$mn:0000BFBA                 mov     ecx, [ebp+var_8]
.text$mn:0000BFBD                 mov     edx, [ecx+8]
.text$mn:0000BFC0                 add     edx, 6Ch ; 'l'
.text$mn:0000BFC3                 mov     eax, [ebp+var_8]
.text$mn:0000BFC6                 mov     [eax+8], edx
.text$mn:0000BFC9
.text$mn:0000BFC9 loc_BFC9:                               ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::push_back(TreeParams const &)+A8j
.text$mn:0000BFC9                 mov     esp, ebp
.text$mn:0000BFCB                 pop     ebp
.text$mn:0000BFCC                 retn    4
.text$mn:0000BFCC ?push_back@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QAEXABUTreeParams@@@Z endp
.text$mn:0000BFCC
.text$mn:0000BFCC ; ---------------------------------------------------------------------------
.text$mn:0000BFCF                 align 10h
.text$mn:0000BFCF _text$mn        ends
.text$mn:0000BFCF
.text$mn:0000BFD0 ; ===========================================================================
.text$mn:0000BFD0
.text$mn:0000BFD0 ; Segment type: Pure code
.text$mn:0000BFD0 ; Segment permissions: Read/Execute
.text$mn:0000BFD0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BFD0                 assume cs:_text$mn
.text$mn:0000BFD0                 ;org 0BFD0h
.text$mn:0000BFD0 ; COMDAT (pick any)
.text$mn:0000BFD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BFD0
.text$mn:0000BFD0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BFD0
.text$mn:0000BFD0 ; Attributes: bp-based frame
.text$mn:0000BFD0
.text$mn:0000BFD0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000BFD0                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000BFD0 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000BFD0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000BFD0
.text$mn:0000BFD0 var_10          = dword ptr -10h
.text$mn:0000BFD0 var_C           = dword ptr -0Ch
.text$mn:0000BFD0 var_8           = dword ptr -8
.text$mn:0000BFD0 var_4           = dword ptr -4
.text$mn:0000BFD0 arg_0           = dword ptr  8
.text$mn:0000BFD0 arg_4           = dword ptr  0Ch
.text$mn:0000BFD0 arg_8           = dword ptr  10h
.text$mn:0000BFD0 arg_C           = dword ptr  14h
.text$mn:0000BFD0 arg_10          = dword ptr  18h
.text$mn:0000BFD0
.text$mn:0000BFD0                 push    ebp
.text$mn:0000BFD1                 mov     ebp, esp
.text$mn:0000BFD3                 sub     esp, 10h
.text$mn:0000BFD6                 mov     [ebp+var_4], ecx
.text$mn:0000BFD9                 mov     eax, [ebp+var_4]
.text$mn:0000BFDC                 mov     ecx, [eax+14h]
.text$mn:0000BFDF                 cmp     ecx, [ebp+arg_0]
.text$mn:0000BFE2                 jb      short loc_BFF1
.text$mn:0000BFE4                 mov     ecx, [ebp+arg_8]
.text$mn:0000BFE7                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000BFEC                 cmp     eax, [ebp+arg_C]
.text$mn:0000BFEF                 jnb     short loc_BFF9
.text$mn:0000BFF1
.text$mn:0000BFF1 loc_BFF1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:0000BFF1                 mov     ecx, [ebp+var_4]
.text$mn:0000BFF4                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000BFF9
.text$mn:0000BFF9 loc_BFF9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:0000BFF9                 mov     edx, [ebp+var_4]
.text$mn:0000BFFC                 mov     eax, [edx+14h]
.text$mn:0000BFFF                 sub     eax, [ebp+arg_0]
.text$mn:0000C002                 cmp     eax, [ebp+arg_4]
.text$mn:0000C005                 jnb     short loc_C013
.text$mn:0000C007                 mov     ecx, [ebp+var_4]
.text$mn:0000C00A                 mov     edx, [ecx+14h]
.text$mn:0000C00D                 sub     edx, [ebp+arg_0]
.text$mn:0000C010                 mov     [ebp+arg_4], edx
.text$mn:0000C013
.text$mn:0000C013 loc_C013:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:0000C013                 mov     ecx, [ebp+arg_8]
.text$mn:0000C016                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000C01B                 sub     eax, [ebp+arg_C]
.text$mn:0000C01E                 mov     [ebp+var_10], eax
.text$mn:0000C021                 mov     eax, [ebp+var_10]
.text$mn:0000C024                 cmp     eax, [ebp+arg_10]
.text$mn:0000C027                 jnb     short loc_C02F
.text$mn:0000C029                 mov     ecx, [ebp+var_10]
.text$mn:0000C02C                 mov     [ebp+arg_10], ecx
.text$mn:0000C02F
.text$mn:0000C02F loc_C02F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:0000C02F                 or      edx, 0FFFFFFFFh
.text$mn:0000C032                 sub     edx, [ebp+arg_10]
.text$mn:0000C035                 mov     eax, [ebp+var_4]
.text$mn:0000C038                 mov     ecx, [eax+14h]
.text$mn:0000C03B                 sub     ecx, [ebp+arg_4]
.text$mn:0000C03E                 cmp     edx, ecx
.text$mn:0000C040                 ja      short loc_C04A
.text$mn:0000C042                 mov     ecx, [ebp+var_4]
.text$mn:0000C045                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C04A
.text$mn:0000C04A loc_C04A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+70j
.text$mn:0000C04A                 mov     edx, [ebp+var_4]
.text$mn:0000C04D                 mov     eax, [edx+14h]
.text$mn:0000C050                 sub     eax, [ebp+arg_4]
.text$mn:0000C053                 sub     eax, [ebp+arg_0]
.text$mn:0000C056                 mov     [ebp+var_8], eax
.text$mn:0000C059                 mov     ecx, [ebp+var_4]
.text$mn:0000C05C                 mov     edx, [ecx+14h]
.text$mn:0000C05F                 add     edx, [ebp+arg_10]
.text$mn:0000C062                 sub     edx, [ebp+arg_4]
.text$mn:0000C065                 mov     [ebp+var_C], edx
.text$mn:0000C068                 mov     eax, [ebp+var_4]
.text$mn:0000C06B                 mov     ecx, [eax+14h]
.text$mn:0000C06E                 cmp     ecx, [ebp+var_C]
.text$mn:0000C071                 jnb     short loc_C081
.text$mn:0000C073                 push    0
.text$mn:0000C075                 mov     edx, [ebp+var_C]
.text$mn:0000C078                 push    edx
.text$mn:0000C079                 mov     ecx, [ebp+var_4]
.text$mn:0000C07C                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C081
.text$mn:0000C081 loc_C081:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A1j
.text$mn:0000C081                 mov     eax, [ebp+var_4]
.text$mn:0000C084                 cmp     eax, [ebp+arg_8]
.text$mn:0000C087                 jz      short loc_C0EE
.text$mn:0000C089                 mov     ecx, [ebp+var_8]
.text$mn:0000C08C                 push    ecx             ; int
.text$mn:0000C08D                 mov     ecx, [ebp+var_4]
.text$mn:0000C090                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C095                 mov     edx, [ebp+arg_0]
.text$mn:0000C098                 lea     eax, [eax+edx*2]
.text$mn:0000C09B                 mov     ecx, [ebp+arg_4]
.text$mn:0000C09E                 lea     edx, [eax+ecx*2]
.text$mn:0000C0A1                 push    edx             ; Src
.text$mn:0000C0A2                 mov     ecx, [ebp+var_4]
.text$mn:0000C0A5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C0AA                 mov     ecx, [ebp+arg_0]
.text$mn:0000C0AD                 lea     edx, [eax+ecx*2]
.text$mn:0000C0B0                 mov     eax, [ebp+arg_10]
.text$mn:0000C0B3                 lea     ecx, [edx+eax*2]
.text$mn:0000C0B6                 push    ecx             ; Dst
.text$mn:0000C0B7                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C0BC                 add     esp, 0Ch
.text$mn:0000C0BF                 mov     edx, [ebp+arg_10]
.text$mn:0000C0C2                 push    edx             ; int
.text$mn:0000C0C3                 mov     ecx, [ebp+arg_8]
.text$mn:0000C0C6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C0CB                 mov     ecx, [ebp+arg_C]
.text$mn:0000C0CE                 lea     edx, [eax+ecx*2]
.text$mn:0000C0D1                 push    edx             ; Src
.text$mn:0000C0D2                 mov     ecx, [ebp+var_4]
.text$mn:0000C0D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C0DA                 mov     ecx, [ebp+arg_0]
.text$mn:0000C0DD                 lea     edx, [eax+ecx*2]
.text$mn:0000C0E0                 push    edx             ; Dst
.text$mn:0000C0E1                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C0E6                 add     esp, 0Ch
.text$mn:0000C0E9                 jmp     loc_C2D7
.text$mn:0000C0EE ; ---------------------------------------------------------------------------
.text$mn:0000C0EE
.text$mn:0000C0EE loc_C0EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+B7j
.text$mn:0000C0EE                 mov     eax, [ebp+arg_10]
.text$mn:0000C0F1                 cmp     eax, [ebp+arg_4]
.text$mn:0000C0F4                 ja      short loc_C15B
.text$mn:0000C0F6                 mov     ecx, [ebp+arg_10]
.text$mn:0000C0F9                 push    ecx             ; int
.text$mn:0000C0FA                 mov     ecx, [ebp+var_4]
.text$mn:0000C0FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C102                 mov     edx, [ebp+arg_C]
.text$mn:0000C105                 lea     eax, [eax+edx*2]
.text$mn:0000C108                 push    eax             ; Src
.text$mn:0000C109                 mov     ecx, [ebp+var_4]
.text$mn:0000C10C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C111                 mov     ecx, [ebp+arg_0]
.text$mn:0000C114                 lea     edx, [eax+ecx*2]
.text$mn:0000C117                 push    edx             ; Dst
.text$mn:0000C118                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C11D                 add     esp, 0Ch
.text$mn:0000C120                 mov     eax, [ebp+var_8]
.text$mn:0000C123                 push    eax             ; int
.text$mn:0000C124                 mov     ecx, [ebp+var_4]
.text$mn:0000C127                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C12C                 mov     ecx, [ebp+arg_0]
.text$mn:0000C12F                 lea     edx, [eax+ecx*2]
.text$mn:0000C132                 mov     eax, [ebp+arg_4]
.text$mn:0000C135                 lea     ecx, [edx+eax*2]
.text$mn:0000C138                 push    ecx             ; Src
.text$mn:0000C139                 mov     ecx, [ebp+var_4]
.text$mn:0000C13C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C141                 mov     edx, [ebp+arg_0]
.text$mn:0000C144                 lea     eax, [eax+edx*2]
.text$mn:0000C147                 mov     ecx, [ebp+arg_10]
.text$mn:0000C14A                 lea     edx, [eax+ecx*2]
.text$mn:0000C14D                 push    edx             ; Dst
.text$mn:0000C14E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C153                 add     esp, 0Ch
.text$mn:0000C156                 jmp     loc_C2D7
.text$mn:0000C15B ; ---------------------------------------------------------------------------
.text$mn:0000C15B
.text$mn:0000C15B loc_C15B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+124j
.text$mn:0000C15B                 mov     eax, [ebp+arg_C]
.text$mn:0000C15E                 cmp     eax, [ebp+arg_0]
.text$mn:0000C161                 ja      short loc_C1C8
.text$mn:0000C163                 mov     ecx, [ebp+var_8]
.text$mn:0000C166                 push    ecx             ; int
.text$mn:0000C167                 mov     ecx, [ebp+var_4]
.text$mn:0000C16A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C16F                 mov     edx, [ebp+arg_0]
.text$mn:0000C172                 lea     eax, [eax+edx*2]
.text$mn:0000C175                 mov     ecx, [ebp+arg_4]
.text$mn:0000C178                 lea     edx, [eax+ecx*2]
.text$mn:0000C17B                 push    edx             ; Src
.text$mn:0000C17C                 mov     ecx, [ebp+var_4]
.text$mn:0000C17F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C184                 mov     ecx, [ebp+arg_0]
.text$mn:0000C187                 lea     edx, [eax+ecx*2]
.text$mn:0000C18A                 mov     eax, [ebp+arg_10]
.text$mn:0000C18D                 lea     ecx, [edx+eax*2]
.text$mn:0000C190                 push    ecx             ; Dst
.text$mn:0000C191                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C196                 add     esp, 0Ch
.text$mn:0000C199                 mov     edx, [ebp+arg_10]
.text$mn:0000C19C                 push    edx             ; int
.text$mn:0000C19D                 mov     ecx, [ebp+var_4]
.text$mn:0000C1A0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C1A5                 mov     ecx, [ebp+arg_C]
.text$mn:0000C1A8                 lea     edx, [eax+ecx*2]
.text$mn:0000C1AB                 push    edx             ; Src
.text$mn:0000C1AC                 mov     ecx, [ebp+var_4]
.text$mn:0000C1AF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C1B4                 mov     ecx, [ebp+arg_0]
.text$mn:0000C1B7                 lea     edx, [eax+ecx*2]
.text$mn:0000C1BA                 push    edx             ; Dst
.text$mn:0000C1BB                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C1C0                 add     esp, 0Ch
.text$mn:0000C1C3                 jmp     loc_C2D7
.text$mn:0000C1C8 ; ---------------------------------------------------------------------------
.text$mn:0000C1C8
.text$mn:0000C1C8 loc_C1C8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+191j
.text$mn:0000C1C8                 mov     eax, [ebp+arg_0]
.text$mn:0000C1CB                 add     eax, [ebp+arg_4]
.text$mn:0000C1CE                 cmp     eax, [ebp+arg_C]
.text$mn:0000C1D1                 ja      short loc_C23E
.text$mn:0000C1D3                 mov     ecx, [ebp+var_8]
.text$mn:0000C1D6                 push    ecx             ; int
.text$mn:0000C1D7                 mov     ecx, [ebp+var_4]
.text$mn:0000C1DA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C1DF                 mov     edx, [ebp+arg_0]
.text$mn:0000C1E2                 lea     eax, [eax+edx*2]
.text$mn:0000C1E5                 mov     ecx, [ebp+arg_4]
.text$mn:0000C1E8                 lea     edx, [eax+ecx*2]
.text$mn:0000C1EB                 push    edx             ; Src
.text$mn:0000C1EC                 mov     ecx, [ebp+var_4]
.text$mn:0000C1EF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C1F4                 mov     ecx, [ebp+arg_0]
.text$mn:0000C1F7                 lea     edx, [eax+ecx*2]
.text$mn:0000C1FA                 mov     eax, [ebp+arg_10]
.text$mn:0000C1FD                 lea     ecx, [edx+eax*2]
.text$mn:0000C200                 push    ecx             ; Dst
.text$mn:0000C201                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C206                 add     esp, 0Ch
.text$mn:0000C209                 mov     edx, [ebp+arg_10]
.text$mn:0000C20C                 push    edx             ; int
.text$mn:0000C20D                 mov     ecx, [ebp+var_4]
.text$mn:0000C210                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C215                 mov     ecx, [ebp+arg_C]
.text$mn:0000C218                 add     ecx, [ebp+arg_10]
.text$mn:0000C21B                 sub     ecx, [ebp+arg_4]
.text$mn:0000C21E                 lea     edx, [eax+ecx*2]
.text$mn:0000C221                 push    edx             ; Src
.text$mn:0000C222                 mov     ecx, [ebp+var_4]
.text$mn:0000C225                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C22A                 mov     ecx, [ebp+arg_0]
.text$mn:0000C22D                 lea     edx, [eax+ecx*2]
.text$mn:0000C230                 push    edx             ; Dst
.text$mn:0000C231                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C236                 add     esp, 0Ch
.text$mn:0000C239                 jmp     loc_C2D7
.text$mn:0000C23E ; ---------------------------------------------------------------------------
.text$mn:0000C23E
.text$mn:0000C23E loc_C23E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+201j
.text$mn:0000C23E                 mov     eax, [ebp+arg_4]
.text$mn:0000C241                 push    eax             ; int
.text$mn:0000C242                 mov     ecx, [ebp+var_4]
.text$mn:0000C245                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C24A                 mov     ecx, [ebp+arg_C]
.text$mn:0000C24D                 lea     edx, [eax+ecx*2]
.text$mn:0000C250                 push    edx             ; Src
.text$mn:0000C251                 mov     ecx, [ebp+var_4]
.text$mn:0000C254                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C259                 mov     ecx, [ebp+arg_0]
.text$mn:0000C25C                 lea     edx, [eax+ecx*2]
.text$mn:0000C25F                 push    edx             ; Dst
.text$mn:0000C260                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C265                 add     esp, 0Ch
.text$mn:0000C268                 mov     eax, [ebp+var_8]
.text$mn:0000C26B                 push    eax             ; int
.text$mn:0000C26C                 mov     ecx, [ebp+var_4]
.text$mn:0000C26F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C274                 mov     ecx, [ebp+arg_0]
.text$mn:0000C277                 lea     edx, [eax+ecx*2]
.text$mn:0000C27A                 mov     eax, [ebp+arg_4]
.text$mn:0000C27D                 lea     ecx, [edx+eax*2]
.text$mn:0000C280                 push    ecx             ; Src
.text$mn:0000C281                 mov     ecx, [ebp+var_4]
.text$mn:0000C284                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C289                 mov     edx, [ebp+arg_0]
.text$mn:0000C28C                 lea     eax, [eax+edx*2]
.text$mn:0000C28F                 mov     ecx, [ebp+arg_10]
.text$mn:0000C292                 lea     edx, [eax+ecx*2]
.text$mn:0000C295                 push    edx             ; Dst
.text$mn:0000C296                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C29B                 add     esp, 0Ch
.text$mn:0000C29E                 mov     eax, [ebp+arg_10]
.text$mn:0000C2A1                 sub     eax, [ebp+arg_4]
.text$mn:0000C2A4                 push    eax             ; int
.text$mn:0000C2A5                 mov     ecx, [ebp+var_4]
.text$mn:0000C2A8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C2AD                 mov     ecx, [ebp+arg_C]
.text$mn:0000C2B0                 lea     edx, [eax+ecx*2]
.text$mn:0000C2B3                 mov     eax, [ebp+arg_10]
.text$mn:0000C2B6                 lea     ecx, [edx+eax*2]
.text$mn:0000C2B9                 push    ecx             ; Src
.text$mn:0000C2BA                 mov     ecx, [ebp+var_4]
.text$mn:0000C2BD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C2C2                 mov     edx, [ebp+arg_0]
.text$mn:0000C2C5                 lea     eax, [eax+edx*2]
.text$mn:0000C2C8                 mov     ecx, [ebp+arg_4]
.text$mn:0000C2CB                 lea     edx, [eax+ecx*2]
.text$mn:0000C2CE                 push    edx             ; Dst
.text$mn:0000C2CF                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C2D4                 add     esp, 0Ch
.text$mn:0000C2D7
.text$mn:0000C2D7 loc_C2D7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+119j
.text$mn:0000C2D7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+186j ...
.text$mn:0000C2D7                 mov     eax, [ebp+var_C]
.text$mn:0000C2DA                 push    eax
.text$mn:0000C2DB                 mov     ecx, [ebp+var_4]
.text$mn:0000C2DE                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C2E3                 mov     eax, [ebp+var_4]
.text$mn:0000C2E6                 mov     esp, ebp
.text$mn:0000C2E8                 pop     ebp
.text$mn:0000C2E9                 retn    14h
.text$mn:0000C2E9 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000C2E9
.text$mn:0000C2E9 _text$mn        ends
.text$mn:0000C2E9
.text$mn:0000C2EC ; ===========================================================================
.text$mn:0000C2EC
.text$mn:0000C2EC ; Segment type: Pure code
.text$mn:0000C2EC ; Segment permissions: Read/Execute
.text$mn:0000C2EC _text$mn        segment para public 'CODE' use32
.text$mn:0000C2EC                 assume cs:_text$mn
.text$mn:0000C2EC                 ;org 0C2ECh
.text$mn:0000C2EC ; COMDAT (pick any)
.text$mn:0000C2EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C2EC
.text$mn:0000C2EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C2EC
.text$mn:0000C2EC ; Attributes: bp-based frame
.text$mn:0000C2EC
.text$mn:0000C2EC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:0000C2EC                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:0000C2EC ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:0000C2EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:0000C2EC
.text$mn:0000C2EC var_C           = dword ptr -0Ch
.text$mn:0000C2EC var_8           = dword ptr -8
.text$mn:0000C2EC var_4           = dword ptr -4
.text$mn:0000C2EC arg_0           = dword ptr  8
.text$mn:0000C2EC arg_4           = dword ptr  0Ch
.text$mn:0000C2EC Src             = dword ptr  10h
.text$mn:0000C2EC arg_C           = dword ptr  14h
.text$mn:0000C2EC
.text$mn:0000C2EC                 push    ebp
.text$mn:0000C2ED                 mov     ebp, esp
.text$mn:0000C2EF                 sub     esp, 0Ch
.text$mn:0000C2F2                 mov     [ebp+var_4], ecx
.text$mn:0000C2F5                 cmp     [ebp+arg_C], 0
.text$mn:0000C2F9                 jz      short loc_C311
.text$mn:0000C2FB                 push    5A9h            ; unsigned int
.text$mn:0000C300                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C305                 mov     eax, [ebp+Src]
.text$mn:0000C308                 push    eax             ; int
.text$mn:0000C309                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000C30E                 add     esp, 0Ch
.text$mn:0000C311
.text$mn:0000C311 loc_C311:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000C311                 mov     ecx, [ebp+Src]
.text$mn:0000C314                 push    ecx
.text$mn:0000C315                 mov     ecx, [ebp+var_4]
.text$mn:0000C318                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000C31D                 movzx   edx, al
.text$mn:0000C320                 test    edx, edx
.text$mn:0000C322                 jz      short loc_C351
.text$mn:0000C324                 mov     eax, [ebp+arg_C]
.text$mn:0000C327                 push    eax
.text$mn:0000C328                 mov     ecx, [ebp+var_4]
.text$mn:0000C32B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C330                 mov     ecx, [ebp+Src]
.text$mn:0000C333                 sub     ecx, eax
.text$mn:0000C335                 sar     ecx, 1
.text$mn:0000C337                 push    ecx
.text$mn:0000C338                 mov     edx, [ebp+var_4]
.text$mn:0000C33B                 push    edx
.text$mn:0000C33C                 mov     eax, [ebp+arg_4]
.text$mn:0000C33F                 push    eax
.text$mn:0000C340                 mov     ecx, [ebp+arg_0]
.text$mn:0000C343                 push    ecx
.text$mn:0000C344                 mov     ecx, [ebp+var_4]
.text$mn:0000C347                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000C34C                 jmp     loc_C486
.text$mn:0000C351 ; ---------------------------------------------------------------------------
.text$mn:0000C351
.text$mn:0000C351 loc_C351:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000C351                 mov     edx, [ebp+var_4]
.text$mn:0000C354                 mov     eax, [edx+14h]
.text$mn:0000C357                 cmp     eax, [ebp+arg_0]
.text$mn:0000C35A                 jnb     short loc_C364
.text$mn:0000C35C                 mov     ecx, [ebp+var_4]
.text$mn:0000C35F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000C364
.text$mn:0000C364 loc_C364:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000C364                 mov     ecx, [ebp+var_4]
.text$mn:0000C367                 mov     edx, [ecx+14h]
.text$mn:0000C36A                 sub     edx, [ebp+arg_0]
.text$mn:0000C36D                 cmp     edx, [ebp+arg_4]
.text$mn:0000C370                 jnb     short loc_C37E
.text$mn:0000C372                 mov     eax, [ebp+var_4]
.text$mn:0000C375                 mov     ecx, [eax+14h]
.text$mn:0000C378                 sub     ecx, [ebp+arg_0]
.text$mn:0000C37B                 mov     [ebp+arg_4], ecx
.text$mn:0000C37E
.text$mn:0000C37E loc_C37E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000C37E                 or      edx, 0FFFFFFFFh
.text$mn:0000C381                 sub     edx, [ebp+arg_C]
.text$mn:0000C384                 mov     eax, [ebp+var_4]
.text$mn:0000C387                 mov     ecx, [eax+14h]
.text$mn:0000C38A                 sub     ecx, [ebp+arg_4]
.text$mn:0000C38D                 cmp     edx, ecx
.text$mn:0000C38F                 ja      short loc_C399
.text$mn:0000C391                 mov     ecx, [ebp+var_4]
.text$mn:0000C394                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C399
.text$mn:0000C399 loc_C399:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:0000C399                 mov     edx, [ebp+var_4]
.text$mn:0000C39C                 mov     eax, [edx+14h]
.text$mn:0000C39F                 sub     eax, [ebp+arg_4]
.text$mn:0000C3A2                 sub     eax, [ebp+arg_0]
.text$mn:0000C3A5                 mov     [ebp+var_8], eax
.text$mn:0000C3A8                 mov     ecx, [ebp+arg_C]
.text$mn:0000C3AB                 cmp     ecx, [ebp+arg_4]
.text$mn:0000C3AE                 jnb     short loc_C3E6
.text$mn:0000C3B0                 mov     edx, [ebp+var_8]
.text$mn:0000C3B3                 push    edx             ; int
.text$mn:0000C3B4                 mov     ecx, [ebp+var_4]
.text$mn:0000C3B7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C3BC                 mov     ecx, [ebp+arg_0]
.text$mn:0000C3BF                 lea     edx, [eax+ecx*2]
.text$mn:0000C3C2                 mov     eax, [ebp+arg_4]
.text$mn:0000C3C5                 lea     ecx, [edx+eax*2]
.text$mn:0000C3C8                 push    ecx             ; Src
.text$mn:0000C3C9                 mov     ecx, [ebp+var_4]
.text$mn:0000C3CC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C3D1                 mov     edx, [ebp+arg_0]
.text$mn:0000C3D4                 lea     eax, [eax+edx*2]
.text$mn:0000C3D7                 mov     ecx, [ebp+arg_C]
.text$mn:0000C3DA                 lea     edx, [eax+ecx*2]
.text$mn:0000C3DD                 push    edx             ; Dst
.text$mn:0000C3DE                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C3E3                 add     esp, 0Ch
.text$mn:0000C3E6
.text$mn:0000C3E6 loc_C3E6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:0000C3E6                 cmp     [ebp+arg_C], 0
.text$mn:0000C3EA                 ja      short loc_C3F6
.text$mn:0000C3EC                 cmp     [ebp+arg_4], 0
.text$mn:0000C3F0                 jbe     loc_C483
.text$mn:0000C3F6
.text$mn:0000C3F6 loc_C3F6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:0000C3F6                 mov     eax, [ebp+var_4]
.text$mn:0000C3F9                 mov     ecx, [eax+14h]
.text$mn:0000C3FC                 add     ecx, [ebp+arg_C]
.text$mn:0000C3FF                 sub     ecx, [ebp+arg_4]
.text$mn:0000C402                 mov     [ebp+var_C], ecx
.text$mn:0000C405                 push    0
.text$mn:0000C407                 mov     edx, [ebp+var_C]
.text$mn:0000C40A                 push    edx
.text$mn:0000C40B                 mov     ecx, [ebp+var_4]
.text$mn:0000C40E                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C413                 movzx   eax, al
.text$mn:0000C416                 test    eax, eax
.text$mn:0000C418                 jz      short loc_C483
.text$mn:0000C41A                 mov     ecx, [ebp+arg_4]
.text$mn:0000C41D                 cmp     ecx, [ebp+arg_C]
.text$mn:0000C420                 jnb     short loc_C458
.text$mn:0000C422                 mov     edx, [ebp+var_8]
.text$mn:0000C425                 push    edx             ; int
.text$mn:0000C426                 mov     ecx, [ebp+var_4]
.text$mn:0000C429                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C42E                 mov     ecx, [ebp+arg_0]
.text$mn:0000C431                 lea     edx, [eax+ecx*2]
.text$mn:0000C434                 mov     eax, [ebp+arg_4]
.text$mn:0000C437                 lea     ecx, [edx+eax*2]
.text$mn:0000C43A                 push    ecx             ; Src
.text$mn:0000C43B                 mov     ecx, [ebp+var_4]
.text$mn:0000C43E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C443                 mov     edx, [ebp+arg_0]
.text$mn:0000C446                 lea     eax, [eax+edx*2]
.text$mn:0000C449                 mov     ecx, [ebp+arg_C]
.text$mn:0000C44C                 lea     edx, [eax+ecx*2]
.text$mn:0000C44F                 push    edx             ; Dst
.text$mn:0000C450                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000C455                 add     esp, 0Ch
.text$mn:0000C458
.text$mn:0000C458 loc_C458:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:0000C458                 mov     eax, [ebp+arg_C]
.text$mn:0000C45B                 push    eax             ; int
.text$mn:0000C45C                 mov     ecx, [ebp+Src]
.text$mn:0000C45F                 push    ecx             ; Src
.text$mn:0000C460                 mov     ecx, [ebp+var_4]
.text$mn:0000C463                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C468                 mov     edx, [ebp+arg_0]
.text$mn:0000C46B                 lea     eax, [eax+edx*2]
.text$mn:0000C46E                 push    eax             ; Dst
.text$mn:0000C46F                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C474                 add     esp, 0Ch
.text$mn:0000C477                 mov     ecx, [ebp+var_C]
.text$mn:0000C47A                 push    ecx
.text$mn:0000C47B                 mov     ecx, [ebp+var_4]
.text$mn:0000C47E                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C483
.text$mn:0000C483 loc_C483:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:0000C483                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:0000C483                 mov     eax, [ebp+var_4]
.text$mn:0000C486
.text$mn:0000C486 loc_C486:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000C486                 mov     esp, ebp
.text$mn:0000C488                 pop     ebp
.text$mn:0000C489                 retn    10h
.text$mn:0000C489 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:0000C489
.text$mn:0000C489 _text$mn        ends
.text$mn:0000C489
.text$mn:0000C48C ; ===========================================================================
.text$mn:0000C48C
.text$mn:0000C48C ; Segment type: Pure code
.text$mn:0000C48C ; Segment permissions: Read/Execute
.text$mn:0000C48C _text$mn        segment para public 'CODE' use32
.text$mn:0000C48C                 assume cs:_text$mn
.text$mn:0000C48C                 ;org 0C48Ch
.text$mn:0000C48C ; COMDAT (pick any)
.text$mn:0000C48C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C48C
.text$mn:0000C48C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C48C
.text$mn:0000C48C ; Attributes: bp-based frame
.text$mn:0000C48C
.text$mn:0000C48C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000C48C                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000C48C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:0000C48C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:0000C48C
.text$mn:0000C48C var_AC          = byte ptr -0ACh
.text$mn:0000C48C var_A0          = byte ptr -0A0h
.text$mn:0000C48C var_94          = dword ptr -94h
.text$mn:0000C48C var_90          = dword ptr -90h
.text$mn:0000C48C var_8C          = dword ptr -8Ch
.text$mn:0000C48C var_88          = dword ptr -88h
.text$mn:0000C48C var_84          = dword ptr -84h
.text$mn:0000C48C var_80          = dword ptr -80h
.text$mn:0000C48C var_7C          = dword ptr -7Ch
.text$mn:0000C48C var_78          = dword ptr -78h
.text$mn:0000C48C var_74          = dword ptr -74h
.text$mn:0000C48C var_70          = dword ptr -70h
.text$mn:0000C48C var_6C          = dword ptr -6Ch
.text$mn:0000C48C var_68          = dword ptr -68h
.text$mn:0000C48C var_64          = dword ptr -64h
.text$mn:0000C48C var_60          = dword ptr -60h
.text$mn:0000C48C var_5C          = dword ptr -5Ch
.text$mn:0000C48C var_58          = dword ptr -58h
.text$mn:0000C48C var_54          = dword ptr -54h
.text$mn:0000C48C var_50          = dword ptr -50h
.text$mn:0000C48C var_4C          = dword ptr -4Ch
.text$mn:0000C48C var_48          = dword ptr -48h
.text$mn:0000C48C var_44          = dword ptr -44h
.text$mn:0000C48C var_40          = dword ptr -40h
.text$mn:0000C48C var_3C          = dword ptr -3Ch
.text$mn:0000C48C var_38          = dword ptr -38h
.text$mn:0000C48C var_34          = dword ptr -34h
.text$mn:0000C48C var_30          = dword ptr -30h
.text$mn:0000C48C var_2C          = dword ptr -2Ch
.text$mn:0000C48C var_28          = dword ptr -28h
.text$mn:0000C48C var_24          = dword ptr -24h
.text$mn:0000C48C var_20          = dword ptr -20h
.text$mn:0000C48C var_1C          = dword ptr -1Ch
.text$mn:0000C48C var_18          = dword ptr -18h
.text$mn:0000C48C var_14          = dword ptr -14h
.text$mn:0000C48C var_10          = dword ptr -10h
.text$mn:0000C48C var_C           = dword ptr -0Ch
.text$mn:0000C48C var_4           = dword ptr -4
.text$mn:0000C48C arg_0           = byte ptr  8
.text$mn:0000C48C arg_C           = byte ptr  14h
.text$mn:0000C48C arg_18          = byte ptr  20h
.text$mn:0000C48C arg_24          = byte ptr  2Ch
.text$mn:0000C48C
.text$mn:0000C48C                 push    ebp
.text$mn:0000C48D                 mov     ebp, esp
.text$mn:0000C48F                 push    0FFFFFFFFh
.text$mn:0000C491                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000C496                 mov     eax, large fs:0
.text$mn:0000C49C                 push    eax
.text$mn:0000C49D                 sub     esp, 0A0h
.text$mn:0000C4A3                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000C4A8                 xor     eax, ebp
.text$mn:0000C4AA                 push    eax
.text$mn:0000C4AB                 lea     eax, [ebp+var_C]
.text$mn:0000C4AE                 mov     large fs:0, eax
.text$mn:0000C4B4                 mov     [ebp+var_10], ecx
.text$mn:0000C4B7                 mov     [ebp+var_4], 3
.text$mn:0000C4BE                 lea     eax, [ebp+arg_24]
.text$mn:0000C4C1                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000C4C2                 lea     ecx, [ebp+arg_18]
.text$mn:0000C4C5                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C4CA                 movzx   ecx, al
.text$mn:0000C4CD                 test    ecx, ecx
.text$mn:0000C4CF                 jz      loc_C5B1
.text$mn:0000C4D5                 sub     esp, 0Ch
.text$mn:0000C4D8                 mov     ecx, esp
.text$mn:0000C4DA                 mov     [ebp+var_58], esp
.text$mn:0000C4DD                 lea     edx, [ebp+arg_0]
.text$mn:0000C4E0                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C4E1                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C4E6                 mov     [ebp+var_54], eax
.text$mn:0000C4E9                 mov     eax, [ebp+var_54]
.text$mn:0000C4EC                 mov     [ebp+var_60], eax
.text$mn:0000C4EF                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000C4F3                 sub     esp, 0Ch
.text$mn:0000C4F6                 mov     ecx, esp
.text$mn:0000C4F8                 mov     [ebp+var_80], esp
.text$mn:0000C4FB                 lea     edx, [ebp+arg_C]
.text$mn:0000C4FE                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C4FF                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C504                 mov     [ebp+var_38], eax
.text$mn:0000C507                 mov     eax, [ebp+var_38]
.text$mn:0000C50A                 mov     [ebp+var_68], eax
.text$mn:0000C50D                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000C511                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000C515                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000C51A                 add     esp, 18h
.text$mn:0000C51D                 mov     [ebp+var_20], eax
.text$mn:0000C520                 mov     ecx, [ebp+var_20]
.text$mn:0000C523                 push    ecx
.text$mn:0000C524                 lea     edx, [ebp+var_A0]
.text$mn:0000C52A                 push    edx
.text$mn:0000C52B                 mov     ecx, [ebp+var_10]
.text$mn:0000C52E                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000C533                 mov     [ebp+var_48], eax
.text$mn:0000C536                 mov     eax, [ebp+var_48]
.text$mn:0000C539                 mov     [ebp+var_28], eax
.text$mn:0000C53C                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000C540                 sub     esp, 0Ch
.text$mn:0000C543                 mov     ecx, esp
.text$mn:0000C545                 mov     [ebp+var_90], esp
.text$mn:0000C54B                 mov     edx, [ebp+var_28]
.text$mn:0000C54E                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C54F                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C554                 mov     [ebp+var_40], eax
.text$mn:0000C557                 mov     eax, [ebp+var_40]
.text$mn:0000C55A                 mov     [ebp+var_70], eax
.text$mn:0000C55D                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000C561                 sub     esp, 0Ch
.text$mn:0000C564                 mov     ecx, esp
.text$mn:0000C566                 mov     [ebp+var_88], esp
.text$mn:0000C56C                 lea     edx, [ebp+arg_0]
.text$mn:0000C56F                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C570                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C575                 mov     [ebp+var_30], eax
.text$mn:0000C578                 mov     eax, [ebp+var_30]
.text$mn:0000C57B                 mov     [ebp+var_78], eax
.text$mn:0000C57E                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000C582                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000C586                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000C58B                 add     esp, 18h
.text$mn:0000C58E                 mov     [ebp+var_50], eax
.text$mn:0000C591                 mov     ecx, [ebp+var_50]
.text$mn:0000C594                 push    ecx
.text$mn:0000C595                 mov     ecx, [ebp+var_10]
.text$mn:0000C598                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000C59D                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000C5A1                 lea     ecx, [ebp+var_A0]
.text$mn:0000C5A7                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C5AC                 jmp     loc_C6A1
.text$mn:0000C5B1 ; ---------------------------------------------------------------------------
.text$mn:0000C5B1
.text$mn:0000C5B1 loc_C5B1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000C5B1                 lea     edx, [ebp+arg_18]
.text$mn:0000C5B4                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000C5B5                 lea     ecx, [ebp+arg_24]
.text$mn:0000C5B8                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C5BD                 push    eax             ; int
.text$mn:0000C5BE                 lea     ecx, [ebp+arg_18]
.text$mn:0000C5C1                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000C5C6                 push    eax             ; Src
.text$mn:0000C5C7                 sub     esp, 0Ch
.text$mn:0000C5CA                 mov     ecx, esp
.text$mn:0000C5CC                 mov     [ebp+var_94], esp
.text$mn:0000C5D2                 lea     eax, [ebp+arg_0]
.text$mn:0000C5D5                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000C5D6                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C5DB                 mov     [ebp+var_18], eax
.text$mn:0000C5DE                 mov     ecx, [ebp+var_18]
.text$mn:0000C5E1                 mov     [ebp+var_5C], ecx
.text$mn:0000C5E4                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000C5E8                 sub     esp, 0Ch
.text$mn:0000C5EB                 mov     ecx, esp
.text$mn:0000C5ED                 mov     [ebp+var_64], esp
.text$mn:0000C5F0                 lea     edx, [ebp+arg_C]
.text$mn:0000C5F3                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C5F4                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C5F9                 mov     [ebp+var_1C], eax
.text$mn:0000C5FC                 mov     eax, [ebp+var_1C]
.text$mn:0000C5FF                 mov     [ebp+var_6C], eax
.text$mn:0000C602                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000C606                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000C60A                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000C60F                 add     esp, 18h
.text$mn:0000C612                 mov     [ebp+var_24], eax
.text$mn:0000C615                 mov     ecx, [ebp+var_24]
.text$mn:0000C618                 push    ecx             ; int
.text$mn:0000C619                 lea     edx, [ebp+var_AC]
.text$mn:0000C61F                 push    edx
.text$mn:0000C620                 mov     ecx, [ebp+var_10]
.text$mn:0000C623                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000C628                 mov     [ebp+var_2C], eax
.text$mn:0000C62B                 mov     eax, [ebp+var_2C]
.text$mn:0000C62E                 mov     [ebp+var_34], eax
.text$mn:0000C631                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000C635                 sub     esp, 0Ch
.text$mn:0000C638                 mov     ecx, esp
.text$mn:0000C63A                 mov     [ebp+var_74], esp
.text$mn:0000C63D                 mov     edx, [ebp+var_34]
.text$mn:0000C640                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C641                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C646                 mov     [ebp+var_3C], eax
.text$mn:0000C649                 mov     eax, [ebp+var_3C]
.text$mn:0000C64C                 mov     [ebp+var_7C], eax
.text$mn:0000C64F                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000C653                 sub     esp, 0Ch
.text$mn:0000C656                 mov     ecx, esp
.text$mn:0000C658                 mov     [ebp+var_84], esp
.text$mn:0000C65E                 lea     edx, [ebp+arg_0]
.text$mn:0000C661                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000C662                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000C667                 mov     [ebp+var_44], eax
.text$mn:0000C66A                 mov     eax, [ebp+var_44]
.text$mn:0000C66D                 mov     [ebp+var_8C], eax
.text$mn:0000C673                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000C677                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000C67B                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000C680                 add     esp, 18h
.text$mn:0000C683                 mov     [ebp+var_4C], eax
.text$mn:0000C686                 mov     ecx, [ebp+var_4C]
.text$mn:0000C689                 push    ecx             ; int
.text$mn:0000C68A                 mov     ecx, [ebp+var_10]
.text$mn:0000C68D                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000C692                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000C696                 lea     ecx, [ebp+var_AC]
.text$mn:0000C69C                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C6A1
.text$mn:0000C6A1 loc_C6A1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000C6A1                 mov     edx, [ebp+var_10]
.text$mn:0000C6A4                 mov     [ebp+var_14], edx
.text$mn:0000C6A7                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000C6AB                 lea     ecx, [ebp+arg_0]
.text$mn:0000C6AE                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C6B3                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000C6B7                 lea     ecx, [ebp+arg_C]
.text$mn:0000C6BA                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C6BF                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000C6C3                 lea     ecx, [ebp+arg_18]
.text$mn:0000C6C6                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C6CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000C6D2                 lea     ecx, [ebp+arg_24]
.text$mn:0000C6D5                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000C6DA                 mov     eax, [ebp+var_14]
.text$mn:0000C6DD                 mov     ecx, [ebp+var_C]
.text$mn:0000C6E0                 mov     large fs:0, ecx
.text$mn:0000C6E7                 pop     ecx
.text$mn:0000C6E8                 mov     esp, ebp
.text$mn:0000C6EA                 pop     ebp
.text$mn:0000C6EB                 retn    30h
.text$mn:0000C6EB ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:0000C6EB
.text$mn:0000C6EB ; ---------------------------------------------------------------------------
.text$mn:0000C6EE                 align 10h
.text$mn:0000C6EE _text$mn        ends
.text$mn:0000C6EE
.text$x:0000C6F0 ; ===========================================================================
.text$x:0000C6F0
.text$x:0000C6F0 ; Segment type: Pure code
.text$x:0000C6F0 ; Segment permissions: Read/Execute
.text$x:0000C6F0 _text$x         segment para public 'CODE' use32
.text$x:0000C6F0                 assume cs:_text$x
.text$x:0000C6F0                 ;org 0C6F0h
.text$x:0000C6F0 ; COMDAT (pick associative to section at C48C)
.text$x:0000C6F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C6F0
.text$x:0000C6F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6F0
.text$x:0000C6F0
.text$x:0000C6F0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:0000C6F0                                         ; DATA XREF: .xdata$x:0000D074o
.text$x:0000C6F0                 lea     ecx, [ebp+2Ch]
.text$x:0000C6F3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C6F3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:0000C6F3
.text$x:0000C6F8
.text$x:0000C6F8 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6F8
.text$x:0000C6F8
.text$x:0000C6F8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:0000C6F8                                         ; DATA XREF: .xdata$x:0000D07Co
.text$x:0000C6F8                 lea     ecx, [ebp+20h]
.text$x:0000C6FB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C6FB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:0000C6FB
.text$x:0000C700
.text$x:0000C700 ; =============== S U B R O U T I N E =======================================
.text$x:0000C700
.text$x:0000C700
.text$x:0000C700 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:0000C700                                         ; DATA XREF: .xdata$x:0000D084o
.text$x:0000C700                 lea     ecx, [ebp+14h]
.text$x:0000C703                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C703 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:0000C703
.text$x:0000C708
.text$x:0000C708 ; =============== S U B R O U T I N E =======================================
.text$x:0000C708
.text$x:0000C708
.text$x:0000C708 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:0000C708                                         ; DATA XREF: .xdata$x:0000D08Co
.text$x:0000C708                 lea     ecx, [ebp+8]
.text$x:0000C70B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C70B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:0000C70B
.text$x:0000C710
.text$x:0000C710 ; =============== S U B R O U T I N E =======================================
.text$x:0000C710
.text$x:0000C710
.text$x:0000C710 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:0000C710                                         ; DATA XREF: .xdata$x:0000D094o
.text$x:0000C710                 mov     ecx, [ebp-58h]
.text$x:0000C713                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C713 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:0000C713
.text$x:0000C718
.text$x:0000C718 ; =============== S U B R O U T I N E =======================================
.text$x:0000C718
.text$x:0000C718
.text$x:0000C718 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:0000C718                                         ; DATA XREF: .xdata$x:0000D09Co
.text$x:0000C718                 mov     ecx, [ebp-80h]
.text$x:0000C71B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C71B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:0000C71B
.text$x:0000C720
.text$x:0000C720 ; =============== S U B R O U T I N E =======================================
.text$x:0000C720
.text$x:0000C720
.text$x:0000C720 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:0000C720                                         ; DATA XREF: .xdata$x:0000D0A4o
.text$x:0000C720                 lea     ecx, [ebp-0A0h]
.text$x:0000C726                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C726 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:0000C726
.text$x:0000C72B
.text$x:0000C72B ; =============== S U B R O U T I N E =======================================
.text$x:0000C72B
.text$x:0000C72B
.text$x:0000C72B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:0000C72B                                         ; DATA XREF: .xdata$x:0000D0ACo
.text$x:0000C72B                 mov     ecx, [ebp-90h]
.text$x:0000C731                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C731 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:0000C731
.text$x:0000C736
.text$x:0000C736 ; =============== S U B R O U T I N E =======================================
.text$x:0000C736
.text$x:0000C736
.text$x:0000C736 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:0000C736                                         ; DATA XREF: .xdata$x:0000D0B4o
.text$x:0000C736                 mov     ecx, [ebp-88h]
.text$x:0000C73C                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C73C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:0000C73C
.text$x:0000C741
.text$x:0000C741 ; =============== S U B R O U T I N E =======================================
.text$x:0000C741
.text$x:0000C741
.text$x:0000C741 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:0000C741                                         ; DATA XREF: .xdata$x:0000D0BCo
.text$x:0000C741                 mov     ecx, [ebp-94h]
.text$x:0000C747                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C747 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:0000C747
.text$x:0000C74C
.text$x:0000C74C ; =============== S U B R O U T I N E =======================================
.text$x:0000C74C
.text$x:0000C74C
.text$x:0000C74C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000C74C                                         ; DATA XREF: .xdata$x:0000D0C4o
.text$x:0000C74C                 mov     ecx, [ebp-64h]
.text$x:0000C74F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C74F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000C74F
.text$x:0000C754
.text$x:0000C754 ; =============== S U B R O U T I N E =======================================
.text$x:0000C754
.text$x:0000C754
.text$x:0000C754 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:0000C754                                         ; DATA XREF: .xdata$x:0000D0CCo
.text$x:0000C754                 lea     ecx, [ebp-0ACh]
.text$x:0000C75A                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C75A __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000C75A
.text$x:0000C75F
.text$x:0000C75F ; =============== S U B R O U T I N E =======================================
.text$x:0000C75F
.text$x:0000C75F
.text$x:0000C75F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000C75F                                         ; DATA XREF: .xdata$x:0000D0D4o
.text$x:0000C75F                 mov     ecx, [ebp-74h]
.text$x:0000C762                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C762 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000C762
.text$x:0000C767
.text$x:0000C767 ; =============== S U B R O U T I N E =======================================
.text$x:0000C767
.text$x:0000C767
.text$x:0000C767 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:0000C767                                         ; DATA XREF: .xdata$x:0000D0DCo
.text$x:0000C767                 mov     ecx, [ebp-84h]
.text$x:0000C76D                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000C76D __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000C76D
.text$x:0000C772
.text$x:0000C772 ; =============== S U B R O U T I N E =======================================
.text$x:0000C772
.text$x:0000C772
.text$x:0000C772 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000C772                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000C772
.text$x:0000C772 arg_4           = dword ptr  8
.text$x:0000C772
.text$x:0000C772                 mov     edx, [esp+arg_4]
.text$x:0000C776                 lea     eax, [edx+0Ch]
.text$x:0000C779                 mov     ecx, [edx-0A4h]
.text$x:0000C77F                 xor     ecx, eax
.text$x:0000C781                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C786                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000C78B                 jmp     ___CxxFrameHandler3
.text$x:0000C78B __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000C78B
.text$x:0000C78B _text$x         ends
.text$x:0000C78B
.text$mn:0000C790 ; ===========================================================================
.text$mn:0000C790
.text$mn:0000C790 ; Segment type: Pure code
.text$mn:0000C790 ; Segment permissions: Read/Execute
.text$mn:0000C790 _text$mn        segment para public 'CODE' use32
.text$mn:0000C790                 assume cs:_text$mn
.text$mn:0000C790                 ;org 0C790h
.text$mn:0000C790 ; COMDAT (pick any)
.text$mn:0000C790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C790
.text$mn:0000C790 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C790
.text$mn:0000C790 ; Attributes: bp-based frame
.text$mn:0000C790
.text$mn:0000C790 ; int __stdcall DockingDlgInterface::run_dlgProc(DockingDlgInterface *this, unsigned int, unsigned int, __int32)
.text$mn:0000C790                 public ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z
.text$mn:0000C790 ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z proc near
.text$mn:0000C790                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+78Fp
.text$mn:0000C790                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+7A6p
.text$mn:0000C790
.text$mn:0000C790 var_C           = dword ptr -0Ch
.text$mn:0000C790 var_8           = dword ptr -8
.text$mn:0000C790 var_4           = dword ptr -4
.text$mn:0000C790 this            = dword ptr  8
.text$mn:0000C790 arg_4           = dword ptr  0Ch
.text$mn:0000C790 arg_C           = dword ptr  14h
.text$mn:0000C790
.text$mn:0000C790                 push    ebp
.text$mn:0000C791                 mov     ebp, esp
.text$mn:0000C793                 sub     esp, 0Ch
.text$mn:0000C796                 mov     eax, [ebp+arg_4]
.text$mn:0000C799                 mov     [ebp+var_C], eax
.text$mn:0000C79C                 cmp     [ebp+var_C], 4Eh ; 'N'
.text$mn:0000C7A0                 jz      short loc_C7A4
.text$mn:0000C7A2                 jmp     short loc_C806
.text$mn:0000C7A4 ; ---------------------------------------------------------------------------
.text$mn:0000C7A4
.text$mn:0000C7A4 loc_C7A4:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+10j
.text$mn:0000C7A4                 mov     ecx, [ebp+arg_C]
.text$mn:0000C7A7                 mov     [ebp+var_4], ecx
.text$mn:0000C7AA                 mov     edx, [ebp+var_4]
.text$mn:0000C7AD                 mov     eax, [ebp+this]
.text$mn:0000C7B0                 mov     ecx, [edx]
.text$mn:0000C7B2                 cmp     ecx, [eax+8]
.text$mn:0000C7B5                 jnz     short loc_C806
.text$mn:0000C7B7                 mov     edx, [ebp+var_4]
.text$mn:0000C7BA                 mov     eax, [edx+8]
.text$mn:0000C7BD                 and     eax, 0FFFFh
.text$mn:0000C7C2                 movzx   ecx, ax
.text$mn:0000C7C5                 mov     [ebp+var_8], ecx
.text$mn:0000C7C8                 cmp     [ebp+var_8], 41Ch
.text$mn:0000C7CF                 jz      short loc_C7E7
.text$mn:0000C7D1                 cmp     [ebp+var_8], 41Dh
.text$mn:0000C7D8                 jz      short loc_C7DE
.text$mn:0000C7DA                 jmp     short loc_C806
.text$mn:0000C7DC ; ---------------------------------------------------------------------------
.text$mn:0000C7DC                 jmp     short loc_C806
.text$mn:0000C7DE ; ---------------------------------------------------------------------------
.text$mn:0000C7DE
.text$mn:0000C7DE loc_C7DE:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+48j
.text$mn:0000C7DE                 mov     edx, [ebp+this]
.text$mn:0000C7E1                 mov     byte ptr [edx+28h], 1
.text$mn:0000C7E5                 jmp     short loc_C806
.text$mn:0000C7E7 ; ---------------------------------------------------------------------------
.text$mn:0000C7E7
.text$mn:0000C7E7 loc_C7E7:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+3Fj
.text$mn:0000C7E7                 mov     eax, [ebp+var_4]
.text$mn:0000C7EA                 mov     ecx, [eax+8]
.text$mn:0000C7ED                 shr     ecx, 10h
.text$mn:0000C7F0                 and     ecx, 0FFFFh
.text$mn:0000C7F6                 movzx   edx, cx
.text$mn:0000C7F9                 mov     eax, [ebp+this]
.text$mn:0000C7FC                 mov     [eax+2Ch], edx
.text$mn:0000C7FF                 mov     ecx, [ebp+this]
.text$mn:0000C802                 mov     byte ptr [ecx+28h], 0
.text$mn:0000C806
.text$mn:0000C806 loc_C806:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+12j
.text$mn:0000C806                                         ; DockingDlgInterface::run_dlgProc(uint,uint,long)+25j ...
.text$mn:0000C806                 xor     eax, eax
.text$mn:0000C808                 mov     esp, ebp
.text$mn:0000C80A                 pop     ebp
.text$mn:0000C80B                 retn    10h
.text$mn:0000C80B ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z endp
.text$mn:0000C80B
.text$mn:0000C80B ; ---------------------------------------------------------------------------
.text$mn:0000C80E                 align 10h
.text$mn:0000C80E _text$mn        ends
.text$mn:0000C80E
.text$mn:0000C810 ; ===========================================================================
.text$mn:0000C810
.text$mn:0000C810 ; Segment type: Pure code
.text$mn:0000C810 ; Segment permissions: Read/Execute
.text$mn:0000C810 _text$mn        segment para public 'CODE' use32
.text$mn:0000C810                 assume cs:_text$mn
.text$mn:0000C810                 ;org 0C810h
.text$mn:0000C810 ; COMDAT (pick any)
.text$mn:0000C810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C810
.text$mn:0000C810 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C810
.text$mn:0000C810 ; Attributes: bp-based frame
.text$mn:0000C810
.text$mn:0000C810 ; public: struct std::_Wrap_alloc<class std::allocator<struct TreeStateNode>> __thiscall std::_Wrap_alloc<class std::allocator<struct TreeStateNode>>::select_on_container_copy_construction(void)const
.text$mn:0000C810                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AU12@XZ
.text$mn:0000C810 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000C810                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+41p
.text$mn:0000C810
.text$mn:0000C810 var_8           = dword ptr -8
.text$mn:0000C810 var_1           = byte ptr -1
.text$mn:0000C810 arg_0           = dword ptr  8
.text$mn:0000C810
.text$mn:0000C810                 push    ebp
.text$mn:0000C811                 mov     ebp, esp
.text$mn:0000C813                 sub     esp, 8
.text$mn:0000C816                 mov     [ebp+var_8], ecx
.text$mn:0000C819                 mov     eax, [ebp+var_8]
.text$mn:0000C81C                 push    eax
.text$mn:0000C81D                 lea     ecx, [ebp+var_1]
.text$mn:0000C820                 push    ecx
.text$mn:0000C821                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SA?AV?$allocator@UTreeStateNode@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<TreeStateNode>>::select_on_container_copy_construction(std::allocator<TreeStateNode> const &)
.text$mn:0000C826                 add     esp, 8
.text$mn:0000C829                 push    eax
.text$mn:0000C82A                 mov     ecx, [ebp+arg_0]
.text$mn:0000C82D                 call    ??0?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z ; std::_Wrap_alloc<std::allocator<TreeStateNode>>::_Wrap_alloc<std::allocator<TreeStateNode>>(std::allocator<TreeStateNode> const &)
.text$mn:0000C832                 mov     eax, [ebp+arg_0]
.text$mn:0000C835                 mov     esp, ebp
.text$mn:0000C837                 pop     ebp
.text$mn:0000C838                 retn    4
.text$mn:0000C838 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000C838
.text$mn:0000C838 ; ---------------------------------------------------------------------------
.text$mn:0000C83B                 align 4
.text$mn:0000C83B _text$mn        ends
.text$mn:0000C83B
.text$mn:0000C83C ; ===========================================================================
.text$mn:0000C83C
.text$mn:0000C83C ; Segment type: Pure code
.text$mn:0000C83C ; Segment permissions: Read/Execute
.text$mn:0000C83C _text$mn        segment para public 'CODE' use32
.text$mn:0000C83C                 assume cs:_text$mn
.text$mn:0000C83C                 ;org 0C83Ch
.text$mn:0000C83C ; COMDAT (pick any)
.text$mn:0000C83C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C83C
.text$mn:0000C83C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C83C
.text$mn:0000C83C ; Attributes: bp-based frame
.text$mn:0000C83C
.text$mn:0000C83C ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)const
.text$mn:0000C83C                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ
.text$mn:0000C83C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000C83C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+41p
.text$mn:0000C83C
.text$mn:0000C83C var_8           = dword ptr -8
.text$mn:0000C83C var_1           = byte ptr -1
.text$mn:0000C83C arg_0           = dword ptr  8
.text$mn:0000C83C
.text$mn:0000C83C                 push    ebp
.text$mn:0000C83D                 mov     ebp, esp
.text$mn:0000C83F                 sub     esp, 8
.text$mn:0000C842                 mov     [ebp+var_8], ecx
.text$mn:0000C845                 mov     eax, [ebp+var_8]
.text$mn:0000C848                 push    eax
.text$mn:0000C849                 lea     ecx, [ebp+var_1]
.text$mn:0000C84C                 push    ecx
.text$mn:0000C84D                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000C852                 add     esp, 8
.text$mn:0000C855                 push    eax
.text$mn:0000C856                 mov     ecx, [ebp+arg_0]
.text$mn:0000C859                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000C85E                 mov     eax, [ebp+arg_0]
.text$mn:0000C861                 mov     esp, ebp
.text$mn:0000C863                 pop     ebp
.text$mn:0000C864                 retn    4
.text$mn:0000C864 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000C864
.text$mn:0000C864 ; ---------------------------------------------------------------------------
.text$mn:0000C867                 align 4
.text$mn:0000C867 _text$mn        ends
.text$mn:0000C867
.text$mn:0000C868 ; ===========================================================================
.text$mn:0000C868
.text$mn:0000C868 ; Segment type: Pure code
.text$mn:0000C868 ; Segment permissions: Read/Execute
.text$mn:0000C868 _text$mn        segment para public 'CODE' use32
.text$mn:0000C868                 assume cs:_text$mn
.text$mn:0000C868                 ;org 0C868h
.text$mn:0000C868 ; COMDAT (pick any)
.text$mn:0000C868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C868
.text$mn:0000C868 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C868
.text$mn:0000C868 ; Attributes: bp-based frame
.text$mn:0000C868
.text$mn:0000C868 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000C868                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000C868 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000C868                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000C868
.text$mn:0000C868 var_8           = dword ptr -8
.text$mn:0000C868 var_1           = byte ptr -1
.text$mn:0000C868 arg_0           = dword ptr  8
.text$mn:0000C868
.text$mn:0000C868                 push    ebp
.text$mn:0000C869                 mov     ebp, esp
.text$mn:0000C86B                 sub     esp, 8
.text$mn:0000C86E                 mov     [ebp+var_8], ecx
.text$mn:0000C871                 mov     eax, [ebp+var_8]
.text$mn:0000C874                 push    eax
.text$mn:0000C875                 lea     ecx, [ebp+var_1]
.text$mn:0000C878                 push    ecx
.text$mn:0000C879                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000C87E                 add     esp, 8
.text$mn:0000C881                 push    eax
.text$mn:0000C882                 mov     ecx, [ebp+arg_0]
.text$mn:0000C885                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000C88A                 mov     eax, [ebp+arg_0]
.text$mn:0000C88D                 mov     esp, ebp
.text$mn:0000C88F                 pop     ebp
.text$mn:0000C890                 retn    4
.text$mn:0000C890 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000C890
.text$mn:0000C890 ; ---------------------------------------------------------------------------
.text$mn:0000C893                 align 4
.text$mn:0000C893 _text$mn        ends
.text$mn:0000C893
.text$mn:0000C894 ; ===========================================================================
.text$mn:0000C894
.text$mn:0000C894 ; Segment type: Pure code
.text$mn:0000C894 ; Segment permissions: Read/Execute
.text$mn:0000C894 _text$mn        segment para public 'CODE' use32
.text$mn:0000C894                 assume cs:_text$mn
.text$mn:0000C894                 ;org 0C894h
.text$mn:0000C894 ; COMDAT (pick any)
.text$mn:0000C894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C894
.text$mn:0000C894 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C894
.text$mn:0000C894 ; Attributes: bp-based frame
.text$mn:0000C894
.text$mn:0000C894 ; public: class std::allocator<struct TreeStateNode> __thiscall std::allocator<struct TreeStateNode>::select_on_container_copy_construction(void)const
.text$mn:0000C894                 public ?select_on_container_copy_construction@?$allocator@UTreeStateNode@@@std@@QBE?AV12@XZ
.text$mn:0000C894 ?select_on_container_copy_construction@?$allocator@UTreeStateNode@@@std@@QBE?AV12@XZ proc near
.text$mn:0000C894                                         ; CODE XREF: std::allocator_traits<std::allocator<TreeStateNode>>::select_on_container_copy_construction(std::allocator<TreeStateNode> const &)+Ap
.text$mn:0000C894
.text$mn:0000C894 var_4           = dword ptr -4
.text$mn:0000C894 arg_0           = dword ptr  8
.text$mn:0000C894
.text$mn:0000C894                 push    ebp
.text$mn:0000C895                 mov     ebp, esp
.text$mn:0000C897                 push    ecx
.text$mn:0000C898                 mov     [ebp+var_4], ecx
.text$mn:0000C89B                 mov     eax, [ebp+var_4]
.text$mn:0000C89E                 push    eax
.text$mn:0000C89F                 mov     ecx, [ebp+arg_0]
.text$mn:0000C8A2                 call    ??0?$allocator@UTreeStateNode@@@std@@QAE@ABV01@@Z ; std::allocator<TreeStateNode>::allocator<TreeStateNode>(std::allocator<TreeStateNode> const &)
.text$mn:0000C8A7                 mov     eax, [ebp+arg_0]
.text$mn:0000C8AA                 mov     esp, ebp
.text$mn:0000C8AC                 pop     ebp
.text$mn:0000C8AD                 retn    4
.text$mn:0000C8AD ?select_on_container_copy_construction@?$allocator@UTreeStateNode@@@std@@QBE?AV12@XZ endp
.text$mn:0000C8AD
.text$mn:0000C8AD _text$mn        ends
.text$mn:0000C8AD
.text$mn:0000C8B0 ; ===========================================================================
.text$mn:0000C8B0
.text$mn:0000C8B0 ; Segment type: Pure code
.text$mn:0000C8B0 ; Segment permissions: Read/Execute
.text$mn:0000C8B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C8B0                 assume cs:_text$mn
.text$mn:0000C8B0                 ;org 0C8B0h
.text$mn:0000C8B0 ; COMDAT (pick any)
.text$mn:0000C8B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C8B0
.text$mn:0000C8B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C8B0
.text$mn:0000C8B0 ; Attributes: bp-based frame
.text$mn:0000C8B0
.text$mn:0000C8B0 ; public: class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::select_on_container_copy_construction(void)const
.text$mn:0000C8B0                 public ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ
.text$mn:0000C8B0 ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ proc near
.text$mn:0000C8B0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+Ap
.text$mn:0000C8B0
.text$mn:0000C8B0 var_4           = dword ptr -4
.text$mn:0000C8B0 arg_0           = dword ptr  8
.text$mn:0000C8B0
.text$mn:0000C8B0                 push    ebp
.text$mn:0000C8B1                 mov     ebp, esp
.text$mn:0000C8B3                 push    ecx
.text$mn:0000C8B4                 mov     [ebp+var_4], ecx
.text$mn:0000C8B7                 mov     eax, [ebp+var_4]
.text$mn:0000C8BA                 push    eax
.text$mn:0000C8BB                 mov     ecx, [ebp+arg_0]
.text$mn:0000C8BE                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000C8C3                 mov     eax, [ebp+arg_0]
.text$mn:0000C8C6                 mov     esp, ebp
.text$mn:0000C8C8                 pop     ebp
.text$mn:0000C8C9                 retn    4
.text$mn:0000C8C9 ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ endp
.text$mn:0000C8C9
.text$mn:0000C8C9 _text$mn        ends
.text$mn:0000C8C9
.text$mn:0000C8CC ; ===========================================================================
.text$mn:0000C8CC
.text$mn:0000C8CC ; Segment type: Pure code
.text$mn:0000C8CC ; Segment permissions: Read/Execute
.text$mn:0000C8CC _text$mn        segment para public 'CODE' use32
.text$mn:0000C8CC                 assume cs:_text$mn
.text$mn:0000C8CC                 ;org 0C8CCh
.text$mn:0000C8CC ; COMDAT (pick any)
.text$mn:0000C8CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C8CC
.text$mn:0000C8CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C8CC
.text$mn:0000C8CC ; Attributes: bp-based frame
.text$mn:0000C8CC
.text$mn:0000C8CC ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000C8CC                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000C8CC ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000C8CC                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000C8CC
.text$mn:0000C8CC var_4           = dword ptr -4
.text$mn:0000C8CC arg_0           = dword ptr  8
.text$mn:0000C8CC
.text$mn:0000C8CC                 push    ebp
.text$mn:0000C8CD                 mov     ebp, esp
.text$mn:0000C8CF                 push    ecx
.text$mn:0000C8D0                 mov     [ebp+var_4], ecx
.text$mn:0000C8D3                 mov     eax, [ebp+var_4]
.text$mn:0000C8D6                 push    eax
.text$mn:0000C8D7                 mov     ecx, [ebp+arg_0]
.text$mn:0000C8DA                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000C8DF                 mov     eax, [ebp+arg_0]
.text$mn:0000C8E2                 mov     esp, ebp
.text$mn:0000C8E4                 pop     ebp
.text$mn:0000C8E5                 retn    4
.text$mn:0000C8E5 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000C8E5
.text$mn:0000C8E5 _text$mn        ends
.text$mn:0000C8E5
.text$mn:0000C8E8 ; ===========================================================================
.text$mn:0000C8E8
.text$mn:0000C8E8 ; Segment type: Pure code
.text$mn:0000C8E8 ; Segment permissions: Read/Execute
.text$mn:0000C8E8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C8E8                 assume cs:_text$mn
.text$mn:0000C8E8                 ;org 0C8E8h
.text$mn:0000C8E8 ; COMDAT (pick any)
.text$mn:0000C8E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C8E8
.text$mn:0000C8E8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C8E8
.text$mn:0000C8E8 ; Attributes: bp-based frame
.text$mn:0000C8E8
.text$mn:0000C8E8 ; public: static class std::allocator<struct TreeStateNode> __cdecl std::allocator_traits<class std::allocator<struct TreeStateNode>>::select_on_container_copy_construction(class std::allocator<struct TreeStateNode> const &)
.text$mn:0000C8E8                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SA?AV?$allocator@UTreeStateNode@@@2@ABV32@@Z
.text$mn:0000C8E8 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SA?AV?$allocator@UTreeStateNode@@@2@ABV32@@Z proc near
.text$mn:0000C8E8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<TreeStateNode>>::select_on_container_copy_construction(void)+11p
.text$mn:0000C8E8
.text$mn:0000C8E8 arg_0           = dword ptr  8
.text$mn:0000C8E8 arg_4           = dword ptr  0Ch
.text$mn:0000C8E8
.text$mn:0000C8E8                 push    ebp
.text$mn:0000C8E9                 mov     ebp, esp
.text$mn:0000C8EB                 mov     eax, [ebp+arg_0]
.text$mn:0000C8EE                 push    eax
.text$mn:0000C8EF                 mov     ecx, [ebp+arg_4]
.text$mn:0000C8F2                 call    ?select_on_container_copy_construction@?$allocator@UTreeStateNode@@@std@@QBE?AV12@XZ ; std::allocator<TreeStateNode>::select_on_container_copy_construction(void)
.text$mn:0000C8F7                 mov     eax, [ebp+arg_0]
.text$mn:0000C8FA                 pop     ebp
.text$mn:0000C8FB                 retn
.text$mn:0000C8FB ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UTreeStateNode@@@std@@@std@@SA?AV?$allocator@UTreeStateNode@@@2@ABV32@@Z endp
.text$mn:0000C8FB
.text$mn:0000C8FB _text$mn        ends
.text$mn:0000C8FB
.text$mn:0000C8FC ; ===========================================================================
.text$mn:0000C8FC
.text$mn:0000C8FC ; Segment type: Pure code
.text$mn:0000C8FC ; Segment permissions: Read/Execute
.text$mn:0000C8FC _text$mn        segment para public 'CODE' use32
.text$mn:0000C8FC                 assume cs:_text$mn
.text$mn:0000C8FC                 ;org 0C8FCh
.text$mn:0000C8FC ; COMDAT (pick any)
.text$mn:0000C8FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C8FC
.text$mn:0000C8FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C8FC
.text$mn:0000C8FC ; Attributes: bp-based frame
.text$mn:0000C8FC
.text$mn:0000C8FC ; public: static class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::select_on_container_copy_construction(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000C8FC                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z
.text$mn:0000C8FC ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z proc near
.text$mn:0000C8FC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)+11p
.text$mn:0000C8FC
.text$mn:0000C8FC arg_0           = dword ptr  8
.text$mn:0000C8FC arg_4           = dword ptr  0Ch
.text$mn:0000C8FC
.text$mn:0000C8FC                 push    ebp
.text$mn:0000C8FD                 mov     ebp, esp
.text$mn:0000C8FF                 mov     eax, [ebp+arg_0]
.text$mn:0000C902                 push    eax
.text$mn:0000C903                 mov     ecx, [ebp+arg_4]
.text$mn:0000C906                 call    ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::select_on_container_copy_construction(void)
.text$mn:0000C90B                 mov     eax, [ebp+arg_0]
.text$mn:0000C90E                 pop     ebp
.text$mn:0000C90F                 retn
.text$mn:0000C90F ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z endp
.text$mn:0000C90F
.text$mn:0000C90F _text$mn        ends
.text$mn:0000C90F
.text$mn:0000C910 ; ===========================================================================
.text$mn:0000C910
.text$mn:0000C910 ; Segment type: Pure code
.text$mn:0000C910 ; Segment permissions: Read/Execute
.text$mn:0000C910 _text$mn        segment para public 'CODE' use32
.text$mn:0000C910                 assume cs:_text$mn
.text$mn:0000C910                 ;org 0C910h
.text$mn:0000C910 ; COMDAT (pick any)
.text$mn:0000C910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C910
.text$mn:0000C910 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C910
.text$mn:0000C910 ; Attributes: bp-based frame
.text$mn:0000C910
.text$mn:0000C910 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000C910                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000C910 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000C910                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000C910
.text$mn:0000C910 arg_0           = dword ptr  8
.text$mn:0000C910 arg_4           = dword ptr  0Ch
.text$mn:0000C910
.text$mn:0000C910                 push    ebp
.text$mn:0000C911                 mov     ebp, esp
.text$mn:0000C913                 mov     eax, [ebp+arg_0]
.text$mn:0000C916                 push    eax
.text$mn:0000C917                 mov     ecx, [ebp+arg_4]
.text$mn:0000C91A                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000C91F                 mov     eax, [ebp+arg_0]
.text$mn:0000C922                 pop     ebp
.text$mn:0000C923                 retn
.text$mn:0000C923 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000C923
.text$mn:0000C923 _text$mn        ends
.text$mn:0000C923
.text$mn:0000C924 ; ===========================================================================
.text$mn:0000C924
.text$mn:0000C924 ; Segment type: Pure code
.text$mn:0000C924 ; Segment permissions: Read/Execute
.text$mn:0000C924 _text$mn        segment para public 'CODE' use32
.text$mn:0000C924                 assume cs:_text$mn
.text$mn:0000C924                 ;org 0C924h
.text$mn:0000C924 ; COMDAT (pick any)
.text$mn:0000C924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C924
.text$mn:0000C924 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C924
.text$mn:0000C924 ; Attributes: bp-based frame
.text$mn:0000C924
.text$mn:0000C924 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000C924                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000C924 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000C924                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000C924                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:0000C924
.text$mn:0000C924 var_4           = dword ptr -4
.text$mn:0000C924
.text$mn:0000C924                 push    ebp
.text$mn:0000C925                 mov     ebp, esp
.text$mn:0000C927                 push    ecx
.text$mn:0000C928                 mov     [ebp+var_4], ecx
.text$mn:0000C92B                 mov     eax, [ebp+var_4]
.text$mn:0000C92E                 mov     eax, [eax+14h]
.text$mn:0000C931                 mov     esp, ebp
.text$mn:0000C933                 pop     ebp
.text$mn:0000C934                 retn
.text$mn:0000C934 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000C934
.text$mn:0000C934 ; ---------------------------------------------------------------------------
.text$mn:0000C935                 align 4
.text$mn:0000C935 _text$mn        ends
.text$mn:0000C935
.text$mn:0000C938 ; ===========================================================================
.text$mn:0000C938
.text$mn:0000C938 ; Segment type: Pure code
.text$mn:0000C938 ; Segment permissions: Read/Execute
.text$mn:0000C938 _text$mn        segment para public 'CODE' use32
.text$mn:0000C938                 assume cs:_text$mn
.text$mn:0000C938                 ;org 0C938h
.text$mn:0000C938 ; COMDAT (pick any)
.text$mn:0000C938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C938
.text$mn:0000C938 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C938
.text$mn:0000C938 ; Attributes: bp-based frame
.text$mn:0000C938
.text$mn:0000C938 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000C938                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000C938 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000C938                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:0000C938                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:0000C938
.text$mn:0000C938 var_4           = dword ptr -4
.text$mn:0000C938
.text$mn:0000C938                 push    ebp
.text$mn:0000C939                 mov     ebp, esp
.text$mn:0000C93B                 push    ecx
.text$mn:0000C93C                 mov     [ebp+var_4], ecx
.text$mn:0000C93F                 mov     eax, [ebp+var_4]
.text$mn:0000C942                 mov     eax, [eax+14h]
.text$mn:0000C945                 mov     esp, ebp
.text$mn:0000C947                 pop     ebp
.text$mn:0000C948                 retn
.text$mn:0000C948 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000C948
.text$mn:0000C948 ; ---------------------------------------------------------------------------
.text$mn:0000C949                 align 4
.text$mn:0000C949 _text$mn        ends
.text$mn:0000C949
.text$mn:0000C94C ; ===========================================================================
.text$mn:0000C94C
.text$mn:0000C94C ; Segment type: Pure code
.text$mn:0000C94C ; Segment permissions: Read/Execute
.text$mn:0000C94C _text$mn        segment para public 'CODE' use32
.text$mn:0000C94C                 assume cs:_text$mn
.text$mn:0000C94C                 ;org 0C94Ch
.text$mn:0000C94C ; COMDAT (pick any)
.text$mn:0000C94C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C94C
.text$mn:0000C94C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C94C
.text$mn:0000C94C ; Attributes: bp-based frame
.text$mn:0000C94C
.text$mn:0000C94C ; public: unsigned int __thiscall std::vector<struct TreeParams, class std::allocator<struct TreeParams>>::size(void)const
.text$mn:0000C94C                 public ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ
.text$mn:0000C94C ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C94C                                         ; CODE XREF: FunctionListPanel::addInStateArray(TreeStateNode,wchar_t const *,bool)+52p
.text$mn:0000C94C                                         ; FunctionListPanel::getFromStateArray(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+3Fp ...
.text$mn:0000C94C
.text$mn:0000C94C var_4           = dword ptr -4
.text$mn:0000C94C
.text$mn:0000C94C                 push    ebp
.text$mn:0000C94D                 mov     ebp, esp
.text$mn:0000C94F                 push    ecx
.text$mn:0000C950                 mov     [ebp+var_4], ecx
.text$mn:0000C953                 mov     eax, [ebp+var_4]
.text$mn:0000C956                 mov     ecx, [ebp+var_4]
.text$mn:0000C959                 mov     eax, [eax+8]
.text$mn:0000C95C                 sub     eax, [ecx+4]
.text$mn:0000C95F                 cdq
.text$mn:0000C960                 mov     ecx, 6Ch ; 'l'
.text$mn:0000C965                 idiv    ecx
.text$mn:0000C967                 mov     esp, ebp
.text$mn:0000C969                 pop     ebp
.text$mn:0000C96A                 retn
.text$mn:0000C96A ?size@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@QBEIXZ endp
.text$mn:0000C96A
.text$mn:0000C96A ; ---------------------------------------------------------------------------
.text$mn:0000C96B                 align 4
.text$mn:0000C96B _text$mn        ends
.text$mn:0000C96B
.text$mn:0000C96C ; ===========================================================================
.text$mn:0000C96C
.text$mn:0000C96C ; Segment type: Pure code
.text$mn:0000C96C ; Segment permissions: Read/Execute
.text$mn:0000C96C _text$mn        segment para public 'CODE' use32
.text$mn:0000C96C                 assume cs:_text$mn
.text$mn:0000C96C                 ;org 0C96Ch
.text$mn:0000C96C ; COMDAT (pick any)
.text$mn:0000C96C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C96C
.text$mn:0000C96C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C96C
.text$mn:0000C96C ; Attributes: bp-based frame
.text$mn:0000C96C
.text$mn:0000C96C ; public: unsigned int __thiscall std::vector<struct TreeStateNode, class std::allocator<struct TreeStateNode>>::size(void)const
.text$mn:0000C96C                 public ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ
.text$mn:0000C96C ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C96C                                         ; CODE XREF: std::vector<TreeStateNode,std::allocator<TreeStateNode>>::vector<TreeStateNode,std::allocator<TreeStateNode>>(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+59p
.text$mn:0000C96C                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::operator=(std::vector<TreeStateNode,std::allocator<TreeStateNode>> const &)+ACp ...
.text$mn:0000C96C
.text$mn:0000C96C var_4           = dword ptr -4
.text$mn:0000C96C
.text$mn:0000C96C                 push    ebp
.text$mn:0000C96D                 mov     ebp, esp
.text$mn:0000C96F                 push    ecx
.text$mn:0000C970                 mov     [ebp+var_4], ecx
.text$mn:0000C973                 mov     eax, [ebp+var_4]
.text$mn:0000C976                 mov     ecx, [ebp+var_4]
.text$mn:0000C979                 mov     eax, [eax+8]
.text$mn:0000C97C                 sub     eax, [ecx+4]
.text$mn:0000C97F                 cdq
.text$mn:0000C980                 mov     ecx, 4Ch ; 'L'
.text$mn:0000C985                 idiv    ecx
.text$mn:0000C987                 mov     esp, ebp
.text$mn:0000C989                 pop     ebp
.text$mn:0000C98A                 retn
.text$mn:0000C98A ?size@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBEIXZ endp
.text$mn:0000C98A
.text$mn:0000C98A ; ---------------------------------------------------------------------------
.text$mn:0000C98B                 align 4
.text$mn:0000C98B _text$mn        ends
.text$mn:0000C98B
.text$mn:0000C98C ; ===========================================================================
.text$mn:0000C98C
.text$mn:0000C98C ; Segment type: Pure code
.text$mn:0000C98C ; Segment permissions: Read/Execute
.text$mn:0000C98C _text$mn        segment para public 'CODE' use32
.text$mn:0000C98C                 assume cs:_text$mn
.text$mn:0000C98C                 ;org 0C98Ch
.text$mn:0000C98C ; COMDAT (pick any)
.text$mn:0000C98C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C98C
.text$mn:0000C98C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C98C
.text$mn:0000C98C ; Attributes: bp-based frame
.text$mn:0000C98C
.text$mn:0000C98C ; public: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::size(void)const
.text$mn:0000C98C                 public ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000C98C ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C98C                                         ; CODE XREF: FunctionListPanel::reload(void)+25Dp
.text$mn:0000C98C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+Ap
.text$mn:0000C98C
.text$mn:0000C98C var_4           = dword ptr -4
.text$mn:0000C98C
.text$mn:0000C98C                 push    ebp
.text$mn:0000C98D                 mov     ebp, esp
.text$mn:0000C98F                 push    ecx
.text$mn:0000C990                 mov     [ebp+var_4], ecx
.text$mn:0000C993                 mov     eax, [ebp+var_4]
.text$mn:0000C996                 mov     ecx, [ebp+var_4]
.text$mn:0000C999                 mov     eax, [eax+8]
.text$mn:0000C99C                 sub     eax, [ecx+4]
.text$mn:0000C99F                 sar     eax, 6
.text$mn:0000C9A2                 mov     esp, ebp
.text$mn:0000C9A4                 pop     ebp
.text$mn:0000C9A5                 retn
.text$mn:0000C9A5 ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000C9A5
.text$mn:0000C9A5 ; ---------------------------------------------------------------------------
.text$mn:0000C9A6                 align 4
.text$mn:0000C9A6 _text$mn        ends
.text$mn:0000C9A6
.text$mn:0000C9A8 ; ===========================================================================
.text$mn:0000C9A8
.text$mn:0000C9A8 ; Segment type: Pure code
.text$mn:0000C9A8 ; Segment permissions: Read/Execute
.text$mn:0000C9A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C9A8                 assume cs:_text$mn
.text$mn:0000C9A8                 ;org 0C9A8h
.text$mn:0000C9A8 ; COMDAT (pick any)
.text$mn:0000C9A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C9A8
.text$mn:0000C9A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C9A8
.text$mn:0000C9A8 ; Attributes: bp-based frame
.text$mn:0000C9A8
.text$mn:0000C9A8 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:0000C9A8                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000C9A8 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000C9A8                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+86p
.text$mn:0000C9A8                                         ; FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+1A7p ...
.text$mn:0000C9A8
.text$mn:0000C9A8 var_4           = dword ptr -4
.text$mn:0000C9A8
.text$mn:0000C9A8                 push    ebp
.text$mn:0000C9A9                 mov     ebp, esp
.text$mn:0000C9AB                 push    ecx
.text$mn:0000C9AC                 mov     [ebp+var_4], ecx
.text$mn:0000C9AF                 mov     eax, [ebp+var_4]
.text$mn:0000C9B2                 mov     ecx, [ebp+var_4]
.text$mn:0000C9B5                 mov     eax, [eax+8]
.text$mn:0000C9B8                 sub     eax, [ecx+4]
.text$mn:0000C9BB                 cdq
.text$mn:0000C9BC                 mov     ecx, 1Ch
.text$mn:0000C9C1                 idiv    ecx
.text$mn:0000C9C3                 mov     esp, ebp
.text$mn:0000C9C5                 pop     ebp
.text$mn:0000C9C6                 retn
.text$mn:0000C9C6 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000C9C6
.text$mn:0000C9C6 ; ---------------------------------------------------------------------------
.text$mn:0000C9C7                 align 4
.text$mn:0000C9C7 _text$mn        ends
.text$mn:0000C9C7
.text$mn:0000C9C8 ; ===========================================================================
.text$mn:0000C9C8
.text$mn:0000C9C8 ; Segment type: Pure code
.text$mn:0000C9C8 ; Segment permissions: Read/Execute
.text$mn:0000C9C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C9C8                 assume cs:_text$mn
.text$mn:0000C9C8                 ;org 0C9C8h
.text$mn:0000C9C8 ; COMDAT (pick any)
.text$mn:0000C9C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C9C8
.text$mn:0000C9C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C9C8
.text$mn:0000C9C8 ; Attributes: bp-based frame
.text$mn:0000C9C8
.text$mn:0000C9C8 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000C9C8                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000C9C8 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000C9C8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_B090p
.text$mn:0000C9C8                 push    ebp
.text$mn:0000C9C9                 mov     ebp, esp
.text$mn:0000C9CB                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000C9D0                 pop     ebp
.text$mn:0000C9D1                 retn
.text$mn:0000C9D1 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000C9D1
.text$mn:0000C9D1 ; ---------------------------------------------------------------------------
.text$mn:0000C9D2                 align 4
.text$mn:0000C9D2 _text$mn        ends
.text$mn:0000C9D2
.text$mn:0000C9D4 ; ===========================================================================
.text$mn:0000C9D4
.text$mn:0000C9D4 ; Segment type: Pure code
.text$mn:0000C9D4 ; Segment permissions: Read/Execute
.text$mn:0000C9D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C9D4                 assume cs:_text$mn
.text$mn:0000C9D4                 ;org 0C9D4h
.text$mn:0000C9D4 ; COMDAT (pick any)
.text$mn:0000C9D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C9D4
.text$mn:0000C9D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C9D4
.text$mn:0000C9D4 ; Attributes: bp-based frame
.text$mn:0000C9D4
.text$mn:0000C9D4 ; void __thiscall TreeView::toggleExpandCollapse(TreeView *this, struct _TREEITEM *)
.text$mn:0000C9D4                 public ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z
.text$mn:0000C9D4 ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z proc near
.text$mn:0000C9D4                                         ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+13Dp
.text$mn:0000C9D4
.text$mn:0000C9D4 var_4           = dword ptr -4
.text$mn:0000C9D4 lParam          = dword ptr  8
.text$mn:0000C9D4
.text$mn:0000C9D4                 push    ebp
.text$mn:0000C9D5                 mov     ebp, esp
.text$mn:0000C9D7                 push    ecx
.text$mn:0000C9D8                 mov     [ebp+var_4], ecx
.text$mn:0000C9DB                 mov     eax, [ebp+lParam]
.text$mn:0000C9DE                 push    eax             ; lParam
.text$mn:0000C9DF                 push    3               ; wParam
.text$mn:0000C9E1                 push    1102h           ; Msg
.text$mn:0000C9E6                 mov     ecx, [ebp+var_4]
.text$mn:0000C9E9                 mov     edx, [ecx+0Ch]
.text$mn:0000C9EC                 push    edx             ; hWnd
.text$mn:0000C9ED                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000C9F3                 mov     esp, ebp
.text$mn:0000C9F5                 pop     ebp
.text$mn:0000C9F6                 retn    4
.text$mn:0000C9F6 ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z endp
.text$mn:0000C9F6
.text$mn:0000C9F6 ; ---------------------------------------------------------------------------
.text$mn:0000C9F9                 align 4
.text$mn:0000C9F9 _text$mn        ends
.text$mn:0000C9F9
.text$mn:0000C9FC ; ===========================================================================
.text$mn:0000C9FC
.text$mn:0000C9FC ; Segment type: Pure code
.text$mn:0000C9FC ; Segment permissions: Read/Execute
.text$mn:0000C9FC _text$mn        segment para public 'CODE' use32
.text$mn:0000C9FC                 assume cs:_text$mn
.text$mn:0000C9FC                 ;org 0C9FCh
.text$mn:0000C9FC ; COMDAT (pick any)
.text$mn:0000C9FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C9FC
.text$mn:0000C9FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C9FC
.text$mn:0000C9FC ; Attributes: bp-based frame
.text$mn:0000C9FC
.text$mn:0000C9FC ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000C9FC                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000C9FC ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000C9FC
.text$mn:0000C9FC var_4           = dword ptr -4
.text$mn:0000C9FC
.text$mn:0000C9FC                 push    ebp
.text$mn:0000C9FD                 mov     ebp, esp
.text$mn:0000C9FF                 push    ecx
.text$mn:0000CA00                 mov     [ebp+var_4], ecx
.text$mn:0000CA03                 mov     eax, [ebp+var_4]
.text$mn:0000CA06                 mov     eax, [eax]
.text$mn:0000CA08                 mov     esp, ebp
.text$mn:0000CA0A                 pop     ebp
.text$mn:0000CA0B                 retn
.text$mn:0000CA0B ?value@error_code@std@@QBEHXZ endp
.text$mn:0000CA0B
.text$mn:0000CA0B _text$mn        ends
.text$mn:0000CA0B
.text$mn:0000CA0C ; ===========================================================================
.text$mn:0000CA0C
.text$mn:0000CA0C ; Segment type: Pure code
.text$mn:0000CA0C ; Segment permissions: Read/Execute
.text$mn:0000CA0C _text$mn        segment para public 'CODE' use32
.text$mn:0000CA0C                 assume cs:_text$mn
.text$mn:0000CA0C                 ;org 0CA0Ch
.text$mn:0000CA0C ; COMDAT (pick any)
.text$mn:0000CA0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA0C
.text$mn:0000CA0C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA0C
.text$mn:0000CA0C ; Attributes: bp-based frame
.text$mn:0000CA0C
.text$mn:0000CA0C ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000CA0C                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000CA0C ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000CA0C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000CA0C                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000CA0C
.text$mn:0000CA0C var_4           = dword ptr -4
.text$mn:0000CA0C
.text$mn:0000CA0C                 push    ebp
.text$mn:0000CA0D                 mov     ebp, esp
.text$mn:0000CA0F                 push    ecx
.text$mn:0000CA10                 mov     [ebp+var_4], ecx
.text$mn:0000CA13                 mov     eax, [ebp+var_4]
.text$mn:0000CA16                 mov     eax, [eax]
.text$mn:0000CA18                 mov     esp, ebp
.text$mn:0000CA1A                 pop     ebp
.text$mn:0000CA1B                 retn
.text$mn:0000CA1B ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000CA1B
.text$mn:0000CA1B _text$mn        ends
.text$mn:0000CA1B
.text$mn:0000CA1C ; ===========================================================================
.text$mn:0000CA1C
.text$mn:0000CA1C ; Segment type: Pure code
.text$mn:0000CA1C ; Segment permissions: Read/Execute
.text$mn:0000CA1C _text$mn        segment para public 'CODE' use32
.text$mn:0000CA1C                 assume cs:_text$mn
.text$mn:0000CA1C                 ;org 0CA1Ch
.text$mn:0000CA1C ; COMDAT (pick any)
.text$mn:0000CA1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA1C
.text$mn:0000CA1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA1C
.text$mn:0000CA1C ; Attributes: bp-based frame
.text$mn:0000CA1C
.text$mn:0000CA1C                 public _hypot
.text$mn:0000CA1C _hypot          proc near
.text$mn:0000CA1C
.text$mn:0000CA1C var_10          = qword ptr -10h
.text$mn:0000CA1C var_8           = qword ptr -8
.text$mn:0000CA1C arg_0           = qword ptr  8
.text$mn:0000CA1C arg_8           = qword ptr  10h
.text$mn:0000CA1C
.text$mn:0000CA1C                 push    ebp
.text$mn:0000CA1D                 mov     ebp, esp
.text$mn:0000CA1F                 sub     esp, 8
.text$mn:0000CA22                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000CA27                 movsd   [esp+8+var_8], xmm0
.text$mn:0000CA2C                 sub     esp, 8
.text$mn:0000CA2F                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000CA34                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000CA39                 call    __hypot
.text$mn:0000CA3E                 add     esp, 10h
.text$mn:0000CA41                 pop     ebp
.text$mn:0000CA42                 retn
.text$mn:0000CA42 _hypot          endp
.text$mn:0000CA42
.text$mn:0000CA42 ; ---------------------------------------------------------------------------
.text$mn:0000CA43                 align 4
.text$mn:0000CA43 _text$mn        ends
.text$mn:0000CA43
.text$mn:0000CA44 ; ===========================================================================
.text$mn:0000CA44
.text$mn:0000CA44 ; Segment type: Pure code
.text$mn:0000CA44 ; Segment permissions: Read/Execute
.text$mn:0000CA44 _text$mn        segment para public 'CODE' use32
.text$mn:0000CA44                 assume cs:_text$mn
.text$mn:0000CA44                 ;org 0CA44h
.text$mn:0000CA44 ; COMDAT (pick any)
.text$mn:0000CA44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA44
.text$mn:0000CA44 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA44
.text$mn:0000CA44 ; Attributes: bp-based frame
.text$mn:0000CA44
.text$mn:0000CA44                 public _wmemcmp
.text$mn:0000CA44 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000CA44
.text$mn:0000CA44 var_4           = dword ptr -4
.text$mn:0000CA44 arg_0           = dword ptr  8
.text$mn:0000CA44 arg_4           = dword ptr  0Ch
.text$mn:0000CA44 arg_8           = dword ptr  10h
.text$mn:0000CA44
.text$mn:0000CA44                 push    ebp
.text$mn:0000CA45                 mov     ebp, esp
.text$mn:0000CA47                 push    ecx
.text$mn:0000CA48                 jmp     short loc_CA65
.text$mn:0000CA4A ; ---------------------------------------------------------------------------
.text$mn:0000CA4A
.text$mn:0000CA4A loc_CA4A:                               ; CODE XREF: _wmemcmp:loc_CAA0j
.text$mn:0000CA4A                 mov     eax, [ebp+arg_0]
.text$mn:0000CA4D                 add     eax, 2
.text$mn:0000CA50                 mov     [ebp+arg_0], eax
.text$mn:0000CA53                 mov     ecx, [ebp+arg_4]
.text$mn:0000CA56                 add     ecx, 2
.text$mn:0000CA59                 mov     [ebp+arg_4], ecx
.text$mn:0000CA5C                 mov     edx, [ebp+arg_8]
.text$mn:0000CA5F                 sub     edx, 1
.text$mn:0000CA62                 mov     [ebp+arg_8], edx
.text$mn:0000CA65
.text$mn:0000CA65 loc_CA65:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000CA65                 cmp     [ebp+arg_8], 0
.text$mn:0000CA69                 jbe     short loc_CAA2
.text$mn:0000CA6B                 mov     eax, [ebp+arg_0]
.text$mn:0000CA6E                 movzx   ecx, word ptr [eax]
.text$mn:0000CA71                 mov     edx, [ebp+arg_4]
.text$mn:0000CA74                 movzx   eax, word ptr [edx]
.text$mn:0000CA77                 cmp     ecx, eax
.text$mn:0000CA79                 jz      short loc_CAA0
.text$mn:0000CA7B                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA7E                 movzx   edx, word ptr [ecx]
.text$mn:0000CA81                 mov     eax, [ebp+arg_4]
.text$mn:0000CA84                 movzx   ecx, word ptr [eax]
.text$mn:0000CA87                 cmp     edx, ecx
.text$mn:0000CA89                 jge     short loc_CA94
.text$mn:0000CA8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000CA92                 jmp     short loc_CA9B
.text$mn:0000CA94 ; ---------------------------------------------------------------------------
.text$mn:0000CA94
.text$mn:0000CA94 loc_CA94:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000CA94                 mov     [ebp+var_4], 1
.text$mn:0000CA9B
.text$mn:0000CA9B loc_CA9B:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000CA9B                 mov     eax, [ebp+var_4]
.text$mn:0000CA9E                 jmp     short loc_CAA4
.text$mn:0000CAA0 ; ---------------------------------------------------------------------------
.text$mn:0000CAA0
.text$mn:0000CAA0 loc_CAA0:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000CAA0                 jmp     short loc_CA4A
.text$mn:0000CAA2 ; ---------------------------------------------------------------------------
.text$mn:0000CAA2
.text$mn:0000CAA2 loc_CAA2:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000CAA2                 xor     eax, eax
.text$mn:0000CAA4
.text$mn:0000CAA4 loc_CAA4:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000CAA4                 mov     esp, ebp
.text$mn:0000CAA6                 pop     ebp
.text$mn:0000CAA7                 retn
.text$mn:0000CAA7 _wmemcmp        endp
.text$mn:0000CAA7
.text$mn:0000CAA7 _text$mn        ends
.text$mn:0000CAA7
.text$mn:0000CAA8 ; ===========================================================================
.text$mn:0000CAA8
.text$mn:0000CAA8 ; Segment type: Pure code
.text$mn:0000CAA8 ; Segment permissions: Read/Execute
.text$mn:0000CAA8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CAA8                 assume cs:_text$mn
.text$mn:0000CAA8                 ;org 0CAA8h
.text$mn:0000CAA8 ; COMDAT (pick any)
.text$mn:0000CAA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CAA8
.text$mn:0000CAA8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CAA8
.text$mn:0000CAA8 ; Attributes: bp-based frame
.text$mn:0000CAA8
.text$mn:0000CAA8 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000CAA8                 public _wmemcpy
.text$mn:0000CAA8 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000CAA8
.text$mn:0000CAA8 Dst             = dword ptr  8
.text$mn:0000CAA8 Src             = dword ptr  0Ch
.text$mn:0000CAA8 arg_8           = dword ptr  10h
.text$mn:0000CAA8
.text$mn:0000CAA8                 push    ebp
.text$mn:0000CAA9                 mov     ebp, esp
.text$mn:0000CAAB                 mov     eax, [ebp+arg_8]
.text$mn:0000CAAE                 shl     eax, 1
.text$mn:0000CAB0                 push    eax             ; Size
.text$mn:0000CAB1                 mov     ecx, [ebp+Src]
.text$mn:0000CAB4                 push    ecx             ; Src
.text$mn:0000CAB5                 mov     edx, [ebp+Dst]
.text$mn:0000CAB8                 push    edx             ; Dst
.text$mn:0000CAB9                 call    _memcpy
.text$mn:0000CABE                 add     esp, 0Ch
.text$mn:0000CAC1                 pop     ebp
.text$mn:0000CAC2                 retn
.text$mn:0000CAC2 _wmemcpy        endp
.text$mn:0000CAC2
.text$mn:0000CAC2 ; ---------------------------------------------------------------------------
.text$mn:0000CAC3                 align 4
.text$mn:0000CAC3 _text$mn        ends
.text$mn:0000CAC3
.text$mn:0000CAC4 ; ===========================================================================
.text$mn:0000CAC4
.text$mn:0000CAC4 ; Segment type: Pure code
.text$mn:0000CAC4 ; Segment permissions: Read/Execute
.text$mn:0000CAC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CAC4                 assume cs:_text$mn
.text$mn:0000CAC4                 ;org 0CAC4h
.text$mn:0000CAC4 ; COMDAT (pick any)
.text$mn:0000CAC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CAC4
.text$mn:0000CAC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CAC4
.text$mn:0000CAC4 ; Attributes: bp-based frame
.text$mn:0000CAC4
.text$mn:0000CAC4 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000CAC4                 public _wmemmove
.text$mn:0000CAC4 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000CAC4
.text$mn:0000CAC4 Dst             = dword ptr  8
.text$mn:0000CAC4 Src             = dword ptr  0Ch
.text$mn:0000CAC4 arg_8           = dword ptr  10h
.text$mn:0000CAC4
.text$mn:0000CAC4                 push    ebp
.text$mn:0000CAC5                 mov     ebp, esp
.text$mn:0000CAC7                 mov     eax, [ebp+arg_8]
.text$mn:0000CACA                 shl     eax, 1
.text$mn:0000CACC                 push    eax             ; Size
.text$mn:0000CACD                 mov     ecx, [ebp+Src]
.text$mn:0000CAD0                 push    ecx             ; Src
.text$mn:0000CAD1                 mov     edx, [ebp+Dst]
.text$mn:0000CAD4                 push    edx             ; Dst
.text$mn:0000CAD5                 call    _memmove
.text$mn:0000CADA                 add     esp, 0Ch
.text$mn:0000CADD                 pop     ebp
.text$mn:0000CADE                 retn
.text$mn:0000CADE _wmemmove       endp
.text$mn:0000CADE
.text$mn:0000CADE ; ---------------------------------------------------------------------------
.text$mn:0000CADF                 align 10h
.text$mn:0000CADF _text$mn        ends
.text$mn:0000CADF
.xdata$x:0000CAE0 ; ===========================================================================
.xdata$x:0000CAE0
.xdata$x:0000CAE0 ; Segment type: Pure data
.xdata$x:0000CAE0 ; Segment permissions: Read
.xdata$x:0000CAE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CAE0                 assume cs:_xdata$x
.xdata$x:0000CAE0                 ;org 0CAE0h
.xdata$x:0000CAE0 ; COMDAT (pick associative to section at 9864)
.xdata$x:0000CAE0 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000CAE0                                         ; DATA XREF: .xdata$x:0000CAF0o
.xdata$x:0000CAE1                 db 0FFh
.xdata$x:0000CAE2                 db 0FFh
.xdata$x:0000CAE3                 db 0FFh
.xdata$x:0000CAE4                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000CAE8 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000CAE8                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000CAE9                 db    5
.xdata$x:0000CAEA                 db  93h ; ô
.xdata$x:0000CAEB                 db  19h
.xdata$x:0000CAEC                 db    1
.xdata$x:0000CAED                 db    0
.xdata$x:0000CAEE                 db    0
.xdata$x:0000CAEF                 db    0
.xdata$x:0000CAF0                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000CAF4                 db    0
.xdata$x:0000CAF5                 db    0
.xdata$x:0000CAF6                 db    0
.xdata$x:0000CAF7                 db    0
.xdata$x:0000CAF8                 db    0
.xdata$x:0000CAF9                 db    0
.xdata$x:0000CAFA                 db    0
.xdata$x:0000CAFB                 db    0
.xdata$x:0000CAFC                 db    0
.xdata$x:0000CAFD                 db    0
.xdata$x:0000CAFE                 db    0
.xdata$x:0000CAFF                 db    0
.xdata$x:0000CB00                 db    0
.xdata$x:0000CB01                 db    0
.xdata$x:0000CB02                 db    0
.xdata$x:0000CB03                 db    0
.xdata$x:0000CB04                 db    0
.xdata$x:0000CB05                 db    0
.xdata$x:0000CB06                 db    0
.xdata$x:0000CB07                 db    0
.xdata$x:0000CB08                 db    0
.xdata$x:0000CB09                 db    0
.xdata$x:0000CB0A                 db    0
.xdata$x:0000CB0B                 db    0
.xdata$x:0000CB0B _xdata$x        ends
.xdata$x:0000CB0B
.xdata$x:0000CB0C ; ===========================================================================
.xdata$x:0000CB0C
.xdata$x:0000CB0C ; Segment type: Pure data
.xdata$x:0000CB0C ; Segment permissions: Read
.xdata$x:0000CB0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB0C                 assume cs:_xdata$x
.xdata$x:0000CB0C                 ;org 0CB0Ch
.xdata$x:0000CB0C ; COMDAT (pick associative to section at 8148)
.xdata$x:0000CB0C __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000CB0C                                         ; DATA XREF: .xdata$x:0000CB1Co
.xdata$x:0000CB0D                 db 0FFh
.xdata$x:0000CB0E                 db 0FFh
.xdata$x:0000CB0F                 db 0FFh
.xdata$x:0000CB10                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000CB14 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000CB14                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000CB15                 db    5
.xdata$x:0000CB16                 db  93h ; ô
.xdata$x:0000CB17                 db  19h
.xdata$x:0000CB18                 db    1
.xdata$x:0000CB19                 db    0
.xdata$x:0000CB1A                 db    0
.xdata$x:0000CB1B                 db    0
.xdata$x:0000CB1C                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:0000CB20                 db    0
.xdata$x:0000CB21                 db    0
.xdata$x:0000CB22                 db    0
.xdata$x:0000CB23                 db    0
.xdata$x:0000CB24                 db    0
.xdata$x:0000CB25                 db    0
.xdata$x:0000CB26                 db    0
.xdata$x:0000CB27                 db    0
.xdata$x:0000CB28                 db    0
.xdata$x:0000CB29                 db    0
.xdata$x:0000CB2A                 db    0
.xdata$x:0000CB2B                 db    0
.xdata$x:0000CB2C                 db    0
.xdata$x:0000CB2D                 db    0
.xdata$x:0000CB2E                 db    0
.xdata$x:0000CB2F                 db    0
.xdata$x:0000CB30                 db    0
.xdata$x:0000CB31                 db    0
.xdata$x:0000CB32                 db    0
.xdata$x:0000CB33                 db    0
.xdata$x:0000CB34                 db    0
.xdata$x:0000CB35                 db    0
.xdata$x:0000CB36                 db    0
.xdata$x:0000CB37                 db    0
.xdata$x:0000CB37 _xdata$x        ends
.xdata$x:0000CB37
.xdata$x:0000CB38 ; ===========================================================================
.xdata$x:0000CB38
.xdata$x:0000CB38 ; Segment type: Pure data
.xdata$x:0000CB38 ; Segment permissions: Read
.xdata$x:0000CB38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB38                 assume cs:_xdata$x
.xdata$x:0000CB38                 ;org 0CB38h
.xdata$x:0000CB38 ; COMDAT (pick associative to section at 7B30)
.xdata$x:0000CB38 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:0000CB38                                         ; DATA XREF: .xdata$x:0000CB48o
.xdata$x:0000CB39                 db 0FFh
.xdata$x:0000CB3A                 db 0FFh
.xdata$x:0000CB3B                 db 0FFh
.xdata$x:0000CB3C                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:0000CB40 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:0000CB40                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:0000CB41                 db    5
.xdata$x:0000CB42                 db  93h ; ô
.xdata$x:0000CB43                 db  19h
.xdata$x:0000CB44                 db    1
.xdata$x:0000CB45                 db    0
.xdata$x:0000CB46                 db    0
.xdata$x:0000CB47                 db    0
.xdata$x:0000CB48                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000CB4C                 db    0
.xdata$x:0000CB4D                 db    0
.xdata$x:0000CB4E                 db    0
.xdata$x:0000CB4F                 db    0
.xdata$x:0000CB50                 db    0
.xdata$x:0000CB51                 db    0
.xdata$x:0000CB52                 db    0
.xdata$x:0000CB53                 db    0
.xdata$x:0000CB54                 db    0
.xdata$x:0000CB55                 db    0
.xdata$x:0000CB56                 db    0
.xdata$x:0000CB57                 db    0
.xdata$x:0000CB58                 db    0
.xdata$x:0000CB59                 db    0
.xdata$x:0000CB5A                 db    0
.xdata$x:0000CB5B                 db    0
.xdata$x:0000CB5C                 db    0
.xdata$x:0000CB5D                 db    0
.xdata$x:0000CB5E                 db    0
.xdata$x:0000CB5F                 db    0
.xdata$x:0000CB60                 db    0
.xdata$x:0000CB61                 db    0
.xdata$x:0000CB62                 db    0
.xdata$x:0000CB63                 db    0
.xdata$x:0000CB63 _xdata$x        ends
.xdata$x:0000CB63
.xdata$x:0000CB64 ; ===========================================================================
.xdata$x:0000CB64
.xdata$x:0000CB64 ; Segment type: Pure data
.xdata$x:0000CB64 ; Segment permissions: Read
.xdata$x:0000CB64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB64                 assume cs:_xdata$x
.xdata$x:0000CB64                 ;org 0CB64h
.xdata$x:0000CB64 ; COMDAT (pick associative to section at 88B0)
.xdata$x:0000CB64 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000CB64                                         ; DATA XREF: .xdata$x:0000CB7Co
.xdata$x:0000CB65                 db 0FFh
.xdata$x:0000CB66                 db 0FFh
.xdata$x:0000CB67                 db 0FFh
.xdata$x:0000CB68                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000CB6C                 db 0FFh
.xdata$x:0000CB6D                 db 0FFh
.xdata$x:0000CB6E                 db 0FFh
.xdata$x:0000CB6F                 db 0FFh
.xdata$x:0000CB70                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:0000CB74 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:0000CB74                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:0000CB75                 db    5
.xdata$x:0000CB76                 db  93h ; ô
.xdata$x:0000CB77                 db  19h
.xdata$x:0000CB78                 db    2
.xdata$x:0000CB79                 db    0
.xdata$x:0000CB7A                 db    0
.xdata$x:0000CB7B                 db    0
.xdata$x:0000CB7C                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000CB80                 db    0
.xdata$x:0000CB81                 db    0
.xdata$x:0000CB82                 db    0
.xdata$x:0000CB83                 db    0
.xdata$x:0000CB84                 db    0
.xdata$x:0000CB85                 db    0
.xdata$x:0000CB86                 db    0
.xdata$x:0000CB87                 db    0
.xdata$x:0000CB88                 db    0
.xdata$x:0000CB89                 db    0
.xdata$x:0000CB8A                 db    0
.xdata$x:0000CB8B                 db    0
.xdata$x:0000CB8C                 db    0
.xdata$x:0000CB8D                 db    0
.xdata$x:0000CB8E                 db    0
.xdata$x:0000CB8F                 db    0
.xdata$x:0000CB90                 db    0
.xdata$x:0000CB91                 db    0
.xdata$x:0000CB92                 db    0
.xdata$x:0000CB93                 db    0
.xdata$x:0000CB94                 db    0
.xdata$x:0000CB95                 db    0
.xdata$x:0000CB96                 db    0
.xdata$x:0000CB97                 db    0
.xdata$x:0000CB97 _xdata$x        ends
.xdata$x:0000CB97
.xdata$x:0000CB98 ; ===========================================================================
.xdata$x:0000CB98
.xdata$x:0000CB98 ; Segment type: Pure data
.xdata$x:0000CB98 ; Segment permissions: Read
.xdata$x:0000CB98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB98                 assume cs:_xdata$x
.xdata$x:0000CB98                 ;org 0CB98h
.xdata$x:0000CB98 ; COMDAT (pick associative to section at 5820)
.xdata$x:0000CB98 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CB98                                         ; DATA XREF: .xdata$x:0000CBA8o
.xdata$x:0000CB99                 db 0FFh
.xdata$x:0000CB9A                 db 0FFh
.xdata$x:0000CB9B                 db 0FFh
.xdata$x:0000CB9C                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000CBA0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CBA0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000CBA1                 db    5
.xdata$x:0000CBA2                 db  93h ; ô
.xdata$x:0000CBA3                 db  19h
.xdata$x:0000CBA4                 db    1
.xdata$x:0000CBA5                 db    0
.xdata$x:0000CBA6                 db    0
.xdata$x:0000CBA7                 db    0
.xdata$x:0000CBA8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000CBAC                 db    0
.xdata$x:0000CBAD                 db    0
.xdata$x:0000CBAE                 db    0
.xdata$x:0000CBAF                 db    0
.xdata$x:0000CBB0                 db    0
.xdata$x:0000CBB1                 db    0
.xdata$x:0000CBB2                 db    0
.xdata$x:0000CBB3                 db    0
.xdata$x:0000CBB4                 db    0
.xdata$x:0000CBB5                 db    0
.xdata$x:0000CBB6                 db    0
.xdata$x:0000CBB7                 db    0
.xdata$x:0000CBB8                 db    0
.xdata$x:0000CBB9                 db    0
.xdata$x:0000CBBA                 db    0
.xdata$x:0000CBBB                 db    0
.xdata$x:0000CBBC                 db    0
.xdata$x:0000CBBD                 db    0
.xdata$x:0000CBBE                 db    0
.xdata$x:0000CBBF                 db    0
.xdata$x:0000CBC0                 db    0
.xdata$x:0000CBC1                 db    0
.xdata$x:0000CBC2                 db    0
.xdata$x:0000CBC3                 db    0
.xdata$x:0000CBC3 _xdata$x        ends
.xdata$x:0000CBC3
.xdata$x:0000CBC4 ; ===========================================================================
.xdata$x:0000CBC4
.xdata$x:0000CBC4 ; Segment type: Pure data
.xdata$x:0000CBC4 ; Segment permissions: Read
.xdata$x:0000CBC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBC4                 assume cs:_xdata$x
.xdata$x:0000CBC4                 ;org 0CBC4h
.xdata$x:0000CBC4 ; COMDAT (pick associative to section at 70BC)
.xdata$x:0000CBC4 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CBC4                                         ; DATA XREF: .xdata$x:0000CBD4o
.xdata$x:0000CBC5                 db 0FFh
.xdata$x:0000CBC6                 db 0FFh
.xdata$x:0000CBC7                 db 0FFh
.xdata$x:0000CBC8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000CBCC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CBCC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000CBCD                 db    5
.xdata$x:0000CBCE                 db  93h ; ô
.xdata$x:0000CBCF                 db  19h
.xdata$x:0000CBD0                 db    1
.xdata$x:0000CBD1                 db    0
.xdata$x:0000CBD2                 db    0
.xdata$x:0000CBD3                 db    0
.xdata$x:0000CBD4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000CBD8                 db    0
.xdata$x:0000CBD9                 db    0
.xdata$x:0000CBDA                 db    0
.xdata$x:0000CBDB                 db    0
.xdata$x:0000CBDC                 db    0
.xdata$x:0000CBDD                 db    0
.xdata$x:0000CBDE                 db    0
.xdata$x:0000CBDF                 db    0
.xdata$x:0000CBE0                 db    0
.xdata$x:0000CBE1                 db    0
.xdata$x:0000CBE2                 db    0
.xdata$x:0000CBE3                 db    0
.xdata$x:0000CBE4                 db    0
.xdata$x:0000CBE5                 db    0
.xdata$x:0000CBE6                 db    0
.xdata$x:0000CBE7                 db    0
.xdata$x:0000CBE8                 db    0
.xdata$x:0000CBE9                 db    0
.xdata$x:0000CBEA                 db    0
.xdata$x:0000CBEB                 db    0
.xdata$x:0000CBEC                 db    0
.xdata$x:0000CBED                 db    0
.xdata$x:0000CBEE                 db    0
.xdata$x:0000CBEF                 db    0
.xdata$x:0000CBEF _xdata$x        ends
.xdata$x:0000CBEF
.xdata$x:0000CBF0 ; ===========================================================================
.xdata$x:0000CBF0
.xdata$x:0000CBF0 ; Segment type: Pure data
.xdata$x:0000CBF0 ; Segment permissions: Read
.xdata$x:0000CBF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBF0                 assume cs:_xdata$x
.xdata$x:0000CBF0                 ;org 0CBF0h
.xdata$x:0000CBF0 ; COMDAT (pick associative to section at 5524)
.xdata$x:0000CBF0 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000CBF0                                         ; DATA XREF: .xdata$x:0000CC00o
.xdata$x:0000CBF1                 db 0FFh
.xdata$x:0000CBF2                 db 0FFh
.xdata$x:0000CBF3                 db 0FFh
.xdata$x:0000CBF4                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000CBF8 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000CBF8                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000CBF9                 db    5
.xdata$x:0000CBFA                 db  93h ; ô
.xdata$x:0000CBFB                 db  19h
.xdata$x:0000CBFC                 db    1
.xdata$x:0000CBFD                 db    0
.xdata$x:0000CBFE                 db    0
.xdata$x:0000CBFF                 db    0
.xdata$x:0000CC00                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000CC04                 db    0
.xdata$x:0000CC05                 db    0
.xdata$x:0000CC06                 db    0
.xdata$x:0000CC07                 db    0
.xdata$x:0000CC08                 db    0
.xdata$x:0000CC09                 db    0
.xdata$x:0000CC0A                 db    0
.xdata$x:0000CC0B                 db    0
.xdata$x:0000CC0C                 db    0
.xdata$x:0000CC0D                 db    0
.xdata$x:0000CC0E                 db    0
.xdata$x:0000CC0F                 db    0
.xdata$x:0000CC10                 db    0
.xdata$x:0000CC11                 db    0
.xdata$x:0000CC12                 db    0
.xdata$x:0000CC13                 db    0
.xdata$x:0000CC14                 db    0
.xdata$x:0000CC15                 db    0
.xdata$x:0000CC16                 db    0
.xdata$x:0000CC17                 db    0
.xdata$x:0000CC18                 db    0
.xdata$x:0000CC19                 db    0
.xdata$x:0000CC1A                 db    0
.xdata$x:0000CC1B                 db    0
.xdata$x:0000CC1B _xdata$x        ends
.xdata$x:0000CC1B
.xdata$x:0000CC1C ; ===========================================================================
.xdata$x:0000CC1C
.xdata$x:0000CC1C ; Segment type: Pure data
.xdata$x:0000CC1C ; Segment permissions: Read
.xdata$x:0000CC1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC1C                 assume cs:_xdata$x
.xdata$x:0000CC1C                 ;org 0CC1Ch
.xdata$x:0000CC1C ; COMDAT (pick associative to section at 6EEC)
.xdata$x:0000CC1C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CC1C                                         ; DATA XREF: .xdata$x:0000CC2Co
.xdata$x:0000CC1D                 db 0FFh
.xdata$x:0000CC1E                 db 0FFh
.xdata$x:0000CC1F                 db 0FFh
.xdata$x:0000CC20                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CC24 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CC24                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CC25                 db    5
.xdata$x:0000CC26                 db  93h ; ô
.xdata$x:0000CC27                 db  19h
.xdata$x:0000CC28                 db    1
.xdata$x:0000CC29                 db    0
.xdata$x:0000CC2A                 db    0
.xdata$x:0000CC2B                 db    0
.xdata$x:0000CC2C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CC30                 db    0
.xdata$x:0000CC31                 db    0
.xdata$x:0000CC32                 db    0
.xdata$x:0000CC33                 db    0
.xdata$x:0000CC34                 db    0
.xdata$x:0000CC35                 db    0
.xdata$x:0000CC36                 db    0
.xdata$x:0000CC37                 db    0
.xdata$x:0000CC38                 db    0
.xdata$x:0000CC39                 db    0
.xdata$x:0000CC3A                 db    0
.xdata$x:0000CC3B                 db    0
.xdata$x:0000CC3C                 db    0
.xdata$x:0000CC3D                 db    0
.xdata$x:0000CC3E                 db    0
.xdata$x:0000CC3F                 db    0
.xdata$x:0000CC40                 db    0
.xdata$x:0000CC41                 db    0
.xdata$x:0000CC42                 db    0
.xdata$x:0000CC43                 db    0
.xdata$x:0000CC44                 db    0
.xdata$x:0000CC45                 db    0
.xdata$x:0000CC46                 db    0
.xdata$x:0000CC47                 db    0
.xdata$x:0000CC47 _xdata$x        ends
.xdata$x:0000CC47
.xdata$x:0000CC48 ; ===========================================================================
.xdata$x:0000CC48
.xdata$x:0000CC48 ; Segment type: Pure data
.xdata$x:0000CC48 ; Segment permissions: Read
.xdata$x:0000CC48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC48                 assume cs:_xdata$x
.xdata$x:0000CC48                 ;org 0CC48h
.xdata$x:0000CC48 ; COMDAT (pick associative to section at 608C)
.xdata$x:0000CC48 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000CC48                                         ; DATA XREF: .xdata$x:0000CC58o
.xdata$x:0000CC49                 db 0FFh
.xdata$x:0000CC4A                 db 0FFh
.xdata$x:0000CC4B                 db 0FFh
.xdata$x:0000CC4C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000CC50 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000CC50                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000CC51                 db    5
.xdata$x:0000CC52                 db  93h ; ô
.xdata$x:0000CC53                 db  19h
.xdata$x:0000CC54                 db    1
.xdata$x:0000CC55                 db    0
.xdata$x:0000CC56                 db    0
.xdata$x:0000CC57                 db    0
.xdata$x:0000CC58                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000CC5C                 db    0
.xdata$x:0000CC5D                 db    0
.xdata$x:0000CC5E                 db    0
.xdata$x:0000CC5F                 db    0
.xdata$x:0000CC60                 db    0
.xdata$x:0000CC61                 db    0
.xdata$x:0000CC62                 db    0
.xdata$x:0000CC63                 db    0
.xdata$x:0000CC64                 db    0
.xdata$x:0000CC65                 db    0
.xdata$x:0000CC66                 db    0
.xdata$x:0000CC67                 db    0
.xdata$x:0000CC68                 db    0
.xdata$x:0000CC69                 db    0
.xdata$x:0000CC6A                 db    0
.xdata$x:0000CC6B                 db    0
.xdata$x:0000CC6C                 db    0
.xdata$x:0000CC6D                 db    0
.xdata$x:0000CC6E                 db    0
.xdata$x:0000CC6F                 db    0
.xdata$x:0000CC70                 db    0
.xdata$x:0000CC71                 db    0
.xdata$x:0000CC72                 db    0
.xdata$x:0000CC73                 db    0
.xdata$x:0000CC73 _xdata$x        ends
.xdata$x:0000CC73
.xdata$x:0000CC74 ; ===========================================================================
.xdata$x:0000CC74
.xdata$x:0000CC74 ; Segment type: Pure data
.xdata$x:0000CC74 ; Segment permissions: Read
.xdata$x:0000CC74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC74                 assume cs:_xdata$x
.xdata$x:0000CC74                 ;org 0CC74h
.xdata$x:0000CC74 ; COMDAT (pick associative to section at 75A4)
.xdata$x:0000CC74 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CC74                                         ; DATA XREF: .xdata$x:0000CC84o
.xdata$x:0000CC75                 db 0FFh
.xdata$x:0000CC76                 db 0FFh
.xdata$x:0000CC77                 db 0FFh
.xdata$x:0000CC78                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000CC7C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CC7C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000CC7D                 db    5
.xdata$x:0000CC7E                 db  93h ; ô
.xdata$x:0000CC7F                 db  19h
.xdata$x:0000CC80                 db    1
.xdata$x:0000CC81                 db    0
.xdata$x:0000CC82                 db    0
.xdata$x:0000CC83                 db    0
.xdata$x:0000CC84                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000CC88                 align 20h
.xdata$x:0000CC88 _xdata$x        ends
.xdata$x:0000CC88
.xdata$x:0000CCA0 ; ===========================================================================
.xdata$x:0000CCA0
.xdata$x:0000CCA0 ; Segment type: Pure data
.xdata$x:0000CCA0 ; Segment permissions: Read
.xdata$x:0000CCA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CCA0                 assume cs:_xdata$x
.xdata$x:0000CCA0                 ;org 0CCA0h
.xdata$x:0000CCA0 ; COMDAT (pick associative to section at 8D78)
.xdata$x:0000CCA0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000CCA0                                         ; DATA XREF: .xdata$x:0000CD28o
.xdata$x:0000CCA1                 db    0
.xdata$x:0000CCA2                 db    0
.xdata$x:0000CCA3                 db    0
.xdata$x:0000CCA4                 db    0
.xdata$x:0000CCA5                 db    0
.xdata$x:0000CCA6                 db    0
.xdata$x:0000CCA7                 db    0
.xdata$x:0000CCA8                 db    0
.xdata$x:0000CCA9                 db    0
.xdata$x:0000CCAA                 db    0
.xdata$x:0000CCAB                 db    0
.xdata$x:0000CCAC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000CCB0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000CCB0                                         ; DATA XREF: .xdata$x:0000CD14o
.xdata$x:0000CCB1                 db    0
.xdata$x:0000CCB2                 db    0
.xdata$x:0000CCB3                 db    0
.xdata$x:0000CCB4                 db    0
.xdata$x:0000CCB5                 db    0
.xdata$x:0000CCB6                 db    0
.xdata$x:0000CCB7                 db    0
.xdata$x:0000CCB8                 db    0
.xdata$x:0000CCB9                 db    0
.xdata$x:0000CCBA                 db    0
.xdata$x:0000CCBB                 db    0
.xdata$x:0000CCBC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000CCC0 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000CCC0                                         ; DATA XREF: .xdata$x:0000CCE8o
.xdata$x:0000CCC1                 db 0FFh
.xdata$x:0000CCC2                 db 0FFh
.xdata$x:0000CCC3                 db 0FFh
.xdata$x:0000CCC4                 db    0
.xdata$x:0000CCC5                 db    0
.xdata$x:0000CCC6                 db    0
.xdata$x:0000CCC7                 db    0
.xdata$x:0000CCC8                 db 0FFh
.xdata$x:0000CCC9                 db 0FFh
.xdata$x:0000CCCA                 db 0FFh
.xdata$x:0000CCCB                 db 0FFh
.xdata$x:0000CCCC                 db    0
.xdata$x:0000CCCD                 db    0
.xdata$x:0000CCCE                 db    0
.xdata$x:0000CCCF                 db    0
.xdata$x:0000CCD0                 db    1
.xdata$x:0000CCD1                 db    0
.xdata$x:0000CCD2                 db    0
.xdata$x:0000CCD3                 db    0
.xdata$x:0000CCD4                 db    0
.xdata$x:0000CCD5                 db    0
.xdata$x:0000CCD6                 db    0
.xdata$x:0000CCD7                 db    0
.xdata$x:0000CCD8                 db    1
.xdata$x:0000CCD9                 db    0
.xdata$x:0000CCDA                 db    0
.xdata$x:0000CCDB                 db    0
.xdata$x:0000CCDC                 db    0
.xdata$x:0000CCDD                 db    0
.xdata$x:0000CCDE                 db    0
.xdata$x:0000CCDF                 db    0
.xdata$x:0000CCE0 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000CCE0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000CCE1                 db    5
.xdata$x:0000CCE2                 db  93h ; ô
.xdata$x:0000CCE3                 db  19h
.xdata$x:0000CCE4                 db    4
.xdata$x:0000CCE5                 db    0
.xdata$x:0000CCE6                 db    0
.xdata$x:0000CCE7                 db    0
.xdata$x:0000CCE8                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000CCEC                 db    2
.xdata$x:0000CCED                 db    0
.xdata$x:0000CCEE                 db    0
.xdata$x:0000CCEF                 db    0
.xdata$x:0000CCF0                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000CCF4                 db    0
.xdata$x:0000CCF5                 db    0
.xdata$x:0000CCF6                 db    0
.xdata$x:0000CCF7                 db    0
.xdata$x:0000CCF8                 db    0
.xdata$x:0000CCF9                 db    0
.xdata$x:0000CCFA                 db    0
.xdata$x:0000CCFB                 db    0
.xdata$x:0000CCFC                 db    0
.xdata$x:0000CCFD                 db    0
.xdata$x:0000CCFE                 db    0
.xdata$x:0000CCFF                 db    0
.xdata$x:0000CD00                 db    0
.xdata$x:0000CD01                 db    0
.xdata$x:0000CD02                 db    0
.xdata$x:0000CD03                 db    0
.xdata$x:0000CD04 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000CD04                                         ; DATA XREF: .xdata$x:0000CCF0o
.xdata$x:0000CD05                 db    0
.xdata$x:0000CD06                 db    0
.xdata$x:0000CD07                 db    0
.xdata$x:0000CD08                 db    2
.xdata$x:0000CD09                 db    0
.xdata$x:0000CD0A                 db    0
.xdata$x:0000CD0B                 db    0
.xdata$x:0000CD0C                 db    3
.xdata$x:0000CD0D                 db    0
.xdata$x:0000CD0E                 db    0
.xdata$x:0000CD0F                 db    0
.xdata$x:0000CD10                 db    1
.xdata$x:0000CD11                 db    0
.xdata$x:0000CD12                 db    0
.xdata$x:0000CD13                 db    0
.xdata$x:0000CD14                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000CD18                 align 10h
.xdata$x:0000CD20                 db    3
.xdata$x:0000CD21                 db    0
.xdata$x:0000CD22                 db    0
.xdata$x:0000CD23                 db    0
.xdata$x:0000CD24                 db    1
.xdata$x:0000CD25                 db    0
.xdata$x:0000CD26                 db    0
.xdata$x:0000CD27                 db    0
.xdata$x:0000CD28                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000CD28 _xdata$x        ends
.xdata$x:0000CD28
.xdata$x:0000CD2C ; ===========================================================================
.xdata$x:0000CD2C
.xdata$x:0000CD2C ; Segment type: Pure data
.xdata$x:0000CD2C ; Segment permissions: Read
.xdata$x:0000CD2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD2C                 assume cs:_xdata$x
.xdata$x:0000CD2C                 ;org 0CD2Ch
.xdata$x:0000CD2C ; COMDAT (pick associative to section at 6B70)
.xdata$x:0000CD2C __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000CD2C                                         ; DATA XREF: .xdata$x:0000CD3Co
.xdata$x:0000CD2D                 db 0FFh
.xdata$x:0000CD2E                 db 0FFh
.xdata$x:0000CD2F                 db 0FFh
.xdata$x:0000CD30                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000CD34 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000CD34                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000CD35                 db    5
.xdata$x:0000CD36                 db  93h ; ô
.xdata$x:0000CD37                 db  19h
.xdata$x:0000CD38                 db    1
.xdata$x:0000CD39                 db    0
.xdata$x:0000CD3A                 db    0
.xdata$x:0000CD3B                 db    0
.xdata$x:0000CD3C                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000CD40                 db    0
.xdata$x:0000CD41                 db    0
.xdata$x:0000CD42                 db    0
.xdata$x:0000CD43                 db    0
.xdata$x:0000CD44                 db    0
.xdata$x:0000CD45                 db    0
.xdata$x:0000CD46                 db    0
.xdata$x:0000CD47                 db    0
.xdata$x:0000CD48                 db    0
.xdata$x:0000CD49                 db    0
.xdata$x:0000CD4A                 db    0
.xdata$x:0000CD4B                 db    0
.xdata$x:0000CD4C                 db    0
.xdata$x:0000CD4D                 db    0
.xdata$x:0000CD4E                 db    0
.xdata$x:0000CD4F                 db    0
.xdata$x:0000CD50                 db    0
.xdata$x:0000CD51                 db    0
.xdata$x:0000CD52                 db    0
.xdata$x:0000CD53                 db    0
.xdata$x:0000CD54                 db    0
.xdata$x:0000CD55                 db    0
.xdata$x:0000CD56                 db    0
.xdata$x:0000CD57                 db    0
.xdata$x:0000CD57 _xdata$x        ends
.xdata$x:0000CD57
.xdata$x:0000CD58 ; ===========================================================================
.xdata$x:0000CD58
.xdata$x:0000CD58 ; Segment type: Pure data
.xdata$x:0000CD58 ; Segment permissions: Read
.xdata$x:0000CD58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD58                 assume cs:_xdata$x
.xdata$x:0000CD58                 ;org 0CD58h
.xdata$x:0000CD58 ; COMDAT (pick associative to section at BC00)
.xdata$x:0000CD58 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000CD58                                         ; DATA XREF: .xdata$x:0000CD68o
.xdata$x:0000CD59                 db 0FFh
.xdata$x:0000CD5A                 db 0FFh
.xdata$x:0000CD5B                 db 0FFh
.xdata$x:0000CD5C                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000CD60 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000CD60                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000CD61                 db    5
.xdata$x:0000CD62                 db  93h ; ô
.xdata$x:0000CD63                 db  19h
.xdata$x:0000CD64                 db    1
.xdata$x:0000CD65                 db    0
.xdata$x:0000CD66                 db    0
.xdata$x:0000CD67                 db    0
.xdata$x:0000CD68                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000CD6C                 db    0
.xdata$x:0000CD6D                 db    0
.xdata$x:0000CD6E                 db    0
.xdata$x:0000CD6F                 db    0
.xdata$x:0000CD70                 db    0
.xdata$x:0000CD71                 db    0
.xdata$x:0000CD72                 db    0
.xdata$x:0000CD73                 db    0
.xdata$x:0000CD74                 db    0
.xdata$x:0000CD75                 db    0
.xdata$x:0000CD76                 db    0
.xdata$x:0000CD77                 db    0
.xdata$x:0000CD78                 db    0
.xdata$x:0000CD79                 db    0
.xdata$x:0000CD7A                 db    0
.xdata$x:0000CD7B                 db    0
.xdata$x:0000CD7C                 db    0
.xdata$x:0000CD7D                 db    0
.xdata$x:0000CD7E                 db    0
.xdata$x:0000CD7F                 db    0
.xdata$x:0000CD80                 db    0
.xdata$x:0000CD81                 db    0
.xdata$x:0000CD82                 db    0
.xdata$x:0000CD83                 db    0
.xdata$x:0000CD83 _xdata$x        ends
.xdata$x:0000CD83
.xdata$x:0000CD84 ; ===========================================================================
.xdata$x:0000CD84
.xdata$x:0000CD84 ; Segment type: Pure data
.xdata$x:0000CD84 ; Segment permissions: Read
.xdata$x:0000CD84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD84                 assume cs:_xdata$x
.xdata$x:0000CD84                 ;org 0CD84h
.xdata$x:0000CD84 ; COMDAT (pick associative to section at 7A50)
.xdata$x:0000CD84 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000CD84                                         ; DATA XREF: .xdata$x:0000CD94o
.xdata$x:0000CD85                 db 0FFh
.xdata$x:0000CD86                 db 0FFh
.xdata$x:0000CD87                 db 0FFh
.xdata$x:0000CD88                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000CD8C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000CD8C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000CD8D                 db    5
.xdata$x:0000CD8E                 db  93h ; ô
.xdata$x:0000CD8F                 db  19h
.xdata$x:0000CD90                 db    1
.xdata$x:0000CD91                 db    0
.xdata$x:0000CD92                 db    0
.xdata$x:0000CD93                 db    0
.xdata$x:0000CD94                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000CD98                 db    0
.xdata$x:0000CD99                 db    0
.xdata$x:0000CD9A                 db    0
.xdata$x:0000CD9B                 db    0
.xdata$x:0000CD9C                 db    0
.xdata$x:0000CD9D                 db    0
.xdata$x:0000CD9E                 db    0
.xdata$x:0000CD9F                 db    0
.xdata$x:0000CDA0                 db    0
.xdata$x:0000CDA1                 db    0
.xdata$x:0000CDA2                 db    0
.xdata$x:0000CDA3                 db    0
.xdata$x:0000CDA4                 db    0
.xdata$x:0000CDA5                 db    0
.xdata$x:0000CDA6                 db    0
.xdata$x:0000CDA7                 db    0
.xdata$x:0000CDA8                 db    0
.xdata$x:0000CDA9                 db    0
.xdata$x:0000CDAA                 db    0
.xdata$x:0000CDAB                 db    0
.xdata$x:0000CDAC                 db    0
.xdata$x:0000CDAD                 db    0
.xdata$x:0000CDAE                 db    0
.xdata$x:0000CDAF                 db    0
.xdata$x:0000CDAF _xdata$x        ends
.xdata$x:0000CDAF
.xdata$x:0000CDB0 ; ===========================================================================
.xdata$x:0000CDB0
.xdata$x:0000CDB0 ; Segment type: Pure data
.xdata$x:0000CDB0 ; Segment permissions: Read
.xdata$x:0000CDB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CDB0                 assume cs:_xdata$x
.xdata$x:0000CDB0                 ;org 0CDB0h
.xdata$x:0000CDB0 ; COMDAT (pick associative to section at 6BFC)
.xdata$x:0000CDB0 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000CDB0                                         ; DATA XREF: .xdata$x:0000CDC0o
.xdata$x:0000CDB1                 db 0FFh
.xdata$x:0000CDB2                 db 0FFh
.xdata$x:0000CDB3                 db 0FFh
.xdata$x:0000CDB4                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000CDB8 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000CDB8                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000CDB9                 db    5
.xdata$x:0000CDBA                 db  93h ; ô
.xdata$x:0000CDBB                 db  19h
.xdata$x:0000CDBC                 db    1
.xdata$x:0000CDBD                 db    0
.xdata$x:0000CDBE                 db    0
.xdata$x:0000CDBF                 db    0
.xdata$x:0000CDC0                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000CDC4                 db    0
.xdata$x:0000CDC5                 db    0
.xdata$x:0000CDC6                 db    0
.xdata$x:0000CDC7                 db    0
.xdata$x:0000CDC8                 db    0
.xdata$x:0000CDC9                 db    0
.xdata$x:0000CDCA                 db    0
.xdata$x:0000CDCB                 db    0
.xdata$x:0000CDCC                 db    0
.xdata$x:0000CDCD                 db    0
.xdata$x:0000CDCE                 db    0
.xdata$x:0000CDCF                 db    0
.xdata$x:0000CDD0                 db    0
.xdata$x:0000CDD1                 db    0
.xdata$x:0000CDD2                 db    0
.xdata$x:0000CDD3                 db    0
.xdata$x:0000CDD4                 db    0
.xdata$x:0000CDD5                 db    0
.xdata$x:0000CDD6                 db    0
.xdata$x:0000CDD7                 db    0
.xdata$x:0000CDD8                 db    0
.xdata$x:0000CDD9                 db    0
.xdata$x:0000CDDA                 db    0
.xdata$x:0000CDDB                 db    0
.xdata$x:0000CDDB _xdata$x        ends
.xdata$x:0000CDDB
.xdata$x:0000CDDC ; ===========================================================================
.xdata$x:0000CDDC
.xdata$x:0000CDDC ; Segment type: Pure data
.xdata$x:0000CDDC ; Segment permissions: Read
.xdata$x:0000CDDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CDDC                 assume cs:_xdata$x
.xdata$x:0000CDDC                 ;org 0CDDCh
.xdata$x:0000CDDC ; COMDAT (pick associative to section at BCB8)
.xdata$x:0000CDDC __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000CDDC                                         ; DATA XREF: .xdata$x:0000CDECo
.xdata$x:0000CDDD                 db 0FFh
.xdata$x:0000CDDE                 db 0FFh
.xdata$x:0000CDDF                 db 0FFh
.xdata$x:0000CDE0                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000CDE4 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000CDE4                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000CDE5                 db    5
.xdata$x:0000CDE6                 db  93h ; ô
.xdata$x:0000CDE7                 db  19h
.xdata$x:0000CDE8                 db    1
.xdata$x:0000CDE9                 db    0
.xdata$x:0000CDEA                 db    0
.xdata$x:0000CDEB                 db    0
.xdata$x:0000CDEC                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000CDF0                 db    0
.xdata$x:0000CDF1                 db    0
.xdata$x:0000CDF2                 db    0
.xdata$x:0000CDF3                 db    0
.xdata$x:0000CDF4                 db    0
.xdata$x:0000CDF5                 db    0
.xdata$x:0000CDF6                 db    0
.xdata$x:0000CDF7                 db    0
.xdata$x:0000CDF8                 db    0
.xdata$x:0000CDF9                 db    0
.xdata$x:0000CDFA                 db    0
.xdata$x:0000CDFB                 db    0
.xdata$x:0000CDFC                 db    0
.xdata$x:0000CDFD                 db    0
.xdata$x:0000CDFE                 db    0
.xdata$x:0000CDFF                 db    0
.xdata$x:0000CE00                 db    0
.xdata$x:0000CE01                 db    0
.xdata$x:0000CE02                 db    0
.xdata$x:0000CE03                 db    0
.xdata$x:0000CE04                 db    0
.xdata$x:0000CE05                 db    0
.xdata$x:0000CE06                 db    0
.xdata$x:0000CE07                 db    0
.xdata$x:0000CE07 _xdata$x        ends
.xdata$x:0000CE07
.xdata$x:0000CE08 ; ===========================================================================
.xdata$x:0000CE08
.xdata$x:0000CE08 ; Segment type: Pure data
.xdata$x:0000CE08 ; Segment permissions: Read
.xdata$x:0000CE08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE08                 assume cs:_xdata$x
.xdata$x:0000CE08                 ;org 0CE08h
.xdata$x:0000CE08 ; COMDAT (pick associative to section at 7AC0)
.xdata$x:0000CE08 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000CE08                                         ; DATA XREF: .xdata$x:0000CE18o
.xdata$x:0000CE09                 db 0FFh
.xdata$x:0000CE0A                 db 0FFh
.xdata$x:0000CE0B                 db 0FFh
.xdata$x:0000CE0C                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000CE10 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000CE10                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000CE11                 db    5
.xdata$x:0000CE12                 db  93h ; ô
.xdata$x:0000CE13                 db  19h
.xdata$x:0000CE14                 db    1
.xdata$x:0000CE15                 db    0
.xdata$x:0000CE16                 db    0
.xdata$x:0000CE17                 db    0
.xdata$x:0000CE18                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000CE1C                 db    0
.xdata$x:0000CE1D                 db    0
.xdata$x:0000CE1E                 db    0
.xdata$x:0000CE1F                 db    0
.xdata$x:0000CE20                 db    0
.xdata$x:0000CE21                 db    0
.xdata$x:0000CE22                 db    0
.xdata$x:0000CE23                 db    0
.xdata$x:0000CE24                 db    0
.xdata$x:0000CE25                 db    0
.xdata$x:0000CE26                 db    0
.xdata$x:0000CE27                 db    0
.xdata$x:0000CE28                 db    0
.xdata$x:0000CE29                 db    0
.xdata$x:0000CE2A                 db    0
.xdata$x:0000CE2B                 db    0
.xdata$x:0000CE2C                 db    0
.xdata$x:0000CE2D                 db    0
.xdata$x:0000CE2E                 db    0
.xdata$x:0000CE2F                 db    0
.xdata$x:0000CE30                 db    0
.xdata$x:0000CE31                 db    0
.xdata$x:0000CE32                 db    0
.xdata$x:0000CE33                 db    0
.xdata$x:0000CE33 _xdata$x        ends
.xdata$x:0000CE33
.xdata$x:0000CE34 ; ===========================================================================
.xdata$x:0000CE34
.xdata$x:0000CE34 ; Segment type: Pure data
.xdata$x:0000CE34 ; Segment permissions: Read
.xdata$x:0000CE34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE34                 assume cs:_xdata$x
.xdata$x:0000CE34                 ;org 0CE34h
.xdata$x:0000CE34 ; COMDAT (pick associative to section at 6CCC)
.xdata$x:0000CE34 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000CE34                                         ; DATA XREF: .xdata$x:0000CE44o
.xdata$x:0000CE35                 db 0FFh
.xdata$x:0000CE36                 db 0FFh
.xdata$x:0000CE37                 db 0FFh
.xdata$x:0000CE38                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000CE3C __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000CE3C                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000CE3D                 db    5
.xdata$x:0000CE3E                 db  93h ; ô
.xdata$x:0000CE3F                 db  19h
.xdata$x:0000CE40                 db    1
.xdata$x:0000CE41                 db    0
.xdata$x:0000CE42                 db    0
.xdata$x:0000CE43                 db    0
.xdata$x:0000CE44                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000CE48                 align 20h
.xdata$x:0000CE48 _xdata$x        ends
.xdata$x:0000CE48
.xdata$x:0000CE60 ; ===========================================================================
.xdata$x:0000CE60
.xdata$x:0000CE60 ; Segment type: Pure data
.xdata$x:0000CE60 ; Segment permissions: Read
.xdata$x:0000CE60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE60                 assume cs:_xdata$x
.xdata$x:0000CE60                 ;org 0CE60h
.xdata$x:0000CE60 ; COMDAT (pick associative to section at BD7C)
.xdata$x:0000CE60 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000CE60                                         ; DATA XREF: .xdata$x:0000CE70o
.xdata$x:0000CE61                 db 0FFh
.xdata$x:0000CE62                 db 0FFh
.xdata$x:0000CE63                 db 0FFh
.xdata$x:0000CE64                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000CE68 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000CE68                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000CE69                 db    5
.xdata$x:0000CE6A                 db  93h ; ô
.xdata$x:0000CE6B                 db  19h
.xdata$x:0000CE6C                 db    1
.xdata$x:0000CE6D                 db    0
.xdata$x:0000CE6E                 db    0
.xdata$x:0000CE6F                 db    0
.xdata$x:0000CE70                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000CE74                 db    0
.xdata$x:0000CE75                 db    0
.xdata$x:0000CE76                 db    0
.xdata$x:0000CE77                 db    0
.xdata$x:0000CE78                 db    0
.xdata$x:0000CE79                 db    0
.xdata$x:0000CE7A                 db    0
.xdata$x:0000CE7B                 db    0
.xdata$x:0000CE7C                 db    0
.xdata$x:0000CE7D                 db    0
.xdata$x:0000CE7E                 db    0
.xdata$x:0000CE7F                 db    0
.xdata$x:0000CE80                 db    0
.xdata$x:0000CE81                 db    0
.xdata$x:0000CE82                 db    0
.xdata$x:0000CE83                 db    0
.xdata$x:0000CE84                 db    0
.xdata$x:0000CE85                 db    0
.xdata$x:0000CE86                 db    0
.xdata$x:0000CE87                 db    0
.xdata$x:0000CE88                 db    0
.xdata$x:0000CE89                 db    0
.xdata$x:0000CE8A                 db    0
.xdata$x:0000CE8B                 db    0
.xdata$x:0000CE8B _xdata$x        ends
.xdata$x:0000CE8B
.xdata$x:0000CE8C ; ===========================================================================
.xdata$x:0000CE8C
.xdata$x:0000CE8C ; Segment type: Pure data
.xdata$x:0000CE8C ; Segment permissions: Read
.xdata$x:0000CE8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE8C                 assume cs:_xdata$x
.xdata$x:0000CE8C                 ;org 0CE8Ch
.xdata$x:0000CE8C ; COMDAT (pick associative to section at 7BB4)
.xdata$x:0000CE8C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000CE8C                                         ; DATA XREF: .xdata$x:0000CE9Co
.xdata$x:0000CE8D                 db 0FFh
.xdata$x:0000CE8E                 db 0FFh
.xdata$x:0000CE8F                 db 0FFh
.xdata$x:0000CE90                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000CE94 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000CE94                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000CE95                 db    5
.xdata$x:0000CE96                 db  93h ; ô
.xdata$x:0000CE97                 db  19h
.xdata$x:0000CE98                 db    1
.xdata$x:0000CE99                 db    0
.xdata$x:0000CE9A                 db    0
.xdata$x:0000CE9B                 db    0
.xdata$x:0000CE9C                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000CEA0                 db    0
.xdata$x:0000CEA1                 db    0
.xdata$x:0000CEA2                 db    0
.xdata$x:0000CEA3                 db    0
.xdata$x:0000CEA4                 db    0
.xdata$x:0000CEA5                 db    0
.xdata$x:0000CEA6                 db    0
.xdata$x:0000CEA7                 db    0
.xdata$x:0000CEA8                 db    0
.xdata$x:0000CEA9                 db    0
.xdata$x:0000CEAA                 db    0
.xdata$x:0000CEAB                 db    0
.xdata$x:0000CEAC                 db    0
.xdata$x:0000CEAD                 db    0
.xdata$x:0000CEAE                 db    0
.xdata$x:0000CEAF                 db    0
.xdata$x:0000CEB0                 db    0
.xdata$x:0000CEB1                 db    0
.xdata$x:0000CEB2                 db    0
.xdata$x:0000CEB3                 db    0
.xdata$x:0000CEB4                 db    0
.xdata$x:0000CEB5                 db    0
.xdata$x:0000CEB6                 db    0
.xdata$x:0000CEB7                 db    0
.xdata$x:0000CEB7 _xdata$x        ends
.xdata$x:0000CEB7
.xdata$x:0000CEB8 ; ===========================================================================
.xdata$x:0000CEB8
.xdata$x:0000CEB8 ; Segment type: Pure data
.xdata$x:0000CEB8 ; Segment permissions: Read
.xdata$x:0000CEB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CEB8                 assume cs:_xdata$x
.xdata$x:0000CEB8                 ;org 0CEB8h
.xdata$x:0000CEB8 ; COMDAT (pick associative to section at 58A8)
.xdata$x:0000CEB8 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CEB8                                         ; DATA XREF: .xdata$x:0000CEC8o
.xdata$x:0000CEB9                 db 0FFh
.xdata$x:0000CEBA                 db 0FFh
.xdata$x:0000CEBB                 db 0FFh
.xdata$x:0000CEBC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000CEC0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CEC0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000CEC1                 db    5
.xdata$x:0000CEC2                 db  93h ; ô
.xdata$x:0000CEC3                 db  19h
.xdata$x:0000CEC4                 db    1
.xdata$x:0000CEC5                 db    0
.xdata$x:0000CEC6                 db    0
.xdata$x:0000CEC7                 db    0
.xdata$x:0000CEC8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000CECC                 db    0
.xdata$x:0000CECD                 db    0
.xdata$x:0000CECE                 db    0
.xdata$x:0000CECF                 db    0
.xdata$x:0000CED0                 db    0
.xdata$x:0000CED1                 db    0
.xdata$x:0000CED2                 db    0
.xdata$x:0000CED3                 db    0
.xdata$x:0000CED4                 db    0
.xdata$x:0000CED5                 db    0
.xdata$x:0000CED6                 db    0
.xdata$x:0000CED7                 db    0
.xdata$x:0000CED8                 db    0
.xdata$x:0000CED9                 db    0
.xdata$x:0000CEDA                 db    0
.xdata$x:0000CEDB                 db    0
.xdata$x:0000CEDC                 db    0
.xdata$x:0000CEDD                 db    0
.xdata$x:0000CEDE                 db    0
.xdata$x:0000CEDF                 db    0
.xdata$x:0000CEE0                 db    0
.xdata$x:0000CEE1                 db    0
.xdata$x:0000CEE2                 db    0
.xdata$x:0000CEE3                 db    0
.xdata$x:0000CEE3 _xdata$x        ends
.xdata$x:0000CEE3
.xdata$x:0000CEE4 ; ===========================================================================
.xdata$x:0000CEE4
.xdata$x:0000CEE4 ; Segment type: Pure data
.xdata$x:0000CEE4 ; Segment permissions: Read
.xdata$x:0000CEE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CEE4                 assume cs:_xdata$x
.xdata$x:0000CEE4                 ;org 0CEE4h
.xdata$x:0000CEE4 ; COMDAT (pick associative to section at 712C)
.xdata$x:0000CEE4 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CEE4                                         ; DATA XREF: .xdata$x:0000CEF4o
.xdata$x:0000CEE5                 db 0FFh
.xdata$x:0000CEE6                 db 0FFh
.xdata$x:0000CEE7                 db 0FFh
.xdata$x:0000CEE8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000CEEC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CEEC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000CEED                 db    5
.xdata$x:0000CEEE                 db  93h ; ô
.xdata$x:0000CEEF                 db  19h
.xdata$x:0000CEF0                 db    1
.xdata$x:0000CEF1                 db    0
.xdata$x:0000CEF2                 db    0
.xdata$x:0000CEF3                 db    0
.xdata$x:0000CEF4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000CEF8                 db    0
.xdata$x:0000CEF9                 db    0
.xdata$x:0000CEFA                 db    0
.xdata$x:0000CEFB                 db    0
.xdata$x:0000CEFC                 db    0
.xdata$x:0000CEFD                 db    0
.xdata$x:0000CEFE                 db    0
.xdata$x:0000CEFF                 db    0
.xdata$x:0000CF00                 db    0
.xdata$x:0000CF01                 db    0
.xdata$x:0000CF02                 db    0
.xdata$x:0000CF03                 db    0
.xdata$x:0000CF04                 db    0
.xdata$x:0000CF05                 db    0
.xdata$x:0000CF06                 db    0
.xdata$x:0000CF07                 db    0
.xdata$x:0000CF08                 db    0
.xdata$x:0000CF09                 db    0
.xdata$x:0000CF0A                 db    0
.xdata$x:0000CF0B                 db    0
.xdata$x:0000CF0C                 db    0
.xdata$x:0000CF0D                 db    0
.xdata$x:0000CF0E                 db    0
.xdata$x:0000CF0F                 db    0
.xdata$x:0000CF0F _xdata$x        ends
.xdata$x:0000CF0F
.xdata$x:0000CF10 ; ===========================================================================
.xdata$x:0000CF10
.xdata$x:0000CF10 ; Segment type: Pure data
.xdata$x:0000CF10 ; Segment permissions: Read
.xdata$x:0000CF10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF10                 assume cs:_xdata$x
.xdata$x:0000CF10                 ;org 0CF10h
.xdata$x:0000CF10 ; COMDAT (pick associative to section at 55A0)
.xdata$x:0000CF10 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000CF10                                         ; DATA XREF: .xdata$x:0000CF20o
.xdata$x:0000CF11                 db 0FFh
.xdata$x:0000CF12                 db 0FFh
.xdata$x:0000CF13                 db 0FFh
.xdata$x:0000CF14                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000CF18 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000CF18                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000CF19                 db    5
.xdata$x:0000CF1A                 db  93h ; ô
.xdata$x:0000CF1B                 db  19h
.xdata$x:0000CF1C                 db    1
.xdata$x:0000CF1D                 db    0
.xdata$x:0000CF1E                 db    0
.xdata$x:0000CF1F                 db    0
.xdata$x:0000CF20                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000CF24                 db    0
.xdata$x:0000CF25                 db    0
.xdata$x:0000CF26                 db    0
.xdata$x:0000CF27                 db    0
.xdata$x:0000CF28                 db    0
.xdata$x:0000CF29                 db    0
.xdata$x:0000CF2A                 db    0
.xdata$x:0000CF2B                 db    0
.xdata$x:0000CF2C                 db    0
.xdata$x:0000CF2D                 db    0
.xdata$x:0000CF2E                 db    0
.xdata$x:0000CF2F                 db    0
.xdata$x:0000CF30                 db    0
.xdata$x:0000CF31                 db    0
.xdata$x:0000CF32                 db    0
.xdata$x:0000CF33                 db    0
.xdata$x:0000CF34                 db    0
.xdata$x:0000CF35                 db    0
.xdata$x:0000CF36                 db    0
.xdata$x:0000CF37                 db    0
.xdata$x:0000CF38                 db    0
.xdata$x:0000CF39                 db    0
.xdata$x:0000CF3A                 db    0
.xdata$x:0000CF3B                 db    0
.xdata$x:0000CF3B _xdata$x        ends
.xdata$x:0000CF3B
.xdata$x:0000CF3C ; ===========================================================================
.xdata$x:0000CF3C
.xdata$x:0000CF3C ; Segment type: Pure data
.xdata$x:0000CF3C ; Segment permissions: Read
.xdata$x:0000CF3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF3C                 assume cs:_xdata$x
.xdata$x:0000CF3C                 ;org 0CF3Ch
.xdata$x:0000CF3C ; COMDAT (pick associative to section at 6F64)
.xdata$x:0000CF3C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CF3C                                         ; DATA XREF: .xdata$x:0000CF4Co
.xdata$x:0000CF3D                 db 0FFh
.xdata$x:0000CF3E                 db 0FFh
.xdata$x:0000CF3F                 db 0FFh
.xdata$x:0000CF40                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CF44 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CF44                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CF45                 db    5
.xdata$x:0000CF46                 db  93h ; ô
.xdata$x:0000CF47                 db  19h
.xdata$x:0000CF48                 db    1
.xdata$x:0000CF49                 db    0
.xdata$x:0000CF4A                 db    0
.xdata$x:0000CF4B                 db    0
.xdata$x:0000CF4C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CF50                 db    0
.xdata$x:0000CF51                 db    0
.xdata$x:0000CF52                 db    0
.xdata$x:0000CF53                 db    0
.xdata$x:0000CF54                 db    0
.xdata$x:0000CF55                 db    0
.xdata$x:0000CF56                 db    0
.xdata$x:0000CF57                 db    0
.xdata$x:0000CF58                 db    0
.xdata$x:0000CF59                 db    0
.xdata$x:0000CF5A                 db    0
.xdata$x:0000CF5B                 db    0
.xdata$x:0000CF5C                 db    0
.xdata$x:0000CF5D                 db    0
.xdata$x:0000CF5E                 db    0
.xdata$x:0000CF5F                 db    0
.xdata$x:0000CF60                 db    0
.xdata$x:0000CF61                 db    0
.xdata$x:0000CF62                 db    0
.xdata$x:0000CF63                 db    0
.xdata$x:0000CF64                 db    0
.xdata$x:0000CF65                 db    0
.xdata$x:0000CF66                 db    0
.xdata$x:0000CF67                 db    0
.xdata$x:0000CF67 _xdata$x        ends
.xdata$x:0000CF67
.xdata$x:0000CF68 ; ===========================================================================
.xdata$x:0000CF68
.xdata$x:0000CF68 ; Segment type: Pure data
.xdata$x:0000CF68 ; Segment permissions: Read
.xdata$x:0000CF68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF68                 assume cs:_xdata$x
.xdata$x:0000CF68                 ;org 0CF68h
.xdata$x:0000CF68 ; COMDAT (pick associative to section at 6124)
.xdata$x:0000CF68 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CF68                                         ; DATA XREF: .xdata$x:0000CF78o
.xdata$x:0000CF69                 db 0FFh
.xdata$x:0000CF6A                 db 0FFh
.xdata$x:0000CF6B                 db 0FFh
.xdata$x:0000CF6C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000CF70 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CF70                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CF71                 db    5
.xdata$x:0000CF72                 db  93h ; ô
.xdata$x:0000CF73                 db  19h
.xdata$x:0000CF74                 db    1
.xdata$x:0000CF75                 db    0
.xdata$x:0000CF76                 db    0
.xdata$x:0000CF77                 db    0
.xdata$x:0000CF78                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000CF7C                 db    0
.xdata$x:0000CF7D                 db    0
.xdata$x:0000CF7E                 db    0
.xdata$x:0000CF7F                 db    0
.xdata$x:0000CF80                 db    0
.xdata$x:0000CF81                 db    0
.xdata$x:0000CF82                 db    0
.xdata$x:0000CF83                 db    0
.xdata$x:0000CF84                 db    0
.xdata$x:0000CF85                 db    0
.xdata$x:0000CF86                 db    0
.xdata$x:0000CF87                 db    0
.xdata$x:0000CF88                 db    0
.xdata$x:0000CF89                 db    0
.xdata$x:0000CF8A                 db    0
.xdata$x:0000CF8B                 db    0
.xdata$x:0000CF8C                 db    0
.xdata$x:0000CF8D                 db    0
.xdata$x:0000CF8E                 db    0
.xdata$x:0000CF8F                 db    0
.xdata$x:0000CF90                 db    0
.xdata$x:0000CF91                 db    0
.xdata$x:0000CF92                 db    0
.xdata$x:0000CF93                 db    0
.xdata$x:0000CF93 _xdata$x        ends
.xdata$x:0000CF93
.xdata$x:0000CF94 ; ===========================================================================
.xdata$x:0000CF94
.xdata$x:0000CF94 ; Segment type: Pure data
.xdata$x:0000CF94 ; Segment permissions: Read
.xdata$x:0000CF94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF94                 assume cs:_xdata$x
.xdata$x:0000CF94                 ;org 0CF94h
.xdata$x:0000CF94 ; COMDAT (pick associative to section at 626C)
.xdata$x:0000CF94 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CF94                                         ; DATA XREF: .xdata$x:0000CFA4o
.xdata$x:0000CF95                 db 0FFh
.xdata$x:0000CF96                 db 0FFh
.xdata$x:0000CF97                 db 0FFh
.xdata$x:0000CF98                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000CF9C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CF9C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000CF9D                 db    5
.xdata$x:0000CF9E                 db  93h ; ô
.xdata$x:0000CF9F                 db  19h
.xdata$x:0000CFA0                 db    1
.xdata$x:0000CFA1                 db    0
.xdata$x:0000CFA2                 db    0
.xdata$x:0000CFA3                 db    0
.xdata$x:0000CFA4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000CFA8                 align 20h
.xdata$x:0000CFA8 _xdata$x        ends
.xdata$x:0000CFA8
.xdata$x:0000CFC0 ; ===========================================================================
.xdata$x:0000CFC0
.xdata$x:0000CFC0 ; Segment type: Pure data
.xdata$x:0000CFC0 ; Segment permissions: Read
.xdata$x:0000CFC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFC0                 assume cs:_xdata$x
.xdata$x:0000CFC0                 ;org 0CFC0h
.xdata$x:0000CFC0 ; COMDAT (pick associative to section at 61D4)
.xdata$x:0000CFC0 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000CFC0                                         ; DATA XREF: .xdata$x:0000CFD0o
.xdata$x:0000CFC1                 db 0FFh
.xdata$x:0000CFC2                 db 0FFh
.xdata$x:0000CFC3                 db 0FFh
.xdata$x:0000CFC4                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000CFC8 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000CFC8                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000CFC9                 db    5
.xdata$x:0000CFCA                 db  93h ; ô
.xdata$x:0000CFCB                 db  19h
.xdata$x:0000CFCC                 db    1
.xdata$x:0000CFCD                 db    0
.xdata$x:0000CFCE                 db    0
.xdata$x:0000CFCF                 db    0
.xdata$x:0000CFD0                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000CFD4                 db    0
.xdata$x:0000CFD5                 db    0
.xdata$x:0000CFD6                 db    0
.xdata$x:0000CFD7                 db    0
.xdata$x:0000CFD8                 db    0
.xdata$x:0000CFD9                 db    0
.xdata$x:0000CFDA                 db    0
.xdata$x:0000CFDB                 db    0
.xdata$x:0000CFDC                 db    0
.xdata$x:0000CFDD                 db    0
.xdata$x:0000CFDE                 db    0
.xdata$x:0000CFDF                 db    0
.xdata$x:0000CFE0                 db    0
.xdata$x:0000CFE1                 db    0
.xdata$x:0000CFE2                 db    0
.xdata$x:0000CFE3                 db    0
.xdata$x:0000CFE4                 db    0
.xdata$x:0000CFE5                 db    0
.xdata$x:0000CFE6                 db    0
.xdata$x:0000CFE7                 db    0
.xdata$x:0000CFE8                 db    0
.xdata$x:0000CFE9                 db    0
.xdata$x:0000CFEA                 db    0
.xdata$x:0000CFEB                 db    0
.xdata$x:0000CFEB _xdata$x        ends
.xdata$x:0000CFEB
.xdata$x:0000CFEC ; ===========================================================================
.xdata$x:0000CFEC
.xdata$x:0000CFEC ; Segment type: Pure data
.xdata$x:0000CFEC ; Segment permissions: Read
.xdata$x:0000CFEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFEC                 assume cs:_xdata$x
.xdata$x:0000CFEC                 ;org 0CFECh
.xdata$x:0000CFEC ; COMDAT (pick associative to section at 7CD4)
.xdata$x:0000CFEC __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000CFEC                                         ; DATA XREF: .xdata$x:0000D004o
.xdata$x:0000CFED                 db 0FFh
.xdata$x:0000CFEE                 db 0FFh
.xdata$x:0000CFEF                 db 0FFh
.xdata$x:0000CFF0                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000CFF4                 align 8
.xdata$x:0000CFF8                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000CFFC __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000CFFC                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000CFFD                 db    5
.xdata$x:0000CFFE                 db  93h ; ô
.xdata$x:0000CFFF                 db  19h
.xdata$x:0000D000                 db    2
.xdata$x:0000D001                 db    0
.xdata$x:0000D002                 db    0
.xdata$x:0000D003                 db    0
.xdata$x:0000D004                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000D008                 align 20h
.xdata$x:0000D008 _xdata$x        ends
.xdata$x:0000D008
.xdata$x:0000D020 ; ===========================================================================
.xdata$x:0000D020
.xdata$x:0000D020 ; Segment type: Pure data
.xdata$x:0000D020 ; Segment permissions: Read
.xdata$x:0000D020 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D020                 assume cs:_xdata$x
.xdata$x:0000D020                 ;org 0D020h
.xdata$x:0000D020 ; COMDAT (pick associative to section at 7620)
.xdata$x:0000D020 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000D020                                         ; DATA XREF: .xdata$x:0000D030o
.xdata$x:0000D021                 db 0FFh
.xdata$x:0000D022                 db 0FFh
.xdata$x:0000D023                 db 0FFh
.xdata$x:0000D024                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000D028 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D028                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000D029                 db    5
.xdata$x:0000D02A                 db  93h ; ô
.xdata$x:0000D02B                 db  19h
.xdata$x:0000D02C                 db    1
.xdata$x:0000D02D                 db    0
.xdata$x:0000D02E                 db    0
.xdata$x:0000D02F                 db    0
.xdata$x:0000D030                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000D034                 db    0
.xdata$x:0000D035                 db    0
.xdata$x:0000D036                 db    0
.xdata$x:0000D037                 db    0
.xdata$x:0000D038                 db    0
.xdata$x:0000D039                 db    0
.xdata$x:0000D03A                 db    0
.xdata$x:0000D03B                 db    0
.xdata$x:0000D03C                 db    0
.xdata$x:0000D03D                 db    0
.xdata$x:0000D03E                 db    0
.xdata$x:0000D03F                 db    0
.xdata$x:0000D040                 db    0
.xdata$x:0000D041                 db    0
.xdata$x:0000D042                 db    0
.xdata$x:0000D043                 db    0
.xdata$x:0000D044                 db    0
.xdata$x:0000D045                 db    0
.xdata$x:0000D046                 db    0
.xdata$x:0000D047                 db    0
.xdata$x:0000D048                 db    0
.xdata$x:0000D049                 db    0
.xdata$x:0000D04A                 db    0
.xdata$x:0000D04B                 db    0
.xdata$x:0000D04B _xdata$x        ends
.xdata$x:0000D04B
.xdata$x:0000D04C ; ===========================================================================
.xdata$x:0000D04C
.xdata$x:0000D04C ; Segment type: Pure data
.xdata$x:0000D04C ; Segment permissions: Read
.xdata$x:0000D04C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D04C                 assume cs:_xdata$x
.xdata$x:0000D04C                 ;org 0D04Ch
.xdata$x:0000D04C ; COMDAT (pick associative to section at C48C)
.xdata$x:0000D04C __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000D04C                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000D04D                 db    5
.xdata$x:0000D04E                 db  93h ; ô
.xdata$x:0000D04F                 db  19h
.xdata$x:0000D050                 db  0Eh
.xdata$x:0000D051                 db    0
.xdata$x:0000D052                 db    0
.xdata$x:0000D053                 db    0
.xdata$x:0000D054                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000D058                 db    0
.xdata$x:0000D059                 db    0
.xdata$x:0000D05A                 db    0
.xdata$x:0000D05B                 db    0
.xdata$x:0000D05C                 db    0
.xdata$x:0000D05D                 db    0
.xdata$x:0000D05E                 db    0
.xdata$x:0000D05F                 db    0
.xdata$x:0000D060                 db    0
.xdata$x:0000D061                 db    0
.xdata$x:0000D062                 db    0
.xdata$x:0000D063                 db    0
.xdata$x:0000D064                 db    0
.xdata$x:0000D065                 db    0
.xdata$x:0000D066                 db    0
.xdata$x:0000D067                 db    0
.xdata$x:0000D068                 db    0
.xdata$x:0000D069                 db    0
.xdata$x:0000D06A                 db    0
.xdata$x:0000D06B                 db    0
.xdata$x:0000D06C                 db    0
.xdata$x:0000D06D                 db    0
.xdata$x:0000D06E                 db    0
.xdata$x:0000D06F                 db    0
.xdata$x:0000D070 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000D070                                         ; DATA XREF: .xdata$x:0000D054o
.xdata$x:0000D071                 db 0FFh
.xdata$x:0000D072                 db 0FFh
.xdata$x:0000D073                 db 0FFh
.xdata$x:0000D074                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000D078                 db    0
.xdata$x:0000D079                 db    0
.xdata$x:0000D07A                 db    0
.xdata$x:0000D07B                 db    0
.xdata$x:0000D07C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000D080                 db    1
.xdata$x:0000D081                 db    0
.xdata$x:0000D082                 db    0
.xdata$x:0000D083                 db    0
.xdata$x:0000D084                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000D088                 db    2
.xdata$x:0000D089                 db    0
.xdata$x:0000D08A                 db    0
.xdata$x:0000D08B                 db    0
.xdata$x:0000D08C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000D090                 db    3
.xdata$x:0000D091                 db    0
.xdata$x:0000D092                 db    0
.xdata$x:0000D093                 db    0
.xdata$x:0000D094                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000D098                 db    4
.xdata$x:0000D099                 db    0
.xdata$x:0000D09A                 db    0
.xdata$x:0000D09B                 db    0
.xdata$x:0000D09C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000D0A0                 db    3
.xdata$x:0000D0A1                 db    0
.xdata$x:0000D0A2                 db    0
.xdata$x:0000D0A3                 db    0
.xdata$x:0000D0A4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000D0A8                 db    6
.xdata$x:0000D0A9                 db    0
.xdata$x:0000D0AA                 db    0
.xdata$x:0000D0AB                 db    0
.xdata$x:0000D0AC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000D0B0                 db    7
.xdata$x:0000D0B1                 db    0
.xdata$x:0000D0B2                 db    0
.xdata$x:0000D0B3                 db    0
.xdata$x:0000D0B4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000D0B8                 db    3
.xdata$x:0000D0B9                 db    0
.xdata$x:0000D0BA                 db    0
.xdata$x:0000D0BB                 db    0
.xdata$x:0000D0BC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000D0C0                 db    9
.xdata$x:0000D0C1                 db    0
.xdata$x:0000D0C2                 db    0
.xdata$x:0000D0C3                 db    0
.xdata$x:0000D0C4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000D0C8                 db    3
.xdata$x:0000D0C9                 db    0
.xdata$x:0000D0CA                 db    0
.xdata$x:0000D0CB                 db    0
.xdata$x:0000D0CC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000D0D0                 db  0Bh
.xdata$x:0000D0D1                 db    0
.xdata$x:0000D0D2                 db    0
.xdata$x:0000D0D3                 db    0
.xdata$x:0000D0D4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000D0D8                 db  0Ch
.xdata$x:0000D0D9                 db    0
.xdata$x:0000D0DA                 db    0
.xdata$x:0000D0DB                 db    0
.xdata$x:0000D0DC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000D0DC _xdata$x        ends
.xdata$x:0000D0DC
.xdata$x:0000D0E0 ; ===========================================================================
.xdata$x:0000D0E0
.xdata$x:0000D0E0 ; Segment type: Pure data
.xdata$x:0000D0E0 ; Segment permissions: Read
.xdata$x:0000D0E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D0E0                 assume cs:_xdata$x
.xdata$x:0000D0E0                 ;org 0D0E0h
.xdata$x:0000D0E0 ; COMDAT (pick associative to section at A804)
.xdata$x:0000D0E0 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D0E0                                         ; DATA XREF: .xdata$x:0000D0F0o
.xdata$x:0000D0E1                 db 0FFh
.xdata$x:0000D0E2                 db 0FFh
.xdata$x:0000D0E3                 db 0FFh
.xdata$x:0000D0E4                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000D0E8 __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D0E8                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000D0E9                 db    5
.xdata$x:0000D0EA                 db  93h ; ô
.xdata$x:0000D0EB                 db  19h
.xdata$x:0000D0EC                 db    1
.xdata$x:0000D0ED                 db    0
.xdata$x:0000D0EE                 db    0
.xdata$x:0000D0EF                 db    0
.xdata$x:0000D0F0                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000D0F4                 db    0
.xdata$x:0000D0F5                 db    0
.xdata$x:0000D0F6                 db    0
.xdata$x:0000D0F7                 db    0
.xdata$x:0000D0F8                 db    0
.xdata$x:0000D0F9                 db    0
.xdata$x:0000D0FA                 db    0
.xdata$x:0000D0FB                 db    0
.xdata$x:0000D0FC                 db    0
.xdata$x:0000D0FD                 db    0
.xdata$x:0000D0FE                 db    0
.xdata$x:0000D0FF                 db    0
.xdata$x:0000D100                 db    0
.xdata$x:0000D101                 db    0
.xdata$x:0000D102                 db    0
.xdata$x:0000D103                 db    0
.xdata$x:0000D104                 db    0
.xdata$x:0000D105                 db    0
.xdata$x:0000D106                 db    0
.xdata$x:0000D107                 db    0
.xdata$x:0000D108                 db    0
.xdata$x:0000D109                 db    0
.xdata$x:0000D10A                 db    0
.xdata$x:0000D10B                 db    0
.xdata$x:0000D10B _xdata$x        ends
.xdata$x:0000D10B
.xdata$x:0000D10C ; ===========================================================================
.xdata$x:0000D10C
.xdata$x:0000D10C ; Segment type: Pure data
.xdata$x:0000D10C ; Segment permissions: Read
.xdata$x:0000D10C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D10C                 assume cs:_xdata$x
.xdata$x:0000D10C                 ;org 0D10Ch
.xdata$x:0000D10C ; COMDAT (pick associative to section at B0FC)
.xdata$x:0000D10C __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D10C                                         ; DATA XREF: .xdata$x:0000D11Co
.xdata$x:0000D10D                 db 0FFh
.xdata$x:0000D10E                 db 0FFh
.xdata$x:0000D10F                 db 0FFh
.xdata$x:0000D110                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000D114 __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D114                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000D115                 db    5
.xdata$x:0000D116                 db  93h ; ô
.xdata$x:0000D117                 db  19h
.xdata$x:0000D118                 db    1
.xdata$x:0000D119                 db    0
.xdata$x:0000D11A                 db    0
.xdata$x:0000D11B                 db    0
.xdata$x:0000D11C                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000D120                 db    0
.xdata$x:0000D121                 db    0
.xdata$x:0000D122                 db    0
.xdata$x:0000D123                 db    0
.xdata$x:0000D124                 db    0
.xdata$x:0000D125                 db    0
.xdata$x:0000D126                 db    0
.xdata$x:0000D127                 db    0
.xdata$x:0000D128                 db    0
.xdata$x:0000D129                 db    0
.xdata$x:0000D12A                 db    0
.xdata$x:0000D12B                 db    0
.xdata$x:0000D12C                 db    0
.xdata$x:0000D12D                 db    0
.xdata$x:0000D12E                 db    0
.xdata$x:0000D12F                 db    0
.xdata$x:0000D130                 db    0
.xdata$x:0000D131                 db    0
.xdata$x:0000D132                 db    0
.xdata$x:0000D133                 db    0
.xdata$x:0000D134                 db    0
.xdata$x:0000D135                 db    0
.xdata$x:0000D136                 db    0
.xdata$x:0000D137                 db    0
.xdata$x:0000D137 _xdata$x        ends
.xdata$x:0000D137
.xdata$x:0000D138 ; ===========================================================================
.xdata$x:0000D138
.xdata$x:0000D138 ; Segment type: Pure data
.xdata$x:0000D138 ; Segment permissions: Read
.xdata$x:0000D138 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D138                 assume cs:_xdata$x
.xdata$x:0000D138                 ;org 0D138h
.xdata$x:0000D138 ; COMDAT (pick associative to section at 8F38)
.xdata$x:0000D138 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000D138                                         ; DATA XREF: .xdata$x:0000D1C0o
.xdata$x:0000D139                 db    0
.xdata$x:0000D13A                 db    0
.xdata$x:0000D13B                 db    0
.xdata$x:0000D13C                 db    0
.xdata$x:0000D13D                 db    0
.xdata$x:0000D13E                 db    0
.xdata$x:0000D13F                 db    0
.xdata$x:0000D140                 db    0
.xdata$x:0000D141                 db    0
.xdata$x:0000D142                 db    0
.xdata$x:0000D143                 db    0
.xdata$x:0000D144                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000D148 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000D148                                         ; DATA XREF: .xdata$x:0000D1ACo
.xdata$x:0000D149                 db    0
.xdata$x:0000D14A                 db    0
.xdata$x:0000D14B                 db    0
.xdata$x:0000D14C                 db    0
.xdata$x:0000D14D                 db    0
.xdata$x:0000D14E                 db    0
.xdata$x:0000D14F                 db    0
.xdata$x:0000D150                 db    0
.xdata$x:0000D151                 db    0
.xdata$x:0000D152                 db    0
.xdata$x:0000D153                 db    0
.xdata$x:0000D154                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000D158 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000D158                                         ; DATA XREF: .xdata$x:0000D180o
.xdata$x:0000D159                 db 0FFh
.xdata$x:0000D15A                 db 0FFh
.xdata$x:0000D15B                 db 0FFh
.xdata$x:0000D15C                 db    0
.xdata$x:0000D15D                 db    0
.xdata$x:0000D15E                 db    0
.xdata$x:0000D15F                 db    0
.xdata$x:0000D160                 db 0FFh
.xdata$x:0000D161                 db 0FFh
.xdata$x:0000D162                 db 0FFh
.xdata$x:0000D163                 db 0FFh
.xdata$x:0000D164                 db    0
.xdata$x:0000D165                 db    0
.xdata$x:0000D166                 db    0
.xdata$x:0000D167                 db    0
.xdata$x:0000D168                 db    1
.xdata$x:0000D169                 db    0
.xdata$x:0000D16A                 db    0
.xdata$x:0000D16B                 db    0
.xdata$x:0000D16C                 db    0
.xdata$x:0000D16D                 db    0
.xdata$x:0000D16E                 db    0
.xdata$x:0000D16F                 db    0
.xdata$x:0000D170                 db    1
.xdata$x:0000D171                 db    0
.xdata$x:0000D172                 db    0
.xdata$x:0000D173                 db    0
.xdata$x:0000D174                 db    0
.xdata$x:0000D175                 db    0
.xdata$x:0000D176                 db    0
.xdata$x:0000D177                 db    0
.xdata$x:0000D178 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000D178                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000D179                 db    5
.xdata$x:0000D17A                 db  93h ; ô
.xdata$x:0000D17B                 db  19h
.xdata$x:0000D17C                 db    4
.xdata$x:0000D17D                 db    0
.xdata$x:0000D17E                 db    0
.xdata$x:0000D17F                 db    0
.xdata$x:0000D180                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000D184                 db    2
.xdata$x:0000D185                 db    0
.xdata$x:0000D186                 db    0
.xdata$x:0000D187                 db    0
.xdata$x:0000D188                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000D18C                 db    0
.xdata$x:0000D18D                 db    0
.xdata$x:0000D18E                 db    0
.xdata$x:0000D18F                 db    0
.xdata$x:0000D190                 db    0
.xdata$x:0000D191                 db    0
.xdata$x:0000D192                 db    0
.xdata$x:0000D193                 db    0
.xdata$x:0000D194                 db    0
.xdata$x:0000D195                 db    0
.xdata$x:0000D196                 db    0
.xdata$x:0000D197                 db    0
.xdata$x:0000D198                 db    0
.xdata$x:0000D199                 db    0
.xdata$x:0000D19A                 db    0
.xdata$x:0000D19B                 db    0
.xdata$x:0000D19C __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000D19C                                         ; DATA XREF: .xdata$x:0000D188o
.xdata$x:0000D19D                 db    0
.xdata$x:0000D19E                 db    0
.xdata$x:0000D19F                 db    0
.xdata$x:0000D1A0                 db    2
.xdata$x:0000D1A1                 db    0
.xdata$x:0000D1A2                 db    0
.xdata$x:0000D1A3                 db    0
.xdata$x:0000D1A4                 db    3
.xdata$x:0000D1A5                 db    0
.xdata$x:0000D1A6                 db    0
.xdata$x:0000D1A7                 db    0
.xdata$x:0000D1A8                 db    1
.xdata$x:0000D1A9                 db    0
.xdata$x:0000D1AA                 db    0
.xdata$x:0000D1AB                 db    0
.xdata$x:0000D1AC                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000D1B0                 db    0
.xdata$x:0000D1B1                 db    0
.xdata$x:0000D1B2                 db    0
.xdata$x:0000D1B3                 db    0
.xdata$x:0000D1B4                 db    0
.xdata$x:0000D1B5                 db    0
.xdata$x:0000D1B6                 db    0
.xdata$x:0000D1B7                 db    0
.xdata$x:0000D1B8                 db    3
.xdata$x:0000D1B9                 db    0
.xdata$x:0000D1BA                 db    0
.xdata$x:0000D1BB                 db    0
.xdata$x:0000D1BC                 db    1
.xdata$x:0000D1BD                 db    0
.xdata$x:0000D1BE                 db    0
.xdata$x:0000D1BF                 db    0
.xdata$x:0000D1C0                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000D1C0 _xdata$x        ends
.xdata$x:0000D1C0
.xdata$x:0000D1C4 ; ===========================================================================
.xdata$x:0000D1C4
.xdata$x:0000D1C4 ; Segment type: Pure data
.xdata$x:0000D1C4 ; Segment permissions: Read
.xdata$x:0000D1C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D1C4                 assume cs:_xdata$x
.xdata$x:0000D1C4                 ;org 0D1C4h
.xdata$x:0000D1C4 ; COMDAT (pick associative to section at 9B50)
.xdata$x:0000D1C4 __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000D1C4                                         ; DATA XREF: .xdata$x:0000D1DCo
.xdata$x:0000D1C5                 db 0FFh
.xdata$x:0000D1C6                 db 0FFh
.xdata$x:0000D1C7                 db 0FFh
.xdata$x:0000D1C8                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000D1CC                 align 10h
.xdata$x:0000D1D0                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000D1D4 __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000D1D4                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000D1D5                 db    5
.xdata$x:0000D1D6                 db  93h ; ô
.xdata$x:0000D1D7                 db  19h
.xdata$x:0000D1D8                 db    2
.xdata$x:0000D1D9                 db    0
.xdata$x:0000D1DA                 db    0
.xdata$x:0000D1DB                 db    0
.xdata$x:0000D1DC                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000D1E0                 db    0
.xdata$x:0000D1E1                 db    0
.xdata$x:0000D1E2                 db    0
.xdata$x:0000D1E3                 db    0
.xdata$x:0000D1E4                 db    0
.xdata$x:0000D1E5                 db    0
.xdata$x:0000D1E6                 db    0
.xdata$x:0000D1E7                 db    0
.xdata$x:0000D1E8                 db    0
.xdata$x:0000D1E9                 db    0
.xdata$x:0000D1EA                 db    0
.xdata$x:0000D1EB                 db    0
.xdata$x:0000D1EC                 db    0
.xdata$x:0000D1ED                 db    0
.xdata$x:0000D1EE                 db    0
.xdata$x:0000D1EF                 db    0
.xdata$x:0000D1F0                 db    0
.xdata$x:0000D1F1                 db    0
.xdata$x:0000D1F2                 db    0
.xdata$x:0000D1F3                 db    0
.xdata$x:0000D1F4                 db    0
.xdata$x:0000D1F5                 db    0
.xdata$x:0000D1F6                 db    0
.xdata$x:0000D1F7                 db    0
.xdata$x:0000D1F7 _xdata$x        ends
.xdata$x:0000D1F7
.xdata$x:0000D1F8 ; ===========================================================================
.xdata$x:0000D1F8
.xdata$x:0000D1F8 ; Segment type: Pure data
.xdata$x:0000D1F8 ; Segment permissions: Read
.xdata$x:0000D1F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D1F8                 assume cs:_xdata$x
.xdata$x:0000D1F8                 ;org 0D1F8h
.xdata$x:0000D1F8 ; COMDAT (pick associative to section at 7C38)
.xdata$x:0000D1F8 __unwindtable$??1foundInfo@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000D210o
.xdata$x:0000D1F9                 db 0FFh
.xdata$x:0000D1FA                 db 0FFh
.xdata$x:0000D1FB                 db 0FFh
.xdata$x:0000D1FC                 dd offset __unwindfunclet$??1foundInfo@@QAE@XZ$0
.xdata$x:0000D200                 db    0
.xdata$x:0000D201                 db    0
.xdata$x:0000D202                 db    0
.xdata$x:0000D203                 db    0
.xdata$x:0000D204                 dd offset __unwindfunclet$??1foundInfo@@QAE@XZ$1
.xdata$x:0000D208 __ehfuncinfo$??1foundInfo@@QAE@XZ db  22h ; "
.xdata$x:0000D208                                         ; DATA XREF: __ehhandler$??1foundInfo@@QAE@XZ+11o
.xdata$x:0000D209                 db    5
.xdata$x:0000D20A                 db  93h ; ô
.xdata$x:0000D20B                 db  19h
.xdata$x:0000D20C                 db    2
.xdata$x:0000D20D                 db    0
.xdata$x:0000D20E                 db    0
.xdata$x:0000D20F                 db    0
.xdata$x:0000D210                 dd offset __unwindtable$??1foundInfo@@QAE@XZ
.xdata$x:0000D214                 db    0
.xdata$x:0000D215                 db    0
.xdata$x:0000D216                 db    0
.xdata$x:0000D217                 db    0
.xdata$x:0000D218                 db    0
.xdata$x:0000D219                 db    0
.xdata$x:0000D21A                 db    0
.xdata$x:0000D21B                 db    0
.xdata$x:0000D21C                 db    0
.xdata$x:0000D21D                 db    0
.xdata$x:0000D21E                 db    0
.xdata$x:0000D21F                 db    0
.xdata$x:0000D220                 db    0
.xdata$x:0000D221                 db    0
.xdata$x:0000D222                 db    0
.xdata$x:0000D223                 db    0
.xdata$x:0000D224                 db    0
.xdata$x:0000D225                 db    0
.xdata$x:0000D226                 db    0
.xdata$x:0000D227                 db    0
.xdata$x:0000D228                 db    0
.xdata$x:0000D229                 db    0
.xdata$x:0000D22A                 db    0
.xdata$x:0000D22B                 db    0
.xdata$x:0000D22B _xdata$x        ends
.xdata$x:0000D22B
.xdata$x:0000D22C ; ===========================================================================
.xdata$x:0000D22C
.xdata$x:0000D22C ; Segment type: Pure data
.xdata$x:0000D22C ; Segment permissions: Read
.xdata$x:0000D22C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D22C                 assume cs:_xdata$x
.xdata$x:0000D22C                 ;org 0D22Ch
.xdata$x:0000D22C ; COMDAT (pick associative to section at ADB4)
.xdata$x:0000D22C __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db 0FFh
.xdata$x:0000D22C                                         ; DATA XREF: .xdata$x:0000D23Co
.xdata$x:0000D22D                 db 0FFh
.xdata$x:0000D22E                 db 0FFh
.xdata$x:0000D22F                 db 0FFh
.xdata$x:0000D230                 dd offset __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0
.xdata$x:0000D234 __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db  22h ; "
.xdata$x:0000D234                                         ; DATA XREF: __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z+11o
.xdata$x:0000D235                 db    5
.xdata$x:0000D236                 db  93h ; ô
.xdata$x:0000D237                 db  19h
.xdata$x:0000D238                 db    1
.xdata$x:0000D239                 db    0
.xdata$x:0000D23A                 db    0
.xdata$x:0000D23B                 db    0
.xdata$x:0000D23C                 dd offset __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.xdata$x:0000D240                 db    0
.xdata$x:0000D241                 db    0
.xdata$x:0000D242                 db    0
.xdata$x:0000D243                 db    0
.xdata$x:0000D244                 db    0
.xdata$x:0000D245                 db    0
.xdata$x:0000D246                 db    0
.xdata$x:0000D247                 db    0
.xdata$x:0000D248                 db    0
.xdata$x:0000D249                 db    0
.xdata$x:0000D24A                 db    0
.xdata$x:0000D24B                 db    0
.xdata$x:0000D24C                 db    0
.xdata$x:0000D24D                 db    0
.xdata$x:0000D24E                 db    0
.xdata$x:0000D24F                 db    0
.xdata$x:0000D250                 db    0
.xdata$x:0000D251                 db    0
.xdata$x:0000D252                 db    0
.xdata$x:0000D253                 db    0
.xdata$x:0000D254                 db    0
.xdata$x:0000D255                 db    0
.xdata$x:0000D256                 db    0
.xdata$x:0000D257                 db    0
.xdata$x:0000D257 _xdata$x        ends
.xdata$x:0000D257
.xdata$x:0000D258 ; ===========================================================================
.xdata$x:0000D258
.xdata$x:0000D258 ; Segment type: Pure data
.xdata$x:0000D258 ; Segment permissions: Read
.xdata$x:0000D258 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D258                 assume cs:_xdata$x
.xdata$x:0000D258                 ;org 0D258h
.xdata$x:0000D258 ; COMDAT (pick associative to section at 5E60)
.xdata$x:0000D258 __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D258                                         ; DATA XREF: .xdata$x:0000D268o
.xdata$x:0000D259                 db 0FFh
.xdata$x:0000D25A                 db 0FFh
.xdata$x:0000D25B                 db 0FFh
.xdata$x:0000D25C                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D260 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D260                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D261                 db    5
.xdata$x:0000D262                 db  93h ; ô
.xdata$x:0000D263                 db  19h
.xdata$x:0000D264                 db    1
.xdata$x:0000D265                 db    0
.xdata$x:0000D266                 db    0
.xdata$x:0000D267                 db    0
.xdata$x:0000D268                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000D26C                 db    0
.xdata$x:0000D26D                 db    0
.xdata$x:0000D26E                 db    0
.xdata$x:0000D26F                 db    0
.xdata$x:0000D270                 db    0
.xdata$x:0000D271                 db    0
.xdata$x:0000D272                 db    0
.xdata$x:0000D273                 db    0
.xdata$x:0000D274                 db    0
.xdata$x:0000D275                 db    0
.xdata$x:0000D276                 db    0
.xdata$x:0000D277                 db    0
.xdata$x:0000D278                 db    0
.xdata$x:0000D279                 db    0
.xdata$x:0000D27A                 db    0
.xdata$x:0000D27B                 db    0
.xdata$x:0000D27C                 db    0
.xdata$x:0000D27D                 db    0
.xdata$x:0000D27E                 db    0
.xdata$x:0000D27F                 db    0
.xdata$x:0000D280                 db    0
.xdata$x:0000D281                 db    0
.xdata$x:0000D282                 db    0
.xdata$x:0000D283                 db    0
.xdata$x:0000D283 _xdata$x        ends
.xdata$x:0000D283
.xdata$x:0000D284 ; ===========================================================================
.xdata$x:0000D284
.xdata$x:0000D284 ; Segment type: Pure data
.xdata$x:0000D284 ; Segment permissions: Read
.xdata$x:0000D284 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D284                 assume cs:_xdata$x
.xdata$x:0000D284                 ;org 0D284h
.xdata$x:0000D284 ; COMDAT (pick associative to section at 7534)
.xdata$x:0000D284 __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D284                                         ; DATA XREF: .xdata$x:0000D294o
.xdata$x:0000D285                 db 0FFh
.xdata$x:0000D286                 db 0FFh
.xdata$x:0000D287                 db 0FFh
.xdata$x:0000D288                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D28C __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D28C                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D28D                 db    5
.xdata$x:0000D28E                 db  93h ; ô
.xdata$x:0000D28F                 db  19h
.xdata$x:0000D290                 db    1
.xdata$x:0000D291                 db    0
.xdata$x:0000D292                 db    0
.xdata$x:0000D293                 db    0
.xdata$x:0000D294                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000D298                 db    0
.xdata$x:0000D299                 db    0
.xdata$x:0000D29A                 db    0
.xdata$x:0000D29B                 db    0
.xdata$x:0000D29C                 db    0
.xdata$x:0000D29D                 db    0
.xdata$x:0000D29E                 db    0
.xdata$x:0000D29F                 db    0
.xdata$x:0000D2A0                 db    0
.xdata$x:0000D2A1                 db    0
.xdata$x:0000D2A2                 db    0
.xdata$x:0000D2A3                 db    0
.xdata$x:0000D2A4                 db    0
.xdata$x:0000D2A5                 db    0
.xdata$x:0000D2A6                 db    0
.xdata$x:0000D2A7                 db    0
.xdata$x:0000D2A8                 db    0
.xdata$x:0000D2A9                 db    0
.xdata$x:0000D2AA                 db    0
.xdata$x:0000D2AB                 db    0
.xdata$x:0000D2AC                 db    0
.xdata$x:0000D2AD                 db    0
.xdata$x:0000D2AE                 db    0
.xdata$x:0000D2AF                 db    0
.xdata$x:0000D2AF _xdata$x        ends
.xdata$x:0000D2AF
.xdata$x:0000D2B0 ; ===========================================================================
.xdata$x:0000D2B0
.xdata$x:0000D2B0 ; Segment type: Pure data
.xdata$x:0000D2B0 ; Segment permissions: Read
.xdata$x:0000D2B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D2B0                 assume cs:_xdata$x
.xdata$x:0000D2B0                 ;org 0D2B0h
.xdata$x:0000D2B0 ; COMDAT (pick associative to section at 5A28)
.xdata$x:0000D2B0 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:0000D2B0                                         ; DATA XREF: .xdata$x:0000D2C0o
.xdata$x:0000D2B1                 db 0FFh
.xdata$x:0000D2B2                 db 0FFh
.xdata$x:0000D2B3                 db 0FFh
.xdata$x:0000D2B4                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:0000D2B8 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:0000D2B8                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:0000D2B9                 db    5
.xdata$x:0000D2BA                 db  93h ; ô
.xdata$x:0000D2BB                 db  19h
.xdata$x:0000D2BC                 db    1
.xdata$x:0000D2BD                 db    0
.xdata$x:0000D2BE                 db    0
.xdata$x:0000D2BF                 db    0
.xdata$x:0000D2C0                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:0000D2C4                 db    0
.xdata$x:0000D2C5                 db    0
.xdata$x:0000D2C6                 db    0
.xdata$x:0000D2C7                 db    0
.xdata$x:0000D2C8                 db    0
.xdata$x:0000D2C9                 db    0
.xdata$x:0000D2CA                 db    0
.xdata$x:0000D2CB                 db    0
.xdata$x:0000D2CC                 db    0
.xdata$x:0000D2CD                 db    0
.xdata$x:0000D2CE                 db    0
.xdata$x:0000D2CF                 db    0
.xdata$x:0000D2D0                 db    0
.xdata$x:0000D2D1                 db    0
.xdata$x:0000D2D2                 db    0
.xdata$x:0000D2D3                 db    0
.xdata$x:0000D2D4                 db    0
.xdata$x:0000D2D5                 db    0
.xdata$x:0000D2D6                 db    0
.xdata$x:0000D2D7                 db    0
.xdata$x:0000D2D8                 db    0
.xdata$x:0000D2D9                 db    0
.xdata$x:0000D2DA                 db    0
.xdata$x:0000D2DB                 db    0
.xdata$x:0000D2DB _xdata$x        ends
.xdata$x:0000D2DB
.xdata$x:0000D2DC ; ===========================================================================
.xdata$x:0000D2DC
.xdata$x:0000D2DC ; Segment type: Pure data
.xdata$x:0000D2DC ; Segment permissions: Read
.xdata$x:0000D2DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D2DC                 assume cs:_xdata$x
.xdata$x:0000D2DC                 ;org 0D2DCh
.xdata$x:0000D2DC ; COMDAT (pick associative to section at 728C)
.xdata$x:0000D2DC __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D2DC                                         ; DATA XREF: .xdata$x:0000D2ECo
.xdata$x:0000D2DD                 db 0FFh
.xdata$x:0000D2DE                 db 0FFh
.xdata$x:0000D2DF                 db 0FFh
.xdata$x:0000D2E0                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:0000D2E4 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D2E4                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D2E5                 db    5
.xdata$x:0000D2E6                 db  93h ; ô
.xdata$x:0000D2E7                 db  19h
.xdata$x:0000D2E8                 db    1
.xdata$x:0000D2E9                 db    0
.xdata$x:0000D2EA                 db    0
.xdata$x:0000D2EB                 db    0
.xdata$x:0000D2EC                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:0000D2F0                 db    0
.xdata$x:0000D2F1                 db    0
.xdata$x:0000D2F2                 db    0
.xdata$x:0000D2F3                 db    0
.xdata$x:0000D2F4                 db    0
.xdata$x:0000D2F5                 db    0
.xdata$x:0000D2F6                 db    0
.xdata$x:0000D2F7                 db    0
.xdata$x:0000D2F8                 db    0
.xdata$x:0000D2F9                 db    0
.xdata$x:0000D2FA                 db    0
.xdata$x:0000D2FB                 db    0
.xdata$x:0000D2FC                 db    0
.xdata$x:0000D2FD                 db    0
.xdata$x:0000D2FE                 db    0
.xdata$x:0000D2FF                 db    0
.xdata$x:0000D300                 db    0
.xdata$x:0000D301                 db    0
.xdata$x:0000D302                 db    0
.xdata$x:0000D303                 db    0
.xdata$x:0000D304                 db    0
.xdata$x:0000D305                 db    0
.xdata$x:0000D306                 db    0
.xdata$x:0000D307                 db    0
.xdata$x:0000D307 _xdata$x        ends
.xdata$x:0000D307
.xdata$x:0000D308 ; ===========================================================================
.xdata$x:0000D308
.xdata$x:0000D308 ; Segment type: Pure data
.xdata$x:0000D308 ; Segment permissions: Read
.xdata$x:0000D308 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D308                 assume cs:_xdata$x
.xdata$x:0000D308                 ;org 0D308h
.xdata$x:0000D308 ; COMDAT (pick associative to section at 6544)
.xdata$x:0000D308 __catchsym$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$5 db    0
.xdata$x:0000D308                                         ; DATA XREF: .xdata$x:0000D328o
.xdata$x:0000D309                 db    0
.xdata$x:0000D30A                 db    0
.xdata$x:0000D30B                 db    0
.xdata$x:0000D30C                 db    0
.xdata$x:0000D30D                 db    0
.xdata$x:0000D30E                 db    0
.xdata$x:0000D30F                 db    0
.xdata$x:0000D310                 db    0
.xdata$x:0000D311                 db    0
.xdata$x:0000D312                 db    0
.xdata$x:0000D313                 db    0
.xdata$x:0000D314                 dd offset __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000D318 __tryblocktable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db    1
.xdata$x:0000D318                                         ; DATA XREF: .xdata$x:0000D33Co
.xdata$x:0000D319                 db    0
.xdata$x:0000D31A                 db    0
.xdata$x:0000D31B                 db    0
.xdata$x:0000D31C                 db    3
.xdata$x:0000D31D                 db    0
.xdata$x:0000D31E                 db    0
.xdata$x:0000D31F                 db    0
.xdata$x:0000D320                 db    4
.xdata$x:0000D321                 db    0
.xdata$x:0000D322                 db    0
.xdata$x:0000D323                 db    0
.xdata$x:0000D324                 db    1
.xdata$x:0000D325                 db    0
.xdata$x:0000D326                 db    0
.xdata$x:0000D327                 db    0
.xdata$x:0000D328                 dd offset __catchsym$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$5
.xdata$x:0000D32C __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000D32C                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000D32D                 db    5
.xdata$x:0000D32E                 db  93h ; ô
.xdata$x:0000D32F                 db  19h
.xdata$x:0000D330                 db    5
.xdata$x:0000D331                 db    0
.xdata$x:0000D332                 db    0
.xdata$x:0000D333                 db    0
.xdata$x:0000D334                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.xdata$x:0000D338                 db    1
.xdata$x:0000D339                 db    0
.xdata$x:0000D33A                 db    0
.xdata$x:0000D33B                 db    0
.xdata$x:0000D33C                 dd offset __tryblocktable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.xdata$x:0000D340                 db    0
.xdata$x:0000D341                 db    0
.xdata$x:0000D342                 db    0
.xdata$x:0000D343                 db    0
.xdata$x:0000D344                 db    0
.xdata$x:0000D345                 db    0
.xdata$x:0000D346                 db    0
.xdata$x:0000D347                 db    0
.xdata$x:0000D348                 db    0
.xdata$x:0000D349                 db    0
.xdata$x:0000D34A                 db    0
.xdata$x:0000D34B                 db    0
.xdata$x:0000D34C                 db    0
.xdata$x:0000D34D                 db    0
.xdata$x:0000D34E                 db    0
.xdata$x:0000D34F                 db    0
.xdata$x:0000D350 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000D350                                         ; DATA XREF: .xdata$x:0000D334o
.xdata$x:0000D351                 db 0FFh
.xdata$x:0000D352                 db 0FFh
.xdata$x:0000D353                 db 0FFh
.xdata$x:0000D354                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2
.xdata$x:0000D358                 align 10h
.xdata$x:0000D360                 db    1
.xdata$x:0000D361                 db    0
.xdata$x:0000D362                 db    0
.xdata$x:0000D363                 db    0
.xdata$x:0000D364                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3
.xdata$x:0000D368                 db    2
.xdata$x:0000D369                 db    0
.xdata$x:0000D36A                 db    0
.xdata$x:0000D36B                 db    0
.xdata$x:0000D36C                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4
.xdata$x:0000D370                 db    0
.xdata$x:0000D371                 db    0
.xdata$x:0000D372                 db    0
.xdata$x:0000D373                 db    0
.xdata$x:0000D374                 db    0
.xdata$x:0000D375                 db    0
.xdata$x:0000D376                 db    0
.xdata$x:0000D377                 db    0
.xdata$x:0000D377 _xdata$x        ends
.xdata$x:0000D377
.xdata$x:0000D378 ; ===========================================================================
.xdata$x:0000D378
.xdata$x:0000D378 ; Segment type: Pure data
.xdata$x:0000D378 ; Segment permissions: Read
.xdata$x:0000D378 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D378                 assume cs:_xdata$x
.xdata$x:0000D378                 ;org 0D378h
.xdata$x:0000D378 ; COMDAT (pick associative to section at 778C)
.xdata$x:0000D378 __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000D378                                         ; DATA XREF: .xdata$x:0000D388o
.xdata$x:0000D379                 db 0FFh
.xdata$x:0000D37A                 db 0FFh
.xdata$x:0000D37B                 db 0FFh
.xdata$x:0000D37C                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:0000D380 __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D380                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:0000D381                 db    5
.xdata$x:0000D382                 db  93h ; ô
.xdata$x:0000D383                 db  19h
.xdata$x:0000D384                 db    1
.xdata$x:0000D385                 db    0
.xdata$x:0000D386                 db    0
.xdata$x:0000D387                 db    0
.xdata$x:0000D388                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:0000D38C                 db    0
.xdata$x:0000D38D                 db    0
.xdata$x:0000D38E                 db    0
.xdata$x:0000D38F                 db    0
.xdata$x:0000D390                 db    0
.xdata$x:0000D391                 db    0
.xdata$x:0000D392                 db    0
.xdata$x:0000D393                 db    0
.xdata$x:0000D394                 db    0
.xdata$x:0000D395                 db    0
.xdata$x:0000D396                 db    0
.xdata$x:0000D397                 db    0
.xdata$x:0000D398                 db    0
.xdata$x:0000D399                 db    0
.xdata$x:0000D39A                 db    0
.xdata$x:0000D39B                 db    0
.xdata$x:0000D39C                 db    0
.xdata$x:0000D39D                 db    0
.xdata$x:0000D39E                 db    0
.xdata$x:0000D39F                 db    0
.xdata$x:0000D3A0                 db    0
.xdata$x:0000D3A1                 db    0
.xdata$x:0000D3A2                 db    0
.xdata$x:0000D3A3                 db    0
.xdata$x:0000D3A3 _xdata$x        ends
.xdata$x:0000D3A3
.xdata$x:0000D3A4 ; ===========================================================================
.xdata$x:0000D3A4
.xdata$x:0000D3A4 ; Segment type: Pure data
.xdata$x:0000D3A4 ; Segment permissions: Read
.xdata$x:0000D3A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D3A4                 assume cs:_xdata$x
.xdata$x:0000D3A4                 ;org 0D3A4h
.xdata$x:0000D3A4 ; COMDAT (pick associative to section at A93C)
.xdata$x:0000D3A4 __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D3A4                                         ; DATA XREF: .xdata$x:0000D3B4o
.xdata$x:0000D3A5                 db 0FFh
.xdata$x:0000D3A6                 db 0FFh
.xdata$x:0000D3A7                 db 0FFh
.xdata$x:0000D3A8                 dd offset __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000D3AC __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D3AC                                         ; DATA XREF: __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000D3AD                 db    5
.xdata$x:0000D3AE                 db  93h ; ô
.xdata$x:0000D3AF                 db  19h
.xdata$x:0000D3B0                 db    1
.xdata$x:0000D3B1                 db    0
.xdata$x:0000D3B2                 db    0
.xdata$x:0000D3B3                 db    0
.xdata$x:0000D3B4                 dd offset __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000D3B8                 db    0
.xdata$x:0000D3B9                 db    0
.xdata$x:0000D3BA                 db    0
.xdata$x:0000D3BB                 db    0
.xdata$x:0000D3BC                 db    0
.xdata$x:0000D3BD                 db    0
.xdata$x:0000D3BE                 db    0
.xdata$x:0000D3BF                 db    0
.xdata$x:0000D3C0                 db    0
.xdata$x:0000D3C1                 db    0
.xdata$x:0000D3C2                 db    0
.xdata$x:0000D3C3                 db    0
.xdata$x:0000D3C4                 db    0
.xdata$x:0000D3C5                 db    0
.xdata$x:0000D3C6                 db    0
.xdata$x:0000D3C7                 db    0
.xdata$x:0000D3C8                 db    0
.xdata$x:0000D3C9                 db    0
.xdata$x:0000D3CA                 db    0
.xdata$x:0000D3CB                 db    0
.xdata$x:0000D3CC                 db    0
.xdata$x:0000D3CD                 db    0
.xdata$x:0000D3CE                 db    0
.xdata$x:0000D3CF                 db    0
.xdata$x:0000D3CF _xdata$x        ends
.xdata$x:0000D3CF
.xdata$x:0000D3D0 ; ===========================================================================
.xdata$x:0000D3D0
.xdata$x:0000D3D0 ; Segment type: Pure data
.xdata$x:0000D3D0 ; Segment permissions: Read
.xdata$x:0000D3D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D3D0                 assume cs:_xdata$x
.xdata$x:0000D3D0                 ;org 0D3D0h
.xdata$x:0000D3D0 ; COMDAT (pick associative to section at A9D8)
.xdata$x:0000D3D0 __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D3D0                                         ; DATA XREF: .xdata$x:0000D3E0o
.xdata$x:0000D3D1                 db 0FFh
.xdata$x:0000D3D2                 db 0FFh
.xdata$x:0000D3D3                 db 0FFh
.xdata$x:0000D3D4                 dd offset __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000D3D8 __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D3D8                                         ; DATA XREF: __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000D3D9                 db    5
.xdata$x:0000D3DA                 db  93h ; ô
.xdata$x:0000D3DB                 db  19h
.xdata$x:0000D3DC                 db    1
.xdata$x:0000D3DD                 db    0
.xdata$x:0000D3DE                 db    0
.xdata$x:0000D3DF                 db    0
.xdata$x:0000D3E0                 dd offset __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000D3E4                 db    0
.xdata$x:0000D3E5                 db    0
.xdata$x:0000D3E6                 db    0
.xdata$x:0000D3E7                 db    0
.xdata$x:0000D3E8                 db    0
.xdata$x:0000D3E9                 db    0
.xdata$x:0000D3EA                 db    0
.xdata$x:0000D3EB                 db    0
.xdata$x:0000D3EC                 db    0
.xdata$x:0000D3ED                 db    0
.xdata$x:0000D3EE                 db    0
.xdata$x:0000D3EF                 db    0
.xdata$x:0000D3F0                 db    0
.xdata$x:0000D3F1                 db    0
.xdata$x:0000D3F2                 db    0
.xdata$x:0000D3F3                 db    0
.xdata$x:0000D3F4                 db    0
.xdata$x:0000D3F5                 db    0
.xdata$x:0000D3F6                 db    0
.xdata$x:0000D3F7                 db    0
.xdata$x:0000D3F8                 db    0
.xdata$x:0000D3F9                 db    0
.xdata$x:0000D3FA                 db    0
.xdata$x:0000D3FB                 db    0
.xdata$x:0000D3FB _xdata$x        ends
.xdata$x:0000D3FB
.xdata$x:0000D3FC ; ===========================================================================
.xdata$x:0000D3FC
.xdata$x:0000D3FC ; Segment type: Pure data
.xdata$x:0000D3FC ; Segment permissions: Read
.xdata$x:0000D3FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D3FC                 assume cs:_xdata$x
.xdata$x:0000D3FC                 ;org 0D3FCh
.xdata$x:0000D3FC ; COMDAT (pick associative to section at B240)
.xdata$x:0000D3FC __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D3FC                                         ; DATA XREF: .xdata$x:0000D40Co
.xdata$x:0000D3FD                 db 0FFh
.xdata$x:0000D3FE                 db 0FFh
.xdata$x:0000D3FF                 db 0FFh
.xdata$x:0000D400                 dd offset __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000D404 __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D404                                         ; DATA XREF: __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000D405                 db    5
.xdata$x:0000D406                 db  93h ; ô
.xdata$x:0000D407                 db  19h
.xdata$x:0000D408                 db    1
.xdata$x:0000D409                 db    0
.xdata$x:0000D40A                 db    0
.xdata$x:0000D40B                 db    0
.xdata$x:0000D40C                 dd offset __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000D410                 db    0
.xdata$x:0000D411                 db    0
.xdata$x:0000D412                 db    0
.xdata$x:0000D413                 db    0
.xdata$x:0000D414                 db    0
.xdata$x:0000D415                 db    0
.xdata$x:0000D416                 db    0
.xdata$x:0000D417                 db    0
.xdata$x:0000D418                 db    0
.xdata$x:0000D419                 db    0
.xdata$x:0000D41A                 db    0
.xdata$x:0000D41B                 db    0
.xdata$x:0000D41C                 db    0
.xdata$x:0000D41D                 db    0
.xdata$x:0000D41E                 db    0
.xdata$x:0000D41F                 db    0
.xdata$x:0000D420                 db    0
.xdata$x:0000D421                 db    0
.xdata$x:0000D422                 db    0
.xdata$x:0000D423                 db    0
.xdata$x:0000D424                 db    0
.xdata$x:0000D425                 db    0
.xdata$x:0000D426                 db    0
.xdata$x:0000D427                 db    0
.xdata$x:0000D427 _xdata$x        ends
.xdata$x:0000D427
.xdata$x:0000D428 ; ===========================================================================
.xdata$x:0000D428
.xdata$x:0000D428 ; Segment type: Pure data
.xdata$x:0000D428 ; Segment permissions: Read
.xdata$x:0000D428 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D428                 assume cs:_xdata$x
.xdata$x:0000D428                 ;org 0D428h
.xdata$x:0000D428 ; COMDAT (pick associative to section at 96D8)
.xdata$x:0000D428 __unwindtable$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000D428                                         ; DATA XREF: .xdata$x:0000D440o
.xdata$x:0000D429                 db 0FFh
.xdata$x:0000D42A                 db 0FFh
.xdata$x:0000D42B                 db 0FFh
.xdata$x:0000D42C                 dd offset __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1
.xdata$x:0000D430                 db    0
.xdata$x:0000D431                 db    0
.xdata$x:0000D432                 db    0
.xdata$x:0000D433                 db    0
.xdata$x:0000D434                 dd offset __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0
.xdata$x:0000D438 __ehfuncinfo$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000D438                                         ; DATA XREF: __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z+11o
.xdata$x:0000D439                 db    5
.xdata$x:0000D43A                 db  93h ; ô
.xdata$x:0000D43B                 db  19h
.xdata$x:0000D43C                 db    2
.xdata$x:0000D43D                 db    0
.xdata$x:0000D43E                 db    0
.xdata$x:0000D43F                 db    0
.xdata$x:0000D440                 dd offset __unwindtable$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.xdata$x:0000D444                 db    0
.xdata$x:0000D445                 db    0
.xdata$x:0000D446                 db    0
.xdata$x:0000D447                 db    0
.xdata$x:0000D448                 db    0
.xdata$x:0000D449                 db    0
.xdata$x:0000D44A                 db    0
.xdata$x:0000D44B                 db    0
.xdata$x:0000D44C                 db    0
.xdata$x:0000D44D                 db    0
.xdata$x:0000D44E                 db    0
.xdata$x:0000D44F                 db    0
.xdata$x:0000D450                 db    0
.xdata$x:0000D451                 db    0
.xdata$x:0000D452                 db    0
.xdata$x:0000D453                 db    0
.xdata$x:0000D454                 db    0
.xdata$x:0000D455                 db    0
.xdata$x:0000D456                 db    0
.xdata$x:0000D457                 db    0
.xdata$x:0000D458                 db    0
.xdata$x:0000D459                 db    0
.xdata$x:0000D45A                 db    0
.xdata$x:0000D45B                 db    0
.xdata$x:0000D45B _xdata$x        ends
.xdata$x:0000D45B
.xdata$x:0000D45C ; ===========================================================================
.xdata$x:0000D45C
.xdata$x:0000D45C ; Segment type: Pure data
.xdata$x:0000D45C ; Segment permissions: Read
.xdata$x:0000D45C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D45C                 assume cs:_xdata$x
.xdata$x:0000D45C                 ;org 0D45Ch
.xdata$x:0000D45C ; COMDAT (pick associative to section at B4CC)
.xdata$x:0000D45C __unwindtable$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000D45C                                         ; DATA XREF: .xdata$x:0000D47Co
.xdata$x:0000D45D                 db 0FFh
.xdata$x:0000D45E                 db 0FFh
.xdata$x:0000D45F                 db 0FFh
.xdata$x:0000D460                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2
.xdata$x:0000D464                 align 8
.xdata$x:0000D468                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0
.xdata$x:0000D46C                 db    1
.xdata$x:0000D46D                 db    0
.xdata$x:0000D46E                 db    0
.xdata$x:0000D46F                 db    0
.xdata$x:0000D470                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1
.xdata$x:0000D474 __ehfuncinfo$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000D474                                         ; DATA XREF: __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z+11o
.xdata$x:0000D475                 db    5
.xdata$x:0000D476                 db  93h ; ô
.xdata$x:0000D477                 db  19h
.xdata$x:0000D478                 db    3
.xdata$x:0000D479                 db    0
.xdata$x:0000D47A                 db    0
.xdata$x:0000D47B                 db    0
.xdata$x:0000D47C                 dd offset __unwindtable$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.xdata$x:0000D480                 db    0
.xdata$x:0000D481                 db    0
.xdata$x:0000D482                 db    0
.xdata$x:0000D483                 db    0
.xdata$x:0000D484                 db    0
.xdata$x:0000D485                 db    0
.xdata$x:0000D486                 db    0
.xdata$x:0000D487                 db    0
.xdata$x:0000D488                 db    0
.xdata$x:0000D489                 db    0
.xdata$x:0000D48A                 db    0
.xdata$x:0000D48B                 db    0
.xdata$x:0000D48C                 db    0
.xdata$x:0000D48D                 db    0
.xdata$x:0000D48E                 db    0
.xdata$x:0000D48F                 db    0
.xdata$x:0000D490                 db    0
.xdata$x:0000D491                 db    0
.xdata$x:0000D492                 db    0
.xdata$x:0000D493                 db    0
.xdata$x:0000D494                 db    0
.xdata$x:0000D495                 db    0
.xdata$x:0000D496                 db    0
.xdata$x:0000D497                 db    0
.xdata$x:0000D497 _xdata$x        ends
.xdata$x:0000D497
.xdata$x:0000D498 ; ===========================================================================
.xdata$x:0000D498
.xdata$x:0000D498 ; Segment type: Pure data
.xdata$x:0000D498 ; Segment permissions: Read
.xdata$x:0000D498 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D498                 assume cs:_xdata$x
.xdata$x:0000D498                 ;org 0D498h
.xdata$x:0000D498 ; COMDAT (pick associative to section at 9A74)
.xdata$x:0000D498 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:0000D498                                         ; DATA XREF: .xdata$x:0000D4A8o
.xdata$x:0000D499                 db 0FFh
.xdata$x:0000D49A                 db 0FFh
.xdata$x:0000D49B                 db 0FFh
.xdata$x:0000D49C                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:0000D4A0 __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:0000D4A0                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:0000D4A1                 db    5
.xdata$x:0000D4A2                 db  93h ; ô
.xdata$x:0000D4A3                 db  19h
.xdata$x:0000D4A4                 db    1
.xdata$x:0000D4A5                 db    0
.xdata$x:0000D4A6                 db    0
.xdata$x:0000D4A7                 db    0
.xdata$x:0000D4A8                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:0000D4AC                 db    0
.xdata$x:0000D4AD                 db    0
.xdata$x:0000D4AE                 db    0
.xdata$x:0000D4AF                 db    0
.xdata$x:0000D4B0                 db    0
.xdata$x:0000D4B1                 db    0
.xdata$x:0000D4B2                 db    0
.xdata$x:0000D4B3                 db    0
.xdata$x:0000D4B4                 db    0
.xdata$x:0000D4B5                 db    0
.xdata$x:0000D4B6                 db    0
.xdata$x:0000D4B7                 db    0
.xdata$x:0000D4B8                 db    0
.xdata$x:0000D4B9                 db    0
.xdata$x:0000D4BA                 db    0
.xdata$x:0000D4BB                 db    0
.xdata$x:0000D4BC                 db    0
.xdata$x:0000D4BD                 db    0
.xdata$x:0000D4BE                 db    0
.xdata$x:0000D4BF                 db    0
.xdata$x:0000D4C0                 db    0
.xdata$x:0000D4C1                 db    0
.xdata$x:0000D4C2                 db    0
.xdata$x:0000D4C3                 db    0
.xdata$x:0000D4C3 _xdata$x        ends
.xdata$x:0000D4C3
.xdata$x:0000D4C4 ; ===========================================================================
.xdata$x:0000D4C4
.xdata$x:0000D4C4 ; Segment type: Pure data
.xdata$x:0000D4C4 ; Segment permissions: Read
.xdata$x:0000D4C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D4C4                 assume cs:_xdata$x
.xdata$x:0000D4C4                 ;org 0D4C4h
.xdata$x:0000D4C4 ; COMDAT (pick associative to section at 6690)
.xdata$x:0000D4C4 __unwindtable$??0AssociationInfo@@QAE@HHPB_W0@Z db 0FFh
.xdata$x:0000D4C4                                         ; DATA XREF: .xdata$x:0000D4DCo
.xdata$x:0000D4C5                 db 0FFh
.xdata$x:0000D4C6                 db 0FFh
.xdata$x:0000D4C7                 db 0FFh
.xdata$x:0000D4C8                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0
.xdata$x:0000D4CC                 align 10h
.xdata$x:0000D4D0                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1
.xdata$x:0000D4D4 __ehfuncinfo$??0AssociationInfo@@QAE@HHPB_W0@Z db  22h ; "
.xdata$x:0000D4D4                                         ; DATA XREF: __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z+11o
.xdata$x:0000D4D5                 db    5
.xdata$x:0000D4D6                 db  93h ; ô
.xdata$x:0000D4D7                 db  19h
.xdata$x:0000D4D8                 db    2
.xdata$x:0000D4D9                 db    0
.xdata$x:0000D4DA                 db    0
.xdata$x:0000D4DB                 db    0
.xdata$x:0000D4DC                 dd offset __unwindtable$??0AssociationInfo@@QAE@HHPB_W0@Z
.xdata$x:0000D4E0                 db    0
.xdata$x:0000D4E1                 db    0
.xdata$x:0000D4E2                 db    0
.xdata$x:0000D4E3                 db    0
.xdata$x:0000D4E4                 db    0
.xdata$x:0000D4E5                 db    0
.xdata$x:0000D4E6                 db    0
.xdata$x:0000D4E7                 db    0
.xdata$x:0000D4E8                 db    0
.xdata$x:0000D4E9                 db    0
.xdata$x:0000D4EA                 db    0
.xdata$x:0000D4EB                 db    0
.xdata$x:0000D4EC                 db    0
.xdata$x:0000D4ED                 db    0
.xdata$x:0000D4EE                 db    0
.xdata$x:0000D4EF                 db    0
.xdata$x:0000D4F0                 db    0
.xdata$x:0000D4F1                 db    0
.xdata$x:0000D4F2                 db    0
.xdata$x:0000D4F3                 db    0
.xdata$x:0000D4F4                 db    0
.xdata$x:0000D4F5                 db    0
.xdata$x:0000D4F6                 db    0
.xdata$x:0000D4F7                 db    0
.xdata$x:0000D4F7 _xdata$x        ends
.xdata$x:0000D4F7
.xdata$x:0000D4F8 ; ===========================================================================
.xdata$x:0000D4F8
.xdata$x:0000D4F8 ; Segment type: Pure data
.xdata$x:0000D4F8 ; Segment permissions: Read
.xdata$x:0000D4F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D4F8                 assume cs:_xdata$x
.xdata$x:0000D4F8                 ;org 0D4F8h
.xdata$x:0000D4F8 ; COMDAT (pick associative to section at 7804)
.xdata$x:0000D4F8 __unwindtable$??1AssociationInfo@@QAE@XZ db 0FFh
.xdata$x:0000D4F8                                         ; DATA XREF: .xdata$x:0000D510o
.xdata$x:0000D4F9                 db 0FFh
.xdata$x:0000D4FA                 db 0FFh
.xdata$x:0000D4FB                 db 0FFh
.xdata$x:0000D4FC                 dd offset __unwindfunclet$??1AssociationInfo@@QAE@XZ$0
.xdata$x:0000D500                 db    0
.xdata$x:0000D501                 db    0
.xdata$x:0000D502                 db    0
.xdata$x:0000D503                 db    0
.xdata$x:0000D504                 dd offset __unwindfunclet$??1AssociationInfo@@QAE@XZ$1
.xdata$x:0000D508 __ehfuncinfo$??1AssociationInfo@@QAE@XZ db  22h ; "
.xdata$x:0000D508                                         ; DATA XREF: __ehhandler$??1AssociationInfo@@QAE@XZ+11o
.xdata$x:0000D509                 db    5
.xdata$x:0000D50A                 db  93h ; ô
.xdata$x:0000D50B                 db  19h
.xdata$x:0000D50C                 db    2
.xdata$x:0000D50D                 db    0
.xdata$x:0000D50E                 db    0
.xdata$x:0000D50F                 db    0
.xdata$x:0000D510                 dd offset __unwindtable$??1AssociationInfo@@QAE@XZ
.xdata$x:0000D514                 db    0
.xdata$x:0000D515                 db    0
.xdata$x:0000D516                 db    0
.xdata$x:0000D517                 db    0
.xdata$x:0000D518                 db    0
.xdata$x:0000D519                 db    0
.xdata$x:0000D51A                 db    0
.xdata$x:0000D51B                 db    0
.xdata$x:0000D51C                 db    0
.xdata$x:0000D51D                 db    0
.xdata$x:0000D51E                 db    0
.xdata$x:0000D51F                 db    0
.xdata$x:0000D520                 db    0
.xdata$x:0000D521                 db    0
.xdata$x:0000D522                 db    0
.xdata$x:0000D523                 db    0
.xdata$x:0000D524                 db    0
.xdata$x:0000D525                 db    0
.xdata$x:0000D526                 db    0
.xdata$x:0000D527                 db    0
.xdata$x:0000D528                 db    0
.xdata$x:0000D529                 db    0
.xdata$x:0000D52A                 db    0
.xdata$x:0000D52B                 db    0
.xdata$x:0000D52B _xdata$x        ends
.xdata$x:0000D52B
.xdata$x:0000D52C ; ===========================================================================
.xdata$x:0000D52C
.xdata$x:0000D52C ; Segment type: Pure data
.xdata$x:0000D52C ; Segment permissions: Read
.xdata$x:0000D52C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D52C                 assume cs:_xdata$x
.xdata$x:0000D52C                 ;org 0D52Ch
.xdata$x:0000D52C ; COMDAT (pick associative to section at AD0C)
.xdata$x:0000D52C __unwindtable$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z db 0FFh
.xdata$x:0000D52C                                         ; DATA XREF: .xdata$x:0000D53Co
.xdata$x:0000D52D                 db 0FFh
.xdata$x:0000D52E                 db 0FFh
.xdata$x:0000D52F                 db 0FFh
.xdata$x:0000D530                 dd offset __unwindfunclet$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z$0
.xdata$x:0000D534 __ehfuncinfo$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z db  22h ; "
.xdata$x:0000D534                                         ; DATA XREF: __ehhandler$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z+11o
.xdata$x:0000D535                 db    5
.xdata$x:0000D536                 db  93h ; ô
.xdata$x:0000D537                 db  19h
.xdata$x:0000D538                 db    1
.xdata$x:0000D539                 db    0
.xdata$x:0000D53A                 db    0
.xdata$x:0000D53B                 db    0
.xdata$x:0000D53C                 dd offset __unwindtable$?construct@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@ABU3@@Z
.xdata$x:0000D540                 db    0
.xdata$x:0000D541                 db    0
.xdata$x:0000D542                 db    0
.xdata$x:0000D543                 db    0
.xdata$x:0000D544                 db    0
.xdata$x:0000D545                 db    0
.xdata$x:0000D546                 db    0
.xdata$x:0000D547                 db    0
.xdata$x:0000D548                 db    0
.xdata$x:0000D549                 db    0
.xdata$x:0000D54A                 db    0
.xdata$x:0000D54B                 db    0
.xdata$x:0000D54C                 db    0
.xdata$x:0000D54D                 db    0
.xdata$x:0000D54E                 db    0
.xdata$x:0000D54F                 db    0
.xdata$x:0000D550                 db    0
.xdata$x:0000D551                 db    0
.xdata$x:0000D552                 db    0
.xdata$x:0000D553                 db    0
.xdata$x:0000D554                 db    0
.xdata$x:0000D555                 db    0
.xdata$x:0000D556                 db    0
.xdata$x:0000D557                 db    0
.xdata$x:0000D557 _xdata$x        ends
.xdata$x:0000D557
.xdata$x:0000D558 ; ===========================================================================
.xdata$x:0000D558
.xdata$x:0000D558 ; Segment type: Pure data
.xdata$x:0000D558 ; Segment permissions: Read
.xdata$x:0000D558 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D558                 assume cs:_xdata$x
.xdata$x:0000D558                 ;org 0D558h
.xdata$x:0000D558 ; COMDAT (pick associative to section at 5D40)
.xdata$x:0000D558 __unwindtable$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D558                                         ; DATA XREF: .xdata$x:0000D568o
.xdata$x:0000D559                 db 0FFh
.xdata$x:0000D55A                 db 0FFh
.xdata$x:0000D55B                 db 0FFh
.xdata$x:0000D55C                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D560 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D560                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D561                 db    5
.xdata$x:0000D562                 db  93h ; ô
.xdata$x:0000D563                 db  19h
.xdata$x:0000D564                 db    1
.xdata$x:0000D565                 db    0
.xdata$x:0000D566                 db    0
.xdata$x:0000D567                 db    0
.xdata$x:0000D568                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.xdata$x:0000D56C                 db    0
.xdata$x:0000D56D                 db    0
.xdata$x:0000D56E                 db    0
.xdata$x:0000D56F                 db    0
.xdata$x:0000D570                 db    0
.xdata$x:0000D571                 db    0
.xdata$x:0000D572                 db    0
.xdata$x:0000D573                 db    0
.xdata$x:0000D574                 db    0
.xdata$x:0000D575                 db    0
.xdata$x:0000D576                 db    0
.xdata$x:0000D577                 db    0
.xdata$x:0000D578                 db    0
.xdata$x:0000D579                 db    0
.xdata$x:0000D57A                 db    0
.xdata$x:0000D57B                 db    0
.xdata$x:0000D57C                 db    0
.xdata$x:0000D57D                 db    0
.xdata$x:0000D57E                 db    0
.xdata$x:0000D57F                 db    0
.xdata$x:0000D580                 db    0
.xdata$x:0000D581                 db    0
.xdata$x:0000D582                 db    0
.xdata$x:0000D583                 db    0
.xdata$x:0000D583 _xdata$x        ends
.xdata$x:0000D583
.xdata$x:0000D584 ; ===========================================================================
.xdata$x:0000D584
.xdata$x:0000D584 ; Segment type: Pure data
.xdata$x:0000D584 ; Segment permissions: Read
.xdata$x:0000D584 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D584                 assume cs:_xdata$x
.xdata$x:0000D584                 ;org 0D584h
.xdata$x:0000D584 ; COMDAT (pick associative to section at 7454)
.xdata$x:0000D584 __unwindtable$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D584                                         ; DATA XREF: .xdata$x:0000D594o
.xdata$x:0000D585                 db 0FFh
.xdata$x:0000D586                 db 0FFh
.xdata$x:0000D587                 db 0FFh
.xdata$x:0000D588                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D58C __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D58C                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D58D                 db    5
.xdata$x:0000D58E                 db  93h ; ô
.xdata$x:0000D58F                 db  19h
.xdata$x:0000D590                 db    1
.xdata$x:0000D591                 db    0
.xdata$x:0000D592                 db    0
.xdata$x:0000D593                 db    0
.xdata$x:0000D594                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@QAE@XZ
.xdata$x:0000D598                 db    0
.xdata$x:0000D599                 db    0
.xdata$x:0000D59A                 db    0
.xdata$x:0000D59B                 db    0
.xdata$x:0000D59C                 db    0
.xdata$x:0000D59D                 db    0
.xdata$x:0000D59E                 db    0
.xdata$x:0000D59F                 db    0
.xdata$x:0000D5A0                 db    0
.xdata$x:0000D5A1                 db    0
.xdata$x:0000D5A2                 db    0
.xdata$x:0000D5A3                 db    0
.xdata$x:0000D5A4                 db    0
.xdata$x:0000D5A5                 db    0
.xdata$x:0000D5A6                 db    0
.xdata$x:0000D5A7                 db    0
.xdata$x:0000D5A8                 db    0
.xdata$x:0000D5A9                 db    0
.xdata$x:0000D5AA                 db    0
.xdata$x:0000D5AB                 db    0
.xdata$x:0000D5AC                 db    0
.xdata$x:0000D5AD                 db    0
.xdata$x:0000D5AE                 db    0
.xdata$x:0000D5AF                 db    0
.xdata$x:0000D5AF _xdata$x        ends
.xdata$x:0000D5AF
.xdata$x:0000D5B0 ; ===========================================================================
.xdata$x:0000D5B0
.xdata$x:0000D5B0 ; Segment type: Pure data
.xdata$x:0000D5B0 ; Segment permissions: Read
.xdata$x:0000D5B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D5B0                 assume cs:_xdata$x
.xdata$x:0000D5B0                 ;org 0D5B0h
.xdata$x:0000D5B0 ; COMDAT (pick associative to section at 5930)
.xdata$x:0000D5B0 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z db 0FFh
.xdata$x:0000D5B0                                         ; DATA XREF: .xdata$x:0000D5C0o
.xdata$x:0000D5B1                 db 0FFh
.xdata$x:0000D5B2                 db 0FFh
.xdata$x:0000D5B3                 db 0FFh
.xdata$x:0000D5B4                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z$0
.xdata$x:0000D5B8 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z db  22h ; "
.xdata$x:0000D5B8                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z+11o
.xdata$x:0000D5B9                 db    5
.xdata$x:0000D5BA                 db  93h ; ô
.xdata$x:0000D5BB                 db  19h
.xdata$x:0000D5BC                 db    1
.xdata$x:0000D5BD                 db    0
.xdata$x:0000D5BE                 db    0
.xdata$x:0000D5BF                 db    0
.xdata$x:0000D5C0                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV?$allocator@UTreeStateNode@@@1@@Z
.xdata$x:0000D5C4                 db    0
.xdata$x:0000D5C5                 db    0
.xdata$x:0000D5C6                 db    0
.xdata$x:0000D5C7                 db    0
.xdata$x:0000D5C8                 db    0
.xdata$x:0000D5C9                 db    0
.xdata$x:0000D5CA                 db    0
.xdata$x:0000D5CB                 db    0
.xdata$x:0000D5CC                 db    0
.xdata$x:0000D5CD                 db    0
.xdata$x:0000D5CE                 db    0
.xdata$x:0000D5CF                 db    0
.xdata$x:0000D5D0                 db    0
.xdata$x:0000D5D1                 db    0
.xdata$x:0000D5D2                 db    0
.xdata$x:0000D5D3                 db    0
.xdata$x:0000D5D4                 db    0
.xdata$x:0000D5D5                 db    0
.xdata$x:0000D5D6                 db    0
.xdata$x:0000D5D7                 db    0
.xdata$x:0000D5D8                 db    0
.xdata$x:0000D5D9                 db    0
.xdata$x:0000D5DA                 db    0
.xdata$x:0000D5DB                 db    0
.xdata$x:0000D5DB _xdata$x        ends
.xdata$x:0000D5DB
.xdata$x:0000D5DC ; ===========================================================================
.xdata$x:0000D5DC
.xdata$x:0000D5DC ; Segment type: Pure data
.xdata$x:0000D5DC ; Segment permissions: Read
.xdata$x:0000D5DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D5DC                 assume cs:_xdata$x
.xdata$x:0000D5DC                 ;org 0D5DCh
.xdata$x:0000D5DC ; COMDAT (pick associative to section at 719C)
.xdata$x:0000D5DC __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D5DC                                         ; DATA XREF: .xdata$x:0000D5ECo
.xdata$x:0000D5DD                 db 0FFh
.xdata$x:0000D5DE                 db 0FFh
.xdata$x:0000D5DF                 db 0FFh
.xdata$x:0000D5E0                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D5E4 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D5E4                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D5E5                 db    5
.xdata$x:0000D5E6                 db  93h ; ô
.xdata$x:0000D5E7                 db  19h
.xdata$x:0000D5E8                 db    1
.xdata$x:0000D5E9                 db    0
.xdata$x:0000D5EA                 db    0
.xdata$x:0000D5EB                 db    0
.xdata$x:0000D5EC                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000D5F0                 db    0
.xdata$x:0000D5F1                 db    0
.xdata$x:0000D5F2                 db    0
.xdata$x:0000D5F3                 db    0
.xdata$x:0000D5F4                 db    0
.xdata$x:0000D5F5                 db    0
.xdata$x:0000D5F6                 db    0
.xdata$x:0000D5F7                 db    0
.xdata$x:0000D5F8                 db    0
.xdata$x:0000D5F9                 db    0
.xdata$x:0000D5FA                 db    0
.xdata$x:0000D5FB                 db    0
.xdata$x:0000D5FC                 db    0
.xdata$x:0000D5FD                 db    0
.xdata$x:0000D5FE                 db    0
.xdata$x:0000D5FF                 db    0
.xdata$x:0000D600                 db    0
.xdata$x:0000D601                 db    0
.xdata$x:0000D602                 db    0
.xdata$x:0000D603                 db    0
.xdata$x:0000D604                 db    0
.xdata$x:0000D605                 db    0
.xdata$x:0000D606                 db    0
.xdata$x:0000D607                 db    0
.xdata$x:0000D607 _xdata$x        ends
.xdata$x:0000D607
.xdata$x:0000D608 ; ===========================================================================
.xdata$x:0000D608
.xdata$x:0000D608 ; Segment type: Pure data
.xdata$x:0000D608 ; Segment permissions: Read
.xdata$x:0000D608 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D608                 assume cs:_xdata$x
.xdata$x:0000D608                 ;org 0D608h
.xdata$x:0000D608 ; COMDAT (pick associative to section at 6444)
.xdata$x:0000D608 __unwindtable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D608                                         ; DATA XREF: .xdata$x:0000D618o
.xdata$x:0000D609                 db 0FFh
.xdata$x:0000D60A                 db 0FFh
.xdata$x:0000D60B                 db 0FFh
.xdata$x:0000D60C                 dd offset __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D610 __ehfuncinfo$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D610                                         ; DATA XREF: __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D611                 db    5
.xdata$x:0000D612                 db  93h ; ô
.xdata$x:0000D613                 db  19h
.xdata$x:0000D614                 db    1
.xdata$x:0000D615                 db    0
.xdata$x:0000D616                 db    0
.xdata$x:0000D617                 db    0
.xdata$x:0000D618                 dd offset __unwindtable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.xdata$x:0000D61C                 db    0
.xdata$x:0000D61D                 db    0
.xdata$x:0000D61E                 db    0
.xdata$x:0000D61F                 db    0
.xdata$x:0000D620                 db    0
.xdata$x:0000D621                 db    0
.xdata$x:0000D622                 db    0
.xdata$x:0000D623                 db    0
.xdata$x:0000D624                 db    0
.xdata$x:0000D625                 db    0
.xdata$x:0000D626                 db    0
.xdata$x:0000D627                 db    0
.xdata$x:0000D628                 db    0
.xdata$x:0000D629                 db    0
.xdata$x:0000D62A                 db    0
.xdata$x:0000D62B                 db    0
.xdata$x:0000D62C                 db    0
.xdata$x:0000D62D                 db    0
.xdata$x:0000D62E                 db    0
.xdata$x:0000D62F                 db    0
.xdata$x:0000D630                 db    0
.xdata$x:0000D631                 db    0
.xdata$x:0000D632                 db    0
.xdata$x:0000D633                 db    0
.xdata$x:0000D633 _xdata$x        ends
.xdata$x:0000D633
.xdata$x:0000D634 ; ===========================================================================
.xdata$x:0000D634
.xdata$x:0000D634 ; Segment type: Pure data
.xdata$x:0000D634 ; Segment permissions: Read
.xdata$x:0000D634 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D634                 assume cs:_xdata$x
.xdata$x:0000D634                 ;org 0D634h
.xdata$x:0000D634 ; COMDAT (pick associative to section at 62F8)
.xdata$x:0000D634 __catchsym$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$5 db    0
.xdata$x:0000D634                                         ; DATA XREF: .xdata$x:0000D654o
.xdata$x:0000D635                 db    0
.xdata$x:0000D636                 db    0
.xdata$x:0000D637                 db    0
.xdata$x:0000D638                 db    0
.xdata$x:0000D639                 db    0
.xdata$x:0000D63A                 db    0
.xdata$x:0000D63B                 db    0
.xdata$x:0000D63C                 db    0
.xdata$x:0000D63D                 db    0
.xdata$x:0000D63E                 db    0
.xdata$x:0000D63F                 db    0
.xdata$x:0000D640                 dd offset __catch$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000D644 __tryblocktable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z db    1
.xdata$x:0000D644                                         ; DATA XREF: .xdata$x:0000D668o
.xdata$x:0000D645                 db    0
.xdata$x:0000D646                 db    0
.xdata$x:0000D647                 db    0
.xdata$x:0000D648                 db    3
.xdata$x:0000D649                 db    0
.xdata$x:0000D64A                 db    0
.xdata$x:0000D64B                 db    0
.xdata$x:0000D64C                 db    4
.xdata$x:0000D64D                 db    0
.xdata$x:0000D64E                 db    0
.xdata$x:0000D64F                 db    0
.xdata$x:0000D650                 db    1
.xdata$x:0000D651                 db    0
.xdata$x:0000D652                 db    0
.xdata$x:0000D653                 db    0
.xdata$x:0000D654                 dd offset __catchsym$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$5
.xdata$x:0000D658 __ehfuncinfo$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000D658                                         ; DATA XREF: __ehhandler$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000D659                 db    5
.xdata$x:0000D65A                 db  93h ; ô
.xdata$x:0000D65B                 db  19h
.xdata$x:0000D65C                 db    5
.xdata$x:0000D65D                 db    0
.xdata$x:0000D65E                 db    0
.xdata$x:0000D65F                 db    0
.xdata$x:0000D660                 dd offset __unwindtable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000D664                 db    1
.xdata$x:0000D665                 db    0
.xdata$x:0000D666                 db    0
.xdata$x:0000D667                 db    0
.xdata$x:0000D668                 dd offset __tryblocktable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000D66C                 db    0
.xdata$x:0000D66D                 db    0
.xdata$x:0000D66E                 db    0
.xdata$x:0000D66F                 db    0
.xdata$x:0000D670                 db    0
.xdata$x:0000D671                 db    0
.xdata$x:0000D672                 db    0
.xdata$x:0000D673                 db    0
.xdata$x:0000D674                 db    0
.xdata$x:0000D675                 db    0
.xdata$x:0000D676                 db    0
.xdata$x:0000D677                 db    0
.xdata$x:0000D678                 db    0
.xdata$x:0000D679                 db    0
.xdata$x:0000D67A                 db    0
.xdata$x:0000D67B                 db    0
.xdata$x:0000D67C __unwindtable$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000D67C                                         ; DATA XREF: .xdata$x:0000D660o
.xdata$x:0000D67D                 db 0FFh
.xdata$x:0000D67E                 db 0FFh
.xdata$x:0000D67F                 db 0FFh
.xdata$x:0000D680                 dd offset __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$2
.xdata$x:0000D684                 db    0
.xdata$x:0000D685                 db    0
.xdata$x:0000D686                 db    0
.xdata$x:0000D687                 db    0
.xdata$x:0000D688                 db    0
.xdata$x:0000D689                 db    0
.xdata$x:0000D68A                 db    0
.xdata$x:0000D68B                 db    0
.xdata$x:0000D68C                 db    1
.xdata$x:0000D68D                 db    0
.xdata$x:0000D68E                 db    0
.xdata$x:0000D68F                 db    0
.xdata$x:0000D690                 dd offset __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$3
.xdata$x:0000D694                 db    2
.xdata$x:0000D695                 db    0
.xdata$x:0000D696                 db    0
.xdata$x:0000D697                 db    0
.xdata$x:0000D698                 dd offset __unwindfunclet$??0?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@ABV01@@Z$4
.xdata$x:0000D69C                 db    0
.xdata$x:0000D69D                 db    0
.xdata$x:0000D69E                 db    0
.xdata$x:0000D69F                 db    0
.xdata$x:0000D6A0                 db    0
.xdata$x:0000D6A1                 db    0
.xdata$x:0000D6A2                 db    0
.xdata$x:0000D6A3                 db    0
.xdata$x:0000D6A3 _xdata$x        ends
.xdata$x:0000D6A3
.xdata$x:0000D6A4 ; ===========================================================================
.xdata$x:0000D6A4
.xdata$x:0000D6A4 ; Segment type: Pure data
.xdata$x:0000D6A4 ; Segment permissions: Read
.xdata$x:0000D6A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D6A4                 assume cs:_xdata$x
.xdata$x:0000D6A4                 ;org 0D6A4h
.xdata$x:0000D6A4 ; COMDAT (pick associative to section at 769C)
.xdata$x:0000D6A4 __unwindtable$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D6A4                                         ; DATA XREF: .xdata$x:0000D6B4o
.xdata$x:0000D6A5                 db 0FFh
.xdata$x:0000D6A6                 db 0FFh
.xdata$x:0000D6A7                 db 0FFh
.xdata$x:0000D6A8                 dd offset __unwindfunclet$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D6AC __ehfuncinfo$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D6AC                                         ; DATA XREF: __ehhandler$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D6AD                 db    5
.xdata$x:0000D6AE                 db  93h ; ô
.xdata$x:0000D6AF                 db  19h
.xdata$x:0000D6B0                 db    1
.xdata$x:0000D6B1                 db    0
.xdata$x:0000D6B2                 db    0
.xdata$x:0000D6B3                 db    0
.xdata$x:0000D6B4                 dd offset __unwindtable$??1?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAE@XZ
.xdata$x:0000D6B8                 db    0
.xdata$x:0000D6B9                 db    0
.xdata$x:0000D6BA                 db    0
.xdata$x:0000D6BB                 db    0
.xdata$x:0000D6BC                 db    0
.xdata$x:0000D6BD                 db    0
.xdata$x:0000D6BE                 db    0
.xdata$x:0000D6BF                 db    0
.xdata$x:0000D6C0                 db    0
.xdata$x:0000D6C1                 db    0
.xdata$x:0000D6C2                 db    0
.xdata$x:0000D6C3                 db    0
.xdata$x:0000D6C4                 db    0
.xdata$x:0000D6C5                 db    0
.xdata$x:0000D6C6                 db    0
.xdata$x:0000D6C7                 db    0
.xdata$x:0000D6C8                 db    0
.xdata$x:0000D6C9                 db    0
.xdata$x:0000D6CA                 db    0
.xdata$x:0000D6CB                 db    0
.xdata$x:0000D6CC                 db    0
.xdata$x:0000D6CD                 db    0
.xdata$x:0000D6CE                 db    0
.xdata$x:0000D6CF                 db    0
.xdata$x:0000D6CF _xdata$x        ends
.xdata$x:0000D6CF
.xdata$x:0000D6D0 ; ===========================================================================
.xdata$x:0000D6D0
.xdata$x:0000D6D0 ; Segment type: Pure data
.xdata$x:0000D6D0 ; Segment permissions: Read
.xdata$x:0000D6D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D6D0                 assume cs:_xdata$x
.xdata$x:0000D6D0                 ;org 0D6D0h
.xdata$x:0000D6D0 ; COMDAT (pick associative to section at 7E8C)
.xdata$x:0000D6D0 __catchsym$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z$2 db    0
.xdata$x:0000D6D0                                         ; DATA XREF: .xdata$x:0000D700o
.xdata$x:0000D6D1                 db    0
.xdata$x:0000D6D2                 db    0
.xdata$x:0000D6D3                 db    0
.xdata$x:0000D6D4                 db    0
.xdata$x:0000D6D5                 db    0
.xdata$x:0000D6D6                 db    0
.xdata$x:0000D6D7                 db    0
.xdata$x:0000D6D8                 db    0
.xdata$x:0000D6D9                 db    0
.xdata$x:0000D6DA                 db    0
.xdata$x:0000D6DB                 db    0
.xdata$x:0000D6DC                 dd offset __catch$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z$0
.xdata$x:0000D6E0 __unwindtable$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z db 0FFh
.xdata$x:0000D6E0                                         ; DATA XREF: .xdata$x:0000D70Co
.xdata$x:0000D6E1                 db 0FFh
.xdata$x:0000D6E2                 db 0FFh
.xdata$x:0000D6E3                 db 0FFh
.xdata$x:0000D6E4                 db    0
.xdata$x:0000D6E5                 db    0
.xdata$x:0000D6E6                 db    0
.xdata$x:0000D6E7                 db    0
.xdata$x:0000D6E8                 db 0FFh
.xdata$x:0000D6E9                 db 0FFh
.xdata$x:0000D6EA                 db 0FFh
.xdata$x:0000D6EB                 db 0FFh
.xdata$x:0000D6EC                 db    0
.xdata$x:0000D6ED                 db    0
.xdata$x:0000D6EE                 db    0
.xdata$x:0000D6EF                 db    0
.xdata$x:0000D6F0 __tryblocktable$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z db    0
.xdata$x:0000D6F0                                         ; DATA XREF: .xdata$x:0000D714o
.xdata$x:0000D6F1                 db    0
.xdata$x:0000D6F2                 db    0
.xdata$x:0000D6F3                 db    0
.xdata$x:0000D6F4                 db    0
.xdata$x:0000D6F5                 db    0
.xdata$x:0000D6F6                 db    0
.xdata$x:0000D6F7                 db    0
.xdata$x:0000D6F8                 db    1
.xdata$x:0000D6F9                 db    0
.xdata$x:0000D6FA                 db    0
.xdata$x:0000D6FB                 db    0
.xdata$x:0000D6FC                 db    1
.xdata$x:0000D6FD                 db    0
.xdata$x:0000D6FE                 db    0
.xdata$x:0000D6FF                 db    0
.xdata$x:0000D700                 dd offset __catchsym$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z$2
.xdata$x:0000D704 __ehfuncinfo$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z db  22h ; "
.xdata$x:0000D704                                         ; DATA XREF: __ehhandler$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z+11o
.xdata$x:0000D705                 db    5
.xdata$x:0000D706                 db  93h ; ô
.xdata$x:0000D707                 db  19h
.xdata$x:0000D708                 db    2
.xdata$x:0000D709                 db    0
.xdata$x:0000D70A                 db    0
.xdata$x:0000D70B                 db    0
.xdata$x:0000D70C                 dd offset __unwindtable$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.xdata$x:0000D710                 db    1
.xdata$x:0000D711                 db    0
.xdata$x:0000D712                 db    0
.xdata$x:0000D713                 db    0
.xdata$x:0000D714                 dd offset __tryblocktable$??4?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QAEAAV01@ABV01@@Z
.xdata$x:0000D718                 db    0
.xdata$x:0000D719                 db    0
.xdata$x:0000D71A                 db    0
.xdata$x:0000D71B                 db    0
.xdata$x:0000D71C                 db    0
.xdata$x:0000D71D                 db    0
.xdata$x:0000D71E                 db    0
.xdata$x:0000D71F                 db    0
.xdata$x:0000D720                 db    0
.xdata$x:0000D721                 db    0
.xdata$x:0000D722                 db    0
.xdata$x:0000D723                 db    0
.xdata$x:0000D724                 db    0
.xdata$x:0000D725                 db    0
.xdata$x:0000D726                 db    0
.xdata$x:0000D727                 db    0
.xdata$x:0000D727 _xdata$x        ends
.xdata$x:0000D727
.xdata$x:0000D728 ; ===========================================================================
.xdata$x:0000D728
.xdata$x:0000D728 ; Segment type: Pure data
.xdata$x:0000D728 ; Segment permissions: Read
.xdata$x:0000D728 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D728                 assume cs:_xdata$x
.xdata$x:0000D728                 ;org 0D728h
.xdata$x:0000D728 ; COMDAT (pick associative to section at A8A0)
.xdata$x:0000D728 __unwindtable$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D728                                         ; DATA XREF: .xdata$x:0000D738o
.xdata$x:0000D729                 db 0FFh
.xdata$x:0000D72A                 db 0FFh
.xdata$x:0000D72B                 db 0FFh
.xdata$x:0000D72C                 dd offset __unwindfunclet$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0
.xdata$x:0000D730 __ehfuncinfo$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D730                                         ; DATA XREF: __ehhandler$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ+11o
.xdata$x:0000D731                 db    5
.xdata$x:0000D732                 db  93h ; ô
.xdata$x:0000D733                 db  19h
.xdata$x:0000D734                 db    1
.xdata$x:0000D735                 db    0
.xdata$x:0000D736                 db    0
.xdata$x:0000D737                 db    0
.xdata$x:0000D738                 dd offset __unwindtable$?begin@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.xdata$x:0000D73C                 db    0
.xdata$x:0000D73D                 db    0
.xdata$x:0000D73E                 db    0
.xdata$x:0000D73F                 db    0
.xdata$x:0000D740                 db    0
.xdata$x:0000D741                 db    0
.xdata$x:0000D742                 db    0
.xdata$x:0000D743                 db    0
.xdata$x:0000D744                 db    0
.xdata$x:0000D745                 db    0
.xdata$x:0000D746                 db    0
.xdata$x:0000D747                 db    0
.xdata$x:0000D748                 db    0
.xdata$x:0000D749                 db    0
.xdata$x:0000D74A                 db    0
.xdata$x:0000D74B                 db    0
.xdata$x:0000D74C                 db    0
.xdata$x:0000D74D                 db    0
.xdata$x:0000D74E                 db    0
.xdata$x:0000D74F                 db    0
.xdata$x:0000D750                 db    0
.xdata$x:0000D751                 db    0
.xdata$x:0000D752                 db    0
.xdata$x:0000D753                 db    0
.xdata$x:0000D753 _xdata$x        ends
.xdata$x:0000D753
.xdata$x:0000D754 ; ===========================================================================
.xdata$x:0000D754
.xdata$x:0000D754 ; Segment type: Pure data
.xdata$x:0000D754 ; Segment permissions: Read
.xdata$x:0000D754 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D754                 assume cs:_xdata$x
.xdata$x:0000D754                 ;org 0D754h
.xdata$x:0000D754 ; COMDAT (pick associative to section at B1A4)
.xdata$x:0000D754 __unwindtable$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000D754                                         ; DATA XREF: .xdata$x:0000D764o
.xdata$x:0000D755                 db 0FFh
.xdata$x:0000D756                 db 0FFh
.xdata$x:0000D757                 db 0FFh
.xdata$x:0000D758                 dd offset __unwindfunclet$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ$0
.xdata$x:0000D75C __ehfuncinfo$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000D75C                                         ; DATA XREF: __ehhandler$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ+11o
.xdata$x:0000D75D                 db    5
.xdata$x:0000D75E                 db  93h ; ô
.xdata$x:0000D75F                 db  19h
.xdata$x:0000D760                 db    1
.xdata$x:0000D761                 db    0
.xdata$x:0000D762                 db    0
.xdata$x:0000D763                 db    0
.xdata$x:0000D764                 dd offset __unwindtable$?end@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@2@XZ
.xdata$x:0000D768                 align 20h
.xdata$x:0000D768 _xdata$x        ends
.xdata$x:0000D768
.xdata$x:0000D780 ; ===========================================================================
.xdata$x:0000D780
.xdata$x:0000D780 ; Segment type: Pure data
.xdata$x:0000D780 ; Segment permissions: Read
.xdata$x:0000D780 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D780                 assume cs:_xdata$x
.xdata$x:0000D780                 ;org 0D780h
.xdata$x:0000D780 ; COMDAT (pick associative to section at 6A8C)
.xdata$x:0000D780 __unwindtable$??0TreeStateNode@@QAE@XZ db 0FFh
.xdata$x:0000D780                                         ; DATA XREF: .xdata$x:0000D7A0o
.xdata$x:0000D781                 db 0FFh
.xdata$x:0000D782                 db 0FFh
.xdata$x:0000D783                 db 0FFh
.xdata$x:0000D784                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@XZ$0
.xdata$x:0000D788                 db    0
.xdata$x:0000D789                 db    0
.xdata$x:0000D78A                 db    0
.xdata$x:0000D78B                 db    0
.xdata$x:0000D78C                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@XZ$1
.xdata$x:0000D790                 db    1
.xdata$x:0000D791                 db    0
.xdata$x:0000D792                 db    0
.xdata$x:0000D793                 db    0
.xdata$x:0000D794                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@XZ$2
.xdata$x:0000D798 __ehfuncinfo$??0TreeStateNode@@QAE@XZ db  22h ; "
.xdata$x:0000D798                                         ; DATA XREF: __ehhandler$??0TreeStateNode@@QAE@XZ+11o
.xdata$x:0000D799                 db    5
.xdata$x:0000D79A                 db  93h ; ô
.xdata$x:0000D79B                 db  19h
.xdata$x:0000D79C                 db    3
.xdata$x:0000D79D                 db    0
.xdata$x:0000D79E                 db    0
.xdata$x:0000D79F                 db    0
.xdata$x:0000D7A0                 dd offset __unwindtable$??0TreeStateNode@@QAE@XZ
.xdata$x:0000D7A4                 db    0
.xdata$x:0000D7A5                 db    0
.xdata$x:0000D7A6                 db    0
.xdata$x:0000D7A7                 db    0
.xdata$x:0000D7A8                 db    0
.xdata$x:0000D7A9                 db    0
.xdata$x:0000D7AA                 db    0
.xdata$x:0000D7AB                 db    0
.xdata$x:0000D7AC                 db    0
.xdata$x:0000D7AD                 db    0
.xdata$x:0000D7AE                 db    0
.xdata$x:0000D7AF                 db    0
.xdata$x:0000D7B0                 db    0
.xdata$x:0000D7B1                 db    0
.xdata$x:0000D7B2                 db    0
.xdata$x:0000D7B3                 db    0
.xdata$x:0000D7B4                 db    0
.xdata$x:0000D7B5                 db    0
.xdata$x:0000D7B6                 db    0
.xdata$x:0000D7B7                 db    0
.xdata$x:0000D7B8                 db    0
.xdata$x:0000D7B9                 db    0
.xdata$x:0000D7BA                 db    0
.xdata$x:0000D7BB                 db    0
.xdata$x:0000D7BB _xdata$x        ends
.xdata$x:0000D7BB
.xdata$x:0000D7BC ; ===========================================================================
.xdata$x:0000D7BC
.xdata$x:0000D7BC ; Segment type: Pure data
.xdata$x:0000D7BC ; Segment permissions: Read
.xdata$x:0000D7BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D7BC                 assume cs:_xdata$x
.xdata$x:0000D7BC                 ;org 0D7BCh
.xdata$x:0000D7BC ; COMDAT (pick associative to section at 7994)
.xdata$x:0000D7BC __unwindtable$??1TreeStateNode@@QAE@XZ db 0FFh
.xdata$x:0000D7BC                                         ; DATA XREF: .xdata$x:0000D7DCo
.xdata$x:0000D7BD                 db 0FFh
.xdata$x:0000D7BE                 db 0FFh
.xdata$x:0000D7BF                 db 0FFh
.xdata$x:0000D7C0                 dd offset __unwindfunclet$??1TreeStateNode@@QAE@XZ$0
.xdata$x:0000D7C4                 align 8
.xdata$x:0000D7C8                 dd offset __unwindfunclet$??1TreeStateNode@@QAE@XZ$1
.xdata$x:0000D7CC                 db    1
.xdata$x:0000D7CD                 db    0
.xdata$x:0000D7CE                 db    0
.xdata$x:0000D7CF                 db    0
.xdata$x:0000D7D0                 dd offset __unwindfunclet$??1TreeStateNode@@QAE@XZ$2
.xdata$x:0000D7D4 __ehfuncinfo$??1TreeStateNode@@QAE@XZ db  22h ; "
.xdata$x:0000D7D4                                         ; DATA XREF: __ehhandler$??1TreeStateNode@@QAE@XZ+11o
.xdata$x:0000D7D5                 db    5
.xdata$x:0000D7D6                 db  93h ; ô
.xdata$x:0000D7D7                 db  19h
.xdata$x:0000D7D8                 db    3
.xdata$x:0000D7D9                 db    0
.xdata$x:0000D7DA                 db    0
.xdata$x:0000D7DB                 db    0
.xdata$x:0000D7DC                 dd offset __unwindtable$??1TreeStateNode@@QAE@XZ
.xdata$x:0000D7E0                 db    0
.xdata$x:0000D7E1                 db    0
.xdata$x:0000D7E2                 db    0
.xdata$x:0000D7E3                 db    0
.xdata$x:0000D7E4                 db    0
.xdata$x:0000D7E5                 db    0
.xdata$x:0000D7E6                 db    0
.xdata$x:0000D7E7                 db    0
.xdata$x:0000D7E8                 db    0
.xdata$x:0000D7E9                 db    0
.xdata$x:0000D7EA                 db    0
.xdata$x:0000D7EB                 db    0
.xdata$x:0000D7EC                 db    0
.xdata$x:0000D7ED                 db    0
.xdata$x:0000D7EE                 db    0
.xdata$x:0000D7EF                 db    0
.xdata$x:0000D7F0                 db    0
.xdata$x:0000D7F1                 db    0
.xdata$x:0000D7F2                 db    0
.xdata$x:0000D7F3                 db    0
.xdata$x:0000D7F4                 db    0
.xdata$x:0000D7F5                 db    0
.xdata$x:0000D7F6                 db    0
.xdata$x:0000D7F7                 db    0
.xdata$x:0000D7F7 _xdata$x        ends
.xdata$x:0000D7F7
.xdata$x:0000D7F8 ; ===========================================================================
.xdata$x:0000D7F8
.xdata$x:0000D7F8 ; Segment type: Pure data
.xdata$x:0000D7F8 ; Segment permissions: Read
.xdata$x:0000D7F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D7F8                 assume cs:_xdata$x
.xdata$x:0000D7F8                 ;org 0D7F8h
.xdata$x:0000D7F8 ; COMDAT (pick associative to section at 69B8)
.xdata$x:0000D7F8 __unwindtable$??0TreeStateNode@@QAE@ABU0@@Z db 0FFh
.xdata$x:0000D7F8                                         ; DATA XREF: .xdata$x:0000D818o
.xdata$x:0000D7F9                 db 0FFh
.xdata$x:0000D7FA                 db 0FFh
.xdata$x:0000D7FB                 db 0FFh
.xdata$x:0000D7FC                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$0
.xdata$x:0000D800                 db    0
.xdata$x:0000D801                 db    0
.xdata$x:0000D802                 db    0
.xdata$x:0000D803                 db    0
.xdata$x:0000D804                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$1
.xdata$x:0000D808                 db    1
.xdata$x:0000D809                 db    0
.xdata$x:0000D80A                 db    0
.xdata$x:0000D80B                 db    0
.xdata$x:0000D80C                 dd offset __unwindfunclet$??0TreeStateNode@@QAE@ABU0@@Z$2
.xdata$x:0000D810 __ehfuncinfo$??0TreeStateNode@@QAE@ABU0@@Z db  22h ; "
.xdata$x:0000D810                                         ; DATA XREF: __ehhandler$??0TreeStateNode@@QAE@ABU0@@Z+11o
.xdata$x:0000D811                 db    5
.xdata$x:0000D812                 db  93h ; ô
.xdata$x:0000D813                 db  19h
.xdata$x:0000D814                 db    3
.xdata$x:0000D815                 db    0
.xdata$x:0000D816                 db    0
.xdata$x:0000D817                 db    0
.xdata$x:0000D818                 dd offset __unwindtable$??0TreeStateNode@@QAE@ABU0@@Z
.xdata$x:0000D81C                 db    0
.xdata$x:0000D81D                 db    0
.xdata$x:0000D81E                 db    0
.xdata$x:0000D81F                 db    0
.xdata$x:0000D820                 db    0
.xdata$x:0000D821                 db    0
.xdata$x:0000D822                 db    0
.xdata$x:0000D823                 db    0
.xdata$x:0000D824                 db    0
.xdata$x:0000D825                 db    0
.xdata$x:0000D826                 db    0
.xdata$x:0000D827                 db    0
.xdata$x:0000D828                 db    0
.xdata$x:0000D829                 db    0
.xdata$x:0000D82A                 db    0
.xdata$x:0000D82B                 db    0
.xdata$x:0000D82C                 db    0
.xdata$x:0000D82D                 db    0
.xdata$x:0000D82E                 db    0
.xdata$x:0000D82F                 db    0
.xdata$x:0000D830                 db    0
.xdata$x:0000D831                 db    0
.xdata$x:0000D832                 db    0
.xdata$x:0000D833                 db    0
.xdata$x:0000D833 _xdata$x        ends
.xdata$x:0000D833
.xdata$x:0000D834 ; ===========================================================================
.xdata$x:0000D834
.xdata$x:0000D834 ; Segment type: Pure data
.xdata$x:0000D834 ; Segment permissions: Read
.xdata$x:0000D834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D834                 assume cs:_xdata$x
.xdata$x:0000D834                 ;org 0D834h
.xdata$x:0000D834 ; COMDAT (pick associative to section at 680C)
.xdata$x:0000D834 __unwindtable$??0SearchParameters@@QAE@XZ db 0FFh
.xdata$x:0000D834                                         ; DATA XREF: .xdata$x:0000D844o
.xdata$x:0000D835                 db 0FFh
.xdata$x:0000D836                 db 0FFh
.xdata$x:0000D837                 db 0FFh
.xdata$x:0000D838                 dd offset __unwindfunclet$??0SearchParameters@@QAE@XZ$0
.xdata$x:0000D83C __ehfuncinfo$??0SearchParameters@@QAE@XZ db  22h ; "
.xdata$x:0000D83C                                         ; DATA XREF: __ehhandler$??0SearchParameters@@QAE@XZ+11o
.xdata$x:0000D83D                 db    5
.xdata$x:0000D83E                 db  93h ; ô
.xdata$x:0000D83F                 db  19h
.xdata$x:0000D840                 db    1
.xdata$x:0000D841                 db    0
.xdata$x:0000D842                 db    0
.xdata$x:0000D843                 db    0
.xdata$x:0000D844                 dd offset __unwindtable$??0SearchParameters@@QAE@XZ
.xdata$x:0000D848                 align 20h
.xdata$x:0000D848 _xdata$x        ends
.xdata$x:0000D848
.xdata$x:0000D860 ; ===========================================================================
.xdata$x:0000D860
.xdata$x:0000D860 ; Segment type: Pure data
.xdata$x:0000D860 ; Segment permissions: Read
.xdata$x:0000D860 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D860                 assume cs:_xdata$x
.xdata$x:0000D860                 ;org 0D860h
.xdata$x:0000D860 ; COMDAT (pick associative to section at 7898)
.xdata$x:0000D860 __unwindtable$??1SearchParameters@@QAE@XZ db 0FFh
.xdata$x:0000D860                                         ; DATA XREF: .xdata$x:0000D870o
.xdata$x:0000D861                 db 0FFh
.xdata$x:0000D862                 db 0FFh
.xdata$x:0000D863                 db 0FFh
.xdata$x:0000D864                 dd offset __unwindfunclet$??1SearchParameters@@QAE@XZ$0
.xdata$x:0000D868 __ehfuncinfo$??1SearchParameters@@QAE@XZ db  22h ; "
.xdata$x:0000D868                                         ; DATA XREF: __ehhandler$??1SearchParameters@@QAE@XZ+11o
.xdata$x:0000D869                 db    5
.xdata$x:0000D86A                 db  93h ; ô
.xdata$x:0000D86B                 db  19h
.xdata$x:0000D86C                 db    1
.xdata$x:0000D86D                 db    0
.xdata$x:0000D86E                 db    0
.xdata$x:0000D86F                 db    0
.xdata$x:0000D870                 dd offset __unwindtable$??1SearchParameters@@QAE@XZ
.xdata$x:0000D874                 db    0
.xdata$x:0000D875                 db    0
.xdata$x:0000D876                 db    0
.xdata$x:0000D877                 db    0
.xdata$x:0000D878                 db    0
.xdata$x:0000D879                 db    0
.xdata$x:0000D87A                 db    0
.xdata$x:0000D87B                 db    0
.xdata$x:0000D87C                 db    0
.xdata$x:0000D87D                 db    0
.xdata$x:0000D87E                 db    0
.xdata$x:0000D87F                 db    0
.xdata$x:0000D880                 db    0
.xdata$x:0000D881                 db    0
.xdata$x:0000D882                 db    0
.xdata$x:0000D883                 db    0
.xdata$x:0000D884                 db    0
.xdata$x:0000D885                 db    0
.xdata$x:0000D886                 db    0
.xdata$x:0000D887                 db    0
.xdata$x:0000D888                 db    0
.xdata$x:0000D889                 db    0
.xdata$x:0000D88A                 db    0
.xdata$x:0000D88B                 db    0
.xdata$x:0000D88B _xdata$x        ends
.xdata$x:0000D88B
.xdata$x:0000D88C ; ===========================================================================
.xdata$x:0000D88C
.xdata$x:0000D88C ; Segment type: Pure data
.xdata$x:0000D88C ; Segment permissions: Read
.xdata$x:0000D88C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D88C                 assume cs:_xdata$x
.xdata$x:0000D88C                 ;org 0D88Ch
.xdata$x:0000D88C ; COMDAT (pick associative to section at 6788)
.xdata$x:0000D88C __unwindtable$??0SearchParameters@@QAE@ABU0@@Z db 0FFh
.xdata$x:0000D88C                                         ; DATA XREF: .xdata$x:0000D89Co
.xdata$x:0000D88D                 db 0FFh
.xdata$x:0000D88E                 db 0FFh
.xdata$x:0000D88F                 db 0FFh
.xdata$x:0000D890                 dd offset __unwindfunclet$??0SearchParameters@@QAE@ABU0@@Z$0
.xdata$x:0000D894 __ehfuncinfo$??0SearchParameters@@QAE@ABU0@@Z db  22h ; "
.xdata$x:0000D894                                         ; DATA XREF: __ehhandler$??0SearchParameters@@QAE@ABU0@@Z+11o
.xdata$x:0000D895                 db    5
.xdata$x:0000D896                 db  93h ; ô
.xdata$x:0000D897                 db  19h
.xdata$x:0000D898                 db    1
.xdata$x:0000D899                 db    0
.xdata$x:0000D89A                 db    0
.xdata$x:0000D89B                 db    0
.xdata$x:0000D89C                 dd offset __unwindtable$??0SearchParameters@@QAE@ABU0@@Z
.xdata$x:0000D8A0                 db    0
.xdata$x:0000D8A1                 db    0
.xdata$x:0000D8A2                 db    0
.xdata$x:0000D8A3                 db    0
.xdata$x:0000D8A4                 db    0
.xdata$x:0000D8A5                 db    0
.xdata$x:0000D8A6                 db    0
.xdata$x:0000D8A7                 db    0
.xdata$x:0000D8A8                 db    0
.xdata$x:0000D8A9                 db    0
.xdata$x:0000D8AA                 db    0
.xdata$x:0000D8AB                 db    0
.xdata$x:0000D8AC                 db    0
.xdata$x:0000D8AD                 db    0
.xdata$x:0000D8AE                 db    0
.xdata$x:0000D8AF                 db    0
.xdata$x:0000D8B0                 db    0
.xdata$x:0000D8B1                 db    0
.xdata$x:0000D8B2                 db    0
.xdata$x:0000D8B3                 db    0
.xdata$x:0000D8B4                 db    0
.xdata$x:0000D8B5                 db    0
.xdata$x:0000D8B6                 db    0
.xdata$x:0000D8B7                 db    0
.xdata$x:0000D8B7 _xdata$x        ends
.xdata$x:0000D8B7
.xdata$x:0000D8B8 ; ===========================================================================
.xdata$x:0000D8B8
.xdata$x:0000D8B8 ; Segment type: Pure data
.xdata$x:0000D8B8 ; Segment permissions: Read
.xdata$x:0000D8B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D8B8                 assume cs:_xdata$x
.xdata$x:0000D8B8                 ;org 0D8B8h
.xdata$x:0000D8B8 ; COMDAT (pick associative to section at 6928)
.xdata$x:0000D8B8 __unwindtable$??0TreeParams@@QAE@XZ db 0FFh
.xdata$x:0000D8B8                                         ; DATA XREF: .xdata$x:0000D8D0o
.xdata$x:0000D8B9                 db 0FFh
.xdata$x:0000D8BA                 db 0FFh
.xdata$x:0000D8BB                 db 0FFh
.xdata$x:0000D8BC                 dd offset __unwindfunclet$??0TreeParams@@QAE@XZ$0
.xdata$x:0000D8C0                 db    0
.xdata$x:0000D8C1                 db    0
.xdata$x:0000D8C2                 db    0
.xdata$x:0000D8C3                 db    0
.xdata$x:0000D8C4                 dd offset __unwindfunclet$??0TreeParams@@QAE@XZ$1
.xdata$x:0000D8C8 __ehfuncinfo$??0TreeParams@@QAE@XZ db  22h ; "
.xdata$x:0000D8C8                                         ; DATA XREF: __ehhandler$??0TreeParams@@QAE@XZ+11o
.xdata$x:0000D8C9                 db    5
.xdata$x:0000D8CA                 db  93h ; ô
.xdata$x:0000D8CB                 db  19h
.xdata$x:0000D8CC                 db    2
.xdata$x:0000D8CD                 db    0
.xdata$x:0000D8CE                 db    0
.xdata$x:0000D8CF                 db    0
.xdata$x:0000D8D0                 dd offset __unwindtable$??0TreeParams@@QAE@XZ
.xdata$x:0000D8D4                 db    0
.xdata$x:0000D8D5                 db    0
.xdata$x:0000D8D6                 db    0
.xdata$x:0000D8D7                 db    0
.xdata$x:0000D8D8                 db    0
.xdata$x:0000D8D9                 db    0
.xdata$x:0000D8DA                 db    0
.xdata$x:0000D8DB                 db    0
.xdata$x:0000D8DC                 db    0
.xdata$x:0000D8DD                 db    0
.xdata$x:0000D8DE                 db    0
.xdata$x:0000D8DF                 db    0
.xdata$x:0000D8E0                 db    0
.xdata$x:0000D8E1                 db    0
.xdata$x:0000D8E2                 db    0
.xdata$x:0000D8E3                 db    0
.xdata$x:0000D8E4                 db    0
.xdata$x:0000D8E5                 db    0
.xdata$x:0000D8E6                 db    0
.xdata$x:0000D8E7                 db    0
.xdata$x:0000D8E8                 db    0
.xdata$x:0000D8E9                 db    0
.xdata$x:0000D8EA                 db    0
.xdata$x:0000D8EB                 db    0
.xdata$x:0000D8EB _xdata$x        ends
.xdata$x:0000D8EB
.xdata$x:0000D8EC ; ===========================================================================
.xdata$x:0000D8EC
.xdata$x:0000D8EC ; Segment type: Pure data
.xdata$x:0000D8EC ; Segment permissions: Read
.xdata$x:0000D8EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D8EC                 assume cs:_xdata$x
.xdata$x:0000D8EC                 ;org 0D8ECh
.xdata$x:0000D8EC ; COMDAT (pick associative to section at 7908)
.xdata$x:0000D8EC __unwindtable$??1TreeParams@@QAE@XZ db 0FFh
.xdata$x:0000D8EC                                         ; DATA XREF: .xdata$x:0000D904o
.xdata$x:0000D8ED                 db 0FFh
.xdata$x:0000D8EE                 db 0FFh
.xdata$x:0000D8EF                 db 0FFh
.xdata$x:0000D8F0                 dd offset __unwindfunclet$??1TreeParams@@QAE@XZ$0
.xdata$x:0000D8F4                 align 8
.xdata$x:0000D8F8                 dd offset __unwindfunclet$??1TreeParams@@QAE@XZ$1
.xdata$x:0000D8FC __ehfuncinfo$??1TreeParams@@QAE@XZ db  22h ; "
.xdata$x:0000D8FC                                         ; DATA XREF: __ehhandler$??1TreeParams@@QAE@XZ+11o
.xdata$x:0000D8FD                 db    5
.xdata$x:0000D8FE                 db  93h ; ô
.xdata$x:0000D8FF                 db  19h
.xdata$x:0000D900                 db    2
.xdata$x:0000D901                 db    0
.xdata$x:0000D902                 db    0
.xdata$x:0000D903                 db    0
.xdata$x:0000D904                 dd offset __unwindtable$??1TreeParams@@QAE@XZ
.xdata$x:0000D908                 align 20h
.xdata$x:0000D908 _xdata$x        ends
.xdata$x:0000D908
.xdata$x:0000D920 ; ===========================================================================
.xdata$x:0000D920
.xdata$x:0000D920 ; Segment type: Pure data
.xdata$x:0000D920 ; Segment permissions: Read
.xdata$x:0000D920 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D920                 assume cs:_xdata$x
.xdata$x:0000D920                 ;org 0D920h
.xdata$x:0000D920 ; COMDAT (pick associative to section at 688C)
.xdata$x:0000D920 __unwindtable$??0TreeParams@@QAE@ABU0@@Z db 0FFh
.xdata$x:0000D920                                         ; DATA XREF: .xdata$x:0000D938o
.xdata$x:0000D921                 db 0FFh
.xdata$x:0000D922                 db 0FFh
.xdata$x:0000D923                 db 0FFh
.xdata$x:0000D924                 dd offset __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$0
.xdata$x:0000D928                 db    0
.xdata$x:0000D929                 db    0
.xdata$x:0000D92A                 db    0
.xdata$x:0000D92B                 db    0
.xdata$x:0000D92C                 dd offset __unwindfunclet$??0TreeParams@@QAE@ABU0@@Z$1
.xdata$x:0000D930 __ehfuncinfo$??0TreeParams@@QAE@ABU0@@Z db  22h ; "
.xdata$x:0000D930                                         ; DATA XREF: __ehhandler$??0TreeParams@@QAE@ABU0@@Z+11o
.xdata$x:0000D931                 db    5
.xdata$x:0000D932                 db  93h ; ô
.xdata$x:0000D933                 db  19h
.xdata$x:0000D934                 db    2
.xdata$x:0000D935                 db    0
.xdata$x:0000D936                 db    0
.xdata$x:0000D937                 db    0
.xdata$x:0000D938                 dd offset __unwindtable$??0TreeParams@@QAE@ABU0@@Z
.xdata$x:0000D93C                 db    0
.xdata$x:0000D93D                 db    0
.xdata$x:0000D93E                 db    0
.xdata$x:0000D93F                 db    0
.xdata$x:0000D940                 db    0
.xdata$x:0000D941                 db    0
.xdata$x:0000D942                 db    0
.xdata$x:0000D943                 db    0
.xdata$x:0000D944                 db    0
.xdata$x:0000D945                 db    0
.xdata$x:0000D946                 db    0
.xdata$x:0000D947                 db    0
.xdata$x:0000D948                 db    0
.xdata$x:0000D949                 db    0
.xdata$x:0000D94A                 db    0
.xdata$x:0000D94B                 db    0
.xdata$x:0000D94C                 db    0
.xdata$x:0000D94D                 db    0
.xdata$x:0000D94E                 db    0
.xdata$x:0000D94F                 db    0
.xdata$x:0000D950                 db    0
.xdata$x:0000D951                 db    0
.xdata$x:0000D952                 db    0
.xdata$x:0000D953                 db    0
.xdata$x:0000D953 _xdata$x        ends
.xdata$x:0000D953
.xdata$x:0000D954 ; ===========================================================================
.xdata$x:0000D954
.xdata$x:0000D954 ; Segment type: Pure data
.xdata$x:0000D954 ; Segment permissions: Read
.xdata$x:0000D954 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D954                 assume cs:_xdata$x
.xdata$x:0000D954                 ;org 0D954h
.xdata$x:0000D954 __unwindtable$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:0000D954                                         ; DATA XREF: .xdata$x:0000D9A4o
.xdata$x:0000D955                 db 0FFh
.xdata$x:0000D956                 db 0FFh
.xdata$x:0000D957                 db 0FFh
.xdata$x:0000D958                 dd offset __unwindfunclet$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:0000D95C __unwindtable$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z db 0FFh
.xdata$x:0000D95C                                         ; DATA XREF: .xdata$x:0000D9ECo
.xdata$x:0000D95D                 db 0FFh
.xdata$x:0000D95E                 db 0FFh
.xdata$x:0000D95F                 db 0FFh
.xdata$x:0000D960                 dd offset __unwindfunclet$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z$0
.xdata$x:0000D964 __unwindtable$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ db 0FFh
.xdata$x:0000D964                                         ; DATA XREF: .xdata$x:0000DA58o
.xdata$x:0000D965                 db 0FFh
.xdata$x:0000D966                 db 0FFh
.xdata$x:0000D967                 db 0FFh
.xdata$x:0000D968                 dd offset __unwindfunclet$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ$0
.xdata$x:0000D96C __unwindtable$?sortOrUnsort@FunctionListPanel@@QAEXXZ db 0FFh
.xdata$x:0000D96C                                         ; DATA XREF: .xdata$x:0000DAA0o
.xdata$x:0000D96D                 db 0FFh
.xdata$x:0000D96E                 db 0FFh
.xdata$x:0000D96F                 db 0FFh
.xdata$x:0000D970                 dd offset __unwindfunclet$?sortOrUnsort@FunctionListPanel@@QAEXXZ$0
.xdata$x:0000D974 __unwindtable$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z db 0FFh
.xdata$x:0000D974                                         ; DATA XREF: .xdata$x:0000D9C8o
.xdata$x:0000D975                 db 0FFh
.xdata$x:0000D976                 db 0FFh
.xdata$x:0000D977                 db 0FFh
.xdata$x:0000D978                 dd offset __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$0
.xdata$x:0000D97C                 align 10h
.xdata$x:0000D980                 dd offset __unwindfunclet$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z$1
.xdata$x:0000D984 __unwindtable$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z db 0FFh
.xdata$x:0000D984                                         ; DATA XREF: .xdata$x:0000DA34o
.xdata$x:0000D985                 db 0FFh
.xdata$x:0000D986                 db 0FFh
.xdata$x:0000D987                 db 0FFh
.xdata$x:0000D988                 dd offset __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$0
.xdata$x:0000D98C                 db 0FFh
.xdata$x:0000D98D                 db 0FFh
.xdata$x:0000D98E                 db 0FFh
.xdata$x:0000D98F                 db 0FFh
.xdata$x:0000D990                 dd offset __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$1
.xdata$x:0000D994                 db 0FFh
.xdata$x:0000D995                 db 0FFh
.xdata$x:0000D996                 db 0FFh
.xdata$x:0000D997                 db 0FFh
.xdata$x:0000D998                 dd offset __unwindfunclet$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z$2
.xdata$x:0000D99C __ehfuncinfo$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:0000D99C                                         ; DATA XREF: __ehhandler$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:0000D99D                 db    5
.xdata$x:0000D99E                 db  93h ; ô
.xdata$x:0000D99F                 db  19h
.xdata$x:0000D9A0                 db    1
.xdata$x:0000D9A1                 db    0
.xdata$x:0000D9A2                 db    0
.xdata$x:0000D9A3                 db    0
.xdata$x:0000D9A4                 dd offset __unwindtable$?getFromStateArray@FunctionListPanel@@AAEPAUTreeParams@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:0000D9A8                 align 20h
.xdata$x:0000D9C0 __ehfuncinfo$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z db  22h ; "
.xdata$x:0000D9C0                                         ; DATA XREF: __ehhandler$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z+1Eo
.xdata$x:0000D9C1                 db    5
.xdata$x:0000D9C2                 db  93h ; ô
.xdata$x:0000D9C3                 db  19h
.xdata$x:0000D9C4                 db    2
.xdata$x:0000D9C5                 db    0
.xdata$x:0000D9C6                 db    0
.xdata$x:0000D9C7                 db    0
.xdata$x:0000D9C8                 dd offset __unwindtable$?addInStateArray@FunctionListPanel@@AAEXUTreeStateNode@@PB_W_N@Z
.xdata$x:0000D9CC                 db    0
.xdata$x:0000D9CD                 db    0
.xdata$x:0000D9CE                 db    0
.xdata$x:0000D9CF                 db    0
.xdata$x:0000D9D0                 db    0
.xdata$x:0000D9D1                 db    0
.xdata$x:0000D9D2                 db    0
.xdata$x:0000D9D3                 db    0
.xdata$x:0000D9D4                 db    0
.xdata$x:0000D9D5                 db    0
.xdata$x:0000D9D6                 db    0
.xdata$x:0000D9D7                 db    0
.xdata$x:0000D9D8                 db    0
.xdata$x:0000D9D9                 db    0
.xdata$x:0000D9DA                 db    0
.xdata$x:0000D9DB                 db    0
.xdata$x:0000D9DC                 db    0
.xdata$x:0000D9DD                 db    0
.xdata$x:0000D9DE                 db    0
.xdata$x:0000D9DF                 db    0
.xdata$x:0000D9E0                 db    0
.xdata$x:0000D9E1                 db    0
.xdata$x:0000D9E2                 db    0
.xdata$x:0000D9E3                 db    0
.xdata$x:0000D9E4 __ehfuncinfo$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z db  22h ; "
.xdata$x:0000D9E4                                         ; DATA XREF: __ehhandler$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z+1Bo
.xdata$x:0000D9E5                 db    5
.xdata$x:0000D9E6                 db  93h ; ô
.xdata$x:0000D9E7                 db  19h
.xdata$x:0000D9E8                 db    1
.xdata$x:0000D9E9                 db    0
.xdata$x:0000D9EA                 db    0
.xdata$x:0000D9EB                 db    0
.xdata$x:0000D9EC                 dd offset __unwindtable$?getBodyClosePos@FunctionListPanel@@AAEIIPB_W0@Z
.xdata$x:0000D9F0                 db    0
.xdata$x:0000D9F1                 db    0
.xdata$x:0000D9F2                 db    0
.xdata$x:0000D9F3                 db    0
.xdata$x:0000D9F4                 db    0
.xdata$x:0000D9F5                 db    0
.xdata$x:0000D9F6                 db    0
.xdata$x:0000D9F7                 db    0
.xdata$x:0000D9F8                 db    0
.xdata$x:0000D9F9                 db    0
.xdata$x:0000D9FA                 db    0
.xdata$x:0000D9FB                 db    0
.xdata$x:0000D9FC                 db    0
.xdata$x:0000D9FD                 db    0
.xdata$x:0000D9FE                 db    0
.xdata$x:0000D9FF                 db    0
.xdata$x:0000DA00                 db    0
.xdata$x:0000DA01                 db    0
.xdata$x:0000DA02                 db    0
.xdata$x:0000DA03                 db    0
.xdata$x:0000DA04                 db    0
.xdata$x:0000DA05                 db    0
.xdata$x:0000DA06                 db    0
.xdata$x:0000DA07                 db    0
.xdata$x:0000DA08 __ehfuncinfo$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z db  22h ; "
.xdata$x:0000DA08                                         ; DATA XREF: __ehhandler$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z+1Eo
.xdata$x:0000DA09                 db    5
.xdata$x:0000DA0A                 db  93h ; ô
.xdata$x:0000DA0B                 db  19h
.xdata$x:0000DA0C                 db    5
.xdata$x:0000DA0D                 db    0
.xdata$x:0000DA0E                 db    0
.xdata$x:0000DA0F                 db    0
.xdata$x:0000DA10                 dd offset __unwindtable$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z
.xdata$x:0000DA14                 db    0
.xdata$x:0000DA15                 db    0
.xdata$x:0000DA16                 db    0
.xdata$x:0000DA17                 db    0
.xdata$x:0000DA18                 db    0
.xdata$x:0000DA19                 db    0
.xdata$x:0000DA1A                 db    0
.xdata$x:0000DA1B                 db    0
.xdata$x:0000DA1C                 db    0
.xdata$x:0000DA1D                 db    0
.xdata$x:0000DA1E                 db    0
.xdata$x:0000DA1F                 db    0
.xdata$x:0000DA20                 db    0
.xdata$x:0000DA21                 db    0
.xdata$x:0000DA22                 db    0
.xdata$x:0000DA23                 db    0
.xdata$x:0000DA24                 db    0
.xdata$x:0000DA25                 db    0
.xdata$x:0000DA26                 db    0
.xdata$x:0000DA27                 db    0
.xdata$x:0000DA28                 db    0
.xdata$x:0000DA29                 db    0
.xdata$x:0000DA2A                 db    0
.xdata$x:0000DA2B                 db    0
.xdata$x:0000DA2C __ehfuncinfo$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z db  22h ; "
.xdata$x:0000DA2C                                         ; DATA XREF: __ehhandler$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z+1Eo
.xdata$x:0000DA2D                 db    5
.xdata$x:0000DA2E                 db  93h ; ô
.xdata$x:0000DA2F                 db  19h
.xdata$x:0000DA30                 db    3
.xdata$x:0000DA31                 db    0
.xdata$x:0000DA32                 db    0
.xdata$x:0000DA33                 db    0
.xdata$x:0000DA34                 dd offset __unwindtable$?run_dlgProc@FunctionListPanel@@MAGHIIJ@Z
.xdata$x:0000DA38                 db    0
.xdata$x:0000DA39                 db    0
.xdata$x:0000DA3A                 db    0
.xdata$x:0000DA3B                 db    0
.xdata$x:0000DA3C                 db    0
.xdata$x:0000DA3D                 db    0
.xdata$x:0000DA3E                 db    0
.xdata$x:0000DA3F                 db    0
.xdata$x:0000DA40                 db    0
.xdata$x:0000DA41                 db    0
.xdata$x:0000DA42                 db    0
.xdata$x:0000DA43                 db    0
.xdata$x:0000DA44                 db    0
.xdata$x:0000DA45                 db    0
.xdata$x:0000DA46                 db    0
.xdata$x:0000DA47                 db    0
.xdata$x:0000DA48                 db    0
.xdata$x:0000DA49                 db    0
.xdata$x:0000DA4A                 db    0
.xdata$x:0000DA4B                 db    0
.xdata$x:0000DA4C                 db    0
.xdata$x:0000DA4D                 db    0
.xdata$x:0000DA4E                 db    0
.xdata$x:0000DA4F                 db    0
.xdata$x:0000DA50 __ehfuncinfo$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ db  22h ; "
.xdata$x:0000DA50                                         ; DATA XREF: __ehhandler$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ+1Eo
.xdata$x:0000DA51                 db    5
.xdata$x:0000DA52                 db  93h ; ô
.xdata$x:0000DA53                 db  19h
.xdata$x:0000DA54                 db    1
.xdata$x:0000DA55                 db    0
.xdata$x:0000DA56                 db    0
.xdata$x:0000DA57                 db    0
.xdata$x:0000DA58                 dd offset __unwindtable$?searchFuncAndSwitchView@FunctionListPanel@@QAEXXZ
.xdata$x:0000DA5C                 db    0
.xdata$x:0000DA5D                 db    0
.xdata$x:0000DA5E                 db    0
.xdata$x:0000DA5F                 db    0
.xdata$x:0000DA60                 db    0
.xdata$x:0000DA61                 db    0
.xdata$x:0000DA62                 db    0
.xdata$x:0000DA63                 db    0
.xdata$x:0000DA64                 db    0
.xdata$x:0000DA65                 db    0
.xdata$x:0000DA66                 db    0
.xdata$x:0000DA67                 db    0
.xdata$x:0000DA68                 db    0
.xdata$x:0000DA69                 db    0
.xdata$x:0000DA6A                 db    0
.xdata$x:0000DA6B                 db    0
.xdata$x:0000DA6C                 db    0
.xdata$x:0000DA6D                 db    0
.xdata$x:0000DA6E                 db    0
.xdata$x:0000DA6F                 db    0
.xdata$x:0000DA70                 db    0
.xdata$x:0000DA71                 db    0
.xdata$x:0000DA72                 db    0
.xdata$x:0000DA73                 db    0
.xdata$x:0000DA74 __ehfuncinfo$?reload@FunctionListPanel@@QAEXXZ db  22h ; "
.xdata$x:0000DA74                                         ; DATA XREF: __ehhandler$?reload@FunctionListPanel@@QAEXXZ+1Eo
.xdata$x:0000DA75                 db    5
.xdata$x:0000DA76                 db  93h ; ô
.xdata$x:0000DA77                 db  19h
.xdata$x:0000DA78                 db    6
.xdata$x:0000DA79                 db    0
.xdata$x:0000DA7A                 db    0
.xdata$x:0000DA7B                 db    0
.xdata$x:0000DA7C                 dd offset __unwindtable$?reload@FunctionListPanel@@QAEXXZ
.xdata$x:0000DA80                 db    0
.xdata$x:0000DA81                 db    0
.xdata$x:0000DA82                 db    0
.xdata$x:0000DA83                 db    0
.xdata$x:0000DA84                 db    0
.xdata$x:0000DA85                 db    0
.xdata$x:0000DA86                 db    0
.xdata$x:0000DA87                 db    0
.xdata$x:0000DA88                 db    0
.xdata$x:0000DA89                 db    0
.xdata$x:0000DA8A                 db    0
.xdata$x:0000DA8B                 db    0
.xdata$x:0000DA8C                 db    0
.xdata$x:0000DA8D                 db    0
.xdata$x:0000DA8E                 db    0
.xdata$x:0000DA8F                 db    0
.xdata$x:0000DA90                 db    0
.xdata$x:0000DA91                 db    0
.xdata$x:0000DA92                 db    0
.xdata$x:0000DA93                 db    0
.xdata$x:0000DA94                 db    0
.xdata$x:0000DA95                 db    0
.xdata$x:0000DA96                 db    0
.xdata$x:0000DA97                 db    0
.xdata$x:0000DA98 __ehfuncinfo$?sortOrUnsort@FunctionListPanel@@QAEXXZ db  22h ; "
.xdata$x:0000DA98                                         ; DATA XREF: __ehhandler$?sortOrUnsort@FunctionListPanel@@QAEXXZ+1Eo
.xdata$x:0000DA99                 db    5
.xdata$x:0000DA9A                 db  93h ; ô
.xdata$x:0000DA9B                 db  19h
.xdata$x:0000DA9C                 db    1
.xdata$x:0000DA9D                 db    0
.xdata$x:0000DA9E                 db    0
.xdata$x:0000DA9F                 db    0
.xdata$x:0000DAA0                 dd offset __unwindtable$?sortOrUnsort@FunctionListPanel@@QAEXXZ
.xdata$x:0000DAA4                 db    0
.xdata$x:0000DAA5                 db    0
.xdata$x:0000DAA6                 db    0
.xdata$x:0000DAA7                 db    0
.xdata$x:0000DAA8                 db    0
.xdata$x:0000DAA9                 db    0
.xdata$x:0000DAAA                 db    0
.xdata$x:0000DAAB                 db    0
.xdata$x:0000DAAC                 db    0
.xdata$x:0000DAAD                 db    0
.xdata$x:0000DAAE                 db    0
.xdata$x:0000DAAF                 db    0
.xdata$x:0000DAB0                 db    0
.xdata$x:0000DAB1                 db    0
.xdata$x:0000DAB2                 db    0
.xdata$x:0000DAB3                 db    0
.xdata$x:0000DAB4                 db    0
.xdata$x:0000DAB5                 db    0
.xdata$x:0000DAB6                 db    0
.xdata$x:0000DAB7                 db    0
.xdata$x:0000DAB8                 db    0
.xdata$x:0000DAB9                 db    0
.xdata$x:0000DABA                 db    0
.xdata$x:0000DABB                 db    0
.xdata$x:0000DABC __ehfuncinfo$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z db  22h ; "
.xdata$x:0000DABC                                         ; DATA XREF: __ehhandler$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z+1Eo
.xdata$x:0000DABD                 db    5
.xdata$x:0000DABE                 db  93h ; ô
.xdata$x:0000DABF                 db  19h
.xdata$x:0000DAC0                 db    9
.xdata$x:0000DAC1                 db    0
.xdata$x:0000DAC2                 db    0
.xdata$x:0000DAC3                 db    0
.xdata$x:0000DAC4                 dd offset __unwindtable$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z
.xdata$x:0000DAC8                 align 20h
.xdata$x:0000DAE0 __unwindtable$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z db 0FFh
.xdata$x:0000DAE0                                         ; DATA XREF: .xdata$x:0000DA10o
.xdata$x:0000DAE1                 db 0FFh
.xdata$x:0000DAE2                 db 0FFh
.xdata$x:0000DAE3                 db 0FFh
.xdata$x:0000DAE4                 dd offset __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$1
.xdata$x:0000DAE8                 db    0
.xdata$x:0000DAE9                 db    0
.xdata$x:0000DAEA                 db    0
.xdata$x:0000DAEB                 db    0
.xdata$x:0000DAEC                 dd offset __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$0
.xdata$x:0000DAF0                 db    1
.xdata$x:0000DAF1                 db    0
.xdata$x:0000DAF2                 db    0
.xdata$x:0000DAF3                 db    0
.xdata$x:0000DAF4                 dd offset __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$2
.xdata$x:0000DAF8                 db    2
.xdata$x:0000DAF9                 db    0
.xdata$x:0000DAFA                 db    0
.xdata$x:0000DAFB                 db    0
.xdata$x:0000DAFC                 dd offset __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$3
.xdata$x:0000DB00                 db    1
.xdata$x:0000DB01                 db    0
.xdata$x:0000DB02                 db    0
.xdata$x:0000DB03                 db    0
.xdata$x:0000DB04                 dd offset __unwindfunclet$?parseSubLevel@FunctionListPanel@@AAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAH@Z$5
.xdata$x:0000DB08 __unwindtable$?reload@FunctionListPanel@@QAEXXZ db 0FFh
.xdata$x:0000DB08                                         ; DATA XREF: .xdata$x:0000DA7Co
.xdata$x:0000DB09                 db 0FFh
.xdata$x:0000DB0A                 db 0FFh
.xdata$x:0000DB0B                 db 0FFh
.xdata$x:0000DB0C                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$0
.xdata$x:0000DB10                 db    0
.xdata$x:0000DB11                 db    0
.xdata$x:0000DB12                 db    0
.xdata$x:0000DB13                 db    0
.xdata$x:0000DB14                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$1
.xdata$x:0000DB18                 db    0
.xdata$x:0000DB19                 db    0
.xdata$x:0000DB1A                 db    0
.xdata$x:0000DB1B                 db    0
.xdata$x:0000DB1C                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$2
.xdata$x:0000DB20                 db    2
.xdata$x:0000DB21                 db    0
.xdata$x:0000DB22                 db    0
.xdata$x:0000DB23                 db    0
.xdata$x:0000DB24                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$3
.xdata$x:0000DB28                 db    2
.xdata$x:0000DB29                 db    0
.xdata$x:0000DB2A                 db    0
.xdata$x:0000DB2B                 db    0
.xdata$x:0000DB2C                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$4
.xdata$x:0000DB30                 db    2
.xdata$x:0000DB31                 db    0
.xdata$x:0000DB32                 db    0
.xdata$x:0000DB33                 db    0
.xdata$x:0000DB34                 dd offset __unwindfunclet$?reload@FunctionListPanel@@QAEXXZ$5
.xdata$x:0000DB38 __unwindtable$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z db 0FFh
.xdata$x:0000DB38                                         ; DATA XREF: .xdata$x:0000DAC4o
.xdata$x:0000DB39                 db 0FFh
.xdata$x:0000DB3A                 db 0FFh
.xdata$x:0000DB3B                 db 0FFh
.xdata$x:0000DB3C                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$0
.xdata$x:0000DB40                 db    0
.xdata$x:0000DB41                 db    0
.xdata$x:0000DB42                 db    0
.xdata$x:0000DB43                 db    0
.xdata$x:0000DB44                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$1
.xdata$x:0000DB48                 db    0
.xdata$x:0000DB49                 db    0
.xdata$x:0000DB4A                 db    0
.xdata$x:0000DB4B                 db    0
.xdata$x:0000DB4C                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$3
.xdata$x:0000DB50                 db    2
.xdata$x:0000DB51                 db    0
.xdata$x:0000DB52                 db    0
.xdata$x:0000DB53                 db    0
.xdata$x:0000DB54                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$4
.xdata$x:0000DB58                 db    2
.xdata$x:0000DB59                 db    0
.xdata$x:0000DB5A                 db    0
.xdata$x:0000DB5B                 db    0
.xdata$x:0000DB5C                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$6
.xdata$x:0000DB60                 db    0
.xdata$x:0000DB61                 db    0
.xdata$x:0000DB62                 db    0
.xdata$x:0000DB63                 db    0
.xdata$x:0000DB64                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$7
.xdata$x:0000DB68                 db 0FFh
.xdata$x:0000DB69                 db 0FFh
.xdata$x:0000DB6A                 db 0FFh
.xdata$x:0000DB6B                 db 0FFh
.xdata$x:0000DB6C                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$8
.xdata$x:0000DB70                 db    6
.xdata$x:0000DB71                 db    0
.xdata$x:0000DB72                 db    0
.xdata$x:0000DB73                 db    0
.xdata$x:0000DB74                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$9
.xdata$x:0000DB78                 db    6
.xdata$x:0000DB79                 db    0
.xdata$x:0000DB7A                 db    0
.xdata$x:0000DB7B                 db    0
.xdata$x:0000DB7C                 dd offset __unwindfunclet$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z$11
.xdata$x:0000DB7C _xdata$x        ends
.xdata$x:0000DB7C
.xdata$x:0000DB80 ; ===========================================================================
.xdata$x:0000DB80
.xdata$x:0000DB80 ; Segment type: Pure data
.xdata$x:0000DB80 ; Segment permissions: Read
.xdata$x:0000DB80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DB80                 assume cs:_xdata$x
.xdata$x:0000DB80                 ;org 0DB80h
.xdata$x:0000DB80 ; COMDAT (pick associative to section at AC64)
.xdata$x:0000DB80 __unwindtable$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z db 0FFh
.xdata$x:0000DB80                                         ; DATA XREF: .xdata$x:0000DB90o
.xdata$x:0000DB81                 db 0FFh
.xdata$x:0000DB82                 db 0FFh
.xdata$x:0000DB83                 db 0FFh
.xdata$x:0000DB84                 dd offset __unwindfunclet$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z$0
.xdata$x:0000DB88 __ehfuncinfo$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z db  22h ; "
.xdata$x:0000DB88                                         ; DATA XREF: __ehhandler$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z+11o
.xdata$x:0000DB89                 db    5
.xdata$x:0000DB8A                 db  93h ; ô
.xdata$x:0000DB8B                 db  19h
.xdata$x:0000DB8C                 db    1
.xdata$x:0000DB8D                 db    0
.xdata$x:0000DB8E                 db    0
.xdata$x:0000DB8F                 db    0
.xdata$x:0000DB90                 dd offset __unwindtable$?construct@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@ABU3@@Z
.xdata$x:0000DB94                 db    0
.xdata$x:0000DB95                 db    0
.xdata$x:0000DB96                 db    0
.xdata$x:0000DB97                 db    0
.xdata$x:0000DB98                 db    0
.xdata$x:0000DB99                 db    0
.xdata$x:0000DB9A                 db    0
.xdata$x:0000DB9B                 db    0
.xdata$x:0000DB9C                 db    0
.xdata$x:0000DB9D                 db    0
.xdata$x:0000DB9E                 db    0
.xdata$x:0000DB9F                 db    0
.xdata$x:0000DBA0                 db    0
.xdata$x:0000DBA1                 db    0
.xdata$x:0000DBA2                 db    0
.xdata$x:0000DBA3                 db    0
.xdata$x:0000DBA4                 db    0
.xdata$x:0000DBA5                 db    0
.xdata$x:0000DBA6                 db    0
.xdata$x:0000DBA7                 db    0
.xdata$x:0000DBA8                 db    0
.xdata$x:0000DBA9                 db    0
.xdata$x:0000DBAA                 db    0
.xdata$x:0000DBAB                 db    0
.xdata$x:0000DBAB _xdata$x        ends
.xdata$x:0000DBAB
.xdata$x:0000DBAC ; ===========================================================================
.xdata$x:0000DBAC
.xdata$x:0000DBAC ; Segment type: Pure data
.xdata$x:0000DBAC ; Segment permissions: Read
.xdata$x:0000DBAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DBAC                 assume cs:_xdata$x
.xdata$x:0000DBAC                 ;org 0DBACh
.xdata$x:0000DBAC ; COMDAT (pick associative to section at 9BFC)
.xdata$x:0000DBAC __catchsym$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:0000DBAC                                         ; DATA XREF: .xdata$x:0000DBDCo
.xdata$x:0000DBAD                 db    0
.xdata$x:0000DBAE                 db    0
.xdata$x:0000DBAF                 db    0
.xdata$x:0000DBB0                 db    0
.xdata$x:0000DBB1                 db    0
.xdata$x:0000DBB2                 db    0
.xdata$x:0000DBB3                 db    0
.xdata$x:0000DBB4                 db    0
.xdata$x:0000DBB5                 db    0
.xdata$x:0000DBB6                 db    0
.xdata$x:0000DBB7                 db    0
.xdata$x:0000DBB8                 dd offset __catch$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$0
.xdata$x:0000DBBC __unwindtable$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:0000DBBC                                         ; DATA XREF: .xdata$x:0000DBE8o
.xdata$x:0000DBBD                 db 0FFh
.xdata$x:0000DBBE                 db 0FFh
.xdata$x:0000DBBF                 db 0FFh
.xdata$x:0000DBC0                 db    0
.xdata$x:0000DBC1                 db    0
.xdata$x:0000DBC2                 db    0
.xdata$x:0000DBC3                 db    0
.xdata$x:0000DBC4                 db 0FFh
.xdata$x:0000DBC5                 db 0FFh
.xdata$x:0000DBC6                 db 0FFh
.xdata$x:0000DBC7                 db 0FFh
.xdata$x:0000DBC8                 db    0
.xdata$x:0000DBC9                 db    0
.xdata$x:0000DBCA                 db    0
.xdata$x:0000DBCB                 db    0
.xdata$x:0000DBCC __tryblocktable$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z db    0
.xdata$x:0000DBCC                                         ; DATA XREF: .xdata$x:0000DBF0o
.xdata$x:0000DBCD                 db    0
.xdata$x:0000DBCE                 db    0
.xdata$x:0000DBCF                 db    0
.xdata$x:0000DBD0                 db    0
.xdata$x:0000DBD1                 db    0
.xdata$x:0000DBD2                 db    0
.xdata$x:0000DBD3                 db    0
.xdata$x:0000DBD4                 db    1
.xdata$x:0000DBD5                 db    0
.xdata$x:0000DBD6                 db    0
.xdata$x:0000DBD7                 db    0
.xdata$x:0000DBD8                 db    1
.xdata$x:0000DBD9                 db    0
.xdata$x:0000DBDA                 db    0
.xdata$x:0000DBDB                 db    0
.xdata$x:0000DBDC                 dd offset __catchsym$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z$2
.xdata$x:0000DBE0 __ehfuncinfo$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:0000DBE0                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z+11o
.xdata$x:0000DBE1                 db    5
.xdata$x:0000DBE2                 db  93h ; ô
.xdata$x:0000DBE3                 db  19h
.xdata$x:0000DBE4                 db    2
.xdata$x:0000DBE5                 db    0
.xdata$x:0000DBE6                 db    0
.xdata$x:0000DBE7                 db    0
.xdata$x:0000DBE8                 dd offset __unwindtable$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.xdata$x:0000DBEC                 db    1
.xdata$x:0000DBED                 db    0
.xdata$x:0000DBEE                 db    0
.xdata$x:0000DBEF                 db    0
.xdata$x:0000DBF0                 dd offset __tryblocktable$?_Reallocate@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IAEXI@Z
.xdata$x:0000DBF4                 db    0
.xdata$x:0000DBF5                 db    0
.xdata$x:0000DBF6                 db    0
.xdata$x:0000DBF7                 db    0
.xdata$x:0000DBF8                 db    0
.xdata$x:0000DBF9                 db    0
.xdata$x:0000DBFA                 db    0
.xdata$x:0000DBFB                 db    0
.xdata$x:0000DBFC                 db    0
.xdata$x:0000DBFD                 db    0
.xdata$x:0000DBFE                 db    0
.xdata$x:0000DBFF                 db    0
.xdata$x:0000DC00                 db    0
.xdata$x:0000DC01                 db    0
.xdata$x:0000DC02                 db    0
.xdata$x:0000DC03                 db    0
.xdata$x:0000DC03 _xdata$x        ends
.xdata$x:0000DC03
.xdata$x:0000DC04 ; ===========================================================================
.xdata$x:0000DC04
.xdata$x:0000DC04 ; Segment type: Pure data
.xdata$x:0000DC04 ; Segment permissions: Read
.xdata$x:0000DC04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC04                 assume cs:_xdata$x
.xdata$x:0000DC04                 ;org 0DC04h
.xdata$x:0000DC04 ; COMDAT (pick associative to section at 9998)
.xdata$x:0000DC04 __unwindtable$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z db 0FFh
.xdata$x:0000DC04                                         ; DATA XREF: .xdata$x:0000DC14o
.xdata$x:0000DC05                 db 0FFh
.xdata$x:0000DC06                 db 0FFh
.xdata$x:0000DC07                 db 0FFh
.xdata$x:0000DC08                 dd offset __unwindfunclet$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z$0
.xdata$x:0000DC0C __ehfuncinfo$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z db  22h ; "
.xdata$x:0000DC0C                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z+11o
.xdata$x:0000DC0D                 db    5
.xdata$x:0000DC0E                 db  93h ; ô
.xdata$x:0000DC0F                 db  19h
.xdata$x:0000DC10                 db    1
.xdata$x:0000DC11                 db    0
.xdata$x:0000DC12                 db    0
.xdata$x:0000DC13                 db    0
.xdata$x:0000DC14                 dd offset __unwindtable$?_Orphan_range@?$vector@UTreeParams@@V?$allocator@UTreeParams@@@std@@@std@@IBEXPAUTreeParams@@0@Z
.xdata$x:0000DC18                 db    0
.xdata$x:0000DC19                 db    0
.xdata$x:0000DC1A                 db    0
.xdata$x:0000DC1B                 db    0
.xdata$x:0000DC1C                 db    0
.xdata$x:0000DC1D                 db    0
.xdata$x:0000DC1E                 db    0
.xdata$x:0000DC1F                 db    0
.xdata$x:0000DC20                 db    0
.xdata$x:0000DC21                 db    0
.xdata$x:0000DC22                 db    0
.xdata$x:0000DC23                 db    0
.xdata$x:0000DC24                 db    0
.xdata$x:0000DC25                 db    0
.xdata$x:0000DC26                 db    0
.xdata$x:0000DC27                 db    0
.xdata$x:0000DC28                 db    0
.xdata$x:0000DC29                 db    0
.xdata$x:0000DC2A                 db    0
.xdata$x:0000DC2B                 db    0
.xdata$x:0000DC2C                 db    0
.xdata$x:0000DC2D                 db    0
.xdata$x:0000DC2E                 db    0
.xdata$x:0000DC2F                 db    0
.xdata$x:0000DC2F _xdata$x        ends
.xdata$x:0000DC2F
.xdata$x:0000DC30 ; ===========================================================================
.xdata$x:0000DC30
.xdata$x:0000DC30 ; Segment type: Pure data
.xdata$x:0000DC30 ; Segment permissions: Read
.xdata$x:0000DC30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC30                 assume cs:_xdata$x
.xdata$x:0000DC30                 ;org 0DC30h
.xdata$x:0000DC30 ; COMDAT (pick associative to section at B760)
.xdata$x:0000DC30 __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:0000DC30                                         ; DATA XREF: .xdata$x:0000DC40o
.xdata$x:0000DC31                 db 0FFh
.xdata$x:0000DC32                 db 0FFh
.xdata$x:0000DC33                 db 0FFh
.xdata$x:0000DC34                 dd offset __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:0000DC38 __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:0000DC38                                         ; DATA XREF: __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:0000DC39                 db    5
.xdata$x:0000DC3A                 db  93h ; ô
.xdata$x:0000DC3B                 db  19h
.xdata$x:0000DC3C                 db    1
.xdata$x:0000DC3D                 db    0
.xdata$x:0000DC3E                 db    0
.xdata$x:0000DC3F                 db    0
.xdata$x:0000DC40                 dd offset __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:0000DC44                 db    0
.xdata$x:0000DC45                 db    0
.xdata$x:0000DC46                 db    0
.xdata$x:0000DC47                 db    0
.xdata$x:0000DC48                 db    0
.xdata$x:0000DC49                 db    0
.xdata$x:0000DC4A                 db    0
.xdata$x:0000DC4B                 db    0
.xdata$x:0000DC4C                 db    0
.xdata$x:0000DC4D                 db    0
.xdata$x:0000DC4E                 db    0
.xdata$x:0000DC4F                 db    0
.xdata$x:0000DC50                 db    0
.xdata$x:0000DC51                 db    0
.xdata$x:0000DC52                 db    0
.xdata$x:0000DC53                 db    0
.xdata$x:0000DC54                 db    0
.xdata$x:0000DC55                 db    0
.xdata$x:0000DC56                 db    0
.xdata$x:0000DC57                 db    0
.xdata$x:0000DC58                 db    0
.xdata$x:0000DC59                 db    0
.xdata$x:0000DC5A                 db    0
.xdata$x:0000DC5B                 db    0
.xdata$x:0000DC5B _xdata$x        ends
.xdata$x:0000DC5B
.xdata$x:0000DC5C ; ===========================================================================
.xdata$x:0000DC5C
.xdata$x:0000DC5C ; Segment type: Pure data
.xdata$x:0000DC5C ; Segment permissions: Read
.xdata$x:0000DC5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC5C                 assume cs:_xdata$x
.xdata$x:0000DC5C                 ;org 0DC5Ch
.xdata$x:0000DC5C ; COMDAT (pick associative to section at B858)
.xdata$x:0000DC5C __unwindtable$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:0000DC5C                                         ; DATA XREF: .xdata$x:0000DC6Co
.xdata$x:0000DC5D                 db 0FFh
.xdata$x:0000DC5E                 db 0FFh
.xdata$x:0000DC5F                 db 0FFh
.xdata$x:0000DC60                 dd offset __unwindfunclet$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:0000DC64 __ehfuncinfo$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:0000DC64                                         ; DATA XREF: __ehhandler$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:0000DC65                 db    5
.xdata$x:0000DC66                 db  93h ; ô
.xdata$x:0000DC67                 db  19h
.xdata$x:0000DC68                 db    1
.xdata$x:0000DC69                 db    0
.xdata$x:0000DC6A                 db    0
.xdata$x:0000DC6B                 db    0
.xdata$x:0000DC6C                 dd offset __unwindtable$?getUserPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:0000DC70                 db    0
.xdata$x:0000DC71                 db    0
.xdata$x:0000DC72                 db    0
.xdata$x:0000DC73                 db    0
.xdata$x:0000DC74                 db    0
.xdata$x:0000DC75                 db    0
.xdata$x:0000DC76                 db    0
.xdata$x:0000DC77                 db    0
.xdata$x:0000DC78                 db    0
.xdata$x:0000DC79                 db    0
.xdata$x:0000DC7A                 db    0
.xdata$x:0000DC7B                 db    0
.xdata$x:0000DC7C                 db    0
.xdata$x:0000DC7D                 db    0
.xdata$x:0000DC7E                 db    0
.xdata$x:0000DC7F                 db    0
.xdata$x:0000DC80                 db    0
.xdata$x:0000DC81                 db    0
.xdata$x:0000DC82                 db    0
.xdata$x:0000DC83                 db    0
.xdata$x:0000DC84                 db    0
.xdata$x:0000DC85                 db    0
.xdata$x:0000DC86                 db    0
.xdata$x:0000DC87                 db    0
.xdata$x:0000DC87 _xdata$x        ends
.xdata$x:0000DC87
.xdata$x:0000DC88 ; ===========================================================================
.xdata$x:0000DC88
.xdata$x:0000DC88 ; Segment type: Pure data
.xdata$x:0000DC88 ; Segment permissions: Read
.xdata$x:0000DC88 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC88                 assume cs:_xdata$x
.xdata$x:0000DC88                 ;org 0DC88h
.xdata$x:0000DC88 ; COMDAT (pick associative to section at 53C4)
.xdata$x:0000DC88 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000DC88                                         ; DATA XREF: .xdata$x:0000DC98o
.xdata$x:0000DC89                 db 0FFh
.xdata$x:0000DC8A                 db 0FFh
.xdata$x:0000DC8B                 db 0FFh
.xdata$x:0000DC8C                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000DC90 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DC90                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000DC91                 db    5
.xdata$x:0000DC92                 db  93h ; ô
.xdata$x:0000DC93                 db  19h
.xdata$x:0000DC94                 db    1
.xdata$x:0000DC95                 db    0
.xdata$x:0000DC96                 db    0
.xdata$x:0000DC97                 db    0
.xdata$x:0000DC98                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000DC9C                 db    0
.xdata$x:0000DC9D                 db    0
.xdata$x:0000DC9E                 db    0
.xdata$x:0000DC9F                 db    0
.xdata$x:0000DCA0                 db    0
.xdata$x:0000DCA1                 db    0
.xdata$x:0000DCA2                 db    0
.xdata$x:0000DCA3                 db    0
.xdata$x:0000DCA4                 db    0
.xdata$x:0000DCA5                 db    0
.xdata$x:0000DCA6                 db    0
.xdata$x:0000DCA7                 db    0
.xdata$x:0000DCA8                 db    0
.xdata$x:0000DCA9                 db    0
.xdata$x:0000DCAA                 db    0
.xdata$x:0000DCAB                 db    0
.xdata$x:0000DCAC                 db    0
.xdata$x:0000DCAD                 db    0
.xdata$x:0000DCAE                 db    0
.xdata$x:0000DCAF                 db    0
.xdata$x:0000DCB0                 db    0
.xdata$x:0000DCB1                 db    0
.xdata$x:0000DCB2                 db    0
.xdata$x:0000DCB3                 db    0
.xdata$x:0000DCB3 _xdata$x        ends
.xdata$x:0000DCB3
.xdata$x:0000DCB4 ; ===========================================================================
.xdata$x:0000DCB4
.xdata$x:0000DCB4 ; Segment type: Pure data
.xdata$x:0000DCB4 ; Segment permissions: Read
.xdata$x:0000DCB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DCB4                 assume cs:_xdata$x
.xdata$x:0000DCB4                 ;org 0DCB4h
.xdata$x:0000DCB4 ; COMDAT (pick associative to section at 6E0C)
.xdata$x:0000DCB4 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000DCB4                                         ; DATA XREF: .xdata$x:0000DCC4o
.xdata$x:0000DCB5                 db 0FFh
.xdata$x:0000DCB6                 db 0FFh
.xdata$x:0000DCB7                 db 0FFh
.xdata$x:0000DCB8                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000DCBC __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DCBC                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000DCBD                 db    5
.xdata$x:0000DCBE                 db  93h ; ô
.xdata$x:0000DCBF                 db  19h
.xdata$x:0000DCC0                 db    1
.xdata$x:0000DCC1                 db    0
.xdata$x:0000DCC2                 db    0
.xdata$x:0000DCC3                 db    0
.xdata$x:0000DCC4                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000DCC8                 align 20h
.xdata$x:0000DCC8 _xdata$x        ends
.xdata$x:0000DCC8
.xdata$x:0000DCE0 ; ===========================================================================
.xdata$x:0000DCE0
.xdata$x:0000DCE0 ; Segment type: Pure data
.xdata$x:0000DCE0 ; Segment permissions: Read
.xdata$x:0000DCE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DCE0                 assume cs:_xdata$x
.xdata$x:0000DCE0                 ;org 0DCE0h
.xdata$x:0000DCE0 ; COMDAT (pick associative to section at 534C)
.xdata$x:0000DCE0 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000DCE0                                         ; DATA XREF: .xdata$x:0000DCF0o
.xdata$x:0000DCE1                 db 0FFh
.xdata$x:0000DCE2                 db 0FFh
.xdata$x:0000DCE3                 db 0FFh
.xdata$x:0000DCE4                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000DCE8 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000DCE8                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000DCE9                 db    5
.xdata$x:0000DCEA                 db  93h ; ô
.xdata$x:0000DCEB                 db  19h
.xdata$x:0000DCEC                 db    1
.xdata$x:0000DCED                 db    0
.xdata$x:0000DCEE                 db    0
.xdata$x:0000DCEF                 db    0
.xdata$x:0000DCF0                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000DCF4                 db    0
.xdata$x:0000DCF5                 db    0
.xdata$x:0000DCF6                 db    0
.xdata$x:0000DCF7                 db    0
.xdata$x:0000DCF8                 db    0
.xdata$x:0000DCF9                 db    0
.xdata$x:0000DCFA                 db    0
.xdata$x:0000DCFB                 db    0
.xdata$x:0000DCFC                 db    0
.xdata$x:0000DCFD                 db    0
.xdata$x:0000DCFE                 db    0
.xdata$x:0000DCFF                 db    0
.xdata$x:0000DD00                 db    0
.xdata$x:0000DD01                 db    0
.xdata$x:0000DD02                 db    0
.xdata$x:0000DD03                 db    0
.xdata$x:0000DD04                 db    0
.xdata$x:0000DD05                 db    0
.xdata$x:0000DD06                 db    0
.xdata$x:0000DD07                 db    0
.xdata$x:0000DD08                 db    0
.xdata$x:0000DD09                 db    0
.xdata$x:0000DD0A                 db    0
.xdata$x:0000DD0B                 db    0
.xdata$x:0000DD0B _xdata$x        ends
.xdata$x:0000DD0B
.xdata$x:0000DD0C ; ===========================================================================
.xdata$x:0000DD0C
.xdata$x:0000DD0C ; Segment type: Pure data
.xdata$x:0000DD0C ; Segment permissions: Read
.xdata$x:0000DD0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD0C                 assume cs:_xdata$x
.xdata$x:0000DD0C                 ;org 0DD0Ch
.xdata$x:0000DD0C ; COMDAT (pick associative to section at 5C38)
.xdata$x:0000DD0C __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000DD0C                                         ; DATA XREF: .xdata$x:0000DD1Co
.xdata$x:0000DD0D                 db 0FFh
.xdata$x:0000DD0E                 db 0FFh
.xdata$x:0000DD0F                 db 0FFh
.xdata$x:0000DD10                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:0000DD14 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000DD14                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:0000DD15                 db    5
.xdata$x:0000DD16                 db  93h ; ô
.xdata$x:0000DD17                 db  19h
.xdata$x:0000DD18                 db    1
.xdata$x:0000DD19                 db    0
.xdata$x:0000DD1A                 db    0
.xdata$x:0000DD1B                 db    0
.xdata$x:0000DD1C                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:0000DD20                 db    0
.xdata$x:0000DD21                 db    0
.xdata$x:0000DD22                 db    0
.xdata$x:0000DD23                 db    0
.xdata$x:0000DD24                 db    0
.xdata$x:0000DD25                 db    0
.xdata$x:0000DD26                 db    0
.xdata$x:0000DD27                 db    0
.xdata$x:0000DD28                 db    0
.xdata$x:0000DD29                 db    0
.xdata$x:0000DD2A                 db    0
.xdata$x:0000DD2B                 db    0
.xdata$x:0000DD2C                 db    0
.xdata$x:0000DD2D                 db    0
.xdata$x:0000DD2E                 db    0
.xdata$x:0000DD2F                 db    0
.xdata$x:0000DD30                 db    0
.xdata$x:0000DD31                 db    0
.xdata$x:0000DD32                 db    0
.xdata$x:0000DD33                 db    0
.xdata$x:0000DD34                 db    0
.xdata$x:0000DD35                 db    0
.xdata$x:0000DD36                 db    0
.xdata$x:0000DD37                 db    0
.xdata$x:0000DD37 _xdata$x        ends
.xdata$x:0000DD37
.xdata$x:0000DD38 ; ===========================================================================
.xdata$x:0000DD38
.xdata$x:0000DD38 ; Segment type: Pure data
.xdata$x:0000DD38 ; Segment permissions: Read
.xdata$x:0000DD38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD38                 assume cs:_xdata$x
.xdata$x:0000DD38                 ;org 0DD38h
.xdata$x:0000DD38 ; COMDAT (pick associative to section at 7374)
.xdata$x:0000DD38 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DD38                                         ; DATA XREF: .xdata$x:0000DD48o
.xdata$x:0000DD39                 db 0FFh
.xdata$x:0000DD3A                 db 0FFh
.xdata$x:0000DD3B                 db 0FFh
.xdata$x:0000DD3C                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DD40 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DD40                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DD41                 db    5
.xdata$x:0000DD42                 db  93h ; ô
.xdata$x:0000DD43                 db  19h
.xdata$x:0000DD44                 db    1
.xdata$x:0000DD45                 db    0
.xdata$x:0000DD46                 db    0
.xdata$x:0000DD47                 db    0
.xdata$x:0000DD48                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000DD4C                 db    0
.xdata$x:0000DD4D                 db    0
.xdata$x:0000DD4E                 db    0
.xdata$x:0000DD4F                 db    0
.xdata$x:0000DD50                 db    0
.xdata$x:0000DD51                 db    0
.xdata$x:0000DD52                 db    0
.xdata$x:0000DD53                 db    0
.xdata$x:0000DD54                 db    0
.xdata$x:0000DD55                 db    0
.xdata$x:0000DD56                 db    0
.xdata$x:0000DD57                 db    0
.xdata$x:0000DD58                 db    0
.xdata$x:0000DD59                 db    0
.xdata$x:0000DD5A                 db    0
.xdata$x:0000DD5B                 db    0
.xdata$x:0000DD5C                 db    0
.xdata$x:0000DD5D                 db    0
.xdata$x:0000DD5E                 db    0
.xdata$x:0000DD5F                 db    0
.xdata$x:0000DD60                 db    0
.xdata$x:0000DD61                 db    0
.xdata$x:0000DD62                 db    0
.xdata$x:0000DD63                 db    0
.xdata$x:0000DD63 _xdata$x        ends
.xdata$x:0000DD63
.xdata$x:0000DD64 ; ===========================================================================
.xdata$x:0000DD64
.xdata$x:0000DD64 ; Segment type: Pure data
.xdata$x:0000DD64 ; Segment permissions: Read
.xdata$x:0000DD64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD64                 assume cs:_xdata$x
.xdata$x:0000DD64                 ;org 0DD64h
.xdata$x:0000DD64 ; COMDAT (pick associative to section at 5BB4)
.xdata$x:0000DD64 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000DD64                                         ; DATA XREF: .xdata$x:0000DD74o
.xdata$x:0000DD65                 db 0FFh
.xdata$x:0000DD66                 db 0FFh
.xdata$x:0000DD67                 db 0FFh
.xdata$x:0000DD68                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000DD6C __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000DD6C                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000DD6D                 db    5
.xdata$x:0000DD6E                 db  93h ; ô
.xdata$x:0000DD6F                 db  19h
.xdata$x:0000DD70                 db    1
.xdata$x:0000DD71                 db    0
.xdata$x:0000DD72                 db    0
.xdata$x:0000DD73                 db    0
.xdata$x:0000DD74                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000DD78                 db    0
.xdata$x:0000DD79                 db    0
.xdata$x:0000DD7A                 db    0
.xdata$x:0000DD7B                 db    0
.xdata$x:0000DD7C                 db    0
.xdata$x:0000DD7D                 db    0
.xdata$x:0000DD7E                 db    0
.xdata$x:0000DD7F                 db    0
.xdata$x:0000DD80                 db    0
.xdata$x:0000DD81                 db    0
.xdata$x:0000DD82                 db    0
.xdata$x:0000DD83                 db    0
.xdata$x:0000DD84                 db    0
.xdata$x:0000DD85                 db    0
.xdata$x:0000DD86                 db    0
.xdata$x:0000DD87                 db    0
.xdata$x:0000DD88                 db    0
.xdata$x:0000DD89                 db    0
.xdata$x:0000DD8A                 db    0
.xdata$x:0000DD8B                 db    0
.xdata$x:0000DD8C                 db    0
.xdata$x:0000DD8D                 db    0
.xdata$x:0000DD8E                 db    0
.xdata$x:0000DD8F                 db    0
.xdata$x:0000DD8F _xdata$x        ends
.xdata$x:0000DD8F
.xdata$x:0000DD90 ; ===========================================================================
.xdata$x:0000DD90
.xdata$x:0000DD90 ; Segment type: Pure data
.xdata$x:0000DD90 ; Segment permissions: Read
.xdata$x:0000DD90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD90                 assume cs:_xdata$x
.xdata$x:0000DD90                 ;org 0DD90h
.xdata$x:0000DD90 ; COMDAT (pick associative to section at 5CC4)
.xdata$x:0000DD90 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000DD90                                         ; DATA XREF: .xdata$x:0000DDA0o
.xdata$x:0000DD91                 db 0FFh
.xdata$x:0000DD92                 db 0FFh
.xdata$x:0000DD93                 db 0FFh
.xdata$x:0000DD94                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:0000DD98 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000DD98                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:0000DD99                 db    5
.xdata$x:0000DD9A                 db  93h ; ô
.xdata$x:0000DD9B                 db  19h
.xdata$x:0000DD9C                 db    1
.xdata$x:0000DD9D                 db    0
.xdata$x:0000DD9E                 db    0
.xdata$x:0000DD9F                 db    0
.xdata$x:0000DDA0                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:0000DDA4                 db    0
.xdata$x:0000DDA5                 db    0
.xdata$x:0000DDA6                 db    0
.xdata$x:0000DDA7                 db    0
.xdata$x:0000DDA8                 db    0
.xdata$x:0000DDA9                 db    0
.xdata$x:0000DDAA                 db    0
.xdata$x:0000DDAB                 db    0
.xdata$x:0000DDAC                 db    0
.xdata$x:0000DDAD                 db    0
.xdata$x:0000DDAE                 db    0
.xdata$x:0000DDAF                 db    0
.xdata$x:0000DDB0                 db    0
.xdata$x:0000DDB1                 db    0
.xdata$x:0000DDB2                 db    0
.xdata$x:0000DDB3                 db    0
.xdata$x:0000DDB4                 db    0
.xdata$x:0000DDB5                 db    0
.xdata$x:0000DDB6                 db    0
.xdata$x:0000DDB7                 db    0
.xdata$x:0000DDB8                 db    0
.xdata$x:0000DDB9                 db    0
.xdata$x:0000DDBA                 db    0
.xdata$x:0000DDBB                 db    0
.xdata$x:0000DDBB _xdata$x        ends
.xdata$x:0000DDBB
.xdata$x:0000DDBC ; ===========================================================================
.xdata$x:0000DDBC
.xdata$x:0000DDBC ; Segment type: Pure data
.xdata$x:0000DDBC ; Segment permissions: Read
.xdata$x:0000DDBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DDBC                 assume cs:_xdata$x
.xdata$x:0000DDBC                 ;org 0DDBCh
.xdata$x:0000DDBC ; COMDAT (pick associative to section at 73E4)
.xdata$x:0000DDBC __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DDBC                                         ; DATA XREF: .xdata$x:0000DDCCo
.xdata$x:0000DDBD                 db 0FFh
.xdata$x:0000DDBE                 db 0FFh
.xdata$x:0000DDBF                 db 0FFh
.xdata$x:0000DDC0                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DDC4 __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DDC4                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DDC5                 db    5
.xdata$x:0000DDC6                 db  93h ; ô
.xdata$x:0000DDC7                 db  19h
.xdata$x:0000DDC8                 db    1
.xdata$x:0000DDC9                 db    0
.xdata$x:0000DDCA                 db    0
.xdata$x:0000DDCB                 db    0
.xdata$x:0000DDCC                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000DDD0                 db    0
.xdata$x:0000DDD1                 db    0
.xdata$x:0000DDD2                 db    0
.xdata$x:0000DDD3                 db    0
.xdata$x:0000DDD4                 db    0
.xdata$x:0000DDD5                 db    0
.xdata$x:0000DDD6                 db    0
.xdata$x:0000DDD7                 db    0
.xdata$x:0000DDD8                 db    0
.xdata$x:0000DDD9                 db    0
.xdata$x:0000DDDA                 db    0
.xdata$x:0000DDDB                 db    0
.xdata$x:0000DDDC                 db    0
.xdata$x:0000DDDD                 db    0
.xdata$x:0000DDDE                 db    0
.xdata$x:0000DDDF                 db    0
.xdata$x:0000DDE0                 db    0
.xdata$x:0000DDE1                 db    0
.xdata$x:0000DDE2                 db    0
.xdata$x:0000DDE3                 db    0
.xdata$x:0000DDE4                 db    0
.xdata$x:0000DDE5                 db    0
.xdata$x:0000DDE6                 db    0
.xdata$x:0000DDE7                 db    0
.xdata$x:0000DDE7 _xdata$x        ends
.xdata$x:0000DDE7
.xdata$x:0000DDE8 ; ===========================================================================
.xdata$x:0000DDE8
.xdata$x:0000DDE8 ; Segment type: Pure data
.xdata$x:0000DDE8 ; Segment permissions: Read
.xdata$x:0000DDE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DDE8                 assume cs:_xdata$x
.xdata$x:0000DDE8                 ;org 0DDE8h
.xdata$x:0000DDE8 ; COMDAT (pick associative to section at 5DD0)
.xdata$x:0000DDE8 __unwindtable$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DDE8                                         ; DATA XREF: .xdata$x:0000DDF8o
.xdata$x:0000DDE9                 db 0FFh
.xdata$x:0000DDEA                 db 0FFh
.xdata$x:0000DDEB                 db 0FFh
.xdata$x:0000DDEC                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DDF0 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DDF0                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DDF1                 db    5
.xdata$x:0000DDF2                 db  93h ; ô
.xdata$x:0000DDF3                 db  19h
.xdata$x:0000DDF4                 db    1
.xdata$x:0000DDF5                 db    0
.xdata$x:0000DDF6                 db    0
.xdata$x:0000DDF7                 db    0
.xdata$x:0000DDF8                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.xdata$x:0000DDFC                 db    0
.xdata$x:0000DDFD                 db    0
.xdata$x:0000DDFE                 db    0
.xdata$x:0000DDFF                 db    0
.xdata$x:0000DE00                 db    0
.xdata$x:0000DE01                 db    0
.xdata$x:0000DE02                 db    0
.xdata$x:0000DE03                 db    0
.xdata$x:0000DE04                 db    0
.xdata$x:0000DE05                 db    0
.xdata$x:0000DE06                 db    0
.xdata$x:0000DE07                 db    0
.xdata$x:0000DE08                 db    0
.xdata$x:0000DE09                 db    0
.xdata$x:0000DE0A                 db    0
.xdata$x:0000DE0B                 db    0
.xdata$x:0000DE0C                 db    0
.xdata$x:0000DE0D                 db    0
.xdata$x:0000DE0E                 db    0
.xdata$x:0000DE0F                 db    0
.xdata$x:0000DE10                 db    0
.xdata$x:0000DE11                 db    0
.xdata$x:0000DE12                 db    0
.xdata$x:0000DE13                 db    0
.xdata$x:0000DE13 _xdata$x        ends
.xdata$x:0000DE13
.xdata$x:0000DE14 ; ===========================================================================
.xdata$x:0000DE14
.xdata$x:0000DE14 ; Segment type: Pure data
.xdata$x:0000DE14 ; Segment permissions: Read
.xdata$x:0000DE14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE14                 assume cs:_xdata$x
.xdata$x:0000DE14                 ;org 0DE14h
.xdata$x:0000DE14 ; COMDAT (pick associative to section at 74C4)
.xdata$x:0000DE14 __unwindtable$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DE14                                         ; DATA XREF: .xdata$x:0000DE24o
.xdata$x:0000DE15                 db 0FFh
.xdata$x:0000DE16                 db 0FFh
.xdata$x:0000DE17                 db 0FFh
.xdata$x:0000DE18                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DE1C __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DE1C                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DE1D                 db    5
.xdata$x:0000DE1E                 db  93h ; ô
.xdata$x:0000DE1F                 db  19h
.xdata$x:0000DE20                 db    1
.xdata$x:0000DE21                 db    0
.xdata$x:0000DE22                 db    0
.xdata$x:0000DE23                 db    0
.xdata$x:0000DE24                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@UfoundInfo@@@std@@@std@@QAE@XZ
.xdata$x:0000DE28                 align 20h
.xdata$x:0000DE28 _xdata$x        ends
.xdata$x:0000DE28
.xdata$x:0000DE40 ; ===========================================================================
.xdata$x:0000DE40
.xdata$x:0000DE40 ; Segment type: Pure data
.xdata$x:0000DE40 ; Segment permissions: Read
.xdata$x:0000DE40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE40                 assume cs:_xdata$x
.xdata$x:0000DE40                 ;org 0DE40h
.xdata$x:0000DE40 ; COMDAT (pick associative to section at 59AC)
.xdata$x:0000DE40 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z db 0FFh
.xdata$x:0000DE40                                         ; DATA XREF: .xdata$x:0000DE50o
.xdata$x:0000DE41                 db 0FFh
.xdata$x:0000DE42                 db 0FFh
.xdata$x:0000DE43                 db 0FFh
.xdata$x:0000DE44                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z$0
.xdata$x:0000DE48 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z db  22h ; "
.xdata$x:0000DE48                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z+11o
.xdata$x:0000DE49                 db    5
.xdata$x:0000DE4A                 db  93h ; ô
.xdata$x:0000DE4B                 db  19h
.xdata$x:0000DE4C                 db    1
.xdata$x:0000DE4D                 db    0
.xdata$x:0000DE4E                 db    0
.xdata$x:0000DE4F                 db    0
.xdata$x:0000DE50                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UfoundInfo@@@1@@Z
.xdata$x:0000DE54                 db    0
.xdata$x:0000DE55                 db    0
.xdata$x:0000DE56                 db    0
.xdata$x:0000DE57                 db    0
.xdata$x:0000DE58                 db    0
.xdata$x:0000DE59                 db    0
.xdata$x:0000DE5A                 db    0
.xdata$x:0000DE5B                 db    0
.xdata$x:0000DE5C                 db    0
.xdata$x:0000DE5D                 db    0
.xdata$x:0000DE5E                 db    0
.xdata$x:0000DE5F                 db    0
.xdata$x:0000DE60                 db    0
.xdata$x:0000DE61                 db    0
.xdata$x:0000DE62                 db    0
.xdata$x:0000DE63                 db    0
.xdata$x:0000DE64                 db    0
.xdata$x:0000DE65                 db    0
.xdata$x:0000DE66                 db    0
.xdata$x:0000DE67                 db    0
.xdata$x:0000DE68                 db    0
.xdata$x:0000DE69                 db    0
.xdata$x:0000DE6A                 db    0
.xdata$x:0000DE6B                 db    0
.xdata$x:0000DE6B _xdata$x        ends
.xdata$x:0000DE6B
.xdata$x:0000DE6C ; ===========================================================================
.xdata$x:0000DE6C
.xdata$x:0000DE6C ; Segment type: Pure data
.xdata$x:0000DE6C ; Segment permissions: Read
.xdata$x:0000DE6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE6C                 assume cs:_xdata$x
.xdata$x:0000DE6C                 ;org 0DE6Ch
.xdata$x:0000DE6C ; COMDAT (pick associative to section at 7214)
.xdata$x:0000DE6C __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DE6C                                         ; DATA XREF: .xdata$x:0000DE7Co
.xdata$x:0000DE6D                 db 0FFh
.xdata$x:0000DE6E                 db 0FFh
.xdata$x:0000DE6F                 db 0FFh
.xdata$x:0000DE70                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DE74 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DE74                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DE75                 db    5
.xdata$x:0000DE76                 db  93h ; ô
.xdata$x:0000DE77                 db  19h
.xdata$x:0000DE78                 db    1
.xdata$x:0000DE79                 db    0
.xdata$x:0000DE7A                 db    0
.xdata$x:0000DE7B                 db    0
.xdata$x:0000DE7C                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000DE80                 db    0
.xdata$x:0000DE81                 db    0
.xdata$x:0000DE82                 db    0
.xdata$x:0000DE83                 db    0
.xdata$x:0000DE84                 db    0
.xdata$x:0000DE85                 db    0
.xdata$x:0000DE86                 db    0
.xdata$x:0000DE87                 db    0
.xdata$x:0000DE88                 db    0
.xdata$x:0000DE89                 db    0
.xdata$x:0000DE8A                 db    0
.xdata$x:0000DE8B                 db    0
.xdata$x:0000DE8C                 db    0
.xdata$x:0000DE8D                 db    0
.xdata$x:0000DE8E                 db    0
.xdata$x:0000DE8F                 db    0
.xdata$x:0000DE90                 db    0
.xdata$x:0000DE91                 db    0
.xdata$x:0000DE92                 db    0
.xdata$x:0000DE93                 db    0
.xdata$x:0000DE94                 db    0
.xdata$x:0000DE95                 db    0
.xdata$x:0000DE96                 db    0
.xdata$x:0000DE97                 db    0
.xdata$x:0000DE97 _xdata$x        ends
.xdata$x:0000DE97
.xdata$x:0000DE98 ; ===========================================================================
.xdata$x:0000DE98
.xdata$x:0000DE98 ; Segment type: Pure data
.xdata$x:0000DE98 ; Segment permissions: Read
.xdata$x:0000DE98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE98                 assume cs:_xdata$x
.xdata$x:0000DE98                 ;org 0DE98h
.xdata$x:0000DE98 ; COMDAT (pick associative to section at 64C4)
.xdata$x:0000DE98 __unwindtable$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DE98                                         ; DATA XREF: .xdata$x:0000DEA8o
.xdata$x:0000DE99                 db 0FFh
.xdata$x:0000DE9A                 db 0FFh
.xdata$x:0000DE9B                 db 0FFh
.xdata$x:0000DE9C                 dd offset __unwindfunclet$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DEA0 __ehfuncinfo$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DEA0                                         ; DATA XREF: __ehhandler$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DEA1                 db    5
.xdata$x:0000DEA2                 db  93h ; ô
.xdata$x:0000DEA3                 db  19h
.xdata$x:0000DEA4                 db    1
.xdata$x:0000DEA5                 db    0
.xdata$x:0000DEA6                 db    0
.xdata$x:0000DEA7                 db    0
.xdata$x:0000DEA8                 dd offset __unwindtable$??0?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.xdata$x:0000DEAC                 db    0
.xdata$x:0000DEAD                 db    0
.xdata$x:0000DEAE                 db    0
.xdata$x:0000DEAF                 db    0
.xdata$x:0000DEB0                 db    0
.xdata$x:0000DEB1                 db    0
.xdata$x:0000DEB2                 db    0
.xdata$x:0000DEB3                 db    0
.xdata$x:0000DEB4                 db    0
.xdata$x:0000DEB5                 db    0
.xdata$x:0000DEB6                 db    0
.xdata$x:0000DEB7                 db    0
.xdata$x:0000DEB8                 db    0
.xdata$x:0000DEB9                 db    0
.xdata$x:0000DEBA                 db    0
.xdata$x:0000DEBB                 db    0
.xdata$x:0000DEBC                 db    0
.xdata$x:0000DEBD                 db    0
.xdata$x:0000DEBE                 db    0
.xdata$x:0000DEBF                 db    0
.xdata$x:0000DEC0                 db    0
.xdata$x:0000DEC1                 db    0
.xdata$x:0000DEC2                 db    0
.xdata$x:0000DEC3                 db    0
.xdata$x:0000DEC3 _xdata$x        ends
.xdata$x:0000DEC3
.xdata$x:0000DEC4 ; ===========================================================================
.xdata$x:0000DEC4
.xdata$x:0000DEC4 ; Segment type: Pure data
.xdata$x:0000DEC4 ; Segment permissions: Read
.xdata$x:0000DEC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DEC4                 assume cs:_xdata$x
.xdata$x:0000DEC4                 ;org 0DEC4h
.xdata$x:0000DEC4 ; COMDAT (pick associative to section at 7714)
.xdata$x:0000DEC4 __unwindtable$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DEC4                                         ; DATA XREF: .xdata$x:0000DED4o
.xdata$x:0000DEC5                 db 0FFh
.xdata$x:0000DEC6                 db 0FFh
.xdata$x:0000DEC7                 db 0FFh
.xdata$x:0000DEC8                 dd offset __unwindfunclet$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DECC __ehfuncinfo$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DECC                                         ; DATA XREF: __ehhandler$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DECD                 db    5
.xdata$x:0000DECE                 db  93h ; ô
.xdata$x:0000DECF                 db  19h
.xdata$x:0000DED0                 db    1
.xdata$x:0000DED1                 db    0
.xdata$x:0000DED2                 db    0
.xdata$x:0000DED3                 db    0
.xdata$x:0000DED4                 dd offset __unwindtable$??1?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.xdata$x:0000DED8                 db    0
.xdata$x:0000DED9                 db    0
.xdata$x:0000DEDA                 db    0
.xdata$x:0000DEDB                 db    0
.xdata$x:0000DEDC                 db    0
.xdata$x:0000DEDD                 db    0
.xdata$x:0000DEDE                 db    0
.xdata$x:0000DEDF                 db    0
.xdata$x:0000DEE0                 db    0
.xdata$x:0000DEE1                 db    0
.xdata$x:0000DEE2                 db    0
.xdata$x:0000DEE3                 db    0
.xdata$x:0000DEE4                 db    0
.xdata$x:0000DEE5                 db    0
.xdata$x:0000DEE6                 db    0
.xdata$x:0000DEE7                 db    0
.xdata$x:0000DEE8                 db    0
.xdata$x:0000DEE9                 db    0
.xdata$x:0000DEEA                 db    0
.xdata$x:0000DEEB                 db    0
.xdata$x:0000DEEC                 db    0
.xdata$x:0000DEED                 db    0
.xdata$x:0000DEEE                 db    0
.xdata$x:0000DEEF                 db    0
.xdata$x:0000DEEF _xdata$x        ends
.xdata$x:0000DEEF
.xdata$x:0000DEF0 ; ===========================================================================
.xdata$x:0000DEF0
.xdata$x:0000DEF0 ; Segment type: Pure data
.xdata$x:0000DEF0 ; Segment permissions: Read
.xdata$x:0000DEF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DEF0                 assume cs:_xdata$x
.xdata$x:0000DEF0                 ;org 0DEF0h
.xdata$x:0000DEF0 ; COMDAT (pick associative to section at 54B0)
.xdata$x:0000DEF0 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000DEF0                                         ; DATA XREF: .xdata$x:0000DF00o
.xdata$x:0000DEF1                 db 0FFh
.xdata$x:0000DEF2                 db 0FFh
.xdata$x:0000DEF3                 db 0FFh
.xdata$x:0000DEF4                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000DEF8 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DEF8                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000DEF9                 db    5
.xdata$x:0000DEFA                 db  93h ; ô
.xdata$x:0000DEFB                 db  19h
.xdata$x:0000DEFC                 db    1
.xdata$x:0000DEFD                 db    0
.xdata$x:0000DEFE                 db    0
.xdata$x:0000DEFF                 db    0
.xdata$x:0000DF00                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000DF04                 db    0
.xdata$x:0000DF05                 db    0
.xdata$x:0000DF06                 db    0
.xdata$x:0000DF07                 db    0
.xdata$x:0000DF08                 db    0
.xdata$x:0000DF09                 db    0
.xdata$x:0000DF0A                 db    0
.xdata$x:0000DF0B                 db    0
.xdata$x:0000DF0C                 db    0
.xdata$x:0000DF0D                 db    0
.xdata$x:0000DF0E                 db    0
.xdata$x:0000DF0F                 db    0
.xdata$x:0000DF10                 db    0
.xdata$x:0000DF11                 db    0
.xdata$x:0000DF12                 db    0
.xdata$x:0000DF13                 db    0
.xdata$x:0000DF14                 db    0
.xdata$x:0000DF15                 db    0
.xdata$x:0000DF16                 db    0
.xdata$x:0000DF17                 db    0
.xdata$x:0000DF18                 db    0
.xdata$x:0000DF19                 db    0
.xdata$x:0000DF1A                 db    0
.xdata$x:0000DF1B                 db    0
.xdata$x:0000DF1B _xdata$x        ends
.xdata$x:0000DF1B
.xdata$x:0000DF1C ; ===========================================================================
.xdata$x:0000DF1C
.xdata$x:0000DF1C ; Segment type: Pure data
.xdata$x:0000DF1C ; Segment permissions: Read
.xdata$x:0000DF1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF1C                 assume cs:_xdata$x
.xdata$x:0000DF1C                 ;org 0DF1Ch
.xdata$x:0000DF1C ; COMDAT (pick associative to section at 6E7C)
.xdata$x:0000DF1C __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000DF1C                                         ; DATA XREF: .xdata$x:0000DF2Co
.xdata$x:0000DF1D                 db 0FFh
.xdata$x:0000DF1E                 db 0FFh
.xdata$x:0000DF1F                 db 0FFh
.xdata$x:0000DF20                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000DF24 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DF24                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000DF25                 db    5
.xdata$x:0000DF26                 db  93h ; ô
.xdata$x:0000DF27                 db  19h
.xdata$x:0000DF28                 db    1
.xdata$x:0000DF29                 db    0
.xdata$x:0000DF2A                 db    0
.xdata$x:0000DF2B                 db    0
.xdata$x:0000DF2C                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000DF30                 db    0
.xdata$x:0000DF31                 db    0
.xdata$x:0000DF32                 db    0
.xdata$x:0000DF33                 db    0
.xdata$x:0000DF34                 db    0
.xdata$x:0000DF35                 db    0
.xdata$x:0000DF36                 db    0
.xdata$x:0000DF37                 db    0
.xdata$x:0000DF38                 db    0
.xdata$x:0000DF39                 db    0
.xdata$x:0000DF3A                 db    0
.xdata$x:0000DF3B                 db    0
.xdata$x:0000DF3C                 db    0
.xdata$x:0000DF3D                 db    0
.xdata$x:0000DF3E                 db    0
.xdata$x:0000DF3F                 db    0
.xdata$x:0000DF40                 db    0
.xdata$x:0000DF41                 db    0
.xdata$x:0000DF42                 db    0
.xdata$x:0000DF43                 db    0
.xdata$x:0000DF44                 db    0
.xdata$x:0000DF45                 db    0
.xdata$x:0000DF46                 db    0
.xdata$x:0000DF47                 db    0
.xdata$x:0000DF47 _xdata$x        ends
.xdata$x:0000DF47
.xdata$x:0000DF48 ; ===========================================================================
.xdata$x:0000DF48
.xdata$x:0000DF48 ; Segment type: Pure data
.xdata$x:0000DF48 ; Segment permissions: Read
.xdata$x:0000DF48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF48                 assume cs:_xdata$x
.xdata$x:0000DF48                 ;org 0DF48h
.xdata$x:0000DF48 ; COMDAT (pick associative to section at 5438)
.xdata$x:0000DF48 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000DF48                                         ; DATA XREF: .xdata$x:0000DF58o
.xdata$x:0000DF49                 db 0FFh
.xdata$x:0000DF4A                 db 0FFh
.xdata$x:0000DF4B                 db 0FFh
.xdata$x:0000DF4C                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000DF50 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000DF50                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000DF51                 db    5
.xdata$x:0000DF52                 db  93h ; ô
.xdata$x:0000DF53                 db  19h
.xdata$x:0000DF54                 db    1
.xdata$x:0000DF55                 db    0
.xdata$x:0000DF56                 db    0
.xdata$x:0000DF57                 db    0
.xdata$x:0000DF58                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000DF5C                 db    0
.xdata$x:0000DF5D                 db    0
.xdata$x:0000DF5E                 db    0
.xdata$x:0000DF5F                 db    0
.xdata$x:0000DF60                 db    0
.xdata$x:0000DF61                 db    0
.xdata$x:0000DF62                 db    0
.xdata$x:0000DF63                 db    0
.xdata$x:0000DF64                 db    0
.xdata$x:0000DF65                 db    0
.xdata$x:0000DF66                 db    0
.xdata$x:0000DF67                 db    0
.xdata$x:0000DF68                 db    0
.xdata$x:0000DF69                 db    0
.xdata$x:0000DF6A                 db    0
.xdata$x:0000DF6B                 db    0
.xdata$x:0000DF6C                 db    0
.xdata$x:0000DF6D                 db    0
.xdata$x:0000DF6E                 db    0
.xdata$x:0000DF6F                 db    0
.xdata$x:0000DF70                 db    0
.xdata$x:0000DF71                 db    0
.xdata$x:0000DF72                 db    0
.xdata$x:0000DF73                 db    0
.xdata$x:0000DF73 _xdata$x        ends
.xdata$x:0000DF73
.xdata$x:0000DF74 ; ===========================================================================
.xdata$x:0000DF74
.xdata$x:0000DF74 ; Segment type: Pure data
.xdata$x:0000DF74 ; Segment permissions: Read
.xdata$x:0000DF74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF74                 assume cs:_xdata$x
.xdata$x:0000DF74                 ;org 0DF74h
.xdata$x:0000DF74 ; COMDAT (pick associative to section at 56A0)
.xdata$x:0000DF74 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000DF74                                         ; DATA XREF: .xdata$x:0000DF84o
.xdata$x:0000DF75                 db 0FFh
.xdata$x:0000DF76                 db 0FFh
.xdata$x:0000DF77                 db 0FFh
.xdata$x:0000DF78                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000DF7C __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000DF7C                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000DF7D                 db    5
.xdata$x:0000DF7E                 db  93h ; ô
.xdata$x:0000DF7F                 db  19h
.xdata$x:0000DF80                 db    1
.xdata$x:0000DF81                 db    0
.xdata$x:0000DF82                 db    0
.xdata$x:0000DF83                 db    0
.xdata$x:0000DF84                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:0000DF88                 align 20h
.xdata$x:0000DF88 _xdata$x        ends
.xdata$x:0000DF88
.xdata$x:0000DFA0 ; ===========================================================================
.xdata$x:0000DFA0
.xdata$x:0000DFA0 ; Segment type: Pure data
.xdata$x:0000DFA0 ; Segment permissions: Read
.xdata$x:0000DFA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DFA0                 assume cs:_xdata$x
.xdata$x:0000DFA0                 ;org 0DFA0h
.xdata$x:0000DFA0 ; COMDAT (pick associative to section at 6FDC)
.xdata$x:0000DFA0 __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DFA0                                         ; DATA XREF: .xdata$x:0000DFB0o
.xdata$x:0000DFA1                 db 0FFh
.xdata$x:0000DFA2                 db 0FFh
.xdata$x:0000DFA3                 db 0FFh
.xdata$x:0000DFA4                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000DFA8 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DFA8                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000DFA9                 db    5
.xdata$x:0000DFAA                 db  93h ; ô
.xdata$x:0000DFAB                 db  19h
.xdata$x:0000DFAC                 db    1
.xdata$x:0000DFAD                 db    0
.xdata$x:0000DFAE                 db    0
.xdata$x:0000DFAF                 db    0
.xdata$x:0000DFB0                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000DFB4                 db    0
.xdata$x:0000DFB5                 db    0
.xdata$x:0000DFB6                 db    0
.xdata$x:0000DFB7                 db    0
.xdata$x:0000DFB8                 db    0
.xdata$x:0000DFB9                 db    0
.xdata$x:0000DFBA                 db    0
.xdata$x:0000DFBB                 db    0
.xdata$x:0000DFBC                 db    0
.xdata$x:0000DFBD                 db    0
.xdata$x:0000DFBE                 db    0
.xdata$x:0000DFBF                 db    0
.xdata$x:0000DFC0                 db    0
.xdata$x:0000DFC1                 db    0
.xdata$x:0000DFC2                 db    0
.xdata$x:0000DFC3                 db    0
.xdata$x:0000DFC4                 db    0
.xdata$x:0000DFC5                 db    0
.xdata$x:0000DFC6                 db    0
.xdata$x:0000DFC7                 db    0
.xdata$x:0000DFC8                 db    0
.xdata$x:0000DFC9                 db    0
.xdata$x:0000DFCA                 db    0
.xdata$x:0000DFCB                 db    0
.xdata$x:0000DFCB _xdata$x        ends
.xdata$x:0000DFCB
.xdata$x:0000DFCC ; ===========================================================================
.xdata$x:0000DFCC
.xdata$x:0000DFCC ; Segment type: Pure data
.xdata$x:0000DFCC ; Segment permissions: Read
.xdata$x:0000DFCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DFCC                 assume cs:_xdata$x
.xdata$x:0000DFCC                 ;org 0DFCCh
.xdata$x:0000DFCC ; COMDAT (pick associative to section at 561C)
.xdata$x:0000DFCC __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000DFCC                                         ; DATA XREF: .xdata$x:0000DFDCo
.xdata$x:0000DFCD                 db 0FFh
.xdata$x:0000DFCE                 db 0FFh
.xdata$x:0000DFCF                 db 0FFh
.xdata$x:0000DFD0                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000DFD4 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000DFD4                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000DFD5                 db    5
.xdata$x:0000DFD6                 db  93h ; ô
.xdata$x:0000DFD7                 db  19h
.xdata$x:0000DFD8                 db    1
.xdata$x:0000DFD9                 db    0
.xdata$x:0000DFDA                 db    0
.xdata$x:0000DFDB                 db    0
.xdata$x:0000DFDC                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000DFE0                 db    0
.xdata$x:0000DFE1                 db    0
.xdata$x:0000DFE2                 db    0
.xdata$x:0000DFE3                 db    0
.xdata$x:0000DFE4                 db    0
.xdata$x:0000DFE5                 db    0
.xdata$x:0000DFE6                 db    0
.xdata$x:0000DFE7                 db    0
.xdata$x:0000DFE8                 db    0
.xdata$x:0000DFE9                 db    0
.xdata$x:0000DFEA                 db    0
.xdata$x:0000DFEB                 db    0
.xdata$x:0000DFEC                 db    0
.xdata$x:0000DFED                 db    0
.xdata$x:0000DFEE                 db    0
.xdata$x:0000DFEF                 db    0
.xdata$x:0000DFF0                 db    0
.xdata$x:0000DFF1                 db    0
.xdata$x:0000DFF2                 db    0
.xdata$x:0000DFF3                 db    0
.xdata$x:0000DFF4                 db    0
.xdata$x:0000DFF5                 db    0
.xdata$x:0000DFF6                 db    0
.xdata$x:0000DFF7                 db    0
.xdata$x:0000DFF7 _xdata$x        ends
.xdata$x:0000DFF7
.xdata$x:0000DFF8 ; ===========================================================================
.xdata$x:0000DFF8
.xdata$x:0000DFF8 ; Segment type: Pure data
.xdata$x:0000DFF8 ; Segment permissions: Read
.xdata$x:0000DFF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DFF8                 assume cs:_xdata$x
.xdata$x:0000DFF8                 ;org 0DFF8h
.xdata$x:0000DFF8 ; COMDAT (pick associative to section at 57A4)
.xdata$x:0000DFF8 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000DFF8                                         ; DATA XREF: .xdata$x:0000E008o
.xdata$x:0000DFF9                 db 0FFh
.xdata$x:0000DFFA                 db 0FFh
.xdata$x:0000DFFB                 db 0FFh
.xdata$x:0000DFFC                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:0000E000 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000E000                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000E001                 db    5
.xdata$x:0000E002                 db  93h ; ô
.xdata$x:0000E003                 db  19h
.xdata$x:0000E004                 db    1
.xdata$x:0000E005                 db    0
.xdata$x:0000E006                 db    0
.xdata$x:0000E007                 db    0
.xdata$x:0000E008                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:0000E00C                 db    0
.xdata$x:0000E00D                 db    0
.xdata$x:0000E00E                 db    0
.xdata$x:0000E00F                 db    0
.xdata$x:0000E010                 db    0
.xdata$x:0000E011                 db    0
.xdata$x:0000E012                 db    0
.xdata$x:0000E013                 db    0
.xdata$x:0000E014                 db    0
.xdata$x:0000E015                 db    0
.xdata$x:0000E016                 db    0
.xdata$x:0000E017                 db    0
.xdata$x:0000E018                 db    0
.xdata$x:0000E019                 db    0
.xdata$x:0000E01A                 db    0
.xdata$x:0000E01B                 db    0
.xdata$x:0000E01C                 db    0
.xdata$x:0000E01D                 db    0
.xdata$x:0000E01E                 db    0
.xdata$x:0000E01F                 db    0
.xdata$x:0000E020                 db    0
.xdata$x:0000E021                 db    0
.xdata$x:0000E022                 db    0
.xdata$x:0000E023                 db    0
.xdata$x:0000E023 _xdata$x        ends
.xdata$x:0000E023
.xdata$x:0000E024 ; ===========================================================================
.xdata$x:0000E024
.xdata$x:0000E024 ; Segment type: Pure data
.xdata$x:0000E024 ; Segment permissions: Read
.xdata$x:0000E024 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E024                 assume cs:_xdata$x
.xdata$x:0000E024                 ;org 0E024h
.xdata$x:0000E024 ; COMDAT (pick associative to section at 8568)
.xdata$x:0000E024 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:0000E024                                         ; DATA XREF: .xdata$x:0000E034o
.xdata$x:0000E025                 db 0FFh
.xdata$x:0000E026                 db 0FFh
.xdata$x:0000E027                 db 0FFh
.xdata$x:0000E028                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:0000E02C __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:0000E02C                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:0000E02D                 db    5
.xdata$x:0000E02E                 db  93h ; ô
.xdata$x:0000E02F                 db  19h
.xdata$x:0000E030                 db    1
.xdata$x:0000E031                 db    0
.xdata$x:0000E032                 db    0
.xdata$x:0000E033                 db    0
.xdata$x:0000E034                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:0000E038                 db    0
.xdata$x:0000E039                 db    0
.xdata$x:0000E03A                 db    0
.xdata$x:0000E03B                 db    0
.xdata$x:0000E03C                 db    0
.xdata$x:0000E03D                 db    0
.xdata$x:0000E03E                 db    0
.xdata$x:0000E03F                 db    0
.xdata$x:0000E040                 db    0
.xdata$x:0000E041                 db    0
.xdata$x:0000E042                 db    0
.xdata$x:0000E043                 db    0
.xdata$x:0000E044                 db    0
.xdata$x:0000E045                 db    0
.xdata$x:0000E046                 db    0
.xdata$x:0000E047                 db    0
.xdata$x:0000E048                 db    0
.xdata$x:0000E049                 db    0
.xdata$x:0000E04A                 db    0
.xdata$x:0000E04B                 db    0
.xdata$x:0000E04C                 db    0
.xdata$x:0000E04D                 db    0
.xdata$x:0000E04E                 db    0
.xdata$x:0000E04F                 db    0
.xdata$x:0000E04F _xdata$x        ends
.xdata$x:0000E04F
.xdata$x:0000E050 ; ===========================================================================
.xdata$x:0000E050
.xdata$x:0000E050 ; Segment type: Pure data
.xdata$x:0000E050 ; Segment permissions: Read
.xdata$x:0000E050 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E050                 assume cs:_xdata$x
.xdata$x:0000E050                 ;org 0E050h
.xdata$x:0000E050 ; COMDAT (pick associative to section at 704C)
.xdata$x:0000E050 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000E050                                         ; DATA XREF: .xdata$x:0000E060o
.xdata$x:0000E051                 db 0FFh
.xdata$x:0000E052                 db 0FFh
.xdata$x:0000E053                 db 0FFh
.xdata$x:0000E054                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000E058 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000E058                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000E059                 db    5
.xdata$x:0000E05A                 db  93h ; ô
.xdata$x:0000E05B                 db  19h
.xdata$x:0000E05C                 db    1
.xdata$x:0000E05D                 db    0
.xdata$x:0000E05E                 db    0
.xdata$x:0000E05F                 db    0
.xdata$x:0000E060                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000E064                 db    0
.xdata$x:0000E065                 db    0
.xdata$x:0000E066                 db    0
.xdata$x:0000E067                 db    0
.xdata$x:0000E068                 db    0
.xdata$x:0000E069                 db    0
.xdata$x:0000E06A                 db    0
.xdata$x:0000E06B                 db    0
.xdata$x:0000E06C                 db    0
.xdata$x:0000E06D                 db    0
.xdata$x:0000E06E                 db    0
.xdata$x:0000E06F                 db    0
.xdata$x:0000E070                 db    0
.xdata$x:0000E071                 db    0
.xdata$x:0000E072                 db    0
.xdata$x:0000E073                 db    0
.xdata$x:0000E074                 db    0
.xdata$x:0000E075                 db    0
.xdata$x:0000E076                 db    0
.xdata$x:0000E077                 db    0
.xdata$x:0000E078                 db    0
.xdata$x:0000E079                 db    0
.xdata$x:0000E07A                 db    0
.xdata$x:0000E07B                 db    0
.xdata$x:0000E07B _xdata$x        ends
.xdata$x:0000E07B
.xdata$x:0000E07C ; ===========================================================================
.xdata$x:0000E07C
.xdata$x:0000E07C ; Segment type: Pure data
.xdata$x:0000E07C ; Segment permissions: Read
.xdata$x:0000E07C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E07C                 assume cs:_xdata$x
.xdata$x:0000E07C                 ;org 0E07Ch
.xdata$x:0000E07C ; COMDAT (pick associative to section at 572C)
.xdata$x:0000E07C __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000E07C                                         ; DATA XREF: .xdata$x:0000E08Co
.xdata$x:0000E07D                 db 0FFh
.xdata$x:0000E07E                 db 0FFh
.xdata$x:0000E07F                 db 0FFh
.xdata$x:0000E080                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000E084 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000E084                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000E085                 db    5
.xdata$x:0000E086                 db  93h ; ô
.xdata$x:0000E087                 db  19h
.xdata$x:0000E088                 db    1
.xdata$x:0000E089                 db    0
.xdata$x:0000E08A                 db    0
.xdata$x:0000E08B                 db    0
.xdata$x:0000E08C                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000E090                 db    0
.xdata$x:0000E091                 db    0
.xdata$x:0000E092                 db    0
.xdata$x:0000E093                 db    0
.xdata$x:0000E094                 db    0
.xdata$x:0000E095                 db    0
.xdata$x:0000E096                 db    0
.xdata$x:0000E097                 db    0
.xdata$x:0000E098                 db    0
.xdata$x:0000E099                 db    0
.xdata$x:0000E09A                 db    0
.xdata$x:0000E09B                 db    0
.xdata$x:0000E09C                 db    0
.xdata$x:0000E09D                 db    0
.xdata$x:0000E09E                 db    0
.xdata$x:0000E09F                 db    0
.xdata$x:0000E0A0                 db    0
.xdata$x:0000E0A1                 db    0
.xdata$x:0000E0A2                 db    0
.xdata$x:0000E0A3                 db    0
.xdata$x:0000E0A4                 db    0
.xdata$x:0000E0A5                 db    0
.xdata$x:0000E0A6                 db    0
.xdata$x:0000E0A7                 db    0
.xdata$x:0000E0A7 _xdata$x        ends
.xdata$x:0000E0A7
.xdata$x:0000E0A8 ; ===========================================================================
.xdata$x:0000E0A8
.xdata$x:0000E0A8 ; Segment type: Pure data
.xdata$x:0000E0A8 ; Segment permissions: Read
.xdata$x:0000E0A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E0A8                 assume cs:_xdata$x
.xdata$x:0000E0A8                 ;org 0E0A8h
.xdata$x:0000E0A8 ; COMDAT (pick associative to section at 4790)
.xdata$x:0000E0A8 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:0000E0A8                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:0000E0A9                 db    5
.xdata$x:0000E0AA                 db  93h ; ô
.xdata$x:0000E0AB                 db  19h
.xdata$x:0000E0AC                 db  0Ah
.xdata$x:0000E0AD                 db    0
.xdata$x:0000E0AE                 db    0
.xdata$x:0000E0AF                 db    0
.xdata$x:0000E0B0                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:0000E0B4                 db    0
.xdata$x:0000E0B5                 db    0
.xdata$x:0000E0B6                 db    0
.xdata$x:0000E0B7                 db    0
.xdata$x:0000E0B8                 db    0
.xdata$x:0000E0B9                 db    0
.xdata$x:0000E0BA                 db    0
.xdata$x:0000E0BB                 db    0
.xdata$x:0000E0BC                 db    0
.xdata$x:0000E0BD                 db    0
.xdata$x:0000E0BE                 db    0
.xdata$x:0000E0BF                 db    0
.xdata$x:0000E0C0                 db    0
.xdata$x:0000E0C1                 db    0
.xdata$x:0000E0C2                 db    0
.xdata$x:0000E0C3                 db    0
.xdata$x:0000E0C4                 db    0
.xdata$x:0000E0C5                 db    0
.xdata$x:0000E0C6                 db    0
.xdata$x:0000E0C7                 db    0
.xdata$x:0000E0C8                 db    0
.xdata$x:0000E0C9                 db    0
.xdata$x:0000E0CA                 db    0
.xdata$x:0000E0CB                 db    0
.xdata$x:0000E0CC __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:0000E0CC                                         ; DATA XREF: .xdata$x:0000E0B0o
.xdata$x:0000E0CD                 db 0FFh
.xdata$x:0000E0CE                 db 0FFh
.xdata$x:0000E0CF                 db 0FFh
.xdata$x:0000E0D0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:0000E0D4                 align 8
.xdata$x:0000E0D8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:0000E0DC                 db    1
.xdata$x:0000E0DD                 db    0
.xdata$x:0000E0DE                 db    0
.xdata$x:0000E0DF                 db    0
.xdata$x:0000E0E0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:0000E0E4                 db    2
.xdata$x:0000E0E5                 db    0
.xdata$x:0000E0E6                 db    0
.xdata$x:0000E0E7                 db    0
.xdata$x:0000E0E8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:0000E0EC                 db    3
.xdata$x:0000E0ED                 db    0
.xdata$x:0000E0EE                 db    0
.xdata$x:0000E0EF                 db    0
.xdata$x:0000E0F0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000E0F4                 db    4
.xdata$x:0000E0F5                 db    0
.xdata$x:0000E0F6                 db    0
.xdata$x:0000E0F7                 db    0
.xdata$x:0000E0F8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:0000E0FC                 db    5
.xdata$x:0000E0FD                 db    0
.xdata$x:0000E0FE                 db    0
.xdata$x:0000E0FF                 db    0
.xdata$x:0000E100                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000E104                 db    6
.xdata$x:0000E105                 db    0
.xdata$x:0000E106                 db    0
.xdata$x:0000E107                 db    0
.xdata$x:0000E108                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:0000E10C                 db    1
.xdata$x:0000E10D                 db    0
.xdata$x:0000E10E                 db    0
.xdata$x:0000E10F                 db    0
.xdata$x:0000E110                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000E114                 db    8
.xdata$x:0000E115                 db    0
.xdata$x:0000E116                 db    0
.xdata$x:0000E117                 db    0
.xdata$x:0000E118                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000E118 _xdata$x        ends
.xdata$x:0000E118
.xdata$x:0000E11C ; ===========================================================================
.xdata$x:0000E11C
.xdata$x:0000E11C ; Segment type: Pure data
.xdata$x:0000E11C ; Segment permissions: Read
.xdata$x:0000E11C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E11C                 assume cs:_xdata$x
.xdata$x:0000E11C                 ;org 0E11Ch
.xdata$x:0000E11C ; COMDAT (pick associative to section at 3D3C)
.xdata$x:0000E11C __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@ db 0FFh
.xdata$x:0000E11C                                         ; DATA XREF: .xdata$x:0000E144o
.xdata$x:0000E11D                 db 0FFh
.xdata$x:0000E11E                 db 0FFh
.xdata$x:0000E11F                 db 0FFh
.xdata$x:0000E120                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0
.xdata$x:0000E124                 align 8
.xdata$x:0000E128                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1
.xdata$x:0000E12C                 db    1
.xdata$x:0000E12D                 db    0
.xdata$x:0000E12E                 db    0
.xdata$x:0000E12F                 db    0
.xdata$x:0000E130                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2
.xdata$x:0000E134                 db    2
.xdata$x:0000E135                 db    0
.xdata$x:0000E136                 db    0
.xdata$x:0000E137                 db    0
.xdata$x:0000E138                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3
.xdata$x:0000E13C __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@ db  22h ; "
.xdata$x:0000E13C                                         ; DATA XREF: __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z+11o
.xdata$x:0000E13D                 db    5
.xdata$x:0000E13E                 db  93h ; ô
.xdata$x:0000E13F                 db  19h
.xdata$x:0000E140                 db    4
.xdata$x:0000E141                 db    0
.xdata$x:0000E142                 db    0
.xdata$x:0000E143                 db    0
.xdata$x:0000E144                 dd offset __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.xdata$x:0000E148                 align 20h
.xdata$x:0000E148 _xdata$x        ends
.xdata$x:0000E148
.xdata$x:0000E160 ; ===========================================================================
.xdata$x:0000E160
.xdata$x:0000E160 ; Segment type: Pure data
.xdata$x:0000E160 ; Segment permissions: Read
.xdata$x:0000E160 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E160                 assume cs:_xdata$x
.xdata$x:0000E160                 ;org 0E160h
.xdata$x:0000E160 ; COMDAT (pick associative to section at 52D8)
.xdata$x:0000E160 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000E160                                         ; DATA XREF: .xdata$x:0000E170o
.xdata$x:0000E161                 db 0FFh
.xdata$x:0000E162                 db 0FFh
.xdata$x:0000E163                 db 0FFh
.xdata$x:0000E164                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000E168 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000E168                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000E169                 db    5
.xdata$x:0000E16A                 db  93h ; ô
.xdata$x:0000E16B                 db  19h
.xdata$x:0000E16C                 db    1
.xdata$x:0000E16D                 db    0
.xdata$x:0000E16E                 db    0
.xdata$x:0000E16F                 db    0
.xdata$x:0000E170                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000E174                 db    0
.xdata$x:0000E175                 db    0
.xdata$x:0000E176                 db    0
.xdata$x:0000E177                 db    0
.xdata$x:0000E178                 db    0
.xdata$x:0000E179                 db    0
.xdata$x:0000E17A                 db    0
.xdata$x:0000E17B                 db    0
.xdata$x:0000E17C                 db    0
.xdata$x:0000E17D                 db    0
.xdata$x:0000E17E                 db    0
.xdata$x:0000E17F                 db    0
.xdata$x:0000E180                 db    0
.xdata$x:0000E181                 db    0
.xdata$x:0000E182                 db    0
.xdata$x:0000E183                 db    0
.xdata$x:0000E184                 db    0
.xdata$x:0000E185                 db    0
.xdata$x:0000E186                 db    0
.xdata$x:0000E187                 db    0
.xdata$x:0000E188                 db    0
.xdata$x:0000E189                 db    0
.xdata$x:0000E18A                 db    0
.xdata$x:0000E18B                 db    0
.xdata$x:0000E18B _xdata$x        ends
.xdata$x:0000E18B
.xdata$x:0000E18C ; ===========================================================================
.xdata$x:0000E18C
.xdata$x:0000E18C ; Segment type: Pure data
.xdata$x:0000E18C ; Segment permissions: Read
.xdata$x:0000E18C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E18C                 assume cs:_xdata$x
.xdata$x:0000E18C                 ;org 0E18Ch
.xdata$x:0000E18C ; COMDAT (pick associative to section at 6D9C)
.xdata$x:0000E18C __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000E18C                                         ; DATA XREF: .xdata$x:0000E19Co
.xdata$x:0000E18D                 db 0FFh
.xdata$x:0000E18E                 db 0FFh
.xdata$x:0000E18F                 db 0FFh
.xdata$x:0000E190                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000E194 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000E194                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000E195                 db    5
.xdata$x:0000E196                 db  93h ; ô
.xdata$x:0000E197                 db  19h
.xdata$x:0000E198                 db    1
.xdata$x:0000E199                 db    0
.xdata$x:0000E19A                 db    0
.xdata$x:0000E19B                 db    0
.xdata$x:0000E19C                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000E1A0                 db    0
.xdata$x:0000E1A1                 db    0
.xdata$x:0000E1A2                 db    0
.xdata$x:0000E1A3                 db    0
.xdata$x:0000E1A4                 db    0
.xdata$x:0000E1A5                 db    0
.xdata$x:0000E1A6                 db    0
.xdata$x:0000E1A7                 db    0
.xdata$x:0000E1A8                 db    0
.xdata$x:0000E1A9                 db    0
.xdata$x:0000E1AA                 db    0
.xdata$x:0000E1AB                 db    0
.xdata$x:0000E1AC                 db    0
.xdata$x:0000E1AD                 db    0
.xdata$x:0000E1AE                 db    0
.xdata$x:0000E1AF                 db    0
.xdata$x:0000E1B0                 db    0
.xdata$x:0000E1B1                 db    0
.xdata$x:0000E1B2                 db    0
.xdata$x:0000E1B3                 db    0
.xdata$x:0000E1B4                 db    0
.xdata$x:0000E1B5                 db    0
.xdata$x:0000E1B6                 db    0
.xdata$x:0000E1B7                 db    0
.xdata$x:0000E1B7 _xdata$x        ends
.xdata$x:0000E1B7
.xdata$x:0000E1B8 ; ===========================================================================
.xdata$x:0000E1B8
.xdata$x:0000E1B8 ; Segment type: Pure data
.xdata$x:0000E1B8 ; Segment permissions: Read
.xdata$x:0000E1B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E1B8                 assume cs:_xdata$x
.xdata$x:0000E1B8                 ;org 0E1B8h
.xdata$x:0000E1B8 ; COMDAT (pick associative to section at 5260)
.xdata$x:0000E1B8 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000E1B8                                         ; DATA XREF: .xdata$x:0000E1C8o
.xdata$x:0000E1B9                 db 0FFh
.xdata$x:0000E1BA                 db 0FFh
.xdata$x:0000E1BB                 db 0FFh
.xdata$x:0000E1BC                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000E1C0 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000E1C0                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000E1C1                 db    5
.xdata$x:0000E1C2                 db  93h ; ô
.xdata$x:0000E1C3                 db  19h
.xdata$x:0000E1C4                 db    1
.xdata$x:0000E1C5                 db    0
.xdata$x:0000E1C6                 db    0
.xdata$x:0000E1C7                 db    0
.xdata$x:0000E1C8                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UTreeStateNode@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000E1CC                 db    0
.xdata$x:0000E1CD                 db    0
.xdata$x:0000E1CE                 db    0
.xdata$x:0000E1CF                 db    0
.xdata$x:0000E1D0                 db    0
.xdata$x:0000E1D1                 db    0
.xdata$x:0000E1D2                 db    0
.xdata$x:0000E1D3                 db    0
.xdata$x:0000E1D4                 db    0
.xdata$x:0000E1D5                 db    0
.xdata$x:0000E1D6                 db    0
.xdata$x:0000E1D7                 db    0
.xdata$x:0000E1D8                 db    0
.xdata$x:0000E1D9                 db    0
.xdata$x:0000E1DA                 db    0
.xdata$x:0000E1DB                 db    0
.xdata$x:0000E1DC                 db    0
.xdata$x:0000E1DD                 db    0
.xdata$x:0000E1DE                 db    0
.xdata$x:0000E1DF                 db    0
.xdata$x:0000E1E0                 db    0
.xdata$x:0000E1E1                 db    0
.xdata$x:0000E1E2                 db    0
.xdata$x:0000E1E3                 db    0
.xdata$x:0000E1E3 _xdata$x        ends
.xdata$x:0000E1E3
.xdata$x:0000E1E4 ; ===========================================================================
.xdata$x:0000E1E4
.xdata$x:0000E1E4 ; Segment type: Pure data
.xdata$x:0000E1E4 ; Segment permissions: Read
.xdata$x:0000E1E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E1E4                 assume cs:_xdata$x
.xdata$x:0000E1E4                 ;org 0E1E4h
.xdata$x:0000E1E4 ; COMDAT (pick associative to section at 5B28)
.xdata$x:0000E1E4 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000E1E4                                         ; DATA XREF: .xdata$x:0000E1F4o
.xdata$x:0000E1E5                 db 0FFh
.xdata$x:0000E1E6                 db 0FFh
.xdata$x:0000E1E7                 db 0FFh
.xdata$x:0000E1E8                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z$0
.xdata$x:0000E1EC __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000E1EC                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z+11o
.xdata$x:0000E1ED                 db    5
.xdata$x:0000E1EE                 db  93h ; ô
.xdata$x:0000E1EF                 db  19h
.xdata$x:0000E1F0                 db    1
.xdata$x:0000E1F1                 db    0
.xdata$x:0000E1F2                 db    0
.xdata$x:0000E1F3                 db    0
.xdata$x:0000E1F4                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@PAUTreeStateNode@@PBU_Container_base12@1@@Z
.xdata$x:0000E1F8                 db    0
.xdata$x:0000E1F9                 db    0
.xdata$x:0000E1FA                 db    0
.xdata$x:0000E1FB                 db    0
.xdata$x:0000E1FC                 db    0
.xdata$x:0000E1FD                 db    0
.xdata$x:0000E1FE                 db    0
.xdata$x:0000E1FF                 db    0
.xdata$x:0000E200                 db    0
.xdata$x:0000E201                 db    0
.xdata$x:0000E202                 db    0
.xdata$x:0000E203                 db    0
.xdata$x:0000E204                 db    0
.xdata$x:0000E205                 db    0
.xdata$x:0000E206                 db    0
.xdata$x:0000E207                 db    0
.xdata$x:0000E208                 db    0
.xdata$x:0000E209                 db    0
.xdata$x:0000E20A                 db    0
.xdata$x:0000E20B                 db    0
.xdata$x:0000E20C                 db    0
.xdata$x:0000E20D                 db    0
.xdata$x:0000E20E                 db    0
.xdata$x:0000E20F                 db    0
.xdata$x:0000E20F _xdata$x        ends
.xdata$x:0000E20F
.xdata$x:0000E210 ; ===========================================================================
.xdata$x:0000E210
.xdata$x:0000E210 ; Segment type: Pure data
.xdata$x:0000E210 ; Segment permissions: Read
.xdata$x:0000E210 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E210                 assume cs:_xdata$x
.xdata$x:0000E210                 ;org 0E210h
.xdata$x:0000E210 ; COMDAT (pick associative to section at 7304)
.xdata$x:0000E210 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000E210                                         ; DATA XREF: .xdata$x:0000E220o
.xdata$x:0000E211                 db 0FFh
.xdata$x:0000E212                 db 0FFh
.xdata$x:0000E213                 db 0FFh
.xdata$x:0000E214                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000E218 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000E218                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000E219                 db    5
.xdata$x:0000E21A                 db  93h ; ô
.xdata$x:0000E21B                 db  19h
.xdata$x:0000E21C                 db    1
.xdata$x:0000E21D                 db    0
.xdata$x:0000E21E                 db    0
.xdata$x:0000E21F                 db    0
.xdata$x:0000E220                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000E224                 db    0
.xdata$x:0000E225                 db    0
.xdata$x:0000E226                 db    0
.xdata$x:0000E227                 db    0
.xdata$x:0000E228                 db    0
.xdata$x:0000E229                 db    0
.xdata$x:0000E22A                 db    0
.xdata$x:0000E22B                 db    0
.xdata$x:0000E22C                 db    0
.xdata$x:0000E22D                 db    0
.xdata$x:0000E22E                 db    0
.xdata$x:0000E22F                 db    0
.xdata$x:0000E230                 db    0
.xdata$x:0000E231                 db    0
.xdata$x:0000E232                 db    0
.xdata$x:0000E233                 db    0
.xdata$x:0000E234                 db    0
.xdata$x:0000E235                 db    0
.xdata$x:0000E236                 db    0
.xdata$x:0000E237                 db    0
.xdata$x:0000E238                 db    0
.xdata$x:0000E239                 db    0
.xdata$x:0000E23A                 db    0
.xdata$x:0000E23B                 db    0
.xdata$x:0000E23B _xdata$x        ends
.xdata$x:0000E23B
.xdata$x:0000E23C ; ===========================================================================
.xdata$x:0000E23C
.xdata$x:0000E23C ; Segment type: Pure data
.xdata$x:0000E23C ; Segment permissions: Read
.xdata$x:0000E23C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E23C                 assume cs:_xdata$x
.xdata$x:0000E23C                 ;org 0E23Ch
.xdata$x:0000E23C ; COMDAT (pick associative to section at 5AA4)
.xdata$x:0000E23C __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000E23C                                         ; DATA XREF: .xdata$x:0000E24Co
.xdata$x:0000E23D                 db 0FFh
.xdata$x:0000E23E                 db 0FFh
.xdata$x:0000E23F                 db 0FFh
.xdata$x:0000E240                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000E244 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000E244                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000E245                 db    5
.xdata$x:0000E246                 db  93h ; ô
.xdata$x:0000E247                 db  19h
.xdata$x:0000E248                 db    1
.xdata$x:0000E249                 db    0
.xdata$x:0000E24A                 db    0
.xdata$x:0000E24B                 db    0
.xdata$x:0000E24C                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000E250                 db    0
.xdata$x:0000E251                 db    0
.xdata$x:0000E252                 db    0
.xdata$x:0000E253                 db    0
.xdata$x:0000E254                 db    0
.xdata$x:0000E255                 db    0
.xdata$x:0000E256                 db    0
.xdata$x:0000E257                 db    0
.xdata$x:0000E258                 db    0
.xdata$x:0000E259                 db    0
.xdata$x:0000E25A                 db    0
.xdata$x:0000E25B                 db    0
.xdata$x:0000E25C                 db    0
.xdata$x:0000E25D                 db    0
.xdata$x:0000E25E                 db    0
.xdata$x:0000E25F                 db    0
.xdata$x:0000E260                 db    0
.xdata$x:0000E261                 db    0
.xdata$x:0000E262                 db    0
.xdata$x:0000E263                 db    0
.xdata$x:0000E264                 db    0
.xdata$x:0000E265                 db    0
.xdata$x:0000E266                 db    0
.xdata$x:0000E267                 db    0
.xdata$x:0000E267 _xdata$x        ends
.xdata$x:0000E267
.xdata$x:0000E268 ; ===========================================================================
.xdata$x:0000E268
.xdata$x:0000E268 ; Segment type: Pure data
.xdata$x:0000E268 ; Segment permissions: Read
.xdata$x:0000E268 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E268                 assume cs:_xdata$x
.xdata$x:0000E268                 ;org 0E268h
.xdata$x:0000E268 ; COMDAT (pick associative to section at 3C3C)
.xdata$x:0000E268 __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z db 0FFh
.xdata$x:0000E268                                         ; DATA XREF: .xdata$x:0000E290o
.xdata$x:0000E269                 db 0FFh
.xdata$x:0000E26A                 db 0FFh
.xdata$x:0000E26B                 db 0FFh
.xdata$x:0000E26C                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$0
.xdata$x:0000E270                 db    0
.xdata$x:0000E271                 db    0
.xdata$x:0000E272                 db    0
.xdata$x:0000E273                 db    0
.xdata$x:0000E274                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$1
.xdata$x:0000E278                 db    1
.xdata$x:0000E279                 db    0
.xdata$x:0000E27A                 db    0
.xdata$x:0000E27B                 db    0
.xdata$x:0000E27C                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$2
.xdata$x:0000E280                 db    2
.xdata$x:0000E281                 db    0
.xdata$x:0000E282                 db    0
.xdata$x:0000E283                 db    0
.xdata$x:0000E284                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z$3
.xdata$x:0000E288 __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z db  22h ; "
.xdata$x:0000E288                                         ; DATA XREF: __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z+11o
.xdata$x:0000E289                 db    5
.xdata$x:0000E28A                 db  93h ; ô
.xdata$x:0000E28B                 db  19h
.xdata$x:0000E28C                 db    4
.xdata$x:0000E28D                 db    0
.xdata$x:0000E28E                 db    0
.xdata$x:0000E28F                 db    0
.xdata$x:0000E290                 dd offset __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@@?$vector@UTreeStateNode@@V?$allocator@UTreeStateNode@@@std@@@std@@IAEPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@1@0PAU2@@Z
.xdata$x:0000E294                 db    0
.xdata$x:0000E295                 db    0
.xdata$x:0000E296                 db    0
.xdata$x:0000E297                 db    0
.xdata$x:0000E298                 db    0
.xdata$x:0000E299                 db    0
.xdata$x:0000E29A                 db    0
.xdata$x:0000E29B                 db    0
.xdata$x:0000E29C                 db    0
.xdata$x:0000E29D                 db    0
.xdata$x:0000E29E                 db    0
.xdata$x:0000E29F                 db    0
.xdata$x:0000E2A0                 db    0
.xdata$x:0000E2A1                 db    0
.xdata$x:0000E2A2                 db    0
.xdata$x:0000E2A3                 db    0
.xdata$x:0000E2A4                 db    0
.xdata$x:0000E2A5                 db    0
.xdata$x:0000E2A6                 db    0
.xdata$x:0000E2A7                 db    0
.xdata$x:0000E2A8                 db    0
.xdata$x:0000E2A9                 db    0
.xdata$x:0000E2AA                 db    0
.xdata$x:0000E2AB                 db    0
.xdata$x:0000E2AB _xdata$x        ends
.xdata$x:0000E2AB
.xdata$x:0000E2AC ; ===========================================================================
.xdata$x:0000E2AC
.xdata$x:0000E2AC ; Segment type: Pure data
.xdata$x:0000E2AC ; Segment permissions: Read
.xdata$x:0000E2AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E2AC                 assume cs:_xdata$x
.xdata$x:0000E2AC                 ;org 0E2ACh
.xdata$x:0000E2AC ; COMDAT (pick associative to section at 4EE8)
.xdata$x:0000E2AC __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000E2AC                                         ; DATA XREF: .xdata$x:0000E2BCo
.xdata$x:0000E2AD                 db 0FFh
.xdata$x:0000E2AE                 db 0FFh
.xdata$x:0000E2AF                 db 0FFh
.xdata$x:0000E2B0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000E2B4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000E2B4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000E2B5                 db    5
.xdata$x:0000E2B6                 db  93h ; ô
.xdata$x:0000E2B7                 db  19h
.xdata$x:0000E2B8                 db    1
.xdata$x:0000E2B9                 db    0
.xdata$x:0000E2BA                 db    0
.xdata$x:0000E2BB                 db    0
.xdata$x:0000E2BC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000E2C0                 db    0
.xdata$x:0000E2C1                 db    0
.xdata$x:0000E2C2                 db    0
.xdata$x:0000E2C3                 db    0
.xdata$x:0000E2C4                 db    0
.xdata$x:0000E2C5                 db    0
.xdata$x:0000E2C6                 db    0
.xdata$x:0000E2C7                 db    0
.xdata$x:0000E2C8                 db    0
.xdata$x:0000E2C9                 db    0
.xdata$x:0000E2CA                 db    0
.xdata$x:0000E2CB                 db    0
.xdata$x:0000E2CC                 db    0
.xdata$x:0000E2CD                 db    0
.xdata$x:0000E2CE                 db    0
.xdata$x:0000E2CF                 db    0
.xdata$x:0000E2D0                 db    0
.xdata$x:0000E2D1                 db    0
.xdata$x:0000E2D2                 db    0
.xdata$x:0000E2D3                 db    0
.xdata$x:0000E2D4                 db    0
.xdata$x:0000E2D5                 db    0
.xdata$x:0000E2D6                 db    0
.xdata$x:0000E2D7                 db    0
.xdata$x:0000E2D7 _xdata$x        ends
.xdata$x:0000E2D7
.xdata$x:0000E2D8 ; ===========================================================================
.xdata$x:0000E2D8
.xdata$x:0000E2D8 ; Segment type: Pure data
.xdata$x:0000E2D8 ; Segment permissions: Read
.xdata$x:0000E2D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E2D8                 assume cs:_xdata$x
.xdata$x:0000E2D8                 ;org 0E2D8h
.xdata$x:0000E2D8 ; COMDAT (pick associative to section at 4600)
.xdata$x:0000E2D8 __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@s db 0FFh
.xdata$x:0000E2D8                                         ; DATA XREF: .xdata$x:0000E300o
.xdata$x:0000E2D9                 db 0FFh
.xdata$x:0000E2DA                 db 0FFh
.xdata$x:0000E2DB                 db 0FFh
.xdata$x:0000E2DC                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0
.xdata$x:0000E2E0                 db    0
.xdata$x:0000E2E1                 db    0
.xdata$x:0000E2E2                 db    0
.xdata$x:0000E2E3                 db    0
.xdata$x:0000E2E4                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1
.xdata$x:0000E2E8                 db    1
.xdata$x:0000E2E9                 db    0
.xdata$x:0000E2EA                 db    0
.xdata$x:0000E2EB                 db    0
.xdata$x:0000E2EC                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2
.xdata$x:0000E2F0                 db    1
.xdata$x:0000E2F1                 db    0
.xdata$x:0000E2F2                 db    0
.xdata$x:0000E2F3                 db    0
.xdata$x:0000E2F4                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3
.xdata$x:0000E2F8 __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@st db  22h ; "
.xdata$x:0000E2F8                                         ; DATA XREF: __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z+11o
.xdata$x:0000E2F9                 db    5
.xdata$x:0000E2FA                 db  93h ; ô
.xdata$x:0000E2FB                 db  19h
.xdata$x:0000E2FC                 db    4
.xdata$x:0000E2FD                 db    0
.xdata$x:0000E2FE                 db    0
.xdata$x:0000E2FF                 db    0
.xdata$x:0000E300                 dd offset __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.xdata$x:0000E304                 db    0
.xdata$x:0000E305                 db    0
.xdata$x:0000E306                 db    0
.xdata$x:0000E307                 db    0
.xdata$x:0000E308                 db    0
.xdata$x:0000E309                 db    0
.xdata$x:0000E30A                 db    0
.xdata$x:0000E30B                 db    0
.xdata$x:0000E30C                 db    0
.xdata$x:0000E30D                 db    0
.xdata$x:0000E30E                 db    0
.xdata$x:0000E30F                 db    0
.xdata$x:0000E310                 db    0
.xdata$x:0000E311                 db    0
.xdata$x:0000E312                 db    0
.xdata$x:0000E313                 db    0
.xdata$x:0000E314                 db    0
.xdata$x:0000E315                 db    0
.xdata$x:0000E316                 db    0
.xdata$x:0000E317                 db    0
.xdata$x:0000E318                 db    0
.xdata$x:0000E319                 db    0
.xdata$x:0000E31A                 db    0
.xdata$x:0000E31B                 db    0
.xdata$x:0000E31B _xdata$x        ends
.xdata$x:0000E31B
.xdata$x:0000E31C ; ===========================================================================
.xdata$x:0000E31C
.xdata$x:0000E31C ; Segment type: Pure data
.xdata$x:0000E31C ; Segment permissions: Read
.xdata$x:0000E31C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E31C                 assume cs:_xdata$x
.xdata$x:0000E31C                 ;org 0E31Ch
.xdata$x:0000E31C ; COMDAT (pick associative to section at 44D8)
.xdata$x:0000E31C __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z db 0FFh
.xdata$x:0000E31C                                         ; DATA XREF: .xdata$x:0000E344o
.xdata$x:0000E31D                 db 0FFh
.xdata$x:0000E31E                 db 0FFh
.xdata$x:0000E31F                 db 0FFh
.xdata$x:0000E320                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$0
.xdata$x:0000E324                 align 8
.xdata$x:0000E328                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$1
.xdata$x:0000E32C                 db    1
.xdata$x:0000E32D                 db    0
.xdata$x:0000E32E                 db    0
.xdata$x:0000E32F                 db    0
.xdata$x:0000E330                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$2
.xdata$x:0000E334                 db    1
.xdata$x:0000E335                 db    0
.xdata$x:0000E336                 db    0
.xdata$x:0000E337                 db    0
.xdata$x:0000E338                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z$3
.xdata$x:0000E33C __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z db  22h ; "
.xdata$x:0000E33C                                         ; DATA XREF: __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z+11o
.xdata$x:0000E33D                 db    5
.xdata$x:0000E33E                 db  93h ; ô
.xdata$x:0000E33F                 db  19h
.xdata$x:0000E340                 db    4
.xdata$x:0000E341                 db    0
.xdata$x:0000E342                 db    0
.xdata$x:0000E343                 db    0
.xdata$x:0000E344                 dd offset __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@PAUTreeStateNode@@U?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@2@@std@@YAPAUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@@Z
.xdata$x:0000E348                 align 20h
.xdata$x:0000E348 _xdata$x        ends
.xdata$x:0000E348
.xdata$x:0000E360 ; ===========================================================================
.xdata$x:0000E360
.xdata$x:0000E360 ; Segment type: Pure data
.xdata$x:0000E360 ; Segment permissions: Read
.xdata$x:0000E360 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E360                 assume cs:_xdata$x
.xdata$x:0000E360                 ;org 0E360h
.xdata$x:0000E360 ; COMDAT (pick associative to section at 3F04)
.xdata$x:0000E360 __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db 0FFh
.xdata$x:0000E360                                         ; DATA XREF: .xdata$x:0000E370o
.xdata$x:0000E361                 db 0FFh
.xdata$x:0000E362                 db 0FFh
.xdata$x:0000E363                 db 0FFh
.xdata$x:0000E364                 dd offset __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0
.xdata$x:0000E368 __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db  22h ; "
.xdata$x:0000E368                                         ; DATA XREF: __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z+11o
.xdata$x:0000E369                 db    5
.xdata$x:0000E36A                 db  93h ; ô
.xdata$x:0000E36B                 db  19h
.xdata$x:0000E36C                 db    1
.xdata$x:0000E36D                 db    0
.xdata$x:0000E36E                 db    0
.xdata$x:0000E36F                 db    0
.xdata$x:0000E370                 dd offset __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.xdata$x:0000E374                 db    0
.xdata$x:0000E375                 db    0
.xdata$x:0000E376                 db    0
.xdata$x:0000E377                 db    0
.xdata$x:0000E378                 db    0
.xdata$x:0000E379                 db    0
.xdata$x:0000E37A                 db    0
.xdata$x:0000E37B                 db    0
.xdata$x:0000E37C                 db    0
.xdata$x:0000E37D                 db    0
.xdata$x:0000E37E                 db    0
.xdata$x:0000E37F                 db    0
.xdata$x:0000E380                 db    0
.xdata$x:0000E381                 db    0
.xdata$x:0000E382                 db    0
.xdata$x:0000E383                 db    0
.xdata$x:0000E384                 db    0
.xdata$x:0000E385                 db    0
.xdata$x:0000E386                 db    0
.xdata$x:0000E387                 db    0
.xdata$x:0000E388                 db    0
.xdata$x:0000E389                 db    0
.xdata$x:0000E38A                 db    0
.xdata$x:0000E38B                 db    0
.xdata$x:0000E38B _xdata$x        ends
.xdata$x:0000E38B
.xdata$x:0000E38C ; ===========================================================================
.xdata$x:0000E38C
.xdata$x:0000E38C ; Segment type: Pure data
.xdata$x:0000E38C ; Segment permissions: Read
.xdata$x:0000E38C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E38C                 assume cs:_xdata$x
.xdata$x:0000E38C                 ;org 0E38Ch
.xdata$x:0000E38C ; COMDAT (pick associative to section at 3E88)
.xdata$x:0000E38C __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z db 0FFh
.xdata$x:0000E38C                                         ; DATA XREF: .xdata$x:0000E39Co
.xdata$x:0000E38D                 db 0FFh
.xdata$x:0000E38E                 db 0FFh
.xdata$x:0000E38F                 db 0FFh
.xdata$x:0000E390                 dd offset __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z$0
.xdata$x:0000E394 __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z db  22h ; "
.xdata$x:0000E394                                         ; DATA XREF: __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z+11o
.xdata$x:0000E395                 db    5
.xdata$x:0000E396                 db  93h ; ô
.xdata$x:0000E397                 db  19h
.xdata$x:0000E398                 db    1
.xdata$x:0000E399                 db    0
.xdata$x:0000E39A                 db    0
.xdata$x:0000E39B                 db    0
.xdata$x:0000E39C                 dd offset __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@std@@YAPBUTreeStateNode@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UTreeStateNode@@@std@@@std@@@0@@Z
.xdata$x:0000E3A0                 db    0
.xdata$x:0000E3A1                 db    0
.xdata$x:0000E3A2                 db    0
.xdata$x:0000E3A3                 db    0
.xdata$x:0000E3A4                 db    0
.xdata$x:0000E3A5                 db    0
.xdata$x:0000E3A6                 db    0
.xdata$x:0000E3A7                 db    0
.xdata$x:0000E3A8                 db    0
.xdata$x:0000E3A9                 db    0
.xdata$x:0000E3AA                 db    0
.xdata$x:0000E3AB                 db    0
.xdata$x:0000E3AC                 db    0
.xdata$x:0000E3AD                 db    0
.xdata$x:0000E3AE                 db    0
.xdata$x:0000E3AF                 db    0
.xdata$x:0000E3B0                 db    0
.xdata$x:0000E3B1                 db    0
.xdata$x:0000E3B2                 db    0
.xdata$x:0000E3B3                 db    0
.xdata$x:0000E3B4                 db    0
.xdata$x:0000E3B5                 db    0
.xdata$x:0000E3B6                 db    0
.xdata$x:0000E3B7                 db    0
.xdata$x:0000E3B7 _xdata$x        ends
.xdata$x:0000E3B7
.xdata$x:0000E3B8 ; ===========================================================================
.xdata$x:0000E3B8
.xdata$x:0000E3B8 ; Segment type: Pure data
.xdata$x:0000E3B8 ; Segment permissions: Read
.xdata$x:0000E3B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E3B8                 assume cs:_xdata$x
.xdata$x:0000E3B8                 ;org 0E3B8h
.xdata$x:0000E3B8 ; COMDAT (pick associative to section at 4B50)
.xdata$x:0000E3B8 __unwindtable$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z db 0FFh
.xdata$x:0000E3B8                                         ; DATA XREF: .xdata$x:0000E3C8o
.xdata$x:0000E3B9                 db 0FFh
.xdata$x:0000E3BA                 db 0FFh
.xdata$x:0000E3BB                 db 0FFh
.xdata$x:0000E3BC                 dd offset __unwindfunclet$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z$0
.xdata$x:0000E3C0 __ehfuncinfo$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z db  22h ; "
.xdata$x:0000E3C0                                         ; DATA XREF: __ehhandler$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z+11o
.xdata$x:0000E3C1                 db    5
.xdata$x:0000E3C2                 db  93h ; ô
.xdata$x:0000E3C3                 db  19h
.xdata$x:0000E3C4                 db    1
.xdata$x:0000E3C5                 db    0
.xdata$x:0000E3C6                 db    0
.xdata$x:0000E3C7                 db    0
.xdata$x:0000E3C8                 dd offset __unwindtable$??$construct@UTreeParams@@AAU1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@AAU2@@Z
.xdata$x:0000E3CC                 db    0
.xdata$x:0000E3CD                 db    0
.xdata$x:0000E3CE                 db    0
.xdata$x:0000E3CF                 db    0
.xdata$x:0000E3D0                 db    0
.xdata$x:0000E3D1                 db    0
.xdata$x:0000E3D2                 db    0
.xdata$x:0000E3D3                 db    0
.xdata$x:0000E3D4                 db    0
.xdata$x:0000E3D5                 db    0
.xdata$x:0000E3D6                 db    0
.xdata$x:0000E3D7                 db    0
.xdata$x:0000E3D8                 db    0
.xdata$x:0000E3D9                 db    0
.xdata$x:0000E3DA                 db    0
.xdata$x:0000E3DB                 db    0
.xdata$x:0000E3DC                 db    0
.xdata$x:0000E3DD                 db    0
.xdata$x:0000E3DE                 db    0
.xdata$x:0000E3DF                 db    0
.xdata$x:0000E3E0                 db    0
.xdata$x:0000E3E1                 db    0
.xdata$x:0000E3E2                 db    0
.xdata$x:0000E3E3                 db    0
.xdata$x:0000E3E3 _xdata$x        ends
.xdata$x:0000E3E3
.xdata$x:0000E3E4 ; ===========================================================================
.xdata$x:0000E3E4
.xdata$x:0000E3E4 ; Segment type: Pure data
.xdata$x:0000E3E4 ; Segment permissions: Read
.xdata$x:0000E3E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E3E4                 assume cs:_xdata$x
.xdata$x:0000E3E4                 ;org 0E3E4h
.xdata$x:0000E3E4 ; COMDAT (pick associative to section at 4950)
.xdata$x:0000E3E4 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000E3E4                                         ; DATA XREF: .xdata$x:0000E3F4o
.xdata$x:0000E3E5                 db 0FFh
.xdata$x:0000E3E6                 db 0FFh
.xdata$x:0000E3E7                 db 0FFh
.xdata$x:0000E3E8                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000E3EC __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000E3EC                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000E3ED                 db    5
.xdata$x:0000E3EE                 db  93h ; ô
.xdata$x:0000E3EF                 db  19h
.xdata$x:0000E3F0                 db    1
.xdata$x:0000E3F1                 db    0
.xdata$x:0000E3F2                 db    0
.xdata$x:0000E3F3                 db    0
.xdata$x:0000E3F4                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000E3F8                 db    0
.xdata$x:0000E3F9                 db    0
.xdata$x:0000E3FA                 db    0
.xdata$x:0000E3FB                 db    0
.xdata$x:0000E3FC                 db    0
.xdata$x:0000E3FD                 db    0
.xdata$x:0000E3FE                 db    0
.xdata$x:0000E3FF                 db    0
.xdata$x:0000E400                 db    0
.xdata$x:0000E401                 db    0
.xdata$x:0000E402                 db    0
.xdata$x:0000E403                 db    0
.xdata$x:0000E404                 db    0
.xdata$x:0000E405                 db    0
.xdata$x:0000E406                 db    0
.xdata$x:0000E407                 db    0
.xdata$x:0000E408                 db    0
.xdata$x:0000E409                 db    0
.xdata$x:0000E40A                 db    0
.xdata$x:0000E40B                 db    0
.xdata$x:0000E40C                 db    0
.xdata$x:0000E40D                 db    0
.xdata$x:0000E40E                 db    0
.xdata$x:0000E40F                 db    0
.xdata$x:0000E40F _xdata$x        ends
.xdata$x:0000E40F
.xdata$x:0000E410 ; ===========================================================================
.xdata$x:0000E410
.xdata$x:0000E410 ; Segment type: Pure data
.xdata$x:0000E410 ; Segment permissions: Read
.xdata$x:0000E410 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E410                 assume cs:_xdata$x
.xdata$x:0000E410                 ;org 0E410h
.xdata$x:0000E410 ; COMDAT (pick associative to section at 4A50)
.xdata$x:0000E410 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000E410                                         ; DATA XREF: .xdata$x:0000E420o
.xdata$x:0000E411                 db 0FFh
.xdata$x:0000E412                 db 0FFh
.xdata$x:0000E413                 db 0FFh
.xdata$x:0000E414                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000E418 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000E418                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000E419                 db    5
.xdata$x:0000E41A                 db  93h ; ô
.xdata$x:0000E41B                 db  19h
.xdata$x:0000E41C                 db    1
.xdata$x:0000E41D                 db    0
.xdata$x:0000E41E                 db    0
.xdata$x:0000E41F                 db    0
.xdata$x:0000E420                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000E424                 db    0
.xdata$x:0000E425                 db    0
.xdata$x:0000E426                 db    0
.xdata$x:0000E427                 db    0
.xdata$x:0000E428                 db    0
.xdata$x:0000E429                 db    0
.xdata$x:0000E42A                 db    0
.xdata$x:0000E42B                 db    0
.xdata$x:0000E42C                 db    0
.xdata$x:0000E42D                 db    0
.xdata$x:0000E42E                 db    0
.xdata$x:0000E42F                 db    0
.xdata$x:0000E430                 db    0
.xdata$x:0000E431                 db    0
.xdata$x:0000E432                 db    0
.xdata$x:0000E433                 db    0
.xdata$x:0000E434                 db    0
.xdata$x:0000E435                 db    0
.xdata$x:0000E436                 db    0
.xdata$x:0000E437                 db    0
.xdata$x:0000E438                 db    0
.xdata$x:0000E439                 db    0
.xdata$x:0000E43A                 db    0
.xdata$x:0000E43B                 db    0
.xdata$x:0000E43B _xdata$x        ends
.xdata$x:0000E43B
.xdata$x:0000E43C ; ===========================================================================
.xdata$x:0000E43C
.xdata$x:0000E43C ; Segment type: Pure data
.xdata$x:0000E43C ; Segment permissions: Read
.xdata$x:0000E43C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E43C                 assume cs:_xdata$x
.xdata$x:0000E43C                 ;org 0E43Ch
.xdata$x:0000E43C ; COMDAT (pick associative to section at 4238)
.xdata$x:0000E43C __catchsym$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000E43C                                         ; DATA XREF: .xdata$x:0000E46Co
.xdata$x:0000E43D                 db    0
.xdata$x:0000E43E                 db    0
.xdata$x:0000E43F                 db    0
.xdata$x:0000E440                 db    0
.xdata$x:0000E441                 db    0
.xdata$x:0000E442                 db    0
.xdata$x:0000E443                 db    0
.xdata$x:0000E444                 db    0
.xdata$x:0000E445                 db    0
.xdata$x:0000E446                 db    0
.xdata$x:0000E447                 db    0
.xdata$x:0000E448                 dd offset __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000E44C __unwindtable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000E44C                                         ; DATA XREF: .xdata$x:0000E478o
.xdata$x:0000E44D                 db 0FFh
.xdata$x:0000E44E                 db 0FFh
.xdata$x:0000E44F                 db 0FFh
.xdata$x:0000E450                 db    0
.xdata$x:0000E451                 db    0
.xdata$x:0000E452                 db    0
.xdata$x:0000E453                 db    0
.xdata$x:0000E454                 db 0FFh
.xdata$x:0000E455                 db 0FFh
.xdata$x:0000E456                 db 0FFh
.xdata$x:0000E457                 db 0FFh
.xdata$x:0000E458                 db    0
.xdata$x:0000E459                 db    0
.xdata$x:0000E45A                 db    0
.xdata$x:0000E45B                 db    0
.xdata$x:0000E45C __tryblocktable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000E45C                                         ; DATA XREF: .xdata$x:0000E480o
.xdata$x:0000E45D                 db    0
.xdata$x:0000E45E                 db    0
.xdata$x:0000E45F                 db    0
.xdata$x:0000E460                 db    0
.xdata$x:0000E461                 db    0
.xdata$x:0000E462                 db    0
.xdata$x:0000E463                 db    0
.xdata$x:0000E464                 db    1
.xdata$x:0000E465                 db    0
.xdata$x:0000E466                 db    0
.xdata$x:0000E467                 db    0
.xdata$x:0000E468                 db    1
.xdata$x:0000E469                 db    0
.xdata$x:0000E46A                 db    0
.xdata$x:0000E46B                 db    0
.xdata$x:0000E46C                 dd offset __catchsym$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000E470 __ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000E470                                         ; DATA XREF: __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000E471                 db    5
.xdata$x:0000E472                 db  93h ; ô
.xdata$x:0000E473                 db  19h
.xdata$x:0000E474                 db    2
.xdata$x:0000E475                 db    0
.xdata$x:0000E476                 db    0
.xdata$x:0000E477                 db    0
.xdata$x:0000E478                 dd offset __unwindtable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E47C                 db    1
.xdata$x:0000E47D                 db    0
.xdata$x:0000E47E                 db    0
.xdata$x:0000E47F                 db    0
.xdata$x:0000E480                 dd offset __tryblocktable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E484                 db    0
.xdata$x:0000E485                 db    0
.xdata$x:0000E486                 db    0
.xdata$x:0000E487                 db    0
.xdata$x:0000E488                 db    0
.xdata$x:0000E489                 db    0
.xdata$x:0000E48A                 db    0
.xdata$x:0000E48B                 db    0
.xdata$x:0000E48C                 db    0
.xdata$x:0000E48D                 db    0
.xdata$x:0000E48E                 db    0
.xdata$x:0000E48F                 db    0
.xdata$x:0000E490                 db    0
.xdata$x:0000E491                 db    0
.xdata$x:0000E492                 db    0
.xdata$x:0000E493                 db    0
.xdata$x:0000E493 _xdata$x        ends
.xdata$x:0000E493
.xdata$x:0000E494 ; ===========================================================================
.xdata$x:0000E494
.xdata$x:0000E494 ; Segment type: Pure data
.xdata$x:0000E494 ; Segment permissions: Read
.xdata$x:0000E494 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E494                 assume cs:_xdata$x
.xdata$x:0000E494                 ;org 0E494h
.xdata$x:0000E494 ; COMDAT (pick associative to section at 40F8)
.xdata$x:0000E494 __catchsym$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000E494                                         ; DATA XREF: .xdata$x:0000E4C4o
.xdata$x:0000E495                 db    0
.xdata$x:0000E496                 db    0
.xdata$x:0000E497                 db    0
.xdata$x:0000E498                 db    0
.xdata$x:0000E499                 db    0
.xdata$x:0000E49A                 db    0
.xdata$x:0000E49B                 db    0
.xdata$x:0000E49C                 db    0
.xdata$x:0000E49D                 db    0
.xdata$x:0000E49E                 db    0
.xdata$x:0000E49F                 db    0
.xdata$x:0000E4A0                 dd offset __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000E4A4 __unwindtable$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000E4A4                                         ; DATA XREF: .xdata$x:0000E4D0o
.xdata$x:0000E4A5                 db 0FFh
.xdata$x:0000E4A6                 db 0FFh
.xdata$x:0000E4A7                 db 0FFh
.xdata$x:0000E4A8                 db    0
.xdata$x:0000E4A9                 db    0
.xdata$x:0000E4AA                 db    0
.xdata$x:0000E4AB                 db    0
.xdata$x:0000E4AC                 db 0FFh
.xdata$x:0000E4AD                 db 0FFh
.xdata$x:0000E4AE                 db 0FFh
.xdata$x:0000E4AF                 db 0FFh
.xdata$x:0000E4B0                 db    0
.xdata$x:0000E4B1                 db    0
.xdata$x:0000E4B2                 db    0
.xdata$x:0000E4B3                 db    0
.xdata$x:0000E4B4 __tryblocktable$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000E4B4                                         ; DATA XREF: .xdata$x:0000E4D8o
.xdata$x:0000E4B5                 db    0
.xdata$x:0000E4B6                 db    0
.xdata$x:0000E4B7                 db    0
.xdata$x:0000E4B8                 db    0
.xdata$x:0000E4B9                 db    0
.xdata$x:0000E4BA                 db    0
.xdata$x:0000E4BB                 db    0
.xdata$x:0000E4BC                 db    1
.xdata$x:0000E4BD                 db    0
.xdata$x:0000E4BE                 db    0
.xdata$x:0000E4BF                 db    0
.xdata$x:0000E4C0                 db    1
.xdata$x:0000E4C1                 db    0
.xdata$x:0000E4C2                 db    0
.xdata$x:0000E4C3                 db    0
.xdata$x:0000E4C4                 dd offset __catchsym$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000E4C8 __ehfuncinfo$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000E4C8                                         ; DATA XREF: __ehhandler$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000E4C9                 db    5
.xdata$x:0000E4CA                 db  93h ; ô
.xdata$x:0000E4CB                 db  19h
.xdata$x:0000E4CC                 db    2
.xdata$x:0000E4CD                 db    0
.xdata$x:0000E4CE                 db    0
.xdata$x:0000E4CF                 db    0
.xdata$x:0000E4D0                 dd offset __unwindtable$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E4D4                 db    1
.xdata$x:0000E4D5                 db    0
.xdata$x:0000E4D6                 db    0
.xdata$x:0000E4D7                 db    0
.xdata$x:0000E4D8                 dd offset __tryblocktable$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E4DC                 db    0
.xdata$x:0000E4DD                 db    0
.xdata$x:0000E4DE                 db    0
.xdata$x:0000E4DF                 db    0
.xdata$x:0000E4E0                 db    0
.xdata$x:0000E4E1                 db    0
.xdata$x:0000E4E2                 db    0
.xdata$x:0000E4E3                 db    0
.xdata$x:0000E4E4                 db    0
.xdata$x:0000E4E5                 db    0
.xdata$x:0000E4E6                 db    0
.xdata$x:0000E4E7                 db    0
.xdata$x:0000E4E8                 db    0
.xdata$x:0000E4E9                 db    0
.xdata$x:0000E4EA                 db    0
.xdata$x:0000E4EB                 db    0
.xdata$x:0000E4EB _xdata$x        ends
.xdata$x:0000E4EB
.xdata$x:0000E4EC ; ===========================================================================
.xdata$x:0000E4EC
.xdata$x:0000E4EC ; Segment type: Pure data
.xdata$x:0000E4EC ; Segment permissions: Read
.xdata$x:0000E4EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E4EC                 assume cs:_xdata$x
.xdata$x:0000E4EC                 ;org 0E4ECh
.xdata$x:0000E4EC ; COMDAT (pick associative to section at 3FB8)
.xdata$x:0000E4EC __catchsym$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000E4EC                                         ; DATA XREF: .xdata$x:0000E51Co
.xdata$x:0000E4ED                 db    0
.xdata$x:0000E4EE                 db    0
.xdata$x:0000E4EF                 db    0
.xdata$x:0000E4F0                 db    0
.xdata$x:0000E4F1                 db    0
.xdata$x:0000E4F2                 db    0
.xdata$x:0000E4F3                 db    0
.xdata$x:0000E4F4                 db    0
.xdata$x:0000E4F5                 db    0
.xdata$x:0000E4F6                 db    0
.xdata$x:0000E4F7                 db    0
.xdata$x:0000E4F8                 dd offset __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000E4FC __unwindtable$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000E4FC                                         ; DATA XREF: .xdata$x:0000E528o
.xdata$x:0000E4FD                 db 0FFh
.xdata$x:0000E4FE                 db 0FFh
.xdata$x:0000E4FF                 db 0FFh
.xdata$x:0000E500                 db    0
.xdata$x:0000E501                 db    0
.xdata$x:0000E502                 db    0
.xdata$x:0000E503                 db    0
.xdata$x:0000E504                 db 0FFh
.xdata$x:0000E505                 db 0FFh
.xdata$x:0000E506                 db 0FFh
.xdata$x:0000E507                 db 0FFh
.xdata$x:0000E508                 db    0
.xdata$x:0000E509                 db    0
.xdata$x:0000E50A                 db    0
.xdata$x:0000E50B                 db    0
.xdata$x:0000E50C __tryblocktable$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000E50C                                         ; DATA XREF: .xdata$x:0000E530o
.xdata$x:0000E50D                 db    0
.xdata$x:0000E50E                 db    0
.xdata$x:0000E50F                 db    0
.xdata$x:0000E510                 db    0
.xdata$x:0000E511                 db    0
.xdata$x:0000E512                 db    0
.xdata$x:0000E513                 db    0
.xdata$x:0000E514                 db    1
.xdata$x:0000E515                 db    0
.xdata$x:0000E516                 db    0
.xdata$x:0000E517                 db    0
.xdata$x:0000E518                 db    1
.xdata$x:0000E519                 db    0
.xdata$x:0000E51A                 db    0
.xdata$x:0000E51B                 db    0
.xdata$x:0000E51C                 dd offset __catchsym$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000E520 __ehfuncinfo$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000E520                                         ; DATA XREF: __ehhandler$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000E521                 db    5
.xdata$x:0000E522                 db  93h ; ô
.xdata$x:0000E523                 db  19h
.xdata$x:0000E524                 db    2
.xdata$x:0000E525                 db    0
.xdata$x:0000E526                 db    0
.xdata$x:0000E527                 db    0
.xdata$x:0000E528                 dd offset __unwindtable$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E52C                 db    1
.xdata$x:0000E52D                 db    0
.xdata$x:0000E52E                 db    0
.xdata$x:0000E52F                 db    0
.xdata$x:0000E530                 dd offset __tryblocktable$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E534                 db    0
.xdata$x:0000E535                 db    0
.xdata$x:0000E536                 db    0
.xdata$x:0000E537                 db    0
.xdata$x:0000E538                 db    0
.xdata$x:0000E539                 db    0
.xdata$x:0000E53A                 db    0
.xdata$x:0000E53B                 db    0
.xdata$x:0000E53C                 db    0
.xdata$x:0000E53D                 db    0
.xdata$x:0000E53E                 db    0
.xdata$x:0000E53F                 db    0
.xdata$x:0000E540                 db    0
.xdata$x:0000E541                 db    0
.xdata$x:0000E542                 db    0
.xdata$x:0000E543                 db    0
.xdata$x:0000E543 _xdata$x        ends
.xdata$x:0000E543
.xdata$x:0000E544 ; ===========================================================================
.xdata$x:0000E544
.xdata$x:0000E544 ; Segment type: Pure data
.xdata$x:0000E544 ; Segment permissions: Read
.xdata$x:0000E544 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E544                 assume cs:_xdata$x
.xdata$x:0000E544                 ;org 0E544h
.xdata$x:0000E544 ; COMDAT (pick associative to section at 4388)
.xdata$x:0000E544 __catchsym$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000E544                                         ; DATA XREF: .xdata$x:0000E574o
.xdata$x:0000E545                 db    0
.xdata$x:0000E546                 db    0
.xdata$x:0000E547                 db    0
.xdata$x:0000E548                 db    0
.xdata$x:0000E549                 db    0
.xdata$x:0000E54A                 db    0
.xdata$x:0000E54B                 db    0
.xdata$x:0000E54C                 db    0
.xdata$x:0000E54D                 db    0
.xdata$x:0000E54E                 db    0
.xdata$x:0000E54F                 db    0
.xdata$x:0000E550                 dd offset __catch$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000E554 __unwindtable$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000E554                                         ; DATA XREF: .xdata$x:0000E580o
.xdata$x:0000E555                 db 0FFh
.xdata$x:0000E556                 db 0FFh
.xdata$x:0000E557                 db 0FFh
.xdata$x:0000E558                 db    0
.xdata$x:0000E559                 db    0
.xdata$x:0000E55A                 db    0
.xdata$x:0000E55B                 db    0
.xdata$x:0000E55C                 db 0FFh
.xdata$x:0000E55D                 db 0FFh
.xdata$x:0000E55E                 db 0FFh
.xdata$x:0000E55F                 db 0FFh
.xdata$x:0000E560                 db    0
.xdata$x:0000E561                 db    0
.xdata$x:0000E562                 db    0
.xdata$x:0000E563                 db    0
.xdata$x:0000E564 __tryblocktable$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000E564                                         ; DATA XREF: .xdata$x:0000E588o
.xdata$x:0000E565                 db    0
.xdata$x:0000E566                 db    0
.xdata$x:0000E567                 db    0
.xdata$x:0000E568                 db    0
.xdata$x:0000E569                 db    0
.xdata$x:0000E56A                 db    0
.xdata$x:0000E56B                 db    0
.xdata$x:0000E56C                 db    1
.xdata$x:0000E56D                 db    0
.xdata$x:0000E56E                 db    0
.xdata$x:0000E56F                 db    0
.xdata$x:0000E570                 db    1
.xdata$x:0000E571                 db    0
.xdata$x:0000E572                 db    0
.xdata$x:0000E573                 db    0
.xdata$x:0000E574                 dd offset __catchsym$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000E578 __ehfuncinfo$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000E578                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000E579                 db    5
.xdata$x:0000E57A                 db  93h ; ô
.xdata$x:0000E57B                 db  19h
.xdata$x:0000E57C                 db    2
.xdata$x:0000E57D                 db    0
.xdata$x:0000E57E                 db    0
.xdata$x:0000E57F                 db    0
.xdata$x:0000E580                 dd offset __unwindtable$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E584                 db    1
.xdata$x:0000E585                 db    0
.xdata$x:0000E586                 db    0
.xdata$x:0000E587                 db    0
.xdata$x:0000E588                 dd offset __tryblocktable$??$_Uninit_move@PAUTreeParams@@PAU1@V?$allocator@UTreeParams@@@std@@U1@@std@@YAPAUTreeParams@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeParams@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000E58C                 db    0
.xdata$x:0000E58D                 db    0
.xdata$x:0000E58E                 db    0
.xdata$x:0000E58F                 db    0
.xdata$x:0000E590                 db    0
.xdata$x:0000E591                 db    0
.xdata$x:0000E592                 db    0
.xdata$x:0000E593                 db    0
.xdata$x:0000E594                 db    0
.xdata$x:0000E595                 db    0
.xdata$x:0000E596                 db    0
.xdata$x:0000E597                 db    0
.xdata$x:0000E598                 db    0
.xdata$x:0000E599                 db    0
.xdata$x:0000E59A                 db    0
.xdata$x:0000E59B                 db    0
.xdata$x:0000E59B _xdata$x        ends
.xdata$x:0000E59B
.xdata$x:0000E59C ; ===========================================================================
.xdata$x:0000E59C
.xdata$x:0000E59C ; Segment type: Pure data
.xdata$x:0000E59C ; Segment permissions: Read
.xdata$x:0000E59C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E59C                 assume cs:_xdata$x
.xdata$x:0000E59C                 ;org 0E59Ch
.xdata$x:0000E59C ; COMDAT (pick associative to section at 4D9C)
.xdata$x:0000E59C __unwindtable$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z db 0FFh
.xdata$x:0000E59C                                         ; DATA XREF: .xdata$x:0000E5ACo
.xdata$x:0000E59D                 db 0FFh
.xdata$x:0000E59E                 db 0FFh
.xdata$x:0000E59F                 db 0FFh
.xdata$x:0000E5A0                 dd offset __unwindfunclet$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z$0
.xdata$x:0000E5A4 __ehfuncinfo$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z db  22h ; "
.xdata$x:0000E5A4                                         ; DATA XREF: __ehhandler$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z+11o
.xdata$x:0000E5A5                 db    5
.xdata$x:0000E5A6                 db  93h ; ô
.xdata$x:0000E5A7                 db  19h
.xdata$x:0000E5A8                 db    1
.xdata$x:0000E5A9                 db    0
.xdata$x:0000E5AA                 db    0
.xdata$x:0000E5AB                 db    0
.xdata$x:0000E5AC                 dd offset __unwindtable$??$construct@UTreeStateNode@@AAU1@@?$allocator@UTreeStateNode@@@std@@QAEXPAUTreeStateNode@@AAU2@@Z
.xdata$x:0000E5B0                 db    0
.xdata$x:0000E5B1                 db    0
.xdata$x:0000E5B2                 db    0
.xdata$x:0000E5B3                 db    0
.xdata$x:0000E5B4                 db    0
.xdata$x:0000E5B5                 db    0
.xdata$x:0000E5B6                 db    0
.xdata$x:0000E5B7                 db    0
.xdata$x:0000E5B8                 db    0
.xdata$x:0000E5B9                 db    0
.xdata$x:0000E5BA                 db    0
.xdata$x:0000E5BB                 db    0
.xdata$x:0000E5BC                 db    0
.xdata$x:0000E5BD                 db    0
.xdata$x:0000E5BE                 db    0
.xdata$x:0000E5BF                 db    0
.xdata$x:0000E5C0                 db    0
.xdata$x:0000E5C1                 db    0
.xdata$x:0000E5C2                 db    0
.xdata$x:0000E5C3                 db    0
.xdata$x:0000E5C4                 db    0
.xdata$x:0000E5C5                 db    0
.xdata$x:0000E5C6                 db    0
.xdata$x:0000E5C7                 db    0
.xdata$x:0000E5C7 _xdata$x        ends
.xdata$x:0000E5C7
.xdata$x:0000E5C8 ; ===========================================================================
.xdata$x:0000E5C8
.xdata$x:0000E5C8 ; Segment type: Pure data
.xdata$x:0000E5C8 ; Segment permissions: Read
.xdata$x:0000E5C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E5C8                 assume cs:_xdata$x
.xdata$x:0000E5C8                 ;org 0E5C8h
.xdata$x:0000E5C8 ; COMDAT (pick associative to section at 4C9C)
.xdata$x:0000E5C8 __unwindtable$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z db 0FFh
.xdata$x:0000E5C8                                         ; DATA XREF: .xdata$x:0000E5D8o
.xdata$x:0000E5C9                 db 0FFh
.xdata$x:0000E5CA                 db 0FFh
.xdata$x:0000E5CB                 db 0FFh
.xdata$x:0000E5CC                 dd offset __unwindfunclet$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z$0
.xdata$x:0000E5D0 __ehfuncinfo$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z db  22h ; "
.xdata$x:0000E5D0                                         ; DATA XREF: __ehhandler$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z+11o
.xdata$x:0000E5D1                 db    5
.xdata$x:0000E5D2                 db  93h ; ô
.xdata$x:0000E5D3                 db  19h
.xdata$x:0000E5D4                 db    1
.xdata$x:0000E5D5                 db    0
.xdata$x:0000E5D6                 db    0
.xdata$x:0000E5D7                 db    0
.xdata$x:0000E5D8                 dd offset __unwindtable$??$construct@UTreeParams@@U1@@?$allocator@UTreeParams@@@std@@QAEXPAUTreeParams@@$$QAU2@@Z
.xdata$x:0000E5DC                 db    0
.xdata$x:0000E5DD                 db    0
.xdata$x:0000E5DE                 db    0
.xdata$x:0000E5DF                 db    0
.xdata$x:0000E5E0                 db    0
.xdata$x:0000E5E1                 db    0
.xdata$x:0000E5E2                 db    0
.xdata$x:0000E5E3                 db    0
.xdata$x:0000E5E4                 db    0
.xdata$x:0000E5E5                 db    0
.xdata$x:0000E5E6                 db    0
.xdata$x:0000E5E7                 db    0
.xdata$x:0000E5E8                 db    0
.xdata$x:0000E5E9                 db    0
.xdata$x:0000E5EA                 db    0
.xdata$x:0000E5EB                 db    0
.xdata$x:0000E5EC                 db    0
.xdata$x:0000E5ED                 db    0
.xdata$x:0000E5EE                 db    0
.xdata$x:0000E5EF                 db    0
.xdata$x:0000E5F0                 db    0
.xdata$x:0000E5F1                 db    0
.xdata$x:0000E5F2                 db    0
.xdata$x:0000E5F3                 db    0
.xdata$x:0000E5F3 _xdata$x        ends
.xdata$x:0000E5F3
.rdata:0000E5F4 ; ===========================================================================
.rdata:0000E5F4
.rdata:0000E5F4 ; Segment type: Pure data
.rdata:0000E5F4 ; Segment permissions: Read
.rdata:0000E5F4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E5F4 _rdata          segment para public 'DATA' use32
.rdata:0000E5F4                 assume cs:_rdata
.rdata:0000E5F4                 ;org 0E5F4h
.rdata:0000E5F4 ; COMDAT (pick any)
.rdata:0000E5F4                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000E5F4 ; wchar_t `string'
.rdata:0000E5F4 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000E5F4                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:0000E5F4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000E5F4                 unicode 0, <clude\xutility>,0
.rdata:0000E5F4 _rdata          ends
.rdata:0000E5F4
.rdata:0000E684 ; ===========================================================================
.rdata:0000E684
.rdata:0000E684 ; Segment type: Pure data
.rdata:0000E684 ; Segment permissions: Read
.rdata:0000E684 _rdata          segment dword public 'DATA' use32
.rdata:0000E684                 assume cs:_rdata
.rdata:0000E684                 ;org 0E684h
.rdata:0000E684 ; COMDAT (pick any)
.rdata:0000E684                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:0000E684 ; wchar_t `string'
.rdata:0000E684 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:0000E684                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:0000E684                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:0000E6B6                 align 4
.rdata:0000E6B6 _rdata          ends
.rdata:0000E6B6
.rdata:0000E6B8 ; ===========================================================================
.rdata:0000E6B8
.rdata:0000E6B8 ; Segment type: Pure data
.rdata:0000E6B8 ; Segment permissions: Read
.rdata:0000E6B8 _rdata          segment dword public 'DATA' use32
.rdata:0000E6B8                 assume cs:_rdata
.rdata:0000E6B8                 ;org 0E6B8h
.rdata:0000E6B8 ; COMDAT (pick largest)
.rdata:0000E6B8                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000E6BC                 public ??_7error_category@std@@6B@
.rdata:0000E6BC ; const std::error_category::`vftable'
.rdata:0000E6BC ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000E6BC                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000E6BC                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000E6BC                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000E6C0                 dd offset __purecall
.rdata:0000E6C4                 dd offset __purecall
.rdata:0000E6C8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E6CC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E6D0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E6D0 _rdata          ends
.rdata:0000E6D0
.rdata:0000E6D4 ; ===========================================================================
.rdata:0000E6D4
.rdata:0000E6D4 ; Segment type: Pure data
.rdata:0000E6D4 ; Segment permissions: Read
.rdata:0000E6D4 _rdata          segment dword public 'DATA' use32
.rdata:0000E6D4                 assume cs:_rdata
.rdata:0000E6D4                 ;org 0E6D4h
.rdata:0000E6D4 ; COMDAT (pick largest)
.rdata:0000E6D4                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000E6D8                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000E6D8 ; const std::_Generic_error_category::`vftable'
.rdata:0000E6D8 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000E6D8                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000E6D8                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000E6DC                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000E6E0                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000E6E4                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E6E8                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E6EC                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E6EC _rdata          ends
.rdata:0000E6EC
.rdata:0000E6F0 ; ===========================================================================
.rdata:0000E6F0
.rdata:0000E6F0 ; Segment type: Pure data
.rdata:0000E6F0 ; Segment permissions: Read
.rdata:0000E6F0 _rdata          segment dword public 'DATA' use32
.rdata:0000E6F0                 assume cs:_rdata
.rdata:0000E6F0                 ;org 0E6F0h
.rdata:0000E6F0 ; COMDAT (pick any)
.rdata:0000E6F0                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000E6F0 ; `string'
.rdata:0000E6F0 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000E6F0                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000E6F0 _rdata          ends
.rdata:0000E6F0
.rdata:0000E6F8 ; ===========================================================================
.rdata:0000E6F8
.rdata:0000E6F8 ; Segment type: Pure data
.rdata:0000E6F8 ; Segment permissions: Read
.rdata:0000E6F8 _rdata          segment dword public 'DATA' use32
.rdata:0000E6F8                 assume cs:_rdata
.rdata:0000E6F8                 ;org 0E6F8h
.rdata:0000E6F8 ; COMDAT (pick any)
.rdata:0000E6F8                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000E6F8 ; `string'
.rdata:0000E6F8 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000E6F8                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_BC4Co
.rdata:0000E6F8                                         ; std::_System_error_category::message(int):loc_BDC8o
.rdata:0000E706                 align 4
.rdata:0000E706 _rdata          ends
.rdata:0000E706
.rdata:0000E708 ; ===========================================================================
.rdata:0000E708
.rdata:0000E708 ; Segment type: Pure data
.rdata:0000E708 ; Segment permissions: Read
.rdata:0000E708 _rdata          segment dword public 'DATA' use32
.rdata:0000E708                 assume cs:_rdata
.rdata:0000E708                 ;org 0E708h
.rdata:0000E708 ; COMDAT (pick largest)
.rdata:0000E708                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000E70C                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000E70C ; const std::_Iostream_error_category::`vftable'
.rdata:0000E70C ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000E70C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000E70C                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000E710                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000E714                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000E718                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E71C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E720                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E720 _rdata          ends
.rdata:0000E720
.rdata:0000E724 ; ===========================================================================
.rdata:0000E724
.rdata:0000E724 ; Segment type: Pure data
.rdata:0000E724 ; Segment permissions: Read
.rdata:0000E724 _rdata          segment dword public 'DATA' use32
.rdata:0000E724                 assume cs:_rdata
.rdata:0000E724                 ;org 0E724h
.rdata:0000E724 ; COMDAT (pick any)
.rdata:0000E724                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000E724 ; `string'
.rdata:0000E724 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000E724                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000E72D                 align 10h
.rdata:0000E72D _rdata          ends
.rdata:0000E72D
.rdata:0000E730 ; ===========================================================================
.rdata:0000E730
.rdata:0000E730 ; Segment type: Pure data
.rdata:0000E730 ; Segment permissions: Read
.rdata:0000E730 _rdata          segment dword public 'DATA' use32
.rdata:0000E730                 assume cs:_rdata
.rdata:0000E730                 ;org 0E730h
.rdata:0000E730 ; COMDAT (pick any)
.rdata:0000E730                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000E730 ; char `string'[]
.rdata:0000E730 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000E730                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000E746                 align 4
.rdata:0000E746 _rdata          ends
.rdata:0000E746
.rdata:0000E748 ; ===========================================================================
.rdata:0000E748
.rdata:0000E748 ; Segment type: Pure data
.rdata:0000E748 ; Segment permissions: Read
.rdata:0000E748 _rdata          segment dword public 'DATA' use32
.rdata:0000E748                 assume cs:_rdata
.rdata:0000E748                 ;org 0E748h
.rdata:0000E748 ; COMDAT (pick largest)
.rdata:0000E748                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000E74C                 public ??_7_System_error_category@std@@6B@
.rdata:0000E74C ; const std::_System_error_category::`vftable'
.rdata:0000E74C ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000E74C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000E74C                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000E750                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000E754                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000E758                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000E75C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E760                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E760 _rdata          ends
.rdata:0000E760
.rdata:0000E764 ; ===========================================================================
.rdata:0000E764
.rdata:0000E764 ; Segment type: Pure data
.rdata:0000E764 ; Segment permissions: Read
.rdata:0000E764 _rdata          segment dword public 'DATA' use32
.rdata:0000E764                 assume cs:_rdata
.rdata:0000E764                 ;org 0E764h
.rdata:0000E764 ; COMDAT (pick any)
.rdata:0000E764                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000E764 ; `string'
.rdata:0000E764 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000E764                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000E76B                 align 4
.rdata:0000E76B _rdata          ends
.rdata:0000E76B
.bss:0000E76C ; ===========================================================================
.bss:0000E76C
.bss:0000E76C ; Segment type: Uninitialized
.bss:0000E76C ; Segment permissions: Read/Write
.bss:0000E76C _bss            segment dword public 'BSS' use32
.bss:0000E76C                 assume cs:_bss
.bss:0000E76C                 ;org 0E76Ch
.bss:0000E76C ; COMDAT (pick any)
.bss:0000E76C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E76C                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000E76C ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000E76C ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000E76C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000E76C                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000E76D                 db    ? ;
.bss:0000E76E                 db    ? ;
.bss:0000E76F                 db    ? ;
.bss:0000E76F _bss            ends
.bss:0000E76F
.bss:0000E770 ; ===========================================================================
.bss:0000E770
.bss:0000E770 ; Segment type: Uninitialized
.bss:0000E770 ; Segment permissions: Read/Write
.bss:0000E770 _bss            segment dword public 'BSS' use32
.bss:0000E770                 assume cs:_bss
.bss:0000E770                 ;org 0E770h
.bss:0000E770 ; COMDAT (pick any)
.bss:0000E770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E770                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000E770 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000E770 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000E770                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000E770                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000E771                 db    ? ;
.bss:0000E772                 db    ? ;
.bss:0000E773                 db    ? ;
.bss:0000E773 _bss            ends
.bss:0000E773
.bss:0000E774 ; ===========================================================================
.bss:0000E774
.bss:0000E774 ; Segment type: Uninitialized
.bss:0000E774 ; Segment permissions: Read/Write
.bss:0000E774 _bss            segment dword public 'BSS' use32
.bss:0000E774                 assume cs:_bss
.bss:0000E774                 ;org 0E774h
.bss:0000E774 ; COMDAT (pick any)
.bss:0000E774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E774                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000E774 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000E774 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000E774                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000E774                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000E775                 db    ? ;
.bss:0000E776                 db    ? ;
.bss:0000E777                 db    ? ;
.bss:0000E777 _bss            ends
.bss:0000E777
.rdata:0000E778 ; ===========================================================================
.rdata:0000E778
.rdata:0000E778 ; Segment type: Pure data
.rdata:0000E778 ; Segment permissions: Read
.rdata:0000E778 _rdata          segment dword public 'DATA' use32
.rdata:0000E778                 assume cs:_rdata
.rdata:0000E778                 ;org 0E778h
.rdata:0000E778 ; COMDAT (pick any)
.rdata:0000E778                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000E778 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000E778 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000E778                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:0000E778                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7r ...
.rdata:0000E778 _rdata          ends
.rdata:0000E778
.bss:0000E77C ; ===========================================================================
.bss:0000E77C
.bss:0000E77C ; Segment type: Uninitialized
.bss:0000E77C ; Segment permissions: Read/Write
.bss:0000E77C _bss            segment dword public 'BSS' use32
.bss:0000E77C                 assume cs:_bss
.bss:0000E77C                 ;org 0E77Ch
.bss:0000E77C ; COMDAT (pick any)
.bss:0000E77C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E77C                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000E77C ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000E77C ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000E77C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000E77D                 db    ? ;
.bss:0000E77E                 db    ? ;
.bss:0000E77F                 db    ? ;
.bss:0000E77F _bss            ends
.bss:0000E77F
.bss:0000E780 ; ===========================================================================
.bss:0000E780
.bss:0000E780 ; Segment type: Uninitialized
.bss:0000E780 ; Segment permissions: Read/Write
.bss:0000E780 _bss            segment dword public 'BSS' use32
.bss:0000E780                 assume cs:_bss
.bss:0000E780                 ;org 0E780h
.bss:0000E780 ; COMDAT (pick any)
.bss:0000E780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E780                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000E780 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000E780 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000E780                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000E781                 db    ? ;
.bss:0000E782                 db    ? ;
.bss:0000E783                 db    ? ;
.bss:0000E783 _bss            ends
.bss:0000E783
.rdata:0000E784 ; ===========================================================================
.rdata:0000E784
.rdata:0000E784 ; Segment type: Pure data
.rdata:0000E784 ; Segment permissions: Read
.rdata:0000E784 _rdata          segment dword public 'DATA' use32
.rdata:0000E784                 assume cs:_rdata
.rdata:0000E784                 ;org 0E784h
.rdata:0000E784 ; COMDAT (pick any)
.rdata:0000E784                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:0000E784 ; wchar_t `string'
.rdata:0000E784 ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *):loc_66FFo
.rdata:0000E784                                         ; AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *):loc_6726o ...
.rdata:0000E786                 align 4
.rdata:0000E786 _rdata          ends
.rdata:0000E786
.bss:0000E788 ; ===========================================================================
.bss:0000E788
.bss:0000E788 ; Segment type: Uninitialized
.bss:0000E788 ; Segment permissions: Read/Write
.bss:0000E788 _bss            segment dword public 'BSS' use32
.bss:0000E788                 assume cs:_bss
.bss:0000E788                 ;org 0E788h
.bss:0000E788 ; COMDAT (pick any)
.bss:0000E788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E788 ; struct HBRUSH__ * `protected: virtual int __stdcall FunctionListPanel::run_dlgProc(unsigned int, unsigned int, long)'::`5'::hBrushBackground
.bss:0000E788 ?hBrushBackground@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4PAUHBRUSH__@@A dd ?
.bss:0000E788                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+C9w
.bss:0000E788                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+16Fr
.bss:0000E788 _bss            ends
.bss:0000E788
.bss:0000E78C ; ===========================================================================
.bss:0000E78C
.bss:0000E78C ; Segment type: Uninitialized
.bss:0000E78C ; Segment permissions: Read/Write
.bss:0000E78C _bss            segment dword public 'BSS' use32
.bss:0000E78C                 assume cs:_bss
.bss:0000E78C                 ;org 0E78Ch
.bss:0000E78C ; COMDAT (pick any)
.bss:0000E78C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E78C ?$S1@?4??run_dlgProc@FunctionListPanel@@MAGHIIJ@Z@4IA dd ?
.bss:0000E78C                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long):loc_1D15r
.bss:0000E78C                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+A8r ...
.bss:0000E78C _bss            ends
.bss:0000E78C
.rdata:0000E790 ; ===========================================================================
.rdata:0000E790
.rdata:0000E790 ; Segment type: Pure data
.rdata:0000E790 ; Segment permissions: Read
.rdata:0000E790 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E790 _rdata          segment para public 'DATA' use32
.rdata:0000E790                 assume cs:_rdata
.rdata:0000E790                 ;org 0E790h
.rdata:0000E790 ; COMDAT (pick any)
.rdata:0000E790                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000E790 ; wchar_t `string'
.rdata:0000E790 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000E790                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:0000E790                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:0000E790                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000E790                 unicode 0, <clude\xstring>,0
.rdata:0000E81E                 align 10h
.rdata:0000E81E _rdata          ends
.rdata:0000E81E
.bss:0000E820 ; ===========================================================================
.bss:0000E820
.bss:0000E820 ; Segment type: Uninitialized
.bss:0000E820 ; Segment permissions: Read/Write
.bss:0000E820 _bss            segment dword public 'BSS' use32
.bss:0000E820                 assume cs:_bss
.bss:0000E820                 ;org 0E820h
.bss:0000E820 ; COMDAT (pick any)
.bss:0000E820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E820                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000E820 ; std::locale::id std::numpunct<char>::id
.bss:0000E820 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000E820                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000E821                 db    ? ;
.bss:0000E822                 db    ? ;
.bss:0000E823                 db    ? ;
.bss:0000E823 _bss            ends
.bss:0000E823
.bss:0000E824 ; ===========================================================================
.bss:0000E824
.bss:0000E824 ; Segment type: Uninitialized
.bss:0000E824 ; Segment permissions: Read/Write
.bss:0000E824 _bss            segment dword public 'BSS' use32
.bss:0000E824                 assume cs:_bss
.bss:0000E824                 ;org 0E824h
.bss:0000E824 ; COMDAT (pick any)
.bss:0000E824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E824                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000E824 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000E824 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000E824                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000E825                 db    ? ;
.bss:0000E826                 db    ? ;
.bss:0000E827                 db    ? ;
.bss:0000E827 _bss            ends
.bss:0000E827
.rdata:0000E828 ; ===========================================================================
.rdata:0000E828
.rdata:0000E828 ; Segment type: Pure data
.rdata:0000E828 ; Segment permissions: Read
.rdata:0000E828 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E828 _rdata          segment para public 'DATA' use32
.rdata:0000E828                 assume cs:_rdata
.rdata:0000E828                 ;org 0E828h
.rdata:0000E828 ; COMDAT (pick any)
.rdata:0000E828                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000E828 ; wchar_t `string'
.rdata:0000E828 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000E828                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+19o
.rdata:0000E828                                         ; std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+49o ...
.rdata:0000E828                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000E828                 unicode 0, <clude\vector>,0
.rdata:0000E828 _rdata          ends
.rdata:0000E828
.rdata:0000E8B4 ; ===========================================================================
.rdata:0000E8B4
.rdata:0000E8B4 ; Segment type: Pure data
.rdata:0000E8B4 ; Segment permissions: Read
.rdata:0000E8B4 _rdata          segment dword public 'DATA' use32
.rdata:0000E8B4                 assume cs:_rdata
.rdata:0000E8B4                 ;org 0E8B4h
.rdata:0000E8B4 ; COMDAT (pick any)
.rdata:0000E8B4                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000E8B4 ; wchar_t `string'
.rdata:0000E8B4 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000E8B4                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+1Eo
.rdata:0000E8B4                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+1Eo ...
.rdata:0000E8B4                 unicode 0, <vector subscript out of range>,0
.rdata:0000E8B4 _rdata          ends
.rdata:0000E8B4
.rdata:0000E8F0 ; ===========================================================================
.rdata:0000E8F0
.rdata:0000E8F0 ; Segment type: Pure data
.rdata:0000E8F0 ; Segment permissions: Read
.rdata:0000E8F0 _rdata          segment dword public 'DATA' use32
.rdata:0000E8F0                 assume cs:_rdata
.rdata:0000E8F0                 ;org 0E8F0h
.rdata:0000E8F0 ; COMDAT (pick any)
.rdata:0000E8F0                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:0000E8F0 ; `string'
.rdata:0000E8F0 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:0000E8F0                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+2Bo
.rdata:0000E8F0                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+2Bo ...
.rdata:0000E8F0 _rdata          ends
.rdata:0000E8F0
.rdata:0000E914 ; ===========================================================================
.rdata:0000E914
.rdata:0000E914 ; Segment type: Pure data
.rdata:0000E914 ; Segment permissions: Read
.rdata:0000E914 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E914 _rdata          segment para public 'DATA' use32
.rdata:0000E914                 assume cs:_rdata
.rdata:0000E914                 ;org 0E914h
.rdata:0000E914 ; COMDAT (pick any)
.rdata:0000E914                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:0000E914 ; `string'
.rdata:0000E914 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:0000E914                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint):loc_82F4o
.rdata:0000E914                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint):loc_8380o ...
.rdata:0000E914                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000E96A                 align 4
.rdata:0000E96A _rdata          ends
.rdata:0000E96A
.rdata:0000E96C ; ===========================================================================
.rdata:0000E96C
.rdata:0000E96C ; Segment type: Pure data
.rdata:0000E96C ; Segment permissions: Read
.rdata:0000E96C _rdata          segment dword public 'DATA' use32
.rdata:0000E96C                 assume cs:_rdata
.rdata:0000E96C                 ;org 0E96Ch
.rdata:0000E96C ; COMDAT (pick any)
.rdata:0000E96C                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000E96C ; `string'
.rdata:0000E96C ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000E96C                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+3Do
.rdata:0000E96C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+3Do ...
.rdata:0000E96C                 unicode 0, <%s>,0
.rdata:0000E972                 align 4
.rdata:0000E972 _rdata          ends
.rdata:0000E972
.rdata:0000E974 ; ===========================================================================
.rdata:0000E974
.rdata:0000E974 ; Segment type: Pure data
.rdata:0000E974 ; Segment permissions: Read
.rdata:0000E974 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E974 _rdata          segment para public 'DATA' use32
.rdata:0000E974                 assume cs:_rdata
.rdata:0000E974                 ;org 0E974h
.rdata:0000E974 ; COMDAT (pick any)
.rdata:0000E974                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:0000E974 ; `string'
.rdata:0000E974 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:0000E974                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:0000E974                 unicode 0, <std::vector>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <class std::basic_string>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t>
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, <,class std::allocator>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t>
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, < >
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, <,class std::allocator>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <class std::basic_string>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t>
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, <,class std::allocator>
.rdata:0000E974                 dw 3Ch
.rdata:0000E974                 unicode 0, <wchar_t>
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, < >
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, < >
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, < >
.rdata:0000E974                 dw 3Eh
.rdata:0000E974                 unicode 0, <::operator []>,0
.rdata:0000E974 _rdata          ends
.rdata:0000E974
.rdata:0000EB5C ; ===========================================================================
.rdata:0000EB5C
.rdata:0000EB5C ; Segment type: Pure data
.rdata:0000EB5C ; Segment permissions: Read
.rdata:0000EB5C _rdata          segment dword public 'DATA' use32
.rdata:0000EB5C                 assume cs:_rdata
.rdata:0000EB5C                 ;org 0EB5Ch
.rdata:0000EB5C ; COMDAT (pick any)
.rdata:0000EB5C                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0000EB5C ; `string'
.rdata:0000EB5C ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0000EB5C                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+6Fo
.rdata:0000EB5C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+6Fo ...
.rdata:0000EB5C                 unicode 0, <"out of range">,0
.rdata:0000EB7A                 align 4
.rdata:0000EB7A _rdata          ends
.rdata:0000EB7A
.rdata:0000EB7C ; ===========================================================================
.rdata:0000EB7C
.rdata:0000EB7C ; Segment type: Pure data
.rdata:0000EB7C ; Segment permissions: Read
.rdata:0000EB7C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EB7C _rdata          segment para public 'DATA' use32
.rdata:0000EB7C                 assume cs:_rdata
.rdata:0000EB7C                 ;org 0EB7Ch
.rdata:0000EB7C ; COMDAT (pick any)
.rdata:0000EB7C                 public ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
.rdata:0000EB7C ; wchar_t `string'
.rdata:0000EB7C ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@:
.rdata:0000EB7C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+63o
.rdata:0000EB7C                 unicode 0, <vector erase iterator outside range>,0
.rdata:0000EB7C _rdata          ends
.rdata:0000EB7C
.rdata:0000EBC4 ; ===========================================================================
.rdata:0000EBC4
.rdata:0000EBC4 ; Segment type: Pure data
.rdata:0000EBC4 ; Segment permissions: Read
.rdata:0000EBC4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EBC4 _rdata          segment para public 'DATA' use32
.rdata:0000EBC4                 assume cs:_rdata
.rdata:0000EBC4                 ;org 0EBC4h
.rdata:0000EBC4 ; COMDAT (pick any)
.rdata:0000EBC4                 public ??_C@_1KK@FJDFDCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAr?$AAe?$AAe?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?0?$AAc?$AAl@
.rdata:0000EBC4 ; `string'
.rdata:0000EBC4 ??_C@_1KK@FJDFDCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAr?$AAe?$AAe?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?0?$AAc?$AAl@:
.rdata:0000EBC4                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+6Ao
.rdata:0000EBC4                 unicode 0, <std::vector>
.rdata:0000EBC4                 dw 3Ch
.rdata:0000EBC4                 unicode 0, <struct TreeParams,class std::allocator>
.rdata:0000EBC4                 dw 3Ch
.rdata:0000EBC4                 unicode 0, <struct TreeParams>
.rdata:0000EBC4                 dw 3Eh
.rdata:0000EBC4                 unicode 0, < >
.rdata:0000EBC4                 dw 3Eh
.rdata:0000EBC4                 unicode 0, <::operator []>,0
.rdata:0000EC6E                 align 10h
.rdata:0000EC6E _rdata          ends
.rdata:0000EC6E
.rdata:0000EC70 ; ===========================================================================
.rdata:0000EC70
.rdata:0000EC70 ; Segment type: Pure data
.rdata:0000EC70 ; Segment permissions: Read
.rdata:0000EC70 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EC70 _rdata          segment para public 'DATA' use32
.rdata:0000EC70                 assume cs:_rdata
.rdata:0000EC70                 ;org 0EC70h
.rdata:0000EC70 ; COMDAT (pick any)
.rdata:0000EC70                 public ??_C@_1KG@KJPMAJE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AAI?$AAn?$AAf?$AAo?$AA?0?$AAc?$AAl?$AAa@
.rdata:0000EC70 ; `string'
.rdata:0000EC70 ??_C@_1KG@KJPMAJE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AAI?$AAn?$AAf?$AAo?$AA?0?$AAc?$AAl?$AAa@:
.rdata:0000EC70                                         ; DATA XREF: std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+6Ao
.rdata:0000EC70                 unicode 0, <std::vector>
.rdata:0000EC70                 dw 3Ch
.rdata:0000EC70                 unicode 0, <struct foundInfo,class std::allocator>
.rdata:0000EC70                 dw 3Ch
.rdata:0000EC70                 unicode 0, <struct foundInfo>
.rdata:0000EC70                 dw 3Eh
.rdata:0000EC70                 unicode 0, < >
.rdata:0000EC70                 dw 3Eh
.rdata:0000EC70                 unicode 0, <::operator []>,0
.rdata:0000ED16                 align 4
.rdata:0000ED16 _rdata          ends
.rdata:0000ED16
.rdata:0000ED18 ; ===========================================================================
.rdata:0000ED18
.rdata:0000ED18 ; Segment type: Pure data
.rdata:0000ED18 ; Segment permissions: Read
.rdata:0000ED18 _rdata          segment dword public 'DATA' use32
.rdata:0000ED18                 assume cs:_rdata
.rdata:0000ED18                 ;org 0ED18h
.rdata:0000ED18 ; COMDAT (pick any)
.rdata:0000ED18                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:0000ED18 ; `string'
.rdata:0000ED18 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:0000ED18                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:0000ED18 _rdata          ends
.rdata:0000ED18
.rdata:0000ED40 ; ===========================================================================
.rdata:0000ED40
.rdata:0000ED40 ; Segment type: Pure data
.rdata:0000ED40 ; Segment permissions: Read
.rdata:0000ED40 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000ED40 _rdata          segment para public 'DATA' use32
.rdata:0000ED40                 assume cs:_rdata
.rdata:0000ED40                 ;org 0ED40h
.rdata:0000ED40 ; COMDAT (pick any)
.rdata:0000ED40                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000ED40 ; `string'
.rdata:0000ED40 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000ED40                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_8D2Ao
.rdata:0000ED40                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0000ED9E                 align 10h
.rdata:0000ED9E _rdata          ends
.rdata:0000ED9E
.rdata:0000EDA0 ; ===========================================================================
.rdata:0000EDA0
.rdata:0000EDA0 ; Segment type: Pure data
.rdata:0000EDA0 ; Segment permissions: Read
.rdata:0000EDA0 _rdata          segment dword public 'DATA' use32
.rdata:0000EDA0                 assume cs:_rdata
.rdata:0000EDA0                 ;org 0EDA0h
.rdata:0000EDA0 ; COMDAT (pick any)
.rdata:0000EDA0                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:0000EDA0 ; `string'
.rdata:0000EDA0 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:0000EDA0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:0000EDA0                 unicode 0, <"invalid argument">,0
.rdata:0000EDC6                 align 4
.rdata:0000EDC6 _rdata          ends
.rdata:0000EDC6
.rdata:0000EDC8 ; ===========================================================================
.rdata:0000EDC8
.rdata:0000EDC8 ; Segment type: Pure data
.rdata:0000EDC8 ; Segment permissions: Read
.rdata:0000EDC8 _rdata          segment dword public 'DATA' use32
.rdata:0000EDC8                 assume cs:_rdata
.rdata:0000EDC8                 ;org 0EDC8h
.rdata:0000EDC8 ; COMDAT (pick any)
.rdata:0000EDC8                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000EDC8 ; char `string'[]
.rdata:0000EDC8 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000EDC8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000EDC8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000EDC8 _rdata          ends
.rdata:0000EDC8
.rdata:0000EDD8 ; ===========================================================================
.rdata:0000EDD8
.rdata:0000EDD8 ; Segment type: Pure data
.rdata:0000EDD8 ; Segment permissions: Read
.rdata:0000EDD8 _rdata          segment dword public 'DATA' use32
.rdata:0000EDD8                 assume cs:_rdata
.rdata:0000EDD8                 ;org 0EDD8h
.rdata:0000EDD8 ; COMDAT (pick any)
.rdata:0000EDD8                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000EDD8 ; char `string'[]
.rdata:0000EDD8 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000EDD8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000EDD8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000EDD8 _rdata          ends
.rdata:0000EDD8
.rdata:0000EDF0 ; ===========================================================================
.rdata:0000EDF0
.rdata:0000EDF0 ; Segment type: Pure data
.rdata:0000EDF0 ; Segment permissions: Read
.rdata:0000EDF0 _rdata          segment dword public 'DATA' use32
.rdata:0000EDF0                 assume cs:_rdata
.rdata:0000EDF0                 ;org 0EDF0h
.rdata:0000EDF0 ; COMDAT (pick any)
.rdata:0000EDF0                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:0000EDF0 ; char `string'[]
.rdata:0000EDF0 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:0000EDF0                                         ; DATA XREF: std::vector<TreeParams,std::allocator<TreeParams>>::_Xlen(void)+7o
.rdata:0000EDF0                                         ; std::vector<TreeStateNode,std::allocator<TreeStateNode>>::_Xlen(void)+7o ...
.rdata:0000EE03                 align 4
.rdata:0000EE03 _rdata          ends
.rdata:0000EE03
.rdata:0000EE04 ; ===========================================================================
.rdata:0000EE04
.rdata:0000EE04 ; Segment type: Pure data
.rdata:0000EE04 ; Segment permissions: Read
.rdata:0000EE04 _rdata          segment dword public 'DATA' use32
.rdata:0000EE04                 assume cs:_rdata
.rdata:0000EE04                 ;org 0EE04h
.rdata:0000EE04 ; COMDAT (pick any)
.rdata:0000EE04                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:0000EE04 ; wchar_t `string'
.rdata:0000EE04 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:0000EE04                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:0000EE04                 unicode 0, <string iterators incompatible>,0
.rdata:0000EE04 _rdata          ends
.rdata:0000EE04
.rdata:0000EE40 ; ===========================================================================
.rdata:0000EE40
.rdata:0000EE40 ; Segment type: Pure data
.rdata:0000EE40 ; Segment permissions: Read
.rdata:0000EE40 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EE40 _rdata          segment para public 'DATA' use32
.rdata:0000EE40                 assume cs:_rdata
.rdata:0000EE40                 ;org 0EE40h
.rdata:0000EE40 ; COMDAT (pick any)
.rdata:0000EE40                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000EE40 ; `string'
.rdata:0000EE40 ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000EE40                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:0000EE40                 unicode 0, <std::_String_const_iterator>
.rdata:0000EE40                 dw 3Ch
.rdata:0000EE40                 unicode 0, <class std::_String_val>
.rdata:0000EE40                 dw 3Ch
.rdata:0000EE40                 unicode 0, <struct std::_Simple_types>
.rdata:0000EE40                 dw 3Ch
.rdata:0000EE40                 unicode 0, <wchar_t>
.rdata:0000EE40                 dw 3Eh
.rdata:0000EE40                 unicode 0, < >
.rdata:0000EE40                 dw 3Eh
.rdata:0000EE40                 unicode 0, < >
.rdata:0000EE40                 dw 3Eh
.rdata:0000EE40                 unicode 0, <::_Compat>,0
.rdata:0000EF06                 align 4
.rdata:0000EF06 _rdata          ends
.rdata:0000EF06
.rdata:0000EF08 ; ===========================================================================
.rdata:0000EF08
.rdata:0000EF08 ; Segment type: Pure data
.rdata:0000EF08 ; Segment permissions: Read
.rdata:0000EF08 _rdata          segment dword public 'DATA' use32
.rdata:0000EF08                 assume cs:_rdata
.rdata:0000EF08                 ;org 0EF08h
.rdata:0000EF08 ; COMDAT (pick any)
.rdata:0000EF08                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000EF08 ; wchar_t `string'
.rdata:0000EF08 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000EF08                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000EF08                                         ; std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)+11o ...
.rdata:0000EF08                 unicode 0, <invalid null pointer>,0
.rdata:0000EF32                 align 4
.rdata:0000EF32 _rdata          ends
.rdata:0000EF32
.rdata:0000EF34 ; ===========================================================================
.rdata:0000EF34
.rdata:0000EF34 ; Segment type: Pure data
.rdata:0000EF34 ; Segment permissions: Read
.rdata:0000EF34 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EF34 _rdata          segment para public 'DATA' use32
.rdata:0000EF34                 assume cs:_rdata
.rdata:0000EF34                 ;org 0EF34h
.rdata:0000EF34 ; COMDAT (pick any)
.rdata:0000EF34                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:0000EF34 ; wchar_t `string'
.rdata:0000EF34 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:0000EF34                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:0000EF34                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000EF7A                 align 4
.rdata:0000EF7A _rdata          ends
.rdata:0000EF7A
.rdata:0000EF7C ; ===========================================================================
.rdata:0000EF7C
.rdata:0000EF7C ; Segment type: Pure data
.rdata:0000EF7C ; Segment permissions: Read
.rdata:0000EF7C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000EF7C _rdata          segment para public 'DATA' use32
.rdata:0000EF7C                 assume cs:_rdata
.rdata:0000EF7C                 ;org 0EF7Ch
.rdata:0000EF7C ; COMDAT (pick any)
.rdata:0000EF7C                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000EF7C ; `string'
.rdata:0000EF7C ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000EF7C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0000EF7C                 unicode 0, <std::_String_const_iterator>
.rdata:0000EF7C                 dw 3Ch
.rdata:0000EF7C                 unicode 0, <class std::_String_val>
.rdata:0000EF7C                 dw 3Ch
.rdata:0000EF7C                 unicode 0, <struct std::_Simple_types>
.rdata:0000EF7C                 dw 3Ch
.rdata:0000EF7C                 unicode 0, <wchar_t>
.rdata:0000EF7C                 dw 3Eh
.rdata:0000EF7C                 unicode 0, < >
.rdata:0000EF7C                 dw 3Eh
.rdata:0000EF7C                 unicode 0, < >
.rdata:0000EF7C                 dw 3Eh
.rdata:0000EF7C                 unicode 0, <::operator *>,0
.rdata:0000EF7C _rdata          ends
.rdata:0000EF7C
.rdata:0000F048 ; ===========================================================================
.rdata:0000F048
.rdata:0000F048 ; Segment type: Pure data
.rdata:0000F048 ; Segment permissions: Read
.rdata:0000F048 _rdata          segment dword public 'DATA' use32
.rdata:0000F048                 assume cs:_rdata
.rdata:0000F048                 ;org 0F048h
.rdata:0000F048 ; COMDAT (pick any)
.rdata:0000F048                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000F048 ; wchar_t `string'
.rdata:0000F048 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000F048                                         ; DATA XREF: std::_Debug_range2<TreeParams *>(TreeParams *,TreeParams *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000F048                                         ; std::_Debug_range2<TreeStateNode *>(TreeStateNode *,TreeStateNode *,wchar_t const *,uint,std::random_access_iterator_tag)+43o ...
.rdata:0000F048                 unicode 0, <invalid iterator range>,0
.rdata:0000F076                 align 4
.rdata:0000F076 _rdata          ends
.rdata:0000F076
.rdata:0000F078 ; ===========================================================================
.rdata:0000F078
.rdata:0000F078 ; Segment type: Pure data
.rdata:0000F078 ; Segment permissions: Read
.rdata:0000F078 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000F078 _rdata          segment para public 'DATA' use32
.rdata:0000F078                 assume cs:_rdata
.rdata:0000F078                 ;org 0F078h
.rdata:0000F078 ; COMDAT (pick any)
.rdata:0000F078                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000F078 ; wchar_t `string'
.rdata:0000F078 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000F078                                         ; DATA XREF: std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+2Fo
.rdata:0000F078                                         ; std::_Uninit_copy<TreeStateNode *,TreeStateNode *,std::allocator<TreeStateNode>>(TreeStateNode *,TreeStateNode *,TreeStateNode *,std::_Wrap_alloc<std::allocator<TreeStateNode>> &,std::_Nonscalar_ptr_iterator_tag)+49o ...
.rdata:0000F078                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000F078                 unicode 0, <clude\xmemory>,0
.rdata:0000F106                 align 4
.rdata:0000F106 _rdata          ends
.rdata:0000F106
.rdata$r:0000F108 ; ===========================================================================
.rdata$r:0000F108
.rdata$r:0000F108 ; Segment type: Pure data
.rdata$r:0000F108 ; Segment permissions: Read
.rdata$r:0000F108 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F108                 assume cs:_rdata$r
.rdata$r:0000F108                 ;org 0F108h
.rdata$r:0000F108 ; COMDAT (pick any)
.rdata$r:0000F108                 public ??_R4error_category@std@@6B@
.rdata$r:0000F108 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000F108 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000E6B8o
.rdata$r:0000F109                 db    0
.rdata$r:0000F10A                 db    0
.rdata$r:0000F10B                 db    0
.rdata$r:0000F10C                 db    0
.rdata$r:0000F10D                 db    0
.rdata$r:0000F10E                 db    0
.rdata$r:0000F10F                 db    0
.rdata$r:0000F110                 db    0
.rdata$r:0000F111                 db    0
.rdata$r:0000F112                 db    0
.rdata$r:0000F113                 db    0
.rdata$r:0000F114                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000F118                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F118 _rdata$r        ends
.rdata$r:0000F118
.data$r:0000F11C ; ===========================================================================
.data$r:0000F11C
.data$r:0000F11C ; Segment type: Pure data
.data$r:0000F11C ; Segment permissions: Read/Write
.data$r:0000F11C _data$r         segment dword public 'DATA' use32
.data$r:0000F11C                 assume cs:_data$r
.data$r:0000F11C                 ;org 0F11Ch
.data$r:0000F11C ; COMDAT (pick any)
.data$r:0000F11C                 public ??_R0?AVerror_category@std@@@8
.data$r:0000F11C ; class std::error_category `RTTI Type Descriptor'
.data$r:0000F11C ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F11C                                         ; DATA XREF: .rdata$r:0000F114o
.data$r:0000F11C                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F11C                                         ; const type_info::`vftable'
.data$r:0000F120                 db    0
.data$r:0000F121                 db    0
.data$r:0000F122                 db    0
.data$r:0000F123                 db    0
.data$r:0000F124                 db  2Eh ; .
.data$r:0000F125                 db  3Fh ; ?
.data$r:0000F126                 db  41h ; A
.data$r:0000F127                 db  56h ; V
.data$r:0000F128                 db  65h ; e
.data$r:0000F129                 db  72h ; r
.data$r:0000F12A                 db  72h ; r
.data$r:0000F12B                 db  6Fh ; o
.data$r:0000F12C                 db  72h ; r
.data$r:0000F12D                 db  5Fh ; _
.data$r:0000F12E                 db  63h ; c
.data$r:0000F12F                 db  61h ; a
.data$r:0000F130                 db  74h ; t
.data$r:0000F131                 db  65h ; e
.data$r:0000F132                 db  67h ; g
.data$r:0000F133                 db  6Fh ; o
.data$r:0000F134                 db  72h ; r
.data$r:0000F135                 db  79h ; y
.data$r:0000F136                 db  40h ; @
.data$r:0000F137                 db  73h ; s
.data$r:0000F138                 db  74h ; t
.data$r:0000F139                 db  64h ; d
.data$r:0000F13A                 db  40h ; @
.data$r:0000F13B                 db  40h ; @
.data$r:0000F13C                 db    0
.data$r:0000F13D                 align 10h
.data$r:0000F13D _data$r         ends
.data$r:0000F13D
.rdata$r:0000F140 ; ===========================================================================
.rdata$r:0000F140
.rdata$r:0000F140 ; Segment type: Pure data
.rdata$r:0000F140 ; Segment permissions: Read
.rdata$r:0000F140 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F140                 assume cs:_rdata$r
.rdata$r:0000F140                 ;org 0F140h
.rdata$r:0000F140 ; COMDAT (pick any)
.rdata$r:0000F140                 public ??_R3error_category@std@@8
.rdata$r:0000F140 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F140 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000F118o
.rdata$r:0000F140                                         ; .rdata$r:0000F170o
.rdata$r:0000F141                 db    0
.rdata$r:0000F142                 db    0
.rdata$r:0000F143                 db    0
.rdata$r:0000F144                 db    0
.rdata$r:0000F145                 db    0
.rdata$r:0000F146                 db    0
.rdata$r:0000F147                 db    0
.rdata$r:0000F148                 db    1
.rdata$r:0000F149                 db    0
.rdata$r:0000F14A                 db    0
.rdata$r:0000F14B                 db    0
.rdata$r:0000F14C                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000F14C _rdata$r        ends
.rdata$r:0000F14C
.rdata$r:0000F150 ; ===========================================================================
.rdata$r:0000F150
.rdata$r:0000F150 ; Segment type: Pure data
.rdata$r:0000F150 ; Segment permissions: Read
.rdata$r:0000F150 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F150                 assume cs:_rdata$r
.rdata$r:0000F150                 ;org 0F150h
.rdata$r:0000F150 ; COMDAT (pick any)
.rdata$r:0000F150                 public ??_R2error_category@std@@8
.rdata$r:0000F150 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000F150 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000F150                                         ; DATA XREF: .rdata$r:0000F14Co
.rdata$r:0000F150                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F154                 db    0
.rdata$r:0000F155                 align 4
.rdata$r:0000F155 _rdata$r        ends
.rdata$r:0000F155
.rdata$r:0000F158 ; ===========================================================================
.rdata$r:0000F158
.rdata$r:0000F158 ; Segment type: Pure data
.rdata$r:0000F158 ; Segment permissions: Read
.rdata$r:0000F158 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F158                 assume cs:_rdata$r
.rdata$r:0000F158                 ;org 0F158h
.rdata$r:0000F158 ; COMDAT (pick any)
.rdata$r:0000F158                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000F158 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F158 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000F158                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000F158                                         ; .rdata$r:0000F1C8o ...
.rdata$r:0000F158                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000F15C                 db    0
.rdata$r:0000F15D                 db    0
.rdata$r:0000F15E                 db    0
.rdata$r:0000F15F                 db    0
.rdata$r:0000F160                 db    0
.rdata$r:0000F161                 db    0
.rdata$r:0000F162                 db    0
.rdata$r:0000F163                 db    0
.rdata$r:0000F164                 db 0FFh
.rdata$r:0000F165                 db 0FFh
.rdata$r:0000F166                 db 0FFh
.rdata$r:0000F167                 db 0FFh
.rdata$r:0000F168                 db    0
.rdata$r:0000F169                 db    0
.rdata$r:0000F16A                 db    0
.rdata$r:0000F16B                 db    0
.rdata$r:0000F16C                 db  40h ; @
.rdata$r:0000F16D                 db    0
.rdata$r:0000F16E                 db    0
.rdata$r:0000F16F                 db    0
.rdata$r:0000F170                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F170 _rdata$r        ends
.rdata$r:0000F170
.rdata$r:0000F174 ; ===========================================================================
.rdata$r:0000F174
.rdata$r:0000F174 ; Segment type: Pure data
.rdata$r:0000F174 ; Segment permissions: Read
.rdata$r:0000F174 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F174                 assume cs:_rdata$r
.rdata$r:0000F174                 ;org 0F174h
.rdata$r:0000F174 ; COMDAT (pick any)
.rdata$r:0000F174                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000F174 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000F174 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000F174                                         ; DATA XREF: .rdata:0000E6D4o
.rdata$r:0000F175                 db    0
.rdata$r:0000F176                 db    0
.rdata$r:0000F177                 db    0
.rdata$r:0000F178                 db    0
.rdata$r:0000F179                 db    0
.rdata$r:0000F17A                 db    0
.rdata$r:0000F17B                 db    0
.rdata$r:0000F17C                 db    0
.rdata$r:0000F17D                 db    0
.rdata$r:0000F17E                 db    0
.rdata$r:0000F17F                 db    0
.rdata$r:0000F180                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000F184                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F184 _rdata$r        ends
.rdata$r:0000F184
.data$r:0000F188 ; ===========================================================================
.data$r:0000F188
.data$r:0000F188 ; Segment type: Pure data
.data$r:0000F188 ; Segment permissions: Read/Write
.data$r:0000F188 _data$r         segment dword public 'DATA' use32
.data$r:0000F188                 assume cs:_data$r
.data$r:0000F188                 ;org 0F188h
.data$r:0000F188 ; COMDAT (pick any)
.data$r:0000F188                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000F188 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000F188 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F188                                         ; DATA XREF: .rdata$r:0000F180o
.data$r:0000F188                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F188                                         ; const type_info::`vftable'
.data$r:0000F18C                 align 10h
.data$r:0000F190 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:0000F1B2                 align 4
.data$r:0000F1B2 _data$r         ends
.data$r:0000F1B2
.rdata$r:0000F1B4 ; ===========================================================================
.rdata$r:0000F1B4
.rdata$r:0000F1B4 ; Segment type: Pure data
.rdata$r:0000F1B4 ; Segment permissions: Read
.rdata$r:0000F1B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1B4                 assume cs:_rdata$r
.rdata$r:0000F1B4                 ;org 0F1B4h
.rdata$r:0000F1B4 ; COMDAT (pick any)
.rdata$r:0000F1B4                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000F1B4 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F1B4 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000F1B4                                         ; DATA XREF: .rdata$r:0000F184o
.rdata$r:0000F1B4                                         ; .rdata$r:0000F1E8o
.rdata$r:0000F1B5                 db    0
.rdata$r:0000F1B6                 db    0
.rdata$r:0000F1B7                 db    0
.rdata$r:0000F1B8                 db    0
.rdata$r:0000F1B9                 db    0
.rdata$r:0000F1BA                 db    0
.rdata$r:0000F1BB                 db    0
.rdata$r:0000F1BC                 db    2
.rdata$r:0000F1BD                 db    0
.rdata$r:0000F1BE                 db    0
.rdata$r:0000F1BF                 db    0
.rdata$r:0000F1C0                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000F1C0 _rdata$r        ends
.rdata$r:0000F1C0
.rdata$r:0000F1C4 ; ===========================================================================
.rdata$r:0000F1C4
.rdata$r:0000F1C4 ; Segment type: Pure data
.rdata$r:0000F1C4 ; Segment permissions: Read
.rdata$r:0000F1C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1C4                 assume cs:_rdata$r
.rdata$r:0000F1C4                 ;org 0F1C4h
.rdata$r:0000F1C4 ; COMDAT (pick any)
.rdata$r:0000F1C4                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000F1C4 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000F1C4 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000F1C4                                         ; DATA XREF: .rdata$r:0000F1C0o
.rdata$r:0000F1C4                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F1C8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F1CC                 db    0
.rdata$r:0000F1CD                 align 10h
.rdata$r:0000F1CD _rdata$r        ends
.rdata$r:0000F1CD
.rdata$r:0000F1D0 ; ===========================================================================
.rdata$r:0000F1D0
.rdata$r:0000F1D0 ; Segment type: Pure data
.rdata$r:0000F1D0 ; Segment permissions: Read
.rdata$r:0000F1D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1D0                 assume cs:_rdata$r
.rdata$r:0000F1D0                 ;org 0F1D0h
.rdata$r:0000F1D0 ; COMDAT (pick any)
.rdata$r:0000F1D0                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000F1D0 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F1D0 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000F1D0                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000F1D0                                         ; .rdata$r:0000F240o ...
.rdata$r:0000F1D0                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000F1D4                 db    1
.rdata$r:0000F1D5                 db    0
.rdata$r:0000F1D6                 db    0
.rdata$r:0000F1D7                 db    0
.rdata$r:0000F1D8                 db    0
.rdata$r:0000F1D9                 db    0
.rdata$r:0000F1DA                 db    0
.rdata$r:0000F1DB                 db    0
.rdata$r:0000F1DC                 db 0FFh
.rdata$r:0000F1DD                 db 0FFh
.rdata$r:0000F1DE                 db 0FFh
.rdata$r:0000F1DF                 db 0FFh
.rdata$r:0000F1E0                 db    0
.rdata$r:0000F1E1                 db    0
.rdata$r:0000F1E2                 db    0
.rdata$r:0000F1E3                 db    0
.rdata$r:0000F1E4                 db  40h ; @
.rdata$r:0000F1E5                 db    0
.rdata$r:0000F1E6                 db    0
.rdata$r:0000F1E7                 db    0
.rdata$r:0000F1E8                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F1E8 _rdata$r        ends
.rdata$r:0000F1E8
.rdata$r:0000F1EC ; ===========================================================================
.rdata$r:0000F1EC
.rdata$r:0000F1EC ; Segment type: Pure data
.rdata$r:0000F1EC ; Segment permissions: Read
.rdata$r:0000F1EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1EC                 assume cs:_rdata$r
.rdata$r:0000F1EC                 ;org 0F1ECh
.rdata$r:0000F1EC ; COMDAT (pick any)
.rdata$r:0000F1EC                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000F1EC ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000F1EC ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000F1EC                                         ; DATA XREF: .rdata:0000E708o
.rdata$r:0000F1ED                 db    0
.rdata$r:0000F1EE                 db    0
.rdata$r:0000F1EF                 db    0
.rdata$r:0000F1F0                 db    0
.rdata$r:0000F1F1                 db    0
.rdata$r:0000F1F2                 db    0
.rdata$r:0000F1F3                 db    0
.rdata$r:0000F1F4                 db    0
.rdata$r:0000F1F5                 db    0
.rdata$r:0000F1F6                 db    0
.rdata$r:0000F1F7                 db    0
.rdata$r:0000F1F8                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000F1FC                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F1FC _rdata$r        ends
.rdata$r:0000F1FC
.data$r:0000F200 ; ===========================================================================
.data$r:0000F200
.data$r:0000F200 ; Segment type: Pure data
.data$r:0000F200 ; Segment permissions: Read/Write
.data$r:0000F200 _data$r         segment dword public 'DATA' use32
.data$r:0000F200                 assume cs:_data$r
.data$r:0000F200                 ;org 0F200h
.data$r:0000F200 ; COMDAT (pick any)
.data$r:0000F200                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000F200 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000F200 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F200                                         ; DATA XREF: .rdata$r:0000F1F8o
.data$r:0000F200                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F200                                         ; const type_info::`vftable'
.data$r:0000F204                 align 8
.data$r:0000F208 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:0000F22B                 align 4
.data$r:0000F22B _data$r         ends
.data$r:0000F22B
.rdata$r:0000F22C ; ===========================================================================
.rdata$r:0000F22C
.rdata$r:0000F22C ; Segment type: Pure data
.rdata$r:0000F22C ; Segment permissions: Read
.rdata$r:0000F22C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F22C                 assume cs:_rdata$r
.rdata$r:0000F22C                 ;org 0F22Ch
.rdata$r:0000F22C ; COMDAT (pick any)
.rdata$r:0000F22C                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000F22C ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F22C ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000F22C                                         ; DATA XREF: .rdata$r:0000F1FCo
.rdata$r:0000F22C                                         ; .rdata$r:0000F264o
.rdata$r:0000F22D                 db    0
.rdata$r:0000F22E                 db    0
.rdata$r:0000F22F                 db    0
.rdata$r:0000F230                 db    0
.rdata$r:0000F231                 db    0
.rdata$r:0000F232                 db    0
.rdata$r:0000F233                 db    0
.rdata$r:0000F234                 db    3
.rdata$r:0000F235                 db    0
.rdata$r:0000F236                 db    0
.rdata$r:0000F237                 db    0
.rdata$r:0000F238                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000F238 _rdata$r        ends
.rdata$r:0000F238
.rdata$r:0000F23C ; ===========================================================================
.rdata$r:0000F23C
.rdata$r:0000F23C ; Segment type: Pure data
.rdata$r:0000F23C ; Segment permissions: Read
.rdata$r:0000F23C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F23C                 assume cs:_rdata$r
.rdata$r:0000F23C                 ;org 0F23Ch
.rdata$r:0000F23C ; COMDAT (pick any)
.rdata$r:0000F23C                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000F23C ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000F23C ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000F23C                                         ; DATA XREF: .rdata$r:0000F238o
.rdata$r:0000F23C                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F240                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F244                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F248                 db    0
.rdata$r:0000F249                 align 4
.rdata$r:0000F249 _rdata$r        ends
.rdata$r:0000F249
.rdata$r:0000F24C ; ===========================================================================
.rdata$r:0000F24C
.rdata$r:0000F24C ; Segment type: Pure data
.rdata$r:0000F24C ; Segment permissions: Read
.rdata$r:0000F24C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F24C                 assume cs:_rdata$r
.rdata$r:0000F24C                 ;org 0F24Ch
.rdata$r:0000F24C ; COMDAT (pick any)
.rdata$r:0000F24C                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000F24C ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F24C ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000F24C                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000F24C                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000F250                 db    2
.rdata$r:0000F251                 db    0
.rdata$r:0000F252                 db    0
.rdata$r:0000F253                 db    0
.rdata$r:0000F254                 db    0
.rdata$r:0000F255                 db    0
.rdata$r:0000F256                 db    0
.rdata$r:0000F257                 db    0
.rdata$r:0000F258                 db 0FFh
.rdata$r:0000F259                 db 0FFh
.rdata$r:0000F25A                 db 0FFh
.rdata$r:0000F25B                 db 0FFh
.rdata$r:0000F25C                 db    0
.rdata$r:0000F25D                 db    0
.rdata$r:0000F25E                 db    0
.rdata$r:0000F25F                 db    0
.rdata$r:0000F260                 db  40h ; @
.rdata$r:0000F261                 db    0
.rdata$r:0000F262                 db    0
.rdata$r:0000F263                 db    0
.rdata$r:0000F264                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F264 _rdata$r        ends
.rdata$r:0000F264
.rdata$r:0000F268 ; ===========================================================================
.rdata$r:0000F268
.rdata$r:0000F268 ; Segment type: Pure data
.rdata$r:0000F268 ; Segment permissions: Read
.rdata$r:0000F268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F268                 assume cs:_rdata$r
.rdata$r:0000F268                 ;org 0F268h
.rdata$r:0000F268 ; COMDAT (pick any)
.rdata$r:0000F268                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000F268 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000F268 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000E748o
.rdata$r:0000F269                 db    0
.rdata$r:0000F26A                 db    0
.rdata$r:0000F26B                 db    0
.rdata$r:0000F26C                 db    0
.rdata$r:0000F26D                 db    0
.rdata$r:0000F26E                 db    0
.rdata$r:0000F26F                 db    0
.rdata$r:0000F270                 db    0
.rdata$r:0000F271                 db    0
.rdata$r:0000F272                 db    0
.rdata$r:0000F273                 db    0
.rdata$r:0000F274                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000F278                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F278 _rdata$r        ends
.rdata$r:0000F278
.data$r:0000F27C ; ===========================================================================
.data$r:0000F27C
.data$r:0000F27C ; Segment type: Pure data
.data$r:0000F27C ; Segment permissions: Read/Write
.data$r:0000F27C _data$r         segment dword public 'DATA' use32
.data$r:0000F27C                 assume cs:_data$r
.data$r:0000F27C                 ;org 0F27Ch
.data$r:0000F27C ; COMDAT (pick any)
.data$r:0000F27C                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000F27C ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000F27C ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F27C                                         ; DATA XREF: .rdata$r:0000F274o
.data$r:0000F27C                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F27C                                         ; const type_info::`vftable'
.data$r:0000F280                 db    0
.data$r:0000F281                 db    0
.data$r:0000F282                 db    0
.data$r:0000F283                 db    0
.data$r:0000F284                 db  2Eh ; .
.data$r:0000F285                 db  3Fh ; ?
.data$r:0000F286                 db  41h ; A
.data$r:0000F287                 db  56h ; V
.data$r:0000F288                 db  5Fh ; _
.data$r:0000F289                 db  53h ; S
.data$r:0000F28A                 db  79h ; y
.data$r:0000F28B                 db  73h ; s
.data$r:0000F28C                 db  74h ; t
.data$r:0000F28D                 db  65h ; e
.data$r:0000F28E                 db  6Dh ; m
.data$r:0000F28F                 db  5Fh ; _
.data$r:0000F290                 db  65h ; e
.data$r:0000F291                 db  72h ; r
.data$r:0000F292                 db  72h ; r
.data$r:0000F293                 db  6Fh ; o
.data$r:0000F294                 db  72h ; r
.data$r:0000F295                 db  5Fh ; _
.data$r:0000F296                 db  63h ; c
.data$r:0000F297                 db  61h ; a
.data$r:0000F298                 db  74h ; t
.data$r:0000F299                 db  65h ; e
.data$r:0000F29A                 db  67h ; g
.data$r:0000F29B                 db  6Fh ; o
.data$r:0000F29C                 db  72h ; r
.data$r:0000F29D                 db  79h ; y
.data$r:0000F29E                 db  40h ; @
.data$r:0000F29F                 db  73h ; s
.data$r:0000F2A0                 db  74h ; t
.data$r:0000F2A1                 db  64h ; d
.data$r:0000F2A2                 db  40h ; @
.data$r:0000F2A3                 db  40h ; @
.data$r:0000F2A4                 db    0
.data$r:0000F2A5                 align 4
.data$r:0000F2A5 _data$r         ends
.data$r:0000F2A5
.rdata$r:0000F2A8 ; ===========================================================================
.rdata$r:0000F2A8
.rdata$r:0000F2A8 ; Segment type: Pure data
.rdata$r:0000F2A8 ; Segment permissions: Read
.rdata$r:0000F2A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2A8                 assume cs:_rdata$r
.rdata$r:0000F2A8                 ;org 0F2A8h
.rdata$r:0000F2A8 ; COMDAT (pick any)
.rdata$r:0000F2A8                 public ??_R3_System_error_category@std@@8
.rdata$r:0000F2A8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F2A8 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000F278o
.rdata$r:0000F2A8                                         ; .rdata$r:0000F2E0o
.rdata$r:0000F2A9                 db    0
.rdata$r:0000F2AA                 db    0
.rdata$r:0000F2AB                 db    0
.rdata$r:0000F2AC                 db    0
.rdata$r:0000F2AD                 db    0
.rdata$r:0000F2AE                 db    0
.rdata$r:0000F2AF                 db    0
.rdata$r:0000F2B0                 db    3
.rdata$r:0000F2B1                 db    0
.rdata$r:0000F2B2                 db    0
.rdata$r:0000F2B3                 db    0
.rdata$r:0000F2B4                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000F2B4 _rdata$r        ends
.rdata$r:0000F2B4
.rdata$r:0000F2B8 ; ===========================================================================
.rdata$r:0000F2B8
.rdata$r:0000F2B8 ; Segment type: Pure data
.rdata$r:0000F2B8 ; Segment permissions: Read
.rdata$r:0000F2B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2B8                 assume cs:_rdata$r
.rdata$r:0000F2B8                 ;org 0F2B8h
.rdata$r:0000F2B8 ; COMDAT (pick any)
.rdata$r:0000F2B8                 public ??_R2_System_error_category@std@@8
.rdata$r:0000F2B8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000F2B8 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000F2B8                                         ; DATA XREF: .rdata$r:0000F2B4o
.rdata$r:0000F2B8                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2BC                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2C0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2C4                 db    0
.rdata$r:0000F2C5                 align 4
.rdata$r:0000F2C5 _rdata$r        ends
.rdata$r:0000F2C5
.rdata$r:0000F2C8 ; ===========================================================================
.rdata$r:0000F2C8
.rdata$r:0000F2C8 ; Segment type: Pure data
.rdata$r:0000F2C8 ; Segment permissions: Read
.rdata$r:0000F2C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2C8                 assume cs:_rdata$r
.rdata$r:0000F2C8                 ;org 0F2C8h
.rdata$r:0000F2C8 ; COMDAT (pick any)
.rdata$r:0000F2C8                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000F2C8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F2C8 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000F2C8                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000F2C8                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000F2CC                 db    2
.rdata$r:0000F2CD                 db    0
.rdata$r:0000F2CE                 db    0
.rdata$r:0000F2CF                 db    0
.rdata$r:0000F2D0                 db    0
.rdata$r:0000F2D1                 db    0
.rdata$r:0000F2D2                 db    0
.rdata$r:0000F2D3                 db    0
.rdata$r:0000F2D4                 db 0FFh
.rdata$r:0000F2D5                 db 0FFh
.rdata$r:0000F2D6                 db 0FFh
.rdata$r:0000F2D7                 db 0FFh
.rdata$r:0000F2D8                 db    0
.rdata$r:0000F2D9                 db    0
.rdata$r:0000F2DA                 db    0
.rdata$r:0000F2DB                 db    0
.rdata$r:0000F2DC                 db  40h ; @
.rdata$r:0000F2DD                 db    0
.rdata$r:0000F2DE                 db    0
.rdata$r:0000F2DF                 db    0
.rdata$r:0000F2E0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F2E0 _rdata$r        ends
.rdata$r:0000F2E0
.CRT$XCU:0000F2E4 ; ===========================================================================
.CRT$XCU:0000F2E4
.CRT$XCU:0000F2E4 ; Segment type: Pure data
.CRT$XCU:0000F2E4 ; Segment permissions: Read
.CRT$XCU:0000F2E4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F2E4                 assume cs:_CRT$XCU
.CRT$XCU:0000F2E4                 ;org 0F2E4h
.CRT$XCU:0000F2E4 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000F2E8 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000F2EC _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:0000F2F0 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:0000F2F0 _CRT$XCU        ends
.CRT$XCU:0000F2F0
.CRT$XCU:0000F2F4 ; ===========================================================================
.CRT$XCU:0000F2F4
.CRT$XCU:0000F2F4 ; Segment type: Pure data
.CRT$XCU:0000F2F4 ; Segment permissions: Read
.CRT$XCU:0000F2F4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F2F4                 assume cs:_CRT$XCU
.CRT$XCU:0000F2F4                 ;org 0F2F4h
.CRT$XCU:0000F2F4 ; COMDAT (pick associative to section at E76C)
.CRT$XCU:0000F2F4 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000F2F4 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000F2F4 _CRT$XCU        ends
.CRT$XCU:0000F2F4
.CRT$XCU:0000F2F8 ; ===========================================================================
.CRT$XCU:0000F2F8
.CRT$XCU:0000F2F8 ; Segment type: Pure data
.CRT$XCU:0000F2F8 ; Segment permissions: Read
.CRT$XCU:0000F2F8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F2F8                 assume cs:_CRT$XCU
.CRT$XCU:0000F2F8                 ;org 0F2F8h
.CRT$XCU:0000F2F8 ; COMDAT (pick associative to section at E770)
.CRT$XCU:0000F2F8 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000F2F8 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000F2F8 _CRT$XCU        ends
.CRT$XCU:0000F2F8
.CRT$XCU:0000F2FC ; ===========================================================================
.CRT$XCU:0000F2FC
.CRT$XCU:0000F2FC ; Segment type: Pure data
.CRT$XCU:0000F2FC ; Segment permissions: Read
.CRT$XCU:0000F2FC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F2FC                 assume cs:_CRT$XCU
.CRT$XCU:0000F2FC                 ;org 0F2FCh
.CRT$XCU:0000F2FC ; COMDAT (pick associative to section at E774)
.CRT$XCU:0000F2FC ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000F2FC ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000F2FC _CRT$XCU        ends
.CRT$XCU:0000F2FC
.CRT$XCU:0000F300 ; ===========================================================================
.CRT$XCU:0000F300
.CRT$XCU:0000F300 ; Segment type: Pure data
.CRT$XCU:0000F300 ; Segment permissions: Read
.CRT$XCU:0000F300 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F300                 assume cs:_CRT$XCU
.CRT$XCU:0000F300                 ;org 0F300h
.CRT$XCU:0000F300 ; COMDAT (pick associative to section at E77C)
.CRT$XCU:0000F300 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000F300 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000F300 _CRT$XCU        ends
.CRT$XCU:0000F300
.CRT$XCU:0000F304 ; ===========================================================================
.CRT$XCU:0000F304
.CRT$XCU:0000F304 ; Segment type: Pure data
.CRT$XCU:0000F304 ; Segment permissions: Read
.CRT$XCU:0000F304 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F304                 assume cs:_CRT$XCU
.CRT$XCU:0000F304                 ;org 0F304h
.CRT$XCU:0000F304 ; COMDAT (pick associative to section at E780)
.CRT$XCU:0000F304 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000F304 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000F304 _CRT$XCU        ends
.CRT$XCU:0000F304
.CRT$XCU:0000F308 ; ===========================================================================
.CRT$XCU:0000F308
.CRT$XCU:0000F308 ; Segment type: Pure data
.CRT$XCU:0000F308 ; Segment permissions: Read
.CRT$XCU:0000F308 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F308                 assume cs:_CRT$XCU
.CRT$XCU:0000F308                 ;org 0F308h
.CRT$XCU:0000F308 ; COMDAT (pick associative to section at E820)
.CRT$XCU:0000F308 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000F308 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000F308 _CRT$XCU        ends
.CRT$XCU:0000F308
.CRT$XCU:0000F30C ; ===========================================================================
.CRT$XCU:0000F30C
.CRT$XCU:0000F30C ; Segment type: Pure data
.CRT$XCU:0000F30C ; Segment permissions: Read
.CRT$XCU:0000F30C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F30C                 assume cs:_CRT$XCU
.CRT$XCU:0000F30C                 ;org 0F30Ch
.CRT$XCU:0000F30C ; COMDAT (pick associative to section at E824)
.CRT$XCU:0000F30C ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000F30C ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000F30C _CRT$XCU        ends
.CRT$XCU:0000F30C
UNDEF:0000F310 ; ===========================================================================
UNDEF:0000F310
UNDEF:0000F310 ; Segment type: Externs
UNDEF:0000F310 ; UNDEF
UNDEF:0000F310                 extrn __purecall:near   ; DATA XREF: .rdata:0000E6C0o
UNDEF:0000F310                                         ; .rdata:0000E6C4o
UNDEF:0000F314 ; void *__cdecl operator new(unsigned int)
UNDEF:0000F314                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:0000F314                                         ; std::_Allocate<TreeParams>(uint,TreeParams *)+21p ...
UNDEF:0000F318 ; void __cdecl operator delete(void *)
UNDEF:0000F318                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+1Bp
UNDEF:0000F318                                         ; TreeParams::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000F31C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000F31C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000F31C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000F320                 extrn __invalid_parameter:near
UNDEF:0000F320                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+74p
UNDEF:0000F320                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+74p ...
UNDEF:0000F324 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000F324                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000F324                                         ; _wmemcpy+11p
UNDEF:0000F328 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000F328                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000F32C ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000F32C                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000F32C                                         ; _wmemmove+11p
UNDEF:0000F330 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000F330                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000F334 ; DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
UNDEF:0000F334                 extrn __imp__GetModuleFileNameW@12:near
UNDEF:0000F334                                         ; CODE XREF: DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)+3Cp
UNDEF:0000F334                                         ; DATA XREF: DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)+3Cr
UNDEF:0000F338 ; LPWSTR __stdcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000F338                 extrn __imp__lstrcpyW@8:near
UNDEF:0000F338                                         ; CODE XREF: FunctionListPanel::notified(tagNMHDR *)+4Ap
UNDEF:0000F338                                         ; FunctionListPanel::notified(tagNMHDR *)+74p
UNDEF:0000F338                                         ; DATA XREF: ...
UNDEF:0000F33C ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000F33C                 extrn __imp__lstrlenW@4:near
UNDEF:0000F33C                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+110p
UNDEF:0000F33C                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+125p
UNDEF:0000F33C                                         ; DATA XREF: ...
UNDEF:0000F340 ; BOOL __stdcall CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists)
UNDEF:0000F340                 extrn __imp__CopyFileW@12:near
UNDEF:0000F340                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+16Bp
UNDEF:0000F340                                         ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+16Br
UNDEF:0000F344 ; HBRUSH __stdcall CreateSolidBrush(COLORREF color)
UNDEF:0000F344                 extrn __imp__CreateSolidBrush@4:near
UNDEF:0000F344                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+C3p
UNDEF:0000F344                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+C3r
UNDEF:0000F348 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:0000F348                 extrn __imp__DeleteObject@4:near
UNDEF:0000F348                                         ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+81p
UNDEF:0000F348                                         ; FunctionListPanel::setTreeViewImageList(int,int,int)+C5p ...
UNDEF:0000F34C ; HGDIOBJ __stdcall GetStockObject(int i)
UNDEF:0000F34C                 extrn __imp__GetStockObject@4:near
UNDEF:0000F34C                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4EBp
UNDEF:0000F34C                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+4EBr
UNDEF:0000F350 ; COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color)
UNDEF:0000F350                 extrn __imp__SetBkColor@8:near
UNDEF:0000F350                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+169p
UNDEF:0000F350                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+169r
UNDEF:0000F354 ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:0000F354                 extrn __imp__SetTextColor@8:near
UNDEF:0000F354                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+15Ap
UNDEF:0000F354                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+15Ar
UNDEF:0000F358 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000F358                 extrn __imp__SendMessageW@16:near
UNDEF:0000F358                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+87p
UNDEF:0000F358                                         ; FunctionListPanel::reload(void)+90p ...
UNDEF:0000F35C ; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:0000F35C                 extrn __imp__CreateWindowExW@48:near
UNDEF:0000F35C                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1C1p
UNDEF:0000F35C                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+4DDp
UNDEF:0000F35C                                         ; DATA XREF: ...
UNDEF:0000F360 ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:0000F360                 extrn __imp__DestroyWindow@4:near
UNDEF:0000F360                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+5C9p
UNDEF:0000F360                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+5C9r
UNDEF:0000F364 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:0000F364                 extrn __imp__ShowWindow@8:near
UNDEF:0000F364                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3BAp
UNDEF:0000F364                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3BAr
UNDEF:0000F368 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:0000F368                 extrn __imp__MoveWindow@24:near
UNDEF:0000F368                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+6DCp
UNDEF:0000F368                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+728p ...
UNDEF:0000F36C ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:0000F36C                 extrn __imp__InvalidateRect@12:near
UNDEF:0000F36C                                         ; CODE XREF: FunctionListPanel::reload(void)+544p
UNDEF:0000F36C                                         ; FunctionListPanel::searchFuncAndSwitchView(void)+1F9p
UNDEF:0000F36C                                         ; DATA XREF: ...
UNDEF:0000F370 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000F370                 extrn __imp__GetClientRect@8:near
UNDEF:0000F370                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+6BBp
UNDEF:0000F370                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+6BBr
UNDEF:0000F374 ; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:0000F374                 extrn __imp__SetWindowLongW@12:near
UNDEF:0000F374                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1DBp
UNDEF:0000F374                                         ; DATA XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+1DBr
UNDEF:0000F378 ; HWND __stdcall GetParent(HWND hWnd)
UNDEF:0000F378                 extrn __imp__GetParent@4:near
UNDEF:0000F378                                         ; CODE XREF: funclstToolbarProc(HWND__ *,uint,uint,long)+26p
UNDEF:0000F378                                         ; DATA XREF: funclstToolbarProc(HWND__ *,uint,uint,long)+26r
UNDEF:0000F37C ; HBITMAP __stdcall LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName)
UNDEF:0000F37C                 extrn __imp__LoadBitmapW@8:near
UNDEF:0000F37C                                         ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+4Fp
UNDEF:0000F37C                                         ; FunctionListPanel::setTreeViewImageList(int,int,int)+93p ...
UNDEF:0000F380 ; wchar_t *__cdecl _itow(int Value, wchar_t *Dest, int Radix)
UNDEF:0000F380                 extrn __itow:near       ; CODE XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+24p
UNDEF:0000F384 ; int __cdecl _wtoi(const wchar_t *Str)
UNDEF:0000F384                 extrn __wtoi:near       ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+5Ep
UNDEF:0000F388 ; BOOL __stdcall PathFileExistsW(LPCWSTR pszPath)
UNDEF:0000F388                 extrn __imp__PathFileExistsW@4:near
UNDEF:0000F388                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+DAp
UNDEF:0000F388                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+14Dp ...
UNDEF:0000F38C ; LPWSTR __stdcall PathFindExtensionW(LPCWSTR pszPath)
UNDEF:0000F38C                 extrn __imp__PathFindExtensionW@4:near
UNDEF:0000F38C                                         ; CODE XREF: FunctionListPanel::reload(void)+1ACp
UNDEF:0000F38C                                         ; DATA XREF: FunctionListPanel::reload(void)+1ACr
UNDEF:0000F390 ; LPWSTR __stdcall PathFindFileNameW(LPCWSTR pszPath)
UNDEF:0000F390                 extrn __imp__PathFindFileNameW@4:near
UNDEF:0000F390                                         ; CODE XREF: DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)+49p
UNDEF:0000F390                                         ; DATA XREF: DockingDlgInterface::init(HINSTANCE__ *,HWND__ *)+49r
UNDEF:0000F394 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000F394                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000F394                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:0000F394                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:0000F398 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000F398                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000F398                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:0000F398                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:0000F39C                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000F3A0                 extrn __CrtDbgReportW:near
UNDEF:0000F3A0                                         ; CODE XREF: std::vector<TreeParams,std::allocator<TreeParams>>::operator[](uint)+50p
UNDEF:0000F3A0                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::operator[](uint)+50p ...
UNDEF:0000F3A4 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000F3A4                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000F3A4                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000F3A4                                         ; std::_Debug_pointer<TreeParams>(TreeParams *,wchar_t const *,uint)+16p ...
UNDEF:0000F3A8 ; void __cdecl std::_Xbad_alloc()
UNDEF:0000F3A8                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000F3A8                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_349Ap
UNDEF:0000F3A8                                         ; std::_Allocate<TreeParams>(uint,TreeParams *):loc_34DAp ...
UNDEF:0000F3AC ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000F3AC                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000F3AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000F3AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:0000F3B0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000F3B0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000F3B0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000F3B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000F3B4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F3B4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F3B4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000F3B8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000F3B8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000F3B8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000F3B8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000F3BC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000F3BC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000F3BC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000F3C0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F3C0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F3C0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000F3C4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F3C4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F3C4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000F3C8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F3C8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F3C8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000F3CC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl PathAppendW(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
UNDEF:0000F3CC                 extrn ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z:near
UNDEF:0000F3CC                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+B2p
UNDEF:0000F3CC                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+122p ...
UNDEF:0000F3D0 ; public: bool __thiscall FunctionParsersManager::init(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class ScintillaEditView * *)
UNDEF:0000F3D0                 extrn ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z:near
UNDEF:0000F3D0                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+1AFp
UNDEF:0000F3D0                                         ; FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+212p ...
UNDEF:0000F3D4 ; public: bool __thiscall FunctionParsersManager::parse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, struct AssociationInfo const &)
UNDEF:0000F3D4                 extrn ?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z:near
UNDEF:0000F3D4                                         ; CODE XREF: FunctionListPanel::reload(void)+20Ap
UNDEF:0000F3D8 ; HIMAGELIST __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow)
UNDEF:0000F3D8                 extrn __imp__ImageList_Create@20:near
UNDEF:0000F3D8                                         ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+21p
UNDEF:0000F3D8                                         ; DATA XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+21r
UNDEF:0000F3DC ; int __stdcall ImageList_GetImageCount(HIMAGELIST himl)
UNDEF:0000F3DC                 extrn __imp__ImageList_GetImageCount@4:near
UNDEF:0000F3DC                                         ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+119p
UNDEF:0000F3DC                                         ; DATA XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+119r
UNDEF:0000F3E0 ; int __stdcall ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask)
UNDEF:0000F3E0                 extrn __imp__ImageList_AddMasked@12:near
UNDEF:0000F3E0                                         ; CODE XREF: FunctionListPanel::setTreeViewImageList(int,int,int)+77p
UNDEF:0000F3E0                                         ; FunctionListPanel::setTreeViewImageList(int,int,int)+BBp ...
UNDEF:0000F3E4 ; struct _TREEITEM *__thiscall TreeView::addItem(TreeView *__hidden this, const wchar_t *, struct _TREEITEM *, int, const wchar_t *)
UNDEF:0000F3E4                 extrn ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z:near
UNDEF:0000F3E4                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+120p
UNDEF:0000F3E4                                         ; FunctionListPanel::reload(void)+248p ...
UNDEF:0000F3E8 ; bool __thiscall TreeView::setItemParam(TreeView *__hidden this, struct _TREEITEM *, const wchar_t *)
UNDEF:0000F3E8                 extrn ?setItemParam@TreeView@@QAE_NPAU_TREEITEM@@PB_W@Z:near
UNDEF:0000F3E8                                         ; CODE XREF: FunctionListPanel::reload(void)+411p
UNDEF:0000F3EC ; struct _TREEITEM *__thiscall TreeView::searchSubItemByName(TreeView *__hidden this, const wchar_t *, struct _TREEITEM *)
UNDEF:0000F3EC                 extrn ?searchSubItemByName@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@@Z:near
UNDEF:0000F3EC                                         ; CODE XREF: FunctionListPanel::addEntry(wchar_t const *,wchar_t const *,uint)+58p
UNDEF:0000F3F0 ; void __thiscall TreeView::removeAllItems(TreeView *__hidden this)
UNDEF:0000F3F0                 extrn ?removeAllItems@TreeView@@QAEXXZ:near
UNDEF:0000F3F0                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+DFp
UNDEF:0000F3F0                                         ; FunctionListPanel::removeAllEntries(void)+Dp ...
UNDEF:0000F3F4 ; bool __thiscall TreeView::restoreFoldingStateFrom(TreeView *__hidden this, const struct TreeStateNode *, struct _TREEITEM *)
UNDEF:0000F3F4                 extrn ?restoreFoldingStateFrom@TreeView@@QAE_NABUTreeStateNode@@PAU_TREEITEM@@@Z:near
UNDEF:0000F3F4                                         ; CODE XREF: FunctionListPanel::reload(void)+4E7p
UNDEF:0000F3F8 ; bool __thiscall TreeView::retrieveFoldingStateTo(TreeView *__hidden this, struct TreeStateNode *, struct _TREEITEM *)
UNDEF:0000F3F8                 extrn ?retrieveFoldingStateTo@TreeView@@QAE_NAAUTreeStateNode@@PAU_TREEITEM@@@Z:near
UNDEF:0000F3F8                                         ; CODE XREF: FunctionListPanel::reload(void)+62p
UNDEF:0000F3FC ; public: bool __thiscall TreeView::searchLeafAndBuildTree(class TreeView &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, int)
UNDEF:0000F3FC                 extrn ?searchLeafAndBuildTree@TreeView@@QAE_NAAV1@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z:near
UNDEF:0000F3FC                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+15Dp
UNDEF:0000F3FC                                         ; FunctionListPanel::searchFuncAndSwitchView(void)+164p
UNDEF:0000F400 ; void __thiscall TreeView::sort(TreeView *__hidden this, struct _TREEITEM *)
UNDEF:0000F400                 extrn ?sort@TreeView@@QAEXPAU_TREEITEM@@@Z:near
UNDEF:0000F400                                         ; CODE XREF: FunctionListPanel::sortOrUnsort(void)+65p
UNDEF:0000F400                                         ; FunctionListPanel::reload(void)+531p ...
UNDEF:0000F404 ; void __thiscall ScintillaEditView::getGenericText(ScintillaEditView *__hidden this, wchar_t *, unsigned int, int, int)
UNDEF:0000F404                 extrn ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z:near
UNDEF:0000F404                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+2D9p
UNDEF:0000F408 ; int __thiscall ScintillaEditView::searchInTarget(ScintillaEditView *__hidden this, const wchar_t *, int, int, int)
UNDEF:0000F408                 extrn ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z:near
UNDEF:0000F408                                         ; CODE XREF: FunctionListPanel::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &)+12Cp
UNDEF:0000F408                                         ; FunctionListPanel::getBodyClosePos(uint,wchar_t const *,wchar_t const *)+E2p ...
UNDEF:0000F40C ; void __thiscall ScintillaEditView::scrollPosToCenter(ScintillaEditView *__hidden this, int)
UNDEF:0000F40C                 extrn ?scrollPosToCenter@ScintillaEditView@@QAEXH@Z:near
UNDEF:0000F40C                                         ; CODE XREF: FunctionListPanel::openSelection(TreeView const &)+BBp
UNDEF:0000F410 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NativeLangSpeaker::getAttrNameStr(wchar_t const *, char const *, char const *)const
UNDEF:0000F410                 extrn ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z:near
UNDEF:0000F410                                         ; CODE XREF: FunctionListPanel::run_dlgProc(uint,uint,long)+3F8p
UNDEF:0000F410                                         ; FunctionListPanel::run_dlgProc(uint,uint,long)+463p
UNDEF:0000F414 ; __fastcall __security_check_cookie(x)
UNDEF:0000F414                 extrn @__security_check_cookie@4:near
UNDEF:0000F414                                         ; CODE XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+323p
UNDEF:0000F414                                         ; FunctionListPanel::sortOrUnsort(void)+1F3p ...
UNDEF:0000F418 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000F418                 extrn __CxxThrowException@8:near
UNDEF:0000F418                                         ; CODE XREF: __catch$??$_Uninit_copy@PAUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p
UNDEF:0000F418                                         ; __catch$??$_Uninit_copy@PBUTreeStateNode@@PAU1@V?$allocator@UTreeStateNode@@@std@@@std@@YAPAUTreeStateNode@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UTreeStateNode@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p ...
UNDEF:0000F41C                 extrn ___CxxFrameHandler3:near
UNDEF:0000F41C                                         ; CODE XREF: __ehhandler$?init@FunctionListPanel@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z+23j
UNDEF:0000F41C                                         ; __ehhandler$?sortOrUnsort@FunctionListPanel@@QAEXXZ+23j ...
UNDEF:0000F420 ; const type_info::`vftable'
UNDEF:0000F420                 extrn ??_7type_info@@6B@:near
UNDEF:0000F420                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:0000F420                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:0000F424 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0000F424                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0000F424                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:0000F428                 extrn ___security_cookie:near
UNDEF:0000F428                                         ; DATA XREF: FunctionListPanel::init(HINSTANCE__ *,HWND__ *,ScintillaEditView * *)+17r
UNDEF:0000F428                                         ; FunctionListPanel::sortOrUnsort(void)+17r ...
UNDEF:0000F42C                 extrn __fltused:near
UNDEF:0000F42C
UNDEF:0000F42C
UNDEF:0000F42C                 end