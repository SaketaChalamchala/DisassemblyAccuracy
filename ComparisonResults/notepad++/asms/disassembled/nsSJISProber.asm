.text$mn:00000000 ;
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : 182F2B232671CE31AAB9406550D9A4B2
.text$mn:00000000 ; Input CRC32 : 536BC278
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\nsSJISProber.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; public: virtual enum  nsProbingState __thiscall nsSJISProber::HandleData(char const *, unsigned int)
.text$mn:00000000                 public ?HandleData@nsSJISProber@@UAE?AW4nsProbingState@@PBDI@Z
.text$mn:00000000 ?HandleData@nsSJISProber@@UAE?AW4nsProbingState@@PBDI@Z proc near
.text$mn:00000000
.text$mn:00000000 var_14          = dword ptr -14h
.text$mn:00000000 var_10          = dword ptr -10h
.text$mn:00000000 var_C           = dword ptr -0Ch
.text$mn:00000000 var_8           = dword ptr -8
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000 arg_0           = dword ptr  8
.text$mn:00000000 arg_4           = dword ptr  0Ch
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 sub     esp, 14h
.text$mn:00000006                 push    esi
.text$mn:00000007                 mov     [ebp+var_4], ecx
.text$mn:0000000A                 mov     [ebp+var_8], 0
.text$mn:00000011                 jmp     short loc_1C
.text$mn:00000013 ; ---------------------------------------------------------------------------
.text$mn:00000013
.text$mn:00000013 loc_13:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint):loc_F8j
.text$mn:00000013                 mov     eax, [ebp+var_8]
.text$mn:00000016                 add     eax, 1
.text$mn:00000019                 mov     [ebp+var_8], eax
.text$mn:0000001C
.text$mn:0000001C loc_1C:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+11j
.text$mn:0000001C                 mov     ecx, [ebp+var_8]
.text$mn:0000001F                 cmp     ecx, [ebp+arg_4]
.text$mn:00000022                 jnb     loc_FD
.text$mn:00000028                 mov     edx, [ebp+arg_0]
.text$mn:0000002B                 add     edx, [ebp+var_8]
.text$mn:0000002E                 movzx   eax, byte ptr [edx]
.text$mn:00000031                 push    eax
.text$mn:00000032                 mov     ecx, [ebp+var_4]
.text$mn:00000035                 mov     ecx, [ecx+4]
.text$mn:00000038                 call    ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z ; nsCodingStateMachine::NextState(char)
.text$mn:0000003D                 mov     [ebp+var_10], eax
.text$mn:00000040                 cmp     [ebp+var_10], 2
.text$mn:00000044                 jnz     short loc_55
.text$mn:00000046                 mov     edx, [ebp+var_4]
.text$mn:00000049                 mov     dword ptr [edx+8], 1
.text$mn:00000050                 jmp     loc_FD
.text$mn:00000055 ; ---------------------------------------------------------------------------
.text$mn:00000055
.text$mn:00000055 loc_55:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+44j
.text$mn:00000055                 cmp     [ebp+var_10], 0
.text$mn:00000059                 jnz     loc_F8
.text$mn:0000005F                 mov     eax, [ebp+var_4]
.text$mn:00000062                 mov     ecx, [eax+4]    ; this
.text$mn:00000065                 call    ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ ; nsCodingStateMachine::GetCurrentCharLen(void)
.text$mn:0000006A                 mov     [ebp+var_C], eax
.text$mn:0000006D                 cmp     [ebp+var_8], 0
.text$mn:00000071                 jnz     short loc_C1
.text$mn:00000073                 mov     ecx, 1
.text$mn:00000078                 imul    edx, ecx, 0
.text$mn:0000007B                 mov     eax, 1
.text$mn:00000080                 shl     eax, 0
.text$mn:00000083                 mov     ecx, [ebp+var_4]
.text$mn:00000086                 mov     esi, [ebp+arg_0]
.text$mn:00000089                 mov     dl, [esi+edx]
.text$mn:0000008C                 mov     [ecx+eax+5Ch], dl
.text$mn:00000090                 mov     eax, [ebp+var_C]
.text$mn:00000093                 push    eax             ; unsigned int
.text$mn:00000094                 mov     ecx, [ebp+var_4]
.text$mn:00000097                 add     ecx, 5Eh ; '^'
.text$mn:0000009A                 sub     ecx, [ebp+var_C]
.text$mn:0000009D                 push    ecx             ; char *
.text$mn:0000009E                 mov     ecx, [ebp+var_4]
.text$mn:000000A1                 add     ecx, 0Ch        ; this
.text$mn:000000A4                 call    ?HandleOneChar@JapaneseContextAnalysis@@QAEXPBDI@Z ; JapaneseContextAnalysis::HandleOneChar(char const *,uint)
.text$mn:000000A9                 mov     edx, [ebp+var_C]
.text$mn:000000AC                 push    edx             ; unsigned int
.text$mn:000000AD                 mov     eax, [ebp+var_4]
.text$mn:000000B0                 add     eax, 5Ch ; '\'
.text$mn:000000B3                 push    eax             ; char *
.text$mn:000000B4                 mov     ecx, [ebp+var_4]
.text$mn:000000B7                 add     ecx, 3Ch ; '<'  ; this
.text$mn:000000BA                 call    ?HandleOneChar@CharDistributionAnalysis@@QAEXPBDI@Z ; CharDistributionAnalysis::HandleOneChar(char const *,uint)
.text$mn:000000BF                 jmp     short loc_F8
.text$mn:000000C1 ; ---------------------------------------------------------------------------
.text$mn:000000C1
.text$mn:000000C1 loc_C1:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+71j
.text$mn:000000C1                 mov     ecx, [ebp+var_C]
.text$mn:000000C4                 push    ecx             ; unsigned int
.text$mn:000000C5                 mov     edx, [ebp+var_8]
.text$mn:000000C8                 mov     eax, [ebp+arg_0]
.text$mn:000000CB                 lea     ecx, [eax+edx+1]
.text$mn:000000CF                 sub     ecx, [ebp+var_C]
.text$mn:000000D2                 push    ecx             ; char *
.text$mn:000000D3                 mov     ecx, [ebp+var_4]
.text$mn:000000D6                 add     ecx, 0Ch        ; this
.text$mn:000000D9                 call    ?HandleOneChar@JapaneseContextAnalysis@@QAEXPBDI@Z ; JapaneseContextAnalysis::HandleOneChar(char const *,uint)
.text$mn:000000DE                 mov     edx, [ebp+var_C]
.text$mn:000000E1                 push    edx             ; unsigned int
.text$mn:000000E2                 mov     eax, [ebp+var_8]
.text$mn:000000E5                 mov     ecx, [ebp+arg_0]
.text$mn:000000E8                 lea     edx, [ecx+eax-1]
.text$mn:000000EC                 push    edx             ; char *
.text$mn:000000ED                 mov     ecx, [ebp+var_4]
.text$mn:000000F0                 add     ecx, 3Ch ; '<'  ; this
.text$mn:000000F3                 call    ?HandleOneChar@CharDistributionAnalysis@@QAEXPBDI@Z ; CharDistributionAnalysis::HandleOneChar(char const *,uint)
.text$mn:000000F8
.text$mn:000000F8 loc_F8:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+59j
.text$mn:000000F8                                         ; nsSJISProber::HandleData(char const *,uint)+BFj
.text$mn:000000F8                 jmp     loc_13
.text$mn:000000FD ; ---------------------------------------------------------------------------
.text$mn:000000FD
.text$mn:000000FD loc_FD:                                 ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+22j
.text$mn:000000FD                                         ; nsSJISProber::HandleData(char const *,uint)+50j
.text$mn:000000FD                 mov     eax, 1
.text$mn:00000102                 imul    ecx, eax, 0
.text$mn:00000105                 mov     edx, [ebp+arg_0]
.text$mn:00000108                 add     edx, [ebp+arg_4]
.text$mn:0000010B                 mov     eax, [ebp+var_4]
.text$mn:0000010E                 mov     dl, [edx-1]
.text$mn:00000111                 mov     [eax+ecx+5Ch], dl
.text$mn:00000115                 mov     eax, [ebp+var_4]
.text$mn:00000118                 cmp     dword ptr [eax+8], 0
.text$mn:0000011C                 jnz     short loc_158
.text$mn:0000011E                 mov     ecx, [ebp+var_4]
.text$mn:00000121                 add     ecx, 0Ch        ; this
.text$mn:00000124                 call    ?GotEnoughData@JapaneseContextAnalysis@@QAE_NXZ ; JapaneseContextAnalysis::GotEnoughData(void)
.text$mn:00000129                 movzx   ecx, al
.text$mn:0000012C                 test    ecx, ecx
.text$mn:0000012E                 jz      short loc_158
.text$mn:00000130                 mov     edx, [ebp+var_4]
.text$mn:00000133                 mov     eax, [edx]
.text$mn:00000135                 mov     ecx, [ebp+var_4]
.text$mn:00000138                 mov     edx, [eax+14h]
.text$mn:0000013B                 call    edx
.text$mn:0000013D                 fstp    [ebp+var_14]
.text$mn:00000140                 movss   xmm0, [ebp+var_14]
.text$mn:00000145                 comiss  xmm0, __real@3f733333
.text$mn:0000014C                 jbe     short loc_158
.text$mn:0000014E                 mov     eax, [ebp+var_4]
.text$mn:00000151                 mov     dword ptr [eax+8], 1
.text$mn:00000158
.text$mn:00000158 loc_158:                                ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+11Cj
.text$mn:00000158                                         ; nsSJISProber::HandleData(char const *,uint)+12Ej ...
.text$mn:00000158                 mov     ecx, [ebp+var_4]
.text$mn:0000015B                 mov     eax, [ecx+8]
.text$mn:0000015E                 pop     esi
.text$mn:0000015F                 mov     esp, ebp
.text$mn:00000161                 pop     ebp
.text$mn:00000162                 retn    8
.text$mn:00000162 ?HandleData@nsSJISProber@@UAE?AW4nsProbingState@@PBDI@Z endp
.text$mn:00000162
.text$mn:00000162 ; ---------------------------------------------------------------------------
.text$mn:00000165                 align 10h
.text$mn:00000170
.text$mn:00000170 ; =============== S U B R O U T I N E =======================================
.text$mn:00000170
.text$mn:00000170 ; Attributes: bp-based frame
.text$mn:00000170
.text$mn:00000170 ; void __thiscall nsSJISProber::Reset(nsSJISProber *__hidden this)
.text$mn:00000170                 public ?Reset@nsSJISProber@@UAEXXZ
.text$mn:00000170 ?Reset@nsSJISProber@@UAEXXZ proc near
.text$mn:00000170
.text$mn:00000170 var_4           = dword ptr -4
.text$mn:00000170
.text$mn:00000170                 push    ebp
.text$mn:00000171                 mov     ebp, esp
.text$mn:00000173                 push    ecx
.text$mn:00000174                 mov     [ebp+var_4], ecx
.text$mn:00000177                 mov     eax, [ebp+var_4]
.text$mn:0000017A                 mov     ecx, [eax+4]    ; this
.text$mn:0000017D                 call    ?Reset@nsCodingStateMachine@@QAEXXZ ; nsCodingStateMachine::Reset(void)
.text$mn:00000182                 mov     ecx, [ebp+var_4]
.text$mn:00000185                 mov     dword ptr [ecx+8], 0
.text$mn:0000018C                 mov     edx, [ebp+var_4]
.text$mn:0000018F                 movzx   eax, byte ptr [edx+5Eh]
.text$mn:00000193                 push    eax             ; bool
.text$mn:00000194                 mov     ecx, [ebp+var_4]
.text$mn:00000197                 add     ecx, 0Ch        ; this
.text$mn:0000019A                 call    ?Reset@JapaneseContextAnalysis@@QAEX_N@Z ; JapaneseContextAnalysis::Reset(bool)
.text$mn:0000019F                 mov     ecx, [ebp+var_4]
.text$mn:000001A2                 movzx   edx, byte ptr [ecx+5Eh]
.text$mn:000001A6                 push    edx             ; bool
.text$mn:000001A7                 mov     ecx, [ebp+var_4]
.text$mn:000001AA                 add     ecx, 3Ch ; '<'  ; this
.text$mn:000001AD                 call    ?Reset@CharDistributionAnalysis@@QAEX_N@Z ; CharDistributionAnalysis::Reset(bool)
.text$mn:000001B2                 mov     esp, ebp
.text$mn:000001B4                 pop     ebp
.text$mn:000001B5                 retn
.text$mn:000001B5 ?Reset@nsSJISProber@@UAEXXZ endp
.text$mn:000001B5
.text$mn:000001B5 ; ---------------------------------------------------------------------------
.text$mn:000001B6                 align 10h
.text$mn:000001C0
.text$mn:000001C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000001C0
.text$mn:000001C0 ; Attributes: bp-based frame
.text$mn:000001C0
.text$mn:000001C0 ; float __thiscall nsSJISProber::GetConfidence(nsSJISProber *__hidden this)
.text$mn:000001C0                 public ?GetConfidence@nsSJISProber@@UAEMXZ
.text$mn:000001C0 ?GetConfidence@nsSJISProber@@UAEMXZ proc near
.text$mn:000001C0
.text$mn:000001C0 var_10          = dword ptr -10h
.text$mn:000001C0 var_C           = dword ptr -0Ch
.text$mn:000001C0 var_8           = dword ptr -8
.text$mn:000001C0 var_4           = dword ptr -4
.text$mn:000001C0
.text$mn:000001C0                 push    ebp
.text$mn:000001C1                 mov     ebp, esp
.text$mn:000001C3                 sub     esp, 10h
.text$mn:000001C6                 mov     [ebp+var_4], ecx
.text$mn:000001C9                 mov     ecx, [ebp+var_4]
.text$mn:000001CC                 add     ecx, 0Ch        ; this
.text$mn:000001CF                 call    ?GetConfidence@JapaneseContextAnalysis@@QAEMXZ ; JapaneseContextAnalysis::GetConfidence(void)
.text$mn:000001D4                 fstp    [ebp+var_8]
.text$mn:000001D7                 mov     ecx, [ebp+var_4]
.text$mn:000001DA                 add     ecx, 3Ch ; '<'  ; this
.text$mn:000001DD                 call    ?GetConfidence@CharDistributionAnalysis@@QAEMXZ ; CharDistributionAnalysis::GetConfidence(void)
.text$mn:000001E2                 fstp    [ebp+var_C]
.text$mn:000001E5                 movss   xmm0, [ebp+var_8]
.text$mn:000001EA                 comiss  xmm0, [ebp+var_C]
.text$mn:000001EE                 jbe     short loc_1FC
.text$mn:000001F0                 movss   xmm0, [ebp+var_8]
.text$mn:000001F5                 movss   [ebp+var_10], xmm0
.text$mn:000001FA                 jmp     short loc_206
.text$mn:000001FC ; ---------------------------------------------------------------------------
.text$mn:000001FC
.text$mn:000001FC loc_1FC:                                ; CODE XREF: nsSJISProber::GetConfidence(void)+2Ej
.text$mn:000001FC                 movss   xmm0, [ebp+var_C]
.text$mn:00000201                 movss   [ebp+var_10], xmm0
.text$mn:00000206
.text$mn:00000206 loc_206:                                ; CODE XREF: nsSJISProber::GetConfidence(void)+3Aj
.text$mn:00000206                 fld     [ebp+var_10]
.text$mn:00000209                 mov     esp, ebp
.text$mn:0000020B                 pop     ebp
.text$mn:0000020C                 retn
.text$mn:0000020C ?GetConfidence@nsSJISProber@@UAEMXZ endp
.text$mn:0000020C
.text$mn:0000020C ; ---------------------------------------------------------------------------
.text$mn:0000020D                 align 10h
.text$mn:0000020D _text$mn        ends
.text$mn:0000020D
.text$mn:00000210 ; ===========================================================================
.text$mn:00000210
.text$mn:00000210 ; Segment type: Pure code
.text$mn:00000210 ; Segment permissions: Read/Execute
.text$mn:00000210 _text$mn        segment para public 'CODE' use32
.text$mn:00000210                 assume cs:_text$mn
.text$mn:00000210                 ;org 210h
.text$mn:00000210 ; COMDAT (pick any)
.text$mn:00000210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000210
.text$mn:00000210 ; =============== S U B R O U T I N E =======================================
.text$mn:00000210
.text$mn:00000210 ; Attributes: bp-based frame
.text$mn:00000210
.text$mn:00000210 ; unsigned int __thiscall nsCodingStateMachine::GetCurrentCharLen(nsCodingStateMachine *__hidden this)
.text$mn:00000210                 public ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ
.text$mn:00000210 ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ proc near
.text$mn:00000210                                         ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+65p
.text$mn:00000210
.text$mn:00000210 var_4           = dword ptr -4
.text$mn:00000210
.text$mn:00000210                 push    ebp
.text$mn:00000211                 mov     ebp, esp
.text$mn:00000213                 push    ecx
.text$mn:00000214                 mov     [ebp+var_4], ecx
.text$mn:00000217                 mov     eax, [ebp+var_4]
.text$mn:0000021A                 mov     eax, [eax+4]
.text$mn:0000021D                 mov     esp, ebp
.text$mn:0000021F                 pop     ebp
.text$mn:00000220                 retn
.text$mn:00000220 ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ endp
.text$mn:00000220
.text$mn:00000220 ; ---------------------------------------------------------------------------
.text$mn:00000221                 align 4
.text$mn:00000221 _text$mn        ends
.text$mn:00000221
.text$mn:00000224 ; ===========================================================================
.text$mn:00000224
.text$mn:00000224 ; Segment type: Pure code
.text$mn:00000224 ; Segment permissions: Read/Execute
.text$mn:00000224 _text$mn        segment para public 'CODE' use32
.text$mn:00000224                 assume cs:_text$mn
.text$mn:00000224                 ;org 224h
.text$mn:00000224 ; COMDAT (pick any)
.text$mn:00000224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000224
.text$mn:00000224 ; =============== S U B R O U T I N E =======================================
.text$mn:00000224
.text$mn:00000224 ; Attributes: bp-based frame
.text$mn:00000224
.text$mn:00000224 ; bool __thiscall JapaneseContextAnalysis::GotEnoughData(JapaneseContextAnalysis *__hidden this)
.text$mn:00000224                 public ?GotEnoughData@JapaneseContextAnalysis@@QAE_NXZ
.text$mn:00000224 ?GotEnoughData@JapaneseContextAnalysis@@QAE_NXZ proc near
.text$mn:00000224                                         ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+124p
.text$mn:00000224
.text$mn:00000224 var_8           = dword ptr -8
.text$mn:00000224 var_4           = dword ptr -4
.text$mn:00000224
.text$mn:00000224                 push    ebp
.text$mn:00000225                 mov     ebp, esp
.text$mn:00000227                 sub     esp, 8
.text$mn:0000022A                 mov     [ebp+var_8], ecx
.text$mn:0000022D                 mov     eax, [ebp+var_8]
.text$mn:00000230                 cmp     dword ptr [eax+1Ch], 64h ; 'd'
.text$mn:00000234                 jbe     short loc_23F
.text$mn:00000236                 mov     [ebp+var_4], 1
.text$mn:0000023D                 jmp     short loc_246
.text$mn:0000023F ; ---------------------------------------------------------------------------
.text$mn:0000023F
.text$mn:0000023F loc_23F:                                ; CODE XREF: JapaneseContextAnalysis::GotEnoughData(void)+10j
.text$mn:0000023F                 mov     [ebp+var_4], 0
.text$mn:00000246
.text$mn:00000246 loc_246:                                ; CODE XREF: JapaneseContextAnalysis::GotEnoughData(void)+19j
.text$mn:00000246                 mov     al, byte ptr [ebp+var_4]
.text$mn:00000249                 mov     esp, ebp
.text$mn:0000024B                 pop     ebp
.text$mn:0000024C                 retn
.text$mn:0000024C ?GotEnoughData@JapaneseContextAnalysis@@QAE_NXZ endp
.text$mn:0000024C
.text$mn:0000024C ; ---------------------------------------------------------------------------
.text$mn:0000024D                 align 10h
.text$mn:0000024D _text$mn        ends
.text$mn:0000024D
.text$mn:00000250 ; ===========================================================================
.text$mn:00000250
.text$mn:00000250 ; Segment type: Pure code
.text$mn:00000250 ; Segment permissions: Read/Execute
.text$mn:00000250 _text$mn        segment para public 'CODE' use32
.text$mn:00000250                 assume cs:_text$mn
.text$mn:00000250                 ;org 250h
.text$mn:00000250 ; COMDAT (pick any)
.text$mn:00000250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000250
.text$mn:00000250 ; =============== S U B R O U T I N E =======================================
.text$mn:00000250
.text$mn:00000250 ; Attributes: bp-based frame
.text$mn:00000250
.text$mn:00000250 ; void __thiscall CharDistributionAnalysis::HandleOneChar(CharDistributionAnalysis *this, const char *, unsigned int)
.text$mn:00000250                 public ?HandleOneChar@CharDistributionAnalysis@@QAEXPBDI@Z
.text$mn:00000250 ?HandleOneChar@CharDistributionAnalysis@@QAEXPBDI@Z proc near
.text$mn:00000250                                         ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+BAp
.text$mn:00000250                                         ; nsSJISProber::HandleData(char const *,uint)+F3p
.text$mn:00000250
.text$mn:00000250 var_C           = dword ptr -0Ch
.text$mn:00000250 var_8           = dword ptr -8
.text$mn:00000250 var_4           = dword ptr -4
.text$mn:00000250 arg_0           = dword ptr  8
.text$mn:00000250 arg_4           = dword ptr  0Ch
.text$mn:00000250
.text$mn:00000250                 push    ebp
.text$mn:00000251                 mov     ebp, esp
.text$mn:00000253                 sub     esp, 0Ch
.text$mn:00000256                 mov     [ebp+var_4], ecx
.text$mn:00000259                 cmp     [ebp+arg_4], 2
.text$mn:0000025D                 jnz     short loc_274
.text$mn:0000025F                 mov     eax, [ebp+arg_0]
.text$mn:00000262                 push    eax
.text$mn:00000263                 mov     ecx, [ebp+var_4]
.text$mn:00000266                 mov     edx, [ecx]
.text$mn:00000268                 mov     ecx, [ebp+var_4]
.text$mn:0000026B                 mov     eax, [edx]
.text$mn:0000026D                 call    eax
.text$mn:0000026F                 mov     [ebp+var_C], eax
.text$mn:00000272                 jmp     short loc_27B
.text$mn:00000274 ; ---------------------------------------------------------------------------
.text$mn:00000274
.text$mn:00000274 loc_274:                                ; CODE XREF: CharDistributionAnalysis::HandleOneChar(char const *,uint)+Dj
.text$mn:00000274                 mov     [ebp+var_C], 0FFFFFFFFh
.text$mn:0000027B
.text$mn:0000027B loc_27B:                                ; CODE XREF: CharDistributionAnalysis::HandleOneChar(char const *,uint)+22j
.text$mn:0000027B                 mov     ecx, [ebp+var_C]
.text$mn:0000027E                 mov     [ebp+var_8], ecx
.text$mn:00000281                 cmp     [ebp+var_8], 0
.text$mn:00000285                 jl      short loc_2C5
.text$mn:00000287                 mov     edx, [ebp+var_4]
.text$mn:0000028A                 mov     eax, [edx+0Ch]
.text$mn:0000028D                 add     eax, 1
.text$mn:00000290                 mov     ecx, [ebp+var_4]
.text$mn:00000293                 mov     [ecx+0Ch], eax
.text$mn:00000296                 mov     edx, [ebp+var_4]
.text$mn:00000299                 mov     eax, [ebp+var_8]
.text$mn:0000029C                 cmp     eax, [edx+18h]
.text$mn:0000029F                 jnb     short loc_2C5
.text$mn:000002A1                 mov     ecx, [ebp+var_4]
.text$mn:000002A4                 mov     edx, [ecx+14h]
.text$mn:000002A7                 mov     eax, [ebp+var_8]
.text$mn:000002AA                 movsx   ecx, word ptr [edx+eax*2]
.text$mn:000002AE                 cmp     ecx, 200h
.text$mn:000002B4                 jge     short loc_2C5
.text$mn:000002B6                 mov     edx, [ebp+var_4]
.text$mn:000002B9                 mov     eax, [edx+8]
.text$mn:000002BC                 add     eax, 1
.text$mn:000002BF                 mov     ecx, [ebp+var_4]
.text$mn:000002C2                 mov     [ecx+8], eax
.text$mn:000002C5
.text$mn:000002C5 loc_2C5:                                ; CODE XREF: CharDistributionAnalysis::HandleOneChar(char const *,uint)+35j
.text$mn:000002C5                                         ; CharDistributionAnalysis::HandleOneChar(char const *,uint)+4Fj ...
.text$mn:000002C5                 mov     esp, ebp
.text$mn:000002C7                 pop     ebp
.text$mn:000002C8                 retn    8
.text$mn:000002C8 ?HandleOneChar@CharDistributionAnalysis@@QAEXPBDI@Z endp
.text$mn:000002C8
.text$mn:000002C8 ; ---------------------------------------------------------------------------
.text$mn:000002CB                 align 4
.text$mn:000002CB _text$mn        ends
.text$mn:000002CB
.text$mn:000002CC ; ===========================================================================
.text$mn:000002CC
.text$mn:000002CC ; Segment type: Pure code
.text$mn:000002CC ; Segment permissions: Read/Execute
.text$mn:000002CC _text$mn        segment para public 'CODE' use32
.text$mn:000002CC                 assume cs:_text$mn
.text$mn:000002CC                 ;org 2CCh
.text$mn:000002CC ; COMDAT (pick any)
.text$mn:000002CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000002CC
.text$mn:000002CC ; =============== S U B R O U T I N E =======================================
.text$mn:000002CC
.text$mn:000002CC ; Attributes: bp-based frame
.text$mn:000002CC
.text$mn:000002CC ; void __thiscall JapaneseContextAnalysis::HandleOneChar(JapaneseContextAnalysis *this, const char *, unsigned int)
.text$mn:000002CC                 public ?HandleOneChar@JapaneseContextAnalysis@@QAEXPBDI@Z
.text$mn:000002CC ?HandleOneChar@JapaneseContextAnalysis@@QAEXPBDI@Z proc near
.text$mn:000002CC                                         ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+A4p
.text$mn:000002CC                                         ; nsSJISProber::HandleData(char const *,uint)+D9p
.text$mn:000002CC
.text$mn:000002CC var_C           = dword ptr -0Ch
.text$mn:000002CC var_8           = dword ptr -8
.text$mn:000002CC var_4           = dword ptr -4
.text$mn:000002CC arg_0           = dword ptr  8
.text$mn:000002CC arg_4           = dword ptr  0Ch
.text$mn:000002CC
.text$mn:000002CC                 push    ebp
.text$mn:000002CD                 mov     ebp, esp
.text$mn:000002CF                 sub     esp, 0Ch
.text$mn:000002D2                 mov     [ebp+var_4], ecx
.text$mn:000002D5                 mov     eax, [ebp+var_4]
.text$mn:000002D8                 cmp     dword ptr [eax+1Ch], 3E8h
.text$mn:000002DF                 jbe     short loc_2E8
.text$mn:000002E1                 mov     ecx, [ebp+var_4]
.text$mn:000002E4                 mov     byte ptr [ecx+2Ch], 1
.text$mn:000002E8
.text$mn:000002E8 loc_2E8:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+13j
.text$mn:000002E8                 mov     edx, [ebp+var_4]
.text$mn:000002EB                 movzx   eax, byte ptr [edx+2Ch]
.text$mn:000002EF                 test    eax, eax
.text$mn:000002F1                 jz      short loc_2F8
.text$mn:000002F3                 jmp     loc_37C
.text$mn:000002F8 ; ---------------------------------------------------------------------------
.text$mn:000002F8
.text$mn:000002F8 loc_2F8:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+25j
.text$mn:000002F8                 cmp     [ebp+arg_4], 2
.text$mn:000002FC                 jnz     short loc_313
.text$mn:000002FE                 mov     ecx, [ebp+arg_0]
.text$mn:00000301                 push    ecx
.text$mn:00000302                 mov     edx, [ebp+var_4]
.text$mn:00000305                 mov     eax, [edx]
.text$mn:00000307                 mov     ecx, [ebp+var_4]
.text$mn:0000030A                 mov     edx, [eax]
.text$mn:0000030C                 call    edx
.text$mn:0000030E                 mov     [ebp+var_C], eax
.text$mn:00000311                 jmp     short loc_31A
.text$mn:00000313 ; ---------------------------------------------------------------------------
.text$mn:00000313
.text$mn:00000313 loc_313:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+30j
.text$mn:00000313                 mov     [ebp+var_C], 0FFFFFFFFh
.text$mn:0000031A
.text$mn:0000031A loc_31A:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+45j
.text$mn:0000031A                 mov     eax, [ebp+var_C]
.text$mn:0000031D                 mov     [ebp+var_8], eax
.text$mn:00000320                 cmp     [ebp+var_8], 0FFFFFFFFh
.text$mn:00000324                 jz      short loc_373
.text$mn:00000326                 mov     ecx, [ebp+var_4]
.text$mn:00000329                 cmp     dword ptr [ecx+24h], 0FFFFFFFFh
.text$mn:0000032D                 jz      short loc_373
.text$mn:0000032F                 mov     edx, [ebp+var_4]
.text$mn:00000332                 mov     eax, [edx+1Ch]
.text$mn:00000335                 add     eax, 1
.text$mn:00000338                 mov     ecx, [ebp+var_4]
.text$mn:0000033B                 mov     [ecx+1Ch], eax
.text$mn:0000033E                 mov     edx, [ebp+var_4]
.text$mn:00000341                 imul    eax, [edx+24h], 53h ; 'S'
.text$mn:00000345                 mov     ecx, [ebp+var_8]
.text$mn:00000348                 movzx   edx, byte ptr ds:?jp2CharContext@@3QAY0FD@$$CBEA[eax+ecx] ; uchar const (* jp2CharContext)[83]
.text$mn:00000350                 mov     eax, [ebp+var_4]
.text$mn:00000353                 mov     ecx, [eax+edx*4+4]
.text$mn:00000357                 add     ecx, 1
.text$mn:0000035A                 mov     edx, [ebp+var_4]
.text$mn:0000035D                 imul    eax, [edx+24h], 53h ; 'S'
.text$mn:00000361                 mov     edx, [ebp+var_8]
.text$mn:00000364                 movzx   eax, byte ptr ds:?jp2CharContext@@3QAY0FD@$$CBEA[eax+edx] ; uchar const (* jp2CharContext)[83]
.text$mn:0000036C                 mov     edx, [ebp+var_4]
.text$mn:0000036F                 mov     [edx+eax*4+4], ecx
.text$mn:00000373
.text$mn:00000373 loc_373:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+58j
.text$mn:00000373                                         ; JapaneseContextAnalysis::HandleOneChar(char const *,uint)+61j
.text$mn:00000373                 mov     eax, [ebp+var_4]
.text$mn:00000376                 mov     ecx, [ebp+var_8]
.text$mn:00000379                 mov     [eax+24h], ecx
.text$mn:0000037C
.text$mn:0000037C loc_37C:                                ; CODE XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+27j
.text$mn:0000037C                 mov     esp, ebp
.text$mn:0000037E                 pop     ebp
.text$mn:0000037F                 retn    8
.text$mn:0000037F ?HandleOneChar@JapaneseContextAnalysis@@QAEXPBDI@Z endp
.text$mn:0000037F
.text$mn:0000037F ; ---------------------------------------------------------------------------
.text$mn:00000382                 align 4
.text$mn:00000382 _text$mn        ends
.text$mn:00000382
.text$mn:00000384 ; ===========================================================================
.text$mn:00000384
.text$mn:00000384 ; Segment type: Pure code
.text$mn:00000384 ; Segment permissions: Read/Execute
.text$mn:00000384 _text$mn        segment para public 'CODE' use32
.text$mn:00000384                 assume cs:_text$mn
.text$mn:00000384                 ;org 384h
.text$mn:00000384 ; COMDAT (pick any)
.text$mn:00000384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000384
.text$mn:00000384 ; =============== S U B R O U T I N E =======================================
.text$mn:00000384
.text$mn:00000384 ; Attributes: bp-based frame
.text$mn:00000384
.text$mn:00000384 ; public: enum  nsSMState __thiscall nsCodingStateMachine::NextState(char)
.text$mn:00000384                 public ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z
.text$mn:00000384 ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z proc near
.text$mn:00000384                                         ; CODE XREF: nsSJISProber::HandleData(char const *,uint)+38p
.text$mn:00000384
.text$mn:00000384 var_8           = dword ptr -8
.text$mn:00000384 var_4           = dword ptr -4
.text$mn:00000384 arg_0           = byte ptr  8
.text$mn:00000384
.text$mn:00000384                 push    ebp
.text$mn:00000385                 mov     ebp, esp
.text$mn:00000387                 sub     esp, 8
.text$mn:0000038A                 push    esi
.text$mn:0000038B                 mov     [ebp+var_4], ecx
.text$mn:0000038E                 mov     eax, [ebp+var_4]
.text$mn:00000391                 mov     edx, [eax+0Ch]
.text$mn:00000394                 movzx   eax, [ebp+arg_0]
.text$mn:00000398                 mov     ecx, [ebp+var_4]
.text$mn:0000039B                 mov     ecx, [ecx+0Ch]
.text$mn:0000039E                 mov     ecx, [ecx]
.text$mn:000003A0                 sar     eax, cl
.text$mn:000003A2                 mov     edx, [edx+10h]
.text$mn:000003A5                 movzx   esi, [ebp+arg_0]
.text$mn:000003A9                 mov     ecx, [ebp+var_4]
.text$mn:000003AC                 mov     ecx, [ecx+0Ch]
.text$mn:000003AF                 and     esi, [ecx+4]
.text$mn:000003B2                 mov     ecx, [ebp+var_4]
.text$mn:000003B5                 mov     ecx, [ecx+0Ch]
.text$mn:000003B8                 mov     ecx, [ecx+8]
.text$mn:000003BB                 shl     esi, cl
.text$mn:000003BD                 mov     edx, [edx+eax*4]
.text$mn:000003C0                 mov     ecx, esi
.text$mn:000003C2                 shr     edx, cl
.text$mn:000003C4                 mov     eax, [ebp+var_4]
.text$mn:000003C7                 mov     ecx, [eax+0Ch]
.text$mn:000003CA                 and     edx, [ecx+0Ch]
.text$mn:000003CD                 mov     [ebp+var_8], edx
.text$mn:000003D0                 mov     edx, [ebp+var_4]
.text$mn:000003D3                 cmp     dword ptr [edx], 0
.text$mn:000003D6                 jnz     short loc_3F7
.text$mn:000003D8                 mov     eax, [ebp+var_4]
.text$mn:000003DB                 mov     dword ptr [eax+8], 0
.text$mn:000003E2                 mov     ecx, [ebp+var_4]
.text$mn:000003E5                 mov     edx, [ecx+0Ch]
.text$mn:000003E8                 mov     eax, [edx+2Ch]
.text$mn:000003EB                 mov     ecx, [ebp+var_4]
.text$mn:000003EE                 mov     edx, [ebp+var_8]
.text$mn:000003F1                 mov     eax, [eax+edx*4]
.text$mn:000003F4                 mov     [ecx+4], eax
.text$mn:000003F7
.text$mn:000003F7 loc_3F7:                                ; CODE XREF: nsCodingStateMachine::NextState(char)+52j
.text$mn:000003F7                 mov     ecx, [ebp+var_4]
.text$mn:000003FA                 mov     edx, [ecx+0Ch]
.text$mn:000003FD                 mov     eax, [ebp+var_4]
.text$mn:00000400                 mov     ecx, [eax+0Ch]
.text$mn:00000403                 mov     eax, [ebp+var_4]
.text$mn:00000406                 mov     eax, [eax]
.text$mn:00000408                 imul    eax, [ecx+14h]
.text$mn:0000040C                 add     eax, [ebp+var_8]
.text$mn:0000040F                 mov     ecx, [ebp+var_4]
.text$mn:00000412                 mov     ecx, [ecx+0Ch]
.text$mn:00000415                 mov     ecx, [ecx+18h]
.text$mn:00000418                 shr     eax, cl
.text$mn:0000041A                 mov     edx, [edx+28h]
.text$mn:0000041D                 mov     ecx, [ebp+var_4]
.text$mn:00000420                 mov     ecx, [ecx+0Ch]
.text$mn:00000423                 mov     esi, [ebp+var_4]
.text$mn:00000426                 mov     esi, [esi]
.text$mn:00000428                 imul    esi, [ecx+14h]
.text$mn:0000042C                 add     esi, [ebp+var_8]
.text$mn:0000042F                 mov     ecx, [ebp+var_4]
.text$mn:00000432                 mov     ecx, [ecx+0Ch]
.text$mn:00000435                 and     esi, [ecx+1Ch]
.text$mn:00000438                 mov     ecx, [ebp+var_4]
.text$mn:0000043B                 mov     ecx, [ecx+0Ch]
.text$mn:0000043E                 mov     ecx, [ecx+20h]
.text$mn:00000441                 shl     esi, cl
.text$mn:00000443                 mov     edx, [edx+eax*4]
.text$mn:00000446                 mov     ecx, esi
.text$mn:00000448                 shr     edx, cl
.text$mn:0000044A                 mov     eax, [ebp+var_4]
.text$mn:0000044D                 mov     ecx, [eax+0Ch]
.text$mn:00000450                 and     edx, [ecx+24h]
.text$mn:00000453                 mov     eax, [ebp+var_4]
.text$mn:00000456                 mov     [eax], edx
.text$mn:00000458                 mov     ecx, [ebp+var_4]
.text$mn:0000045B                 mov     edx, [ecx+8]
.text$mn:0000045E                 add     edx, 1
.text$mn:00000461                 mov     eax, [ebp+var_4]
.text$mn:00000464                 mov     [eax+8], edx
.text$mn:00000467                 mov     ecx, [ebp+var_4]
.text$mn:0000046A                 mov     eax, [ecx]
.text$mn:0000046C                 pop     esi
.text$mn:0000046D                 mov     esp, ebp
.text$mn:0000046F                 pop     ebp
.text$mn:00000470                 retn    4
.text$mn:00000470 ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z endp
.text$mn:00000470
.text$mn:00000470 ; ---------------------------------------------------------------------------
.text$mn:00000473                 align 4
.text$mn:00000473 _text$mn        ends
.text$mn:00000473
.text$mn:00000474 ; ===========================================================================
.text$mn:00000474
.text$mn:00000474 ; Segment type: Pure code
.text$mn:00000474 ; Segment permissions: Read/Execute
.text$mn:00000474 _text$mn        segment para public 'CODE' use32
.text$mn:00000474                 assume cs:_text$mn
.text$mn:00000474                 ;org 474h
.text$mn:00000474 ; COMDAT (pick any)
.text$mn:00000474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000474
.text$mn:00000474 ; =============== S U B R O U T I N E =======================================
.text$mn:00000474
.text$mn:00000474 ; Attributes: bp-based frame
.text$mn:00000474
.text$mn:00000474 ; void __thiscall CharDistributionAnalysis::Reset(CharDistributionAnalysis *this, bool)
.text$mn:00000474                 public ?Reset@CharDistributionAnalysis@@QAEX_N@Z
.text$mn:00000474 ?Reset@CharDistributionAnalysis@@QAEX_N@Z proc near
.text$mn:00000474                                         ; CODE XREF: nsSJISProber::Reset(void)+3Dp
.text$mn:00000474
.text$mn:00000474 var_8           = dword ptr -8
.text$mn:00000474 var_4           = dword ptr -4
.text$mn:00000474 arg_0           = byte ptr  8
.text$mn:00000474
.text$mn:00000474                 push    ebp
.text$mn:00000475                 mov     ebp, esp
.text$mn:00000477                 sub     esp, 8
.text$mn:0000047A                 mov     [ebp+var_4], ecx
.text$mn:0000047D                 mov     eax, [ebp+var_4]
.text$mn:00000480                 mov     byte ptr [eax+4], 0
.text$mn:00000484                 mov     ecx, [ebp+var_4]
.text$mn:00000487                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000048E                 mov     edx, [ebp+var_4]
.text$mn:00000491                 mov     dword ptr [edx+8], 0
.text$mn:00000498                 movzx   eax, [ebp+arg_0]
.text$mn:0000049C                 test    eax, eax
.text$mn:0000049E                 jz      short loc_4A9
.text$mn:000004A0                 mov     [ebp+var_8], 0
.text$mn:000004A7                 jmp     short loc_4B0
.text$mn:000004A9 ; ---------------------------------------------------------------------------
.text$mn:000004A9
.text$mn:000004A9 loc_4A9:                                ; CODE XREF: CharDistributionAnalysis::Reset(bool)+2Aj
.text$mn:000004A9                 mov     [ebp+var_8], 4
.text$mn:000004B0
.text$mn:000004B0 loc_4B0:                                ; CODE XREF: CharDistributionAnalysis::Reset(bool)+33j
.text$mn:000004B0                 mov     ecx, [ebp+var_4]
.text$mn:000004B3                 mov     edx, [ebp+var_8]
.text$mn:000004B6                 mov     [ecx+10h], edx
.text$mn:000004B9                 mov     esp, ebp
.text$mn:000004BB                 pop     ebp
.text$mn:000004BC                 retn    4
.text$mn:000004BC ?Reset@CharDistributionAnalysis@@QAEX_N@Z endp
.text$mn:000004BC
.text$mn:000004BC ; ---------------------------------------------------------------------------
.text$mn:000004BF                 align 10h
.text$mn:000004BF _text$mn        ends
.text$mn:000004BF
.text$mn:000004C0 ; ===========================================================================
.text$mn:000004C0
.text$mn:000004C0 ; Segment type: Pure code
.text$mn:000004C0 ; Segment permissions: Read/Execute
.text$mn:000004C0 _text$mn        segment para public 'CODE' use32
.text$mn:000004C0                 assume cs:_text$mn
.text$mn:000004C0                 ;org 4C0h
.text$mn:000004C0 ; COMDAT (pick any)
.text$mn:000004C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000004C0
.text$mn:000004C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000004C0
.text$mn:000004C0 ; Attributes: bp-based frame
.text$mn:000004C0
.text$mn:000004C0 ; void __thiscall nsCodingStateMachine::Reset(nsCodingStateMachine *__hidden this)
.text$mn:000004C0                 public ?Reset@nsCodingStateMachine@@QAEXXZ
.text$mn:000004C0 ?Reset@nsCodingStateMachine@@QAEXXZ proc near
.text$mn:000004C0                                         ; CODE XREF: nsSJISProber::Reset(void)+Dp
.text$mn:000004C0
.text$mn:000004C0 var_4           = dword ptr -4
.text$mn:000004C0
.text$mn:000004C0                 push    ebp
.text$mn:000004C1                 mov     ebp, esp
.text$mn:000004C3                 push    ecx
.text$mn:000004C4                 mov     [ebp+var_4], ecx
.text$mn:000004C7                 mov     eax, [ebp+var_4]
.text$mn:000004CA                 mov     dword ptr [eax], 0
.text$mn:000004D0                 mov     esp, ebp
.text$mn:000004D2                 pop     ebp
.text$mn:000004D3                 retn
.text$mn:000004D3 ?Reset@nsCodingStateMachine@@QAEXXZ endp
.text$mn:000004D3
.text$mn:000004D3 _text$mn        ends
.text$mn:000004D3
.rdata:000004D4 ; ===========================================================================
.rdata:000004D4
.rdata:000004D4 ; Segment type: Pure data
.rdata:000004D4 ; Segment permissions: Read
.rdata:000004D4 _rdata          segment dword public 'DATA' use32
.rdata:000004D4                 assume cs:_rdata
.rdata:000004D4                 ;org 4D4h
.rdata:000004D4 ; COMDAT (pick any)
.rdata:000004D4                 public __real@3f733333
.rdata:000004D4 __real@3f733333 dd 3F733333h            ; DATA XREF: nsSJISProber::HandleData(char const *,uint)+145r
.rdata:000004D4 _rdata          ends
.rdata:000004D4
UNDEF:000004E0 ; ===========================================================================
UNDEF:000004E0
UNDEF:000004E0 ; Segment type: Externs
UNDEF:000004E0 ; UNDEF
UNDEF:000004E0 ; float __thiscall JapaneseContextAnalysis::GetConfidence(JapaneseContextAnalysis *__hidden this)
UNDEF:000004E0                 extrn ?GetConfidence@JapaneseContextAnalysis@@QAEMXZ:near
UNDEF:000004E0                                         ; CODE XREF: nsSJISProber::GetConfidence(void)+Fp
UNDEF:000004E4 ; void __thiscall JapaneseContextAnalysis::Reset(JapaneseContextAnalysis *__hidden this, bool)
UNDEF:000004E4                 extrn ?Reset@JapaneseContextAnalysis@@QAEX_N@Z:near
UNDEF:000004E4                                         ; CODE XREF: nsSJISProber::Reset(void)+2Ap
UNDEF:000004E8 ; float __thiscall CharDistributionAnalysis::GetConfidence(CharDistributionAnalysis *__hidden this)
UNDEF:000004E8                 extrn ?GetConfidence@CharDistributionAnalysis@@QAEMXZ:near
UNDEF:000004E8                                         ; CODE XREF: nsSJISProber::GetConfidence(void)+1Dp
UNDEF:000004EC ; unsigned char const (* jp2CharContext)[83]
UNDEF:000004EC                 extrn ?jp2CharContext@@3QAY0FD@$$CBEA:near
UNDEF:000004EC                                         ; DATA XREF: JapaneseContextAnalysis::HandleOneChar(char const *,uint)+7Cr
UNDEF:000004EC                                         ; JapaneseContextAnalysis::HandleOneChar(char const *,uint)+98r
UNDEF:000004F0                 extrn __fltused:near
UNDEF:000004F0
UNDEF:000004F0
UNDEF:000004F0                 end