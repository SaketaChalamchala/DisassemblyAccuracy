.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : D009B04FB5FD77BA27903D99822DD6C2
.rdata:00000000 ; Input CRC32 : 1C293D77
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\WordStyleDlg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG168189
.rdata:00000000 $SG168189:                              ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long):loc_1688o
.rdata:00000000                 unicode 0, <Default>,0
.rdata:00000010 ; const WCHAR TABBAR_ACTIVEFOCUSEDINDCATOR
.rdata:00000010 _TABBAR_ACTIVEFOCUSEDINDCATOR:          ; DATA XREF: WordStyleDlg::whichTabColourIndex(void)+76o
.rdata:00000010                 unicode 0, <Active tab focused indicator>,0
.rdata:0000004A                 db    0
.rdata:0000004B                 db    0
.rdata:0000004C                 db    0
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:00000050                 db    0
.rdata:00000051                 db    0
.rdata:00000052                 db    0
.rdata:00000053                 db    0
.rdata:00000054                 db    0
.rdata:00000055                 db    0
.rdata:00000056                 db    0
.rdata:00000057                 db    0
.rdata:00000058                 db    0
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C                 db    0
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060                 db    0
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 db    0
.rdata:00000065                 db    0
.rdata:00000066                 db    0
.rdata:00000067                 db    0
.rdata:00000068                 db    0
.rdata:00000069                 db    0
.rdata:0000006A                 db    0
.rdata:0000006B                 db    0
.rdata:0000006C                 db    0
.rdata:0000006D                 db    0
.rdata:0000006E                 db    0
.rdata:0000006F                 db    0
.rdata:00000070                 db    0
.rdata:00000071                 db    0
.rdata:00000072                 db    0
.rdata:00000073                 db    0
.rdata:00000074                 db    0
.rdata:00000075                 db    0
.rdata:00000076                 db    0
.rdata:00000077                 db    0
.rdata:00000078                 db    0
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 db    0
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080                 db    0
.rdata:00000081                 db    0
.rdata:00000082                 db    0
.rdata:00000083                 db    0
.rdata:00000084                 db    0
.rdata:00000085                 db    0
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088                 db    0
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 db    0
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090 ; const WCHAR TABBAR_ACTIVEUNFOCUSEDINDCATOR
.rdata:00000090 _TABBAR_ACTIVEUNFOCUSEDINDCATOR:        ; DATA XREF: WordStyleDlg::whichTabColourIndex(void):loc_2707o
.rdata:00000090                 unicode 0, <Active tab unfocused indicator>,0
.rdata:000000CE                 db    0
.rdata:000000CF                 db    0
.rdata:000000D0                 db    0
.rdata:000000D1                 db    0
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 db    0
.rdata:000000D5                 db    0
.rdata:000000D6                 db    0
.rdata:000000D7                 db    0
.rdata:000000D8                 db    0
.rdata:000000D9                 db    0
.rdata:000000DA                 db    0
.rdata:000000DB                 db    0
.rdata:000000DC                 db    0
.rdata:000000DD                 db    0
.rdata:000000DE                 db    0
.rdata:000000DF                 db    0
.rdata:000000E0                 db    0
.rdata:000000E1                 db    0
.rdata:000000E2                 db    0
.rdata:000000E3                 db    0
.rdata:000000E4                 db    0
.rdata:000000E5                 db    0
.rdata:000000E6                 db    0
.rdata:000000E7                 db    0
.rdata:000000E8                 db    0
.rdata:000000E9                 db    0
.rdata:000000EA                 db    0
.rdata:000000EB                 db    0
.rdata:000000EC                 db    0
.rdata:000000ED                 db    0
.rdata:000000EE                 db    0
.rdata:000000EF                 db    0
.rdata:000000F0                 db    0
.rdata:000000F1                 db    0
.rdata:000000F2                 db    0
.rdata:000000F3                 db    0
.rdata:000000F4                 db    0
.rdata:000000F5                 db    0
.rdata:000000F6                 db    0
.rdata:000000F7                 db    0
.rdata:000000F8                 db    0
.rdata:000000F9                 db    0
.rdata:000000FA                 db    0
.rdata:000000FB                 db    0
.rdata:000000FC                 db    0
.rdata:000000FD                 db    0
.rdata:000000FE                 db    0
.rdata:000000FF                 db    0
.rdata:00000100                 db    0
.rdata:00000101                 db    0
.rdata:00000102                 db    0
.rdata:00000103                 db    0
.rdata:00000104                 db    0
.rdata:00000105                 db    0
.rdata:00000106                 db    0
.rdata:00000107                 db    0
.rdata:00000108                 db    0
.rdata:00000109                 db    0
.rdata:0000010A                 db    0
.rdata:0000010B                 db    0
.rdata:0000010C                 db    0
.rdata:0000010D                 db    0
.rdata:0000010E                 db    0
.rdata:0000010F                 db    0
.rdata:00000110 ; const WCHAR TABBAR_ACTIVETEXT
.rdata:00000110 _TABBAR_ACTIVETEXT:                     ; DATA XREF: WordStyleDlg::whichTabColourIndex(void):loc_2724o
.rdata:00000110                 unicode 0, <Active tab text>,0
.rdata:00000130                 db    0
.rdata:00000131                 db    0
.rdata:00000132                 db    0
.rdata:00000133                 db    0
.rdata:00000134                 db    0
.rdata:00000135                 db    0
.rdata:00000136                 db    0
.rdata:00000137                 db    0
.rdata:00000138                 db    0
.rdata:00000139                 db    0
.rdata:0000013A                 db    0
.rdata:0000013B                 db    0
.rdata:0000013C                 db    0
.rdata:0000013D                 db    0
.rdata:0000013E                 db    0
.rdata:0000013F                 db    0
.rdata:00000140                 db    0
.rdata:00000141                 db    0
.rdata:00000142                 db    0
.rdata:00000143                 db    0
.rdata:00000144                 db    0
.rdata:00000145                 db    0
.rdata:00000146                 db    0
.rdata:00000147                 db    0
.rdata:00000148                 db    0
.rdata:00000149                 db    0
.rdata:0000014A                 db    0
.rdata:0000014B                 db    0
.rdata:0000014C                 db    0
.rdata:0000014D                 db    0
.rdata:0000014E                 db    0
.rdata:0000014F                 db    0
.rdata:00000150                 db    0
.rdata:00000151                 db    0
.rdata:00000152                 db    0
.rdata:00000153                 db    0
.rdata:00000154                 db    0
.rdata:00000155                 db    0
.rdata:00000156                 db    0
.rdata:00000157                 db    0
.rdata:00000158                 db    0
.rdata:00000159                 db    0
.rdata:0000015A                 db    0
.rdata:0000015B                 db    0
.rdata:0000015C                 db    0
.rdata:0000015D                 db    0
.rdata:0000015E                 db    0
.rdata:0000015F                 db    0
.rdata:00000160                 db    0
.rdata:00000161                 db    0
.rdata:00000162                 db    0
.rdata:00000163                 db    0
.rdata:00000164                 db    0
.rdata:00000165                 db    0
.rdata:00000166                 db    0
.rdata:00000167                 db    0
.rdata:00000168                 db    0
.rdata:00000169                 db    0
.rdata:0000016A                 db    0
.rdata:0000016B                 db    0
.rdata:0000016C                 db    0
.rdata:0000016D                 db    0
.rdata:0000016E                 db    0
.rdata:0000016F                 db    0
.rdata:00000170                 db    0
.rdata:00000171                 db    0
.rdata:00000172                 db    0
.rdata:00000173                 db    0
.rdata:00000174                 db    0
.rdata:00000175                 db    0
.rdata:00000176                 db    0
.rdata:00000177                 db    0
.rdata:00000178                 db    0
.rdata:00000179                 db    0
.rdata:0000017A                 db    0
.rdata:0000017B                 db    0
.rdata:0000017C                 db    0
.rdata:0000017D                 db    0
.rdata:0000017E                 db    0
.rdata:0000017F                 db    0
.rdata:00000180                 db    0
.rdata:00000181                 db    0
.rdata:00000182                 db    0
.rdata:00000183                 db    0
.rdata:00000184                 db    0
.rdata:00000185                 db    0
.rdata:00000186                 db    0
.rdata:00000187                 db    0
.rdata:00000188                 db    0
.rdata:00000189                 db    0
.rdata:0000018A                 db    0
.rdata:0000018B                 db    0
.rdata:0000018C                 db    0
.rdata:0000018D                 db    0
.rdata:0000018E                 db    0
.rdata:0000018F                 db    0
.rdata:00000190 ; const WCHAR TABBAR_INACTIVETEXT
.rdata:00000190 _TABBAR_INACTIVETEXT:                   ; DATA XREF: WordStyleDlg::whichTabColourIndex(void):loc_273Eo
.rdata:00000190                 unicode 0, <Inactive tabs>,0
.rdata:000001AC                 db    0
.rdata:000001AD                 db    0
.rdata:000001AE                 db    0
.rdata:000001AF                 db    0
.rdata:000001B0                 db    0
.rdata:000001B1                 db    0
.rdata:000001B2                 db    0
.rdata:000001B3                 db    0
.rdata:000001B4                 db    0
.rdata:000001B5                 db    0
.rdata:000001B6                 db    0
.rdata:000001B7                 db    0
.rdata:000001B8                 db    0
.rdata:000001B9                 db    0
.rdata:000001BA                 db    0
.rdata:000001BB                 db    0
.rdata:000001BC                 db    0
.rdata:000001BD                 db    0
.rdata:000001BE                 db    0
.rdata:000001BF                 db    0
.rdata:000001C0                 db    0
.rdata:000001C1                 db    0
.rdata:000001C2                 db    0
.rdata:000001C3                 db    0
.rdata:000001C4                 db    0
.rdata:000001C5                 db    0
.rdata:000001C6                 db    0
.rdata:000001C7                 db    0
.rdata:000001C8                 db    0
.rdata:000001C9                 db    0
.rdata:000001CA                 db    0
.rdata:000001CB                 db    0
.rdata:000001CC                 db    0
.rdata:000001CD                 db    0
.rdata:000001CE                 db    0
.rdata:000001CF                 db    0
.rdata:000001D0                 db    0
.rdata:000001D1                 db    0
.rdata:000001D2                 db    0
.rdata:000001D3                 db    0
.rdata:000001D4                 db    0
.rdata:000001D5                 db    0
.rdata:000001D6                 db    0
.rdata:000001D7                 db    0
.rdata:000001D8                 db    0
.rdata:000001D9                 db    0
.rdata:000001DA                 db    0
.rdata:000001DB                 db    0
.rdata:000001DC                 db    0
.rdata:000001DD                 db    0
.rdata:000001DE                 db    0
.rdata:000001DF                 db    0
.rdata:000001E0                 db    0
.rdata:000001E1                 db    0
.rdata:000001E2                 db    0
.rdata:000001E3                 db    0
.rdata:000001E4                 db    0
.rdata:000001E5                 db    0
.rdata:000001E6                 db    0
.rdata:000001E7                 db    0
.rdata:000001E8                 db    0
.rdata:000001E9                 db    0
.rdata:000001EA                 db    0
.rdata:000001EB                 db    0
.rdata:000001EC                 db    0
.rdata:000001ED                 db    0
.rdata:000001EE                 db    0
.rdata:000001EF                 db    0
.rdata:000001F0                 db    0
.rdata:000001F1                 db    0
.rdata:000001F2                 db    0
.rdata:000001F3                 db    0
.rdata:000001F4                 db    0
.rdata:000001F5                 db    0
.rdata:000001F6                 db    0
.rdata:000001F7                 db    0
.rdata:000001F8                 db    0
.rdata:000001F9                 db    0
.rdata:000001FA                 db    0
.rdata:000001FB                 db    0
.rdata:000001FC                 db    0
.rdata:000001FD                 db    0
.rdata:000001FE                 db    0
.rdata:000001FF                 db    0
.rdata:00000200                 db    0
.rdata:00000201                 db    0
.rdata:00000202                 db    0
.rdata:00000203                 db    0
.rdata:00000204                 db    0
.rdata:00000205                 db    0
.rdata:00000206                 db    0
.rdata:00000207                 db    0
.rdata:00000208                 db    0
.rdata:00000209                 db    0
.rdata:0000020A                 db    0
.rdata:0000020B                 db    0
.rdata:0000020C                 db    0
.rdata:0000020D                 db    0
.rdata:0000020E                 db    0
.rdata:0000020F                 db    0
.rdata:00000210 $SG168346:                              ; DATA XREF: WordStyleDlg::loadLangListFromNppParam(void)+57o
.rdata:00000210                 unicode 0, <Global Styles>,0
.rdata:0000022C $SG168562       dw 0                    ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+393r
.rdata:0000022E                 align 10h
.rdata:00000230 ; const WCHAR _SG168498
.rdata:00000230 $SG168498:                              ; DATA XREF: WordStyleDlg::switchToTheme(void)+123o
.rdata:00000230                 unicode 0, < Unsaved changes are about to be discarded!>
.rdata:00000230                 dw 0Ah
.rdata:00000230                 unicode 0, < Do you want to save your changes before switching themes>
.rdata:00000230                 unicode 0, <?>,0
.rdata:000002FE                 align 10h
.rdata:00000300 ; const WCHAR _SG168527
.rdata:00000300 $SG168527:                              ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+5Bo
.rdata:00000300                 unicode 0, <Global override>,0
.rdata:00000320 ; const WCHAR _SG168543
.rdata:00000320 $SG168543:                              ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+177o
.rdata:00000320                 unicode 0, < : >,0
.rdata:00000328 ; const WCHAR _SG168544
.rdata:00000328 $SG168544:                              ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+190o
.rdata:00000328                 unicode 0, <          >,0
.rdata:0000033E                 align 10h
.rdata:00000340 ; const WCHAR _SG168565
.rdata:00000340 $SG168565:                              ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+3C6o
.rdata:00000340                 unicode 0, <%d>,0
.rdata:00000346                 align 4
.rdata:00000348 ; wchar_t _SG168611
.rdata:00000348 $SG168611:                              ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+643o
.rdata:00000348                 unicode 0, < is not defined in NppParameters::getLangIDFromStr()>,0
.rdata:000003B2                 align 4
.rdata:000003B4 $SG168614       db    0                 ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+6A4o
.rdata:000003B5                 db    0
.rdata:000003B6                 db    0
.rdata:000003B7                 db    0
.rdata:000003B8 $SG168617       db    0                 ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void):loc_3824o
.rdata:000003B9                 db    0
.rdata:000003BA                 db    0
.rdata:000003BB                 db    0
.rdata:000003BC $SG160427       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:000003C7                 align 4
.rdata:000003C8 $SG160428       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000E5Co
.rdata:000003D4 $SG160429       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000E60o
.rdata:000003E0 $SG160430       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00000E64o
.rdata:000003EC $SG160431       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000E68o
.rdata:000003F8 $SG160432       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000E6Co
.rdata:00000404 $SG160433       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000E70o
.rdata:00000410 $SG160434       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00000E74o
.rdata:0000041C $SG160435       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00000E78o
.rdata:00000428 $SG160436       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00000E7Co
.rdata:00000434 $SG160437       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00000E80o
.rdata:00000440 $SG160438       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00000E84o
.rdata:0000044C $SG160439       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000E88o
.rdata:00000458 $SG160440       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000E8Co
.rdata:00000464 $SG160441       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000E90o
.rdata:00000470 $SG160442       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00000E94o
.rdata:0000047C $SG160443       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000E98o
.rdata:00000488 $SG160444       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000E9Co
.rdata:00000494 $SG160445       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000EA0o
.rdata:000004A0 $SG160446       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00000EA4o
.rdata:000004AC $SG160447       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000EA8o
.rdata:000004B8 $SG160448       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000EACo
.rdata:000004C4 $SG160449       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000EB0o
.rdata:000004D0 $SG160450       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00000EB4o
.rdata:000004DC $SG160451       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000EB8o
.rdata:000004E8 $SG160452       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000EBCo
.rdata:000004F4 $SG160453       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000EC0o
.rdata:00000500 $SG160454       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00000EC4o
.rdata:0000050C $SG160455       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000EC8o
.rdata:00000518 $SG160456       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000ECCo
.rdata:00000524 $SG160457       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000ED0o
.rdata:00000530 $SG160458       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00000ED4o
.rdata:0000053C $SG160459       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000ED8o
.rdata:00000548 $SG160460       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000EDCo
.rdata:00000554 $SG160461       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000EE0o
.rdata:00000560 $SG160462       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00000EE4o
.rdata:0000056C $SG160463       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000EE8o
.rdata:00000578 $SG160464       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000EECo
.rdata:00000584 $SG160465       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000EF0o
.rdata:00000590 $SG160466       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00000EF4o
.rdata:0000059C $SG160467       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00000EF8o
.rdata:000005A8 $SG160468       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00000EFCo
.rdata:000005B4 $SG160469       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00000F00o
.rdata:000005C0 $SG160470       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00000F04o
.rdata:000005CC $SG160471       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00000F08o
.rdata:000005D8 $SG160472       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00000F0Co
.rdata:000005E4 $SG160473       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00000F10o
.rdata:000005F0 $SG160474       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00000F14o
.rdata:000005FC $SG160475       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00000F18o
.rdata:00000608 $SG160476       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00000F1Co
.rdata:00000614 $SG160477       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00000F20o
.rdata:00000620 $SG160478       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00000F24o
.rdata:0000062C $SG160479       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00000F28o
.rdata:00000638 $SG160480       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00000F2Co
.rdata:00000644 $SG160481       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00000F30o
.rdata:00000650 $SG160482       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00000F34o
.rdata:0000065C $SG160483       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00000F38o
.rdata:00000668 $SG160484       db '    .+      ',0     ; DATA XREF: .data:00000F3Co
.rdata:00000675                 align 4
.rdata:00000678 $SG160485       db '    @#$     ',0     ; DATA XREF: .data:00000F40o
.rdata:00000685                 align 4
.rdata:00000688 $SG160486       db '    %&*=    ',0     ; DATA XREF: .data:00000F44o
.rdata:00000695                 align 4
.rdata:00000698 $SG160487       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00000F48o
.rdata:000006A5                 align 4
.rdata:000006A8 $SG160488       db '    )!~{]^  ',0     ; DATA XREF: .data:00000F4Co
.rdata:000006B5                 align 4
.rdata:000006B8 $SG160489       db '    /(_:<[} ',0     ; DATA XREF: .data:00000F50o
.rdata:000006C5                 align 4
.rdata:000006C8 $SG160490       db '    |123456 ',0     ; DATA XREF: .data:00000F54o
.rdata:000006D5                 align 4
.rdata:000006D8 $SG160491       db '    7890abc ',0     ; DATA XREF: .data:00000F58o
.rdata:000006E5                 align 4
.rdata:000006E8 $SG160492       db '    defgh   ',0     ; DATA XREF: .data:00000F5Co
.rdata:000006F5                 align 4
.rdata:000006F8 $SG160493       db '    ijkl    ',0     ; DATA XREF: .data:00000F60o
.rdata:00000705                 align 4
.rdata:00000708 $SG160494       db '    mno     ',0     ; DATA XREF: .data:00000F64o
.rdata:00000715                 align 4
.rdata:00000718 $SG160495       db '    pq      ',0     ; DATA XREF: .data:00000F68o
.rdata:00000725                 align 4
.rdata:00000728 $SG160497       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:00000733                 align 4
.rdata:00000734 $SG160498       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000F74o
.rdata:00000740 $SG160499       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000F78o
.rdata:0000074C $SG160500       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000F7Co
.rdata:00000758 $SG160501       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000F80o
.rdata:00000764 $SG160502       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00000F84o
.rdata:00000770 $SG160503       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000F88o
.rdata:0000077C $SG160504       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000F8Co
.rdata:00000788 $SG160505       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000F90o
.rdata:00000794 $SG160506       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00000F94o
.rdata:000007A0 $SG160507       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000F98o
.rdata:000007AC $SG160508       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00000F9Co
.rdata:000007B8 $SG160509       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000FA0o
.rdata:000007C4 $SG160510       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00000FA4o
.rdata:000007D0 $SG160511       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000FA8o
.rdata:000007DC $SG160512       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000FACo
.rdata:000007E8 $SG160513       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000FB0o
.rdata:000007F4 $SG160514       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00000FB4o
.rdata:00000800 $SG160515       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000FB8o
.rdata:0000080C $SG160516       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000FBCo
.rdata:00000818 $SG160517       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000FC0o
.rdata:00000824 $SG160518       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00000FC4o
.rdata:00000830 $SG160519       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000FC8o
.rdata:0000083C $SG160520       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000FCCo
.rdata:00000848 $SG160521       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000FD0o
.rdata:00000854 $SG160522       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00000FD4o
.rdata:00000860 $SG160523       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000FD8o
.rdata:0000086C $SG160524       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000FDCo
.rdata:00000878 $SG160525       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000FE0o
.rdata:00000884 $SG160526       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00000FE4o
.rdata:00000890 $SG160527       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000FE8o
.rdata:0000089C $SG160528       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000FECo
.rdata:000008A8 $SG160529       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000FF0o
.rdata:000008B4 $SG160530       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00000FF4o
.rdata:000008C0 $SG160531       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00000FF8o
.rdata:000008CC $SG160532       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00000FFCo
.rdata:000008D8 $SG160533       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00001000o
.rdata:000008E4 $SG160534       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00001004o
.rdata:000008F0 $SG160535       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00001008o
.rdata:000008FC $SG160536       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:0000100Co
.rdata:00000908 $SG160537       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00001010o
.rdata:00000914 $SG160538       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00001014o
.rdata:00000920 $SG160539       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00001018o
.rdata:0000092C $SG160540       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:0000101Co
.rdata:00000938 $SG160541       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00001020o
.rdata:00000944 $SG160542       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00001024o
.rdata:00000950 $SG160543       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00001028o
.rdata:0000095C $SG160544       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:0000102Co
.rdata:00000968 $SG160545       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00001030o
.rdata:00000974 $SG160546       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00001034o
.rdata:00000980 $SG160547       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00001038o
.rdata:0000098C $SG160548       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:0000103Co
.rdata:00000998 $SG160549       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00001040o
.rdata:000009A4 $SG160550       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00001044o
.rdata:000009B0 $SG160551       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00001048o
.rdata:000009BC $SG160552       db '         .+ ',0     ; DATA XREF: .data:0000104Co
.rdata:000009C9                 align 4
.rdata:000009CC $SG160553       db '        @#$ ',0     ; DATA XREF: .data:00001050o
.rdata:000009D9                 align 4
.rdata:000009DC $SG160554       db '       %&*= L',0    ; DATA XREF: .data:00001054o
.rdata:000009EA                 align 4
.rdata:000009EC $SG160555       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00001058o
.rdata:000009F9                 align 4
.rdata:000009FC $SG160556       db '     )!>~{] ',0     ; DATA XREF: .data:0000105Co
.rdata:00000A09                 align 4
.rdata:00000A0C $SG160557       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00001060o
.rdata:00000A19                 align 4
.rdata:00000A1C $SG160558       db '    (}|1234 ',0     ; DATA XREF: .data:00001064o
.rdata:00000A29                 align 4
.rdata:00000A2C $SG160559       db '    567890a ',0     ; DATA XREF: .data:00001068o
.rdata:00000A39                 align 4
.rdata:00000A3C $SG160560       db '      bcdef ',0     ; DATA XREF: .data:0000106Co
.rdata:00000A49                 align 4
.rdata:00000A4C $SG160561       db '       ghij ',0     ; DATA XREF: .data:00001070o
.rdata:00000A59                 align 4
.rdata:00000A5C $SG160562       db '        klm ',0     ; DATA XREF: .data:00001074o
.rdata:00000A69                 align 4
.rdata:00000A6C $SG160563       db '         no ',0     ; DATA XREF: .data:00001078o
.rdata:00000A79                 align 4
.rdata:00000A7C $SG160565       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:00000A87                 align 4
.rdata:00000A88 $SG160566       db ' ',9,'c None',0     ; DATA XREF: .data:00001084o
.rdata:00000A91                 align 4
.rdata:00000A94 $SG160567       db '.',9,'c #545254',0  ; DATA XREF: .data:00001088o
.rdata:00000AA0 $SG160568       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:0000108Co
.rdata:00000AAC $SG160569       db '@',9,'c #646464',0  ; DATA XREF: .data:00001090o
.rdata:00000AB8 $SG160570       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00001094o
.rdata:00000AC4 $SG160571       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00001098o
.rdata:00000AD0 $SG160572       db '%',9,'c #747284',0  ; DATA XREF: .data:0000109Co
.rdata:00000ADC $SG160573       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:000010A0o
.rdata:00000AE8 $SG160574       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:000010A4o
.rdata:00000AF4 $SG160575       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:000010A8o
.rdata:00000B00 $SG160576       db '-',9,'c #403E58',0  ; DATA XREF: .data:000010ACo
.rdata:00000B0C $SG160577       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:000010B0o
.rdata:00000B18 $SG160578       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:000010B4o
.rdata:00000B24 $SG160579       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:000010B8o
.rdata:00000B30 $SG160580       db 27h,9,'c #242644',0  ; DATA XREF: .data:000010BCo
.rdata:00000B3C $SG160581       db ')',9,'c #282668',0  ; DATA XREF: .data:000010C0o
.rdata:00000B48 $SG160582       db '!',9,'c #24367C',0  ; DATA XREF: .data:000010C4o
.rdata:00000B54 $SG160583       db '~',9,'c #244A84',0  ; DATA XREF: .data:000010C8o
.rdata:00000B60 $SG160584       db '{',9,'c #2C5098',0  ; DATA XREF: .data:000010CCo
.rdata:00000B6C $SG160585       db ']',9,'c #14162C',0  ; DATA XREF: .data:000010D0o
.rdata:00000B78 $SG160586       db '^',9,'c #142E7C',0  ; DATA XREF: .data:000010D4o
.rdata:00000B84 $SG160587       db '/',9,'c #143789',0  ; DATA XREF: .data:000010D8o
.rdata:00000B90 $SG160588       db '(',9,'c #204990',0  ; DATA XREF: .data:000010DCo
.rdata:00000B9C $SG160589       db '_',9,'c #174091',0  ; DATA XREF: .data:000010E0o
.rdata:00000BA8 $SG160590       db ':',9,'c #0C0630',0  ; DATA XREF: .data:000010E4o
.rdata:00000BB4 $SG160591       db '<',9,'c #24327C',0  ; DATA XREF: .data:000010E8o
.rdata:00000BC0 $SG160592       db '[',9,'c #2450A0',0  ; DATA XREF: .data:000010ECo
.rdata:00000BCC $SG160593       db '}',9,'c #345DB4',0  ; DATA XREF: .data:000010F0o
.rdata:00000BD8 $SG160594       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:000010F4o
.rdata:00000BE4 $SG160595       db '1',9,'c #141244',0  ; DATA XREF: .data:000010F8o
.rdata:00000BF0 $SG160596       db '2',9,'c #24428C',0  ; DATA XREF: .data:000010FCo
.rdata:00000BFC $SG160597       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00001100o
.rdata:00000C08 $SG160598       db '4',9,'c #4470C4',0  ; DATA XREF: .data:00001104o
.rdata:00000C14 $SG160599       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:00001108o
.rdata:00000C20 $SG160600       db '6',9,'c #4472CC',0  ; DATA XREF: .data:0000110Co
.rdata:00000C2C $SG160601       db '7',9,'c #24224C',0  ; DATA XREF: .data:00001110o
.rdata:00000C38 $SG160602       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00001114o
.rdata:00000C44 $SG160603       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00001118o
.rdata:00000C50 $SG160604       db '0',9,'c #5482DF',0  ; DATA XREF: .data:0000111Co
.rdata:00000C5C $SG160605       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00001120o
.rdata:00000C68 $SG160606       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00001124o
.rdata:00000C74 $SG160607       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00001128o
.rdata:00000C80 $SG160608       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:0000112Co
.rdata:00000C8C $SG160609       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00001130o
.rdata:00000C98 $SG160610       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00001134o
.rdata:00000CA4 $SG160611       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00001138o
.rdata:00000CB0 $SG160612       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:0000113Co
.rdata:00000CBC $SG160613       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00001140o
.rdata:00000CC8 $SG160614       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:00001144o
.rdata:00000CD4 $SG160615       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00001148o
.rdata:00000CE0 $SG160616       db 'l',9,'c #243250',0  ; DATA XREF: .data:0000114Co
.rdata:00000CEC $SG160617       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00001150o
.rdata:00000CF8 $SG160618       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:00001154o
.rdata:00000D04 $SG160619       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00001158o
.rdata:00000D10 $SG160620       db '     .+.     ',0    ; DATA XREF: .data:0000115Co
.rdata:00000D1E                 align 10h
.rdata:00000D20 $SG160621       db '   @##$##@   ',0    ; DATA XREF: .data:00001160o
.rdata:00000D2E                 align 10h
.rdata:00000D30 $SG160622       db '  @%&***&%@  ',0    ; DATA XREF: .data:00001164o
.rdata:00000D3E                 align 10h
.rdata:00000D40 $SG160623       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00001168o
.rdata:00000D4E                 align 10h
.rdata:00000D50 $SG160624       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000D50                                         ; DATA XREF: .data:0000116Co
.rdata:00000D5E                 align 10h
.rdata:00000D60 $SG160625       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00001170o
.rdata:00000D6E                 align 10h
.rdata:00000D70 $SG160626       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:00001174o
.rdata:00000D7E                 align 10h
.rdata:00000D80 $SG160627       db '12[3455563[21',0    ; DATA XREF: .data:00001178o
.rdata:00000D8E                 align 10h
.rdata:00000D90 $SG160628       db '7_365899063_7',0    ; DATA XREF: .data:0000117Co
.rdata:00000D9E                 align 10h
.rdata:00000DA0 $SG160629       db ' /|09abc904/ ',0    ; DATA XREF: .data:00001180o
.rdata:00000DAE                 align 10h
.rdata:00000DB0 $SG160630       db ' d}8efgfb83d ',0    ; DATA XREF: .data:00001184o
.rdata:00000DBE                 align 10h
.rdata:00000DC0 $SG160631       db '  hiafjgakh  ',0    ; DATA XREF: .data:00001188o
.rdata:00000DCE                 align 10h
.rdata:00000DD0 $SG160632       db '   l~mnm~l   ',0    ; DATA XREF: .data:0000118Co
.rdata:00000DDE                 align 10h
.rdata:00000DE0 $SG160633       db '     o@o     ',0    ; DATA XREF: .data:00001190o
.rdata:00000DEE                 align 10h
.rdata:00000DF0 _fontSizeStrs   db    0                 ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+2D2o
.rdata:00000DF1                 db    0
.rdata:00000DF2                 db    0
.rdata:00000DF3                 db    0
.rdata:00000DF4                 db    0
.rdata:00000DF5                 db    0
.rdata:00000DF6                 db  35h ; 5
.rdata:00000DF7                 db    0
.rdata:00000DF8                 db    0
.rdata:00000DF9                 db    0
.rdata:00000DFA                 db    0
.rdata:00000DFB                 db    0
.rdata:00000DFC                 db  36h ; 6
.rdata:00000DFD                 db    0
.rdata:00000DFE                 db    0
.rdata:00000DFF                 db    0
.rdata:00000E00                 db    0
.rdata:00000E01                 db    0
.rdata:00000E02                 db  37h ; 7
.rdata:00000E03                 db    0
.rdata:00000E04                 db    0
.rdata:00000E05                 db    0
.rdata:00000E06                 db    0
.rdata:00000E07                 db    0
.rdata:00000E08                 db  38h ; 8
.rdata:00000E09                 db    0
.rdata:00000E0A                 db    0
.rdata:00000E0B                 db    0
.rdata:00000E0C                 db    0
.rdata:00000E0D                 db    0
.rdata:00000E0E                 db  39h ; 9
.rdata:00000E0F                 db    0
.rdata:00000E10                 db    0
.rdata:00000E11                 db    0
.rdata:00000E12                 db    0
.rdata:00000E13                 db    0
.rdata:00000E14                 db  31h ; 1
.rdata:00000E15                 db    0
.rdata:00000E16                 db  30h ; 0
.rdata:00000E17                 db    0
.rdata:00000E18                 db    0
.rdata:00000E19                 db    0
.rdata:00000E1A                 db  31h ; 1
.rdata:00000E1B                 db    0
.rdata:00000E1C                 db  31h ; 1
.rdata:00000E1D                 db    0
.rdata:00000E1E                 db    0
.rdata:00000E1F                 db    0
.rdata:00000E20                 db  31h ; 1
.rdata:00000E21                 db    0
.rdata:00000E22                 db  32h ; 2
.rdata:00000E23                 db    0
.rdata:00000E24                 db    0
.rdata:00000E25                 db    0
.rdata:00000E26                 db  31h ; 1
.rdata:00000E27                 db    0
.rdata:00000E28                 db  34h ; 4
.rdata:00000E29                 db    0
.rdata:00000E2A                 db    0
.rdata:00000E2B                 db    0
.rdata:00000E2C                 db  31h ; 1
.rdata:00000E2D                 db    0
.rdata:00000E2E                 db  36h ; 6
.rdata:00000E2F                 db    0
.rdata:00000E30                 db    0
.rdata:00000E31                 db    0
.rdata:00000E32                 db  31h ; 1
.rdata:00000E33                 db    0
.rdata:00000E34                 db  38h ; 8
.rdata:00000E35                 db    0
.rdata:00000E36                 db    0
.rdata:00000E37                 db    0
.rdata:00000E38                 db  32h ; 2
.rdata:00000E39                 db    0
.rdata:00000E3A                 db  30h ; 0
.rdata:00000E3B                 db    0
.rdata:00000E3C                 db    0
.rdata:00000E3D                 db    0
.rdata:00000E3E                 db  32h ; 2
.rdata:00000E3F                 db    0
.rdata:00000E40                 db  32h ; 2
.rdata:00000E41                 db    0
.rdata:00000E42                 db    0
.rdata:00000E43                 db    0
.rdata:00000E44                 db  32h ; 2
.rdata:00000E45                 db    0
.rdata:00000E46                 db  34h ; 4
.rdata:00000E47                 db    0
.rdata:00000E48                 db    0
.rdata:00000E49                 db    0
.rdata:00000E4A                 db  32h ; 2
.rdata:00000E4B                 db    0
.rdata:00000E4C                 db  36h ; 6
.rdata:00000E4D                 db    0
.rdata:00000E4E                 db    0
.rdata:00000E4F                 db    0
.rdata:00000E50                 db  32h ; 2
.rdata:00000E51                 db    0
.rdata:00000E52                 db  38h ; 8
.rdata:00000E53                 db    0
.rdata:00000E54                 db    0
.rdata:00000E55                 db    0
.rdata:00000E56                 align 4
.rdata:00000E56 _rdata          ends
.rdata:00000E56
.data:00000E58 ; ===========================================================================
.data:00000E58
.data:00000E58 ; Segment type: Pure data
.data:00000E58 ; Segment permissions: Read/Write
.data:00000E58 ; Segment alignment 'qword' can not be represented in assembly
.data:00000E58 _data           segment para public 'DATA' use32
.data:00000E58                 assume cs:_data
.data:00000E58                 ;org 0E58h
.data:00000E58 _acTop_xpm      dd offset $SG160427     ; "12 12 56 1"
.data:00000E5C                 dd offset $SG160428     ; " \tc #FFFFFF"
.data:00000E60                 dd offset $SG160429     ; ".\tc #8AB2E9"
.data:00000E64                 dd offset $SG160430     ; "+\tc #CCDCF6"
.data:00000E68                 dd offset $SG160431     ; "@\tc #80ABEA"
.data:00000E6C                 dd offset $SG160432     ; "#\tc #7DA9E8"
.data:00000E70                 dd offset $SG160433     ; "$\tc #C7DAF3"
.data:00000E74                 dd offset $SG160434     ; "%\tc #79A7E6"
.data:00000E78                 dd offset $SG160435     ; "&\tc #ADC8EF"
.data:00000E7C                 dd offset $SG160436     ; "*\tc #87B0E8"
.data:00000E80                 dd offset $SG160437     ; "=\tc #BBD2F0"
.data:00000E84                 dd offset $SG160438     ; "-\tc #6EA0E2"
.data:00000E88                 dd offset $SG160439     ; ";\tc #A8C7EE"
.data:00000E8C                 dd offset $SG160440     ; ">\tc #A3C2ED"
.data:00000E90                 dd offset $SG160441     ; ",\tc #75A4E3"
.data:00000E94                 dd offset $SG160442     ; "'\tc #A7C4EB"
.data:00000E98                 dd offset $SG160443     ; ")\tc #6297E1"
.data:00000E9C                 dd offset $SG160444     ; "!\tc #A1C1EC"
.data:00000EA0                 dd offset $SG160445     ; "~\tc #92B7E8"
.data:00000EA4                 dd offset $SG160446     ; "{\tc #99BBE9"
.data:00000EA8                 dd offset $SG160447     ; "]\tc #6197DD"
.data:00000EAC                 dd offset $SG160448     ; "^\tc #96B9E6"
.data:00000EB0                 dd offset $SG160449     ; "/\tc #538EDB"
.data:00000EB4                 dd offset $SG160450     ; "(\tc #99BBEA"
.data:00000EB8                 dd offset $SG160451     ; "_\tc #80AAE3"
.data:00000EBC                 dd offset $SG160452     ; ":\tc #81ABE3"
.data:00000EC0                 dd offset $SG160453     ; "<\tc #8AB1E4"
.data:00000EC4                 dd offset $SG160454     ; "[\tc #4B88D6"
.data:00000EC8                 dd offset $SG160455     ; "}\tc #4882D1"
.data:00000ECC                 dd offset $SG160456     ; "|\tc #4384D6"
.data:00000ED0                 dd offset $SG160457     ; "1\tc #90B5E7"
.data:00000ED4                 dd offset $SG160458     ; "2\tc #74A3E0"
.data:00000ED8                 dd offset $SG160459     ; "3\tc #77A4E0"
.data:00000EDC                 dd offset $SG160460     ; "4\tc #81ABE2"
.data:00000EE0                 dd offset $SG160461     ; "5\tc #437FD3"
.data:00000EE4                 dd offset $SG160462     ; "6\tc #7FA2DF"
.data:00000EE8                 dd offset $SG160463     ; "7\tc #3577D2"
.data:00000EEC                 dd offset $SG160464     ; "8\tc #87AFE4"
.data:00000EF0                 dd offset $SG160465     ; "9\tc #72A1DF"
.data:00000EF4                 dd offset $SG160466     ; "0\tc #7CA9E1"
.data:00000EF8                 dd offset $SG160467     ; "a\tc #3F7AD0"
.data:00000EFC                 dd offset $SG160468     ; "b\tc #85A4DE"
.data:00000F00                 dd offset $SG160469     ; "c\tc #FBFCFE"
.data:00000F04                 dd offset $SG160470     ; "d\tc #236ECD"
.data:00000F08                 dd offset $SG160471     ; "e\tc #7EA8E1"
.data:00000F0C                 dd offset $SG160472     ; "f\tc #79A6E0"
.data:00000F10                 dd offset $SG160473     ; "g\tc #3D77D0"
.data:00000F14                 dd offset $SG160474     ; "h\tc #87A4DC"
.data:00000F18                 dd offset $SG160475     ; "i\tc #1A62C9"
.data:00000F1C                 dd offset $SG160476     ; "j\tc #75A3DF"
.data:00000F20                 dd offset $SG160477     ; "k\tc #3C74CF"
.data:00000F24                 dd offset $SG160478     ; "l\tc #8DA6DE"
.data:00000F28                 dd offset $SG160479     ; "m\tc #1859C4"
.data:00000F2C                 dd offset $SG160480     ; "n\tc #3B71CC"
.data:00000F30                 dd offset $SG160481     ; "o\tc #8EA5DD"
.data:00000F34                 dd offset $SG160482     ; "p\tc #164EC0"
.data:00000F38                 dd offset $SG160483     ; "q\tc #92A7DD"
.data:00000F3C                 dd offset $SG160484     ; "    .+      "
.data:00000F40                 dd offset $SG160485     ; "    @#$     "
.data:00000F44                 dd offset $SG160486     ; "    %&*=    "
.data:00000F48                 dd offset $SG160487     ; "    -;>,'   "
.data:00000F4C                 dd offset $SG160488     ; "    )!~{]^  "
.data:00000F50                 dd offset $SG160489     ; "    /(_:<[} "
.data:00000F54                 dd offset $SG160490     ; "    |123456 "
.data:00000F58                 dd offset $SG160491     ; "    7890abc "
.data:00000F5C                 dd offset $SG160492     ; "    defgh   "
.data:00000F60                 dd offset $SG160493     ; "    ijkl    "
.data:00000F64                 dd offset $SG160494     ; "    mno     "
.data:00000F68                 dd offset $SG160495     ; "    pq      "
.data:00000F6C                 align 10h
.data:00000F70 _acBottom_xpm   dd offset $SG160497     ; "12 12 54 1"
.data:00000F74                 dd offset $SG160498     ; " \tc #FFFFFF"
.data:00000F78                 dd offset $SG160499     ; ".\tc #C4D7F3"
.data:00000F7C                 dd offset $SG160500     ; "+\tc #72A1E3"
.data:00000F80                 dd offset $SG160501     ; "@\tc #C1D6F2"
.data:00000F84                 dd offset $SG160502     ; "#\tc #6397E1"
.data:00000F88                 dd offset $SG160503     ; "$\tc #5990DD"
.data:00000F8C                 dd offset $SG160504     ; "%\tc #BBD2F0"
.data:00000F90                 dd offset $SG160505     ; "&\tc #7AA6E5"
.data:00000F94                 dd offset $SG160506     ; "*\tc #9ABDEA"
.data:00000F98                 dd offset $SG160507     ; "=\tc #4A87D9"
.data:00000F9C                 dd offset $SG160508     ; "-\tc #B1CAEE"
.data:00000FA0                 dd offset $SG160509     ; ";\tc #75A4E3"
.data:00000FA4                 dd offset $SG160510     ; ">\tc #99BBE9"
.data:00000FA8                 dd offset $SG160511     ; ",\tc #95B9E8"
.data:00000FAC                 dd offset $SG160512     ; "'\tc #3A7CD4"
.data:00000FB0                 dd offset $SG160513     ; ")\tc #A9C6EC"
.data:00000FB4                 dd offset $SG160514     ; "!\tc #71A0E0"
.data:00000FB8                 dd offset $SG160515     ; "~\tc #86AFE5"
.data:00000FBC                 dd offset $SG160516     ; "{\tc #8DB2E6"
.data:00000FC0                 dd offset $SG160517     ; "]\tc #2A72CF"
.data:00000FC4                 dd offset $SG160518     ; "^\tc #73A0E0"
.data:00000FC8                 dd offset $SG160519     ; "/\tc #6B9DE0"
.data:00000FCC                 dd offset $SG160520     ; "(\tc #95B8E8"
.data:00000FD0                 dd offset $SG160521     ; "_\tc #81ABE3"
.data:00000FD4                 dd offset $SG160522     ; ":\tc #72A1DF"
.data:00000FD8                 dd offset $SG160523     ; "<\tc #83ADE3"
.data:00000FDC                 dd offset $SG160524     ; "[\tc #1B65C9"
.data:00000FE0                 dd offset $SG160525     ; "}\tc #5F95DC"
.data:00000FE4                 dd offset $SG160526     ; "|\tc #8BB3E5"
.data:00000FE8                 dd offset $SG160527     ; "1\tc #77A4E0"
.data:00000FEC                 dd offset $SG160528     ; "2\tc #679ADC"
.data:00000FF0                 dd offset $SG160529     ; "3\tc #7AA6E1"
.data:00000FF4                 dd offset $SG160530     ; "4\tc #195CC6"
.data:00000FF8                 dd offset $SG160531     ; "5\tc #FCFDFE"
.data:00000FFC                 dd offset $SG160532     ; "6\tc #8DB2E4"
.data:00001000                 dd offset $SG160533     ; "7\tc #4885D6"
.data:00001004                 dd offset $SG160534     ; "8\tc #7CA9E1"
.data:00001008                 dd offset $SG160535     ; "9\tc #6698DB"
.data:0000100C                 dd offset $SG160536     ; "0\tc #71A1DE"
.data:00001010                 dd offset $SG160537     ; "a\tc #1752C0"
.data:00001014                 dd offset $SG160538     ; "b\tc #88ABE0"
.data:00001018                 dd offset $SG160539     ; "c\tc #3D77D0"
.data:0000101C                 dd offset $SG160540     ; "d\tc #6E9FDD"
.data:00001020                 dd offset $SG160541     ; "e\tc #699BDC"
.data:00001024                 dd offset $SG160542     ; "f\tc #1547BD"
.data:00001028                 dd offset $SG160543     ; "g\tc #8DA6DE"
.data:0000102C                 dd offset $SG160544     ; "h\tc #376BC9"
.data:00001030                 dd offset $SG160545     ; "i\tc #6295DA"
.data:00001034                 dd offset $SG160546     ; "j\tc #1440B9"
.data:00001038                 dd offset $SG160547     ; "k\tc #8DA0DB"
.data:0000103C                 dd offset $SG160548     ; "l\tc #315FC4"
.data:00001040                 dd offset $SG160549     ; "m\tc #1339B7"
.data:00001044                 dd offset $SG160550     ; "n\tc #909FDA"
.data:00001048                 dd offset $SG160551     ; "o\tc #1233B4"
.data:0000104C                 dd offset $SG160552     ; "         .+ "
.data:00001050                 dd offset $SG160553     ; "        @#$ "
.data:00001054                 dd offset $SG160554     ; "       %&*= L"
.data:00001058                 dd offset $SG160555     ; "      -;>,' "
.data:0000105C                 dd offset $SG160556     ; "     )!>~{] "
.data:00001060                 dd offset $SG160557     ; "    ^/(_:<[ "
.data:00001064                 dd offset $SG160558     ; "    (}|1234 "
.data:00001068                 dd offset $SG160559     ; "    567890a "
.data:0000106C                 dd offset $SG160560     ; "      bcdef "
.data:00001070                 dd offset $SG160561     ; "       ghij "
.data:00001074                 dd offset $SG160562     ; "        klm "
.data:00001078                 dd offset $SG160563     ; "         no "
.data:0000107C                 align 10h
.data:00001080 _bookmark_xpm   dd offset $SG160565     ; "13 14 54 1"
.data:00001084                 dd offset $SG160566     ; " \tc None"
.data:00001088                 dd offset $SG160567     ; ".\tc #545254"
.data:0000108C                 dd offset $SG160568     ; "+\tc #3C3E3C"
.data:00001090                 dd offset $SG160569     ; "@\tc #646464"
.data:00001094                 dd offset $SG160570     ; "#\tc #A4A4A4"
.data:00001098                 dd offset $SG160571     ; "$\tc #B7B8B7"
.data:0000109C                 dd offset $SG160572     ; "%\tc #747284"
.data:000010A0                 dd offset $SG160573     ; "&\tc #B4B2C4"
.data:000010A4                 dd offset $SG160574     ; "*\tc #DCD7E4"
.data:000010A8                 dd offset $SG160575     ; "=\tc #1C1A1C"
.data:000010AC                 dd offset $SG160576     ; "-\tc #403E58"
.data:000010B0                 dd offset $SG160577     ; ";\tc #5C5A8C"
.data:000010B4                 dd offset $SG160578     ; ">\tc #7C7EAC"
.data:000010B8                 dd offset $SG160579     ; ",\tc #7C8EBC"
.data:000010BC                 dd offset $SG160580     ; "'\tc #242644"
.data:000010C0                 dd offset $SG160581     ; ")\tc #282668"
.data:000010C4                 dd offset $SG160582     ; "!\tc #24367C"
.data:000010C8                 dd offset $SG160583     ; "~\tc #244A84"
.data:000010CC                 dd offset $SG160584     ; "{\tc #2C5098"
.data:000010D0                 dd offset $SG160585     ; "]\tc #14162C"
.data:000010D4                 dd offset $SG160586     ; "^\tc #142E7C"
.data:000010D8                 dd offset $SG160587     ; "/\tc #143789"
.data:000010DC                 dd offset $SG160588     ; "(\tc #204990"
.data:000010E0                 dd offset $SG160589     ; "_\tc #174091"
.data:000010E4                 dd offset $SG160590     ; ":\tc #0C0630"
.data:000010E8                 dd offset $SG160591     ; "<\tc #24327C"
.data:000010EC                 dd offset $SG160592     ; "[\tc #2450A0"
.data:000010F0                 dd offset $SG160593     ; "}\tc #345DB4"
.data:000010F4                 dd offset $SG160594     ; "|\tc #3C68B8"
.data:000010F8                 dd offset $SG160595     ; "1\tc #141244"
.data:000010FC                 dd offset $SG160596     ; "2\tc #24428C"
.data:00001100                 dd offset $SG160597     ; "3\tc #3462B9"
.data:00001104                 dd offset $SG160598     ; "4\tc #4470C4"
.data:00001108                 dd offset $SG160599     ; "5\tc #4C7FD6"
.data:0000110C                 dd offset $SG160600     ; "6\tc #4472CC"
.data:00001110                 dd offset $SG160601     ; "7\tc #24224C"
.data:00001114                 dd offset $SG160602     ; "8\tc #5C8DEC"
.data:00001118                 dd offset $SG160603     ; "9\tc #5C94F6"
.data:0000111C                 dd offset $SG160604     ; "0\tc #5482DF"
.data:00001120                 dd offset $SG160605     ; "a\tc #619DF7"
.data:00001124                 dd offset $SG160606     ; "b\tc #6CA6FC"
.data:00001128                 dd offset $SG160607     ; "c\tc #64A2FC"
.data:0000112C                 dd offset $SG160608     ; "d\tc #1C2E5C"
.data:00001130                 dd offset $SG160609     ; "e\tc #6CA2FC"
.data:00001134                 dd offset $SG160610     ; "f\tc #74B2FC"
.data:00001138                 dd offset $SG160611     ; "g\tc #7CB8FC"
.data:0000113C                 dd offset $SG160612     ; "h\tc #1C3264"
.data:00001140                 dd offset $SG160613     ; "i\tc #346AD4"
.data:00001144                 dd offset $SG160614     ; "j\tc #7CBEFC"
.data:00001148                 dd offset $SG160615     ; "k\tc #3C72DC"
.data:0000114C                 dd offset $SG160616     ; "l\tc #243250"
.data:00001150                 dd offset $SG160617     ; "m\tc #346AB4"
.data:00001154                 dd offset $SG160618     ; "n\tc #3C82DC"
.data:00001158                 dd offset $SG160619     ; "o\tc #6C6A6C"
.data:0000115C                 dd offset $SG160620     ; "     .+.     "
.data:00001160                 dd offset $SG160621     ; "   @##$##@   "
.data:00001164                 dd offset $SG160622     ; "  @%&***&%@  "
.data:00001168                 dd offset $SG160623     ; " =-;>,,,>;-= "
.data:0000116C                 dd offset $SG160624     ; " ')!~{{{~!)' "
.data:00001170                 dd offset $SG160625     ; "])^/({{{(_^)]"
.data:00001174                 dd offset $SG160626     ; ":<_[}|||}[_<:"
.data:00001178                 dd offset $SG160627     ; "12[3455563[21"
.data:0000117C                 dd offset $SG160628     ; "7_365899063_7"
.data:00001180                 dd offset $SG160629     ; " /|09abc904/ "
.data:00001184                 dd offset $SG160630     ; " d}8efgfb83d "
.data:00001188                 dd offset $SG160631     ; "  hiafjgakh  "
.data:0000118C                 dd offset $SG160632     ; "   l~mnm~l   "
.data:00001190                 dd offset $SG160633     ; "     o@o     "
.data:00001190 _data           ends
.data:00001190
.text$mn:00001194 ; ===========================================================================
.text$mn:00001194
.text$mn:00001194 ; Segment type: Pure code
.text$mn:00001194 ; Segment permissions: Read/Execute
.text$mn:00001194 _text$mn        segment para public 'CODE' use32
.text$mn:00001194                 assume cs:_text$mn
.text$mn:00001194                 ;org 1194h
.text$mn:00001194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001194
.text$mn:00001194 ; =============== S U B R O U T I N E =======================================
.text$mn:00001194
.text$mn:00001194 ; Attributes: bp-based frame
.text$mn:00001194
.text$mn:00001194 ; __int32 __stdcall ColourStaticTextHooker::colourStaticProc(ColourStaticTextHooker *this, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.text$mn:00001194                 public ?colourStaticProc@ColourStaticTextHooker@@AAGJPAUHWND__@@IIJ@Z
.text$mn:00001194 ?colourStaticProc@ColourStaticTextHooker@@AAGJPAUHWND__@@IIJ@Z proc near
.text$mn:00001194                                         ; CODE XREF: ColourStaticTextHooker::staticProc(HWND__ *,uint,uint,long)+27p
.text$mn:00001194
.text$mn:00001194 h               = dword ptr -26Ch
.text$mn:00001194 var_268         = dword ptr -268h
.text$mn:00001194 var_264         = dword ptr -264h
.text$mn:00001194 hdc             = dword ptr -260h
.text$mn:00001194 Paint           = tagPAINTSTRUCT ptr -25Ch
.text$mn:00001194 Rect            = tagRECT ptr -21Ch
.text$mn:00001194 String          = word ptr -20Ch
.text$mn:00001194 var_4           = dword ptr -4
.text$mn:00001194 this            = dword ptr  8
.text$mn:00001194 hWnd            = dword ptr  0Ch
.text$mn:00001194 Msg             = dword ptr  10h
.text$mn:00001194 wParam          = dword ptr  14h
.text$mn:00001194 lParam          = dword ptr  18h
.text$mn:00001194
.text$mn:00001194                 push    ebp
.text$mn:00001195                 mov     ebp, esp
.text$mn:00001197                 sub     esp, 26Ch
.text$mn:0000119D                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000011A2                 xor     eax, ebp
.text$mn:000011A4                 mov     [ebp+var_4], eax
.text$mn:000011A7                 mov     eax, [ebp+Msg]
.text$mn:000011AA                 mov     [ebp+var_268], eax
.text$mn:000011B0                 cmp     [ebp+var_268], 0Fh
.text$mn:000011B7                 jz      short loc_11BE
.text$mn:000011B9                 jmp     loc_1282
.text$mn:000011BE ; ---------------------------------------------------------------------------
.text$mn:000011BE
.text$mn:000011BE loc_11BE:                               ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+23j
.text$mn:000011BE                 lea     ecx, [ebp+Rect]
.text$mn:000011C4                 push    ecx             ; lpRect
.text$mn:000011C5                 mov     edx, [ebp+hWnd]
.text$mn:000011C8                 push    edx             ; hWnd
.text$mn:000011C9                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:000011CF                 lea     eax, [ebp+Paint]
.text$mn:000011D5                 push    eax             ; lpPaint
.text$mn:000011D6                 mov     ecx, [ebp+hWnd]
.text$mn:000011D9                 push    ecx             ; hWnd
.text$mn:000011DA                 call    dword ptr ds:__imp__BeginPaint@8 ; BeginPaint(x,x)
.text$mn:000011E0                 mov     [ebp+hdc], eax
.text$mn:000011E6                 mov     edx, [ebp+this]
.text$mn:000011E9                 mov     eax, [edx]
.text$mn:000011EB                 push    eax             ; color
.text$mn:000011EC                 mov     ecx, [ebp+hdc]
.text$mn:000011F2                 push    ecx             ; hdc
.text$mn:000011F3                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:000011F9                 push    11h             ; i
.text$mn:000011FB                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text$mn:00001201                 mov     [ebp+h], eax
.text$mn:00001207                 mov     edx, [ebp+h]
.text$mn:0000120D                 push    edx             ; h
.text$mn:0000120E                 mov     eax, [ebp+hdc]
.text$mn:00001214                 push    eax             ; hdc
.text$mn:00001215                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:0000121B                 mov     [ebp+var_264], eax
.text$mn:00001221                 push    104h            ; nMaxCount
.text$mn:00001226                 lea     ecx, [ebp+String]
.text$mn:0000122C                 push    ecx             ; lpString
.text$mn:0000122D                 mov     edx, [ebp+hWnd]
.text$mn:00001230                 push    edx             ; hWnd
.text$mn:00001231                 call    dword ptr ds:__imp__GetWindowTextW@12 ; GetWindowTextW(x,x,x)
.text$mn:00001237                 push    0               ; format
.text$mn:00001239                 lea     eax, [ebp+Rect]
.text$mn:0000123F                 push    eax             ; lprc
.text$mn:00001240                 push    0FFFFFFFFh      ; cchText
.text$mn:00001242                 lea     ecx, [ebp+String]
.text$mn:00001248                 push    ecx             ; lpchText
.text$mn:00001249                 mov     edx, [ebp+hdc]
.text$mn:0000124F                 push    edx             ; hdc
.text$mn:00001250                 call    dword ptr ds:__imp__DrawTextW@20 ; DrawTextW(x,x,x,x,x)
.text$mn:00001256                 mov     eax, [ebp+var_264]
.text$mn:0000125C                 push    eax             ; h
.text$mn:0000125D                 mov     ecx, [ebp+hdc]
.text$mn:00001263                 push    ecx             ; hdc
.text$mn:00001264                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:0000126A                 lea     edx, [ebp+Paint]
.text$mn:00001270                 push    edx             ; lpPaint
.text$mn:00001271                 mov     eax, [ebp+hWnd]
.text$mn:00001274                 push    eax             ; hWnd
.text$mn:00001275                 call    dword ptr ds:__imp__EndPaint@8 ; EndPaint(x,x)
.text$mn:0000127B                 mov     eax, 1
.text$mn:00001280                 jmp     short loc_129F
.text$mn:00001282 ; ---------------------------------------------------------------------------
.text$mn:00001282
.text$mn:00001282 loc_1282:                               ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+25j
.text$mn:00001282                 mov     ecx, [ebp+lParam]
.text$mn:00001285                 push    ecx             ; lParam
.text$mn:00001286                 mov     edx, [ebp+wParam]
.text$mn:00001289                 push    edx             ; wParam
.text$mn:0000128A                 mov     eax, [ebp+Msg]
.text$mn:0000128D                 push    eax             ; Msg
.text$mn:0000128E                 mov     ecx, [ebp+hWnd]
.text$mn:00001291                 push    ecx             ; hWnd
.text$mn:00001292                 mov     edx, [ebp+this]
.text$mn:00001295                 mov     eax, [edx+4]
.text$mn:00001298                 push    eax             ; lpPrevWndFunc
.text$mn:00001299                 call    dword ptr ds:__imp__CallWindowProcW@20 ; CallWindowProcW(x,x,x,x,x)
.text$mn:0000129F
.text$mn:0000129F loc_129F:                               ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+ECj
.text$mn:0000129F                 mov     ecx, [ebp+var_4]
.text$mn:000012A2                 xor     ecx, ebp
.text$mn:000012A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000012A9                 mov     esp, ebp
.text$mn:000012AB                 pop     ebp
.text$mn:000012AC                 retn    14h
.text$mn:000012AC ?colourStaticProc@ColourStaticTextHooker@@AAGJPAUHWND__@@IIJ@Z endp
.text$mn:000012AC
.text$mn:000012AC ; ---------------------------------------------------------------------------
.text$mn:000012AF                 db 5 dup(0CCh)
.text$mn:000012B4
.text$mn:000012B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000012B4
.text$mn:000012B4 ; Attributes: bp-based frame
.text$mn:000012B4
.text$mn:000012B4 ; void __thiscall WordStyleDlg::create(WordStyleDlg *this, int, bool)
.text$mn:000012B4                 public ?create@WordStyleDlg@@UAEXH_N@Z
.text$mn:000012B4 ?create@WordStyleDlg@@UAEXH_N@Z proc near
.text$mn:000012B4
.text$mn:000012B4 var_4           = dword ptr -4
.text$mn:000012B4 arg_0           = dword ptr  8
.text$mn:000012B4 arg_4           = byte ptr  0Ch
.text$mn:000012B4
.text$mn:000012B4                 push    ebp
.text$mn:000012B5                 mov     ebp, esp
.text$mn:000012B7                 push    ecx
.text$mn:000012B8                 mov     [ebp+var_4], ecx
.text$mn:000012BB                 push    1               ; bool
.text$mn:000012BD                 movzx   eax, [ebp+arg_4]
.text$mn:000012C1                 push    eax             ; bool
.text$mn:000012C2                 mov     ecx, [ebp+arg_0]
.text$mn:000012C5                 push    ecx             ; int
.text$mn:000012C6                 mov     ecx, [ebp+var_4] ; this
.text$mn:000012C9                 call    ?create@StaticDialog@@UAEXH_N0@Z ; StaticDialog::create(int,bool,bool)
.text$mn:000012CE                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000012D3                 mov     ecx, eax        ; this
.text$mn:000012D5                 call    ?isTransparentAvailable@NppParameters@@QBE_NXZ ; NppParameters::isTransparentAvailable(void)
.text$mn:000012DA                 movzx   edx, al
.text$mn:000012DD                 test    edx, edx
.text$mn:000012DF                 jz      loc_1392
.text$mn:000012E5                 push    5               ; nCmdShow
.text$mn:000012E7                 push    8FFh            ; nIDDlgItem
.text$mn:000012EC                 mov     eax, [ebp+var_4]
.text$mn:000012EF                 mov     ecx, [eax+0Ch]
.text$mn:000012F2                 push    ecx             ; hDlg
.text$mn:000012F3                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000012F9                 push    eax             ; hWnd
.text$mn:000012FA                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00001300                 push    5               ; nCmdShow
.text$mn:00001302                 push    8FEh            ; nIDDlgItem
.text$mn:00001307                 mov     edx, [ebp+var_4]
.text$mn:0000130A                 mov     eax, [edx+0Ch]
.text$mn:0000130D                 push    eax             ; hDlg
.text$mn:0000130E                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001314                 push    eax             ; hWnd
.text$mn:00001315                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000131B                 push    0C80014h        ; lParam
.text$mn:00001320                 push    0               ; wParam
.text$mn:00001322                 push    406h            ; Msg
.text$mn:00001327                 push    8FEh            ; nIDDlgItem
.text$mn:0000132C                 mov     ecx, [ebp+var_4]
.text$mn:0000132F                 mov     edx, [ecx+0Ch]
.text$mn:00001332                 push    edx             ; hDlg
.text$mn:00001333                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001339                 push    96h ; 'û'       ; lParam
.text$mn:0000133E                 push    1               ; wParam
.text$mn:00001340                 push    405h            ; Msg
.text$mn:00001345                 push    8FEh            ; nIDDlgItem
.text$mn:0000134A                 mov     eax, [ebp+var_4]
.text$mn:0000134D                 mov     ecx, [eax+0Ch]
.text$mn:00001350                 push    ecx             ; hDlg
.text$mn:00001351                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001357                 push    0               ; lParam
.text$mn:00001359                 push    0               ; wParam
.text$mn:0000135B                 push    0F0h ; '='      ; Msg
.text$mn:00001360                 push    8FEh            ; nIDDlgItem
.text$mn:00001365                 mov     edx, [ebp+var_4]
.text$mn:00001368                 mov     eax, [edx+0Ch]
.text$mn:0000136B                 push    eax             ; hDlg
.text$mn:0000136C                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001372                 cmp     eax, 1
.text$mn:00001375                 jz      short loc_1392
.text$mn:00001377                 push    0               ; bEnable
.text$mn:00001379                 push    8FEh            ; nIDDlgItem
.text$mn:0000137E                 mov     ecx, [ebp+var_4]
.text$mn:00001381                 mov     edx, [ecx+0Ch]
.text$mn:00001384                 push    edx             ; hDlg
.text$mn:00001385                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000138B                 push    eax             ; hWnd
.text$mn:0000138C                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001392
.text$mn:00001392 loc_1392:                               ; CODE XREF: WordStyleDlg::create(int,bool)+2Bj
.text$mn:00001392                                         ; WordStyleDlg::create(int,bool)+C1j
.text$mn:00001392                 mov     esp, ebp
.text$mn:00001394                 pop     ebp
.text$mn:00001395                 retn    8
.text$mn:00001395 ?create@WordStyleDlg@@UAEXH_N@Z endp
.text$mn:00001395
.text$mn:00001395 ; ---------------------------------------------------------------------------
.text$mn:00001398                 db 0Ch dup(0CCh)
.text$mn:000013A4
.text$mn:000013A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000013A4
.text$mn:000013A4 ; Attributes: bp-based frame
.text$mn:000013A4
.text$mn:000013A4 ; void __thiscall WordStyleDlg::apply(WordStyleDlg *__hidden this)
.text$mn:000013A4                 public ?apply@WordStyleDlg@@QAEXXZ
.text$mn:000013A4 ?apply@WordStyleDlg@@QAEXXZ proc near   ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+744p
.text$mn:000013A4                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+76Ap ...
.text$mn:000013A4
.text$mn:000013A4 var_C           = dword ptr -0Ch
.text$mn:000013A4 var_8           = dword ptr -8
.text$mn:000013A4 var_4           = dword ptr -4
.text$mn:000013A4
.text$mn:000013A4                 push    ebp
.text$mn:000013A5                 mov     ebp, esp
.text$mn:000013A7                 sub     esp, 0Ch
.text$mn:000013AA                 mov     [ebp+var_4], ecx
.text$mn:000013AD                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000013B2                 mov     ecx, eax        ; this
.text$mn:000013B4                 call    ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ ; NppParameters::getLStylerArray(void)
.text$mn:000013B9                 mov     [ebp+var_8], eax
.text$mn:000013BC                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000013C1                 mov     ecx, eax        ; this
.text$mn:000013C3                 call    ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ ; NppParameters::getGlobalStylers(void)
.text$mn:000013C8                 mov     [ebp+var_C], eax
.text$mn:000013CB                 mov     eax, [ebp+var_4]
.text$mn:000013CE                 add     eax, 5Ch ; '\'
.text$mn:000013D1                 push    eax
.text$mn:000013D2                 mov     ecx, [ebp+var_8]
.text$mn:000013D5                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:000013DA                 mov     ecx, [ebp+var_4]
.text$mn:000013DD                 add     ecx, 1B860h
.text$mn:000013E3                 push    ecx
.text$mn:000013E4                 mov     ecx, [ebp+var_C]
.text$mn:000013E7                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:000013EC                 push    0               ; bEnable
.text$mn:000013EE                 push    1               ; nIDDlgItem
.text$mn:000013F0                 mov     edx, [ebp+var_4]
.text$mn:000013F3                 mov     eax, [edx+0Ch]
.text$mn:000013F6                 push    eax             ; hDlg
.text$mn:000013F7                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000013FD                 push    eax             ; hWnd
.text$mn:000013FE                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001404                 push    0               ; lParam
.text$mn:00001406                 push    0               ; wParam
.text$mn:00001408                 push    1789h           ; Msg
.text$mn:0000140D                 mov     ecx, [ebp+var_4]
.text$mn:00001410                 mov     edx, [ecx+8]
.text$mn:00001413                 push    edx             ; hWnd
.text$mn:00001414                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000141A                 mov     esp, ebp
.text$mn:0000141C                 pop     ebp
.text$mn:0000141D                 retn
.text$mn:0000141D ?apply@WordStyleDlg@@QAEXXZ endp
.text$mn:0000141D
.text$mn:0000141D ; ---------------------------------------------------------------------------
.text$mn:0000141E                 db 6 dup(0CCh)
.text$mn:00001424
.text$mn:00001424 ; =============== S U B R O U T I N E =======================================
.text$mn:00001424
.text$mn:00001424 ; Attributes: bp-based frame
.text$mn:00001424
.text$mn:00001424 ; int __stdcall WordStyleDlg::run_dlgProc(WordStyleDlg *this, unsigned int, unsigned int nIDDlgItem, __int32)
.text$mn:00001424                 public ?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z
.text$mn:00001424 ?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z proc near
.text$mn:00001424
.text$mn:00001424 var_12C         = dword ptr -12Ch
.text$mn:00001424 var_128         = dword ptr -128h
.text$mn:00001424 var_124         = dword ptr -124h
.text$mn:00001424 var_120         = dword ptr -120h
.text$mn:00001424 wParam          = dword ptr -11Ch
.text$mn:00001424 var_118         = dword ptr -118h
.text$mn:00001424 var_114         = dword ptr -114h
.text$mn:00001424 var_110         = dword ptr -110h
.text$mn:00001424 var_10C         = dword ptr -10Ch
.text$mn:00001424 var_108         = dword ptr -108h
.text$mn:00001424 var_104         = dword ptr -104h
.text$mn:00001424 var_100         = dword ptr -100h
.text$mn:00001424 var_FC          = dword ptr -0FCh
.text$mn:00001424 var_F8          = dword ptr -0F8h
.text$mn:00001424 var_F4          = dword ptr -0F4h
.text$mn:00001424 var_F0          = dword ptr -0F0h
.text$mn:00001424 var_EC          = dword ptr -0ECh
.text$mn:00001424 var_E8          = dword ptr -0E8h
.text$mn:00001424 var_E4          = dword ptr -0E4h
.text$mn:00001424 var_E0          = dword ptr -0E0h
.text$mn:00001424 var_DC          = dword ptr -0DCh
.text$mn:00001424 var_D8          = dword ptr -0D8h
.text$mn:00001424 var_D4          = dword ptr -0D4h
.text$mn:00001424 var_D0          = dword ptr -0D0h
.text$mn:00001424 var_CC          = dword ptr -0CCh
.text$mn:00001424 var_C8          = dword ptr -0C8h
.text$mn:00001424 var_C4          = dword ptr -0C4h
.text$mn:00001424 var_C0          = dword ptr -0C0h
.text$mn:00001424 var_BC          = dword ptr -0BCh
.text$mn:00001424 var_B8          = dword ptr -0B8h
.text$mn:00001424 var_B4          = dword ptr -0B4h
.text$mn:00001424 var_B0          = dword ptr -0B0h
.text$mn:00001424 var_AC          = dword ptr -0ACh
.text$mn:00001424 var_A8          = dword ptr -0A8h
.text$mn:00001424 var_A4          = dword ptr -0A4h
.text$mn:00001424 var_A0          = dword ptr -0A0h
.text$mn:00001424 var_9C          = dword ptr -9Ch
.text$mn:00001424 var_98          = dword ptr -98h
.text$mn:00001424 var_94          = dword ptr -94h
.text$mn:00001424 var_90          = dword ptr -90h
.text$mn:00001424 var_8C          = dword ptr -8Ch
.text$mn:00001424 var_88          = dword ptr -88h
.text$mn:00001424 var_84          = dword ptr -84h
.text$mn:00001424 var_80          = dword ptr -80h
.text$mn:00001424 var_7C          = dword ptr -7Ch
.text$mn:00001424 var_78          = dword ptr -78h
.text$mn:00001424 X               = dword ptr -74h
.text$mn:00001424 Y               = dword ptr -70h
.text$mn:00001424 var_6C          = dword ptr -6Ch
.text$mn:00001424 var_68          = dword ptr -68h
.text$mn:00001424 var_64          = dword ptr -64h
.text$mn:00001424 var_60          = dword ptr -60h
.text$mn:00001424 var_5C          = dword ptr -5Ch
.text$mn:00001424 var_58          = dword ptr -58h
.text$mn:00001424 var_54          = dword ptr -54h
.text$mn:00001424 var_50          = dword ptr -50h
.text$mn:00001424 var_4C          = dword ptr -4Ch
.text$mn:00001424 var_48          = dword ptr -48h
.text$mn:00001424 var_44          = dword ptr -44h
.text$mn:00001424 var_40          = dword ptr -40h
.text$mn:00001424 var_3C          = dword ptr -3Ch
.text$mn:00001424 var_38          = dword ptr -38h
.text$mn:00001424 var_34          = dword ptr -34h
.text$mn:00001424 var_2E          = byte ptr -2Eh
.text$mn:00001424 var_2D          = byte ptr -2Dh
.text$mn:00001424 var_2C          = byte ptr -2Ch
.text$mn:00001424 var_10          = dword ptr -10h
.text$mn:00001424 var_C           = dword ptr -0Ch
.text$mn:00001424 var_4           = dword ptr -4
.text$mn:00001424 this            = dword ptr  8
.text$mn:00001424 arg_4           = dword ptr  0Ch
.text$mn:00001424 nIDDlgItem      = dword ptr  10h
.text$mn:00001424 arg_C           = dword ptr  14h
.text$mn:00001424
.text$mn:00001424                 push    ebp
.text$mn:00001425                 mov     ebp, esp
.text$mn:00001427                 push    0FFFFFFFFh
.text$mn:00001429                 push    offset __ehhandler$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z
.text$mn:0000142E                 mov     eax, large fs:0
.text$mn:00001434                 push    eax
.text$mn:00001435                 sub     esp, 120h
.text$mn:0000143B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001440                 xor     eax, ebp
.text$mn:00001442                 mov     [ebp+var_10], eax
.text$mn:00001445                 push    eax
.text$mn:00001446                 lea     eax, [ebp+var_C]
.text$mn:00001449                 mov     large fs:0, eax
.text$mn:0000144F                 mov     eax, [ebp+arg_4]
.text$mn:00001452                 mov     [ebp+var_38], eax
.text$mn:00001455                 cmp     [ebp+var_38], 111h
.text$mn:0000145C                 ja      short loc_1483
.text$mn:0000145E                 cmp     [ebp+var_38], 111h
.text$mn:00001465                 jz      loc_1B21
.text$mn:0000146B                 cmp     [ebp+var_38], 2
.text$mn:0000146F                 jz      loc_1A1F
.text$mn:00001475                 cmp     [ebp+var_38], 110h
.text$mn:0000147C                 jz      short loc_1495
.text$mn:0000147E                 jmp     loc_2530
.text$mn:00001483 ; ---------------------------------------------------------------------------
.text$mn:00001483
.text$mn:00001483 loc_1483:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+38j
.text$mn:00001483                 cmp     [ebp+var_38], 114h
.text$mn:0000148A                 jz      loc_1AC5
.text$mn:00001490                 jmp     loc_2530
.text$mn:00001495 ; ---------------------------------------------------------------------------
.text$mn:00001495
.text$mn:00001495 loc_1495:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+58j
.text$mn:00001495                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:0000149A                 mov     [ebp+var_60], eax
.text$mn:0000149D                 push    89Ch            ; nIDDlgItem
.text$mn:000014A2                 mov     ecx, [ebp+this]
.text$mn:000014A5                 mov     edx, [ecx+0Ch]
.text$mn:000014A8                 push    edx             ; hDlg
.text$mn:000014A9                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014AF                 mov     ecx, [ebp+this]
.text$mn:000014B2                 mov     [ecx+30h], eax
.text$mn:000014B5                 push    89Dh            ; nIDDlgItem
.text$mn:000014BA                 mov     edx, [ebp+this]
.text$mn:000014BD                 mov     eax, [edx+0Ch]
.text$mn:000014C0                 push    eax             ; hDlg
.text$mn:000014C1                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014C7                 mov     ecx, [ebp+this]
.text$mn:000014CA                 mov     [ecx+34h], eax
.text$mn:000014CD                 push    8AAh            ; nIDDlgItem
.text$mn:000014D2                 mov     edx, [ebp+this]
.text$mn:000014D5                 mov     eax, [edx+0Ch]
.text$mn:000014D8                 push    eax             ; hDlg
.text$mn:000014D9                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014DF                 mov     ecx, [ebp+this]
.text$mn:000014E2                 mov     [ecx+38h], eax
.text$mn:000014E5                 push    89Ah            ; nIDDlgItem
.text$mn:000014EA                 mov     edx, [ebp+this]
.text$mn:000014ED                 mov     eax, [edx+0Ch]
.text$mn:000014F0                 push    eax             ; hDlg
.text$mn:000014F1                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014F7                 mov     ecx, [ebp+this]
.text$mn:000014FA                 mov     [ecx+3Ch], eax
.text$mn:000014FD                 push    89Bh            ; nIDDlgItem
.text$mn:00001502                 mov     edx, [ebp+this]
.text$mn:00001505                 mov     eax, [edx+0Ch]
.text$mn:00001508                 push    eax             ; hDlg
.text$mn:00001509                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000150F                 mov     ecx, [ebp+this]
.text$mn:00001512                 mov     [ecx+40h], eax
.text$mn:00001515                 push    903h            ; nIDDlgItem
.text$mn:0000151A                 mov     edx, [ebp+this]
.text$mn:0000151D                 mov     eax, [edx+0Ch]
.text$mn:00001520                 push    eax             ; hDlg
.text$mn:00001521                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001527                 mov     ecx, [ebp+this]
.text$mn:0000152A                 mov     [ecx+44h], eax
.text$mn:0000152D                 push    89Eh            ; nIDDlgItem
.text$mn:00001532                 mov     edx, [ebp+this]
.text$mn:00001535                 mov     eax, [edx+0Ch]
.text$mn:00001538                 push    eax             ; hDlg
.text$mn:00001539                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000153F                 mov     ecx, [ebp+this]
.text$mn:00001542                 mov     [ecx+48h], eax
.text$mn:00001545                 push    89Fh            ; nIDDlgItem
.text$mn:0000154A                 mov     edx, [ebp+this]
.text$mn:0000154D                 mov     eax, [edx+0Ch]
.text$mn:00001550                 push    eax             ; hDlg
.text$mn:00001551                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001557                 mov     ecx, [ebp+this]
.text$mn:0000155A                 mov     [ecx+4Ch], eax
.text$mn:0000155D                 push    8A0h            ; nIDDlgItem
.text$mn:00001562                 mov     edx, [ebp+this]
.text$mn:00001565                 mov     eax, [edx+0Ch]
.text$mn:00001568                 push    eax             ; hDlg
.text$mn:00001569                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000156F                 mov     ecx, [ebp+this]
.text$mn:00001572                 mov     [ecx+50h], eax
.text$mn:00001575                 push    8A1h            ; nIDDlgItem
.text$mn:0000157A                 mov     edx, [ebp+this]
.text$mn:0000157D                 mov     eax, [edx+0Ch]
.text$mn:00001580                 push    eax             ; hDlg
.text$mn:00001581                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001587                 mov     ecx, [ebp+this]
.text$mn:0000158A                 mov     [ecx+54h], eax
.text$mn:0000158D                 push    8B9h            ; nIDDlgItem
.text$mn:00001592                 mov     edx, [ebp+this]
.text$mn:00001595                 mov     eax, [edx+0Ch]
.text$mn:00001598                 push    eax             ; hDlg
.text$mn:00001599                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000159F                 mov     ecx, [ebp+this]
.text$mn:000015A2                 mov     [ecx+58h], eax
.text$mn:000015A5                 push    0FFh            ; unsigned __int32
.text$mn:000015AA                 mov     ecx, [ebp+this]
.text$mn:000015AD                 add     ecx, 37AE0h     ; this
.text$mn:000015B3                 call    ?setColour@ColourStaticTextHooker@@QAEKK@Z ; ColourStaticTextHooker::setColour(ulong)
.text$mn:000015B8                 mov     edx, [ebp+this]
.text$mn:000015BB                 mov     eax, [edx+58h]
.text$mn:000015BE                 push    eax             ; HWND
.text$mn:000015BF                 mov     ecx, [ebp+this]
.text$mn:000015C2                 add     ecx, 37AE0h     ; this
.text$mn:000015C8                 call    ?hookOn@ColourStaticTextHooker@@QAEXPAUHWND__@@@Z ; ColourStaticTextHooker::hookOn(HWND__ *)
.text$mn:000015CD                 mov     ecx, [ebp+this]
.text$mn:000015D0                 mov     dword ptr [ecx+2Ch], 0FFFFFFFFh
.text$mn:000015D7                 mov     [ebp+var_D4], 0
.text$mn:000015E1                 mov     ecx, [ebp+var_60] ; this
.text$mn:000015E4                 call    ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ ; NppParameters::getThemeSwitcher(void)
.text$mn:000015E9                 mov     [ebp+var_84], eax
.text$mn:000015EF                 mov     [ebp+var_54], 0
.text$mn:000015F6                 jmp     short loc_1601
.text$mn:000015F8 ; ---------------------------------------------------------------------------
.text$mn:000015F8
.text$mn:000015F8 loc_15F8:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long):loc_16A5j
.text$mn:000015F8                 mov     edx, [ebp+var_54]
.text$mn:000015FB                 add     edx, 1
.text$mn:000015FE                 mov     [ebp+var_54], edx
.text$mn:00001601
.text$mn:00001601 loc_1601:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1D2j
.text$mn:00001601                 mov     ecx, [ebp+var_84] ; this
.text$mn:00001607                 call    ?size@ThemeSwitcher@@QBEIXZ ; ThemeSwitcher::size(void)
.text$mn:0000160C                 cmp     [ebp+var_54], eax
.text$mn:0000160F                 jnb     loc_16AA
.text$mn:00001615                 mov     eax, [ebp+var_54]
.text$mn:00001618                 push    eax
.text$mn:00001619                 mov     ecx, [ebp+var_84]
.text$mn:0000161F                 call    ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z ; ThemeSwitcher::getElementFromIndex(uint)
.text$mn:00001624                 mov     [ebp+var_50], eax
.text$mn:00001627                 mov     ecx, [ebp+var_50]
.text$mn:0000162A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000162F                 push    eax             ; lParam
.text$mn:00001630                 push    0               ; wParam
.text$mn:00001632                 push    143h            ; Msg
.text$mn:00001637                 mov     ecx, [ebp+this]
.text$mn:0000163A                 mov     edx, [ecx+44h]
.text$mn:0000163D                 push    edx             ; hWnd
.text$mn:0000163E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001644                 mov     [ebp+var_CC], eax
.text$mn:0000164A                 mov     ecx, [ebp+var_60] ; this
.text$mn:0000164D                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00001652                 add     eax, 674h
.text$mn:00001657                 push    eax
.text$mn:00001658                 mov     ecx, [ebp+var_50]
.text$mn:0000165B                 add     ecx, 1Ch
.text$mn:0000165E                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001663                 test    eax, eax
.text$mn:00001665                 jnz     short loc_1688
.text$mn:00001667                 mov     eax, [ebp+this]
.text$mn:0000166A                 mov     ecx, [ebp+var_CC]
.text$mn:00001670                 mov     [eax+2Ch], ecx
.text$mn:00001673                 mov     edx, [ebp+var_50]
.text$mn:00001676                 add     edx, 1Ch
.text$mn:00001679                 push    edx
.text$mn:0000167A                 mov     ecx, [ebp+this]
.text$mn:0000167D                 add     ecx, 1BD8Ch
.text$mn:00001683                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001688
.text$mn:00001688 loc_1688:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+241j
.text$mn:00001688                 push    offset $SG168189 ; "Default"
.text$mn:0000168D                 mov     ecx, [ebp+var_50]
.text$mn:00001690                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00001695                 test    eax, eax
.text$mn:00001697                 jnz     short loc_16A5
.text$mn:00001699                 mov     eax, [ebp+var_CC]
.text$mn:0000169F                 mov     [ebp+var_D4], eax
.text$mn:000016A5
.text$mn:000016A5 loc_16A5:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+273j
.text$mn:000016A5                 jmp     loc_15F8
.text$mn:000016AA ; ---------------------------------------------------------------------------
.text$mn:000016AA
.text$mn:000016AA loc_16AA:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1EBj
.text$mn:000016AA                 mov     ecx, [ebp+this]
.text$mn:000016AD                 cmp     dword ptr [ecx+2Ch], 0FFFFFFFFh
.text$mn:000016B1                 jnz     short loc_16BF
.text$mn:000016B3                 mov     edx, [ebp+this]
.text$mn:000016B6                 mov     eax, [ebp+var_D4]
.text$mn:000016BC                 mov     [edx+2Ch], eax
.text$mn:000016BF
.text$mn:000016BF loc_16BF:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+28Dj
.text$mn:000016BF                 push    0               ; lParam
.text$mn:000016C1                 mov     ecx, [ebp+this]
.text$mn:000016C4                 mov     edx, [ecx+2Ch]
.text$mn:000016C7                 push    edx             ; wParam
.text$mn:000016C8                 push    14Eh            ; Msg
.text$mn:000016CD                 mov     eax, [ebp+this]
.text$mn:000016D0                 mov     ecx, [eax+44h]
.text$mn:000016D3                 push    ecx             ; hWnd
.text$mn:000016D4                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000016DA                 mov     [ebp+var_44], 0
.text$mn:000016E1                 jmp     short loc_16EC
.text$mn:000016E3 ; ---------------------------------------------------------------------------
.text$mn:000016E3
.text$mn:000016E3 loc_16E3:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+2ECj
.text$mn:000016E3                 mov     edx, [ebp+var_44]
.text$mn:000016E6                 add     edx, 1
.text$mn:000016E9                 mov     [ebp+var_44], edx
.text$mn:000016EC
.text$mn:000016EC loc_16EC:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+2BDj
.text$mn:000016EC                 cmp     [ebp+var_44], 11h
.text$mn:000016F0                 jnb     short loc_1712
.text$mn:000016F2                 imul    eax, [ebp+var_44], 6
.text$mn:000016F6                 add     eax, offset _fontSizeStrs
.text$mn:000016FB                 push    eax             ; lParam
.text$mn:000016FC                 push    0               ; wParam
.text$mn:000016FE                 push    143h            ; Msg
.text$mn:00001703                 mov     ecx, [ebp+this]
.text$mn:00001706                 mov     edx, [ecx+40h]
.text$mn:00001709                 push    edx             ; hWnd
.text$mn:0000170A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001710                 jmp     short loc_16E3
.text$mn:00001712 ; ---------------------------------------------------------------------------
.text$mn:00001712
.text$mn:00001712 loc_1712:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+2CCj
.text$mn:00001712                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001717                 mov     ecx, eax
.text$mn:00001719                 call    ?getFontList@NppParameters@@QBEABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ ; NppParameters::getFontList(void)
.text$mn:0000171E                 mov     [ebp+var_64], eax
.text$mn:00001721                 mov     [ebp+var_40], 0
.text$mn:00001728                 mov     ecx, [ebp+var_64]
.text$mn:0000172B                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001730                 mov     [ebp+var_124], eax
.text$mn:00001736                 jmp     short loc_1741
.text$mn:00001738 ; ---------------------------------------------------------------------------
.text$mn:00001738
.text$mn:00001738 loc_1738:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+383j
.text$mn:00001738                 mov     eax, [ebp+var_40]
.text$mn:0000173B                 add     eax, 1
.text$mn:0000173E                 mov     [ebp+var_40], eax
.text$mn:00001741
.text$mn:00001741 loc_1741:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+312j
.text$mn:00001741                 mov     ecx, [ebp+var_40]
.text$mn:00001744                 cmp     ecx, [ebp+var_124]
.text$mn:0000174A                 jnb     short loc_17A9
.text$mn:0000174C                 mov     edx, [ebp+var_40]
.text$mn:0000174F                 push    edx
.text$mn:00001750                 mov     ecx, [ebp+var_64]
.text$mn:00001753                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001758                 mov     ecx, eax
.text$mn:0000175A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000175F                 push    eax             ; lParam
.text$mn:00001760                 push    0               ; wParam
.text$mn:00001762                 push    143h            ; Msg
.text$mn:00001767                 mov     eax, [ebp+this]
.text$mn:0000176A                 mov     ecx, [eax+3Ch]
.text$mn:0000176D                 push    ecx             ; hWnd
.text$mn:0000176E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001774                 mov     [ebp+wParam], eax
.text$mn:0000177A                 mov     edx, [ebp+var_40]
.text$mn:0000177D                 push    edx
.text$mn:0000177E                 mov     ecx, [ebp+var_64]
.text$mn:00001781                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001786                 mov     ecx, eax
.text$mn:00001788                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000178D                 push    eax             ; lParam
.text$mn:0000178E                 mov     eax, [ebp+wParam]
.text$mn:00001794                 push    eax             ; wParam
.text$mn:00001795                 push    151h            ; Msg
.text$mn:0000179A                 mov     ecx, [ebp+this]
.text$mn:0000179D                 mov     edx, [ecx+3Ch]
.text$mn:000017A0                 push    edx             ; hWnd
.text$mn:000017A1                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000017A7                 jmp     short loc_1738
.text$mn:000017A9 ; ---------------------------------------------------------------------------
.text$mn:000017A9
.text$mn:000017A9 loc_17A9:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+326j
.text$mn:000017A9                 push    20h ; ' '       ; unsigned int
.text$mn:000017AB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000017B0                 add     esp, 4
.text$mn:000017B3                 mov     [ebp+var_80], eax
.text$mn:000017B6                 mov     [ebp+var_4], 0
.text$mn:000017BD                 cmp     [ebp+var_80], 0
.text$mn:000017C1                 jz      short loc_17D3
.text$mn:000017C3                 mov     ecx, [ebp+var_80]
.text$mn:000017C6                 call    ??0ColourPicker@@QAE@XZ ; ColourPicker::ColourPicker(void)
.text$mn:000017CB                 mov     [ebp+var_C4], eax
.text$mn:000017D1                 jmp     short loc_17DD
.text$mn:000017D3 ; ---------------------------------------------------------------------------
.text$mn:000017D3
.text$mn:000017D3 loc_17D3:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+39Dj
.text$mn:000017D3                 mov     [ebp+var_C4], 0
.text$mn:000017DD
.text$mn:000017DD loc_17DD:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+3ADj
.text$mn:000017DD                 mov     eax, [ebp+var_C4]
.text$mn:000017E3                 mov     [ebp+var_D8], eax
.text$mn:000017E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000017F0                 mov     ecx, [ebp+this]
.text$mn:000017F3                 mov     edx, [ebp+var_D8]
.text$mn:000017F9                 mov     [ecx+20h], edx
.text$mn:000017FC                 push    20h ; ' '       ; unsigned int
.text$mn:000017FE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001803                 add     esp, 4
.text$mn:00001806                 mov     [ebp+var_C0], eax
.text$mn:0000180C                 mov     [ebp+var_4], 1
.text$mn:00001813                 cmp     [ebp+var_C0], 0
.text$mn:0000181A                 jz      short loc_182F
.text$mn:0000181C                 mov     ecx, [ebp+var_C0]
.text$mn:00001822                 call    ??0ColourPicker@@QAE@XZ ; ColourPicker::ColourPicker(void)
.text$mn:00001827                 mov     [ebp+var_88], eax
.text$mn:0000182D                 jmp     short loc_1839
.text$mn:0000182F ; ---------------------------------------------------------------------------
.text$mn:0000182F
.text$mn:0000182F loc_182F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+3F6j
.text$mn:0000182F                 mov     [ebp+var_88], 0
.text$mn:00001839
.text$mn:00001839 loc_1839:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+409j
.text$mn:00001839                 mov     eax, [ebp+var_88]
.text$mn:0000183F                 mov     [ebp+var_110], eax
.text$mn:00001845                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000184C                 mov     ecx, [ebp+this]
.text$mn:0000184F                 mov     edx, [ebp+var_110]
.text$mn:00001855                 mov     [ecx+24h], edx
.text$mn:00001858                 mov     eax, [ebp+this]
.text$mn:0000185B                 mov     ecx, [eax+0Ch]
.text$mn:0000185E                 push    ecx
.text$mn:0000185F                 mov     edx, [ebp+this]
.text$mn:00001862                 mov     eax, [edx+4]
.text$mn:00001865                 push    eax
.text$mn:00001866                 mov     ecx, [ebp+this]
.text$mn:00001869                 mov     edx, [ecx+20h]
.text$mn:0000186C                 mov     eax, [ebp+this]
.text$mn:0000186F                 mov     edx, [edx]
.text$mn:00001871                 mov     ecx, [eax+20h]
.text$mn:00001874                 mov     eax, [edx+4]
.text$mn:00001877                 call    eax
.text$mn:00001879                 mov     ecx, [ebp+this]
.text$mn:0000187C                 mov     edx, [ecx+0Ch]
.text$mn:0000187F                 push    edx
.text$mn:00001880                 mov     eax, [ebp+this]
.text$mn:00001883                 mov     ecx, [eax+4]
.text$mn:00001886                 push    ecx
.text$mn:00001887                 mov     edx, [ebp+this]
.text$mn:0000188A                 mov     eax, [edx+24h]
.text$mn:0000188D                 mov     ecx, [ebp+this]
.text$mn:00001890                 mov     edx, [eax]
.text$mn:00001892                 mov     ecx, [ecx+24h]
.text$mn:00001895                 mov     eax, [edx+4]
.text$mn:00001898                 call    eax
.text$mn:0000189A                 lea     ecx, [ebp+X]
.text$mn:0000189D                 push    ecx
.text$mn:0000189E                 push    1
.text$mn:000018A0                 mov     edx, [ebp+this]
.text$mn:000018A3                 mov     ecx, [edx+20h]  ; this
.text$mn:000018A6                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000018AB                 push    eax
.text$mn:000018AC                 mov     eax, [ebp+this]
.text$mn:000018AF                 mov     ecx, [eax+48h]
.text$mn:000018B2                 push    ecx
.text$mn:000018B3                 mov     ecx, [ebp+this]
.text$mn:000018B6                 call    ?alignWith@StaticDialog@@IAEXPAUHWND__@@0W4PosAlign@@AAUtagPOINT@@@Z ; StaticDialog::alignWith(HWND__ *,HWND__ *,PosAlign,tagPOINT &)
.text$mn:000018BB                 lea     edx, [ebp+var_5C]
.text$mn:000018BE                 push    edx
.text$mn:000018BF                 push    1
.text$mn:000018C1                 mov     eax, [ebp+this]
.text$mn:000018C4                 mov     ecx, [eax+24h]  ; this
.text$mn:000018C7                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000018CC                 push    eax
.text$mn:000018CD                 mov     ecx, [ebp+this]
.text$mn:000018D0                 mov     edx, [ecx+4Ch]
.text$mn:000018D3                 push    edx
.text$mn:000018D4                 mov     ecx, [ebp+this]
.text$mn:000018D7                 call    ?alignWith@StaticDialog@@IAEXPAUHWND__@@0W4PosAlign@@AAUtagPOINT@@@Z ; StaticDialog::alignWith(HWND__ *,HWND__ *,PosAlign,tagPOINT &)
.text$mn:000018DC                 mov     eax, [ebp+X]
.text$mn:000018DF                 cmp     eax, [ebp+var_5C]
.text$mn:000018E2                 jle     short loc_18EF
.text$mn:000018E4                 mov     ecx, [ebp+X]
.text$mn:000018E7                 mov     [ebp+var_B0], ecx
.text$mn:000018ED                 jmp     short loc_18F8
.text$mn:000018EF ; ---------------------------------------------------------------------------
.text$mn:000018EF
.text$mn:000018EF loc_18EF:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+4BEj
.text$mn:000018EF                 mov     edx, [ebp+var_5C]
.text$mn:000018F2                 mov     [ebp+var_B0], edx
.text$mn:000018F8
.text$mn:000018F8 loc_18F8:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+4C9j
.text$mn:000018F8                 mov     eax, [ebp+var_B0]
.text$mn:000018FE                 add     eax, 0Ah
.text$mn:00001901                 mov     [ebp+var_5C], eax
.text$mn:00001904                 mov     ecx, [ebp+var_5C]
.text$mn:00001907                 mov     [ebp+X], ecx
.text$mn:0000190A                 mov     edx, [ebp+Y]
.text$mn:0000190D                 sub     edx, 4
.text$mn:00001910                 mov     [ebp+Y], edx
.text$mn:00001913                 mov     eax, [ebp+var_58]
.text$mn:00001916                 sub     eax, 4
.text$mn:00001919                 mov     [ebp+var_58], eax
.text$mn:0000191C                 push    1               ; bRepaint
.text$mn:0000191E                 push    19h             ; nHeight
.text$mn:00001920                 push    19h             ; nWidth
.text$mn:00001922                 mov     ecx, [ebp+Y]
.text$mn:00001925                 push    ecx             ; Y
.text$mn:00001926                 mov     edx, [ebp+X]
.text$mn:00001929                 push    edx             ; X
.text$mn:0000192A                 mov     eax, [ebp+this]
.text$mn:0000192D                 mov     ecx, [eax+20h]  ; this
.text$mn:00001930                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00001935                 push    eax             ; hWnd
.text$mn:00001936                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000193C                 push    1               ; bRepaint
.text$mn:0000193E                 push    19h             ; nHeight
.text$mn:00001940                 push    19h             ; nWidth
.text$mn:00001942                 mov     ecx, [ebp+var_58]
.text$mn:00001945                 push    ecx             ; Y
.text$mn:00001946                 mov     edx, [ebp+var_5C]
.text$mn:00001949                 push    edx             ; X
.text$mn:0000194A                 mov     eax, [ebp+this]
.text$mn:0000194D                 mov     ecx, [eax+24h]  ; this
.text$mn:00001950                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00001955                 push    eax             ; hWnd
.text$mn:00001956                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000195C                 push    1
.text$mn:0000195E                 mov     ecx, [ebp+this]
.text$mn:00001961                 mov     edx, [ecx+20h]
.text$mn:00001964                 mov     eax, [ebp+this]
.text$mn:00001967                 mov     edx, [edx]
.text$mn:00001969                 mov     ecx, [eax+20h]
.text$mn:0000196C                 mov     eax, [edx+0Ch]
.text$mn:0000196F                 call    eax
.text$mn:00001971                 push    1
.text$mn:00001973                 mov     ecx, [ebp+this]
.text$mn:00001976                 mov     edx, [ecx+24h]
.text$mn:00001979                 mov     eax, [ebp+this]
.text$mn:0000197C                 mov     edx, [edx]
.text$mn:0000197E                 mov     ecx, [eax+24h]
.text$mn:00001981                 mov     eax, [edx+0Ch]
.text$mn:00001984                 call    eax
.text$mn:00001986                 mov     ecx, [ebp+this]
.text$mn:00001989                 movzx   edx, byte ptr [ecx+37AE8h]
.text$mn:00001990                 push    edx             ; bEnable
.text$mn:00001991                 push    1               ; nIDDlgItem
.text$mn:00001993                 mov     eax, [ebp+this]
.text$mn:00001996                 mov     ecx, [eax+0Ch]
.text$mn:00001999                 push    ecx             ; hDlg
.text$mn:0000199A                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000019A0                 push    eax             ; hWnd
.text$mn:000019A1                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000019A7                 push    0               ; bEnable
.text$mn:000019A9                 push    8FDh            ; nIDDlgItem
.text$mn:000019AE                 mov     edx, [ebp+this]
.text$mn:000019B1                 mov     eax, [edx+0Ch]
.text$mn:000019B4                 push    eax             ; hDlg
.text$mn:000019B5                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000019BB                 push    eax             ; hWnd
.text$mn:000019BC                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000019C2                 mov     ecx, [ebp+var_60]
.text$mn:000019C5                 call    ?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ ; NppParameters::getEnableThemeDlgTexture(void)
.text$mn:000019CA                 mov     [ebp+var_90], eax
.text$mn:000019D0                 cmp     [ebp+var_90], 0
.text$mn:000019D7                 jz      short loc_19F5
.text$mn:000019D9                 push    6
.text$mn:000019DB                 mov     ecx, [ebp+this]
.text$mn:000019DE                 mov     edx, [ecx+0Ch]
.text$mn:000019E1                 push    edx
.text$mn:000019E2                 call    [ebp+var_90]
.text$mn:000019E8                 mov     eax, [ebp+this]
.text$mn:000019EB                 mov     edx, [eax]
.text$mn:000019ED                 mov     ecx, [ebp+this]
.text$mn:000019F0                 mov     eax, [edx+40h]
.text$mn:000019F3                 call    eax
.text$mn:000019F5
.text$mn:000019F5 loc_19F5:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5B3j
.text$mn:000019F5                 mov     ecx, [ebp+this] ; this
.text$mn:000019F8                 call    ?updateGlobalOverrideCtrls@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateGlobalOverrideCtrls(void)
.text$mn:000019FD                 mov     ecx, [ebp+this] ; this
.text$mn:00001A00                 call    ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ ; WordStyleDlg::setVisualFromStyleList(void)
.text$mn:00001A05                 mov     ecx, [ebp+this] ; this
.text$mn:00001A08                 call    ?goToCenter@StaticDialog@@QAEXXZ ; StaticDialog::goToCenter(void)
.text$mn:00001A0D                 mov     ecx, [ebp+this] ; this
.text$mn:00001A10                 call    ?loadLangListFromNppParam@WordStyleDlg@@AAEXXZ ; WordStyleDlg::loadLangListFromNppParam(void)
.text$mn:00001A15                 mov     eax, 1
.text$mn:00001A1A                 jmp     loc_2532
.text$mn:00001A1F ; ---------------------------------------------------------------------------
.text$mn:00001A1F
.text$mn:00001A1F loc_1A1F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+4Bj
.text$mn:00001A1F                 mov     ecx, [ebp+this]
.text$mn:00001A22                 mov     edx, [ecx+20h]
.text$mn:00001A25                 mov     eax, [ebp+this]
.text$mn:00001A28                 mov     edx, [edx]
.text$mn:00001A2A                 mov     ecx, [eax+20h]
.text$mn:00001A2D                 mov     eax, [edx+8]
.text$mn:00001A30                 call    eax
.text$mn:00001A32                 mov     ecx, [ebp+this]
.text$mn:00001A35                 mov     edx, [ecx+24h]
.text$mn:00001A38                 mov     eax, [ebp+this]
.text$mn:00001A3B                 mov     edx, [edx]
.text$mn:00001A3D                 mov     ecx, [eax+24h]
.text$mn:00001A40                 mov     eax, [edx+8]
.text$mn:00001A43                 call    eax
.text$mn:00001A45                 mov     ecx, [ebp+this]
.text$mn:00001A48                 mov     edx, [ecx+20h]
.text$mn:00001A4B                 mov     [ebp+var_E0], edx
.text$mn:00001A51                 mov     eax, [ebp+var_E0]
.text$mn:00001A57                 mov     [ebp+var_68], eax
.text$mn:00001A5A                 cmp     [ebp+var_68], 0
.text$mn:00001A5E                 jz      short loc_1A76
.text$mn:00001A60                 push    1
.text$mn:00001A62                 mov     ecx, [ebp+var_68]
.text$mn:00001A65                 mov     edx, [ecx]
.text$mn:00001A67                 mov     ecx, [ebp+var_68]
.text$mn:00001A6A                 mov     eax, [edx]
.text$mn:00001A6C                 call    eax
.text$mn:00001A6E                 mov     [ebp+var_108], eax
.text$mn:00001A74                 jmp     short loc_1A80
.text$mn:00001A76 ; ---------------------------------------------------------------------------
.text$mn:00001A76
.text$mn:00001A76 loc_1A76:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+63Aj
.text$mn:00001A76                 mov     [ebp+var_108], 0
.text$mn:00001A80
.text$mn:00001A80 loc_1A80:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+650j
.text$mn:00001A80                 mov     ecx, [ebp+this]
.text$mn:00001A83                 mov     edx, [ecx+24h]
.text$mn:00001A86                 mov     [ebp+var_E8], edx
.text$mn:00001A8C                 mov     eax, [ebp+var_E8]
.text$mn:00001A92                 mov     [ebp+var_6C], eax
.text$mn:00001A95                 cmp     [ebp+var_6C], 0
.text$mn:00001A99                 jz      short loc_1AB1
.text$mn:00001A9B                 push    1
.text$mn:00001A9D                 mov     ecx, [ebp+var_6C]
.text$mn:00001AA0                 mov     edx, [ecx]
.text$mn:00001AA2                 mov     ecx, [ebp+var_6C]
.text$mn:00001AA5                 mov     eax, [edx]
.text$mn:00001AA7                 call    eax
.text$mn:00001AA9                 mov     [ebp+var_10C], eax
.text$mn:00001AAF                 jmp     short loc_1ABB
.text$mn:00001AB1 ; ---------------------------------------------------------------------------
.text$mn:00001AB1
.text$mn:00001AB1 loc_1AB1:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+675j
.text$mn:00001AB1                 mov     [ebp+var_10C], 0
.text$mn:00001ABB
.text$mn:00001ABB loc_1ABB:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+68Bj
.text$mn:00001ABB                 mov     eax, 1
.text$mn:00001AC0                 jmp     loc_2532
.text$mn:00001AC5 ; ---------------------------------------------------------------------------
.text$mn:00001AC5
.text$mn:00001AC5 loc_1AC5:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+66j
.text$mn:00001AC5                 push    8FEh            ; nIDDlgItem
.text$mn:00001ACA                 mov     ecx, [ebp+this]
.text$mn:00001ACD                 mov     edx, [ecx+0Ch]
.text$mn:00001AD0                 push    edx             ; hDlg
.text$mn:00001AD1                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001AD7                 cmp     [ebp+arg_C], eax
.text$mn:00001ADA                 jnz     short loc_1B17
.text$mn:00001ADC                 push    0               ; lParam
.text$mn:00001ADE                 push    0               ; wParam
.text$mn:00001AE0                 push    400h            ; Msg
.text$mn:00001AE5                 push    8FEh            ; nIDDlgItem
.text$mn:00001AEA                 mov     eax, [ebp+this]
.text$mn:00001AED                 mov     ecx, [eax+0Ch]
.text$mn:00001AF0                 push    ecx             ; hDlg
.text$mn:00001AF1                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001AF7                 mov     [ebp+var_F0], eax
.text$mn:00001AFD                 mov     edx, [ebp+var_F0]
.text$mn:00001B03                 push    edx             ; int
.text$mn:00001B04                 mov     eax, [ebp+this]
.text$mn:00001B07                 mov     ecx, [eax+0Ch]
.text$mn:00001B0A                 push    ecx             ; hWnd
.text$mn:00001B0B                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001B10                 mov     ecx, eax        ; this
.text$mn:00001B12                 call    ?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z ; NppParameters::SetTransparent(HWND__ *,int)
.text$mn:00001B17
.text$mn:00001B17 loc_1B17:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+6B6j
.text$mn:00001B17                 mov     eax, 1
.text$mn:00001B1C                 jmp     loc_2532
.text$mn:00001B21 ; ---------------------------------------------------------------------------
.text$mn:00001B21
.text$mn:00001B21 loc_1B21:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+41j
.text$mn:00001B21                 mov     edx, [ebp+nIDDlgItem]
.text$mn:00001B24                 shr     edx, 10h
.text$mn:00001B27                 and     edx, 0FFFFh
.text$mn:00001B2D                 movzx   eax, dx
.text$mn:00001B30                 cmp     eax, 300h
.text$mn:00001B35                 jnz     short loc_1B98
.text$mn:00001B37                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:00001B3A                 and     ecx, 0FFFFh
.text$mn:00001B40                 movzx   edx, cx
.text$mn:00001B43                 mov     [ebp+var_D0], edx
.text$mn:00001B49                 cmp     [ebp+var_D0], 8AEh
.text$mn:00001B53                 jnz     short loc_1B6F
.text$mn:00001B55                 mov     ecx, [ebp+this] ; this
.text$mn:00001B58                 call    ?updateUserKeywords@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateUserKeywords(void)
.text$mn:00001B5D                 mov     ecx, [ebp+this] ; this
.text$mn:00001B60                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00001B65                 mov     ecx, [ebp+this] ; this
.text$mn:00001B68                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00001B6D                 jmp     short loc_1B93
.text$mn:00001B6F ; ---------------------------------------------------------------------------
.text$mn:00001B6F
.text$mn:00001B6F loc_1B6F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+72Fj
.text$mn:00001B6F                 cmp     [ebp+var_D0], 8A9h
.text$mn:00001B79                 jnz     short loc_1B93
.text$mn:00001B7B                 mov     ecx, [ebp+this] ; this
.text$mn:00001B7E                 call    ?updateExtension@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateExtension(void)
.text$mn:00001B83                 mov     ecx, [ebp+this] ; this
.text$mn:00001B86                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00001B8B                 mov     ecx, [ebp+this] ; this
.text$mn:00001B8E                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00001B93
.text$mn:00001B93 loc_1B93:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+749j
.text$mn:00001B93                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+755j
.text$mn:00001B93                 jmp     loc_2530
.text$mn:00001B98 ; ---------------------------------------------------------------------------
.text$mn:00001B98
.text$mn:00001B98 loc_1B98:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+711j
.text$mn:00001B98                 mov     eax, [ebp+nIDDlgItem]
.text$mn:00001B9B                 mov     [ebp+var_34], eax
.text$mn:00001B9E                 cmp     [ebp+var_34], 89Ch
.text$mn:00001BA5                 ja      short loc_1BBF
.text$mn:00001BA7                 cmp     [ebp+var_34], 89Ch
.text$mn:00001BAE                 jz      short loc_1BE6
.text$mn:00001BB0                 cmp     [ebp+var_34], 2
.text$mn:00001BB4                 jz      loc_1C43
.text$mn:00001BBA                 jmp     $LN21           ; jumptable 00001BDF default case
.text$mn:00001BBF ; ---------------------------------------------------------------------------
.text$mn:00001BBF
.text$mn:00001BBF loc_1BBF:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+781j
.text$mn:00001BBF                 mov     ecx, [ebp+var_34]
.text$mn:00001BC2                 sub     ecx, 89Dh
.text$mn:00001BC8                 mov     [ebp+var_34], ecx
.text$mn:00001BCB                 cmp     [ebp+var_34], 62h ; 'b' ; switch 99 cases
.text$mn:00001BCF                 ja      $LN21           ; jumptable 00001BDF default case
.text$mn:00001BD5                 mov     edx, [ebp+var_34]
.text$mn:00001BD8                 movzx   eax, ds:$LN105[edx]
.text$mn:00001BDF                 jmp     ds:$LN108[eax*4] ; switch jump
.text$mn:00001BE6 ; ---------------------------------------------------------------------------
.text$mn:00001BE6
.text$mn:00001BE6 loc_1BE6:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+78Aj
.text$mn:00001BE6                 push    0
.text$mn:00001BE8                 mov     ecx, [ebp+this]
.text$mn:00001BEB                 call    ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z ; WordStyleDlg::updateFontStyleStatus(fontStyleType)
.text$mn:00001BF0                 mov     ecx, [ebp+this] ; this
.text$mn:00001BF3                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00001BF8                 mov     ecx, [ebp+this] ; this
.text$mn:00001BFB                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00001C00                 jmp     loc_2530
.text$mn:00001C05 ; ---------------------------------------------------------------------------
.text$mn:00001C05
.text$mn:00001C05 $LN40:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00001C05                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00001C05                 push    1               ; jumptable 00001BDF case 0
.text$mn:00001C07                 mov     ecx, [ebp+this]
.text$mn:00001C0A                 call    ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z ; WordStyleDlg::updateFontStyleStatus(fontStyleType)
.text$mn:00001C0F                 mov     ecx, [ebp+this] ; this
.text$mn:00001C12                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00001C17                 mov     ecx, [ebp+this] ; this
.text$mn:00001C1A                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00001C1F                 jmp     loc_2530
.text$mn:00001C24 ; ---------------------------------------------------------------------------
.text$mn:00001C24
.text$mn:00001C24 $LN39:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00001C24                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00001C24                 push    2               ; jumptable 00001BDF case 13
.text$mn:00001C26                 mov     ecx, [ebp+this]
.text$mn:00001C29                 call    ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z ; WordStyleDlg::updateFontStyleStatus(fontStyleType)
.text$mn:00001C2E                 mov     ecx, [ebp+this] ; this
.text$mn:00001C31                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00001C36                 mov     ecx, [ebp+this] ; this
.text$mn:00001C39                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00001C3E                 jmp     loc_2530
.text$mn:00001C43 ; ---------------------------------------------------------------------------
.text$mn:00001C43
.text$mn:00001C43 loc_1C43:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+790j
.text$mn:00001C43                 mov     ecx, [ebp+this]
.text$mn:00001C46                 movzx   edx, byte ptr [ecx+37AE8h]
.text$mn:00001C4D                 test    edx, edx
.text$mn:00001C4F                 jz      loc_1DBE
.text$mn:00001C55                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001C5A                 mov     [ebp+var_4C], eax
.text$mn:00001C5D                 mov     eax, [ebp+this]
.text$mn:00001C60                 movzx   ecx, byte ptr [eax+37ADFh]
.text$mn:00001C67                 test    ecx, ecx
.text$mn:00001C69                 jz      short loc_1CAA
.text$mn:00001C6B                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00001C6E                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00001C73                 add     eax, 674h
.text$mn:00001C78                 push    eax
.text$mn:00001C79                 lea     ecx, [ebp+var_2C]
.text$mn:00001C7C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001C81                 mov     [ebp+var_4], 2
.text$mn:00001C88                 push    0
.text$mn:00001C8A                 lea     ecx, [ebp+var_2C]
.text$mn:00001C8D                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00001C92                 push    eax             ; wchar_t *
.text$mn:00001C93                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00001C96                 call    ?reloadStylers@NppParameters@@QAE_NPA_W@Z ; NppParameters::reloadStylers(wchar_t *)
.text$mn:00001C9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001CA2                 lea     ecx, [ebp+var_2C]
.text$mn:00001CA5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CAA
.text$mn:00001CAA loc_1CAA:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+845j
.text$mn:00001CAA                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00001CAD                 call    ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ ; NppParameters::getLStylerArray(void)
.text$mn:00001CB2                 mov     [ebp+var_B8], eax
.text$mn:00001CB8                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00001CBB                 call    ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ ; NppParameters::getGlobalStylers(void)
.text$mn:00001CC0                 mov     [ebp+var_98], eax
.text$mn:00001CC6                 mov     edx, [ebp+this]
.text$mn:00001CC9                 movzx   eax, byte ptr [edx+37ADFh]
.text$mn:00001CD0                 test    eax, eax
.text$mn:00001CD2                 jz      short loc_1D1B
.text$mn:00001CD4                 mov     ecx, [ebp+var_B8]
.text$mn:00001CDA                 push    ecx
.text$mn:00001CDB                 mov     ecx, [ebp+this]
.text$mn:00001CDE                 add     ecx, 1BDA8h
.text$mn:00001CE4                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00001CE9                 push    eax
.text$mn:00001CEA                 mov     ecx, [ebp+this]
.text$mn:00001CED                 add     ecx, 5Ch ; '\'
.text$mn:00001CF0                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00001CF5                 mov     edx, [ebp+var_98]
.text$mn:00001CFB                 push    edx
.text$mn:00001CFC                 mov     ecx, [ebp+this]
.text$mn:00001CFF                 add     ecx, 375ACh
.text$mn:00001D05                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00001D0A                 push    eax
.text$mn:00001D0B                 mov     ecx, [ebp+this]
.text$mn:00001D0E                 add     ecx, 1B860h
.text$mn:00001D14                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00001D19                 jmp     short loc_1D5F
.text$mn:00001D1B ; ---------------------------------------------------------------------------
.text$mn:00001D1B
.text$mn:00001D1B loc_1D1B:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+8AEj
.text$mn:00001D1B                 mov     eax, [ebp+this]
.text$mn:00001D1E                 add     eax, 375ACh
.text$mn:00001D23                 push    eax
.text$mn:00001D24                 mov     ecx, [ebp+this]
.text$mn:00001D27                 add     ecx, 1B860h
.text$mn:00001D2D                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00001D32                 push    eax
.text$mn:00001D33                 mov     ecx, [ebp+var_98]
.text$mn:00001D39                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00001D3E                 mov     ecx, [ebp+this]
.text$mn:00001D41                 add     ecx, 1BDA8h
.text$mn:00001D47                 push    ecx
.text$mn:00001D48                 mov     ecx, [ebp+this]
.text$mn:00001D4B                 add     ecx, 5Ch ; '\'
.text$mn:00001D4E                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00001D53                 push    eax
.text$mn:00001D54                 mov     ecx, [ebp+var_B8]
.text$mn:00001D5A                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00001D5F
.text$mn:00001D5F loc_1D5F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+8F5j
.text$mn:00001D5F                 mov     ecx, [ebp+this] ; this
.text$mn:00001D62                 call    ?restoreGlobalOverrideValues@WordStyleDlg@@QAEXXZ ; WordStyleDlg::restoreGlobalOverrideValues(void)
.text$mn:00001D67                 mov     edx, [ebp+this]
.text$mn:00001D6A                 mov     byte ptr [edx+37ADFh], 0
.text$mn:00001D71                 mov     eax, [ebp+this]
.text$mn:00001D74                 mov     byte ptr [eax+37AE8h], 0
.text$mn:00001D7B                 mov     ecx, [ebp+this]
.text$mn:00001D7E                 mov     byte ptr [ecx+37AE9h], 0
.text$mn:00001D85                 mov     ecx, [ebp+this] ; this
.text$mn:00001D88                 call    ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ ; WordStyleDlg::setVisualFromStyleList(void)
.text$mn:00001D8D                 push    0               ; lParam
.text$mn:00001D8F                 mov     edx, [ebp+this]
.text$mn:00001D92                 mov     eax, [edx+2Ch]
.text$mn:00001D95                 push    eax             ; wParam
.text$mn:00001D96                 push    14Eh            ; Msg
.text$mn:00001D9B                 mov     ecx, [ebp+this]
.text$mn:00001D9E                 mov     edx, [ecx+44h]
.text$mn:00001DA1                 push    edx             ; hWnd
.text$mn:00001DA2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001DA8                 push    0               ; lParam
.text$mn:00001DAA                 push    0               ; wParam
.text$mn:00001DAC                 push    1789h           ; Msg
.text$mn:00001DB1                 mov     eax, [ebp+this]
.text$mn:00001DB4                 mov     ecx, [eax+8]
.text$mn:00001DB7                 push    ecx             ; hWnd
.text$mn:00001DB8                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001DBE
.text$mn:00001DBE loc_1DBE:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+82Bj
.text$mn:00001DBE                 push    0               ; bEnable
.text$mn:00001DC0                 push    8FDh            ; nIDDlgItem
.text$mn:00001DC5                 mov     edx, [ebp+this]
.text$mn:00001DC8                 mov     eax, [edx+0Ch]
.text$mn:00001DCB                 push    eax             ; hDlg
.text$mn:00001DCC                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001DD2                 push    eax             ; hWnd
.text$mn:00001DD3                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001DD9                 push    0
.text$mn:00001DDB                 mov     ecx, [ebp+this]
.text$mn:00001DDE                 mov     edx, [ecx]
.text$mn:00001DE0                 mov     ecx, [ebp+this]
.text$mn:00001DE3                 mov     eax, [edx+0Ch]
.text$mn:00001DE6                 call    eax
.text$mn:00001DE8                 mov     eax, 1
.text$mn:00001DED                 jmp     loc_2532
.text$mn:00001DF2 ; ---------------------------------------------------------------------------
.text$mn:00001DF2
.text$mn:00001DF2 $LN33:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00001DF2                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00001DF2                 mov     ecx, [ebp+this] ; jumptable 00001BDF case 96
.text$mn:00001DF5                 movzx   edx, byte ptr [ecx+37AE8h]
.text$mn:00001DFC                 test    edx, edx
.text$mn:00001DFE                 jz      loc_1ED9
.text$mn:00001E04                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001E09                 mov     ecx, eax        ; this
.text$mn:00001E0B                 call    ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ ; NppParameters::getLStylerArray(void)
.text$mn:00001E10                 mov     [ebp+var_114], eax
.text$mn:00001E16                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001E1B                 mov     ecx, eax        ; this
.text$mn:00001E1D                 call    ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ ; NppParameters::getGlobalStylers(void)
.text$mn:00001E22                 mov     [ebp+var_F8], eax
.text$mn:00001E28                 mov     eax, [ebp+var_114]
.text$mn:00001E2E                 push    eax
.text$mn:00001E2F                 mov     ecx, [ebp+this]
.text$mn:00001E32                 add     ecx, 5Ch ; '\'
.text$mn:00001E35                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00001E3A                 mov     ecx, [ebp+var_F8]
.text$mn:00001E40                 push    ecx
.text$mn:00001E41                 mov     ecx, [ebp+this]
.text$mn:00001E44                 add     ecx, 1B860h
.text$mn:00001E4A                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00001E4F                 mov     edx, [ebp+this]
.text$mn:00001E52                 add     edx, 1BD8Ch
.text$mn:00001E58                 sub     esp, 1Ch
.text$mn:00001E5B                 mov     ecx, esp
.text$mn:00001E5D                 mov     [ebp+var_128], esp
.text$mn:00001E63                 push    edx
.text$mn:00001E64                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001E69                 mov     [ebp+var_120], eax
.text$mn:00001E6F                 mov     eax, [ebp+var_120]
.text$mn:00001E75                 mov     [ebp+var_12C], eax
.text$mn:00001E7B                 mov     [ebp+var_4], 3
.text$mn:00001E82                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001E89                 mov     ecx, [ebp+this]
.text$mn:00001E8C                 call    ?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; WordStyleDlg::updateThemeName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001E91                 mov     ecx, [ebp+this]
.text$mn:00001E94                 mov     byte ptr [ecx+37ADFh], 0
.text$mn:00001E9B                 push    0               ; lParam
.text$mn:00001E9D                 push    0               ; wParam
.text$mn:00001E9F                 push    147h            ; Msg
.text$mn:00001EA4                 mov     edx, [ebp+this]
.text$mn:00001EA7                 mov     eax, [edx+44h]
.text$mn:00001EAA                 push    eax             ; hWnd
.text$mn:00001EAB                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001EB1                 mov     ecx, [ebp+this]
.text$mn:00001EB4                 mov     [ecx+2Ch], eax
.text$mn:00001EB7                 push    0               ; bEnable
.text$mn:00001EB9                 push    1               ; nIDDlgItem
.text$mn:00001EBB                 mov     edx, [ebp+this]
.text$mn:00001EBE                 mov     eax, [edx+0Ch]
.text$mn:00001EC1                 push    eax             ; hDlg
.text$mn:00001EC2                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001EC8                 push    eax             ; hWnd
.text$mn:00001EC9                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001ECF                 mov     ecx, [ebp+this]
.text$mn:00001ED2                 mov     byte ptr [ecx+37AE8h], 0
.text$mn:00001ED9
.text$mn:00001ED9 loc_1ED9:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+9DAj
.text$mn:00001ED9                 mov     edx, [ebp+this]
.text$mn:00001EDC                 mov     byte ptr [edx+37AE9h], 0
.text$mn:00001EE3                 mov     eax, [ebp+this]
.text$mn:00001EE6                 add     eax, 1B860h
.text$mn:00001EEB                 push    eax             ; struct StyleArray *
.text$mn:00001EEC                 mov     ecx, [ebp+this]
.text$mn:00001EEF                 add     ecx, 5Ch ; '\'
.text$mn:00001EF2                 push    ecx             ; struct LexerStylerArray *
.text$mn:00001EF3                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001EF8                 mov     ecx, eax        ; this
.text$mn:00001EFA                 call    ?writeStyles@NppParameters@@QAEXAAULexerStylerArray@@AAUStyleArray@@@Z ; NppParameters::writeStyles(LexerStylerArray &,StyleArray &)
.text$mn:00001EFF                 push    0               ; bEnable
.text$mn:00001F01                 push    8FDh            ; nIDDlgItem
.text$mn:00001F06                 mov     edx, [ebp+this]
.text$mn:00001F09                 mov     eax, [edx+0Ch]
.text$mn:00001F0C                 push    eax             ; hDlg
.text$mn:00001F0D                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001F13                 push    eax             ; hWnd
.text$mn:00001F14                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001F1A                 push    0
.text$mn:00001F1C                 mov     ecx, [ebp+this]
.text$mn:00001F1F                 mov     edx, [ecx]
.text$mn:00001F21                 mov     ecx, [ebp+this]
.text$mn:00001F24                 mov     eax, [edx+0Ch]
.text$mn:00001F27                 call    eax
.text$mn:00001F29                 push    0               ; lParam
.text$mn:00001F2B                 push    0               ; wParam
.text$mn:00001F2D                 push    1789h           ; Msg
.text$mn:00001F32                 mov     ecx, [ebp+this]
.text$mn:00001F35                 mov     edx, [ecx+8]
.text$mn:00001F38                 push    edx             ; hWnd
.text$mn:00001F39                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001F3F                 mov     eax, 1
.text$mn:00001F44                 jmp     loc_2532
.text$mn:00001F49 ; ---------------------------------------------------------------------------
.text$mn:00001F49
.text$mn:00001F49 $LN31:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00001F49                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00001F49                 push    0               ; jumptable 00001BDF case 98
.text$mn:00001F4B                 push    0               ; wParam
.text$mn:00001F4D                 push    0F0h ; '='      ; Msg
.text$mn:00001F52                 push    8FFh            ; nIDDlgItem
.text$mn:00001F57                 mov     eax, [ebp+this]
.text$mn:00001F5A                 mov     ecx, [eax+0Ch]
.text$mn:00001F5D                 push    ecx             ; hDlg
.text$mn:00001F5E                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001F64                 cmp     eax, 1
.text$mn:00001F67                 jnz     short loc_1F75
.text$mn:00001F69                 mov     [ebp+var_A0], 1
.text$mn:00001F73                 jmp     short loc_1F7F
.text$mn:00001F75 ; ---------------------------------------------------------------------------
.text$mn:00001F75
.text$mn:00001F75 loc_1F75:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+B43j
.text$mn:00001F75                 mov     [ebp+var_A0], 0
.text$mn:00001F7F
.text$mn:00001F7F loc_1F7F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+B4Fj
.text$mn:00001F7F                 mov     dl, byte ptr [ebp+var_A0]
.text$mn:00001F85                 mov     [ebp+var_2D], dl
.text$mn:00001F88                 movzx   eax, [ebp+var_2D]
.text$mn:00001F8C                 test    eax, eax
.text$mn:00001F8E                 jz      short loc_1FCD
.text$mn:00001F90                 push    0               ; lParam
.text$mn:00001F92                 push    0               ; wParam
.text$mn:00001F94                 push    400h            ; Msg
.text$mn:00001F99                 push    8FEh            ; nIDDlgItem
.text$mn:00001F9E                 mov     ecx, [ebp+this]
.text$mn:00001FA1                 mov     edx, [ecx+0Ch]
.text$mn:00001FA4                 push    edx             ; hDlg
.text$mn:00001FA5                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001FAB                 mov     [ebp+var_100], eax
.text$mn:00001FB1                 mov     eax, [ebp+var_100]
.text$mn:00001FB7                 push    eax             ; int
.text$mn:00001FB8                 mov     ecx, [ebp+this]
.text$mn:00001FBB                 mov     edx, [ecx+0Ch]
.text$mn:00001FBE                 push    edx             ; hWnd
.text$mn:00001FBF                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001FC4                 mov     ecx, eax        ; this
.text$mn:00001FC6                 call    ?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z ; NppParameters::SetTransparent(HWND__ *,int)
.text$mn:00001FCB                 jmp     short loc_1FE0
.text$mn:00001FCD ; ---------------------------------------------------------------------------
.text$mn:00001FCD
.text$mn:00001FCD loc_1FCD:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+B6Aj
.text$mn:00001FCD                 mov     eax, [ebp+this]
.text$mn:00001FD0                 mov     ecx, [eax+0Ch]
.text$mn:00001FD3                 push    ecx             ; HWND
.text$mn:00001FD4                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001FD9                 mov     ecx, eax        ; this
.text$mn:00001FDB                 call    ?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z ; NppParameters::removeTransparent(HWND__ *)
.text$mn:00001FE0
.text$mn:00001FE0 loc_1FE0:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+BA7j
.text$mn:00001FE0                 movzx   edx, [ebp+var_2D]
.text$mn:00001FE4                 push    edx             ; bEnable
.text$mn:00001FE5                 push    8FEh            ; nIDDlgItem
.text$mn:00001FEA                 mov     eax, [ebp+this]
.text$mn:00001FED                 mov     ecx, [eax+0Ch]
.text$mn:00001FF0                 push    ecx             ; hDlg
.text$mn:00001FF1                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001FF7                 push    eax             ; hWnd
.text$mn:00001FF8                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001FFE                 mov     eax, 1
.text$mn:00002003                 jmp     loc_2532
.text$mn:00002008 ; ---------------------------------------------------------------------------
.text$mn:00002008
.text$mn:00002008 $LN28:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00002008                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00002008                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 21
.text$mn:0000200D                 mov     ecx, eax        ; this
.text$mn:0000200F                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:00002014                 mov     [ebp+var_118], eax
.text$mn:0000201A                 push    0               ; lParam
.text$mn:0000201C                 push    0               ; wParam
.text$mn:0000201E                 push    0F0h ; '='      ; Msg
.text$mn:00002023                 mov     edx, [ebp+nIDDlgItem]
.text$mn:00002026                 push    edx             ; nIDDlgItem
.text$mn:00002027                 mov     eax, [ebp+this]
.text$mn:0000202A                 mov     ecx, [eax+0Ch]
.text$mn:0000202D                 push    ecx             ; hDlg
.text$mn:0000202E                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002034                 cmp     eax, 1
.text$mn:00002037                 jnz     short loc_2045
.text$mn:00002039                 mov     [ebp+var_C8], 1
.text$mn:00002043                 jmp     short loc_204F
.text$mn:00002045 ; ---------------------------------------------------------------------------
.text$mn:00002045
.text$mn:00002045 loc_2045:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+C13j
.text$mn:00002045                 mov     [ebp+var_C8], 0
.text$mn:0000204F
.text$mn:0000204F loc_204F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+C1Fj
.text$mn:0000204F                 mov     edx, [ebp+var_118]
.text$mn:00002055                 mov     al, byte ptr [ebp+var_C8]
.text$mn:0000205B                 mov     [edx], al
.text$mn:0000205D                 mov     ecx, [ebp+this] ; this
.text$mn:00002060                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00002065                 mov     ecx, [ebp+this] ; this
.text$mn:00002068                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:0000206D                 mov     eax, 1
.text$mn:00002072                 jmp     loc_2532
.text$mn:00002077 ; ---------------------------------------------------------------------------
.text$mn:00002077
.text$mn:00002077 $LN27:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00002077                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00002077                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 22
.text$mn:0000207C                 mov     ecx, eax        ; this
.text$mn:0000207E                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:00002083                 mov     [ebp+var_DC], eax
.text$mn:00002089                 push    0               ; lParam
.text$mn:0000208B                 push    0               ; wParam
.text$mn:0000208D                 push    0F0h ; '='      ; Msg
.text$mn:00002092                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:00002095                 push    ecx             ; nIDDlgItem
.text$mn:00002096                 mov     edx, [ebp+this]
.text$mn:00002099                 mov     eax, [edx+0Ch]
.text$mn:0000209C                 push    eax             ; hDlg
.text$mn:0000209D                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000020A3                 cmp     eax, 1
.text$mn:000020A6                 jnz     short loc_20B4
.text$mn:000020A8                 mov     [ebp+var_A8], 1
.text$mn:000020B2                 jmp     short loc_20BE
.text$mn:000020B4 ; ---------------------------------------------------------------------------
.text$mn:000020B4
.text$mn:000020B4 loc_20B4:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+C82j
.text$mn:000020B4                 mov     [ebp+var_A8], 0
.text$mn:000020BE
.text$mn:000020BE loc_20BE:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+C8Ej
.text$mn:000020BE                 mov     ecx, [ebp+var_DC]
.text$mn:000020C4                 mov     dl, byte ptr [ebp+var_A8]
.text$mn:000020CA                 mov     [ecx+1], dl
.text$mn:000020CD                 mov     ecx, [ebp+this] ; this
.text$mn:000020D0                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:000020D5                 mov     ecx, [ebp+this] ; this
.text$mn:000020D8                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:000020DD                 mov     eax, 1
.text$mn:000020E2                 jmp     loc_2532
.text$mn:000020E7 ; ---------------------------------------------------------------------------
.text$mn:000020E7
.text$mn:000020E7 $LN26:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:000020E7                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:000020E7                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 23
.text$mn:000020EC                 mov     ecx, eax        ; this
.text$mn:000020EE                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:000020F3                 mov     [ebp+var_E4], eax
.text$mn:000020F9                 push    0               ; lParam
.text$mn:000020FB                 push    0               ; wParam
.text$mn:000020FD                 push    0F0h ; '='      ; Msg
.text$mn:00002102                 mov     eax, [ebp+nIDDlgItem]
.text$mn:00002105                 push    eax             ; nIDDlgItem
.text$mn:00002106                 mov     ecx, [ebp+this]
.text$mn:00002109                 mov     edx, [ecx+0Ch]
.text$mn:0000210C                 push    edx             ; hDlg
.text$mn:0000210D                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002113                 cmp     eax, 1
.text$mn:00002116                 jnz     short loc_2121
.text$mn:00002118                 mov     [ebp+var_7C], 1
.text$mn:0000211F                 jmp     short loc_2128
.text$mn:00002121 ; ---------------------------------------------------------------------------
.text$mn:00002121
.text$mn:00002121 loc_2121:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+CF2j
.text$mn:00002121                 mov     [ebp+var_7C], 0
.text$mn:00002128
.text$mn:00002128 loc_2128:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+CFBj
.text$mn:00002128                 mov     eax, [ebp+var_E4]
.text$mn:0000212E                 mov     cl, byte ptr [ebp+var_7C]
.text$mn:00002131                 mov     [eax+2], cl
.text$mn:00002134                 mov     ecx, [ebp+this] ; this
.text$mn:00002137                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:0000213C                 mov     ecx, [ebp+this] ; this
.text$mn:0000213F                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00002144                 mov     eax, 1
.text$mn:00002149                 jmp     loc_2532
.text$mn:0000214E ; ---------------------------------------------------------------------------
.text$mn:0000214E
.text$mn:0000214E $LN25:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:0000214E                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:0000214E                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 24
.text$mn:00002153                 mov     ecx, eax        ; this
.text$mn:00002155                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:0000215A                 mov     [ebp+var_EC], eax
.text$mn:00002160                 push    0               ; lParam
.text$mn:00002162                 push    0               ; wParam
.text$mn:00002164                 push    0F0h ; '='      ; Msg
.text$mn:00002169                 mov     edx, [ebp+nIDDlgItem]
.text$mn:0000216C                 push    edx             ; nIDDlgItem
.text$mn:0000216D                 mov     eax, [ebp+this]
.text$mn:00002170                 mov     ecx, [eax+0Ch]
.text$mn:00002173                 push    ecx             ; hDlg
.text$mn:00002174                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000217A                 cmp     eax, 1
.text$mn:0000217D                 jnz     short loc_2188
.text$mn:0000217F                 mov     [ebp+var_78], 1
.text$mn:00002186                 jmp     short loc_218F
.text$mn:00002188 ; ---------------------------------------------------------------------------
.text$mn:00002188
.text$mn:00002188 loc_2188:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+D59j
.text$mn:00002188                 mov     [ebp+var_78], 0
.text$mn:0000218F
.text$mn:0000218F loc_218F:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+D62j
.text$mn:0000218F                 mov     edx, [ebp+var_EC]
.text$mn:00002195                 mov     al, byte ptr [ebp+var_78]
.text$mn:00002198                 mov     [edx+3], al
.text$mn:0000219B                 mov     ecx, [ebp+this] ; this
.text$mn:0000219E                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:000021A3                 mov     ecx, [ebp+this] ; this
.text$mn:000021A6                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:000021AB                 mov     eax, 1
.text$mn:000021B0                 jmp     loc_2532
.text$mn:000021B5 ; ---------------------------------------------------------------------------
.text$mn:000021B5
.text$mn:000021B5 $LN24:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:000021B5                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:000021B5                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 25
.text$mn:000021BA                 mov     ecx, eax        ; this
.text$mn:000021BC                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:000021C1                 mov     [ebp+var_F4], eax
.text$mn:000021C7                 push    0               ; lParam
.text$mn:000021C9                 push    0               ; wParam
.text$mn:000021CB                 push    0F0h ; '='      ; Msg
.text$mn:000021D0                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:000021D3                 push    ecx             ; nIDDlgItem
.text$mn:000021D4                 mov     edx, [ebp+this]
.text$mn:000021D7                 mov     eax, [edx+0Ch]
.text$mn:000021DA                 push    eax             ; hDlg
.text$mn:000021DB                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000021E1                 cmp     eax, 1
.text$mn:000021E4                 jnz     short loc_21F2
.text$mn:000021E6                 mov     [ebp+var_8C], 1
.text$mn:000021F0                 jmp     short loc_21FC
.text$mn:000021F2 ; ---------------------------------------------------------------------------
.text$mn:000021F2
.text$mn:000021F2 loc_21F2:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+DC0j
.text$mn:000021F2                 mov     [ebp+var_8C], 0
.text$mn:000021FC
.text$mn:000021FC loc_21FC:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+DCCj
.text$mn:000021FC                 mov     ecx, [ebp+var_F4]
.text$mn:00002202                 mov     dl, byte ptr [ebp+var_8C]
.text$mn:00002208                 mov     [ecx+4], dl
.text$mn:0000220B                 mov     ecx, [ebp+this] ; this
.text$mn:0000220E                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00002213                 mov     ecx, [ebp+this] ; this
.text$mn:00002216                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:0000221B                 mov     eax, 1
.text$mn:00002220                 jmp     loc_2532
.text$mn:00002225 ; ---------------------------------------------------------------------------
.text$mn:00002225
.text$mn:00002225 $LN23:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00002225                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00002225                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 26
.text$mn:0000222A                 mov     ecx, eax        ; this
.text$mn:0000222C                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:00002231                 mov     [ebp+var_FC], eax
.text$mn:00002237                 push    0               ; lParam
.text$mn:00002239                 push    0               ; wParam
.text$mn:0000223B                 push    0F0h ; '='      ; Msg
.text$mn:00002240                 mov     eax, [ebp+nIDDlgItem]
.text$mn:00002243                 push    eax             ; nIDDlgItem
.text$mn:00002244                 mov     ecx, [ebp+this]
.text$mn:00002247                 mov     edx, [ecx+0Ch]
.text$mn:0000224A                 push    edx             ; hDlg
.text$mn:0000224B                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002251                 cmp     eax, 1
.text$mn:00002254                 jnz     short loc_2262
.text$mn:00002256                 mov     [ebp+var_94], 1
.text$mn:00002260                 jmp     short loc_226C
.text$mn:00002262 ; ---------------------------------------------------------------------------
.text$mn:00002262
.text$mn:00002262 loc_2262:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+E30j
.text$mn:00002262                 mov     [ebp+var_94], 0
.text$mn:0000226C
.text$mn:0000226C loc_226C:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+E3Cj
.text$mn:0000226C                 mov     eax, [ebp+var_FC]
.text$mn:00002272                 mov     cl, byte ptr [ebp+var_94]
.text$mn:00002278                 mov     [eax+5], cl
.text$mn:0000227B                 mov     ecx, [ebp+this] ; this
.text$mn:0000227E                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00002283                 mov     ecx, [ebp+this] ; this
.text$mn:00002286                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:0000228B                 mov     eax, 1
.text$mn:00002290                 jmp     loc_2532
.text$mn:00002295 ; ---------------------------------------------------------------------------
.text$mn:00002295
.text$mn:00002295 $LN22:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBj
.text$mn:00002295                                         ; DATA XREF: .text$mn:$LN108o
.text$mn:00002295                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00001BDF case 27
.text$mn:0000229A                 mov     ecx, eax        ; this
.text$mn:0000229C                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:000022A1                 mov     [ebp+var_104], eax
.text$mn:000022A7                 push    0               ; lParam
.text$mn:000022A9                 push    0               ; wParam
.text$mn:000022AB                 push    0F0h ; '='      ; Msg
.text$mn:000022B0                 mov     edx, [ebp+nIDDlgItem]
.text$mn:000022B3                 push    edx             ; nIDDlgItem
.text$mn:000022B4                 mov     eax, [ebp+this]
.text$mn:000022B7                 mov     ecx, [eax+0Ch]
.text$mn:000022BA                 push    ecx             ; hDlg
.text$mn:000022BB                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000022C1                 cmp     eax, 1
.text$mn:000022C4                 jnz     short loc_22D2
.text$mn:000022C6                 mov     [ebp+var_9C], 1
.text$mn:000022D0                 jmp     short loc_22DC
.text$mn:000022D2 ; ---------------------------------------------------------------------------
.text$mn:000022D2
.text$mn:000022D2 loc_22D2:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+EA0j
.text$mn:000022D2                 mov     [ebp+var_9C], 0
.text$mn:000022DC
.text$mn:000022DC loc_22DC:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+EACj
.text$mn:000022DC                 mov     edx, [ebp+var_104]
.text$mn:000022E2                 mov     al, byte ptr [ebp+var_9C]
.text$mn:000022E8                 mov     [edx+6], al
.text$mn:000022EB                 mov     ecx, [ebp+this] ; this
.text$mn:000022EE                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:000022F3                 mov     ecx, [ebp+this] ; this
.text$mn:000022F6                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:000022FB                 mov     eax, 1
.text$mn:00002300                 jmp     loc_2532
.text$mn:00002305 ; ---------------------------------------------------------------------------
.text$mn:00002305
.text$mn:00002305 $LN21:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+796j
.text$mn:00002305                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+7ABj ...
.text$mn:00002305                 mov     ecx, [ebp+nIDDlgItem] ; jumptable 00001BDF default case
.text$mn:00002308                 shr     ecx, 10h
.text$mn:0000230B                 and     ecx, 0FFFFh
.text$mn:00002311                 movzx   edx, cx
.text$mn:00002314                 mov     [ebp+var_A4], edx
.text$mn:0000231A                 cmp     [ebp+var_A4], 0
.text$mn:00002321                 jz      loc_243D
.text$mn:00002327                 cmp     [ebp+var_A4], 1
.text$mn:0000232E                 jz      short loc_2335
.text$mn:00002330                 jmp     loc_252C
.text$mn:00002335 ; ---------------------------------------------------------------------------
.text$mn:00002335
.text$mn:00002335 loc_2335:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F0Aj
.text$mn:00002335                 mov     eax, [ebp+nIDDlgItem]
.text$mn:00002338                 and     eax, 0FFFFh
.text$mn:0000233D                 movzx   ecx, ax
.text$mn:00002340                 mov     [ebp+var_48], ecx
.text$mn:00002343                 mov     edx, [ebp+var_48]
.text$mn:00002346                 sub     edx, 89Ah
.text$mn:0000234C                 mov     [ebp+var_48], edx
.text$mn:0000234F                 cmp     [ebp+var_48], 69h ; 'i' ; switch 106 cases
.text$mn:00002353                 ja      $LN16           ; jumptable 00002363 default case
.text$mn:00002359                 mov     eax, [ebp+var_48]
.text$mn:0000235C                 movzx   ecx, ds:$LN106[eax]
.text$mn:00002363                 jmp     ds:$LN109[ecx*4] ; switch jump
.text$mn:0000236A ; ---------------------------------------------------------------------------
.text$mn:0000236A
.text$mn:0000236A $LN15:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj
.text$mn:0000236A                                         ; DATA XREF: .text$mn:$LN109o
.text$mn:0000236A                 mov     ecx, [ebp+this] ; jumptable 00002363 case 0
.text$mn:0000236D                 call    ?updateFontName@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateFontName(void)
.text$mn:00002372                 mov     ecx, [ebp+this] ; this
.text$mn:00002375                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:0000237A                 mov     ecx, [ebp+this] ; this
.text$mn:0000237D                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00002382                 jmp     $LN16           ; jumptable 00002363 default case
.text$mn:00002387 ; ---------------------------------------------------------------------------
.text$mn:00002387
.text$mn:00002387 $LN14:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj
.text$mn:00002387                                         ; DATA XREF: .text$mn:$LN109o
.text$mn:00002387                 mov     ecx, [ebp+this] ; jumptable 00002363 case 1
.text$mn:0000238A                 call    ?updateFontSize@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateFontSize(void)
.text$mn:0000238F                 mov     ecx, [ebp+this] ; this
.text$mn:00002392                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00002397                 mov     ecx, [ebp+this] ; this
.text$mn:0000239A                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:0000239F                 jmp     $LN16           ; jumptable 00002363 default case
.text$mn:000023A4 ; ---------------------------------------------------------------------------
.text$mn:000023A4
.text$mn:000023A4 $LN13:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj
.text$mn:000023A4                                         ; DATA XREF: .text$mn:$LN109o
.text$mn:000023A4                 push    0               ; jumptable 00002363 case 102
.text$mn:000023A6                 push    0               ; wParam
.text$mn:000023A8                 push    188h            ; Msg
.text$mn:000023AD                 mov     edx, [ebp+nIDDlgItem]
.text$mn:000023B0                 and     edx, 0FFFFh
.text$mn:000023B6                 movzx   eax, dx
.text$mn:000023B9                 push    eax             ; nIDDlgItem
.text$mn:000023BA                 mov     ecx, [ebp+this]
.text$mn:000023BD                 mov     edx, [ecx+0Ch]
.text$mn:000023C0                 push    edx             ; hDlg
.text$mn:000023C1                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000023C7                 mov     [ebp+var_AC], eax
.text$mn:000023CD                 cmp     [ebp+var_AC], 0FFFFFFFFh
.text$mn:000023D4                 jz      short loc_23FD
.text$mn:000023D6                 mov     eax, [ebp+this]
.text$mn:000023D9                 mov     cl, [eax+37AE9h]
.text$mn:000023DF                 mov     [ebp+var_2E], cl
.text$mn:000023E2                 mov     edx, [ebp+var_AC]
.text$mn:000023E8                 push    edx             ; int
.text$mn:000023E9                 mov     ecx, [ebp+this] ; this
.text$mn:000023EC                 call    ?setStyleListFromLexer@WordStyleDlg@@AAEXH@Z ; WordStyleDlg::setStyleListFromLexer(int)
.text$mn:000023F1                 mov     eax, [ebp+this]
.text$mn:000023F4                 mov     cl, [ebp+var_2E]
.text$mn:000023F7                 mov     [eax+37AE9h], cl
.text$mn:000023FD
.text$mn:000023FD loc_23FD:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+FB0j
.text$mn:000023FD                 jmp     short $LN16     ; jumptable 00002363 default case
.text$mn:000023FF ; ---------------------------------------------------------------------------
.text$mn:000023FF
.text$mn:000023FF $LN11:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj
.text$mn:000023FF                                         ; DATA XREF: .text$mn:$LN109o
.text$mn:000023FF                 mov     ecx, [ebp+this] ; jumptable 00002363 case 103
.text$mn:00002402                 call    ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ ; WordStyleDlg::setVisualFromStyleList(void)
.text$mn:00002407                 jmp     short $LN16     ; jumptable 00002363 default case
.text$mn:00002409 ; ---------------------------------------------------------------------------
.text$mn:00002409
.text$mn:00002409 $LN10:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj
.text$mn:00002409                                         ; DATA XREF: .text$mn:$LN109o
.text$mn:00002409                 mov     ecx, [ebp+this] ; jumptable 00002363 case 105
.text$mn:0000240C                 call    ?switchToTheme@WordStyleDlg@@AAEXXZ ; WordStyleDlg::switchToTheme(void)
.text$mn:00002411                 mov     ecx, [ebp+this] ; this
.text$mn:00002414                 call    ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ ; WordStyleDlg::setVisualFromStyleList(void)
.text$mn:00002419                 mov     ecx, [ebp+this] ; this
.text$mn:0000241C                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:00002421                 mov     edx, [ebp+this]
.text$mn:00002424                 mov     byte ptr [edx+37AE9h], 0
.text$mn:0000242B                 mov     ecx, [ebp+this] ; this
.text$mn:0000242E                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00002433
.text$mn:00002433 $LN16:                                  ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F2Fj
.text$mn:00002433                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fj ...
.text$mn:00002433                 mov     eax, 1          ; jumptable 00002363 default case
.text$mn:00002438                 jmp     loc_2532
.text$mn:0000243D ; ---------------------------------------------------------------------------
.text$mn:0000243D
.text$mn:0000243D loc_243D:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+EFDj
.text$mn:0000243D                 mov     eax, [ebp+this]
.text$mn:00002440                 mov     ecx, [eax+20h]  ; this
.text$mn:00002443                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002448                 cmp     [ebp+arg_C], eax
.text$mn:0000244B                 jnz     short loc_24A8
.text$mn:0000244D                 push    0               ; bool
.text$mn:0000244F                 mov     ecx, [ebp+this] ; this
.text$mn:00002452                 call    ?updateColour@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::updateColour(bool)
.text$mn:00002457                 mov     ecx, [ebp+this] ; this
.text$mn:0000245A                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:0000245F                 mov     ecx, [ebp+this] ; this
.text$mn:00002462                 call    ?whichTabColourIndex@WordStyleDlg@@AAEHXZ ; WordStyleDlg::whichTabColourIndex(void)
.text$mn:00002467                 mov     [ebp+var_B4], eax
.text$mn:0000246D                 cmp     [ebp+var_B4], 0FFFFFFFFh
.text$mn:00002474                 jz      short loc_2491
.text$mn:00002476                 mov     ecx, [ebp+var_B4]
.text$mn:0000247C                 push    ecx
.text$mn:0000247D                 mov     edx, [ebp+this]
.text$mn:00002480                 mov     ecx, [edx+20h]  ; this
.text$mn:00002483                 call    ?getColour@ColourPicker@@QBEKXZ ; ColourPicker::getColour(void)
.text$mn:00002488                 push    eax
.text$mn:00002489                 call    ?setColour@TabBarPlus@@SAXKW4tabColourIndex@1@@Z ; TabBarPlus::setColour(ulong,TabBarPlus::tabColourIndex)
.text$mn:0000248E                 add     esp, 8
.text$mn:00002491
.text$mn:00002491 loc_2491:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1050j
.text$mn:00002491                 mov     ecx, [ebp+this] ; this
.text$mn:00002494                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:00002499                 mov     eax, 1
.text$mn:0000249E                 jmp     loc_2532
.text$mn:000024A3 ; ---------------------------------------------------------------------------
.text$mn:000024A3                 jmp     loc_252C
.text$mn:000024A8 ; ---------------------------------------------------------------------------
.text$mn:000024A8
.text$mn:000024A8 loc_24A8:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1027j
.text$mn:000024A8                 mov     eax, [ebp+this]
.text$mn:000024AB                 mov     ecx, [eax+24h]  ; this
.text$mn:000024AE                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000024B3                 cmp     [ebp+arg_C], eax
.text$mn:000024B6                 jnz     short loc_2528
.text$mn:000024B8                 push    1               ; bool
.text$mn:000024BA                 mov     ecx, [ebp+this] ; this
.text$mn:000024BD                 call    ?updateColour@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::updateColour(bool)
.text$mn:000024C2                 mov     ecx, [ebp+this] ; this
.text$mn:000024C5                 call    ?notifyDataModified@WordStyleDlg@@AAEJXZ ; WordStyleDlg::notifyDataModified(void)
.text$mn:000024CA                 mov     ecx, [ebp+this] ; this
.text$mn:000024CD                 call    ?whichTabColourIndex@WordStyleDlg@@AAEHXZ ; WordStyleDlg::whichTabColourIndex(void)
.text$mn:000024D2                 mov     [ebp+var_3C], eax
.text$mn:000024D5                 cmp     [ebp+var_3C], 0FFFFFFFFh
.text$mn:000024D9                 jz      short loc_2517
.text$mn:000024DB                 cmp     [ebp+var_3C], 3
.text$mn:000024DF                 jnz     short loc_24ED
.text$mn:000024E1                 mov     [ebp+var_BC], 4
.text$mn:000024EB                 jmp     short loc_24F6
.text$mn:000024ED ; ---------------------------------------------------------------------------
.text$mn:000024ED
.text$mn:000024ED loc_24ED:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+10BBj
.text$mn:000024ED                 mov     ecx, [ebp+var_3C]
.text$mn:000024F0                 mov     [ebp+var_BC], ecx
.text$mn:000024F6
.text$mn:000024F6 loc_24F6:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+10C7j
.text$mn:000024F6                 mov     edx, [ebp+var_BC]
.text$mn:000024FC                 mov     [ebp+var_3C], edx
.text$mn:000024FF                 mov     eax, [ebp+var_3C]
.text$mn:00002502                 push    eax
.text$mn:00002503                 mov     ecx, [ebp+this]
.text$mn:00002506                 mov     ecx, [ecx+24h]  ; this
.text$mn:00002509                 call    ?getColour@ColourPicker@@QBEKXZ ; ColourPicker::getColour(void)
.text$mn:0000250E                 push    eax
.text$mn:0000250F                 call    ?setColour@TabBarPlus@@SAXKW4tabColourIndex@1@@Z ; TabBarPlus::setColour(ulong,TabBarPlus::tabColourIndex)
.text$mn:00002514                 add     esp, 8
.text$mn:00002517
.text$mn:00002517 loc_2517:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+10B5j
.text$mn:00002517                 mov     ecx, [ebp+this] ; this
.text$mn:0000251A                 call    ?apply@WordStyleDlg@@QAEXXZ ; WordStyleDlg::apply(void)
.text$mn:0000251F                 mov     eax, 1
.text$mn:00002524                 jmp     short loc_2532
.text$mn:00002526 ; ---------------------------------------------------------------------------
.text$mn:00002526                 jmp     short loc_252C
.text$mn:00002528 ; ---------------------------------------------------------------------------
.text$mn:00002528
.text$mn:00002528 loc_2528:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1092j
.text$mn:00002528                 xor     eax, eax
.text$mn:0000252A                 jmp     short loc_2532
.text$mn:0000252C ; ---------------------------------------------------------------------------
.text$mn:0000252C
.text$mn:0000252C loc_252C:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F0Cj
.text$mn:0000252C                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+107Fj ...
.text$mn:0000252C                 xor     eax, eax
.text$mn:0000252E                 jmp     short loc_2532
.text$mn:00002530 ; ---------------------------------------------------------------------------
.text$mn:00002530
.text$mn:00002530 loc_2530:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5Aj
.text$mn:00002530                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+6Cj ...
.text$mn:00002530                 xor     eax, eax
.text$mn:00002532
.text$mn:00002532 loc_2532:                               ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5F6j
.text$mn:00002532                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+69Cj ...
.text$mn:00002532                 mov     ecx, [ebp+var_C]
.text$mn:00002535                 mov     large fs:0, ecx
.text$mn:0000253C                 pop     ecx
.text$mn:0000253D                 mov     ecx, [ebp+var_10]
.text$mn:00002540                 xor     ecx, ebp
.text$mn:00002542                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002547                 mov     esp, ebp
.text$mn:00002549                 pop     ebp
.text$mn:0000254A                 retn    10h
.text$mn:0000254A ?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z endp
.text$mn:0000254A
.text$mn:0000254A ; ---------------------------------------------------------------------------
.text$mn:0000254D                 align 10h
.text$mn:00002550 $LN108          dd offset $LN40, offset $LN39, offset $LN28, offset $LN27
.text$mn:00002550                                         ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7BBr
.text$mn:00002550                 dd offset $LN26, offset $LN25, offset $LN24, offset $LN23 ; jump table for switch statement
.text$mn:00002550                 dd offset $LN22, offset $LN33, offset $LN31, offset $LN21
.text$mn:00002580 $LN105          db      0,   0Bh,   0Bh,   0Bh
.text$mn:00002580                                         ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7B4r
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,     1,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,     2,     3,     4
.text$mn:00002580                 db      5,     6,     7,     8
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db    0Bh,   0Bh,   0Bh,   0Bh
.text$mn:00002580                 db      9,   0Bh,   0Ah
.text$mn:000025E3                 align 4
.text$mn:000025E4 $LN109          dd offset $LN15, offset $LN14, offset $LN13, offset $LN11
.text$mn:000025E4                                         ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F3Fr
.text$mn:000025E4                 dd offset $LN10, offset $LN16 ; jump table for switch statement
.text$mn:000025FC $LN106          db      0,     1,     5,     5
.text$mn:000025FC                                         ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F38r
.text$mn:000025FC                 db      5,     5,     5,     5 ; indirect table for switch statement
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     5,     5
.text$mn:000025FC                 db      5,     5,     2,     3
.text$mn:000025FC                 db      5,     4
.text$mn:00002666                 db 0Eh dup(0CCh)
.text$mn:00002674
.text$mn:00002674 ; =============== S U B R O U T I N E =======================================
.text$mn:00002674
.text$mn:00002674 ; Attributes: bp-based frame
.text$mn:00002674
.text$mn:00002674 ; int __thiscall WordStyleDlg::whichTabColourIndex(WordStyleDlg *__hidden this)
.text$mn:00002674                 public ?whichTabColourIndex@WordStyleDlg@@AAEHXZ
.text$mn:00002674 ?whichTabColourIndex@WordStyleDlg@@AAEHXZ proc near
.text$mn:00002674                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+103Ep
.text$mn:00002674                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+10A9p
.text$mn:00002674
.text$mn:00002674 wParam          = dword ptr -10Ch
.text$mn:00002674 var_108         = dword ptr -108h
.text$mn:00002674 lParam          = dword ptr -104h
.text$mn:00002674 var_4           = dword ptr -4
.text$mn:00002674
.text$mn:00002674                 push    ebp
.text$mn:00002675                 mov     ebp, esp
.text$mn:00002677                 sub     esp, 10Ch
.text$mn:0000267D                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002682                 xor     eax, ebp
.text$mn:00002684                 mov     [ebp+var_4], eax
.text$mn:00002687                 mov     [ebp+var_108], ecx
.text$mn:0000268D                 push    0               ; lParam
.text$mn:0000268F                 push    0               ; wParam
.text$mn:00002691                 push    188h            ; Msg
.text$mn:00002696                 push    901h            ; nIDDlgItem
.text$mn:0000269B                 mov     eax, [ebp+var_108]
.text$mn:000026A1                 mov     ecx, [eax+0Ch]
.text$mn:000026A4                 push    ecx             ; hDlg
.text$mn:000026A5                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000026AB                 mov     [ebp+wParam], eax
.text$mn:000026B1                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:000026B8                 jnz     short loc_26C2
.text$mn:000026BA                 or      eax, 0FFFFFFFFh
.text$mn:000026BD                 jmp     loc_275E
.text$mn:000026C2 ; ---------------------------------------------------------------------------
.text$mn:000026C2
.text$mn:000026C2 loc_26C2:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+44j
.text$mn:000026C2                 lea     edx, [ebp+lParam]
.text$mn:000026C8                 push    edx             ; lParam
.text$mn:000026C9                 mov     eax, [ebp+wParam]
.text$mn:000026CF                 push    eax             ; wParam
.text$mn:000026D0                 push    189h            ; Msg
.text$mn:000026D5                 push    901h            ; nIDDlgItem
.text$mn:000026DA                 mov     ecx, [ebp+var_108]
.text$mn:000026E0                 mov     edx, [ecx+0Ch]
.text$mn:000026E3                 push    edx             ; hDlg
.text$mn:000026E4                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000026EA                 push    offset _TABBAR_ACTIVEFOCUSEDINDCATOR ; "Active tab focused indicator"
.text$mn:000026EF                 lea     eax, [ebp+lParam]
.text$mn:000026F5                 push    eax             ; lpString1
.text$mn:000026F6                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000026FC                 test    eax, eax
.text$mn:000026FE                 jnz     short loc_2707
.text$mn:00002700                 mov     eax, 1
.text$mn:00002705                 jmp     short loc_275E
.text$mn:00002707 ; ---------------------------------------------------------------------------
.text$mn:00002707
.text$mn:00002707 loc_2707:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+8Aj
.text$mn:00002707                 push    offset _TABBAR_ACTIVEUNFOCUSEDINDCATOR ; "Active tab unfocused indicator"
.text$mn:0000270C                 lea     ecx, [ebp+lParam]
.text$mn:00002712                 push    ecx             ; lpString1
.text$mn:00002713                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00002719                 test    eax, eax
.text$mn:0000271B                 jnz     short loc_2724
.text$mn:0000271D                 mov     eax, 2
.text$mn:00002722                 jmp     short loc_275E
.text$mn:00002724 ; ---------------------------------------------------------------------------
.text$mn:00002724
.text$mn:00002724 loc_2724:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+A7j
.text$mn:00002724                 push    offset _TABBAR_ACTIVETEXT ; "Active tab text"
.text$mn:00002729                 lea     edx, [ebp+lParam]
.text$mn:0000272F                 push    edx             ; lpString1
.text$mn:00002730                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00002736                 test    eax, eax
.text$mn:00002738                 jnz     short loc_273E
.text$mn:0000273A                 xor     eax, eax
.text$mn:0000273C                 jmp     short loc_275E
.text$mn:0000273E ; ---------------------------------------------------------------------------
.text$mn:0000273E
.text$mn:0000273E loc_273E:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+C4j
.text$mn:0000273E                 push    offset _TABBAR_INACTIVETEXT ; "Inactive tabs"
.text$mn:00002743                 lea     eax, [ebp+lParam]
.text$mn:00002749                 push    eax             ; lpString1
.text$mn:0000274A                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00002750                 test    eax, eax
.text$mn:00002752                 jnz     short loc_275B
.text$mn:00002754                 mov     eax, 3
.text$mn:00002759                 jmp     short loc_275E
.text$mn:0000275B ; ---------------------------------------------------------------------------
.text$mn:0000275B
.text$mn:0000275B loc_275B:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+DEj
.text$mn:0000275B                 or      eax, 0FFFFFFFFh
.text$mn:0000275E
.text$mn:0000275E loc_275E:                               ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+49j
.text$mn:0000275E                                         ; WordStyleDlg::whichTabColourIndex(void)+91j ...
.text$mn:0000275E                 mov     ecx, [ebp+var_4]
.text$mn:00002761                 xor     ecx, ebp
.text$mn:00002763                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002768                 mov     esp, ebp
.text$mn:0000276A                 pop     ebp
.text$mn:0000276B                 retn
.text$mn:0000276B ?whichTabColourIndex@WordStyleDlg@@AAEHXZ endp
.text$mn:0000276B
.text$mn:0000276B ; ---------------------------------------------------------------------------
.text$mn:0000276C                 db 8 dup(0CCh)
.text$mn:00002774
.text$mn:00002774 ; =============== S U B R O U T I N E =======================================
.text$mn:00002774
.text$mn:00002774 ; Attributes: bp-based frame
.text$mn:00002774
.text$mn:00002774 ; void __thiscall WordStyleDlg::updateColour(WordStyleDlg *this, bool)
.text$mn:00002774                 public ?updateColour@WordStyleDlg@@AAEX_N@Z
.text$mn:00002774 ?updateColour@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:00002774                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+102Ep
.text$mn:00002774                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+1099p
.text$mn:00002774
.text$mn:00002774 var_8           = dword ptr -8
.text$mn:00002774 var_4           = dword ptr -4
.text$mn:00002774 arg_0           = byte ptr  8
.text$mn:00002774
.text$mn:00002774                 push    ebp
.text$mn:00002775                 mov     ebp, esp
.text$mn:00002777                 sub     esp, 8
.text$mn:0000277A                 mov     [ebp+var_8], ecx
.text$mn:0000277D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002780                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:00002785                 mov     [ebp+var_4], eax
.text$mn:00002788                 movzx   eax, [ebp+arg_0]
.text$mn:0000278C                 test    eax, eax
.text$mn:0000278E                 jnz     short loc_27D5
.text$mn:00002790                 mov     ecx, [ebp+var_8]
.text$mn:00002793                 mov     ecx, [ecx+20h]  ; this
.text$mn:00002796                 call    ?getColour@ColourPicker@@QBEKXZ ; ColourPicker::getColour(void)
.text$mn:0000279B                 mov     edx, [ebp+var_4]
.text$mn:0000279E                 mov     [edx+8], eax
.text$mn:000027A1                 mov     eax, [ebp+var_8]
.text$mn:000027A4                 mov     ecx, [eax+20h]  ; this
.text$mn:000027A7                 call    ?isEnabled@ColourPicker@@QAE_NXZ ; ColourPicker::isEnabled(void)
.text$mn:000027AC                 movzx   ecx, al
.text$mn:000027AF                 test    ecx, ecx
.text$mn:000027B1                 jz      short loc_27C4
.text$mn:000027B3                 mov     edx, [ebp+var_4]
.text$mn:000027B6                 mov     eax, [edx+10h]
.text$mn:000027B9                 or      eax, 1
.text$mn:000027BC                 mov     ecx, [ebp+var_4]
.text$mn:000027BF                 mov     [ecx+10h], eax
.text$mn:000027C2                 jmp     short loc_27D3
.text$mn:000027C4 ; ---------------------------------------------------------------------------
.text$mn:000027C4
.text$mn:000027C4 loc_27C4:                               ; CODE XREF: WordStyleDlg::updateColour(bool)+3Dj
.text$mn:000027C4                 mov     edx, [ebp+var_4]
.text$mn:000027C7                 mov     eax, [edx+10h]
.text$mn:000027CA                 and     eax, 0FFFFFFFEh
.text$mn:000027CD                 mov     ecx, [ebp+var_4]
.text$mn:000027D0                 mov     [ecx+10h], eax
.text$mn:000027D3
.text$mn:000027D3 loc_27D3:                               ; CODE XREF: WordStyleDlg::updateColour(bool)+4Ej
.text$mn:000027D3                 jmp     short loc_2818
.text$mn:000027D5 ; ---------------------------------------------------------------------------
.text$mn:000027D5
.text$mn:000027D5 loc_27D5:                               ; CODE XREF: WordStyleDlg::updateColour(bool)+1Aj
.text$mn:000027D5                 mov     edx, [ebp+var_8]
.text$mn:000027D8                 mov     ecx, [edx+24h]  ; this
.text$mn:000027DB                 call    ?getColour@ColourPicker@@QBEKXZ ; ColourPicker::getColour(void)
.text$mn:000027E0                 mov     ecx, [ebp+var_4]
.text$mn:000027E3                 mov     [ecx+0Ch], eax
.text$mn:000027E6                 mov     edx, [ebp+var_8]
.text$mn:000027E9                 mov     ecx, [edx+24h]  ; this
.text$mn:000027EC                 call    ?isEnabled@ColourPicker@@QAE_NXZ ; ColourPicker::isEnabled(void)
.text$mn:000027F1                 movzx   eax, al
.text$mn:000027F4                 test    eax, eax
.text$mn:000027F6                 jz      short loc_2809
.text$mn:000027F8                 mov     ecx, [ebp+var_4]
.text$mn:000027FB                 mov     edx, [ecx+10h]
.text$mn:000027FE                 or      edx, 2
.text$mn:00002801                 mov     eax, [ebp+var_4]
.text$mn:00002804                 mov     [eax+10h], edx
.text$mn:00002807                 jmp     short loc_2818
.text$mn:00002809 ; ---------------------------------------------------------------------------
.text$mn:00002809
.text$mn:00002809 loc_2809:                               ; CODE XREF: WordStyleDlg::updateColour(bool)+82j
.text$mn:00002809                 mov     ecx, [ebp+var_4]
.text$mn:0000280C                 mov     edx, [ecx+10h]
.text$mn:0000280F                 and     edx, 0FFFFFFFDh
.text$mn:00002812                 mov     eax, [ebp+var_4]
.text$mn:00002815                 mov     [eax+10h], edx
.text$mn:00002818
.text$mn:00002818 loc_2818:                               ; CODE XREF: WordStyleDlg::updateColour(bool):loc_27D3j
.text$mn:00002818                                         ; WordStyleDlg::updateColour(bool)+93j
.text$mn:00002818                 mov     esp, ebp
.text$mn:0000281A                 pop     ebp
.text$mn:0000281B                 retn    4
.text$mn:0000281B ?updateColour@WordStyleDlg@@AAEX_N@Z endp
.text$mn:0000281B
.text$mn:0000281B ; ---------------------------------------------------------------------------
.text$mn:0000281E                 db 6 dup(0CCh)
.text$mn:00002824
.text$mn:00002824 ; =============== S U B R O U T I N E =======================================
.text$mn:00002824
.text$mn:00002824 ; Attributes: bp-based frame
.text$mn:00002824
.text$mn:00002824 ; private: void __thiscall WordStyleDlg::updateFontStyleStatus(enum  fontStyleType)
.text$mn:00002824                 public ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z
.text$mn:00002824 ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z proc near
.text$mn:00002824                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+7C7p
.text$mn:00002824                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+7E6p ...
.text$mn:00002824
.text$mn:00002824 var_14          = dword ptr -14h
.text$mn:00002824 hWnd            = dword ptr -10h
.text$mn:00002824 var_C           = dword ptr -0Ch
.text$mn:00002824 var_8           = dword ptr -8
.text$mn:00002824 var_4           = dword ptr -4
.text$mn:00002824 arg_0           = dword ptr  8
.text$mn:00002824
.text$mn:00002824                 push    ebp
.text$mn:00002825                 mov     ebp, esp
.text$mn:00002827                 sub     esp, 14h
.text$mn:0000282A                 mov     [ebp+var_8], ecx
.text$mn:0000282D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002830                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:00002835                 mov     [ebp+var_4], eax
.text$mn:00002838                 mov     eax, [ebp+var_4]
.text$mn:0000283B                 cmp     dword ptr [eax+18h], 0FFFFFFFFh
.text$mn:0000283F                 jnz     short loc_284B
.text$mn:00002841                 mov     ecx, [ebp+var_4]
.text$mn:00002844                 mov     dword ptr [ecx+18h], 0
.text$mn:0000284B
.text$mn:0000284B loc_284B:                               ; CODE XREF: WordStyleDlg::updateFontStyleStatus(fontStyleType)+1Bj
.text$mn:0000284B                 mov     [ebp+var_C], 4
.text$mn:00002852                 mov     edx, [ebp+var_8]
.text$mn:00002855                 mov     eax, [edx+38h]
.text$mn:00002858                 mov     [ebp+hWnd], eax
.text$mn:0000285B                 cmp     [ebp+arg_0], 0
.text$mn:0000285F                 jnz     short loc_2871
.text$mn:00002861                 mov     [ebp+var_C], 1
.text$mn:00002868                 mov     ecx, [ebp+var_8]
.text$mn:0000286B                 mov     edx, [ecx+30h]
.text$mn:0000286E                 mov     [ebp+hWnd], edx
.text$mn:00002871
.text$mn:00002871 loc_2871:                               ; CODE XREF: WordStyleDlg::updateFontStyleStatus(fontStyleType)+3Bj
.text$mn:00002871                 cmp     [ebp+arg_0], 1
.text$mn:00002875                 jnz     short loc_2887
.text$mn:00002877                 mov     [ebp+var_C], 2
.text$mn:0000287E                 mov     eax, [ebp+var_8]
.text$mn:00002881                 mov     ecx, [eax+34h]
.text$mn:00002884                 mov     [ebp+hWnd], ecx
.text$mn:00002887
.text$mn:00002887 loc_2887:                               ; CODE XREF: WordStyleDlg::updateFontStyleStatus(fontStyleType)+51j
.text$mn:00002887                 push    0               ; lParam
.text$mn:00002889                 push    0               ; wParam
.text$mn:0000288B                 push    0F0h ; '='      ; Msg
.text$mn:00002890                 mov     edx, [ebp+hWnd]
.text$mn:00002893                 push    edx             ; hWnd
.text$mn:00002894                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000289A                 mov     [ebp+var_14], eax
.text$mn:0000289D                 cmp     [ebp+var_14], 2
.text$mn:000028A1                 jz      short loc_28CB
.text$mn:000028A3                 cmp     [ebp+var_14], 1
.text$mn:000028A7                 jnz     short loc_28BA
.text$mn:000028A9                 mov     eax, [ebp+var_4]
.text$mn:000028AC                 mov     ecx, [eax+18h]
.text$mn:000028AF                 or      ecx, [ebp+var_C]
.text$mn:000028B2                 mov     edx, [ebp+var_4]
.text$mn:000028B5                 mov     [edx+18h], ecx
.text$mn:000028B8                 jmp     short loc_28CB
.text$mn:000028BA ; ---------------------------------------------------------------------------
.text$mn:000028BA
.text$mn:000028BA loc_28BA:                               ; CODE XREF: WordStyleDlg::updateFontStyleStatus(fontStyleType)+83j
.text$mn:000028BA                 mov     eax, [ebp+var_C]
.text$mn:000028BD                 not     eax
.text$mn:000028BF                 mov     ecx, [ebp+var_4]
.text$mn:000028C2                 and     eax, [ecx+18h]
.text$mn:000028C5                 mov     edx, [ebp+var_4]
.text$mn:000028C8                 mov     [edx+18h], eax
.text$mn:000028CB
.text$mn:000028CB loc_28CB:                               ; CODE XREF: WordStyleDlg::updateFontStyleStatus(fontStyleType)+7Dj
.text$mn:000028CB                                         ; WordStyleDlg::updateFontStyleStatus(fontStyleType)+94j
.text$mn:000028CB                 mov     esp, ebp
.text$mn:000028CD                 pop     ebp
.text$mn:000028CE                 retn    4
.text$mn:000028CE ?updateFontStyleStatus@WordStyleDlg@@AAEXW4fontStyleType@@@Z endp
.text$mn:000028CE
.text$mn:000028CE ; ---------------------------------------------------------------------------
.text$mn:000028D1                 align 4
.text$mn:000028D4
.text$mn:000028D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000028D4
.text$mn:000028D4 ; Attributes: bp-based frame
.text$mn:000028D4
.text$mn:000028D4 ; void __thiscall WordStyleDlg::updateExtension(WordStyleDlg *__hidden this)
.text$mn:000028D4                 public ?updateExtension@WordStyleDlg@@AAEXXZ
.text$mn:000028D4 ?updateExtension@WordStyleDlg@@AAEXXZ proc near
.text$mn:000028D4                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+75Ap
.text$mn:000028D4
.text$mn:000028D4 var_20C         = dword ptr -20Ch
.text$mn:000028D4 var_208         = dword ptr -208h
.text$mn:000028D4 lParam          = dword ptr -204h
.text$mn:000028D4 var_4           = dword ptr -4
.text$mn:000028D4
.text$mn:000028D4                 push    ebp
.text$mn:000028D5                 mov     ebp, esp
.text$mn:000028D7                 sub     esp, 20Ch
.text$mn:000028DD                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000028E2                 xor     eax, ebp
.text$mn:000028E4                 mov     [ebp+var_4], eax
.text$mn:000028E7                 mov     [ebp+var_208], ecx
.text$mn:000028ED                 mov     [ebp+var_20C], 100h
.text$mn:000028F7                 lea     eax, [ebp+lParam]
.text$mn:000028FD                 push    eax             ; lParam
.text$mn:000028FE                 push    100h            ; wParam
.text$mn:00002903                 push    0Dh             ; Msg
.text$mn:00002905                 push    8A9h            ; nIDDlgItem
.text$mn:0000290A                 mov     ecx, [ebp+var_208]
.text$mn:00002910                 mov     edx, [ecx+0Ch]
.text$mn:00002913                 push    edx             ; hDlg
.text$mn:00002914                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000291A                 lea     eax, [ebp+lParam]
.text$mn:00002920                 push    eax             ; wchar_t *
.text$mn:00002921                 mov     ecx, [ebp+var_208]
.text$mn:00002927                 mov     edx, [ecx+28h]
.text$mn:0000292A                 sub     edx, 1
.text$mn:0000292D                 push    edx             ; int
.text$mn:0000292E                 mov     ecx, [ebp+var_208]
.text$mn:00002934                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00002937                 call    ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z ; LexerStylerArray::getLexerFromIndex(int)
.text$mn:0000293C                 mov     ecx, eax        ; this
.text$mn:0000293E                 call    ?setLexerUserExt@LexerStyler@@QAEXPB_W@Z ; LexerStyler::setLexerUserExt(wchar_t const *)
.text$mn:00002943                 mov     ecx, [ebp+var_4]
.text$mn:00002946                 xor     ecx, ebp
.text$mn:00002948                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000294D                 mov     esp, ebp
.text$mn:0000294F                 pop     ebp
.text$mn:00002950                 retn
.text$mn:00002950 ?updateExtension@WordStyleDlg@@AAEXXZ endp
.text$mn:00002950
.text$mn:00002950 ; ---------------------------------------------------------------------------
.text$mn:00002951                 align 4
.text$mn:00002954
.text$mn:00002954 ; =============== S U B R O U T I N E =======================================
.text$mn:00002954
.text$mn:00002954 ; Attributes: bp-based frame
.text$mn:00002954
.text$mn:00002954 ; void __thiscall WordStyleDlg::updateFontName(WordStyleDlg *__hidden this)
.text$mn:00002954                 public ?updateFontName@WordStyleDlg@@AAEXXZ
.text$mn:00002954 ?updateFontName@WordStyleDlg@@AAEXXZ proc near
.text$mn:00002954                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F49p
.text$mn:00002954
.text$mn:00002954 var_10          = dword ptr -10h
.text$mn:00002954 var_C           = dword ptr -0Ch
.text$mn:00002954 wParam          = dword ptr -8
.text$mn:00002954 var_4           = dword ptr -4
.text$mn:00002954
.text$mn:00002954                 push    ebp
.text$mn:00002955                 mov     ebp, esp
.text$mn:00002957                 sub     esp, 10h
.text$mn:0000295A                 mov     [ebp+var_4], ecx
.text$mn:0000295D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002960                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:00002965                 mov     [ebp+var_C], eax
.text$mn:00002968                 push    0               ; lParam
.text$mn:0000296A                 push    0               ; wParam
.text$mn:0000296C                 push    147h            ; Msg
.text$mn:00002971                 mov     eax, [ebp+var_4]
.text$mn:00002974                 mov     ecx, [eax+3Ch]
.text$mn:00002977                 push    ecx             ; hWnd
.text$mn:00002978                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000297E                 mov     [ebp+wParam], eax
.text$mn:00002981                 push    0               ; lParam
.text$mn:00002983                 mov     edx, [ebp+wParam]
.text$mn:00002986                 push    edx             ; wParam
.text$mn:00002987                 push    150h            ; Msg
.text$mn:0000298C                 mov     eax, [ebp+var_4]
.text$mn:0000298F                 mov     ecx, [eax+3Ch]
.text$mn:00002992                 push    ecx             ; hWnd
.text$mn:00002993                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002999                 mov     [ebp+var_10], eax
.text$mn:0000299C                 mov     edx, [ebp+var_C]
.text$mn:0000299F                 mov     eax, [ebp+var_10]
.text$mn:000029A2                 mov     [edx+14h], eax
.text$mn:000029A5                 mov     esp, ebp
.text$mn:000029A7                 pop     ebp
.text$mn:000029A8                 retn
.text$mn:000029A8 ?updateFontName@WordStyleDlg@@AAEXXZ endp
.text$mn:000029A8
.text$mn:000029A8 ; ---------------------------------------------------------------------------
.text$mn:000029A9                 db 0Bh dup(0CCh)
.text$mn:000029B4
.text$mn:000029B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000029B4
.text$mn:000029B4 ; Attributes: bp-based frame
.text$mn:000029B4
.text$mn:000029B4 ; void __thiscall WordStyleDlg::updateFontSize(WordStyleDlg *__hidden this)
.text$mn:000029B4                 public ?updateFontSize@WordStyleDlg@@AAEXXZ
.text$mn:000029B4 ?updateFontSize@WordStyleDlg@@AAEXXZ proc near
.text$mn:000029B4                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+F66p
.text$mn:000029B4
.text$mn:000029B4 EndPtr          = dword ptr -20h
.text$mn:000029B4 wParam          = dword ptr -1Ch
.text$mn:000029B4 var_18          = dword ptr -18h
.text$mn:000029B4 var_14          = dword ptr -14h
.text$mn:000029B4 lParam          = dword ptr -10h
.text$mn:000029B4 var_4           = dword ptr -4
.text$mn:000029B4
.text$mn:000029B4                 push    ebp
.text$mn:000029B5                 mov     ebp, esp
.text$mn:000029B7                 sub     esp, 20h
.text$mn:000029BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000029BF                 xor     eax, ebp
.text$mn:000029C1                 mov     [ebp+var_4], eax
.text$mn:000029C4                 mov     [ebp+var_18], ecx
.text$mn:000029C7                 mov     ecx, [ebp+var_18] ; this
.text$mn:000029CA                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:000029CF                 mov     [ebp+var_14], eax
.text$mn:000029D2                 push    0               ; lParam
.text$mn:000029D4                 push    0               ; wParam
.text$mn:000029D6                 push    147h            ; Msg
.text$mn:000029DB                 mov     eax, [ebp+var_18]
.text$mn:000029DE                 mov     ecx, [eax+40h]
.text$mn:000029E1                 push    ecx             ; hWnd
.text$mn:000029E2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000029E8                 mov     [ebp+wParam], eax
.text$mn:000029EB                 cmp     [ebp+wParam], 0
.text$mn:000029EF                 jz      short loc_2A56
.text$mn:000029F1                 lea     edx, [ebp+lParam]
.text$mn:000029F4                 push    edx             ; lParam
.text$mn:000029F5                 mov     eax, [ebp+wParam]
.text$mn:000029F8                 push    eax             ; wParam
.text$mn:000029F9                 push    148h            ; Msg
.text$mn:000029FE                 mov     ecx, [ebp+var_18]
.text$mn:00002A01                 mov     edx, [ecx+40h]
.text$mn:00002A04                 push    edx             ; hWnd
.text$mn:00002A05                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002A0B                 mov     eax, 2
.text$mn:00002A10                 imul    ecx, eax, 0
.text$mn:00002A13                 movzx   edx, word ptr [ebp+ecx+lParam]
.text$mn:00002A18                 test    edx, edx
.text$mn:00002A1A                 jnz     short loc_2A28
.text$mn:00002A1C                 mov     eax, [ebp+var_14]
.text$mn:00002A1F                 mov     dword ptr [eax+1Ch], 0FFFFFFFFh
.text$mn:00002A26                 jmp     short loc_2A54
.text$mn:00002A28 ; ---------------------------------------------------------------------------
.text$mn:00002A28
.text$mn:00002A28 loc_2A28:                               ; CODE XREF: WordStyleDlg::updateFontSize(void)+66j
.text$mn:00002A28                 push    0Ah             ; Radix
.text$mn:00002A2A                 lea     ecx, [ebp+EndPtr]
.text$mn:00002A2D                 push    ecx             ; EndPtr
.text$mn:00002A2E                 lea     edx, [ebp+lParam]
.text$mn:00002A31                 push    edx             ; Str
.text$mn:00002A32                 call    _wcstol
.text$mn:00002A37                 add     esp, 0Ch
.text$mn:00002A3A                 mov     ecx, [ebp+var_14]
.text$mn:00002A3D                 mov     [ecx+1Ch], eax
.text$mn:00002A40                 mov     edx, [ebp+EndPtr]
.text$mn:00002A43                 movzx   eax, word ptr [edx]
.text$mn:00002A46                 test    eax, eax
.text$mn:00002A48                 jz      short loc_2A54
.text$mn:00002A4A                 mov     ecx, [ebp+var_14]
.text$mn:00002A4D                 mov     dword ptr [ecx+1Ch], 0FFFFFFFFh
.text$mn:00002A54
.text$mn:00002A54 loc_2A54:                               ; CODE XREF: WordStyleDlg::updateFontSize(void)+72j
.text$mn:00002A54                                         ; WordStyleDlg::updateFontSize(void)+94j
.text$mn:00002A54                 jmp     short loc_2A60
.text$mn:00002A56 ; ---------------------------------------------------------------------------
.text$mn:00002A56
.text$mn:00002A56 loc_2A56:                               ; CODE XREF: WordStyleDlg::updateFontSize(void)+3Bj
.text$mn:00002A56                 mov     edx, [ebp+var_14]
.text$mn:00002A59                 mov     dword ptr [edx+1Ch], 0
.text$mn:00002A60
.text$mn:00002A60 loc_2A60:                               ; CODE XREF: WordStyleDlg::updateFontSize(void):loc_2A54j
.text$mn:00002A60                 mov     ecx, [ebp+var_4]
.text$mn:00002A63                 xor     ecx, ebp
.text$mn:00002A65                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002A6A                 mov     esp, ebp
.text$mn:00002A6C                 pop     ebp
.text$mn:00002A6D                 retn
.text$mn:00002A6D ?updateFontSize@WordStyleDlg@@AAEXXZ endp
.text$mn:00002A6D
.text$mn:00002A6D ; ---------------------------------------------------------------------------
.text$mn:00002A6E                 db 6 dup(0CCh)
.text$mn:00002A74
.text$mn:00002A74 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A74
.text$mn:00002A74 ; Attributes: bp-based frame
.text$mn:00002A74
.text$mn:00002A74 ; void __thiscall WordStyleDlg::updateUserKeywords(WordStyleDlg *__hidden this)
.text$mn:00002A74                 public ?updateUserKeywords@WordStyleDlg@@AAEXXZ
.text$mn:00002A74 ?updateUserKeywords@WordStyleDlg@@AAEXXZ proc near
.text$mn:00002A74                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+734p
.text$mn:00002A74
.text$mn:00002A74 var_18          = dword ptr -18h
.text$mn:00002A74 var_14          = dword ptr -14h
.text$mn:00002A74 var_10          = dword ptr -10h
.text$mn:00002A74 lParam          = dword ptr -0Ch
.text$mn:00002A74 var_8           = dword ptr -8
.text$mn:00002A74 wParam          = dword ptr -4
.text$mn:00002A74
.text$mn:00002A74                 push    ebp
.text$mn:00002A75                 mov     ebp, esp
.text$mn:00002A77                 sub     esp, 18h
.text$mn:00002A7A                 mov     [ebp+var_8], ecx
.text$mn:00002A7D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002A80                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:00002A85                 mov     [ebp+var_14], eax
.text$mn:00002A88                 push    0               ; lParam
.text$mn:00002A8A                 push    0               ; wParam
.text$mn:00002A8C                 push    0Eh             ; Msg
.text$mn:00002A8E                 push    8AEh            ; nIDDlgItem
.text$mn:00002A93                 mov     eax, [ebp+var_8]
.text$mn:00002A96                 mov     ecx, [eax+0Ch]
.text$mn:00002A99                 push    ecx             ; hDlg
.text$mn:00002A9A                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002AA0                 mov     [ebp+wParam], eax
.text$mn:00002AA3                 mov     edx, [ebp+wParam]
.text$mn:00002AA6                 add     edx, 1
.text$mn:00002AA9                 mov     [ebp+wParam], edx
.text$mn:00002AAC                 xor     ecx, ecx
.text$mn:00002AAE                 mov     eax, [ebp+wParam]
.text$mn:00002AB1                 mov     edx, 2
.text$mn:00002AB6                 mul     edx
.text$mn:00002AB8                 seto    cl
.text$mn:00002ABB                 neg     ecx
.text$mn:00002ABD                 or      ecx, eax
.text$mn:00002ABF                 push    ecx             ; unsigned int
.text$mn:00002AC0                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:00002AC5                 add     esp, 4
.text$mn:00002AC8                 mov     [ebp+var_10], eax
.text$mn:00002ACB                 mov     eax, [ebp+var_10]
.text$mn:00002ACE                 mov     [ebp+lParam], eax
.text$mn:00002AD1                 mov     ecx, [ebp+lParam]
.text$mn:00002AD4                 push    ecx             ; lParam
.text$mn:00002AD5                 mov     edx, [ebp+wParam]
.text$mn:00002AD8                 push    edx             ; wParam
.text$mn:00002AD9                 push    0Dh             ; Msg
.text$mn:00002ADB                 push    8AEh            ; nIDDlgItem
.text$mn:00002AE0                 mov     eax, [ebp+var_8]
.text$mn:00002AE3                 mov     ecx, [eax+0Ch]
.text$mn:00002AE6                 push    ecx             ; hDlg
.text$mn:00002AE7                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002AED                 mov     edx, [ebp+lParam]
.text$mn:00002AF0                 push    edx             ; wchar_t *
.text$mn:00002AF1                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002AF4                 call    ?setKeywords@Style@@QAEXPB_W@Z ; Style::setKeywords(wchar_t const *)
.text$mn:00002AF9                 mov     eax, [ebp+lParam]
.text$mn:00002AFC                 mov     [ebp+var_18], eax
.text$mn:00002AFF                 mov     ecx, [ebp+var_18]
.text$mn:00002B02                 push    ecx             ; void *
.text$mn:00002B03                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:00002B08                 add     esp, 4
.text$mn:00002B0B                 mov     esp, ebp
.text$mn:00002B0D                 pop     ebp
.text$mn:00002B0E                 retn
.text$mn:00002B0E ?updateUserKeywords@WordStyleDlg@@AAEXXZ endp
.text$mn:00002B0E
.text$mn:00002B0E ; ---------------------------------------------------------------------------
.text$mn:00002B0F                 db 5 dup(0CCh)
.text$mn:00002B14
.text$mn:00002B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B14
.text$mn:00002B14 ; Attributes: bp-based frame
.text$mn:00002B14
.text$mn:00002B14 ; void __thiscall WordStyleDlg::switchToTheme(WordStyleDlg *__hidden this)
.text$mn:00002B14                 public ?switchToTheme@WordStyleDlg@@AAEXXZ
.text$mn:00002B14 ?switchToTheme@WordStyleDlg@@AAEXXZ proc near
.text$mn:00002B14                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+FE8p
.text$mn:00002B14
.text$mn:00002B14 var_24C         = dword ptr -24Ch
.text$mn:00002B14 var_248         = dword ptr -248h
.text$mn:00002B14 var_244         = dword ptr -244h
.text$mn:00002B14 var_240         = dword ptr -240h
.text$mn:00002B14 var_23C         = dword ptr -23Ch
.text$mn:00002B14 var_238         = dword ptr -238h
.text$mn:00002B14 var_234         = byte ptr -234h
.text$mn:00002B14 String1         = word ptr -218h
.text$mn:00002B14 var_10          = dword ptr -10h
.text$mn:00002B14 var_C           = dword ptr -0Ch
.text$mn:00002B14 var_4           = dword ptr -4
.text$mn:00002B14
.text$mn:00002B14                 push    ebp
.text$mn:00002B15                 mov     ebp, esp
.text$mn:00002B17                 push    0FFFFFFFFh
.text$mn:00002B19                 push    offset __ehhandler$?switchToTheme@WordStyleDlg@@AAEXXZ
.text$mn:00002B1E                 mov     eax, large fs:0
.text$mn:00002B24                 push    eax
.text$mn:00002B25                 sub     esp, 240h
.text$mn:00002B2B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B30                 xor     eax, ebp
.text$mn:00002B32                 mov     [ebp+var_10], eax
.text$mn:00002B35                 push    eax
.text$mn:00002B36                 lea     eax, [ebp+var_C]
.text$mn:00002B39                 mov     large fs:0, eax
.text$mn:00002B3F                 mov     [ebp+var_238], ecx
.text$mn:00002B45                 push    0               ; lParam
.text$mn:00002B47                 push    0               ; wParam
.text$mn:00002B49                 push    147h            ; Msg
.text$mn:00002B4E                 mov     eax, [ebp+var_238]
.text$mn:00002B54                 mov     ecx, [eax+44h]
.text$mn:00002B57                 push    ecx             ; hWnd
.text$mn:00002B58                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002B5E                 mov     [ebp+var_244], eax
.text$mn:00002B64                 mov     edx, [ebp+var_238]
.text$mn:00002B6A                 add     edx, 1BD8Ch
.text$mn:00002B70                 push    edx
.text$mn:00002B71                 lea     ecx, [ebp+var_234]
.text$mn:00002B77                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002B7C                 mov     [ebp+var_4], 0
.text$mn:00002B83                 mov     ecx, [ebp+var_238]
.text$mn:00002B89                 add     ecx, 1BD8Ch
.text$mn:00002B8F                 call    ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::clear(void)
.text$mn:00002B94                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002B99                 mov     [ebp+var_23C], eax
.text$mn:00002B9F                 mov     ecx, [ebp+var_23C] ; this
.text$mn:00002BA5                 call    ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ ; NppParameters::getThemeSwitcher(void)
.text$mn:00002BAA                 mov     [ebp+var_240], eax
.text$mn:00002BB0                 mov     eax, [ebp+var_244]
.text$mn:00002BB6                 push    eax
.text$mn:00002BB7                 mov     ecx, [ebp+var_240]
.text$mn:00002BBD                 call    ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z ; ThemeSwitcher::getElementFromIndex(uint)
.text$mn:00002BC2                 mov     [ebp+var_24C], eax
.text$mn:00002BC8                 mov     ecx, [ebp+var_24C]
.text$mn:00002BCE                 add     ecx, 1Ch
.text$mn:00002BD1                 push    ecx
.text$mn:00002BD2                 mov     ecx, [ebp+var_238]
.text$mn:00002BD8                 add     ecx, 1BD8Ch
.text$mn:00002BDE                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002BE3                 mov     edx, [ebp+var_238]
.text$mn:00002BE9                 movzx   eax, byte ptr [edx+37AE9h]
.text$mn:00002BF0                 test    eax, eax
.text$mn:00002BF2                 jz      loc_2C7E
.text$mn:00002BF8                 lea     ecx, [ebp+var_234]
.text$mn:00002BFE                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002C03                 push    eax             ; lpString2
.text$mn:00002C04                 lea     ecx, [ebp+String1]
.text$mn:00002C0A                 push    ecx             ; lpString1
.text$mn:00002C0B                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00002C11                 lea     edx, [ebp+String1]
.text$mn:00002C17                 push    edx             ; pszPath
.text$mn:00002C18                 call    dword ptr ds:__imp__PathStripPathW@4 ; PathStripPathW(x)
.text$mn:00002C1E                 lea     eax, [ebp+String1]
.text$mn:00002C24                 push    eax             ; pszPath
.text$mn:00002C25                 call    dword ptr ds:__imp__PathRemoveExtensionW@4 ; PathRemoveExtensionW(x)
.text$mn:00002C2B                 push    10034h          ; uType
.text$mn:00002C30                 lea     ecx, [ebp+String1]
.text$mn:00002C36                 push    ecx             ; lpCaption
.text$mn:00002C37                 push    offset $SG168498 ; " Unsaved changes are about to be discar"...
.text$mn:00002C3C                 mov     edx, [ebp+var_238]
.text$mn:00002C42                 mov     eax, [edx+0Ch]
.text$mn:00002C45                 push    eax             ; hWnd
.text$mn:00002C46                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00002C4C                 mov     [ebp+var_248], eax
.text$mn:00002C52                 cmp     [ebp+var_248], 6
.text$mn:00002C59                 jnz     short loc_2C7E
.text$mn:00002C5B                 mov     ecx, [ebp+var_238]
.text$mn:00002C61                 add     ecx, 1B860h
.text$mn:00002C67                 push    ecx             ; struct StyleArray *
.text$mn:00002C68                 mov     edx, [ebp+var_238]
.text$mn:00002C6E                 add     edx, 5Ch ; '\'
.text$mn:00002C71                 push    edx             ; struct LexerStylerArray *
.text$mn:00002C72                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002C77                 mov     ecx, eax        ; this
.text$mn:00002C79                 call    ?writeStyles@NppParameters@@QAEXAAULexerStylerArray@@AAUStyleArray@@@Z ; NppParameters::writeStyles(LexerStylerArray &,StyleArray &)
.text$mn:00002C7E
.text$mn:00002C7E loc_2C7E:                               ; CODE XREF: WordStyleDlg::switchToTheme(void)+DEj
.text$mn:00002C7E                                         ; WordStyleDlg::switchToTheme(void)+145j
.text$mn:00002C7E                 push    0
.text$mn:00002C80                 mov     ecx, [ebp+var_238]
.text$mn:00002C86                 add     ecx, 1BD8Ch
.text$mn:00002C8C                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00002C91                 push    eax             ; wchar_t *
.text$mn:00002C92                 mov     ecx, [ebp+var_23C] ; this
.text$mn:00002C98                 call    ?reloadStylers@NppParameters@@QAE_NPA_W@Z ; NppParameters::reloadStylers(wchar_t *)
.text$mn:00002C9D                 mov     ecx, [ebp+var_238] ; this
.text$mn:00002CA3                 call    ?loadLangListFromNppParam@WordStyleDlg@@AAEXXZ ; WordStyleDlg::loadLangListFromNppParam(void)
.text$mn:00002CA8                 mov     eax, [ebp+var_238]
.text$mn:00002CAE                 mov     byte ptr [eax+37ADFh], 1
.text$mn:00002CB5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002CBC                 lea     ecx, [ebp+var_234]
.text$mn:00002CC2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002CC7                 mov     ecx, [ebp+var_C]
.text$mn:00002CCA                 mov     large fs:0, ecx
.text$mn:00002CD1                 pop     ecx
.text$mn:00002CD2                 mov     ecx, [ebp+var_10]
.text$mn:00002CD5                 xor     ecx, ebp
.text$mn:00002CD7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002CDC                 mov     esp, ebp
.text$mn:00002CDE                 pop     ebp
.text$mn:00002CDF                 retn
.text$mn:00002CDF ?switchToTheme@WordStyleDlg@@AAEXXZ endp
.text$mn:00002CDF
.text$mn:00002CDF ; ---------------------------------------------------------------------------
.text$mn:00002CE0                 db 4 dup(0CCh)
.text$mn:00002CE4
.text$mn:00002CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CE4
.text$mn:00002CE4 ; Attributes: bp-based frame
.text$mn:00002CE4
.text$mn:00002CE4 ; private: void __thiscall WordStyleDlg::updateThemeName(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00002CE4                 public ?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00002CE4 ?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00002CE4                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+A68p
.text$mn:00002CE4
.text$mn:00002CE4 var_18          = dword ptr -18h
.text$mn:00002CE4 var_14          = dword ptr -14h
.text$mn:00002CE4 var_10          = dword ptr -10h
.text$mn:00002CE4 var_C           = dword ptr -0Ch
.text$mn:00002CE4 var_4           = dword ptr -4
.text$mn:00002CE4 arg_0           = byte ptr  8
.text$mn:00002CE4
.text$mn:00002CE4                 push    ebp
.text$mn:00002CE5                 mov     ebp, esp
.text$mn:00002CE7                 push    0FFFFFFFFh
.text$mn:00002CE9                 push    offset __ehhandler$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00002CEE                 mov     eax, large fs:0
.text$mn:00002CF4                 push    eax
.text$mn:00002CF5                 sub     esp, 0Ch
.text$mn:00002CF8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002CFD                 xor     eax, ebp
.text$mn:00002CFF                 push    eax
.text$mn:00002D00                 lea     eax, [ebp+var_C]
.text$mn:00002D03                 mov     large fs:0, eax
.text$mn:00002D09                 mov     [ebp+var_18], ecx
.text$mn:00002D0C                 mov     [ebp+var_4], 0
.text$mn:00002D13                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002D18                 mov     [ebp+var_10], eax
.text$mn:00002D1B                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002D1E                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00002D23                 mov     [ebp+var_14], eax
.text$mn:00002D26                 lea     eax, [ebp+arg_0]
.text$mn:00002D29                 push    eax
.text$mn:00002D2A                 mov     ecx, [ebp+var_14]
.text$mn:00002D2D                 add     ecx, 674h
.text$mn:00002D33                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002D38                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D3F                 lea     ecx, [ebp+arg_0]
.text$mn:00002D42                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002D47                 mov     ecx, [ebp+var_C]
.text$mn:00002D4A                 mov     large fs:0, ecx
.text$mn:00002D51                 pop     ecx
.text$mn:00002D52                 mov     esp, ebp
.text$mn:00002D54                 pop     ebp
.text$mn:00002D55                 retn    1Ch
.text$mn:00002D55 ?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00002D55
.text$mn:00002D55 ; ---------------------------------------------------------------------------
.text$mn:00002D58                 db 0Ch dup(0CCh)
.text$mn:00002D64
.text$mn:00002D64 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D64
.text$mn:00002D64 ; Attributes: bp-based frame
.text$mn:00002D64
.text$mn:00002D64 ; void __thiscall WordStyleDlg::loadLangListFromNppParam(WordStyleDlg *__hidden this)
.text$mn:00002D64                 public ?loadLangListFromNppParam@WordStyleDlg@@AAEXXZ
.text$mn:00002D64 ?loadLangListFromNppParam@WordStyleDlg@@AAEXXZ proc near
.text$mn:00002D64                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5ECp
.text$mn:00002D64                                         ; WordStyleDlg::switchToTheme(void)+18Fp
.text$mn:00002D64
.text$mn:00002D64 var_14          = dword ptr -14h
.text$mn:00002D64 var_10          = dword ptr -10h
.text$mn:00002D64 var_C           = dword ptr -0Ch
.text$mn:00002D64 var_8           = dword ptr -8
.text$mn:00002D64 var_4           = dword ptr -4
.text$mn:00002D64
.text$mn:00002D64                 push    ebp
.text$mn:00002D65                 mov     ebp, esp
.text$mn:00002D67                 sub     esp, 14h
.text$mn:00002D6A                 mov     [ebp+var_4], ecx
.text$mn:00002D6D                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002D72                 mov     [ebp+var_C], eax
.text$mn:00002D75                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002D78                 call    ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ ; NppParameters::getLStylerArray(void)
.text$mn:00002D7D                 push    eax
.text$mn:00002D7E                 mov     ecx, [ebp+var_4]
.text$mn:00002D81                 add     ecx, 5Ch ; '\'
.text$mn:00002D84                 call    ??4LexerStylerArray@@QAEAAU0@ABU0@@Z ; LexerStylerArray::operator=(LexerStylerArray const &)
.text$mn:00002D89                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002D8C                 call    ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ ; NppParameters::getGlobalStylers(void)
.text$mn:00002D91                 push    eax
.text$mn:00002D92                 mov     ecx, [ebp+var_4]
.text$mn:00002D95                 add     ecx, 1B860h
.text$mn:00002D9B                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00002DA0                 push    0               ; lParam
.text$mn:00002DA2                 push    0               ; wParam
.text$mn:00002DA4                 push    184h            ; Msg
.text$mn:00002DA9                 push    900h            ; nIDDlgItem
.text$mn:00002DAE                 mov     eax, [ebp+var_4]
.text$mn:00002DB1                 mov     ecx, [eax+0Ch]
.text$mn:00002DB4                 push    ecx             ; hDlg
.text$mn:00002DB5                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002DBB                 push    offset $SG168346 ; "Global Styles"
.text$mn:00002DC0                 push    0               ; wParam
.text$mn:00002DC2                 push    180h            ; Msg
.text$mn:00002DC7                 push    900h            ; nIDDlgItem
.text$mn:00002DCC                 mov     edx, [ebp+var_4]
.text$mn:00002DCF                 mov     eax, [edx+0Ch]
.text$mn:00002DD2                 push    eax             ; hDlg
.text$mn:00002DD3                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002DD9                 mov     [ebp+var_8], 0
.text$mn:00002DE0                 mov     ecx, [ebp+var_4]
.text$mn:00002DE3                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00002DE6                 call    ?getNbLexer@LexerStylerArray@@QBEHXZ ; LexerStylerArray::getNbLexer(void)
.text$mn:00002DEB                 mov     [ebp+var_10], eax
.text$mn:00002DEE                 jmp     short loc_2DF9
.text$mn:00002DF0 ; ---------------------------------------------------------------------------
.text$mn:00002DF0
.text$mn:00002DF0 loc_2DF0:                               ; CODE XREF: WordStyleDlg::loadLangListFromNppParam(void)+C6j
.text$mn:00002DF0                 mov     ecx, [ebp+var_8]
.text$mn:00002DF3                 add     ecx, 1
.text$mn:00002DF6                 mov     [ebp+var_8], ecx
.text$mn:00002DF9
.text$mn:00002DF9 loc_2DF9:                               ; CODE XREF: WordStyleDlg::loadLangListFromNppParam(void)+8Aj
.text$mn:00002DF9                 mov     edx, [ebp+var_8]
.text$mn:00002DFC                 cmp     edx, [ebp+var_10]
.text$mn:00002DFF                 jge     short loc_2E2C
.text$mn:00002E01                 mov     eax, [ebp+var_8]
.text$mn:00002E04                 push    eax             ; int
.text$mn:00002E05                 mov     ecx, [ebp+var_4]
.text$mn:00002E08                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00002E0B                 call    ?getLexerDescFromIndex@LexerStylerArray@@QBEPB_WH@Z ; LexerStylerArray::getLexerDescFromIndex(int)
.text$mn:00002E10                 push    eax             ; lParam
.text$mn:00002E11                 push    0               ; wParam
.text$mn:00002E13                 push    180h            ; Msg
.text$mn:00002E18                 push    900h            ; nIDDlgItem
.text$mn:00002E1D                 mov     ecx, [ebp+var_4]
.text$mn:00002E20                 mov     edx, [ecx+0Ch]
.text$mn:00002E23                 push    edx             ; hDlg
.text$mn:00002E24                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002E2A                 jmp     short loc_2DF0
.text$mn:00002E2C ; ---------------------------------------------------------------------------
.text$mn:00002E2C
.text$mn:00002E2C loc_2E2C:                               ; CODE XREF: WordStyleDlg::loadLangListFromNppParam(void)+9Bj
.text$mn:00002E2C                 mov     [ebp+var_14], 0
.text$mn:00002E33                 push    0               ; lParam
.text$mn:00002E35                 push    0               ; wParam
.text$mn:00002E37                 push    186h            ; Msg
.text$mn:00002E3C                 push    900h            ; nIDDlgItem
.text$mn:00002E41                 mov     eax, [ebp+var_4]
.text$mn:00002E44                 mov     ecx, [eax+0Ch]
.text$mn:00002E47                 push    ecx             ; hDlg
.text$mn:00002E48                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002E4E                 push    0               ; int
.text$mn:00002E50                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002E53                 call    ?setStyleListFromLexer@WordStyleDlg@@AAEXH@Z ; WordStyleDlg::setStyleListFromLexer(int)
.text$mn:00002E58                 mov     esp, ebp
.text$mn:00002E5A                 pop     ebp
.text$mn:00002E5B                 retn
.text$mn:00002E5B ?loadLangListFromNppParam@WordStyleDlg@@AAEXXZ endp
.text$mn:00002E5B
.text$mn:00002E5B ; ---------------------------------------------------------------------------
.text$mn:00002E5C                 db 8 dup(0CCh)
.text$mn:00002E64
.text$mn:00002E64 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E64
.text$mn:00002E64 ; Attributes: bp-based frame
.text$mn:00002E64
.text$mn:00002E64 ; void __thiscall WordStyleDlg::setStyleListFromLexer(WordStyleDlg *this, int)
.text$mn:00002E64                 public ?setStyleListFromLexer@WordStyleDlg@@AAEXH@Z
.text$mn:00002E64 ?setStyleListFromLexer@WordStyleDlg@@AAEXH@Z proc near
.text$mn:00002E64                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+FC8p
.text$mn:00002E64                                         ; WordStyleDlg::loadLangListFromNppParam(void)+EFp
.text$mn:00002E64
.text$mn:00002E64 var_44          = dword ptr -44h
.text$mn:00002E64 var_40          = dword ptr -40h
.text$mn:00002E64 var_3C          = dword ptr -3Ch
.text$mn:00002E64 var_38          = dword ptr -38h
.text$mn:00002E64 lParam          = dword ptr -34h
.text$mn:00002E64 var_30          = dword ptr -30h
.text$mn:00002E64 var_2C          = dword ptr -2Ch
.text$mn:00002E64 var_28          = dword ptr -28h
.text$mn:00002E64 var_24          = dword ptr -24h
.text$mn:00002E64 var_20          = dword ptr -20h
.text$mn:00002E64 var_1C          = dword ptr -1Ch
.text$mn:00002E64 nCmdShow        = dword ptr -18h
.text$mn:00002E64 bEnable         = dword ptr -14h
.text$mn:00002E64 var_10          = dword ptr -10h
.text$mn:00002E64 var_C           = dword ptr -0Ch
.text$mn:00002E64 var_8           = dword ptr -8
.text$mn:00002E64 var_2           = byte ptr -2
.text$mn:00002E64 var_1           = byte ptr -1
.text$mn:00002E64 arg_0           = dword ptr  8
.text$mn:00002E64
.text$mn:00002E64                 push    ebp
.text$mn:00002E65                 mov     ebp, esp
.text$mn:00002E67                 sub     esp, 44h
.text$mn:00002E6A                 mov     [ebp+var_8], ecx
.text$mn:00002E6D                 mov     eax, [ebp+var_8]
.text$mn:00002E70                 mov     ecx, [ebp+arg_0]
.text$mn:00002E73                 mov     [eax+28h], ecx
.text$mn:00002E76                 push    0               ; lParam
.text$mn:00002E78                 push    0               ; wParam
.text$mn:00002E7A                 push    184h            ; Msg
.text$mn:00002E7F                 push    901h            ; nIDDlgItem
.text$mn:00002E84                 mov     edx, [ebp+var_8]
.text$mn:00002E87                 mov     eax, [edx+0Ch]
.text$mn:00002E8A                 push    eax             ; hDlg
.text$mn:00002E8B                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002E91                 cmp     [ebp+arg_0], 0
.text$mn:00002E95                 jz      loc_2F7D
.text$mn:00002E9B                 mov     ecx, [ebp+arg_0]
.text$mn:00002E9E                 sub     ecx, 1
.text$mn:00002EA1                 push    ecx             ; int
.text$mn:00002EA2                 mov     ecx, [ebp+var_8]
.text$mn:00002EA5                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00002EA8                 call    ?getLexerNameFromIndex@LexerStylerArray@@QBEPB_WH@Z ; LexerStylerArray::getLexerNameFromIndex(int)
.text$mn:00002EAD                 mov     [ebp+var_10], eax
.text$mn:00002EB0                 mov     edx, [ebp+var_10]
.text$mn:00002EB3                 push    edx             ; wchar_t *
.text$mn:00002EB4                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002EB9                 mov     ecx, eax        ; this
.text$mn:00002EBB                 call    ?getLangExtFromName@NppParameters@@QBEPB_WPB_W@Z ; NppParameters::getLangExtFromName(wchar_t const *)
.text$mn:00002EC0                 mov     [ebp+lParam], eax
.text$mn:00002EC3                 mov     eax, [ebp+var_10]
.text$mn:00002EC6                 push    eax             ; wchar_t *
.text$mn:00002EC7                 mov     ecx, [ebp+var_8]
.text$mn:00002ECA                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00002ECD                 call    ?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z ; LexerStylerArray::getLexerStylerByName(wchar_t const *)
.text$mn:00002ED2                 mov     ecx, eax        ; this
.text$mn:00002ED4                 call    ?getLexerUserExt@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerUserExt(void)
.text$mn:00002ED9                 mov     [ebp+var_38], eax
.text$mn:00002EDC                 mov     ecx, [ebp+lParam]
.text$mn:00002EDF                 push    ecx             ; lParam
.text$mn:00002EE0                 push    0               ; wParam
.text$mn:00002EE2                 push    0Ch             ; Msg
.text$mn:00002EE4                 push    8A7h            ; nIDDlgItem
.text$mn:00002EE9                 mov     edx, [ebp+var_8]
.text$mn:00002EEC                 mov     eax, [edx+0Ch]
.text$mn:00002EEF                 push    eax             ; hDlg
.text$mn:00002EF0                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002EF6                 mov     ecx, [ebp+var_8]
.text$mn:00002EF9                 mov     dl, [ecx+37AE8h]
.text$mn:00002EFF                 mov     [ebp+var_1], dl
.text$mn:00002F02                 mov     eax, [ebp+var_8]
.text$mn:00002F05                 mov     cl, [eax+37AE9h]
.text$mn:00002F0B                 mov     [ebp+var_2], cl
.text$mn:00002F0E                 mov     edx, [ebp+var_38]
.text$mn:00002F11                 push    edx             ; lParam
.text$mn:00002F12                 push    0               ; wParam
.text$mn:00002F14                 push    0Ch             ; Msg
.text$mn:00002F16                 push    8A9h            ; nIDDlgItem
.text$mn:00002F1B                 mov     eax, [ebp+var_8]
.text$mn:00002F1E                 mov     ecx, [eax+0Ch]
.text$mn:00002F21                 push    ecx             ; hDlg
.text$mn:00002F22                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00002F28                 mov     edx, [ebp+var_8]
.text$mn:00002F2B                 mov     al, [ebp+var_1]
.text$mn:00002F2E                 mov     [edx+37AE8h], al
.text$mn:00002F34                 mov     ecx, [ebp+var_8]
.text$mn:00002F37                 mov     dl, [ebp+var_2]
.text$mn:00002F3A                 mov     [ecx+37AE9h], dl
.text$mn:00002F40                 movzx   eax, [ebp+var_1]
.text$mn:00002F44                 test    eax, eax
.text$mn:00002F46                 jnz     short loc_2F59
.text$mn:00002F48                 movzx   ecx, [ebp+var_2]
.text$mn:00002F4C                 test    ecx, ecx
.text$mn:00002F4E                 jnz     short loc_2F59
.text$mn:00002F50                 mov     [ebp+bEnable], 0
.text$mn:00002F57                 jmp     short loc_2F60
.text$mn:00002F59 ; ---------------------------------------------------------------------------
.text$mn:00002F59
.text$mn:00002F59 loc_2F59:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+E2j
.text$mn:00002F59                                         ; WordStyleDlg::setStyleListFromLexer(int)+EAj
.text$mn:00002F59                 mov     [ebp+bEnable], 1
.text$mn:00002F60
.text$mn:00002F60 loc_2F60:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+F3j
.text$mn:00002F60                 mov     edx, [ebp+bEnable]
.text$mn:00002F63                 push    edx             ; bEnable
.text$mn:00002F64                 push    8FDh            ; nIDDlgItem
.text$mn:00002F69                 mov     eax, [ebp+var_8]
.text$mn:00002F6C                 mov     ecx, [eax+0Ch]
.text$mn:00002F6F                 push    ecx             ; hDlg
.text$mn:00002F70                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00002F76                 push    eax             ; hWnd
.text$mn:00002F77                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00002F7D
.text$mn:00002F7D loc_2F7D:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+31j
.text$mn:00002F7D                 cmp     [ebp+arg_0], 0
.text$mn:00002F81                 jz      short loc_2F8C
.text$mn:00002F83                 mov     [ebp+nCmdShow], 5
.text$mn:00002F8A                 jmp     short loc_2F93
.text$mn:00002F8C ; ---------------------------------------------------------------------------
.text$mn:00002F8C
.text$mn:00002F8C loc_2F8C:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+11Dj
.text$mn:00002F8C                 mov     [ebp+nCmdShow], 0
.text$mn:00002F93
.text$mn:00002F93 loc_2F93:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+126j
.text$mn:00002F93                 mov     edx, [ebp+nCmdShow]
.text$mn:00002F96                 push    edx             ; nCmdShow
.text$mn:00002F97                 push    8A7h            ; nIDDlgItem
.text$mn:00002F9C                 mov     eax, [ebp+var_8]
.text$mn:00002F9F                 mov     ecx, [eax+0Ch]
.text$mn:00002FA2                 push    ecx             ; hDlg
.text$mn:00002FA3                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00002FA9                 push    eax             ; hWnd
.text$mn:00002FAA                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002FB0                 cmp     [ebp+arg_0], 0
.text$mn:00002FB4                 jz      short loc_2FBF
.text$mn:00002FB6                 mov     [ebp+var_1C], 5
.text$mn:00002FBD                 jmp     short loc_2FC6
.text$mn:00002FBF ; ---------------------------------------------------------------------------
.text$mn:00002FBF
.text$mn:00002FBF loc_2FBF:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+150j
.text$mn:00002FBF                 mov     [ebp+var_1C], 0
.text$mn:00002FC6
.text$mn:00002FC6 loc_2FC6:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+159j
.text$mn:00002FC6                 mov     edx, [ebp+var_1C]
.text$mn:00002FC9                 push    edx             ; nCmdShow
.text$mn:00002FCA                 push    8A6h            ; nIDDlgItem
.text$mn:00002FCF                 mov     eax, [ebp+var_8]
.text$mn:00002FD2                 mov     ecx, [eax+0Ch]
.text$mn:00002FD5                 push    ecx             ; hDlg
.text$mn:00002FD6                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00002FDC                 push    eax             ; hWnd
.text$mn:00002FDD                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002FE3                 cmp     [ebp+arg_0], 0
.text$mn:00002FE7                 jz      short loc_2FF2
.text$mn:00002FE9                 mov     [ebp+var_20], 5
.text$mn:00002FF0                 jmp     short loc_2FF9
.text$mn:00002FF2 ; ---------------------------------------------------------------------------
.text$mn:00002FF2
.text$mn:00002FF2 loc_2FF2:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+183j
.text$mn:00002FF2                 mov     [ebp+var_20], 0
.text$mn:00002FF9
.text$mn:00002FF9 loc_2FF9:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+18Cj
.text$mn:00002FF9                 mov     edx, [ebp+var_20]
.text$mn:00002FFC                 push    edx             ; nCmdShow
.text$mn:00002FFD                 push    8A9h            ; nIDDlgItem
.text$mn:00003002                 mov     eax, [ebp+var_8]
.text$mn:00003005                 mov     ecx, [eax+0Ch]
.text$mn:00003008                 push    ecx             ; hDlg
.text$mn:00003009                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000300F                 push    eax             ; hWnd
.text$mn:00003010                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003016                 cmp     [ebp+arg_0], 0
.text$mn:0000301A                 jz      short loc_3025
.text$mn:0000301C                 mov     [ebp+var_24], 5
.text$mn:00003023                 jmp     short loc_302C
.text$mn:00003025 ; ---------------------------------------------------------------------------
.text$mn:00003025
.text$mn:00003025 loc_3025:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+1B6j
.text$mn:00003025                 mov     [ebp+var_24], 0
.text$mn:0000302C
.text$mn:0000302C loc_302C:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+1BFj
.text$mn:0000302C                 mov     edx, [ebp+var_24]
.text$mn:0000302F                 push    edx             ; nCmdShow
.text$mn:00003030                 push    8A8h            ; nIDDlgItem
.text$mn:00003035                 mov     eax, [ebp+var_8]
.text$mn:00003038                 mov     ecx, [eax+0Ch]
.text$mn:0000303B                 push    ecx             ; hDlg
.text$mn:0000303C                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00003042                 push    eax             ; hWnd
.text$mn:00003043                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003049                 cmp     [ebp+arg_0], 0
.text$mn:0000304D                 jz      short loc_3058
.text$mn:0000304F                 mov     [ebp+var_28], 5
.text$mn:00003056                 jmp     short loc_305F
.text$mn:00003058 ; ---------------------------------------------------------------------------
.text$mn:00003058
.text$mn:00003058 loc_3058:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+1E9j
.text$mn:00003058                 mov     [ebp+var_28], 0
.text$mn:0000305F
.text$mn:0000305F loc_305F:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+1F2j
.text$mn:0000305F                 mov     edx, [ebp+var_28]
.text$mn:00003062                 push    edx             ; nCmdShow
.text$mn:00003063                 push    8B0h            ; nIDDlgItem
.text$mn:00003068                 mov     eax, [ebp+var_8]
.text$mn:0000306B                 mov     ecx, [eax+0Ch]
.text$mn:0000306E                 push    ecx             ; hDlg
.text$mn:0000306F                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00003075                 push    eax             ; hWnd
.text$mn:00003076                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000307C                 cmp     [ebp+arg_0], 0
.text$mn:00003080                 jz      short loc_3099
.text$mn:00003082                 mov     edx, [ebp+arg_0]
.text$mn:00003085                 sub     edx, 1
.text$mn:00003088                 push    edx             ; int
.text$mn:00003089                 mov     ecx, [ebp+var_8]
.text$mn:0000308C                 add     ecx, 5Ch ; '\'  ; this
.text$mn:0000308F                 call    ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z ; LexerStylerArray::getLexerFromIndex(int)
.text$mn:00003094                 mov     [ebp+var_2C], eax
.text$mn:00003097                 jmp     short loc_30A4
.text$mn:00003099 ; ---------------------------------------------------------------------------
.text$mn:00003099
.text$mn:00003099 loc_3099:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+21Cj
.text$mn:00003099                 mov     eax, [ebp+var_8]
.text$mn:0000309C                 add     eax, 1B860h
.text$mn:000030A1                 mov     [ebp+var_2C], eax
.text$mn:000030A4
.text$mn:000030A4 loc_30A4:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+233j
.text$mn:000030A4                 mov     ecx, [ebp+var_2C]
.text$mn:000030A7                 mov     [ebp+var_3C], ecx
.text$mn:000030AA                 mov     edx, [ebp+var_3C]
.text$mn:000030AD                 mov     [ebp+var_30], edx
.text$mn:000030B0                 mov     [ebp+var_C], 0
.text$mn:000030B7                 mov     ecx, [ebp+var_30] ; this
.text$mn:000030BA                 call    ?getNbStyler@StyleArray@@QBEHXZ ; StyleArray::getNbStyler(void)
.text$mn:000030BF                 mov     [ebp+var_40], eax
.text$mn:000030C2                 jmp     short loc_30CD
.text$mn:000030C4 ; ---------------------------------------------------------------------------
.text$mn:000030C4
.text$mn:000030C4 loc_30C4:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+2A0j
.text$mn:000030C4                 mov     eax, [ebp+var_C]
.text$mn:000030C7                 add     eax, 1
.text$mn:000030CA                 mov     [ebp+var_C], eax
.text$mn:000030CD
.text$mn:000030CD loc_30CD:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+25Ej
.text$mn:000030CD                 mov     ecx, [ebp+var_C]
.text$mn:000030D0                 cmp     ecx, [ebp+var_40]
.text$mn:000030D3                 jge     short loc_3106
.text$mn:000030D5                 mov     edx, [ebp+var_C]
.text$mn:000030D8                 push    edx             ; int
.text$mn:000030D9                 mov     ecx, [ebp+var_30] ; this
.text$mn:000030DC                 call    ?getStyler@StyleArray@@QAEAAUStyle@@H@Z ; StyleArray::getStyler(int)
.text$mn:000030E1                 mov     [ebp+var_44], eax
.text$mn:000030E4                 mov     eax, [ebp+var_44]
.text$mn:000030E7                 mov     ecx, [eax+4]
.text$mn:000030EA                 push    ecx             ; lParam
.text$mn:000030EB                 push    0               ; wParam
.text$mn:000030ED                 push    180h            ; Msg
.text$mn:000030F2                 push    901h            ; nIDDlgItem
.text$mn:000030F7                 mov     edx, [ebp+var_8]
.text$mn:000030FA                 mov     eax, [edx+0Ch]
.text$mn:000030FD                 push    eax             ; hDlg
.text$mn:000030FE                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003104                 jmp     short loc_30C4
.text$mn:00003106 ; ---------------------------------------------------------------------------
.text$mn:00003106
.text$mn:00003106 loc_3106:                               ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+26Fj
.text$mn:00003106                 push    0               ; lParam
.text$mn:00003108                 push    0               ; wParam
.text$mn:0000310A                 push    186h            ; Msg
.text$mn:0000310F                 push    901h            ; nIDDlgItem
.text$mn:00003114                 mov     ecx, [ebp+var_8]
.text$mn:00003117                 mov     edx, [ecx+0Ch]
.text$mn:0000311A                 push    edx             ; hDlg
.text$mn:0000311B                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003121                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003124                 call    ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ ; WordStyleDlg::setVisualFromStyleList(void)
.text$mn:00003129                 mov     esp, ebp
.text$mn:0000312B                 pop     ebp
.text$mn:0000312C                 retn    4
.text$mn:0000312C ?setStyleListFromLexer@WordStyleDlg@@AAEXH@Z endp
.text$mn:0000312C
.text$mn:0000312C ; ---------------------------------------------------------------------------
.text$mn:0000312F                 db 5 dup(0CCh)
.text$mn:00003134
.text$mn:00003134 ; =============== S U B R O U T I N E =======================================
.text$mn:00003134
.text$mn:00003134 ; Attributes: bp-based frame
.text$mn:00003134
.text$mn:00003134 ; void __thiscall WordStyleDlg::setVisualFromStyleList(WordStyleDlg *__hidden this)
.text$mn:00003134                 public ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ
.text$mn:00003134 ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ proc near
.text$mn:00003134                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5DCp
.text$mn:00003134                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+964p ...
.text$mn:00003134
.text$mn:00003134 var_318         = dword ptr -318h
.text$mn:00003134 var_314         = dword ptr -314h
.text$mn:00003134 var_310         = dword ptr -310h
.text$mn:00003134 var_30C         = dword ptr -30Ch
.text$mn:00003134 var_308         = dword ptr -308h
.text$mn:00003134 var_304         = dword ptr -304h
.text$mn:00003134 var_300         = dword ptr -300h
.text$mn:00003134 var_2FC         = dword ptr -2FCh
.text$mn:00003134 var_2F8         = dword ptr -2F8h
.text$mn:00003134 var_2F4         = dword ptr -2F4h
.text$mn:00003134 var_2F0         = dword ptr -2F0h
.text$mn:00003134 var_2EC         = dword ptr -2ECh
.text$mn:00003134 var_2E8         = dword ptr -2E8h
.text$mn:00003134 var_2E4         = dword ptr -2E4h
.text$mn:00003134 var_2E0         = dword ptr -2E0h
.text$mn:00003134 var_2DC         = dword ptr -2DCh
.text$mn:00003134 var_2D8         = dword ptr -2D8h
.text$mn:00003134 var_2D4         = dword ptr -2D4h
.text$mn:00003134 nCmdShow        = dword ptr -2D0h
.text$mn:00003134 wParam          = dword ptr -2CCh
.text$mn:00003134 var_2C7         = byte ptr -2C7h
.text$mn:00003134 var_2C6         = byte ptr -2C6h
.text$mn:00003134 var_2C5         = byte ptr -2C5h
.text$mn:00003134 var_2C4         = dword ptr -2C4h
.text$mn:00003134 var_2C0         = dword ptr -2C0h
.text$mn:00003134 var_2B9         = byte ptr -2B9h
.text$mn:00003134 var_2B8         = byte ptr -2B8h
.text$mn:00003134 lParam          = dword ptr -29Ch
.text$mn:00003134 var_9C          = dword ptr -9Ch
.text$mn:00003134 var_1C          = word ptr -1Ch
.text$mn:00003134 var_1A          = dword ptr -1Ah
.text$mn:00003134 var_16          = dword ptr -16h
.text$mn:00003134 var_10          = dword ptr -10h
.text$mn:00003134 var_C           = dword ptr -0Ch
.text$mn:00003134 var_4           = dword ptr -4
.text$mn:00003134
.text$mn:00003134                 push    ebp
.text$mn:00003135                 mov     ebp, esp
.text$mn:00003137                 push    0FFFFFFFFh
.text$mn:00003139                 push    offset __ehhandler$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ
.text$mn:0000313E                 mov     eax, large fs:0
.text$mn:00003144                 push    eax
.text$mn:00003145                 sub     esp, 30Ch
.text$mn:0000314B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003150                 xor     eax, ebp
.text$mn:00003152                 mov     [ebp+var_10], eax
.text$mn:00003155                 push    eax
.text$mn:00003156                 lea     eax, [ebp+var_C]
.text$mn:00003159                 mov     large fs:0, eax
.text$mn:0000315F                 mov     [ebp+var_2C0], ecx
.text$mn:00003165                 push    0               ; bool
.text$mn:00003167                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:0000316D                 call    ?showGlobalOverrideCtrls@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::showGlobalOverrideCtrls(bool)
.text$mn:00003172                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:00003178                 call    ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ ; WordStyleDlg::getCurrentStyler(void)
.text$mn:0000317D                 mov     [ebp+var_2C4], eax
.text$mn:00003183                 mov     eax, [ebp+var_2C4]
.text$mn:00003189                 cmp     dword ptr [eax+4], 0
.text$mn:0000318D                 jz      short loc_31B5
.text$mn:0000318F                 push    offset $SG168527 ; "Global override"
.text$mn:00003194                 mov     ecx, [ebp+var_2C4]
.text$mn:0000319A                 mov     edx, [ecx+4]
.text$mn:0000319D                 push    edx             ; lpString1
.text$mn:0000319E                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000031A4                 test    eax, eax
.text$mn:000031A6                 jnz     short loc_31B5
.text$mn:000031A8                 push    1               ; bool
.text$mn:000031AA                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:000031B0                 call    ?showGlobalOverrideCtrls@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::showGlobalOverrideCtrls(bool)
.text$mn:000031B5
.text$mn:000031B5 loc_31B5:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+59j
.text$mn:000031B5                                         ; WordStyleDlg::setVisualFromStyleList(void)+72j
.text$mn:000031B5                 mov     [ebp+var_308], 0FF0000h
.text$mn:000031BF                 mov     eax, 2
.text$mn:000031C4                 imul    ecx, eax, 0
.text$mn:000031C7                 mov     [ebp+var_2E4], ecx
.text$mn:000031CD                 cmp     [ebp+var_2E4], 200h
.text$mn:000031D7                 jnb     short loc_31DB
.text$mn:000031D9                 jmp     short loc_31E0
.text$mn:000031DB ; ---------------------------------------------------------------------------
.text$mn:000031DB
.text$mn:000031DB loc_31DB:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+A3j
.text$mn:000031DB                 call    ___report_rangecheckfailure
.text$mn:000031E0
.text$mn:000031E0 loc_31E0:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+A5j
.text$mn:000031E0                 xor     edx, edx
.text$mn:000031E2                 mov     eax, [ebp+var_2E4]
.text$mn:000031E8                 mov     word ptr [ebp+eax+lParam], dx
.text$mn:000031F0                 push    0               ; lParam
.text$mn:000031F2                 push    0               ; wParam
.text$mn:000031F4                 push    188h            ; Msg
.text$mn:000031F9                 push    900h            ; nIDDlgItem
.text$mn:000031FE                 mov     ecx, [ebp+var_2C0]
.text$mn:00003204                 mov     edx, [ecx+0Ch]
.text$mn:00003207                 push    edx             ; hDlg
.text$mn:00003208                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000320E                 mov     [ebp+wParam], eax
.text$mn:00003214                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:0000321B                 jnz     short loc_3222
.text$mn:0000321D                 jmp     loc_3949
.text$mn:00003222 ; ---------------------------------------------------------------------------
.text$mn:00003222
.text$mn:00003222 loc_3222:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+E7j
.text$mn:00003222                 lea     eax, [ebp+lParam]
.text$mn:00003228                 push    eax             ; lParam
.text$mn:00003229                 mov     ecx, [ebp+wParam]
.text$mn:0000322F                 push    ecx             ; wParam
.text$mn:00003230                 push    189h            ; Msg
.text$mn:00003235                 push    900h            ; nIDDlgItem
.text$mn:0000323A                 mov     edx, [ebp+var_2C0]
.text$mn:00003240                 mov     eax, [edx+0Ch]
.text$mn:00003243                 push    eax             ; hDlg
.text$mn:00003244                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000324A                 push    0               ; lParam
.text$mn:0000324C                 push    0               ; wParam
.text$mn:0000324E                 push    188h            ; Msg
.text$mn:00003253                 push    901h            ; nIDDlgItem
.text$mn:00003258                 mov     ecx, [ebp+var_2C0]
.text$mn:0000325E                 mov     edx, [ecx+0Ch]
.text$mn:00003261                 push    edx             ; hDlg
.text$mn:00003262                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003268                 mov     [ebp+wParam], eax
.text$mn:0000326E                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:00003275                 jnz     short loc_327C
.text$mn:00003277                 jmp     loc_3949
.text$mn:0000327C ; ---------------------------------------------------------------------------
.text$mn:0000327C
.text$mn:0000327C loc_327C:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+141j
.text$mn:0000327C                 lea     eax, [ebp+var_9C]
.text$mn:00003282                 push    eax             ; lParam
.text$mn:00003283                 mov     ecx, [ebp+wParam]
.text$mn:00003289                 push    ecx             ; wParam
.text$mn:0000328A                 push    189h            ; Msg
.text$mn:0000328F                 push    901h            ; nIDDlgItem
.text$mn:00003294                 mov     edx, [ebp+var_2C0]
.text$mn:0000329A                 mov     eax, [edx+0Ch]
.text$mn:0000329D                 push    eax             ; hDlg
.text$mn:0000329E                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000032A4                 lea     ecx, [ebp+var_9C]
.text$mn:000032AA                 push    ecx             ; lpString2
.text$mn:000032AB                 push    offset $SG168543 ; " : "
.text$mn:000032B0                 lea     edx, [ebp+lParam]
.text$mn:000032B6                 push    edx             ; lpString1
.text$mn:000032B7                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:000032BD                 push    eax             ; lpString1
.text$mn:000032BE                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:000032C4                 push    offset $SG168544 ; "          "
.text$mn:000032C9                 lea     eax, [ebp+lParam]
.text$mn:000032CF                 push    eax             ; lpString1
.text$mn:000032D0                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:000032D6                 mov     ecx, [ebp+var_308]
.text$mn:000032DC                 push    ecx             ; unsigned __int32
.text$mn:000032DD                 mov     ecx, [ebp+var_2C0]
.text$mn:000032E3                 add     ecx, 37AE0h     ; this
.text$mn:000032E9                 call    ?setColour@ColourStaticTextHooker@@QAEKK@Z ; ColourStaticTextHooker::setColour(ulong)
.text$mn:000032EE                 lea     edx, [ebp+lParam]
.text$mn:000032F4                 push    edx             ; lpString
.text$mn:000032F5                 mov     eax, [ebp+var_2C0]
.text$mn:000032FB                 mov     ecx, [eax+58h]
.text$mn:000032FE                 push    ecx             ; hWnd
.text$mn:000032FF                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003305                 mov     [ebp+var_2B9], 0
.text$mn:0000330C                 mov     edx, [ebp+var_2C4]
.text$mn:00003312                 mov     eax, [edx+8]
.text$mn:00003315                 shr     eax, 10h
.text$mn:00003318                 and     eax, 0FFFFh
.text$mn:0000331D                 movzx   ecx, ax
.text$mn:00003320                 shr     ecx, 8
.text$mn:00003323                 and     ecx, 0FFh
.text$mn:00003329                 movzx   edx, cl
.text$mn:0000332C                 cmp     edx, 0FFh
.text$mn:00003332                 jz      short loc_3387
.text$mn:00003334                 mov     eax, [ebp+var_2C4]
.text$mn:0000333A                 mov     ecx, [eax+8]
.text$mn:0000333D                 push    ecx             ; unsigned __int32
.text$mn:0000333E                 mov     edx, [ebp+var_2C0]
.text$mn:00003344                 mov     ecx, [edx+20h]  ; this
.text$mn:00003347                 call    ?setColour@ColourPicker@@QAEXK@Z ; ColourPicker::setColour(ulong)
.text$mn:0000334C                 mov     eax, [ebp+var_2C4]
.text$mn:00003352                 mov     ecx, [eax+10h]
.text$mn:00003355                 and     ecx, 1
.text$mn:00003358                 jz      short loc_3363
.text$mn:0000335A                 mov     [ebp+var_2C6], 1
.text$mn:00003361                 jmp     short loc_336A
.text$mn:00003363 ; ---------------------------------------------------------------------------
.text$mn:00003363
.text$mn:00003363 loc_3363:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+224j
.text$mn:00003363                 mov     [ebp+var_2C6], 0
.text$mn:0000336A
.text$mn:0000336A loc_336A:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+22Dj
.text$mn:0000336A                 movzx   edx, [ebp+var_2C6]
.text$mn:00003371                 push    edx             ; bool
.text$mn:00003372                 mov     eax, [ebp+var_2C0]
.text$mn:00003378                 mov     ecx, [eax+20h]  ; this
.text$mn:0000337B                 call    ?setEnabled@ColourPicker@@QAEX_N@Z ; ColourPicker::setEnabled(bool)
.text$mn:00003380                 mov     [ebp+var_2B9], 1
.text$mn:00003387
.text$mn:00003387 loc_3387:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+1FEj
.text$mn:00003387                 movzx   ecx, [ebp+var_2B9]
.text$mn:0000338E                 push    ecx             ; bool
.text$mn:0000338F                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:00003395                 call    ?enableFg@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::enableFg(bool)
.text$mn:0000339A                 mov     [ebp+var_2B9], 0
.text$mn:000033A1                 mov     edx, [ebp+var_2C4]
.text$mn:000033A7                 mov     eax, [edx+0Ch]
.text$mn:000033AA                 shr     eax, 10h
.text$mn:000033AD                 and     eax, 0FFFFh
.text$mn:000033B2                 movzx   ecx, ax
.text$mn:000033B5                 shr     ecx, 8
.text$mn:000033B8                 and     ecx, 0FFh
.text$mn:000033BE                 movzx   edx, cl
.text$mn:000033C1                 cmp     edx, 0FFh
.text$mn:000033C7                 jz      short loc_341C
.text$mn:000033C9                 mov     eax, [ebp+var_2C4]
.text$mn:000033CF                 mov     ecx, [eax+0Ch]
.text$mn:000033D2                 push    ecx             ; unsigned __int32
.text$mn:000033D3                 mov     edx, [ebp+var_2C0]
.text$mn:000033D9                 mov     ecx, [edx+24h]  ; this
.text$mn:000033DC                 call    ?setColour@ColourPicker@@QAEXK@Z ; ColourPicker::setColour(ulong)
.text$mn:000033E1                 mov     eax, [ebp+var_2C4]
.text$mn:000033E7                 mov     ecx, [eax+10h]
.text$mn:000033EA                 and     ecx, 2
.text$mn:000033ED                 jz      short loc_33F8
.text$mn:000033EF                 mov     [ebp+var_2C7], 1
.text$mn:000033F6                 jmp     short loc_33FF
.text$mn:000033F8 ; ---------------------------------------------------------------------------
.text$mn:000033F8
.text$mn:000033F8 loc_33F8:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+2B9j
.text$mn:000033F8                 mov     [ebp+var_2C7], 0
.text$mn:000033FF
.text$mn:000033FF loc_33FF:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+2C2j
.text$mn:000033FF                 movzx   edx, [ebp+var_2C7]
.text$mn:00003406                 push    edx             ; bool
.text$mn:00003407                 mov     eax, [ebp+var_2C0]
.text$mn:0000340D                 mov     ecx, [eax+24h]  ; this
.text$mn:00003410                 call    ?setEnabled@ColourPicker@@QAEX_N@Z ; ColourPicker::setEnabled(bool)
.text$mn:00003415                 mov     [ebp+var_2B9], 1
.text$mn:0000341C
.text$mn:0000341C loc_341C:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+293j
.text$mn:0000341C                 movzx   ecx, [ebp+var_2B9]
.text$mn:00003423                 push    ecx             ; bool
.text$mn:00003424                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:0000342A                 call    ?enableBg@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::enableBg(bool)
.text$mn:0000342F                 mov     [ebp+var_2B9], 0
.text$mn:00003436                 mov     edx, [ebp+var_2C4]
.text$mn:0000343C                 cmp     dword ptr [edx+14h], 0
.text$mn:00003440                 jz      short loc_3485
.text$mn:00003442                 mov     eax, [ebp+var_2C4]
.text$mn:00003448                 mov     ecx, [eax+14h]
.text$mn:0000344B                 push    ecx             ; lParam
.text$mn:0000344C                 push    1               ; wParam
.text$mn:0000344E                 push    14Ch            ; Msg
.text$mn:00003453                 mov     edx, [ebp+var_2C0]
.text$mn:00003459                 mov     eax, [edx+3Ch]
.text$mn:0000345C                 push    eax             ; hWnd
.text$mn:0000345D                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003463                 mov     [ebp+var_2D4], eax
.text$mn:00003469                 cmp     [ebp+var_2D4], 0FFFFFFFFh
.text$mn:00003470                 jnz     short loc_347C
.text$mn:00003472                 mov     [ebp+var_2D4], 0
.text$mn:0000347C
.text$mn:0000347C loc_347C:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+33Cj
.text$mn:0000347C                 mov     [ebp+var_2B9], 1
.text$mn:00003483                 jmp     short loc_348F
.text$mn:00003485 ; ---------------------------------------------------------------------------
.text$mn:00003485
.text$mn:00003485 loc_3485:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+30Cj
.text$mn:00003485                 mov     [ebp+var_2D4], 0
.text$mn:0000348F
.text$mn:0000348F loc_348F:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+34Fj
.text$mn:0000348F                 push    0               ; lParam
.text$mn:00003491                 mov     ecx, [ebp+var_2D4]
.text$mn:00003497                 push    ecx             ; wParam
.text$mn:00003498                 push    14Eh            ; Msg
.text$mn:0000349D                 mov     edx, [ebp+var_2C0]
.text$mn:000034A3                 mov     eax, [edx+3Ch]
.text$mn:000034A6                 push    eax             ; hWnd
.text$mn:000034A7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000034AD                 movzx   ecx, [ebp+var_2B9]
.text$mn:000034B4                 push    ecx             ; bool
.text$mn:000034B5                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:000034BB                 call    ?enableFontName@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::enableFontName(bool)
.text$mn:000034C0                 mov     [ebp+var_2B9], 0
.text$mn:000034C7                 mov     dx, $SG168562
.text$mn:000034CE                 mov     [ebp+var_1C], dx
.text$mn:000034D2                 xor     eax, eax
.text$mn:000034D4                 mov     [ebp+var_1A], eax
.text$mn:000034D7                 mov     [ebp+var_16], eax
.text$mn:000034DA                 mov     [ebp+var_2F0], 0
.text$mn:000034E4                 mov     ecx, [ebp+var_2C4]
.text$mn:000034EA                 cmp     dword ptr [ecx+1Ch], 0FFFFFFFFh
.text$mn:000034EE                 jz      short loc_3534
.text$mn:000034F0                 mov     edx, [ebp+var_2C4]
.text$mn:000034F6                 mov     eax, [edx+1Ch]
.text$mn:000034F9                 push    eax
.text$mn:000034FA                 push    offset $SG168565 ; "%d"
.text$mn:000034FF                 lea     ecx, [ebp+var_1C]
.text$mn:00003502                 push    ecx             ; LPWSTR
.text$mn:00003503                 call    dword ptr ds:__imp__wsprintfW
.text$mn:00003509                 add     esp, 0Ch
.text$mn:0000350C                 lea     edx, [ebp+var_1C]
.text$mn:0000350F                 push    edx             ; lParam
.text$mn:00003510                 push    1               ; wParam
.text$mn:00003512                 push    14Ch            ; Msg
.text$mn:00003517                 mov     eax, [ebp+var_2C0]
.text$mn:0000351D                 mov     ecx, [eax+40h]
.text$mn:00003520                 push    ecx             ; hWnd
.text$mn:00003521                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003527                 mov     [ebp+var_2F0], eax
.text$mn:0000352D                 mov     [ebp+var_2B9], 1
.text$mn:00003534
.text$mn:00003534 loc_3534:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+3BAj
.text$mn:00003534                 push    0               ; lParam
.text$mn:00003536                 mov     edx, [ebp+var_2F0]
.text$mn:0000353C                 push    edx             ; wParam
.text$mn:0000353D                 push    14Eh            ; Msg
.text$mn:00003542                 mov     eax, [ebp+var_2C0]
.text$mn:00003548                 mov     ecx, [eax+40h]
.text$mn:0000354B                 push    ecx             ; hWnd
.text$mn:0000354C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003552                 movzx   edx, [ebp+var_2B9]
.text$mn:00003559                 push    edx             ; bool
.text$mn:0000355A                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:00003560                 call    ?enableFontSize@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::enableFontSize(bool)
.text$mn:00003565                 mov     [ebp+var_2B9], 0
.text$mn:0000356C                 mov     eax, [ebp+var_2C4]
.text$mn:00003572                 cmp     dword ptr [eax+18h], 0FFFFFFFFh
.text$mn:00003576                 jz      loc_366F
.text$mn:0000357C                 mov     ecx, [ebp+var_2C4]
.text$mn:00003582                 mov     edx, [ecx+18h]
.text$mn:00003585                 and     edx, 1
.text$mn:00003588                 jz      short loc_3596
.text$mn:0000358A                 mov     [ebp+var_2F8], 1
.text$mn:00003594                 jmp     short loc_35A0
.text$mn:00003596 ; ---------------------------------------------------------------------------
.text$mn:00003596
.text$mn:00003596 loc_3596:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+454j
.text$mn:00003596                 mov     [ebp+var_2F8], 0
.text$mn:000035A0
.text$mn:000035A0 loc_35A0:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+460j
.text$mn:000035A0                 mov     eax, [ebp+var_2F8]
.text$mn:000035A6                 mov     [ebp+var_314], eax
.text$mn:000035AC                 mov     ecx, [ebp+var_2C4]
.text$mn:000035B2                 mov     edx, [ecx+18h]
.text$mn:000035B5                 and     edx, 2
.text$mn:000035B8                 jz      short loc_35C6
.text$mn:000035BA                 mov     [ebp+var_300], 1
.text$mn:000035C4                 jmp     short loc_35D0
.text$mn:000035C6 ; ---------------------------------------------------------------------------
.text$mn:000035C6
.text$mn:000035C6 loc_35C6:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+484j
.text$mn:000035C6                 mov     [ebp+var_300], 0
.text$mn:000035D0
.text$mn:000035D0 loc_35D0:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+490j
.text$mn:000035D0                 mov     eax, [ebp+var_300]
.text$mn:000035D6                 mov     [ebp+var_304], eax
.text$mn:000035DC                 mov     ecx, [ebp+var_2C4]
.text$mn:000035E2                 mov     edx, [ecx+18h]
.text$mn:000035E5                 and     edx, 4
.text$mn:000035E8                 jz      short loc_35F6
.text$mn:000035EA                 mov     [ebp+var_2DC], 1
.text$mn:000035F4                 jmp     short loc_3600
.text$mn:000035F6 ; ---------------------------------------------------------------------------
.text$mn:000035F6
.text$mn:000035F6 loc_35F6:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+4B4j
.text$mn:000035F6                 mov     [ebp+var_2DC], 0
.text$mn:00003600
.text$mn:00003600 loc_3600:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+4C0j
.text$mn:00003600                 mov     eax, [ebp+var_2DC]
.text$mn:00003606                 mov     [ebp+var_310], eax
.text$mn:0000360C                 push    0               ; lParam
.text$mn:0000360E                 mov     ecx, [ebp+var_314]
.text$mn:00003614                 push    ecx             ; wParam
.text$mn:00003615                 push    0F1h ; '±'      ; Msg
.text$mn:0000361A                 mov     edx, [ebp+var_2C0]
.text$mn:00003620                 mov     eax, [edx+30h]
.text$mn:00003623                 push    eax             ; hWnd
.text$mn:00003624                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000362A                 push    0               ; lParam
.text$mn:0000362C                 mov     ecx, [ebp+var_304]
.text$mn:00003632                 push    ecx             ; wParam
.text$mn:00003633                 push    0F1h ; '±'      ; Msg
.text$mn:00003638                 mov     edx, [ebp+var_2C0]
.text$mn:0000363E                 mov     eax, [edx+34h]
.text$mn:00003641                 push    eax             ; hWnd
.text$mn:00003642                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003648                 push    0               ; lParam
.text$mn:0000364A                 mov     ecx, [ebp+var_310]
.text$mn:00003650                 push    ecx             ; wParam
.text$mn:00003651                 push    0F1h ; '±'      ; Msg
.text$mn:00003656                 mov     edx, [ebp+var_2C0]
.text$mn:0000365C                 mov     eax, [edx+38h]
.text$mn:0000365F                 push    eax             ; hWnd
.text$mn:00003660                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003666                 mov     [ebp+var_2B9], 1
.text$mn:0000366D                 jmp     short loc_36BA
.text$mn:0000366F ; ---------------------------------------------------------------------------
.text$mn:0000366F
.text$mn:0000366F loc_366F:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+442j
.text$mn:0000366F                 push    0               ; lParam
.text$mn:00003671                 push    0               ; wParam
.text$mn:00003673                 push    0F1h ; '±'      ; Msg
.text$mn:00003678                 mov     ecx, [ebp+var_2C0]
.text$mn:0000367E                 mov     edx, [ecx+30h]
.text$mn:00003681                 push    edx             ; hWnd
.text$mn:00003682                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003688                 push    0               ; lParam
.text$mn:0000368A                 push    0               ; wParam
.text$mn:0000368C                 push    0F1h ; '±'      ; Msg
.text$mn:00003691                 mov     eax, [ebp+var_2C0]
.text$mn:00003697                 mov     ecx, [eax+34h]
.text$mn:0000369A                 push    ecx             ; hWnd
.text$mn:0000369B                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000036A1                 push    0               ; lParam
.text$mn:000036A3                 push    0               ; wParam
.text$mn:000036A5                 push    0F1h ; '±'      ; Msg
.text$mn:000036AA                 mov     edx, [ebp+var_2C0]
.text$mn:000036B0                 mov     eax, [edx+38h]
.text$mn:000036B3                 push    eax             ; hWnd
.text$mn:000036B4                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000036BA
.text$mn:000036BA loc_36BA:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+539j
.text$mn:000036BA                 movzx   ecx, [ebp+var_2B9]
.text$mn:000036C1                 push    ecx             ; bool
.text$mn:000036C2                 mov     ecx, [ebp+var_2C0] ; this
.text$mn:000036C8                 call    ?enableFontStyle@WordStyleDlg@@AAEX_N@Z ; WordStyleDlg::enableFontStyle(bool)
.text$mn:000036CD                 mov     edx, [ebp+var_2C4]
.text$mn:000036D3                 cmp     dword ptr [edx+24h], 0FFFFFFFFh
.text$mn:000036D7                 jz      short loc_36E5
.text$mn:000036D9                 mov     [ebp+var_2E8], 1
.text$mn:000036E3                 jmp     short loc_36EF
.text$mn:000036E5 ; ---------------------------------------------------------------------------
.text$mn:000036E5
.text$mn:000036E5 loc_36E5:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+5A3j
.text$mn:000036E5                 mov     [ebp+var_2E8], 0
.text$mn:000036EF
.text$mn:000036EF loc_36EF:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+5AFj
.text$mn:000036EF                 mov     al, byte ptr [ebp+var_2E8]
.text$mn:000036F5                 mov     [ebp+var_2C5], al
.text$mn:000036FB                 movzx   ecx, [ebp+var_2C5]
.text$mn:00003702                 test    ecx, ecx
.text$mn:00003704                 jz      loc_385A
.text$mn:0000370A                 mov     edx, [ebp+var_2C0]
.text$mn:00003710                 mov     eax, [edx+28h]
.text$mn:00003713                 sub     eax, 1
.text$mn:00003716                 push    eax             ; int
.text$mn:00003717                 mov     ecx, [ebp+var_2C0]
.text$mn:0000371D                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00003720                 call    ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z ; LexerStylerArray::getLexerFromIndex(int)
.text$mn:00003725                 mov     [ebp+var_2F4], eax
.text$mn:0000372B                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00003730                 mov     [ebp+var_318], eax
.text$mn:00003736                 mov     ecx, [ebp+var_2F4] ; this
.text$mn:0000373C                 call    ?getLexerName@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerName(void)
.text$mn:00003741                 push    eax
.text$mn:00003742                 call    ?getLangIDFromStr@NppParameters@@SA?AW4LangType@@PB_W@Z ; NppParameters::getLangIDFromStr(wchar_t const *)
.text$mn:00003747                 add     esp, 4
.text$mn:0000374A                 mov     [ebp+var_2EC], eax
.text$mn:00003750                 cmp     [ebp+var_2EC], 0
.text$mn:00003757                 jnz     short loc_37AD
.text$mn:00003759                 mov     ecx, [ebp+var_2F4] ; this
.text$mn:0000375F                 call    ?getLexerName@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerName(void)
.text$mn:00003764                 push    eax             ; Str
.text$mn:00003765                 lea     ecx, [ebp+var_2B8]
.text$mn:0000376B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003770                 mov     [ebp+var_4], 0
.text$mn:00003777                 push    offset $SG168611 ; " is not defined in NppParameters::getLa"...
.text$mn:0000377C                 lea     ecx, [ebp+var_2B8]
.text$mn:00003782                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00003787                 lea     ecx, [ebp+var_2B8]
.text$mn:0000378D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003792                 push    eax             ; wchar_t *
.text$mn:00003793                 call    ?printStr@@YAXPB_W@Z ; printStr(wchar_t const *)
.text$mn:00003798                 add     esp, 4
.text$mn:0000379B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000037A2                 lea     ecx, [ebp+var_2B8]
.text$mn:000037A8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000037AD
.text$mn:000037AD loc_37AD:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+623j
.text$mn:000037AD                 mov     ecx, [ebp+var_2C4]
.text$mn:000037B3                 mov     edx, [ecx+24h]
.text$mn:000037B6                 push    edx
.text$mn:000037B7                 mov     eax, [ebp+var_2EC]
.text$mn:000037BD                 push    eax
.text$mn:000037BE                 mov     ecx, [ebp+var_318]
.text$mn:000037C4                 call    ?getWordList@NppParameters@@QBEPB_WW4LangType@@H@Z ; NppParameters::getWordList(LangType,int)
.text$mn:000037C9                 mov     [ebp+var_2D8], eax
.text$mn:000037CF                 cmp     [ebp+var_2D8], 0
.text$mn:000037D6                 jnz     short loc_37E2
.text$mn:000037D8                 mov     [ebp+var_2D8], offset $SG168614
.text$mn:000037E2
.text$mn:000037E2 loc_37E2:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+6A2j
.text$mn:000037E2                 mov     ecx, [ebp+var_2D8]
.text$mn:000037E8                 push    ecx             ; lParam
.text$mn:000037E9                 push    0               ; wParam
.text$mn:000037EB                 push    0Ch             ; Msg
.text$mn:000037ED                 push    8ACh            ; nIDDlgItem
.text$mn:000037F2                 mov     edx, [ebp+var_2C0]
.text$mn:000037F8                 mov     eax, [edx+0Ch]
.text$mn:000037FB                 push    eax             ; hDlg
.text$mn:000037FC                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003802                 mov     ecx, [ebp+var_2C4]
.text$mn:00003808                 cmp     dword ptr [ecx+28h], 0
.text$mn:0000380C                 jz      short loc_3824
.text$mn:0000380E                 mov     edx, [ebp+var_2C4]
.text$mn:00003814                 mov     ecx, [edx+28h]
.text$mn:00003817                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000381C                 mov     [ebp+var_2FC], eax
.text$mn:00003822                 jmp     short loc_382E
.text$mn:00003824 ; ---------------------------------------------------------------------------
.text$mn:00003824
.text$mn:00003824 loc_3824:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+6D8j
.text$mn:00003824                 mov     [ebp+var_2FC], offset $SG168617
.text$mn:0000382E
.text$mn:0000382E loc_382E:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+6EEj
.text$mn:0000382E                 mov     eax, [ebp+var_2FC]
.text$mn:00003834                 mov     [ebp+var_30C], eax
.text$mn:0000383A                 mov     ecx, [ebp+var_30C]
.text$mn:00003840                 push    ecx             ; lParam
.text$mn:00003841                 push    0               ; wParam
.text$mn:00003843                 push    0Ch             ; Msg
.text$mn:00003845                 push    8AEh            ; nIDDlgItem
.text$mn:0000384A                 mov     edx, [ebp+var_2C0]
.text$mn:00003850                 mov     eax, [edx+0Ch]
.text$mn:00003853                 push    eax             ; hDlg
.text$mn:00003854                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000385A
.text$mn:0000385A loc_385A:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+5D0j
.text$mn:0000385A                 movzx   ecx, [ebp+var_2C5]
.text$mn:00003861                 test    ecx, ecx
.text$mn:00003863                 jz      short loc_3871
.text$mn:00003865                 mov     [ebp+var_2E0], 5
.text$mn:0000386F                 jmp     short loc_387B
.text$mn:00003871 ; ---------------------------------------------------------------------------
.text$mn:00003871
.text$mn:00003871 loc_3871:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+72Fj
.text$mn:00003871                 mov     [ebp+var_2E0], 0
.text$mn:0000387B
.text$mn:0000387B loc_387B:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+73Bj
.text$mn:0000387B                 mov     edx, [ebp+var_2E0]
.text$mn:00003881                 mov     [ebp+nCmdShow], edx
.text$mn:00003887                 mov     eax, [ebp+nCmdShow]
.text$mn:0000388D                 push    eax             ; nCmdShow
.text$mn:0000388E                 push    8ACh            ; nIDDlgItem
.text$mn:00003893                 mov     ecx, [ebp+var_2C0]
.text$mn:00003899                 mov     edx, [ecx+0Ch]
.text$mn:0000389C                 push    edx             ; hDlg
.text$mn:0000389D                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000038A3                 push    eax             ; hWnd
.text$mn:000038A4                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000038AA                 mov     eax, [ebp+nCmdShow]
.text$mn:000038B0                 push    eax             ; nCmdShow
.text$mn:000038B1                 push    8AEh            ; nIDDlgItem
.text$mn:000038B6                 mov     ecx, [ebp+var_2C0]
.text$mn:000038BC                 mov     edx, [ecx+0Ch]
.text$mn:000038BF                 push    edx             ; hDlg
.text$mn:000038C0                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000038C6                 push    eax             ; hWnd
.text$mn:000038C7                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000038CD                 mov     eax, [ebp+nCmdShow]
.text$mn:000038D3                 push    eax             ; nCmdShow
.text$mn:000038D4                 push    8ABh            ; nIDDlgItem
.text$mn:000038D9                 mov     ecx, [ebp+var_2C0]
.text$mn:000038DF                 mov     edx, [ecx+0Ch]
.text$mn:000038E2                 push    edx             ; hDlg
.text$mn:000038E3                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000038E9                 push    eax             ; hWnd
.text$mn:000038EA                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000038F0                 mov     eax, [ebp+nCmdShow]
.text$mn:000038F6                 push    eax             ; nCmdShow
.text$mn:000038F7                 push    8ADh            ; nIDDlgItem
.text$mn:000038FC                 mov     ecx, [ebp+var_2C0]
.text$mn:00003902                 mov     edx, [ecx+0Ch]
.text$mn:00003905                 push    edx             ; hDlg
.text$mn:00003906                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000390C                 push    eax             ; hWnd
.text$mn:0000390D                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003913                 mov     eax, [ebp+nCmdShow]
.text$mn:00003919                 push    eax             ; nCmdShow
.text$mn:0000391A                 push    8AFh            ; nIDDlgItem
.text$mn:0000391F                 mov     ecx, [ebp+var_2C0]
.text$mn:00003925                 mov     edx, [ecx+0Ch]
.text$mn:00003928                 push    edx             ; hDlg
.text$mn:00003929                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000392F                 push    eax             ; hWnd
.text$mn:00003930                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003936                 mov     eax, [ebp+var_2C0]
.text$mn:0000393C                 mov     edx, [eax]
.text$mn:0000393E                 mov     ecx, [ebp+var_2C0]
.text$mn:00003944                 mov     eax, [edx+40h]
.text$mn:00003947                 call    eax
.text$mn:00003949
.text$mn:00003949 loc_3949:                               ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+E9j
.text$mn:00003949                                         ; WordStyleDlg::setVisualFromStyleList(void)+143j
.text$mn:00003949                 mov     ecx, [ebp+var_C]
.text$mn:0000394C                 mov     large fs:0, ecx
.text$mn:00003953                 pop     ecx
.text$mn:00003954                 mov     ecx, [ebp+var_10]
.text$mn:00003957                 xor     ecx, ebp
.text$mn:00003959                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000395E                 mov     esp, ebp
.text$mn:00003960                 pop     ebp
.text$mn:00003961                 retn
.text$mn:00003961 ?setVisualFromStyleList@WordStyleDlg@@AAEXXZ endp
.text$mn:00003961
.text$mn:00003961 ; ---------------------------------------------------------------------------
.text$mn:00003962                 align 4
.text$mn:00003964
.text$mn:00003964 ; =============== S U B R O U T I N E =======================================
.text$mn:00003964
.text$mn:00003964 ; Attributes: bp-based frame
.text$mn:00003964
.text$mn:00003964 ; void __thiscall WordStyleDlg::updateGlobalOverrideCtrls(WordStyleDlg *__hidden this)
.text$mn:00003964                 public ?updateGlobalOverrideCtrls@WordStyleDlg@@AAEXXZ
.text$mn:00003964 ?updateGlobalOverrideCtrls@WordStyleDlg@@AAEXXZ proc near
.text$mn:00003964                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5D4p
.text$mn:00003964                                         ; WordStyleDlg::showGlobalOverrideCtrls(bool)+14p
.text$mn:00003964
.text$mn:00003964 var_8           = dword ptr -8
.text$mn:00003964 var_4           = dword ptr -4
.text$mn:00003964
.text$mn:00003964                 push    ebp
.text$mn:00003965                 mov     ebp, esp
.text$mn:00003967                 sub     esp, 8
.text$mn:0000396A                 mov     [ebp+var_8], ecx
.text$mn:0000396D                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00003972                 mov     ecx, eax        ; this
.text$mn:00003974                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00003979                 mov     [ebp+var_4], eax
.text$mn:0000397C                 push    0               ; lParam
.text$mn:0000397E                 mov     eax, [ebp+var_4]
.text$mn:00003981                 movzx   ecx, byte ptr [eax+1E4h]
.text$mn:00003988                 push    ecx             ; wParam
.text$mn:00003989                 push    0F1h ; '±'      ; Msg
.text$mn:0000398E                 push    8B2h            ; nIDDlgItem
.text$mn:00003993                 mov     edx, [ebp+var_8]
.text$mn:00003996                 mov     eax, [edx+0Ch]
.text$mn:00003999                 push    eax             ; hDlg
.text$mn:0000399A                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000039A0                 push    0               ; lParam
.text$mn:000039A2                 mov     ecx, [ebp+var_4]
.text$mn:000039A5                 movzx   edx, byte ptr [ecx+1E5h]
.text$mn:000039AC                 push    edx             ; wParam
.text$mn:000039AD                 push    0F1h ; '±'      ; Msg
.text$mn:000039B2                 push    8B3h            ; nIDDlgItem
.text$mn:000039B7                 mov     eax, [ebp+var_8]
.text$mn:000039BA                 mov     ecx, [eax+0Ch]
.text$mn:000039BD                 push    ecx             ; hDlg
.text$mn:000039BE                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000039C4                 push    0               ; lParam
.text$mn:000039C6                 mov     edx, [ebp+var_4]
.text$mn:000039C9                 movzx   eax, byte ptr [edx+1E6h]
.text$mn:000039D0                 push    eax             ; wParam
.text$mn:000039D1                 push    0F1h ; '±'      ; Msg
.text$mn:000039D6                 push    8B4h            ; nIDDlgItem
.text$mn:000039DB                 mov     ecx, [ebp+var_8]
.text$mn:000039DE                 mov     edx, [ecx+0Ch]
.text$mn:000039E1                 push    edx             ; hDlg
.text$mn:000039E2                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000039E8                 push    0               ; lParam
.text$mn:000039EA                 mov     eax, [ebp+var_4]
.text$mn:000039ED                 movzx   ecx, byte ptr [eax+1E7h]
.text$mn:000039F4                 push    ecx             ; wParam
.text$mn:000039F5                 push    0F1h ; '±'      ; Msg
.text$mn:000039FA                 push    8B5h            ; nIDDlgItem
.text$mn:000039FF                 mov     edx, [ebp+var_8]
.text$mn:00003A02                 mov     eax, [edx+0Ch]
.text$mn:00003A05                 push    eax             ; hDlg
.text$mn:00003A06                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003A0C                 push    0               ; lParam
.text$mn:00003A0E                 mov     ecx, [ebp+var_4]
.text$mn:00003A11                 movzx   edx, byte ptr [ecx+1E8h]
.text$mn:00003A18                 push    edx             ; wParam
.text$mn:00003A19                 push    0F1h ; '±'      ; Msg
.text$mn:00003A1E                 push    8B6h            ; nIDDlgItem
.text$mn:00003A23                 mov     eax, [ebp+var_8]
.text$mn:00003A26                 mov     ecx, [eax+0Ch]
.text$mn:00003A29                 push    ecx             ; hDlg
.text$mn:00003A2A                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003A30                 push    0               ; lParam
.text$mn:00003A32                 mov     edx, [ebp+var_4]
.text$mn:00003A35                 movzx   eax, byte ptr [edx+1E9h]
.text$mn:00003A3C                 push    eax             ; wParam
.text$mn:00003A3D                 push    0F1h ; '±'      ; Msg
.text$mn:00003A42                 push    8B7h            ; nIDDlgItem
.text$mn:00003A47                 mov     ecx, [ebp+var_8]
.text$mn:00003A4A                 mov     edx, [ecx+0Ch]
.text$mn:00003A4D                 push    edx             ; hDlg
.text$mn:00003A4E                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003A54                 push    0               ; lParam
.text$mn:00003A56                 mov     eax, [ebp+var_4]
.text$mn:00003A59                 movzx   ecx, byte ptr [eax+1EAh]
.text$mn:00003A60                 push    ecx             ; wParam
.text$mn:00003A61                 push    0F1h ; '±'      ; Msg
.text$mn:00003A66                 push    8B8h            ; nIDDlgItem
.text$mn:00003A6B                 mov     edx, [ebp+var_8]
.text$mn:00003A6E                 mov     eax, [edx+0Ch]
.text$mn:00003A71                 push    eax             ; hDlg
.text$mn:00003A72                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00003A78                 mov     esp, ebp
.text$mn:00003A7A                 pop     ebp
.text$mn:00003A7B                 retn
.text$mn:00003A7B ?updateGlobalOverrideCtrls@WordStyleDlg@@AAEXXZ endp
.text$mn:00003A7B
.text$mn:00003A7B _text$mn        ends
.text$mn:00003A7B
.text$x:00003A7C ; ===========================================================================
.text$x:00003A7C
.text$x:00003A7C ; Segment type: Pure code
.text$x:00003A7C ; Segment permissions: Read/Execute
.text$x:00003A7C _text$x         segment para public 'CODE' use32
.text$x:00003A7C                 assume cs:_text$x
.text$x:00003A7C                 ;org 3A7Ch
.text$x:00003A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A7C
.text$x:00003A7C ; =============== S U B R O U T I N E =======================================
.text$x:00003A7C
.text$x:00003A7C
.text$x:00003A7C __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$0 proc near
.text$x:00003A7C                                         ; DATA XREF: .xdata$x:000080FCo
.text$x:00003A7C                 mov     eax, [ebp-80h]
.text$x:00003A7F                 push    eax             ; void *
.text$x:00003A80                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003A85                 pop     ecx
.text$x:00003A86                 retn
.text$x:00003A86 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$0 endp
.text$x:00003A86
.text$x:00003A87
.text$x:00003A87 ; =============== S U B R O U T I N E =======================================
.text$x:00003A87
.text$x:00003A87
.text$x:00003A87 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$1 proc near
.text$x:00003A87                                         ; DATA XREF: .xdata$x:00008104o
.text$x:00003A87                 mov     eax, [ebp-0C0h]
.text$x:00003A8D                 push    eax             ; void *
.text$x:00003A8E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003A93                 pop     ecx
.text$x:00003A94                 retn
.text$x:00003A94 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$1 endp
.text$x:00003A94
.text$x:00003A95
.text$x:00003A95 ; =============== S U B R O U T I N E =======================================
.text$x:00003A95
.text$x:00003A95
.text$x:00003A95 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$2 proc near
.text$x:00003A95                                         ; DATA XREF: .xdata$x:0000810Co
.text$x:00003A95                 lea     ecx, [ebp-2Ch]
.text$x:00003A98                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003A98 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$2 endp
.text$x:00003A98
.text$x:00003A9D
.text$x:00003A9D ; =============== S U B R O U T I N E =======================================
.text$x:00003A9D
.text$x:00003A9D
.text$x:00003A9D __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$3 proc near
.text$x:00003A9D                                         ; DATA XREF: .xdata$x:00008114o
.text$x:00003A9D                 mov     ecx, [ebp-128h]
.text$x:00003AA3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003AA3 __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$3 endp
.text$x:00003AA3
.text$x:00003AA8
.text$x:00003AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00003AA8
.text$x:00003AA8
.text$x:00003AA8 __ehhandler$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z proc near
.text$x:00003AA8                                         ; DATA XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5o
.text$x:00003AA8
.text$x:00003AA8 arg_4           = dword ptr  8
.text$x:00003AA8
.text$x:00003AA8                 mov     edx, [esp+arg_4]
.text$x:00003AAC                 lea     eax, [edx+0Ch]
.text$x:00003AAF                 mov     ecx, [edx-124h]
.text$x:00003AB5                 xor     ecx, eax
.text$x:00003AB7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ABC                 mov     ecx, [edx-4]
.text$x:00003ABF                 xor     ecx, eax
.text$x:00003AC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AC6                 mov     eax, offset __ehfuncinfo$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z
.text$x:00003ACB                 jmp     ___CxxFrameHandler3
.text$x:00003ACB __ehhandler$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z endp
.text$x:00003ACB
.text$x:00003AD0
.text$x:00003AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00003AD0
.text$x:00003AD0
.text$x:00003AD0 __unwindfunclet$?switchToTheme@WordStyleDlg@@AAEXXZ$0 proc near
.text$x:00003AD0                                         ; DATA XREF: .xdata$x:000080F4o
.text$x:00003AD0                 lea     ecx, [ebp-234h]
.text$x:00003AD6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003AD6 __unwindfunclet$?switchToTheme@WordStyleDlg@@AAEXXZ$0 endp
.text$x:00003AD6
.text$x:00003ADB
.text$x:00003ADB ; =============== S U B R O U T I N E =======================================
.text$x:00003ADB
.text$x:00003ADB
.text$x:00003ADB __ehhandler$?switchToTheme@WordStyleDlg@@AAEXXZ proc near
.text$x:00003ADB                                         ; DATA XREF: WordStyleDlg::switchToTheme(void)+5o
.text$x:00003ADB
.text$x:00003ADB arg_4           = dword ptr  8
.text$x:00003ADB
.text$x:00003ADB                 mov     edx, [esp+arg_4]
.text$x:00003ADF                 lea     eax, [edx+0Ch]
.text$x:00003AE2                 mov     ecx, [edx-244h]
.text$x:00003AE8                 xor     ecx, eax
.text$x:00003AEA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AEF                 mov     ecx, [edx-4]
.text$x:00003AF2                 xor     ecx, eax
.text$x:00003AF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AF9                 mov     eax, offset __ehfuncinfo$?switchToTheme@WordStyleDlg@@AAEXXZ
.text$x:00003AFE                 jmp     ___CxxFrameHandler3
.text$x:00003AFE __ehhandler$?switchToTheme@WordStyleDlg@@AAEXXZ endp
.text$x:00003AFE
.text$x:00003B03
.text$x:00003B03 ; =============== S U B R O U T I N E =======================================
.text$x:00003B03
.text$x:00003B03
.text$x:00003B03 __unwindfunclet$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:00003B03                                         ; DATA XREF: .xdata$x:000080ECo
.text$x:00003B03                 lea     ecx, [ebp+8]
.text$x:00003B06                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B06 __unwindfunclet$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:00003B06
.text$x:00003B0B
.text$x:00003B0B ; =============== S U B R O U T I N E =======================================
.text$x:00003B0B
.text$x:00003B0B
.text$x:00003B0B __ehhandler$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:00003B0B                                         ; DATA XREF: WordStyleDlg::updateThemeName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003B0B
.text$x:00003B0B arg_4           = dword ptr  8
.text$x:00003B0B
.text$x:00003B0B                 mov     edx, [esp+arg_4]
.text$x:00003B0F                 lea     eax, [edx+0Ch]
.text$x:00003B12                 mov     ecx, [edx-10h]
.text$x:00003B15                 xor     ecx, eax
.text$x:00003B17                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B1C                 mov     eax, offset __ehfuncinfo$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:00003B21                 jmp     ___CxxFrameHandler3
.text$x:00003B21 __ehhandler$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:00003B21
.text$x:00003B26
.text$x:00003B26 ; =============== S U B R O U T I N E =======================================
.text$x:00003B26
.text$x:00003B26
.text$x:00003B26 __unwindfunclet$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ$0 proc near
.text$x:00003B26                                         ; DATA XREF: .xdata$x:000080E4o
.text$x:00003B26                 lea     ecx, [ebp-2B8h]
.text$x:00003B2C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B2C __unwindfunclet$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ$0 endp
.text$x:00003B2C
.text$x:00003B31
.text$x:00003B31 ; =============== S U B R O U T I N E =======================================
.text$x:00003B31
.text$x:00003B31
.text$x:00003B31 __ehhandler$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ proc near
.text$x:00003B31                                         ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+5o
.text$x:00003B31
.text$x:00003B31 arg_4           = dword ptr  8
.text$x:00003B31
.text$x:00003B31                 mov     edx, [esp+arg_4]
.text$x:00003B35                 lea     eax, [edx+0Ch]
.text$x:00003B38                 mov     ecx, [edx-310h]
.text$x:00003B3E                 xor     ecx, eax
.text$x:00003B40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B45                 mov     ecx, [edx-4]
.text$x:00003B48                 xor     ecx, eax
.text$x:00003B4A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B4F                 mov     eax, offset __ehfuncinfo$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ
.text$x:00003B54                 jmp     ___CxxFrameHandler3
.text$x:00003B54 __ehhandler$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ endp
.text$x:00003B54
.text$x:00003B54 ; ---------------------------------------------------------------------------
.text$x:00003B59                 align 4
.text$x:00003B59 _text$x         ends
.text$x:00003B59
.text$mn:00003B5C ; ===========================================================================
.text$mn:00003B5C
.text$mn:00003B5C ; Segment type: Pure code
.text$mn:00003B5C ; Segment permissions: Read/Execute
.text$mn:00003B5C _text$mn        segment para public 'CODE' use32
.text$mn:00003B5C                 assume cs:_text$mn
.text$mn:00003B5C                 ;org 3B5Ch
.text$mn:00003B5C ; COMDAT (pick any)
.text$mn:00003B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B5C
.text$mn:00003B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B5C
.text$mn:00003B5C ; Attributes: bp-based frame
.text$mn:00003B5C
.text$mn:00003B5C ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00003B5C                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00003B5C ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00003B5C                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:00003B5C
.text$mn:00003B5C var_2           = byte ptr -2
.text$mn:00003B5C var_1           = byte ptr -1
.text$mn:00003B5C arg_0           = dword ptr  8
.text$mn:00003B5C arg_4           = dword ptr  0Ch
.text$mn:00003B5C
.text$mn:00003B5C                 push    ebp
.text$mn:00003B5D                 mov     ebp, esp
.text$mn:00003B5F                 push    ecx
.text$mn:00003B60                 mov     eax, [ebp+arg_4]
.text$mn:00003B63                 push    eax
.text$mn:00003B64                 lea     ecx, [ebp+var_1]
.text$mn:00003B67                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003B6C                 push    eax
.text$mn:00003B6D                 mov     ecx, [ebp+arg_0]
.text$mn:00003B70                 push    ecx
.text$mn:00003B71                 lea     ecx, [ebp+var_2]
.text$mn:00003B74                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003B79                 push    eax
.text$mn:00003B7A                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:00003B7F                 add     esp, 8
.text$mn:00003B82                 mov     esp, ebp
.text$mn:00003B84                 pop     ebp
.text$mn:00003B85                 retn
.text$mn:00003B85 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00003B85
.text$mn:00003B85 ; ---------------------------------------------------------------------------
.text$mn:00003B86                 align 4
.text$mn:00003B86 _text$mn        ends
.text$mn:00003B86
.text$mn:00003B88 ; ===========================================================================
.text$mn:00003B88
.text$mn:00003B88 ; Segment type: Pure code
.text$mn:00003B88 ; Segment permissions: Read/Execute
.text$mn:00003B88 _text$mn        segment para public 'CODE' use32
.text$mn:00003B88                 assume cs:_text$mn
.text$mn:00003B88                 ;org 3B88h
.text$mn:00003B88 ; COMDAT (pick any)
.text$mn:00003B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B88
.text$mn:00003B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B88
.text$mn:00003B88 ; Attributes: bp-based frame
.text$mn:00003B88
.text$mn:00003B88 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00003B88                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00003B88 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00003B88                                         ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *)+3Ep
.text$mn:00003B88
.text$mn:00003B88 var_4           = dword ptr -4
.text$mn:00003B88 arg_0           = dword ptr  8
.text$mn:00003B88 Str             = dword ptr  0Ch
.text$mn:00003B88
.text$mn:00003B88                 push    ebp
.text$mn:00003B89                 mov     ebp, esp
.text$mn:00003B8B                 push    ecx
.text$mn:00003B8C                 mov     eax, [ebp+Str]
.text$mn:00003B8F                 push    eax             ; Str
.text$mn:00003B90                 mov     ecx, [ebp+arg_0]
.text$mn:00003B93                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00003B98                 test    eax, eax
.text$mn:00003B9A                 jnz     short loc_3BA5
.text$mn:00003B9C                 mov     [ebp+var_4], 1
.text$mn:00003BA3                 jmp     short loc_3BAC
.text$mn:00003BA5 ; ---------------------------------------------------------------------------
.text$mn:00003BA5
.text$mn:00003BA5 loc_3BA5:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00003BA5                 mov     [ebp+var_4], 0
.text$mn:00003BAC
.text$mn:00003BAC loc_3BAC:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:00003BAC                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003BAF                 mov     esp, ebp
.text$mn:00003BB1                 pop     ebp
.text$mn:00003BB2                 retn
.text$mn:00003BB2 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00003BB2
.text$mn:00003BB2 ; ---------------------------------------------------------------------------
.text$mn:00003BB3                 align 4
.text$mn:00003BB3 _text$mn        ends
.text$mn:00003BB3
.text$mn:00003BB4 ; ===========================================================================
.text$mn:00003BB4
.text$mn:00003BB4 ; Segment type: Pure code
.text$mn:00003BB4 ; Segment permissions: Read/Execute
.text$mn:00003BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003BB4                 assume cs:_text$mn
.text$mn:00003BB4                 ;org 3BB4h
.text$mn:00003BB4 ; COMDAT (pick any)
.text$mn:00003BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BB4
.text$mn:00003BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BB4
.text$mn:00003BB4 ; Attributes: bp-based frame
.text$mn:00003BB4
.text$mn:00003BB4 ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00003BB4                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00003BB4 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00003BB4                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00003BB4                 push    ebp
.text$mn:00003BB5                 mov     ebp, esp
.text$mn:00003BB7                 mov     al, 1
.text$mn:00003BB9                 pop     ebp
.text$mn:00003BBA                 retn
.text$mn:00003BBA ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:00003BBA
.text$mn:00003BBA ; ---------------------------------------------------------------------------
.text$mn:00003BBB                 align 4
.text$mn:00003BBB _text$mn        ends
.text$mn:00003BBB
.text$mn:00003BBC ; ===========================================================================
.text$mn:00003BBC
.text$mn:00003BBC ; Segment type: Pure code
.text$mn:00003BBC ; Segment permissions: Read/Execute
.text$mn:00003BBC _text$mn        segment para public 'CODE' use32
.text$mn:00003BBC                 assume cs:_text$mn
.text$mn:00003BBC                 ;org 3BBCh
.text$mn:00003BBC ; COMDAT (pick any)
.text$mn:00003BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BBC
.text$mn:00003BBC ; =============== S U B R O U T I N E =======================================
.text$mn:00003BBC
.text$mn:00003BBC ; Attributes: bp-based frame
.text$mn:00003BBC
.text$mn:00003BBC ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00003BBC                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00003BBC ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00003BBC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:00003BBC
.text$mn:00003BBC var_4           = dword ptr -4
.text$mn:00003BBC arg_0           = dword ptr  8
.text$mn:00003BBC arg_4           = dword ptr  0Ch
.text$mn:00003BBC
.text$mn:00003BBC                 push    ebp
.text$mn:00003BBD                 mov     ebp, esp
.text$mn:00003BBF                 push    ecx
.text$mn:00003BC0                 mov     eax, [ebp+arg_4]
.text$mn:00003BC3                 push    eax
.text$mn:00003BC4                 mov     ecx, [ebp+arg_0]
.text$mn:00003BC7                 push    ecx
.text$mn:00003BC8                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00003BCD                 add     esp, 8
.text$mn:00003BD0                 movzx   edx, al
.text$mn:00003BD3                 test    edx, edx
.text$mn:00003BD5                 jnz     short loc_3BE0
.text$mn:00003BD7                 mov     [ebp+var_4], 1
.text$mn:00003BDE                 jmp     short loc_3BE7
.text$mn:00003BE0 ; ---------------------------------------------------------------------------
.text$mn:00003BE0
.text$mn:00003BE0 loc_3BE0:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:00003BE0                 mov     [ebp+var_4], 0
.text$mn:00003BE7
.text$mn:00003BE7 loc_3BE7:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00003BE7                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003BEA                 mov     esp, ebp
.text$mn:00003BEC                 pop     ebp
.text$mn:00003BED                 retn
.text$mn:00003BED ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00003BED
.text$mn:00003BED ; ---------------------------------------------------------------------------
.text$mn:00003BEE                 align 10h
.text$mn:00003BEE _text$mn        ends
.text$mn:00003BEE
.text$mn:00003BF0 ; ===========================================================================
.text$mn:00003BF0
.text$mn:00003BF0 ; Segment type: Pure code
.text$mn:00003BF0 ; Segment permissions: Read/Execute
.text$mn:00003BF0 _text$mn        segment para public 'CODE' use32
.text$mn:00003BF0                 assume cs:_text$mn
.text$mn:00003BF0                 ;org 3BF0h
.text$mn:00003BF0 ; COMDAT (pick any)
.text$mn:00003BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003BF0
.text$mn:00003BF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003BF0
.text$mn:00003BF0 ; Attributes: bp-based frame
.text$mn:00003BF0
.text$mn:00003BF0 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00003BF0                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00003BF0 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00003BF0                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00003BF0
.text$mn:00003BF0 var_4           = dword ptr -4
.text$mn:00003BF0 arg_0           = dword ptr  8
.text$mn:00003BF0
.text$mn:00003BF0                 push    ebp
.text$mn:00003BF1                 mov     ebp, esp
.text$mn:00003BF3                 push    ecx
.text$mn:00003BF4                 mov     [ebp+var_4], 0
.text$mn:00003BFB                 cmp     [ebp+arg_0], 0
.text$mn:00003BFF                 jnz     short loc_3C03
.text$mn:00003C01                 jmp     short loc_3C23
.text$mn:00003C03 ; ---------------------------------------------------------------------------
.text$mn:00003C03
.text$mn:00003C03 loc_3C03:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:00003C03                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00003C07                 ja      short loc_3C1E
.text$mn:00003C09                 mov     eax, [ebp+arg_0]
.text$mn:00003C0C                 push    eax             ; unsigned int
.text$mn:00003C0D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003C12                 add     esp, 4
.text$mn:00003C15                 mov     [ebp+var_4], eax
.text$mn:00003C18                 cmp     [ebp+var_4], 0
.text$mn:00003C1C                 jnz     short loc_3C23
.text$mn:00003C1E
.text$mn:00003C1E loc_3C1E:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00003C1E                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003C23
.text$mn:00003C23 loc_3C23:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:00003C23                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:00003C23                 mov     eax, [ebp+var_4]
.text$mn:00003C26                 mov     esp, ebp
.text$mn:00003C28                 pop     ebp
.text$mn:00003C29                 retn
.text$mn:00003C29 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00003C29
.text$mn:00003C29 ; ---------------------------------------------------------------------------
.text$mn:00003C2A                 align 4
.text$mn:00003C2A _text$mn        ends
.text$mn:00003C2A
.text$mn:00003C2C ; ===========================================================================
.text$mn:00003C2C
.text$mn:00003C2C ; Segment type: Pure code
.text$mn:00003C2C ; Segment permissions: Read/Execute
.text$mn:00003C2C _text$mn        segment para public 'CODE' use32
.text$mn:00003C2C                 assume cs:_text$mn
.text$mn:00003C2C                 ;org 3C2Ch
.text$mn:00003C2C ; COMDAT (pick any)
.text$mn:00003C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C2C
.text$mn:00003C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00003C2C
.text$mn:00003C2C ; Attributes: bp-based frame
.text$mn:00003C2C
.text$mn:00003C2C ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00003C2C                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00003C2C ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00003C2C                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00003C2C
.text$mn:00003C2C var_4           = dword ptr -4
.text$mn:00003C2C arg_0           = dword ptr  8
.text$mn:00003C2C
.text$mn:00003C2C                 push    ebp
.text$mn:00003C2D                 mov     ebp, esp
.text$mn:00003C2F                 push    ecx
.text$mn:00003C30                 mov     [ebp+var_4], 0
.text$mn:00003C37                 cmp     [ebp+arg_0], 0
.text$mn:00003C3B                 jnz     short loc_3C3F
.text$mn:00003C3D                 jmp     short loc_3C65
.text$mn:00003C3F ; ---------------------------------------------------------------------------
.text$mn:00003C3F
.text$mn:00003C3F loc_3C3F:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00003C3F                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00003C46                 ja      short loc_3C60
.text$mn:00003C48                 mov     eax, [ebp+arg_0]
.text$mn:00003C4B                 shl     eax, 3
.text$mn:00003C4E                 push    eax             ; unsigned int
.text$mn:00003C4F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003C54                 add     esp, 4
.text$mn:00003C57                 mov     [ebp+var_4], eax
.text$mn:00003C5A                 cmp     [ebp+var_4], 0
.text$mn:00003C5E                 jnz     short loc_3C65
.text$mn:00003C60
.text$mn:00003C60 loc_3C60:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00003C60                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003C65
.text$mn:00003C65 loc_3C65:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00003C65                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00003C65                 mov     eax, [ebp+var_4]
.text$mn:00003C68                 mov     esp, ebp
.text$mn:00003C6A                 pop     ebp
.text$mn:00003C6B                 retn
.text$mn:00003C6B ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00003C6B
.text$mn:00003C6B _text$mn        ends
.text$mn:00003C6B
.text$mn:00003C6C ; ===========================================================================
.text$mn:00003C6C
.text$mn:00003C6C ; Segment type: Pure code
.text$mn:00003C6C ; Segment permissions: Read/Execute
.text$mn:00003C6C _text$mn        segment para public 'CODE' use32
.text$mn:00003C6C                 assume cs:_text$mn
.text$mn:00003C6C                 ;org 3C6Ch
.text$mn:00003C6C ; COMDAT (pick any)
.text$mn:00003C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C6C
.text$mn:00003C6C ; =============== S U B R O U T I N E =======================================
.text$mn:00003C6C
.text$mn:00003C6C ; Attributes: bp-based frame
.text$mn:00003C6C
.text$mn:00003C6C ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00003C6C                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00003C6C ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00003C6C                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00003C6C
.text$mn:00003C6C var_4           = dword ptr -4
.text$mn:00003C6C arg_0           = dword ptr  8
.text$mn:00003C6C
.text$mn:00003C6C                 push    ebp
.text$mn:00003C6D                 mov     ebp, esp
.text$mn:00003C6F                 push    ecx
.text$mn:00003C70                 mov     [ebp+var_4], 0
.text$mn:00003C77                 cmp     [ebp+arg_0], 0
.text$mn:00003C7B                 jnz     short loc_3C7F
.text$mn:00003C7D                 jmp     short loc_3CA4
.text$mn:00003C7F ; ---------------------------------------------------------------------------
.text$mn:00003C7F
.text$mn:00003C7F loc_3C7F:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00003C7F                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:00003C86                 ja      short loc_3C9F
.text$mn:00003C88                 mov     eax, [ebp+arg_0]
.text$mn:00003C8B                 shl     eax, 1
.text$mn:00003C8D                 push    eax             ; unsigned int
.text$mn:00003C8E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003C93                 add     esp, 4
.text$mn:00003C96                 mov     [ebp+var_4], eax
.text$mn:00003C99                 cmp     [ebp+var_4], 0
.text$mn:00003C9D                 jnz     short loc_3CA4
.text$mn:00003C9F
.text$mn:00003C9F loc_3C9F:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00003C9F                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003CA4
.text$mn:00003CA4 loc_3CA4:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00003CA4                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00003CA4                 mov     eax, [ebp+var_4]
.text$mn:00003CA7                 mov     esp, ebp
.text$mn:00003CA9                 pop     ebp
.text$mn:00003CAA                 retn
.text$mn:00003CAA ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00003CAA
.text$mn:00003CAA ; ---------------------------------------------------------------------------
.text$mn:00003CAB                 align 4
.text$mn:00003CAB _text$mn        ends
.text$mn:00003CAB
.text$mn:00003CAC ; ===========================================================================
.text$mn:00003CAC
.text$mn:00003CAC ; Segment type: Pure code
.text$mn:00003CAC ; Segment permissions: Read/Execute
.text$mn:00003CAC _text$mn        segment para public 'CODE' use32
.text$mn:00003CAC                 assume cs:_text$mn
.text$mn:00003CAC                 ;org 3CACh
.text$mn:00003CAC ; COMDAT (pick any)
.text$mn:00003CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CAC
.text$mn:00003CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00003CAC
.text$mn:00003CAC ; Attributes: bp-based frame
.text$mn:00003CAC
.text$mn:00003CAC ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00003CAC                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00003CAC ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00003CAC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00003CAC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00003CAC
.text$mn:00003CAC arg_0           = dword ptr  8
.text$mn:00003CAC arg_4           = dword ptr  0Ch
.text$mn:00003CAC arg_8           = dword ptr  10h
.text$mn:00003CAC
.text$mn:00003CAC                 push    ebp
.text$mn:00003CAD                 mov     ebp, esp
.text$mn:00003CAF                 cmp     [ebp+arg_0], 0
.text$mn:00003CB3                 jnz     short loc_3CCA
.text$mn:00003CB5                 mov     eax, [ebp+arg_8]
.text$mn:00003CB8                 push    eax             ; unsigned int
.text$mn:00003CB9                 mov     ecx, [ebp+arg_4]
.text$mn:00003CBC                 push    ecx             ; wchar_t *
.text$mn:00003CBD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003CC2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003CC7                 add     esp, 0Ch
.text$mn:00003CCA
.text$mn:00003CCA loc_3CCA:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00003CCA                 pop     ebp
.text$mn:00003CCB                 retn
.text$mn:00003CCB ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00003CCB
.text$mn:00003CCB _text$mn        ends
.text$mn:00003CCB
.text$mn:00003CCC ; ===========================================================================
.text$mn:00003CCC
.text$mn:00003CCC ; Segment type: Pure code
.text$mn:00003CCC ; Segment permissions: Read/Execute
.text$mn:00003CCC _text$mn        segment para public 'CODE' use32
.text$mn:00003CCC                 assume cs:_text$mn
.text$mn:00003CCC                 ;org 3CCCh
.text$mn:00003CCC ; COMDAT (pick any)
.text$mn:00003CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CCC
.text$mn:00003CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00003CCC
.text$mn:00003CCC ; Attributes: bp-based frame
.text$mn:00003CCC
.text$mn:00003CCC ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00003CCC                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00003CCC ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00003CCC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:00003CCC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:00003CCC
.text$mn:00003CCC arg_0           = dword ptr  8
.text$mn:00003CCC arg_4           = dword ptr  0Ch
.text$mn:00003CCC arg_8           = dword ptr  10h
.text$mn:00003CCC
.text$mn:00003CCC                 push    ebp
.text$mn:00003CCD                 mov     ebp, esp
.text$mn:00003CCF                 cmp     [ebp+arg_0], 0
.text$mn:00003CD3                 jnz     short loc_3CEA
.text$mn:00003CD5                 mov     eax, [ebp+arg_8]
.text$mn:00003CD8                 push    eax             ; unsigned int
.text$mn:00003CD9                 mov     ecx, [ebp+arg_4]
.text$mn:00003CDC                 push    ecx             ; wchar_t *
.text$mn:00003CDD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00003CE2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003CE7                 add     esp, 0Ch
.text$mn:00003CEA
.text$mn:00003CEA loc_3CEA:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:00003CEA                 pop     ebp
.text$mn:00003CEB                 retn
.text$mn:00003CEB ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:00003CEB
.text$mn:00003CEB _text$mn        ends
.text$mn:00003CEB
.text$mn:00003CEC ; ===========================================================================
.text$mn:00003CEC
.text$mn:00003CEC ; Segment type: Pure code
.text$mn:00003CEC ; Segment permissions: Read/Execute
.text$mn:00003CEC _text$mn        segment para public 'CODE' use32
.text$mn:00003CEC                 assume cs:_text$mn
.text$mn:00003CEC                 ;org 3CECh
.text$mn:00003CEC ; COMDAT (pick any)
.text$mn:00003CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CEC
.text$mn:00003CEC ; =============== S U B R O U T I N E =======================================
.text$mn:00003CEC
.text$mn:00003CEC ; Attributes: bp-based frame
.text$mn:00003CEC
.text$mn:00003CEC ; char * __cdecl std::addressof<char>(char &)
.text$mn:00003CEC                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00003CEC ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00003CEC                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00003CEC                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00003CEC
.text$mn:00003CEC arg_0           = dword ptr  8
.text$mn:00003CEC
.text$mn:00003CEC                 push    ebp
.text$mn:00003CED                 mov     ebp, esp
.text$mn:00003CEF                 mov     eax, [ebp+arg_0]
.text$mn:00003CF2                 pop     ebp
.text$mn:00003CF3                 retn
.text$mn:00003CF3 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00003CF3
.text$mn:00003CF3 _text$mn        ends
.text$mn:00003CF3
.text$mn:00003CF4 ; ===========================================================================
.text$mn:00003CF4
.text$mn:00003CF4 ; Segment type: Pure code
.text$mn:00003CF4 ; Segment permissions: Read/Execute
.text$mn:00003CF4 _text$mn        segment para public 'CODE' use32
.text$mn:00003CF4                 assume cs:_text$mn
.text$mn:00003CF4                 ;org 3CF4h
.text$mn:00003CF4 ; COMDAT (pick any)
.text$mn:00003CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CF4
.text$mn:00003CF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CF4
.text$mn:00003CF4 ; Attributes: bp-based frame
.text$mn:00003CF4
.text$mn:00003CF4 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00003CF4                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00003CF4 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00003CF4                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00003CF4                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00003CF4
.text$mn:00003CF4 arg_0           = dword ptr  8
.text$mn:00003CF4
.text$mn:00003CF4                 push    ebp
.text$mn:00003CF5                 mov     ebp, esp
.text$mn:00003CF7                 mov     eax, [ebp+arg_0]
.text$mn:00003CFA                 pop     ebp
.text$mn:00003CFB                 retn
.text$mn:00003CFB ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00003CFB
.text$mn:00003CFB _text$mn        ends
.text$mn:00003CFB
.text$mn:00003CFC ; ===========================================================================
.text$mn:00003CFC
.text$mn:00003CFC ; Segment type: Pure code
.text$mn:00003CFC ; Segment permissions: Read/Execute
.text$mn:00003CFC _text$mn        segment para public 'CODE' use32
.text$mn:00003CFC                 assume cs:_text$mn
.text$mn:00003CFC                 ;org 3CFCh
.text$mn:00003CFC ; COMDAT (pick any)
.text$mn:00003CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CFC
.text$mn:00003CFC ; =============== S U B R O U T I N E =======================================
.text$mn:00003CFC
.text$mn:00003CFC ; Attributes: bp-based frame
.text$mn:00003CFC
.text$mn:00003CFC ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00003CFC                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00003CFC ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00003CFC                                         ; CODE XREF: $LN19+4Bp
.text$mn:00003CFC
.text$mn:00003CFC var_4           = dword ptr -4
.text$mn:00003CFC arg_0           = dword ptr  8
.text$mn:00003CFC arg_4           = dword ptr  0Ch
.text$mn:00003CFC
.text$mn:00003CFC                 push    ebp
.text$mn:00003CFD                 mov     ebp, esp
.text$mn:00003CFF                 push    ecx
.text$mn:00003D00                 mov     [ebp+var_4], ecx
.text$mn:00003D03                 mov     eax, [ebp+arg_4]
.text$mn:00003D06                 push    eax
.text$mn:00003D07                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003D0C                 add     esp, 4
.text$mn:00003D0F                 push    eax             ; int
.text$mn:00003D10                 mov     ecx, [ebp+arg_0]
.text$mn:00003D13                 push    ecx             ; void *
.text$mn:00003D14                 mov     edx, [ebp+var_4]
.text$mn:00003D17                 push    edx             ; int
.text$mn:00003D18                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00003D1D                 add     esp, 0Ch
.text$mn:00003D20                 mov     esp, ebp
.text$mn:00003D22                 pop     ebp
.text$mn:00003D23                 retn    8
.text$mn:00003D23 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00003D23
.text$mn:00003D23 ; ---------------------------------------------------------------------------
.text$mn:00003D26                 align 4
.text$mn:00003D26 _text$mn        ends
.text$mn:00003D26
.text$mn:00003D28 ; ===========================================================================
.text$mn:00003D28
.text$mn:00003D28 ; Segment type: Pure code
.text$mn:00003D28 ; Segment permissions: Read/Execute
.text$mn:00003D28 _text$mn        segment para public 'CODE' use32
.text$mn:00003D28                 assume cs:_text$mn
.text$mn:00003D28                 ;org 3D28h
.text$mn:00003D28 ; COMDAT (pick any)
.text$mn:00003D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D28
.text$mn:00003D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D28
.text$mn:00003D28 ; Attributes: bp-based frame
.text$mn:00003D28
.text$mn:00003D28 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00003D28                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00003D28 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00003D28                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00003D28
.text$mn:00003D28 var_1C          = dword ptr -1Ch
.text$mn:00003D28 var_18          = dword ptr -18h
.text$mn:00003D28 var_14          = dword ptr -14h
.text$mn:00003D28 var_10          = dword ptr -10h
.text$mn:00003D28 var_C           = dword ptr -0Ch
.text$mn:00003D28 var_4           = dword ptr -4
.text$mn:00003D28 arg_0           = dword ptr  8
.text$mn:00003D28 arg_4           = dword ptr  0Ch
.text$mn:00003D28
.text$mn:00003D28                 push    ebp
.text$mn:00003D29                 mov     ebp, esp
.text$mn:00003D2B                 push    0FFFFFFFFh
.text$mn:00003D2D                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00003D32                 mov     eax, large fs:0
.text$mn:00003D38                 push    eax
.text$mn:00003D39                 sub     esp, 10h
.text$mn:00003D3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D41                 xor     eax, ebp
.text$mn:00003D43                 push    eax
.text$mn:00003D44                 lea     eax, [ebp+var_C]
.text$mn:00003D47                 mov     large fs:0, eax
.text$mn:00003D4D                 mov     [ebp+var_18], ecx
.text$mn:00003D50                 mov     eax, [ebp+arg_0]
.text$mn:00003D53                 push    eax             ; void *
.text$mn:00003D54                 push    4               ; unsigned int
.text$mn:00003D56                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003D5B                 add     esp, 8
.text$mn:00003D5E                 mov     [ebp+var_10], eax
.text$mn:00003D61                 mov     [ebp+var_4], 0
.text$mn:00003D68                 cmp     [ebp+var_10], 0
.text$mn:00003D6C                 jz      short loc_3D89
.text$mn:00003D6E                 mov     ecx, [ebp+arg_4]
.text$mn:00003D71                 push    ecx
.text$mn:00003D72                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003D77                 add     esp, 4
.text$mn:00003D7A                 mov     edx, [ebp+var_10]
.text$mn:00003D7D                 mov     eax, [eax]
.text$mn:00003D7F                 mov     [edx], eax
.text$mn:00003D81                 mov     ecx, [ebp+var_10]
.text$mn:00003D84                 mov     [ebp+var_14], ecx
.text$mn:00003D87                 jmp     short loc_3D90
.text$mn:00003D89 ; ---------------------------------------------------------------------------
.text$mn:00003D89
.text$mn:00003D89 loc_3D89:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00003D89                 mov     [ebp+var_14], 0
.text$mn:00003D90
.text$mn:00003D90 loc_3D90:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00003D90                 mov     edx, [ebp+var_14]
.text$mn:00003D93                 mov     [ebp+var_1C], edx
.text$mn:00003D96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D9D                 mov     ecx, [ebp+var_C]
.text$mn:00003DA0                 mov     large fs:0, ecx
.text$mn:00003DA7                 pop     ecx
.text$mn:00003DA8                 mov     esp, ebp
.text$mn:00003DAA                 pop     ebp
.text$mn:00003DAB                 retn    8
.text$mn:00003DAB ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00003DAB
.text$mn:00003DAB ; ---------------------------------------------------------------------------
.text$mn:00003DAE                 align 10h
.text$mn:00003DAE _text$mn        ends
.text$mn:00003DAE
.text$x:00003DB0 ; ===========================================================================
.text$x:00003DB0
.text$x:00003DB0 ; Segment type: Pure code
.text$x:00003DB0 ; Segment permissions: Read/Execute
.text$x:00003DB0 _text$x         segment para public 'CODE' use32
.text$x:00003DB0                 assume cs:_text$x
.text$x:00003DB0                 ;org 3DB0h
.text$x:00003DB0 ; COMDAT (pick associative to section at 3D28)
.text$x:00003DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003DB0
.text$x:00003DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB0
.text$x:00003DB0
.text$x:00003DB0 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00003DB0                                         ; DATA XREF: .xdata$x:000081D8o
.text$x:00003DB0                 mov     eax, [ebp+8]
.text$x:00003DB3                 push    eax
.text$x:00003DB4                 mov     eax, [ebp-10h]
.text$x:00003DB7                 push    eax             ; void *
.text$x:00003DB8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003DBD                 add     esp, 8
.text$x:00003DC0                 retn
.text$x:00003DC0 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00003DC0
.text$x:00003DC1
.text$x:00003DC1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DC1
.text$x:00003DC1
.text$x:00003DC1 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00003DC1                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00003DC1
.text$x:00003DC1 arg_4           = dword ptr  8
.text$x:00003DC1
.text$x:00003DC1                 mov     edx, [esp+arg_4]
.text$x:00003DC5                 lea     eax, [edx+0Ch]
.text$x:00003DC8                 mov     ecx, [edx-14h]
.text$x:00003DCB                 xor     ecx, eax
.text$x:00003DCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DD2                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00003DD7                 jmp     ___CxxFrameHandler3
.text$x:00003DD7 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00003DD7
.text$x:00003DD7 _text$x         ends
.text$x:00003DD7
.text$mn:00003DDC ; ===========================================================================
.text$mn:00003DDC
.text$mn:00003DDC ; Segment type: Pure code
.text$mn:00003DDC ; Segment permissions: Read/Execute
.text$mn:00003DDC _text$mn        segment para public 'CODE' use32
.text$mn:00003DDC                 assume cs:_text$mn
.text$mn:00003DDC                 ;org 3DDCh
.text$mn:00003DDC ; COMDAT (pick any)
.text$mn:00003DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DDC
.text$mn:00003DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DDC
.text$mn:00003DDC ; Attributes: bp-based frame
.text$mn:00003DDC
.text$mn:00003DDC ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00003DDC                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00003DDC ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00003DDC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00003DDC
.text$mn:00003DDC arg_0           = dword ptr  8
.text$mn:00003DDC arg_4           = dword ptr  0Ch
.text$mn:00003DDC arg_8           = dword ptr  10h
.text$mn:00003DDC
.text$mn:00003DDC                 push    ebp
.text$mn:00003DDD                 mov     ebp, esp
.text$mn:00003DDF                 mov     eax, [ebp+arg_8]
.text$mn:00003DE2                 push    eax
.text$mn:00003DE3                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003DE8                 add     esp, 4
.text$mn:00003DEB                 push    eax             ; int
.text$mn:00003DEC                 mov     ecx, [ebp+arg_4]
.text$mn:00003DEF                 push    ecx             ; void *
.text$mn:00003DF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003DF3                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00003DF8                 pop     ebp
.text$mn:00003DF9                 retn
.text$mn:00003DF9 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00003DF9
.text$mn:00003DF9 ; ---------------------------------------------------------------------------
.text$mn:00003DFA                 align 4
.text$mn:00003DFA _text$mn        ends
.text$mn:00003DFA
.text$mn:00003DFC ; ===========================================================================
.text$mn:00003DFC
.text$mn:00003DFC ; Segment type: Pure code
.text$mn:00003DFC ; Segment permissions: Read/Execute
.text$mn:00003DFC _text$mn        segment para public 'CODE' use32
.text$mn:00003DFC                 assume cs:_text$mn
.text$mn:00003DFC                 ;org 3DFCh
.text$mn:00003DFC ; COMDAT (pick any)
.text$mn:00003DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DFC
.text$mn:00003DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DFC
.text$mn:00003DFC ; Attributes: bp-based frame
.text$mn:00003DFC
.text$mn:00003DFC ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00003DFC                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003DFC ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00003DFC                                         ; CODE XREF: $LN19_0+4Bp
.text$mn:00003DFC
.text$mn:00003DFC var_4           = dword ptr -4
.text$mn:00003DFC arg_0           = dword ptr  8
.text$mn:00003DFC arg_4           = dword ptr  0Ch
.text$mn:00003DFC
.text$mn:00003DFC                 push    ebp
.text$mn:00003DFD                 mov     ebp, esp
.text$mn:00003DFF                 push    ecx
.text$mn:00003E00                 mov     [ebp+var_4], ecx
.text$mn:00003E03                 mov     eax, [ebp+arg_4]
.text$mn:00003E06                 push    eax
.text$mn:00003E07                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003E0C                 add     esp, 4
.text$mn:00003E0F                 push    eax             ; int
.text$mn:00003E10                 mov     ecx, [ebp+arg_0]
.text$mn:00003E13                 push    ecx             ; void *
.text$mn:00003E14                 mov     edx, [ebp+var_4]
.text$mn:00003E17                 push    edx             ; int
.text$mn:00003E18                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00003E1D                 add     esp, 0Ch
.text$mn:00003E20                 mov     esp, ebp
.text$mn:00003E22                 pop     ebp
.text$mn:00003E23                 retn    8
.text$mn:00003E23 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00003E23
.text$mn:00003E23 ; ---------------------------------------------------------------------------
.text$mn:00003E26                 align 4
.text$mn:00003E26 _text$mn        ends
.text$mn:00003E26
.text$mn:00003E28 ; ===========================================================================
.text$mn:00003E28
.text$mn:00003E28 ; Segment type: Pure code
.text$mn:00003E28 ; Segment permissions: Read/Execute
.text$mn:00003E28 _text$mn        segment para public 'CODE' use32
.text$mn:00003E28                 assume cs:_text$mn
.text$mn:00003E28                 ;org 3E28h
.text$mn:00003E28 ; COMDAT (pick any)
.text$mn:00003E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E28
.text$mn:00003E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E28
.text$mn:00003E28 ; Attributes: bp-based frame
.text$mn:00003E28
.text$mn:00003E28 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00003E28                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003E28 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00003E28                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00003E28
.text$mn:00003E28 var_1C          = dword ptr -1Ch
.text$mn:00003E28 var_18          = dword ptr -18h
.text$mn:00003E28 var_14          = dword ptr -14h
.text$mn:00003E28 var_10          = dword ptr -10h
.text$mn:00003E28 var_C           = dword ptr -0Ch
.text$mn:00003E28 var_4           = dword ptr -4
.text$mn:00003E28 arg_0           = dword ptr  8
.text$mn:00003E28 arg_4           = dword ptr  0Ch
.text$mn:00003E28
.text$mn:00003E28                 push    ebp
.text$mn:00003E29                 mov     ebp, esp
.text$mn:00003E2B                 push    0FFFFFFFFh
.text$mn:00003E2D                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003E32                 mov     eax, large fs:0
.text$mn:00003E38                 push    eax
.text$mn:00003E39                 sub     esp, 10h
.text$mn:00003E3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003E41                 xor     eax, ebp
.text$mn:00003E43                 push    eax
.text$mn:00003E44                 lea     eax, [ebp+var_C]
.text$mn:00003E47                 mov     large fs:0, eax
.text$mn:00003E4D                 mov     [ebp+var_18], ecx
.text$mn:00003E50                 mov     eax, [ebp+arg_0]
.text$mn:00003E53                 push    eax             ; void *
.text$mn:00003E54                 push    4               ; unsigned int
.text$mn:00003E56                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003E5B                 add     esp, 8
.text$mn:00003E5E                 mov     [ebp+var_10], eax
.text$mn:00003E61                 mov     [ebp+var_4], 0
.text$mn:00003E68                 cmp     [ebp+var_10], 0
.text$mn:00003E6C                 jz      short loc_3E89
.text$mn:00003E6E                 mov     ecx, [ebp+arg_4]
.text$mn:00003E71                 push    ecx
.text$mn:00003E72                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003E77                 add     esp, 4
.text$mn:00003E7A                 mov     edx, [ebp+var_10]
.text$mn:00003E7D                 mov     eax, [eax]
.text$mn:00003E7F                 mov     [edx], eax
.text$mn:00003E81                 mov     ecx, [ebp+var_10]
.text$mn:00003E84                 mov     [ebp+var_14], ecx
.text$mn:00003E87                 jmp     short loc_3E90
.text$mn:00003E89 ; ---------------------------------------------------------------------------
.text$mn:00003E89
.text$mn:00003E89 loc_3E89:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00003E89                 mov     [ebp+var_14], 0
.text$mn:00003E90
.text$mn:00003E90 loc_3E90:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00003E90                 mov     edx, [ebp+var_14]
.text$mn:00003E93                 mov     [ebp+var_1C], edx
.text$mn:00003E96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003E9D                 mov     ecx, [ebp+var_C]
.text$mn:00003EA0                 mov     large fs:0, ecx
.text$mn:00003EA7                 pop     ecx
.text$mn:00003EA8                 mov     esp, ebp
.text$mn:00003EAA                 pop     ebp
.text$mn:00003EAB                 retn    8
.text$mn:00003EAB ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00003EAB
.text$mn:00003EAB ; ---------------------------------------------------------------------------
.text$mn:00003EAE                 align 10h
.text$mn:00003EAE _text$mn        ends
.text$mn:00003EAE
.text$x:00003EB0 ; ===========================================================================
.text$x:00003EB0
.text$x:00003EB0 ; Segment type: Pure code
.text$x:00003EB0 ; Segment permissions: Read/Execute
.text$x:00003EB0 _text$x         segment para public 'CODE' use32
.text$x:00003EB0                 assume cs:_text$x
.text$x:00003EB0                 ;org 3EB0h
.text$x:00003EB0 ; COMDAT (pick associative to section at 3E28)
.text$x:00003EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003EB0
.text$x:00003EB0 ; =============== S U B R O U T I N E =======================================
.text$x:00003EB0
.text$x:00003EB0
.text$x:00003EB0 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00003EB0                                         ; DATA XREF: .xdata$x:00008204o
.text$x:00003EB0                 mov     eax, [ebp+8]
.text$x:00003EB3                 push    eax
.text$x:00003EB4                 mov     eax, [ebp-10h]
.text$x:00003EB7                 push    eax             ; void *
.text$x:00003EB8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003EBD                 add     esp, 8
.text$x:00003EC0                 retn
.text$x:00003EC0 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00003EC0
.text$x:00003EC1
.text$x:00003EC1 ; =============== S U B R O U T I N E =======================================
.text$x:00003EC1
.text$x:00003EC1
.text$x:00003EC1 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00003EC1                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00003EC1
.text$x:00003EC1 arg_4           = dword ptr  8
.text$x:00003EC1
.text$x:00003EC1                 mov     edx, [esp+arg_4]
.text$x:00003EC5                 lea     eax, [edx+0Ch]
.text$x:00003EC8                 mov     ecx, [edx-14h]
.text$x:00003ECB                 xor     ecx, eax
.text$x:00003ECD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ED2                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00003ED7                 jmp     ___CxxFrameHandler3
.text$x:00003ED7 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00003ED7
.text$x:00003ED7 _text$x         ends
.text$x:00003ED7
.text$mn:00003EDC ; ===========================================================================
.text$mn:00003EDC
.text$mn:00003EDC ; Segment type: Pure code
.text$mn:00003EDC ; Segment permissions: Read/Execute
.text$mn:00003EDC _text$mn        segment para public 'CODE' use32
.text$mn:00003EDC                 assume cs:_text$mn
.text$mn:00003EDC                 ;org 3EDCh
.text$mn:00003EDC ; COMDAT (pick any)
.text$mn:00003EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EDC
.text$mn:00003EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00003EDC
.text$mn:00003EDC ; Attributes: bp-based frame
.text$mn:00003EDC
.text$mn:00003EDC ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00003EDC                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00003EDC ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00003EDC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00003EDC
.text$mn:00003EDC arg_0           = dword ptr  8
.text$mn:00003EDC arg_4           = dword ptr  0Ch
.text$mn:00003EDC arg_8           = dword ptr  10h
.text$mn:00003EDC
.text$mn:00003EDC                 push    ebp
.text$mn:00003EDD                 mov     ebp, esp
.text$mn:00003EDF                 mov     eax, [ebp+arg_8]
.text$mn:00003EE2                 push    eax
.text$mn:00003EE3                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003EE8                 add     esp, 4
.text$mn:00003EEB                 push    eax             ; int
.text$mn:00003EEC                 mov     ecx, [ebp+arg_4]
.text$mn:00003EEF                 push    ecx             ; void *
.text$mn:00003EF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003EF3                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00003EF8                 pop     ebp
.text$mn:00003EF9                 retn
.text$mn:00003EF9 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00003EF9
.text$mn:00003EF9 ; ---------------------------------------------------------------------------
.text$mn:00003EFA                 align 4
.text$mn:00003EFA _text$mn        ends
.text$mn:00003EFA
.text$mn:00003EFC ; ===========================================================================
.text$mn:00003EFC
.text$mn:00003EFC ; Segment type: Pure code
.text$mn:00003EFC ; Segment permissions: Read/Execute
.text$mn:00003EFC _text$mn        segment para public 'CODE' use32
.text$mn:00003EFC                 assume cs:_text$mn
.text$mn:00003EFC                 ;org 3EFCh
.text$mn:00003EFC ; COMDAT (pick any)
.text$mn:00003EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EFC
.text$mn:00003EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00003EFC
.text$mn:00003EFC ; Attributes: bp-based frame
.text$mn:00003EFC
.text$mn:00003EFC ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00003EFC                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003EFC ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00003EFC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:00003EFC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:00003EFC
.text$mn:00003EFC var_1C          = dword ptr -1Ch
.text$mn:00003EFC var_18          = dword ptr -18h
.text$mn:00003EFC var_14          = dword ptr -14h
.text$mn:00003EFC var_10          = dword ptr -10h
.text$mn:00003EFC var_C           = dword ptr -0Ch
.text$mn:00003EFC var_4           = dword ptr -4
.text$mn:00003EFC arg_0           = dword ptr  8
.text$mn:00003EFC arg_4           = dword ptr  0Ch
.text$mn:00003EFC
.text$mn:00003EFC                 push    ebp
.text$mn:00003EFD                 mov     ebp, esp
.text$mn:00003EFF                 push    0FFFFFFFFh
.text$mn:00003F01                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003F06                 mov     eax, large fs:0
.text$mn:00003F0C                 push    eax
.text$mn:00003F0D                 sub     esp, 10h
.text$mn:00003F10                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F15                 xor     eax, ebp
.text$mn:00003F17                 push    eax
.text$mn:00003F18                 lea     eax, [ebp+var_C]
.text$mn:00003F1B                 mov     large fs:0, eax
.text$mn:00003F21                 mov     [ebp+var_18], ecx
.text$mn:00003F24                 mov     eax, [ebp+arg_0]
.text$mn:00003F27                 push    eax             ; void *
.text$mn:00003F28                 push    8               ; unsigned int
.text$mn:00003F2A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003F2F                 add     esp, 8
.text$mn:00003F32                 mov     [ebp+var_10], eax
.text$mn:00003F35                 mov     [ebp+var_4], 0
.text$mn:00003F3C                 cmp     [ebp+var_10], 0
.text$mn:00003F40                 jz      short loc_3F63
.text$mn:00003F42                 mov     ecx, [ebp+arg_4]
.text$mn:00003F45                 push    ecx
.text$mn:00003F46                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003F4B                 add     esp, 4
.text$mn:00003F4E                 mov     edx, [eax]
.text$mn:00003F50                 mov     eax, [eax+4]
.text$mn:00003F53                 mov     ecx, [ebp+var_10]
.text$mn:00003F56                 mov     [ecx], edx
.text$mn:00003F58                 mov     [ecx+4], eax
.text$mn:00003F5B                 mov     edx, [ebp+var_10]
.text$mn:00003F5E                 mov     [ebp+var_14], edx
.text$mn:00003F61                 jmp     short loc_3F6A
.text$mn:00003F63 ; ---------------------------------------------------------------------------
.text$mn:00003F63
.text$mn:00003F63 loc_3F63:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00003F63                 mov     [ebp+var_14], 0
.text$mn:00003F6A
.text$mn:00003F6A loc_3F6A:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00003F6A                 mov     eax, [ebp+var_14]
.text$mn:00003F6D                 mov     [ebp+var_1C], eax
.text$mn:00003F70                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F77                 mov     ecx, [ebp+var_C]
.text$mn:00003F7A                 mov     large fs:0, ecx
.text$mn:00003F81                 pop     ecx
.text$mn:00003F82                 mov     esp, ebp
.text$mn:00003F84                 pop     ebp
.text$mn:00003F85                 retn    8
.text$mn:00003F85 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00003F85
.text$mn:00003F85 _text$mn        ends
.text$mn:00003F85
.text$x:00003F88 ; ===========================================================================
.text$x:00003F88
.text$x:00003F88 ; Segment type: Pure code
.text$x:00003F88 ; Segment permissions: Read/Execute
.text$x:00003F88 _text$x         segment para public 'CODE' use32
.text$x:00003F88                 assume cs:_text$x
.text$x:00003F88                 ;org 3F88h
.text$x:00003F88 ; COMDAT (pick associative to section at 3EFC)
.text$x:00003F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F88
.text$x:00003F88 ; =============== S U B R O U T I N E =======================================
.text$x:00003F88
.text$x:00003F88
.text$x:00003F88 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00003F88                                         ; DATA XREF: .xdata$x:000081ACo
.text$x:00003F88                 mov     eax, [ebp+8]
.text$x:00003F8B                 push    eax
.text$x:00003F8C                 mov     eax, [ebp-10h]
.text$x:00003F8F                 push    eax             ; void *
.text$x:00003F90                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003F95                 add     esp, 8
.text$x:00003F98                 retn
.text$x:00003F98 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00003F98
.text$x:00003F99
.text$x:00003F99 ; =============== S U B R O U T I N E =======================================
.text$x:00003F99
.text$x:00003F99
.text$x:00003F99 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00003F99                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00003F99
.text$x:00003F99 arg_4           = dword ptr  8
.text$x:00003F99
.text$x:00003F99                 mov     edx, [esp+arg_4]
.text$x:00003F9D                 lea     eax, [edx+0Ch]
.text$x:00003FA0                 mov     ecx, [edx-14h]
.text$x:00003FA3                 xor     ecx, eax
.text$x:00003FA5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FAA                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00003FAF                 jmp     ___CxxFrameHandler3
.text$x:00003FAF __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00003FAF
.text$x:00003FAF _text$x         ends
.text$x:00003FAF
.text$mn:00003FB4 ; ===========================================================================
.text$mn:00003FB4
.text$mn:00003FB4 ; Segment type: Pure code
.text$mn:00003FB4 ; Segment permissions: Read/Execute
.text$mn:00003FB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003FB4                 assume cs:_text$mn
.text$mn:00003FB4                 ;org 3FB4h
.text$mn:00003FB4 ; COMDAT (pick any)
.text$mn:00003FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FB4
.text$mn:00003FB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FB4
.text$mn:00003FB4 ; Attributes: bp-based frame
.text$mn:00003FB4
.text$mn:00003FB4 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00003FB4                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00003FB4 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00003FB4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00003FB4
.text$mn:00003FB4 var_4           = dword ptr -4
.text$mn:00003FB4 arg_0           = dword ptr  8
.text$mn:00003FB4
.text$mn:00003FB4                 push    ebp
.text$mn:00003FB5                 mov     ebp, esp
.text$mn:00003FB7                 push    ecx
.text$mn:00003FB8                 mov     [ebp+var_4], ecx
.text$mn:00003FBB                 mov     eax, [ebp+arg_0]
.text$mn:00003FBE                 push    eax
.text$mn:00003FBF                 mov     ecx, [ebp+var_4]
.text$mn:00003FC2                 push    ecx
.text$mn:00003FC3                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00003FC8                 add     esp, 8
.text$mn:00003FCB                 mov     esp, ebp
.text$mn:00003FCD                 pop     ebp
.text$mn:00003FCE                 retn    4
.text$mn:00003FCE ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00003FCE
.text$mn:00003FCE ; ---------------------------------------------------------------------------
.text$mn:00003FD1                 align 4
.text$mn:00003FD1 _text$mn        ends
.text$mn:00003FD1
.text$mn:00003FD4 ; ===========================================================================
.text$mn:00003FD4
.text$mn:00003FD4 ; Segment type: Pure code
.text$mn:00003FD4 ; Segment permissions: Read/Execute
.text$mn:00003FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00003FD4                 assume cs:_text$mn
.text$mn:00003FD4                 ;org 3FD4h
.text$mn:00003FD4 ; COMDAT (pick any)
.text$mn:00003FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FD4
.text$mn:00003FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FD4
.text$mn:00003FD4 ; Attributes: bp-based frame
.text$mn:00003FD4
.text$mn:00003FD4 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00003FD4                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00003FD4 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00003FD4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00003FD4
.text$mn:00003FD4 var_4           = dword ptr -4
.text$mn:00003FD4
.text$mn:00003FD4                 push    ebp
.text$mn:00003FD5                 mov     ebp, esp
.text$mn:00003FD7                 push    ecx
.text$mn:00003FD8                 mov     [ebp+var_4], ecx
.text$mn:00003FDB                 mov     esp, ebp
.text$mn:00003FDD                 pop     ebp
.text$mn:00003FDE                 retn    4
.text$mn:00003FDE ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00003FDE
.text$mn:00003FDE ; ---------------------------------------------------------------------------
.text$mn:00003FE1                 align 4
.text$mn:00003FE1 _text$mn        ends
.text$mn:00003FE1
.text$mn:00003FE4 ; ===========================================================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Segment type: Pure code
.text$mn:00003FE4 ; Segment permissions: Read/Execute
.text$mn:00003FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003FE4                 assume cs:_text$mn
.text$mn:00003FE4                 ;org 3FE4h
.text$mn:00003FE4 ; COMDAT (pick any)
.text$mn:00003FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FE4
.text$mn:00003FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Attributes: bp-based frame
.text$mn:00003FE4
.text$mn:00003FE4 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00003FE4                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00003FE4 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00003FE4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00003FE4
.text$mn:00003FE4 arg_0           = dword ptr  8
.text$mn:00003FE4 arg_4           = dword ptr  0Ch
.text$mn:00003FE4
.text$mn:00003FE4                 push    ebp
.text$mn:00003FE5                 mov     ebp, esp
.text$mn:00003FE7                 mov     eax, [ebp+arg_4]
.text$mn:00003FEA                 push    eax
.text$mn:00003FEB                 mov     ecx, [ebp+arg_0]
.text$mn:00003FEE                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00003FF3                 pop     ebp
.text$mn:00003FF4                 retn
.text$mn:00003FF4 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00003FF4
.text$mn:00003FF4 ; ---------------------------------------------------------------------------
.text$mn:00003FF5                 align 4
.text$mn:00003FF5 _text$mn        ends
.text$mn:00003FF5
.text$mn:00003FF8 ; ===========================================================================
.text$mn:00003FF8
.text$mn:00003FF8 ; Segment type: Pure code
.text$mn:00003FF8 ; Segment permissions: Read/Execute
.text$mn:00003FF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003FF8                 assume cs:_text$mn
.text$mn:00003FF8                 ;org 3FF8h
.text$mn:00003FF8 ; COMDAT (pick any)
.text$mn:00003FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FF8
.text$mn:00003FF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FF8
.text$mn:00003FF8 ; Attributes: bp-based frame
.text$mn:00003FF8
.text$mn:00003FF8 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00003FF8                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00003FF8 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00003FF8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00003FF8
.text$mn:00003FF8 var_4           = dword ptr -4
.text$mn:00003FF8 arg_0           = dword ptr  8
.text$mn:00003FF8
.text$mn:00003FF8                 push    ebp
.text$mn:00003FF9                 mov     ebp, esp
.text$mn:00003FFB                 push    ecx
.text$mn:00003FFC                 mov     [ebp+var_4], ecx
.text$mn:00003FFF                 mov     eax, [ebp+arg_0]
.text$mn:00004002                 push    eax
.text$mn:00004003                 mov     ecx, [ebp+var_4]
.text$mn:00004006                 push    ecx
.text$mn:00004007                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:0000400C                 add     esp, 8
.text$mn:0000400F                 mov     esp, ebp
.text$mn:00004011                 pop     ebp
.text$mn:00004012                 retn    4
.text$mn:00004012 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00004012
.text$mn:00004012 ; ---------------------------------------------------------------------------
.text$mn:00004015                 align 4
.text$mn:00004015 _text$mn        ends
.text$mn:00004015
.text$mn:00004018 ; ===========================================================================
.text$mn:00004018
.text$mn:00004018 ; Segment type: Pure code
.text$mn:00004018 ; Segment permissions: Read/Execute
.text$mn:00004018 _text$mn        segment para public 'CODE' use32
.text$mn:00004018                 assume cs:_text$mn
.text$mn:00004018                 ;org 4018h
.text$mn:00004018 ; COMDAT (pick any)
.text$mn:00004018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004018
.text$mn:00004018 ; =============== S U B R O U T I N E =======================================
.text$mn:00004018
.text$mn:00004018 ; Attributes: bp-based frame
.text$mn:00004018
.text$mn:00004018 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004018                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00004018 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00004018                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00004018
.text$mn:00004018 var_4           = dword ptr -4
.text$mn:00004018
.text$mn:00004018                 push    ebp
.text$mn:00004019                 mov     ebp, esp
.text$mn:0000401B                 push    ecx
.text$mn:0000401C                 mov     [ebp+var_4], ecx
.text$mn:0000401F                 mov     esp, ebp
.text$mn:00004021                 pop     ebp
.text$mn:00004022                 retn    4
.text$mn:00004022 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00004022
.text$mn:00004022 ; ---------------------------------------------------------------------------
.text$mn:00004025                 align 4
.text$mn:00004025 _text$mn        ends
.text$mn:00004025
.text$mn:00004028 ; ===========================================================================
.text$mn:00004028
.text$mn:00004028 ; Segment type: Pure code
.text$mn:00004028 ; Segment permissions: Read/Execute
.text$mn:00004028 _text$mn        segment para public 'CODE' use32
.text$mn:00004028                 assume cs:_text$mn
.text$mn:00004028                 ;org 4028h
.text$mn:00004028 ; COMDAT (pick any)
.text$mn:00004028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004028
.text$mn:00004028 ; =============== S U B R O U T I N E =======================================
.text$mn:00004028
.text$mn:00004028 ; Attributes: bp-based frame
.text$mn:00004028
.text$mn:00004028 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00004028                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00004028 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00004028                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00004028
.text$mn:00004028 arg_0           = dword ptr  8
.text$mn:00004028 arg_4           = dword ptr  0Ch
.text$mn:00004028
.text$mn:00004028                 push    ebp
.text$mn:00004029                 mov     ebp, esp
.text$mn:0000402B                 mov     eax, [ebp+arg_4]
.text$mn:0000402E                 push    eax
.text$mn:0000402F                 mov     ecx, [ebp+arg_0]
.text$mn:00004032                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004037                 pop     ebp
.text$mn:00004038                 retn
.text$mn:00004038 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00004038
.text$mn:00004038 ; ---------------------------------------------------------------------------
.text$mn:00004039                 align 4
.text$mn:00004039 _text$mn        ends
.text$mn:00004039
.text$mn:0000403C ; ===========================================================================
.text$mn:0000403C
.text$mn:0000403C ; Segment type: Pure code
.text$mn:0000403C ; Segment permissions: Read/Execute
.text$mn:0000403C _text$mn        segment para public 'CODE' use32
.text$mn:0000403C                 assume cs:_text$mn
.text$mn:0000403C                 ;org 403Ch
.text$mn:0000403C ; COMDAT (pick any)
.text$mn:0000403C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000403C
.text$mn:0000403C ; =============== S U B R O U T I N E =======================================
.text$mn:0000403C
.text$mn:0000403C ; Attributes: bp-based frame
.text$mn:0000403C
.text$mn:0000403C ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:0000403C                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:0000403C ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:0000403C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:0000403C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:0000403C
.text$mn:0000403C var_4           = dword ptr -4
.text$mn:0000403C
.text$mn:0000403C                 push    ebp
.text$mn:0000403D                 mov     ebp, esp
.text$mn:0000403F                 push    ecx
.text$mn:00004040                 mov     [ebp+var_4], ecx
.text$mn:00004043                 mov     esp, ebp
.text$mn:00004045                 pop     ebp
.text$mn:00004046                 retn    4
.text$mn:00004046 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00004046
.text$mn:00004046 ; ---------------------------------------------------------------------------
.text$mn:00004049                 align 4
.text$mn:00004049 _text$mn        ends
.text$mn:00004049
.text$mn:0000404C ; ===========================================================================
.text$mn:0000404C
.text$mn:0000404C ; Segment type: Pure code
.text$mn:0000404C ; Segment permissions: Read/Execute
.text$mn:0000404C _text$mn        segment para public 'CODE' use32
.text$mn:0000404C                 assume cs:_text$mn
.text$mn:0000404C                 ;org 404Ch
.text$mn:0000404C ; COMDAT (pick any)
.text$mn:0000404C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000404C
.text$mn:0000404C ; =============== S U B R O U T I N E =======================================
.text$mn:0000404C
.text$mn:0000404C ; Attributes: bp-based frame
.text$mn:0000404C
.text$mn:0000404C ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:0000404C                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:0000404C ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:0000404C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:0000404C                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:0000404C
.text$mn:0000404C arg_0           = dword ptr  8
.text$mn:0000404C
.text$mn:0000404C                 push    ebp
.text$mn:0000404D                 mov     ebp, esp
.text$mn:0000404F                 mov     eax, [ebp+arg_0]
.text$mn:00004052                 pop     ebp
.text$mn:00004053                 retn
.text$mn:00004053 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00004053
.text$mn:00004053 _text$mn        ends
.text$mn:00004053
.text$mn:00004054 ; ===========================================================================
.text$mn:00004054
.text$mn:00004054 ; Segment type: Pure code
.text$mn:00004054 ; Segment permissions: Read/Execute
.text$mn:00004054 _text$mn        segment para public 'CODE' use32
.text$mn:00004054                 assume cs:_text$mn
.text$mn:00004054                 ;org 4054h
.text$mn:00004054 ; COMDAT (pick any)
.text$mn:00004054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004054
.text$mn:00004054 ; =============== S U B R O U T I N E =======================================
.text$mn:00004054
.text$mn:00004054 ; Attributes: bp-based frame
.text$mn:00004054
.text$mn:00004054 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004054                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00004054 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00004054                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00004054                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00004054
.text$mn:00004054 arg_0           = dword ptr  8
.text$mn:00004054
.text$mn:00004054                 push    ebp
.text$mn:00004055                 mov     ebp, esp
.text$mn:00004057                 mov     eax, [ebp+arg_0]
.text$mn:0000405A                 pop     ebp
.text$mn:0000405B                 retn
.text$mn:0000405B ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:0000405B
.text$mn:0000405B _text$mn        ends
.text$mn:0000405B
.text$mn:0000405C ; ===========================================================================
.text$mn:0000405C
.text$mn:0000405C ; Segment type: Pure code
.text$mn:0000405C ; Segment permissions: Read/Execute
.text$mn:0000405C _text$mn        segment para public 'CODE' use32
.text$mn:0000405C                 assume cs:_text$mn
.text$mn:0000405C                 ;org 405Ch
.text$mn:0000405C ; COMDAT (pick any)
.text$mn:0000405C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000405C
.text$mn:0000405C ; =============== S U B R O U T I N E =======================================
.text$mn:0000405C
.text$mn:0000405C ; Attributes: bp-based frame
.text$mn:0000405C
.text$mn:0000405C ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:0000405C                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:0000405C ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:0000405C                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:0000405C
.text$mn:0000405C arg_0           = dword ptr  8
.text$mn:0000405C
.text$mn:0000405C                 push    ebp
.text$mn:0000405D                 mov     ebp, esp
.text$mn:0000405F                 mov     eax, [ebp+arg_0]
.text$mn:00004062                 pop     ebp
.text$mn:00004063                 retn
.text$mn:00004063 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00004063
.text$mn:00004063 _text$mn        ends
.text$mn:00004063
.text$mn:00004064 ; ===========================================================================
.text$mn:00004064
.text$mn:00004064 ; Segment type: Pure code
.text$mn:00004064 ; Segment permissions: Read/Execute
.text$mn:00004064 _text$mn        segment para public 'CODE' use32
.text$mn:00004064                 assume cs:_text$mn
.text$mn:00004064                 ;org 4064h
.text$mn:00004064 ; COMDAT (pick any)
.text$mn:00004064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004064
.text$mn:00004064 ; =============== S U B R O U T I N E =======================================
.text$mn:00004064
.text$mn:00004064 ; Attributes: bp-based frame
.text$mn:00004064
.text$mn:00004064 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00004064                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00004064 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00004064                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00004064
.text$mn:00004064 var_10          = dword ptr -10h
.text$mn:00004064 var_C           = dword ptr -0Ch
.text$mn:00004064 var_4           = dword ptr -4
.text$mn:00004064
.text$mn:00004064                 push    ebp
.text$mn:00004065                 mov     ebp, esp
.text$mn:00004067                 push    0FFFFFFFFh
.text$mn:00004069                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000406E                 mov     eax, large fs:0
.text$mn:00004074                 push    eax
.text$mn:00004075                 push    ecx
.text$mn:00004076                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000407B                 xor     eax, ebp
.text$mn:0000407D                 push    eax
.text$mn:0000407E                 lea     eax, [ebp+var_C]
.text$mn:00004081                 mov     large fs:0, eax
.text$mn:00004087                 mov     [ebp+var_10], ecx
.text$mn:0000408A                 mov     ecx, [ebp+var_10]
.text$mn:0000408D                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00004092                 mov     [ebp+var_4], 0
.text$mn:00004099                 mov     ecx, [ebp+var_10]
.text$mn:0000409C                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000040A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000040A8                 mov     eax, [ebp+var_10]
.text$mn:000040AB                 mov     ecx, [ebp+var_C]
.text$mn:000040AE                 mov     large fs:0, ecx
.text$mn:000040B5                 pop     ecx
.text$mn:000040B6                 mov     esp, ebp
.text$mn:000040B8                 pop     ebp
.text$mn:000040B9                 retn    4
.text$mn:000040B9 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000040B9
.text$mn:000040B9 _text$mn        ends
.text$mn:000040B9
.text$x:000040BC ; ===========================================================================
.text$x:000040BC
.text$x:000040BC ; Segment type: Pure code
.text$x:000040BC ; Segment permissions: Read/Execute
.text$x:000040BC _text$x         segment para public 'CODE' use32
.text$x:000040BC                 assume cs:_text$x
.text$x:000040BC                 ;org 40BCh
.text$x:000040BC ; COMDAT (pick associative to section at 4064)
.text$x:000040BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000040BC
.text$x:000040BC ; =============== S U B R O U T I N E =======================================
.text$x:000040BC
.text$x:000040BC
.text$x:000040BC __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:000040BC                                         ; DATA XREF: .xdata$x:00007C04o
.text$x:000040BC                 mov     ecx, [ebp-10h]
.text$x:000040BF                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000040BF __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:000040BF
.text$x:000040C4
.text$x:000040C4 ; =============== S U B R O U T I N E =======================================
.text$x:000040C4
.text$x:000040C4
.text$x:000040C4 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:000040C4                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:000040C4
.text$x:000040C4 arg_4           = dword ptr  8
.text$x:000040C4
.text$x:000040C4                 mov     edx, [esp+arg_4]
.text$x:000040C8                 lea     eax, [edx+0Ch]
.text$x:000040CB                 mov     ecx, [edx-8]
.text$x:000040CE                 xor     ecx, eax
.text$x:000040D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040D5                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:000040DA                 jmp     ___CxxFrameHandler3
.text$x:000040DA __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:000040DA
.text$x:000040DA ; ---------------------------------------------------------------------------
.text$x:000040DF                 align 10h
.text$x:000040DF _text$x         ends
.text$x:000040DF
.text$mn:000040E0 ; ===========================================================================
.text$mn:000040E0
.text$mn:000040E0 ; Segment type: Pure code
.text$mn:000040E0 ; Segment permissions: Read/Execute
.text$mn:000040E0 _text$mn        segment para public 'CODE' use32
.text$mn:000040E0                 assume cs:_text$mn
.text$mn:000040E0                 ;org 40E0h
.text$mn:000040E0 ; COMDAT (pick any)
.text$mn:000040E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040E0
.text$mn:000040E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040E0
.text$mn:000040E0 ; Attributes: bp-based frame
.text$mn:000040E0
.text$mn:000040E0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000040E0                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000040E0 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000040E0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p
.text$mn:000040E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p
.text$mn:000040E0
.text$mn:000040E0 var_10          = dword ptr -10h
.text$mn:000040E0 var_C           = dword ptr -0Ch
.text$mn:000040E0 var_4           = dword ptr -4
.text$mn:000040E0
.text$mn:000040E0                 push    ebp
.text$mn:000040E1                 mov     ebp, esp
.text$mn:000040E3                 push    0FFFFFFFFh
.text$mn:000040E5                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000040EA                 mov     eax, large fs:0
.text$mn:000040F0                 push    eax
.text$mn:000040F1                 push    ecx
.text$mn:000040F2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000040F7                 xor     eax, ebp
.text$mn:000040F9                 push    eax
.text$mn:000040FA                 lea     eax, [ebp+var_C]
.text$mn:000040FD                 mov     large fs:0, eax
.text$mn:00004103                 mov     [ebp+var_10], ecx
.text$mn:00004106                 mov     ecx, [ebp+var_10]
.text$mn:00004109                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:0000410E                 mov     [ebp+var_4], 0
.text$mn:00004115                 mov     ecx, [ebp+var_10]
.text$mn:00004118                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:0000411D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004124                 mov     eax, [ebp+var_10]
.text$mn:00004127                 mov     ecx, [ebp+var_C]
.text$mn:0000412A                 mov     large fs:0, ecx
.text$mn:00004131                 pop     ecx
.text$mn:00004132                 mov     esp, ebp
.text$mn:00004134                 pop     ebp
.text$mn:00004135                 retn    4
.text$mn:00004135 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00004135
.text$mn:00004135 _text$mn        ends
.text$mn:00004135
.text$x:00004138 ; ===========================================================================
.text$x:00004138
.text$x:00004138 ; Segment type: Pure code
.text$x:00004138 ; Segment permissions: Read/Execute
.text$x:00004138 _text$x         segment para public 'CODE' use32
.text$x:00004138                 assume cs:_text$x
.text$x:00004138                 ;org 4138h
.text$x:00004138 ; COMDAT (pick associative to section at 40E0)
.text$x:00004138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004138
.text$x:00004138 ; =============== S U B R O U T I N E =======================================
.text$x:00004138
.text$x:00004138
.text$x:00004138 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00004138                                         ; DATA XREF: .xdata$x:00007F24o
.text$x:00004138                 mov     ecx, [ebp-10h]
.text$x:0000413B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000413B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:0000413B
.text$x:00004140
.text$x:00004140 ; =============== S U B R O U T I N E =======================================
.text$x:00004140
.text$x:00004140
.text$x:00004140 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00004140                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00004140
.text$x:00004140 arg_4           = dword ptr  8
.text$x:00004140
.text$x:00004140                 mov     edx, [esp+arg_4]
.text$x:00004144                 lea     eax, [edx+0Ch]
.text$x:00004147                 mov     ecx, [edx-8]
.text$x:0000414A                 xor     ecx, eax
.text$x:0000414C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004151                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00004156                 jmp     ___CxxFrameHandler3
.text$x:00004156 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00004156
.text$x:00004156 ; ---------------------------------------------------------------------------
.text$x:0000415B                 align 4
.text$x:0000415B _text$x         ends
.text$x:0000415B
.text$mn:0000415C ; ===========================================================================
.text$mn:0000415C
.text$mn:0000415C ; Segment type: Pure code
.text$mn:0000415C ; Segment permissions: Read/Execute
.text$mn:0000415C _text$mn        segment para public 'CODE' use32
.text$mn:0000415C                 assume cs:_text$mn
.text$mn:0000415C                 ;org 415Ch
.text$mn:0000415C ; COMDAT (pick any)
.text$mn:0000415C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000415C
.text$mn:0000415C ; =============== S U B R O U T I N E =======================================
.text$mn:0000415C
.text$mn:0000415C ; Attributes: bp-based frame
.text$mn:0000415C
.text$mn:0000415C ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:0000415C                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000415C ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:0000415C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:0000415C
.text$mn:0000415C var_10          = dword ptr -10h
.text$mn:0000415C var_C           = dword ptr -0Ch
.text$mn:0000415C var_4           = dword ptr -4
.text$mn:0000415C
.text$mn:0000415C                 push    ebp
.text$mn:0000415D                 mov     ebp, esp
.text$mn:0000415F                 push    0FFFFFFFFh
.text$mn:00004161                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004166                 mov     eax, large fs:0
.text$mn:0000416C                 push    eax
.text$mn:0000416D                 push    ecx
.text$mn:0000416E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004173                 xor     eax, ebp
.text$mn:00004175                 push    eax
.text$mn:00004176                 lea     eax, [ebp+var_C]
.text$mn:00004179                 mov     large fs:0, eax
.text$mn:0000417F                 mov     [ebp+var_10], ecx
.text$mn:00004182                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004185                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000418A                 mov     [ebp+var_4], 0
.text$mn:00004191                 mov     eax, [ebp+var_10]
.text$mn:00004194                 mov     dword ptr [eax+14h], 0
.text$mn:0000419B                 mov     ecx, [ebp+var_10]
.text$mn:0000419E                 mov     dword ptr [ecx+18h], 0
.text$mn:000041A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041AC                 mov     eax, [ebp+var_10]
.text$mn:000041AF                 mov     ecx, [ebp+var_C]
.text$mn:000041B2                 mov     large fs:0, ecx
.text$mn:000041B9                 pop     ecx
.text$mn:000041BA                 mov     esp, ebp
.text$mn:000041BC                 pop     ebp
.text$mn:000041BD                 retn
.text$mn:000041BD ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000041BD
.text$mn:000041BD ; ---------------------------------------------------------------------------
.text$mn:000041BE                 align 10h
.text$mn:000041BE _text$mn        ends
.text$mn:000041BE
.text$x:000041C0 ; ===========================================================================
.text$x:000041C0
.text$x:000041C0 ; Segment type: Pure code
.text$x:000041C0 ; Segment permissions: Read/Execute
.text$x:000041C0 _text$x         segment para public 'CODE' use32
.text$x:000041C0                 assume cs:_text$x
.text$x:000041C0                 ;org 41C0h
.text$x:000041C0 ; COMDAT (pick associative to section at 415C)
.text$x:000041C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000041C0
.text$x:000041C0 ; =============== S U B R O U T I N E =======================================
.text$x:000041C0
.text$x:000041C0
.text$x:000041C0 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000041C0                                         ; DATA XREF: .xdata$x:00007BACo
.text$x:000041C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000041C3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000041C3 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000041C3
.text$x:000041C8
.text$x:000041C8 ; =============== S U B R O U T I N E =======================================
.text$x:000041C8
.text$x:000041C8
.text$x:000041C8 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000041C8                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000041C8
.text$x:000041C8 arg_4           = dword ptr  8
.text$x:000041C8
.text$x:000041C8                 mov     edx, [esp+arg_4]
.text$x:000041CC                 lea     eax, [edx+0Ch]
.text$x:000041CF                 mov     ecx, [edx-8]
.text$x:000041D2                 xor     ecx, eax
.text$x:000041D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041D9                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000041DE                 jmp     ___CxxFrameHandler3
.text$x:000041DE __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000041DE
.text$x:000041DE ; ---------------------------------------------------------------------------
.text$x:000041E3                 align 4
.text$x:000041E3 _text$x         ends
.text$x:000041E3
.text$mn:000041E4 ; ===========================================================================
.text$mn:000041E4
.text$mn:000041E4 ; Segment type: Pure code
.text$mn:000041E4 ; Segment permissions: Read/Execute
.text$mn:000041E4 _text$mn        segment para public 'CODE' use32
.text$mn:000041E4                 assume cs:_text$mn
.text$mn:000041E4                 ;org 41E4h
.text$mn:000041E4 ; COMDAT (pick any)
.text$mn:000041E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041E4
.text$mn:000041E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000041E4
.text$mn:000041E4 ; Attributes: bp-based frame
.text$mn:000041E4
.text$mn:000041E4 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000041E4                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000041E4 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000041E4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000041E4
.text$mn:000041E4 var_10          = dword ptr -10h
.text$mn:000041E4 var_C           = dword ptr -0Ch
.text$mn:000041E4 var_4           = dword ptr -4
.text$mn:000041E4
.text$mn:000041E4                 push    ebp
.text$mn:000041E5                 mov     ebp, esp
.text$mn:000041E7                 push    0FFFFFFFFh
.text$mn:000041E9                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000041EE                 mov     eax, large fs:0
.text$mn:000041F4                 push    eax
.text$mn:000041F5                 push    ecx
.text$mn:000041F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000041FB                 xor     eax, ebp
.text$mn:000041FD                 push    eax
.text$mn:000041FE                 lea     eax, [ebp+var_C]
.text$mn:00004201                 mov     large fs:0, eax
.text$mn:00004207                 mov     [ebp+var_10], ecx
.text$mn:0000420A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000420D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00004212                 mov     [ebp+var_4], 0
.text$mn:00004219                 mov     eax, [ebp+var_10]
.text$mn:0000421C                 mov     dword ptr [eax+14h], 0
.text$mn:00004223                 mov     ecx, [ebp+var_10]
.text$mn:00004226                 mov     dword ptr [ecx+18h], 0
.text$mn:0000422D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004234                 mov     eax, [ebp+var_10]
.text$mn:00004237                 mov     ecx, [ebp+var_C]
.text$mn:0000423A                 mov     large fs:0, ecx
.text$mn:00004241                 pop     ecx
.text$mn:00004242                 mov     esp, ebp
.text$mn:00004244                 pop     ebp
.text$mn:00004245                 retn
.text$mn:00004245 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00004245
.text$mn:00004245 ; ---------------------------------------------------------------------------
.text$mn:00004246                 align 4
.text$mn:00004246 _text$mn        ends
.text$mn:00004246
.text$x:00004248 ; ===========================================================================
.text$x:00004248
.text$x:00004248 ; Segment type: Pure code
.text$x:00004248 ; Segment permissions: Read/Execute
.text$x:00004248 _text$x         segment para public 'CODE' use32
.text$x:00004248                 assume cs:_text$x
.text$x:00004248                 ;org 4248h
.text$x:00004248 ; COMDAT (pick associative to section at 41E4)
.text$x:00004248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004248
.text$x:00004248 ; =============== S U B R O U T I N E =======================================
.text$x:00004248
.text$x:00004248
.text$x:00004248 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004248                                         ; DATA XREF: .xdata$x:00007ECCo
.text$x:00004248                 mov     ecx, [ebp-10h]  ; this
.text$x:0000424B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000424B __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000424B
.text$x:00004250
.text$x:00004250 ; =============== S U B R O U T I N E =======================================
.text$x:00004250
.text$x:00004250
.text$x:00004250 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004250                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004250
.text$x:00004250 arg_4           = dword ptr  8
.text$x:00004250
.text$x:00004250                 mov     edx, [esp+arg_4]
.text$x:00004254                 lea     eax, [edx+0Ch]
.text$x:00004257                 mov     ecx, [edx-8]
.text$x:0000425A                 xor     ecx, eax
.text$x:0000425C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004261                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00004266                 jmp     ___CxxFrameHandler3
.text$x:00004266 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00004266
.text$x:00004266 ; ---------------------------------------------------------------------------
.text$x:0000426B                 align 4
.text$x:0000426B _text$x         ends
.text$x:0000426B
.text$mn:0000426C ; ===========================================================================
.text$mn:0000426C
.text$mn:0000426C ; Segment type: Pure code
.text$mn:0000426C ; Segment permissions: Read/Execute
.text$mn:0000426C _text$mn        segment para public 'CODE' use32
.text$mn:0000426C                 assume cs:_text$mn
.text$mn:0000426C                 ;org 426Ch
.text$mn:0000426C ; COMDAT (pick any)
.text$mn:0000426C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000426C
.text$mn:0000426C ; =============== S U B R O U T I N E =======================================
.text$mn:0000426C
.text$mn:0000426C ; Attributes: bp-based frame
.text$mn:0000426C
.text$mn:0000426C ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:0000426C                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:0000426C ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:0000426C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:0000426C
.text$mn:0000426C var_4           = dword ptr -4
.text$mn:0000426C
.text$mn:0000426C                 push    ebp
.text$mn:0000426D                 mov     ebp, esp
.text$mn:0000426F                 push    ecx
.text$mn:00004270                 mov     [ebp+var_4], ecx
.text$mn:00004273                 mov     ecx, [ebp+var_4]
.text$mn:00004276                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:0000427B                 mov     eax, [ebp+var_4]
.text$mn:0000427E                 mov     esp, ebp
.text$mn:00004280                 pop     ebp
.text$mn:00004281                 retn
.text$mn:00004281 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00004281
.text$mn:00004281 ; ---------------------------------------------------------------------------
.text$mn:00004282                 align 4
.text$mn:00004282 _text$mn        ends
.text$mn:00004282
.text$mn:00004284 ; ===========================================================================
.text$mn:00004284
.text$mn:00004284 ; Segment type: Pure code
.text$mn:00004284 ; Segment permissions: Read/Execute
.text$mn:00004284 _text$mn        segment para public 'CODE' use32
.text$mn:00004284                 assume cs:_text$mn
.text$mn:00004284                 ;org 4284h
.text$mn:00004284 ; COMDAT (pick any)
.text$mn:00004284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004284
.text$mn:00004284 ; =============== S U B R O U T I N E =======================================
.text$mn:00004284
.text$mn:00004284 ; Attributes: bp-based frame
.text$mn:00004284
.text$mn:00004284 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00004284                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004284 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00004284                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00004284
.text$mn:00004284 var_4           = dword ptr -4
.text$mn:00004284 arg_0           = dword ptr  8
.text$mn:00004284
.text$mn:00004284                 push    ebp
.text$mn:00004285                 mov     ebp, esp
.text$mn:00004287                 push    ecx
.text$mn:00004288                 mov     [ebp+var_4], ecx
.text$mn:0000428B                 mov     eax, [ebp+arg_0]
.text$mn:0000428E                 push    eax
.text$mn:0000428F                 mov     ecx, [ebp+var_4]
.text$mn:00004292                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004297                 mov     eax, [ebp+var_4]
.text$mn:0000429A                 mov     esp, ebp
.text$mn:0000429C                 pop     ebp
.text$mn:0000429D                 retn    4
.text$mn:0000429D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:0000429D
.text$mn:0000429D _text$mn        ends
.text$mn:0000429D
.text$mn:000042A0 ; ===========================================================================
.text$mn:000042A0
.text$mn:000042A0 ; Segment type: Pure code
.text$mn:000042A0 ; Segment permissions: Read/Execute
.text$mn:000042A0 _text$mn        segment para public 'CODE' use32
.text$mn:000042A0                 assume cs:_text$mn
.text$mn:000042A0                 ;org 42A0h
.text$mn:000042A0 ; COMDAT (pick any)
.text$mn:000042A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042A0
.text$mn:000042A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000042A0
.text$mn:000042A0 ; Attributes: bp-based frame
.text$mn:000042A0
.text$mn:000042A0 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:000042A0                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:000042A0 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:000042A0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:000042A0
.text$mn:000042A0 var_4           = dword ptr -4
.text$mn:000042A0
.text$mn:000042A0                 push    ebp
.text$mn:000042A1                 mov     ebp, esp
.text$mn:000042A3                 push    ecx
.text$mn:000042A4                 mov     [ebp+var_4], ecx
.text$mn:000042A7                 mov     ecx, [ebp+var_4]
.text$mn:000042AA                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000042AF                 mov     eax, [ebp+var_4]
.text$mn:000042B2                 mov     esp, ebp
.text$mn:000042B4                 pop     ebp
.text$mn:000042B5                 retn
.text$mn:000042B5 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:000042B5
.text$mn:000042B5 ; ---------------------------------------------------------------------------
.text$mn:000042B6                 align 4
.text$mn:000042B6 _text$mn        ends
.text$mn:000042B6
.text$mn:000042B8 ; ===========================================================================
.text$mn:000042B8
.text$mn:000042B8 ; Segment type: Pure code
.text$mn:000042B8 ; Segment permissions: Read/Execute
.text$mn:000042B8 _text$mn        segment para public 'CODE' use32
.text$mn:000042B8                 assume cs:_text$mn
.text$mn:000042B8                 ;org 42B8h
.text$mn:000042B8 ; COMDAT (pick any)
.text$mn:000042B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042B8
.text$mn:000042B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042B8
.text$mn:000042B8 ; Attributes: bp-based frame
.text$mn:000042B8
.text$mn:000042B8 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:000042B8                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:000042B8 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:000042B8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:000042B8
.text$mn:000042B8 var_4           = dword ptr -4
.text$mn:000042B8
.text$mn:000042B8                 push    ebp
.text$mn:000042B9                 mov     ebp, esp
.text$mn:000042BB                 push    ecx
.text$mn:000042BC                 mov     [ebp+var_4], ecx
.text$mn:000042BF                 mov     eax, [ebp+var_4]
.text$mn:000042C2                 mov     esp, ebp
.text$mn:000042C4                 pop     ebp
.text$mn:000042C5                 retn
.text$mn:000042C5 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:000042C5
.text$mn:000042C5 ; ---------------------------------------------------------------------------
.text$mn:000042C6                 align 4
.text$mn:000042C6 _text$mn        ends
.text$mn:000042C6
.text$mn:000042C8 ; ===========================================================================
.text$mn:000042C8
.text$mn:000042C8 ; Segment type: Pure code
.text$mn:000042C8 ; Segment permissions: Read/Execute
.text$mn:000042C8 _text$mn        segment para public 'CODE' use32
.text$mn:000042C8                 assume cs:_text$mn
.text$mn:000042C8                 ;org 42C8h
.text$mn:000042C8 ; COMDAT (pick any)
.text$mn:000042C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042C8
.text$mn:000042C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042C8
.text$mn:000042C8 ; Attributes: bp-based frame
.text$mn:000042C8
.text$mn:000042C8 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:000042C8                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:000042C8 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:000042C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:000042C8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:000042C8
.text$mn:000042C8 var_4           = dword ptr -4
.text$mn:000042C8
.text$mn:000042C8                 push    ebp
.text$mn:000042C9                 mov     ebp, esp
.text$mn:000042CB                 push    ecx
.text$mn:000042CC                 mov     [ebp+var_4], ecx
.text$mn:000042CF                 mov     eax, [ebp+var_4]
.text$mn:000042D2                 mov     esp, ebp
.text$mn:000042D4                 pop     ebp
.text$mn:000042D5                 retn
.text$mn:000042D5 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:000042D5
.text$mn:000042D5 ; ---------------------------------------------------------------------------
.text$mn:000042D6                 align 4
.text$mn:000042D6 _text$mn        ends
.text$mn:000042D6
.text$mn:000042D8 ; ===========================================================================
.text$mn:000042D8
.text$mn:000042D8 ; Segment type: Pure code
.text$mn:000042D8 ; Segment permissions: Read/Execute
.text$mn:000042D8 _text$mn        segment para public 'CODE' use32
.text$mn:000042D8                 assume cs:_text$mn
.text$mn:000042D8                 ;org 42D8h
.text$mn:000042D8 ; COMDAT (pick any)
.text$mn:000042D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042D8
.text$mn:000042D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042D8
.text$mn:000042D8 ; Attributes: bp-based frame
.text$mn:000042D8
.text$mn:000042D8 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:000042D8                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:000042D8 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:000042D8                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:000042D8                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:000042D8
.text$mn:000042D8 var_4           = dword ptr -4
.text$mn:000042D8
.text$mn:000042D8                 push    ebp
.text$mn:000042D9                 mov     ebp, esp
.text$mn:000042DB                 push    ecx
.text$mn:000042DC                 mov     [ebp+var_4], ecx
.text$mn:000042DF                 mov     eax, [ebp+var_4]
.text$mn:000042E2                 mov     esp, ebp
.text$mn:000042E4                 pop     ebp
.text$mn:000042E5                 retn    4
.text$mn:000042E5 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:000042E5
.text$mn:000042E5 _text$mn        ends
.text$mn:000042E5
.text$mn:000042E8 ; ===========================================================================
.text$mn:000042E8
.text$mn:000042E8 ; Segment type: Pure code
.text$mn:000042E8 ; Segment permissions: Read/Execute
.text$mn:000042E8 _text$mn        segment para public 'CODE' use32
.text$mn:000042E8                 assume cs:_text$mn
.text$mn:000042E8                 ;org 42E8h
.text$mn:000042E8 ; COMDAT (pick any)
.text$mn:000042E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042E8
.text$mn:000042E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042E8
.text$mn:000042E8 ; Attributes: bp-based frame
.text$mn:000042E8
.text$mn:000042E8 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000042E8                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:000042E8 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:000042E8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp
.text$mn:000042E8
.text$mn:000042E8 var_4           = dword ptr -4
.text$mn:000042E8
.text$mn:000042E8                 push    ebp
.text$mn:000042E9                 mov     ebp, esp
.text$mn:000042EB                 push    ecx
.text$mn:000042EC                 mov     [ebp+var_4], ecx
.text$mn:000042EF                 mov     eax, [ebp+var_4]
.text$mn:000042F2                 mov     esp, ebp
.text$mn:000042F4                 pop     ebp
.text$mn:000042F5                 retn
.text$mn:000042F5 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:000042F5
.text$mn:000042F5 ; ---------------------------------------------------------------------------
.text$mn:000042F6                 align 4
.text$mn:000042F6 _text$mn        ends
.text$mn:000042F6
.text$mn:000042F8 ; ===========================================================================
.text$mn:000042F8
.text$mn:000042F8 ; Segment type: Pure code
.text$mn:000042F8 ; Segment permissions: Read/Execute
.text$mn:000042F8 _text$mn        segment para public 'CODE' use32
.text$mn:000042F8                 assume cs:_text$mn
.text$mn:000042F8                 ;org 42F8h
.text$mn:000042F8 ; COMDAT (pick any)
.text$mn:000042F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042F8
.text$mn:000042F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042F8
.text$mn:000042F8 ; Attributes: bp-based frame
.text$mn:000042F8
.text$mn:000042F8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000042F8                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000042F8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000042F8                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:000042F8                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:000042F8
.text$mn:000042F8 var_14          = dword ptr -14h
.text$mn:000042F8 var_D           = byte ptr -0Dh
.text$mn:000042F8 var_C           = dword ptr -0Ch
.text$mn:000042F8 var_4           = dword ptr -4
.text$mn:000042F8 Str             = dword ptr  8
.text$mn:000042F8
.text$mn:000042F8                 push    ebp
.text$mn:000042F9                 mov     ebp, esp
.text$mn:000042FB                 push    0FFFFFFFFh
.text$mn:000042FD                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00004302                 mov     eax, large fs:0
.text$mn:00004308                 push    eax
.text$mn:00004309                 sub     esp, 8
.text$mn:0000430C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004311                 xor     eax, ebp
.text$mn:00004313                 push    eax
.text$mn:00004314                 lea     eax, [ebp+var_C]
.text$mn:00004317                 mov     large fs:0, eax
.text$mn:0000431D                 mov     [ebp+var_14], ecx
.text$mn:00004320                 lea     ecx, [ebp+var_D]
.text$mn:00004323                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004328                 push    eax
.text$mn:00004329                 mov     ecx, [ebp+var_14]
.text$mn:0000432C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004331                 mov     [ebp+var_4], 0
.text$mn:00004338                 push    0               ; Size
.text$mn:0000433A                 push    0               ; char
.text$mn:0000433C                 mov     ecx, [ebp+var_14]
.text$mn:0000433F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004344                 mov     eax, [ebp+Str]
.text$mn:00004347                 push    eax             ; Str
.text$mn:00004348                 mov     ecx, [ebp+var_14]
.text$mn:0000434B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00004350                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004357                 mov     eax, [ebp+var_14]
.text$mn:0000435A                 mov     ecx, [ebp+var_C]
.text$mn:0000435D                 mov     large fs:0, ecx
.text$mn:00004364                 pop     ecx
.text$mn:00004365                 mov     esp, ebp
.text$mn:00004367                 pop     ebp
.text$mn:00004368                 retn    4
.text$mn:00004368 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00004368
.text$mn:00004368 ; ---------------------------------------------------------------------------
.text$mn:0000436B                 align 4
.text$mn:0000436B _text$mn        ends
.text$mn:0000436B
.text$x:0000436C ; ===========================================================================
.text$x:0000436C
.text$x:0000436C ; Segment type: Pure code
.text$x:0000436C ; Segment permissions: Read/Execute
.text$x:0000436C _text$x         segment para public 'CODE' use32
.text$x:0000436C                 assume cs:_text$x
.text$x:0000436C                 ;org 436Ch
.text$x:0000436C ; COMDAT (pick associative to section at 42F8)
.text$x:0000436C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000436C
.text$x:0000436C ; =============== S U B R O U T I N E =======================================
.text$x:0000436C
.text$x:0000436C
.text$x:0000436C __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:0000436C                                         ; DATA XREF: .xdata$x:00007C5Co
.text$x:0000436C                 mov     ecx, [ebp-14h]
.text$x:0000436F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000436F __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:0000436F
.text$x:00004374
.text$x:00004374 ; =============== S U B R O U T I N E =======================================
.text$x:00004374
.text$x:00004374
.text$x:00004374 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00004374                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00004374
.text$x:00004374 arg_4           = dword ptr  8
.text$x:00004374
.text$x:00004374                 mov     edx, [esp+arg_4]
.text$x:00004378                 lea     eax, [edx+0Ch]
.text$x:0000437B                 mov     ecx, [edx-0Ch]
.text$x:0000437E                 xor     ecx, eax
.text$x:00004380                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004385                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:0000438A                 jmp     ___CxxFrameHandler3
.text$x:0000438A __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:0000438A
.text$x:0000438A ; ---------------------------------------------------------------------------
.text$x:0000438F                 align 10h
.text$x:0000438F _text$x         ends
.text$x:0000438F
.text$mn:00004390 ; ===========================================================================
.text$mn:00004390
.text$mn:00004390 ; Segment type: Pure code
.text$mn:00004390 ; Segment permissions: Read/Execute
.text$mn:00004390 _text$mn        segment para public 'CODE' use32
.text$mn:00004390                 assume cs:_text$mn
.text$mn:00004390                 ;org 4390h
.text$mn:00004390 ; COMDAT (pick any)
.text$mn:00004390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004390
.text$mn:00004390 ; =============== S U B R O U T I N E =======================================
.text$mn:00004390
.text$mn:00004390 ; Attributes: bp-based frame
.text$mn:00004390
.text$mn:00004390 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004390                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00004390 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00004390                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+858p
.text$mn:00004390                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+A40p ...
.text$mn:00004390
.text$mn:00004390 var_14          = dword ptr -14h
.text$mn:00004390 var_E           = byte ptr -0Eh
.text$mn:00004390 var_D           = byte ptr -0Dh
.text$mn:00004390 var_C           = dword ptr -0Ch
.text$mn:00004390 var_4           = dword ptr -4
.text$mn:00004390 arg_0           = dword ptr  8
.text$mn:00004390
.text$mn:00004390                 push    ebp
.text$mn:00004391                 mov     ebp, esp
.text$mn:00004393                 push    0FFFFFFFFh
.text$mn:00004395                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:0000439A                 mov     eax, large fs:0
.text$mn:000043A0                 push    eax
.text$mn:000043A1                 sub     esp, 8
.text$mn:000043A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000043A9                 xor     eax, ebp
.text$mn:000043AB                 push    eax
.text$mn:000043AC                 lea     eax, [ebp+var_C]
.text$mn:000043AF                 mov     large fs:0, eax
.text$mn:000043B5                 mov     [ebp+var_14], ecx
.text$mn:000043B8                 lea     eax, [ebp+var_D]
.text$mn:000043BB                 push    eax
.text$mn:000043BC                 lea     ecx, [ebp+var_E]
.text$mn:000043BF                 push    ecx
.text$mn:000043C0                 mov     ecx, [ebp+arg_0]
.text$mn:000043C3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000043C8                 mov     ecx, eax
.text$mn:000043CA                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:000043CF                 push    eax
.text$mn:000043D0                 mov     ecx, [ebp+var_14]
.text$mn:000043D3                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000043D8                 mov     [ebp+var_4], 0
.text$mn:000043DF                 push    0
.text$mn:000043E1                 push    0
.text$mn:000043E3                 mov     ecx, [ebp+var_14]
.text$mn:000043E6                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000043EB                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000043F1                 push    edx
.text$mn:000043F2                 push    0
.text$mn:000043F4                 mov     eax, [ebp+arg_0]
.text$mn:000043F7                 push    eax
.text$mn:000043F8                 mov     ecx, [ebp+var_14]
.text$mn:000043FB                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00004400                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004407                 mov     eax, [ebp+var_14]
.text$mn:0000440A                 mov     ecx, [ebp+var_C]
.text$mn:0000440D                 mov     large fs:0, ecx
.text$mn:00004414                 pop     ecx
.text$mn:00004415                 mov     esp, ebp
.text$mn:00004417                 pop     ebp
.text$mn:00004418                 retn    4
.text$mn:00004418 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00004418
.text$mn:00004418 ; ---------------------------------------------------------------------------
.text$mn:0000441B                 align 4
.text$mn:0000441B _text$mn        ends
.text$mn:0000441B
.text$x:0000441C ; ===========================================================================
.text$x:0000441C
.text$x:0000441C ; Segment type: Pure code
.text$x:0000441C ; Segment permissions: Read/Execute
.text$x:0000441C _text$x         segment para public 'CODE' use32
.text$x:0000441C                 assume cs:_text$x
.text$x:0000441C                 ;org 441Ch
.text$x:0000441C ; COMDAT (pick associative to section at 4390)
.text$x:0000441C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000441C
.text$x:0000441C ; =============== S U B R O U T I N E =======================================
.text$x:0000441C
.text$x:0000441C
.text$x:0000441C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000441C                                         ; DATA XREF: .xdata$x:00007F7Co
.text$x:0000441C                 mov     ecx, [ebp-14h]
.text$x:0000441F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000441F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000441F
.text$x:00004424
.text$x:00004424 ; =============== S U B R O U T I N E =======================================
.text$x:00004424
.text$x:00004424
.text$x:00004424 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00004424                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00004424
.text$x:00004424 arg_4           = dword ptr  8
.text$x:00004424
.text$x:00004424                 mov     edx, [esp+arg_4]
.text$x:00004428                 lea     eax, [edx+0Ch]
.text$x:0000442B                 mov     ecx, [edx-0Ch]
.text$x:0000442E                 xor     ecx, eax
.text$x:00004430                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004435                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:0000443A                 jmp     ___CxxFrameHandler3
.text$x:0000443A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:0000443A
.text$x:0000443A ; ---------------------------------------------------------------------------
.text$x:0000443F                 align 10h
.text$x:0000443F _text$x         ends
.text$x:0000443F
.text$mn:00004440 ; ===========================================================================
.text$mn:00004440
.text$mn:00004440 ; Segment type: Pure code
.text$mn:00004440 ; Segment permissions: Read/Execute
.text$mn:00004440 _text$mn        segment para public 'CODE' use32
.text$mn:00004440                 assume cs:_text$mn
.text$mn:00004440                 ;org 4440h
.text$mn:00004440 ; COMDAT (pick any)
.text$mn:00004440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004440
.text$mn:00004440 ; =============== S U B R O U T I N E =======================================
.text$mn:00004440
.text$mn:00004440 ; Attributes: bp-based frame
.text$mn:00004440
.text$mn:00004440 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00004440                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00004440 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00004440                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+637p
.text$mn:00004440                                         ; Style::setKeywords(wchar_t const *)+52p
.text$mn:00004440
.text$mn:00004440 var_14          = dword ptr -14h
.text$mn:00004440 var_D           = byte ptr -0Dh
.text$mn:00004440 var_C           = dword ptr -0Ch
.text$mn:00004440 var_4           = dword ptr -4
.text$mn:00004440 Str             = dword ptr  8
.text$mn:00004440
.text$mn:00004440                 push    ebp
.text$mn:00004441                 mov     ebp, esp
.text$mn:00004443                 push    0FFFFFFFFh
.text$mn:00004445                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000444A                 mov     eax, large fs:0
.text$mn:00004450                 push    eax
.text$mn:00004451                 sub     esp, 8
.text$mn:00004454                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004459                 xor     eax, ebp
.text$mn:0000445B                 push    eax
.text$mn:0000445C                 lea     eax, [ebp+var_C]
.text$mn:0000445F                 mov     large fs:0, eax
.text$mn:00004465                 mov     [ebp+var_14], ecx
.text$mn:00004468                 lea     ecx, [ebp+var_D]
.text$mn:0000446B                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004470                 push    eax
.text$mn:00004471                 mov     ecx, [ebp+var_14]
.text$mn:00004474                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00004479                 mov     [ebp+var_4], 0
.text$mn:00004480                 push    0
.text$mn:00004482                 push    0
.text$mn:00004484                 mov     ecx, [ebp+var_14]
.text$mn:00004487                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000448C                 mov     eax, [ebp+Str]
.text$mn:0000448F                 push    eax             ; Str
.text$mn:00004490                 mov     ecx, [ebp+var_14]
.text$mn:00004493                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00004498                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000449F                 mov     eax, [ebp+var_14]
.text$mn:000044A2                 mov     ecx, [ebp+var_C]
.text$mn:000044A5                 mov     large fs:0, ecx
.text$mn:000044AC                 pop     ecx
.text$mn:000044AD                 mov     esp, ebp
.text$mn:000044AF                 pop     ebp
.text$mn:000044B0                 retn    4
.text$mn:000044B0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000044B0
.text$mn:000044B0 ; ---------------------------------------------------------------------------
.text$mn:000044B3                 align 4
.text$mn:000044B3 _text$mn        ends
.text$mn:000044B3
.text$x:000044B4 ; ===========================================================================
.text$x:000044B4
.text$x:000044B4 ; Segment type: Pure code
.text$x:000044B4 ; Segment permissions: Read/Execute
.text$x:000044B4 _text$x         segment para public 'CODE' use32
.text$x:000044B4                 assume cs:_text$x
.text$x:000044B4                 ;org 44B4h
.text$x:000044B4 ; COMDAT (pick associative to section at 4440)
.text$x:000044B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044B4
.text$x:000044B4 ; =============== S U B R O U T I N E =======================================
.text$x:000044B4
.text$x:000044B4
.text$x:000044B4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000044B4                                         ; DATA XREF: .xdata$x:00007FA8o
.text$x:000044B4                 mov     ecx, [ebp-14h]
.text$x:000044B7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000044B7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000044B7
.text$x:000044BC
.text$x:000044BC ; =============== S U B R O U T I N E =======================================
.text$x:000044BC
.text$x:000044BC
.text$x:000044BC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000044BC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000044BC
.text$x:000044BC arg_4           = dword ptr  8
.text$x:000044BC
.text$x:000044BC                 mov     edx, [esp+arg_4]
.text$x:000044C0                 lea     eax, [edx+0Ch]
.text$x:000044C3                 mov     ecx, [edx-0Ch]
.text$x:000044C6                 xor     ecx, eax
.text$x:000044C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044CD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000044D2                 jmp     ___CxxFrameHandler3
.text$x:000044D2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000044D2
.text$x:000044D2 ; ---------------------------------------------------------------------------
.text$x:000044D7                 align 4
.text$x:000044D7 _text$x         ends
.text$x:000044D7
.text$mn:000044D8 ; ===========================================================================
.text$mn:000044D8
.text$mn:000044D8 ; Segment type: Pure code
.text$mn:000044D8 ; Segment permissions: Read/Execute
.text$mn:000044D8 _text$mn        segment para public 'CODE' use32
.text$mn:000044D8                 assume cs:_text$mn
.text$mn:000044D8                 ;org 44D8h
.text$mn:000044D8 ; COMDAT (pick any)
.text$mn:000044D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044D8
.text$mn:000044D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000044D8
.text$mn:000044D8 ; Attributes: bp-based frame
.text$mn:000044D8
.text$mn:000044D8 ; public: __thiscall ColourPicker::ColourPicker(void)
.text$mn:000044D8                 public ??0ColourPicker@@QAE@XZ
.text$mn:000044D8 ??0ColourPicker@@QAE@XZ proc near       ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+3A2p
.text$mn:000044D8                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+3FEp
.text$mn:000044D8
.text$mn:000044D8 var_10          = dword ptr -10h
.text$mn:000044D8 var_C           = dword ptr -0Ch
.text$mn:000044D8 var_4           = dword ptr -4
.text$mn:000044D8
.text$mn:000044D8                 push    ebp
.text$mn:000044D9                 mov     ebp, esp
.text$mn:000044DB                 push    0FFFFFFFFh
.text$mn:000044DD                 push    offset __ehhandler$??0ColourPicker@@QAE@XZ
.text$mn:000044E2                 mov     eax, large fs:0
.text$mn:000044E8                 push    eax
.text$mn:000044E9                 push    ecx
.text$mn:000044EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000044EF                 xor     eax, ebp
.text$mn:000044F1                 push    eax
.text$mn:000044F2                 lea     eax, [ebp+var_C]
.text$mn:000044F5                 mov     large fs:0, eax
.text$mn:000044FB                 mov     [ebp+var_10], ecx
.text$mn:000044FE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004501                 call    ??0Window@@QAE@XZ ; Window::Window(void)
.text$mn:00004506                 mov     [ebp+var_4], 0
.text$mn:0000450D                 mov     eax, [ebp+var_10]
.text$mn:00004510                 mov     dword ptr [eax], offset ??_7ColourPicker@@6B@ ; const ColourPicker::`vftable'
.text$mn:00004516                 mov     ecx, [ebp+var_10]
.text$mn:00004519                 mov     dword ptr [ecx+10h], 0FFh
.text$mn:00004520                 mov     edx, [ebp+var_10]
.text$mn:00004523                 mov     dword ptr [edx+18h], 0
.text$mn:0000452A                 mov     eax, [ebp+var_10]
.text$mn:0000452D                 mov     byte ptr [eax+1Ch], 1
.text$mn:00004531                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004538                 mov     eax, [ebp+var_10]
.text$mn:0000453B                 mov     ecx, [ebp+var_C]
.text$mn:0000453E                 mov     large fs:0, ecx
.text$mn:00004545                 pop     ecx
.text$mn:00004546                 mov     esp, ebp
.text$mn:00004548                 pop     ebp
.text$mn:00004549                 retn
.text$mn:00004549 ??0ColourPicker@@QAE@XZ endp
.text$mn:00004549
.text$mn:00004549 ; ---------------------------------------------------------------------------
.text$mn:0000454A                 align 4
.text$mn:0000454A _text$mn        ends
.text$mn:0000454A
.text$x:0000454C ; ===========================================================================
.text$x:0000454C
.text$x:0000454C ; Segment type: Pure code
.text$x:0000454C ; Segment permissions: Read/Execute
.text$x:0000454C _text$x         segment para public 'CODE' use32
.text$x:0000454C                 assume cs:_text$x
.text$x:0000454C                 ;org 454Ch
.text$x:0000454C ; COMDAT (pick associative to section at 44D8)
.text$x:0000454C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000454C
.text$x:0000454C ; =============== S U B R O U T I N E =======================================
.text$x:0000454C
.text$x:0000454C
.text$x:0000454C __unwindfunclet$??0ColourPicker@@QAE@XZ$0 proc near
.text$x:0000454C                                         ; DATA XREF: .xdata$x:00007B28o
.text$x:0000454C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000454F                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:0000454F __unwindfunclet$??0ColourPicker@@QAE@XZ$0 endp
.text$x:0000454F
.text$x:00004554
.text$x:00004554 ; =============== S U B R O U T I N E =======================================
.text$x:00004554
.text$x:00004554
.text$x:00004554 __ehhandler$??0ColourPicker@@QAE@XZ proc near
.text$x:00004554                                         ; DATA XREF: ColourPicker::ColourPicker(void)+5o
.text$x:00004554
.text$x:00004554 arg_4           = dword ptr  8
.text$x:00004554
.text$x:00004554                 mov     edx, [esp+arg_4]
.text$x:00004558                 lea     eax, [edx+0Ch]
.text$x:0000455B                 mov     ecx, [edx-8]
.text$x:0000455E                 xor     ecx, eax
.text$x:00004560                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004565                 mov     eax, offset __ehfuncinfo$??0ColourPicker@@QAE@XZ
.text$x:0000456A                 jmp     ___CxxFrameHandler3
.text$x:0000456A __ehhandler$??0ColourPicker@@QAE@XZ endp
.text$x:0000456A
.text$x:0000456A ; ---------------------------------------------------------------------------
.text$x:0000456F                 align 10h
.text$x:0000456F _text$x         ends
.text$x:0000456F
.text$mn:00004570 ; ===========================================================================
.text$mn:00004570
.text$mn:00004570 ; Segment type: Pure code
.text$mn:00004570 ; Segment permissions: Read/Execute
.text$mn:00004570 _text$mn        segment para public 'CODE' use32
.text$mn:00004570                 assume cs:_text$mn
.text$mn:00004570                 ;org 4570h
.text$mn:00004570 ; COMDAT (pick any)
.text$mn:00004570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004570
.text$mn:00004570 ; =============== S U B R O U T I N E =======================================
.text$mn:00004570
.text$mn:00004570 ; Attributes: bp-based frame
.text$mn:00004570
.text$mn:00004570 ; _DWORD __thiscall Window::Window(Window *__hidden this)
.text$mn:00004570                 public ??0Window@@QAE@XZ
.text$mn:00004570 ??0Window@@QAE@XZ proc near             ; CODE XREF: ColourPicker::ColourPicker(void)+29p
.text$mn:00004570
.text$mn:00004570 var_4           = dword ptr -4
.text$mn:00004570
.text$mn:00004570                 push    ebp
.text$mn:00004571                 mov     ebp, esp
.text$mn:00004573                 push    ecx
.text$mn:00004574                 mov     [ebp+var_4], ecx
.text$mn:00004577                 mov     eax, [ebp+var_4]
.text$mn:0000457A                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00004580                 mov     ecx, [ebp+var_4]
.text$mn:00004583                 mov     dword ptr [ecx+4], 0
.text$mn:0000458A                 mov     edx, [ebp+var_4]
.text$mn:0000458D                 mov     dword ptr [edx+8], 0
.text$mn:00004594                 mov     eax, [ebp+var_4]
.text$mn:00004597                 mov     dword ptr [eax+0Ch], 0
.text$mn:0000459E                 mov     eax, [ebp+var_4]
.text$mn:000045A1                 mov     esp, ebp
.text$mn:000045A3                 pop     ebp
.text$mn:000045A4                 retn
.text$mn:000045A4 ??0Window@@QAE@XZ endp
.text$mn:000045A4
.text$mn:000045A4 ; ---------------------------------------------------------------------------
.text$mn:000045A5                 align 4
.text$mn:000045A5 _text$mn        ends
.text$mn:000045A5
.text$mn:000045A8 ; ===========================================================================
.text$mn:000045A8
.text$mn:000045A8 ; Segment type: Pure code
.text$mn:000045A8 ; Segment permissions: Read/Execute
.text$mn:000045A8 _text$mn        segment para public 'CODE' use32
.text$mn:000045A8                 assume cs:_text$mn
.text$mn:000045A8                 ;org 45A8h
.text$mn:000045A8 ; COMDAT (pick any)
.text$mn:000045A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045A8
.text$mn:000045A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000045A8
.text$mn:000045A8 ; Attributes: bp-based frame
.text$mn:000045A8
.text$mn:000045A8 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000045A8                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000045A8 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000045A8                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000045A8                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:000045A8
.text$mn:000045A8 var_4           = dword ptr -4
.text$mn:000045A8
.text$mn:000045A8                 push    ebp
.text$mn:000045A9                 mov     ebp, esp
.text$mn:000045AB                 push    ecx
.text$mn:000045AC                 mov     [ebp+var_4], ecx
.text$mn:000045AF                 mov     eax, [ebp+var_4]
.text$mn:000045B2                 mov     dword ptr [eax], 0
.text$mn:000045B8                 mov     eax, [ebp+var_4]
.text$mn:000045BB                 mov     esp, ebp
.text$mn:000045BD                 pop     ebp
.text$mn:000045BE                 retn
.text$mn:000045BE ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000045BE
.text$mn:000045BE ; ---------------------------------------------------------------------------
.text$mn:000045BF                 align 10h
.text$mn:000045BF _text$mn        ends
.text$mn:000045BF
.text$mn:000045C0 ; ===========================================================================
.text$mn:000045C0
.text$mn:000045C0 ; Segment type: Pure code
.text$mn:000045C0 ; Segment permissions: Read/Execute
.text$mn:000045C0 _text$mn        segment para public 'CODE' use32
.text$mn:000045C0                 assume cs:_text$mn
.text$mn:000045C0                 ;org 45C0h
.text$mn:000045C0 ; COMDAT (pick any)
.text$mn:000045C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045C0
.text$mn:000045C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000045C0
.text$mn:000045C0 ; Attributes: bp-based frame
.text$mn:000045C0
.text$mn:000045C0 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000045C0                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000045C0 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000045C0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000045C0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:000045C0
.text$mn:000045C0 var_4           = dword ptr -4
.text$mn:000045C0
.text$mn:000045C0                 push    ebp
.text$mn:000045C1                 mov     ebp, esp
.text$mn:000045C3                 push    ecx
.text$mn:000045C4                 mov     [ebp+var_4], ecx
.text$mn:000045C7                 mov     eax, [ebp+var_4]
.text$mn:000045CA                 mov     dword ptr [eax], 0
.text$mn:000045D0                 mov     ecx, [ebp+var_4]
.text$mn:000045D3                 mov     dword ptr [ecx+4], 0
.text$mn:000045DA                 mov     eax, [ebp+var_4]
.text$mn:000045DD                 mov     esp, ebp
.text$mn:000045DF                 pop     ebp
.text$mn:000045E0                 retn
.text$mn:000045E0 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000045E0
.text$mn:000045E0 ; ---------------------------------------------------------------------------
.text$mn:000045E1                 align 4
.text$mn:000045E1 _text$mn        ends
.text$mn:000045E1
.text$mn:000045E4 ; ===========================================================================
.text$mn:000045E4
.text$mn:000045E4 ; Segment type: Pure code
.text$mn:000045E4 ; Segment permissions: Read/Execute
.text$mn:000045E4 _text$mn        segment para public 'CODE' use32
.text$mn:000045E4                 assume cs:_text$mn
.text$mn:000045E4                 ;org 45E4h
.text$mn:000045E4 ; COMDAT (pick any)
.text$mn:000045E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045E4
.text$mn:000045E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000045E4
.text$mn:000045E4 ; Attributes: bp-based frame
.text$mn:000045E4
.text$mn:000045E4 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000045E4                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:000045E4 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:000045E4                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:000045E4                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:000045E4
.text$mn:000045E4 var_10          = dword ptr -10h
.text$mn:000045E4 var_C           = dword ptr -0Ch
.text$mn:000045E4 var_4           = dword ptr -4
.text$mn:000045E4
.text$mn:000045E4                 push    ebp
.text$mn:000045E5                 mov     ebp, esp
.text$mn:000045E7                 push    0FFFFFFFFh
.text$mn:000045E9                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:000045EE                 mov     eax, large fs:0
.text$mn:000045F4                 push    eax
.text$mn:000045F5                 push    ecx
.text$mn:000045F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045FB                 xor     eax, ebp
.text$mn:000045FD                 push    eax
.text$mn:000045FE                 lea     eax, [ebp+var_C]
.text$mn:00004601                 mov     large fs:0, eax
.text$mn:00004607                 mov     [ebp+var_10], ecx
.text$mn:0000460A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000460D                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00004612                 mov     [ebp+var_4], 0
.text$mn:00004619                 mov     eax, [ebp+var_10]
.text$mn:0000461C                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00004622                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004629                 mov     eax, [ebp+var_10]
.text$mn:0000462C                 mov     ecx, [ebp+var_C]
.text$mn:0000462F                 mov     large fs:0, ecx
.text$mn:00004636                 pop     ecx
.text$mn:00004637                 mov     esp, ebp
.text$mn:00004639                 pop     ebp
.text$mn:0000463A                 retn
.text$mn:0000463A ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:0000463A
.text$mn:0000463A ; ---------------------------------------------------------------------------
.text$mn:0000463B                 align 4
.text$mn:0000463B _text$mn        ends
.text$mn:0000463B
.text$x:0000463C ; ===========================================================================
.text$x:0000463C
.text$x:0000463C ; Segment type: Pure code
.text$x:0000463C ; Segment permissions: Read/Execute
.text$x:0000463C _text$x         segment para public 'CODE' use32
.text$x:0000463C                 assume cs:_text$x
.text$x:0000463C                 ;org 463Ch
.text$x:0000463C ; COMDAT (pick associative to section at 45E4)
.text$x:0000463C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000463C
.text$x:0000463C ; =============== S U B R O U T I N E =======================================
.text$x:0000463C
.text$x:0000463C
.text$x:0000463C __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:0000463C                                         ; DATA XREF: .xdata$x:00007D40o
.text$x:0000463C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000463F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000463F __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:0000463F
.text$x:00004644
.text$x:00004644 ; =============== S U B R O U T I N E =======================================
.text$x:00004644
.text$x:00004644
.text$x:00004644 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00004644                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00004644
.text$x:00004644 arg_4           = dword ptr  8
.text$x:00004644
.text$x:00004644                 mov     edx, [esp+arg_4]
.text$x:00004648                 lea     eax, [edx+0Ch]
.text$x:0000464B                 mov     ecx, [edx-8]
.text$x:0000464E                 xor     ecx, eax
.text$x:00004650                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004655                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:0000465A                 jmp     ___CxxFrameHandler3
.text$x:0000465A __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:0000465A
.text$x:0000465A ; ---------------------------------------------------------------------------
.text$x:0000465F                 align 10h
.text$x:0000465F _text$x         ends
.text$x:0000465F
.text$mn:00004660 ; ===========================================================================
.text$mn:00004660
.text$mn:00004660 ; Segment type: Pure code
.text$mn:00004660 ; Segment permissions: Read/Execute
.text$mn:00004660 _text$mn        segment para public 'CODE' use32
.text$mn:00004660                 assume cs:_text$mn
.text$mn:00004660                 ;org 4660h
.text$mn:00004660 ; COMDAT (pick any)
.text$mn:00004660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004660
.text$mn:00004660 ; =============== S U B R O U T I N E =======================================
.text$mn:00004660
.text$mn:00004660 ; Attributes: bp-based frame
.text$mn:00004660
.text$mn:00004660 ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:00004660                 public ??0_Ignore@std@@QAE@XZ
.text$mn:00004660 ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:00004660
.text$mn:00004660 var_4           = dword ptr -4
.text$mn:00004660
.text$mn:00004660                 push    ebp
.text$mn:00004661                 mov     ebp, esp
.text$mn:00004663                 push    ecx
.text$mn:00004664                 mov     [ebp+var_4], ecx
.text$mn:00004667                 mov     eax, [ebp+var_4]
.text$mn:0000466A                 mov     esp, ebp
.text$mn:0000466C                 pop     ebp
.text$mn:0000466D                 retn
.text$mn:0000466D ??0_Ignore@std@@QAE@XZ endp
.text$mn:0000466D
.text$mn:0000466D ; ---------------------------------------------------------------------------
.text$mn:0000466E                 align 10h
.text$mn:0000466E _text$mn        ends
.text$mn:0000466E
.text$mn:00004670 ; ===========================================================================
.text$mn:00004670
.text$mn:00004670 ; Segment type: Pure code
.text$mn:00004670 ; Segment permissions: Read/Execute
.text$mn:00004670 _text$mn        segment para public 'CODE' use32
.text$mn:00004670                 assume cs:_text$mn
.text$mn:00004670                 ;org 4670h
.text$mn:00004670 ; COMDAT (pick any)
.text$mn:00004670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004670
.text$mn:00004670 ; =============== S U B R O U T I N E =======================================
.text$mn:00004670
.text$mn:00004670 ; Attributes: bp-based frame
.text$mn:00004670
.text$mn:00004670 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004670                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00004670 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00004670                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004670
.text$mn:00004670 var_10          = dword ptr -10h
.text$mn:00004670 var_C           = dword ptr -0Ch
.text$mn:00004670 var_4           = dword ptr -4
.text$mn:00004670
.text$mn:00004670                 push    ebp
.text$mn:00004671                 mov     ebp, esp
.text$mn:00004673                 push    0FFFFFFFFh
.text$mn:00004675                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000467A                 mov     eax, large fs:0
.text$mn:00004680                 push    eax
.text$mn:00004681                 push    ecx
.text$mn:00004682                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004687                 xor     eax, ebp
.text$mn:00004689                 push    eax
.text$mn:0000468A                 lea     eax, [ebp+var_C]
.text$mn:0000468D                 mov     large fs:0, eax
.text$mn:00004693                 mov     [ebp+var_10], ecx
.text$mn:00004696                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004699                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000469E                 mov     [ebp+var_4], 0
.text$mn:000046A5                 mov     eax, [ebp+var_10]
.text$mn:000046A8                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000046AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046B5                 mov     eax, [ebp+var_10]
.text$mn:000046B8                 mov     ecx, [ebp+var_C]
.text$mn:000046BB                 mov     large fs:0, ecx
.text$mn:000046C2                 pop     ecx
.text$mn:000046C3                 mov     esp, ebp
.text$mn:000046C5                 pop     ebp
.text$mn:000046C6                 retn
.text$mn:000046C6 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:000046C6
.text$mn:000046C6 ; ---------------------------------------------------------------------------
.text$mn:000046C7                 align 4
.text$mn:000046C7 _text$mn        ends
.text$mn:000046C7
.text$x:000046C8 ; ===========================================================================
.text$x:000046C8
.text$x:000046C8 ; Segment type: Pure code
.text$x:000046C8 ; Segment permissions: Read/Execute
.text$x:000046C8 _text$x         segment para public 'CODE' use32
.text$x:000046C8                 assume cs:_text$x
.text$x:000046C8                 ;org 46C8h
.text$x:000046C8 ; COMDAT (pick associative to section at 4670)
.text$x:000046C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046C8
.text$x:000046C8 ; =============== S U B R O U T I N E =======================================
.text$x:000046C8
.text$x:000046C8
.text$x:000046C8 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:000046C8                                         ; DATA XREF: .xdata$x:00007DC4o
.text$x:000046C8                 mov     ecx, [ebp-10h]  ; this
.text$x:000046CB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000046CB __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:000046CB
.text$x:000046D0
.text$x:000046D0 ; =============== S U B R O U T I N E =======================================
.text$x:000046D0
.text$x:000046D0
.text$x:000046D0 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:000046D0                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:000046D0
.text$x:000046D0 arg_4           = dword ptr  8
.text$x:000046D0
.text$x:000046D0                 mov     edx, [esp+arg_4]
.text$x:000046D4                 lea     eax, [edx+0Ch]
.text$x:000046D7                 mov     ecx, [edx-8]
.text$x:000046DA                 xor     ecx, eax
.text$x:000046DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046E1                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:000046E6                 jmp     ___CxxFrameHandler3
.text$x:000046E6 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:000046E6
.text$x:000046E6 ; ---------------------------------------------------------------------------
.text$x:000046EB                 align 4
.text$x:000046EB _text$x         ends
.text$x:000046EB
.text$mn:000046EC ; ===========================================================================
.text$mn:000046EC
.text$mn:000046EC ; Segment type: Pure code
.text$mn:000046EC ; Segment permissions: Read/Execute
.text$mn:000046EC _text$mn        segment para public 'CODE' use32
.text$mn:000046EC                 assume cs:_text$mn
.text$mn:000046EC                 ;org 46ECh
.text$mn:000046EC ; COMDAT (pick any)
.text$mn:000046EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046EC
.text$mn:000046EC ; =============== S U B R O U T I N E =======================================
.text$mn:000046EC
.text$mn:000046EC ; Attributes: bp-based frame
.text$mn:000046EC
.text$mn:000046EC ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:000046EC                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:000046EC ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:000046EC                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:000046EC
.text$mn:000046EC var_10          = dword ptr -10h
.text$mn:000046EC var_C           = dword ptr -0Ch
.text$mn:000046EC var_4           = dword ptr -4
.text$mn:000046EC
.text$mn:000046EC                 push    ebp
.text$mn:000046ED                 mov     ebp, esp
.text$mn:000046EF                 push    0FFFFFFFFh
.text$mn:000046F1                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:000046F6                 mov     eax, large fs:0
.text$mn:000046FC                 push    eax
.text$mn:000046FD                 push    ecx
.text$mn:000046FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004703                 xor     eax, ebp
.text$mn:00004705                 push    eax
.text$mn:00004706                 lea     eax, [ebp+var_C]
.text$mn:00004709                 mov     large fs:0, eax
.text$mn:0000470F                 mov     [ebp+var_10], ecx
.text$mn:00004712                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004715                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000471A                 mov     [ebp+var_4], 0
.text$mn:00004721                 mov     eax, [ebp+var_10]
.text$mn:00004724                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:0000472A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004731                 mov     eax, [ebp+var_10]
.text$mn:00004734                 mov     ecx, [ebp+var_C]
.text$mn:00004737                 mov     large fs:0, ecx
.text$mn:0000473E                 pop     ecx
.text$mn:0000473F                 mov     esp, ebp
.text$mn:00004741                 pop     ebp
.text$mn:00004742                 retn
.text$mn:00004742 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00004742
.text$mn:00004742 ; ---------------------------------------------------------------------------
.text$mn:00004743                 align 4
.text$mn:00004743 _text$mn        ends
.text$mn:00004743
.text$x:00004744 ; ===========================================================================
.text$x:00004744
.text$x:00004744 ; Segment type: Pure code
.text$x:00004744 ; Segment permissions: Read/Execute
.text$x:00004744 _text$x         segment para public 'CODE' use32
.text$x:00004744                 assume cs:_text$x
.text$x:00004744                 ;org 4744h
.text$x:00004744 ; COMDAT (pick associative to section at 46EC)
.text$x:00004744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004744
.text$x:00004744 ; =============== S U B R O U T I N E =======================================
.text$x:00004744
.text$x:00004744
.text$x:00004744 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00004744                                         ; DATA XREF: .xdata$x:00007E48o
.text$x:00004744                 mov     ecx, [ebp-10h]  ; this
.text$x:00004747                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004747 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00004747
.text$x:0000474C
.text$x:0000474C ; =============== S U B R O U T I N E =======================================
.text$x:0000474C
.text$x:0000474C
.text$x:0000474C __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:0000474C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:0000474C
.text$x:0000474C arg_4           = dword ptr  8
.text$x:0000474C
.text$x:0000474C                 mov     edx, [esp+arg_4]
.text$x:00004750                 lea     eax, [edx+0Ch]
.text$x:00004753                 mov     ecx, [edx-8]
.text$x:00004756                 xor     ecx, eax
.text$x:00004758                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000475D                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00004762                 jmp     ___CxxFrameHandler3
.text$x:00004762 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00004762
.text$x:00004762 ; ---------------------------------------------------------------------------
.text$x:00004767                 align 4
.text$x:00004767 _text$x         ends
.text$x:00004767
.text$mn:00004768 ; ===========================================================================
.text$mn:00004768
.text$mn:00004768 ; Segment type: Pure code
.text$mn:00004768 ; Segment permissions: Read/Execute
.text$mn:00004768 _text$mn        segment para public 'CODE' use32
.text$mn:00004768                 assume cs:_text$mn
.text$mn:00004768                 ;org 4768h
.text$mn:00004768 ; COMDAT (pick any)
.text$mn:00004768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004768
.text$mn:00004768 ; =============== S U B R O U T I N E =======================================
.text$mn:00004768
.text$mn:00004768 ; Attributes: bp-based frame
.text$mn:00004768
.text$mn:00004768 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00004768                 public ??0error_category@std@@QAE@XZ
.text$mn:00004768 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00004768
.text$mn:00004768 var_4           = dword ptr -4
.text$mn:00004768
.text$mn:00004768                 push    ebp
.text$mn:00004769                 mov     ebp, esp
.text$mn:0000476B                 push    ecx
.text$mn:0000476C                 mov     [ebp+var_4], ecx
.text$mn:0000476F                 mov     eax, [ebp+var_4]
.text$mn:00004772                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00004778                 mov     eax, [ebp+var_4]
.text$mn:0000477B                 mov     esp, ebp
.text$mn:0000477D                 pop     ebp
.text$mn:0000477E                 retn
.text$mn:0000477E ??0error_category@std@@QAE@XZ endp
.text$mn:0000477E
.text$mn:0000477E ; ---------------------------------------------------------------------------
.text$mn:0000477F                 align 10h
.text$mn:0000477F _text$mn        ends
.text$mn:0000477F
.text$mn:00004780 ; ===========================================================================
.text$mn:00004780
.text$mn:00004780 ; Segment type: Pure code
.text$mn:00004780 ; Segment permissions: Read/Execute
.text$mn:00004780 _text$mn        segment para public 'CODE' use32
.text$mn:00004780                 assume cs:_text$mn
.text$mn:00004780                 ;org 4780h
.text$mn:00004780 ; COMDAT (pick any)
.text$mn:00004780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004780
.text$mn:00004780 ; =============== S U B R O U T I N E =======================================
.text$mn:00004780
.text$mn:00004780 ; Attributes: bp-based frame
.text$mn:00004780
.text$mn:00004780 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00004780                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00004780 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00004780                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00004780                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00004780
.text$mn:00004780 var_4           = dword ptr -4
.text$mn:00004780 arg_0           = dword ptr  8
.text$mn:00004780 arg_4           = dword ptr  0Ch
.text$mn:00004780
.text$mn:00004780                 push    ebp
.text$mn:00004781                 mov     ebp, esp
.text$mn:00004783                 push    ecx
.text$mn:00004784                 mov     [ebp+var_4], ecx
.text$mn:00004787                 mov     eax, [ebp+var_4]
.text$mn:0000478A                 mov     ecx, [ebp+arg_0]
.text$mn:0000478D                 mov     [eax], ecx
.text$mn:0000478F                 mov     edx, [ebp+var_4]
.text$mn:00004792                 mov     eax, [ebp+arg_4]
.text$mn:00004795                 mov     [edx+4], eax
.text$mn:00004798                 mov     eax, [ebp+var_4]
.text$mn:0000479B                 mov     esp, ebp
.text$mn:0000479D                 pop     ebp
.text$mn:0000479E                 retn    8
.text$mn:0000479E ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:0000479E
.text$mn:0000479E ; ---------------------------------------------------------------------------
.text$mn:000047A1                 align 4
.text$mn:000047A1 _text$mn        ends
.text$mn:000047A1
.text$mn:000047A4 ; ===========================================================================
.text$mn:000047A4
.text$mn:000047A4 ; Segment type: Pure code
.text$mn:000047A4 ; Segment permissions: Read/Execute
.text$mn:000047A4 _text$mn        segment para public 'CODE' use32
.text$mn:000047A4                 assume cs:_text$mn
.text$mn:000047A4                 ;org 47A4h
.text$mn:000047A4 ; COMDAT (pick any)
.text$mn:000047A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047A4
.text$mn:000047A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000047A4
.text$mn:000047A4 ; Attributes: bp-based frame
.text$mn:000047A4
.text$mn:000047A4 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:000047A4                 public ??0id@locale@std@@QAE@I@Z
.text$mn:000047A4 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:000047A4                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:000047A4
.text$mn:000047A4 var_4           = dword ptr -4
.text$mn:000047A4 arg_0           = dword ptr  8
.text$mn:000047A4
.text$mn:000047A4                 push    ebp
.text$mn:000047A5                 mov     ebp, esp
.text$mn:000047A7                 push    ecx
.text$mn:000047A8                 mov     [ebp+var_4], ecx
.text$mn:000047AB                 mov     eax, [ebp+var_4]
.text$mn:000047AE                 mov     ecx, [ebp+arg_0]
.text$mn:000047B1                 mov     [eax], ecx
.text$mn:000047B3                 mov     eax, [ebp+var_4]
.text$mn:000047B6                 mov     esp, ebp
.text$mn:000047B8                 pop     ebp
.text$mn:000047B9                 retn    4
.text$mn:000047B9 ??0id@locale@std@@QAE@I@Z endp
.text$mn:000047B9
.text$mn:000047B9 _text$mn        ends
.text$mn:000047B9
.text$mn:000047BC ; ===========================================================================
.text$mn:000047BC
.text$mn:000047BC ; Segment type: Pure code
.text$mn:000047BC ; Segment permissions: Read/Execute
.text$mn:000047BC _text$mn        segment para public 'CODE' use32
.text$mn:000047BC                 assume cs:_text$mn
.text$mn:000047BC                 ;org 47BCh
.text$mn:000047BC ; COMDAT (pick any)
.text$mn:000047BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047BC
.text$mn:000047BC ; =============== S U B R O U T I N E =======================================
.text$mn:000047BC
.text$mn:000047BC ; Attributes: bp-based frame
.text$mn:000047BC
.text$mn:000047BC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:000047BC                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:000047BC ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000047BC                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:000047BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:000047BC
.text$mn:000047BC var_10          = dword ptr -10h
.text$mn:000047BC var_C           = dword ptr -0Ch
.text$mn:000047BC var_4           = dword ptr -4
.text$mn:000047BC
.text$mn:000047BC                 push    ebp
.text$mn:000047BD                 mov     ebp, esp
.text$mn:000047BF                 push    0FFFFFFFFh
.text$mn:000047C1                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:000047C6                 mov     eax, large fs:0
.text$mn:000047CC                 push    eax
.text$mn:000047CD                 push    ecx
.text$mn:000047CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000047D3                 xor     eax, ebp
.text$mn:000047D5                 push    eax
.text$mn:000047D6                 lea     eax, [ebp+var_C]
.text$mn:000047D9                 mov     large fs:0, eax
.text$mn:000047DF                 mov     [ebp+var_10], ecx
.text$mn:000047E2                 mov     [ebp+var_4], 0
.text$mn:000047E9                 mov     ecx, [ebp+var_10]
.text$mn:000047EC                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000047F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000047F8                 mov     ecx, [ebp+var_10]
.text$mn:000047FB                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00004800                 mov     ecx, [ebp+var_C]
.text$mn:00004803                 mov     large fs:0, ecx
.text$mn:0000480A                 pop     ecx
.text$mn:0000480B                 mov     esp, ebp
.text$mn:0000480D                 pop     ebp
.text$mn:0000480E                 retn
.text$mn:0000480E ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000480E
.text$mn:0000480E ; ---------------------------------------------------------------------------
.text$mn:0000480F                 align 10h
.text$mn:0000480F _text$mn        ends
.text$mn:0000480F
.text$x:00004810 ; ===========================================================================
.text$x:00004810
.text$x:00004810 ; Segment type: Pure code
.text$x:00004810 ; Segment permissions: Read/Execute
.text$x:00004810 _text$x         segment para public 'CODE' use32
.text$x:00004810                 assume cs:_text$x
.text$x:00004810                 ;org 4810h
.text$x:00004810 ; COMDAT (pick associative to section at 47BC)
.text$x:00004810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004810
.text$x:00004810 ; =============== S U B R O U T I N E =======================================
.text$x:00004810
.text$x:00004810
.text$x:00004810 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004810                                         ; DATA XREF: .xdata$x:00007C30o
.text$x:00004810                 mov     ecx, [ebp-10h]
.text$x:00004813                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00004813 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004813
.text$x:00004818
.text$x:00004818 ; =============== S U B R O U T I N E =======================================
.text$x:00004818
.text$x:00004818
.text$x:00004818 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004818                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00004818
.text$x:00004818 arg_4           = dword ptr  8
.text$x:00004818
.text$x:00004818                 mov     edx, [esp+arg_4]
.text$x:0000481C                 lea     eax, [edx+0Ch]
.text$x:0000481F                 mov     ecx, [edx-8]
.text$x:00004822                 xor     ecx, eax
.text$x:00004824                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004829                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:0000482E                 jmp     ___CxxFrameHandler3
.text$x:0000482E __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:0000482E
.text$x:0000482E ; ---------------------------------------------------------------------------
.text$x:00004833                 align 4
.text$x:00004833 _text$x         ends
.text$x:00004833
.text$mn:00004834 ; ===========================================================================
.text$mn:00004834
.text$mn:00004834 ; Segment type: Pure code
.text$mn:00004834 ; Segment permissions: Read/Execute
.text$mn:00004834 _text$mn        segment para public 'CODE' use32
.text$mn:00004834                 assume cs:_text$mn
.text$mn:00004834                 ;org 4834h
.text$mn:00004834 ; COMDAT (pick any)
.text$mn:00004834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004834
.text$mn:00004834 ; =============== S U B R O U T I N E =======================================
.text$mn:00004834
.text$mn:00004834 ; Attributes: bp-based frame
.text$mn:00004834
.text$mn:00004834 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00004834                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00004834 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004834                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00004834                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j ...
.text$mn:00004834
.text$mn:00004834 var_10          = dword ptr -10h
.text$mn:00004834 var_C           = dword ptr -0Ch
.text$mn:00004834 var_4           = dword ptr -4
.text$mn:00004834
.text$mn:00004834                 push    ebp
.text$mn:00004835                 mov     ebp, esp
.text$mn:00004837                 push    0FFFFFFFFh
.text$mn:00004839                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000483E                 mov     eax, large fs:0
.text$mn:00004844                 push    eax
.text$mn:00004845                 push    ecx
.text$mn:00004846                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000484B                 xor     eax, ebp
.text$mn:0000484D                 push    eax
.text$mn:0000484E                 lea     eax, [ebp+var_C]
.text$mn:00004851                 mov     large fs:0, eax
.text$mn:00004857                 mov     [ebp+var_10], ecx
.text$mn:0000485A                 mov     [ebp+var_4], 0
.text$mn:00004861                 mov     ecx, [ebp+var_10]
.text$mn:00004864                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004869                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004870                 mov     ecx, [ebp+var_10]
.text$mn:00004873                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004878                 mov     ecx, [ebp+var_C]
.text$mn:0000487B                 mov     large fs:0, ecx
.text$mn:00004882                 pop     ecx
.text$mn:00004883                 mov     esp, ebp
.text$mn:00004885                 pop     ebp
.text$mn:00004886                 retn
.text$mn:00004886 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004886
.text$mn:00004886 ; ---------------------------------------------------------------------------
.text$mn:00004887                 align 4
.text$mn:00004887 _text$mn        ends
.text$mn:00004887
.text$x:00004888 ; ===========================================================================
.text$x:00004888
.text$x:00004888 ; Segment type: Pure code
.text$x:00004888 ; Segment permissions: Read/Execute
.text$x:00004888 _text$x         segment para public 'CODE' use32
.text$x:00004888                 assume cs:_text$x
.text$x:00004888                 ;org 4888h
.text$x:00004888 ; COMDAT (pick associative to section at 4834)
.text$x:00004888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004888
.text$x:00004888 ; =============== S U B R O U T I N E =======================================
.text$x:00004888
.text$x:00004888
.text$x:00004888 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004888                                         ; DATA XREF: .xdata$x:00007F50o
.text$x:00004888                 mov     ecx, [ebp-10h]
.text$x:0000488B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000488B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000488B
.text$x:00004890
.text$x:00004890 ; =============== S U B R O U T I N E =======================================
.text$x:00004890
.text$x:00004890
.text$x:00004890 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004890                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00004890
.text$x:00004890 arg_4           = dword ptr  8
.text$x:00004890
.text$x:00004890                 mov     edx, [esp+arg_4]
.text$x:00004894                 lea     eax, [edx+0Ch]
.text$x:00004897                 mov     ecx, [edx-8]
.text$x:0000489A                 xor     ecx, eax
.text$x:0000489C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048A1                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:000048A6                 jmp     ___CxxFrameHandler3
.text$x:000048A6 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000048A6
.text$x:000048A6 ; ---------------------------------------------------------------------------
.text$x:000048AB                 align 4
.text$x:000048AB _text$x         ends
.text$x:000048AB
.text$mn:000048AC ; ===========================================================================
.text$mn:000048AC
.text$mn:000048AC ; Segment type: Pure code
.text$mn:000048AC ; Segment permissions: Read/Execute
.text$mn:000048AC _text$mn        segment para public 'CODE' use32
.text$mn:000048AC                 assume cs:_text$mn
.text$mn:000048AC                 ;org 48ACh
.text$mn:000048AC ; COMDAT (pick any)
.text$mn:000048AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048AC
.text$mn:000048AC ; =============== S U B R O U T I N E =======================================
.text$mn:000048AC
.text$mn:000048AC ; Attributes: bp-based frame
.text$mn:000048AC
.text$mn:000048AC ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000048AC                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000048AC ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000048AC                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:000048AC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:000048AC
.text$mn:000048AC var_10          = dword ptr -10h
.text$mn:000048AC var_C           = dword ptr -0Ch
.text$mn:000048AC var_4           = dword ptr -4
.text$mn:000048AC
.text$mn:000048AC                 push    ebp
.text$mn:000048AD                 mov     ebp, esp
.text$mn:000048AF                 push    0FFFFFFFFh
.text$mn:000048B1                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000048B6                 mov     eax, large fs:0
.text$mn:000048BC                 push    eax
.text$mn:000048BD                 push    ecx
.text$mn:000048BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000048C3                 xor     eax, ebp
.text$mn:000048C5                 push    eax
.text$mn:000048C6                 lea     eax, [ebp+var_C]
.text$mn:000048C9                 mov     large fs:0, eax
.text$mn:000048CF                 mov     [ebp+var_10], ecx
.text$mn:000048D2                 mov     [ebp+var_4], 0
.text$mn:000048D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048E0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000048E3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000048E8                 mov     ecx, [ebp+var_C]
.text$mn:000048EB                 mov     large fs:0, ecx
.text$mn:000048F2                 pop     ecx
.text$mn:000048F3                 mov     esp, ebp
.text$mn:000048F5                 pop     ebp
.text$mn:000048F6                 retn
.text$mn:000048F6 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000048F6
.text$mn:000048F6 ; ---------------------------------------------------------------------------
.text$mn:000048F7                 align 4
.text$mn:000048F7 _text$mn        ends
.text$mn:000048F7
.text$x:000048F8 ; ===========================================================================
.text$x:000048F8
.text$x:000048F8 ; Segment type: Pure code
.text$x:000048F8 ; Segment permissions: Read/Execute
.text$x:000048F8 _text$x         segment para public 'CODE' use32
.text$x:000048F8                 assume cs:_text$x
.text$x:000048F8                 ;org 48F8h
.text$x:000048F8 ; COMDAT (pick associative to section at 48AC)
.text$x:000048F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048F8
.text$x:000048F8 ; =============== S U B R O U T I N E =======================================
.text$x:000048F8
.text$x:000048F8
.text$x:000048F8 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000048F8                                         ; DATA XREF: .xdata$x:00007BD8o
.text$x:000048F8                 mov     ecx, [ebp-10h]  ; this
.text$x:000048FB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000048FB __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000048FB
.text$x:00004900
.text$x:00004900 ; =============== S U B R O U T I N E =======================================
.text$x:00004900
.text$x:00004900
.text$x:00004900 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004900                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004900
.text$x:00004900 arg_4           = dword ptr  8
.text$x:00004900
.text$x:00004900                 mov     edx, [esp+arg_4]
.text$x:00004904                 lea     eax, [edx+0Ch]
.text$x:00004907                 mov     ecx, [edx-8]
.text$x:0000490A                 xor     ecx, eax
.text$x:0000490C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004911                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00004916                 jmp     ___CxxFrameHandler3
.text$x:00004916 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00004916
.text$x:00004916 ; ---------------------------------------------------------------------------
.text$x:0000491B                 align 4
.text$x:0000491B _text$x         ends
.text$x:0000491B
.text$mn:0000491C ; ===========================================================================
.text$mn:0000491C
.text$mn:0000491C ; Segment type: Pure code
.text$mn:0000491C ; Segment permissions: Read/Execute
.text$mn:0000491C _text$mn        segment para public 'CODE' use32
.text$mn:0000491C                 assume cs:_text$mn
.text$mn:0000491C                 ;org 491Ch
.text$mn:0000491C ; COMDAT (pick any)
.text$mn:0000491C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000491C
.text$mn:0000491C ; =============== S U B R O U T I N E =======================================
.text$mn:0000491C
.text$mn:0000491C ; Attributes: bp-based frame
.text$mn:0000491C
.text$mn:0000491C ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:0000491C                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000491C ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:0000491C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:0000491C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:0000491C
.text$mn:0000491C var_10          = dword ptr -10h
.text$mn:0000491C var_C           = dword ptr -0Ch
.text$mn:0000491C var_4           = dword ptr -4
.text$mn:0000491C
.text$mn:0000491C                 push    ebp
.text$mn:0000491D                 mov     ebp, esp
.text$mn:0000491F                 push    0FFFFFFFFh
.text$mn:00004921                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004926                 mov     eax, large fs:0
.text$mn:0000492C                 push    eax
.text$mn:0000492D                 push    ecx
.text$mn:0000492E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004933                 xor     eax, ebp
.text$mn:00004935                 push    eax
.text$mn:00004936                 lea     eax, [ebp+var_C]
.text$mn:00004939                 mov     large fs:0, eax
.text$mn:0000493F                 mov     [ebp+var_10], ecx
.text$mn:00004942                 mov     [ebp+var_4], 0
.text$mn:00004949                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004950                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004953                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004958                 mov     ecx, [ebp+var_C]
.text$mn:0000495B                 mov     large fs:0, ecx
.text$mn:00004962                 pop     ecx
.text$mn:00004963                 mov     esp, ebp
.text$mn:00004965                 pop     ebp
.text$mn:00004966                 retn
.text$mn:00004966 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00004966
.text$mn:00004966 ; ---------------------------------------------------------------------------
.text$mn:00004967                 align 4
.text$mn:00004967 _text$mn        ends
.text$mn:00004967
.text$x:00004968 ; ===========================================================================
.text$x:00004968
.text$x:00004968 ; Segment type: Pure code
.text$x:00004968 ; Segment permissions: Read/Execute
.text$x:00004968 _text$x         segment para public 'CODE' use32
.text$x:00004968                 assume cs:_text$x
.text$x:00004968                 ;org 4968h
.text$x:00004968 ; COMDAT (pick associative to section at 491C)
.text$x:00004968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004968
.text$x:00004968 ; =============== S U B R O U T I N E =======================================
.text$x:00004968
.text$x:00004968
.text$x:00004968 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004968                                         ; DATA XREF: .xdata$x:00007EF8o
.text$x:00004968                 mov     ecx, [ebp-10h]  ; this
.text$x:0000496B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000496B __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000496B
.text$x:00004970
.text$x:00004970 ; =============== S U B R O U T I N E =======================================
.text$x:00004970
.text$x:00004970
.text$x:00004970 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004970                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004970
.text$x:00004970 arg_4           = dword ptr  8
.text$x:00004970
.text$x:00004970                 mov     edx, [esp+arg_4]
.text$x:00004974                 lea     eax, [edx+0Ch]
.text$x:00004977                 mov     ecx, [edx-8]
.text$x:0000497A                 xor     ecx, eax
.text$x:0000497C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004981                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00004986                 jmp     ___CxxFrameHandler3
.text$x:00004986 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00004986
.text$x:00004986 ; ---------------------------------------------------------------------------
.text$x:0000498B                 align 4
.text$x:0000498B _text$x         ends
.text$x:0000498B
.text$mn:0000498C ; ===========================================================================
.text$mn:0000498C
.text$mn:0000498C ; Segment type: Pure code
.text$mn:0000498C ; Segment permissions: Read/Execute
.text$mn:0000498C _text$mn        segment para public 'CODE' use32
.text$mn:0000498C                 assume cs:_text$mn
.text$mn:0000498C                 ;org 498Ch
.text$mn:0000498C ; COMDAT (pick any)
.text$mn:0000498C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000498C
.text$mn:0000498C ; =============== S U B R O U T I N E =======================================
.text$mn:0000498C
.text$mn:0000498C ; Attributes: bp-based frame
.text$mn:0000498C
.text$mn:0000498C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:0000498C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000498C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:0000498C                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:0000498C                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:0000498C
.text$mn:0000498C var_10          = dword ptr -10h
.text$mn:0000498C var_C           = dword ptr -0Ch
.text$mn:0000498C var_4           = dword ptr -4
.text$mn:0000498C
.text$mn:0000498C                 push    ebp
.text$mn:0000498D                 mov     ebp, esp
.text$mn:0000498F                 push    0FFFFFFFFh
.text$mn:00004991                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004996                 mov     eax, large fs:0
.text$mn:0000499C                 push    eax
.text$mn:0000499D                 push    ecx
.text$mn:0000499E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000049A3                 xor     eax, ebp
.text$mn:000049A5                 push    eax
.text$mn:000049A6                 lea     eax, [ebp+var_C]
.text$mn:000049A9                 mov     large fs:0, eax
.text$mn:000049AF                 mov     [ebp+var_10], ecx
.text$mn:000049B2                 mov     [ebp+var_4], 0
.text$mn:000049B9                 push    0               ; Size
.text$mn:000049BB                 push    1               ; char
.text$mn:000049BD                 mov     ecx, [ebp+var_10]
.text$mn:000049C0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000049C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000049CC                 mov     ecx, [ebp+var_10]
.text$mn:000049CF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000049D4                 mov     ecx, [ebp+var_C]
.text$mn:000049D7                 mov     large fs:0, ecx
.text$mn:000049DE                 pop     ecx
.text$mn:000049DF                 mov     esp, ebp
.text$mn:000049E1                 pop     ebp
.text$mn:000049E2                 retn
.text$mn:000049E2 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000049E2
.text$mn:000049E2 ; ---------------------------------------------------------------------------
.text$mn:000049E3                 align 4
.text$mn:000049E3 _text$mn        ends
.text$mn:000049E3
.text$x:000049E4 ; ===========================================================================
.text$x:000049E4
.text$x:000049E4 ; Segment type: Pure code
.text$x:000049E4 ; Segment permissions: Read/Execute
.text$x:000049E4 _text$x         segment para public 'CODE' use32
.text$x:000049E4                 assume cs:_text$x
.text$x:000049E4                 ;org 49E4h
.text$x:000049E4 ; COMDAT (pick associative to section at 498C)
.text$x:000049E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000049E4
.text$x:000049E4 ; =============== S U B R O U T I N E =======================================
.text$x:000049E4
.text$x:000049E4
.text$x:000049E4 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000049E4                                         ; DATA XREF: .xdata$x:00007C88o
.text$x:000049E4                 mov     ecx, [ebp-10h]
.text$x:000049E7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000049E7 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000049E7
.text$x:000049EC
.text$x:000049EC ; =============== S U B R O U T I N E =======================================
.text$x:000049EC
.text$x:000049EC
.text$x:000049EC __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:000049EC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:000049EC
.text$x:000049EC arg_4           = dword ptr  8
.text$x:000049EC
.text$x:000049EC                 mov     edx, [esp+arg_4]
.text$x:000049F0                 lea     eax, [edx+0Ch]
.text$x:000049F3                 mov     ecx, [edx-8]
.text$x:000049F6                 xor     ecx, eax
.text$x:000049F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049FD                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00004A02                 jmp     ___CxxFrameHandler3
.text$x:00004A02 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00004A02
.text$x:00004A02 ; ---------------------------------------------------------------------------
.text$x:00004A07                 align 4
.text$x:00004A07 _text$x         ends
.text$x:00004A07
.text$mn:00004A08 ; ===========================================================================
.text$mn:00004A08
.text$mn:00004A08 ; Segment type: Pure code
.text$mn:00004A08 ; Segment permissions: Read/Execute
.text$mn:00004A08 _text$mn        segment para public 'CODE' use32
.text$mn:00004A08                 assume cs:_text$mn
.text$mn:00004A08                 ;org 4A08h
.text$mn:00004A08 ; COMDAT (pick any)
.text$mn:00004A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A08
.text$mn:00004A08 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A08
.text$mn:00004A08 ; Attributes: bp-based frame
.text$mn:00004A08
.text$mn:00004A08 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00004A08                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004A08 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00004A08                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+881p
.text$mn:00004A08                                         ; WordStyleDlg::switchToTheme(void)+1AEp ...
.text$mn:00004A08
.text$mn:00004A08 var_10          = dword ptr -10h
.text$mn:00004A08 var_C           = dword ptr -0Ch
.text$mn:00004A08 var_4           = dword ptr -4
.text$mn:00004A08
.text$mn:00004A08                 push    ebp
.text$mn:00004A09                 mov     ebp, esp
.text$mn:00004A0B                 push    0FFFFFFFFh
.text$mn:00004A0D                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004A12                 mov     eax, large fs:0
.text$mn:00004A18                 push    eax
.text$mn:00004A19                 push    ecx
.text$mn:00004A1A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A1F                 xor     eax, ebp
.text$mn:00004A21                 push    eax
.text$mn:00004A22                 lea     eax, [ebp+var_C]
.text$mn:00004A25                 mov     large fs:0, eax
.text$mn:00004A2B                 mov     [ebp+var_10], ecx
.text$mn:00004A2E                 mov     [ebp+var_4], 0
.text$mn:00004A35                 push    0
.text$mn:00004A37                 push    1
.text$mn:00004A39                 mov     ecx, [ebp+var_10]
.text$mn:00004A3C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004A41                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A48                 mov     ecx, [ebp+var_10]
.text$mn:00004A4B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00004A50                 mov     ecx, [ebp+var_C]
.text$mn:00004A53                 mov     large fs:0, ecx
.text$mn:00004A5A                 pop     ecx
.text$mn:00004A5B                 mov     esp, ebp
.text$mn:00004A5D                 pop     ebp
.text$mn:00004A5E                 retn
.text$mn:00004A5E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00004A5E
.text$mn:00004A5E ; ---------------------------------------------------------------------------
.text$mn:00004A5F                 align 10h
.text$mn:00004A5F _text$mn        ends
.text$mn:00004A5F
.text$x:00004A60 ; ===========================================================================
.text$x:00004A60
.text$x:00004A60 ; Segment type: Pure code
.text$x:00004A60 ; Segment permissions: Read/Execute
.text$x:00004A60 _text$x         segment para public 'CODE' use32
.text$x:00004A60                 assume cs:_text$x
.text$x:00004A60                 ;org 4A60h
.text$x:00004A60 ; COMDAT (pick associative to section at 4A08)
.text$x:00004A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A60
.text$x:00004A60 ; =============== S U B R O U T I N E =======================================
.text$x:00004A60
.text$x:00004A60
.text$x:00004A60 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00004A60                                         ; DATA XREF: .xdata$x:00007FD4o
.text$x:00004A60                 mov     ecx, [ebp-10h]
.text$x:00004A63                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004A63 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00004A63
.text$x:00004A68
.text$x:00004A68 ; =============== S U B R O U T I N E =======================================
.text$x:00004A68
.text$x:00004A68
.text$x:00004A68 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00004A68                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00004A68
.text$x:00004A68 arg_4           = dword ptr  8
.text$x:00004A68
.text$x:00004A68                 mov     edx, [esp+arg_4]
.text$x:00004A6C                 lea     eax, [edx+0Ch]
.text$x:00004A6F                 mov     ecx, [edx-8]
.text$x:00004A72                 xor     ecx, eax
.text$x:00004A74                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A79                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00004A7E                 jmp     ___CxxFrameHandler3
.text$x:00004A7E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00004A7E
.text$x:00004A7E ; ---------------------------------------------------------------------------
.text$x:00004A83                 align 4
.text$x:00004A83 _text$x         ends
.text$x:00004A83
.text$mn:00004A84 ; ===========================================================================
.text$mn:00004A84
.text$mn:00004A84 ; Segment type: Pure code
.text$mn:00004A84 ; Segment permissions: Read/Execute
.text$mn:00004A84 _text$mn        segment para public 'CODE' use32
.text$mn:00004A84                 assume cs:_text$mn
.text$mn:00004A84                 ;org 4A84h
.text$mn:00004A84 ; COMDAT (pick any)
.text$mn:00004A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A84
.text$mn:00004A84 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A84
.text$mn:00004A84 ; Attributes: bp-based frame
.text$mn:00004A84
.text$mn:00004A84 ; _DWORD __thiscall ColourPicker::~ColourPicker(ColourPicker *__hidden this)
.text$mn:00004A84                 public ??1ColourPicker@@UAE@XZ
.text$mn:00004A84 ??1ColourPicker@@UAE@XZ proc near       ; CODE XREF: ColourPicker::`scalar deleting destructor'(uint)+Ap
.text$mn:00004A84
.text$mn:00004A84 var_10          = dword ptr -10h
.text$mn:00004A84 var_C           = dword ptr -0Ch
.text$mn:00004A84 var_4           = dword ptr -4
.text$mn:00004A84
.text$mn:00004A84                 push    ebp
.text$mn:00004A85                 mov     ebp, esp
.text$mn:00004A87                 push    0FFFFFFFFh
.text$mn:00004A89                 push    offset __ehhandler$??1ColourPicker@@UAE@XZ
.text$mn:00004A8E                 mov     eax, large fs:0
.text$mn:00004A94                 push    eax
.text$mn:00004A95                 push    ecx
.text$mn:00004A96                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A9B                 xor     eax, ebp
.text$mn:00004A9D                 push    eax
.text$mn:00004A9E                 lea     eax, [ebp+var_C]
.text$mn:00004AA1                 mov     large fs:0, eax
.text$mn:00004AA7                 mov     [ebp+var_10], ecx
.text$mn:00004AAA                 mov     eax, [ebp+var_10]
.text$mn:00004AAD                 mov     dword ptr [eax], offset ??_7ColourPicker@@6B@ ; const ColourPicker::`vftable'
.text$mn:00004AB3                 mov     [ebp+var_4], 0
.text$mn:00004ABA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004AC1                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004AC4                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:00004AC9                 mov     ecx, [ebp+var_C]
.text$mn:00004ACC                 mov     large fs:0, ecx
.text$mn:00004AD3                 pop     ecx
.text$mn:00004AD4                 mov     esp, ebp
.text$mn:00004AD6                 pop     ebp
.text$mn:00004AD7                 retn
.text$mn:00004AD7 ??1ColourPicker@@UAE@XZ endp
.text$mn:00004AD7
.text$mn:00004AD7 _text$mn        ends
.text$mn:00004AD7
.text$x:00004AD8 ; ===========================================================================
.text$x:00004AD8
.text$x:00004AD8 ; Segment type: Pure code
.text$x:00004AD8 ; Segment permissions: Read/Execute
.text$x:00004AD8 _text$x         segment para public 'CODE' use32
.text$x:00004AD8                 assume cs:_text$x
.text$x:00004AD8                 ;org 4AD8h
.text$x:00004AD8 ; COMDAT (pick associative to section at 4A84)
.text$x:00004AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004AD8
.text$x:00004AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD8
.text$x:00004AD8
.text$x:00004AD8 __unwindfunclet$??1ColourPicker@@UAE@XZ$0 proc near
.text$x:00004AD8                                         ; DATA XREF: .xdata$x:00007B54o
.text$x:00004AD8                 mov     ecx, [ebp-10h]  ; this
.text$x:00004ADB                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:00004ADB __unwindfunclet$??1ColourPicker@@UAE@XZ$0 endp
.text$x:00004ADB
.text$x:00004AE0
.text$x:00004AE0 ; =============== S U B R O U T I N E =======================================
.text$x:00004AE0
.text$x:00004AE0
.text$x:00004AE0 __ehhandler$??1ColourPicker@@UAE@XZ proc near
.text$x:00004AE0                                         ; DATA XREF: ColourPicker::~ColourPicker(void)+5o
.text$x:00004AE0
.text$x:00004AE0 arg_4           = dword ptr  8
.text$x:00004AE0
.text$x:00004AE0                 mov     edx, [esp+arg_4]
.text$x:00004AE4                 lea     eax, [edx+0Ch]
.text$x:00004AE7                 mov     ecx, [edx-8]
.text$x:00004AEA                 xor     ecx, eax
.text$x:00004AEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AF1                 mov     eax, offset __ehfuncinfo$??1ColourPicker@@UAE@XZ
.text$x:00004AF6                 jmp     ___CxxFrameHandler3
.text$x:00004AF6 __ehhandler$??1ColourPicker@@UAE@XZ endp
.text$x:00004AF6
.text$x:00004AF6 ; ---------------------------------------------------------------------------
.text$x:00004AFB                 align 4
.text$x:00004AFB _text$x         ends
.text$x:00004AFB
.text$mn:00004AFC ; ===========================================================================
.text$mn:00004AFC
.text$mn:00004AFC ; Segment type: Pure code
.text$mn:00004AFC ; Segment permissions: Read/Execute
.text$mn:00004AFC _text$mn        segment para public 'CODE' use32
.text$mn:00004AFC                 assume cs:_text$mn
.text$mn:00004AFC                 ;org 4AFCh
.text$mn:00004AFC ; COMDAT (pick any)
.text$mn:00004AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AFC
.text$mn:00004AFC ; =============== S U B R O U T I N E =======================================
.text$mn:00004AFC
.text$mn:00004AFC ; Attributes: bp-based frame
.text$mn:00004AFC
.text$mn:00004AFC ; _DWORD __thiscall Window::~Window(Window *__hidden this)
.text$mn:00004AFC                 public ??1Window@@UAE@XZ
.text$mn:00004AFC ??1Window@@UAE@XZ proc near             ; CODE XREF: __unwindfunclet$??0ColourPicker@@QAE@XZ$0+3j
.text$mn:00004AFC                                         ; ColourPicker::~ColourPicker(void)+40p ...
.text$mn:00004AFC
.text$mn:00004AFC var_4           = dword ptr -4
.text$mn:00004AFC
.text$mn:00004AFC                 push    ebp
.text$mn:00004AFD                 mov     ebp, esp
.text$mn:00004AFF                 push    ecx
.text$mn:00004B00                 mov     [ebp+var_4], ecx
.text$mn:00004B03                 mov     eax, [ebp+var_4]
.text$mn:00004B06                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00004B0C                 mov     esp, ebp
.text$mn:00004B0E                 pop     ebp
.text$mn:00004B0F                 retn
.text$mn:00004B0F ??1Window@@UAE@XZ endp
.text$mn:00004B0F
.text$mn:00004B0F _text$mn        ends
.text$mn:00004B0F
.text$mn:00004B10 ; ===========================================================================
.text$mn:00004B10
.text$mn:00004B10 ; Segment type: Pure code
.text$mn:00004B10 ; Segment permissions: Read/Execute
.text$mn:00004B10 _text$mn        segment para public 'CODE' use32
.text$mn:00004B10                 assume cs:_text$mn
.text$mn:00004B10                 ;org 4B10h
.text$mn:00004B10 ; COMDAT (pick any)
.text$mn:00004B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B10
.text$mn:00004B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B10
.text$mn:00004B10 ; Attributes: bp-based frame
.text$mn:00004B10
.text$mn:00004B10 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00004B10                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00004B10 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00004B10                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00004B10                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00004B10
.text$mn:00004B10 var_4           = dword ptr -4
.text$mn:00004B10
.text$mn:00004B10                 push    ebp
.text$mn:00004B11                 mov     ebp, esp
.text$mn:00004B13                 push    ecx
.text$mn:00004B14                 mov     [ebp+var_4], ecx
.text$mn:00004B17                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004B1A                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004B1F                 mov     esp, ebp
.text$mn:00004B21                 pop     ebp
.text$mn:00004B22                 retn
.text$mn:00004B22 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00004B22
.text$mn:00004B22 ; ---------------------------------------------------------------------------
.text$mn:00004B23                 align 4
.text$mn:00004B23 _text$mn        ends
.text$mn:00004B23
.text$mn:00004B24 ; ===========================================================================
.text$mn:00004B24
.text$mn:00004B24 ; Segment type: Pure code
.text$mn:00004B24 ; Segment permissions: Read/Execute
.text$mn:00004B24 _text$mn        segment para public 'CODE' use32
.text$mn:00004B24                 assume cs:_text$mn
.text$mn:00004B24                 ;org 4B24h
.text$mn:00004B24 ; COMDAT (pick any)
.text$mn:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B24
.text$mn:00004B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B24
.text$mn:00004B24 ; Attributes: bp-based frame
.text$mn:00004B24
.text$mn:00004B24 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00004B24                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004B24 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00004B24                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00004B24                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00004B24
.text$mn:00004B24 var_10          = dword ptr -10h
.text$mn:00004B24 var_C           = dword ptr -0Ch
.text$mn:00004B24 var_4           = dword ptr -4
.text$mn:00004B24
.text$mn:00004B24                 push    ebp
.text$mn:00004B25                 mov     ebp, esp
.text$mn:00004B27                 push    0FFFFFFFFh
.text$mn:00004B29                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004B2E                 mov     eax, large fs:0
.text$mn:00004B34                 push    eax
.text$mn:00004B35                 push    ecx
.text$mn:00004B36                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B3B                 xor     eax, ebp
.text$mn:00004B3D                 push    eax
.text$mn:00004B3E                 lea     eax, [ebp+var_C]
.text$mn:00004B41                 mov     large fs:0, eax
.text$mn:00004B47                 mov     [ebp+var_10], ecx
.text$mn:00004B4A                 mov     [ebp+var_4], 0
.text$mn:00004B51                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004B58                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004B5B                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00004B60                 mov     ecx, [ebp+var_C]
.text$mn:00004B63                 mov     large fs:0, ecx
.text$mn:00004B6A                 pop     ecx
.text$mn:00004B6B                 mov     esp, ebp
.text$mn:00004B6D                 pop     ebp
.text$mn:00004B6E                 retn
.text$mn:00004B6E ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00004B6E
.text$mn:00004B6E ; ---------------------------------------------------------------------------
.text$mn:00004B6F                 align 10h
.text$mn:00004B6F _text$mn        ends
.text$mn:00004B6F
.text$x:00004B70 ; ===========================================================================
.text$x:00004B70
.text$x:00004B70 ; Segment type: Pure code
.text$x:00004B70 ; Segment permissions: Read/Execute
.text$x:00004B70 _text$x         segment para public 'CODE' use32
.text$x:00004B70                 assume cs:_text$x
.text$x:00004B70                 ;org 4B70h
.text$x:00004B70 ; COMDAT (pick associative to section at 4B24)
.text$x:00004B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B70
.text$x:00004B70 ; =============== S U B R O U T I N E =======================================
.text$x:00004B70
.text$x:00004B70
.text$x:00004B70 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00004B70                                         ; DATA XREF: .xdata$x:00007D98o
.text$x:00004B70                 mov     ecx, [ebp-10h]  ; this
.text$x:00004B73                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00004B73 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00004B73
.text$x:00004B78
.text$x:00004B78 ; =============== S U B R O U T I N E =======================================
.text$x:00004B78
.text$x:00004B78
.text$x:00004B78 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00004B78                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00004B78
.text$x:00004B78 arg_4           = dword ptr  8
.text$x:00004B78
.text$x:00004B78                 mov     edx, [esp+arg_4]
.text$x:00004B7C                 lea     eax, [edx+0Ch]
.text$x:00004B7F                 mov     ecx, [edx-8]
.text$x:00004B82                 xor     ecx, eax
.text$x:00004B84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B89                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00004B8E                 jmp     ___CxxFrameHandler3
.text$x:00004B8E __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00004B8E
.text$x:00004B8E ; ---------------------------------------------------------------------------
.text$x:00004B93                 align 4
.text$x:00004B93 _text$x         ends
.text$x:00004B93
.text$mn:00004B94 ; ===========================================================================
.text$mn:00004B94
.text$mn:00004B94 ; Segment type: Pure code
.text$mn:00004B94 ; Segment permissions: Read/Execute
.text$mn:00004B94 _text$mn        segment para public 'CODE' use32
.text$mn:00004B94                 assume cs:_text$mn
.text$mn:00004B94                 ;org 4B94h
.text$mn:00004B94 ; COMDAT (pick any)
.text$mn:00004B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B94
.text$mn:00004B94 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B94
.text$mn:00004B94 ; Attributes: bp-based frame
.text$mn:00004B94
.text$mn:00004B94 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004B94                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004B94 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00004B94                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00004B94                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004B94
.text$mn:00004B94 var_10          = dword ptr -10h
.text$mn:00004B94 var_C           = dword ptr -0Ch
.text$mn:00004B94 var_4           = dword ptr -4
.text$mn:00004B94
.text$mn:00004B94                 push    ebp
.text$mn:00004B95                 mov     ebp, esp
.text$mn:00004B97                 push    0FFFFFFFFh
.text$mn:00004B99                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004B9E                 mov     eax, large fs:0
.text$mn:00004BA4                 push    eax
.text$mn:00004BA5                 push    ecx
.text$mn:00004BA6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004BAB                 xor     eax, ebp
.text$mn:00004BAD                 push    eax
.text$mn:00004BAE                 lea     eax, [ebp+var_C]
.text$mn:00004BB1                 mov     large fs:0, eax
.text$mn:00004BB7                 mov     [ebp+var_10], ecx
.text$mn:00004BBA                 mov     [ebp+var_4], 0
.text$mn:00004BC1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004BC8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004BCB                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004BD0                 mov     ecx, [ebp+var_C]
.text$mn:00004BD3                 mov     large fs:0, ecx
.text$mn:00004BDA                 pop     ecx
.text$mn:00004BDB                 mov     esp, ebp
.text$mn:00004BDD                 pop     ebp
.text$mn:00004BDE                 retn
.text$mn:00004BDE ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00004BDE
.text$mn:00004BDE ; ---------------------------------------------------------------------------
.text$mn:00004BDF                 align 10h
.text$mn:00004BDF _text$mn        ends
.text$mn:00004BDF
.text$x:00004BE0 ; ===========================================================================
.text$x:00004BE0
.text$x:00004BE0 ; Segment type: Pure code
.text$x:00004BE0 ; Segment permissions: Read/Execute
.text$x:00004BE0 _text$x         segment para public 'CODE' use32
.text$x:00004BE0                 assume cs:_text$x
.text$x:00004BE0                 ;org 4BE0h
.text$x:00004BE0 ; COMDAT (pick associative to section at 4B94)
.text$x:00004BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BE0
.text$x:00004BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00004BE0
.text$x:00004BE0
.text$x:00004BE0 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00004BE0                                         ; DATA XREF: .xdata$x:00007E1Co
.text$x:00004BE0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004BE3                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004BE3 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00004BE3
.text$x:00004BE8
.text$x:00004BE8 ; =============== S U B R O U T I N E =======================================
.text$x:00004BE8
.text$x:00004BE8
.text$x:00004BE8 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00004BE8                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00004BE8
.text$x:00004BE8 arg_4           = dword ptr  8
.text$x:00004BE8
.text$x:00004BE8                 mov     edx, [esp+arg_4]
.text$x:00004BEC                 lea     eax, [edx+0Ch]
.text$x:00004BEF                 mov     ecx, [edx-8]
.text$x:00004BF2                 xor     ecx, eax
.text$x:00004BF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BF9                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00004BFE                 jmp     ___CxxFrameHandler3
.text$x:00004BFE __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00004BFE
.text$x:00004BFE ; ---------------------------------------------------------------------------
.text$x:00004C03                 align 4
.text$x:00004C03 _text$x         ends
.text$x:00004C03
.text$mn:00004C04 ; ===========================================================================
.text$mn:00004C04
.text$mn:00004C04 ; Segment type: Pure code
.text$mn:00004C04 ; Segment permissions: Read/Execute
.text$mn:00004C04 _text$mn        segment para public 'CODE' use32
.text$mn:00004C04                 assume cs:_text$mn
.text$mn:00004C04                 ;org 4C04h
.text$mn:00004C04 ; COMDAT (pick any)
.text$mn:00004C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C04
.text$mn:00004C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C04
.text$mn:00004C04 ; Attributes: bp-based frame
.text$mn:00004C04
.text$mn:00004C04 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00004C04                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00004C04 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00004C04                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00004C04                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00004C04
.text$mn:00004C04 var_10          = dword ptr -10h
.text$mn:00004C04 var_C           = dword ptr -0Ch
.text$mn:00004C04 var_4           = dword ptr -4
.text$mn:00004C04
.text$mn:00004C04                 push    ebp
.text$mn:00004C05                 mov     ebp, esp
.text$mn:00004C07                 push    0FFFFFFFFh
.text$mn:00004C09                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00004C0E                 mov     eax, large fs:0
.text$mn:00004C14                 push    eax
.text$mn:00004C15                 push    ecx
.text$mn:00004C16                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C1B                 xor     eax, ebp
.text$mn:00004C1D                 push    eax
.text$mn:00004C1E                 lea     eax, [ebp+var_C]
.text$mn:00004C21                 mov     large fs:0, eax
.text$mn:00004C27                 mov     [ebp+var_10], ecx
.text$mn:00004C2A                 mov     [ebp+var_4], 0
.text$mn:00004C31                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C38                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C3B                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004C40                 mov     ecx, [ebp+var_C]
.text$mn:00004C43                 mov     large fs:0, ecx
.text$mn:00004C4A                 pop     ecx
.text$mn:00004C4B                 mov     esp, ebp
.text$mn:00004C4D                 pop     ebp
.text$mn:00004C4E                 retn
.text$mn:00004C4E ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00004C4E
.text$mn:00004C4E ; ---------------------------------------------------------------------------
.text$mn:00004C4F                 align 10h
.text$mn:00004C4F _text$mn        ends
.text$mn:00004C4F
.text$x:00004C50 ; ===========================================================================
.text$x:00004C50
.text$x:00004C50 ; Segment type: Pure code
.text$x:00004C50 ; Segment permissions: Read/Execute
.text$x:00004C50 _text$x         segment para public 'CODE' use32
.text$x:00004C50                 assume cs:_text$x
.text$x:00004C50                 ;org 4C50h
.text$x:00004C50 ; COMDAT (pick associative to section at 4C04)
.text$x:00004C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C50
.text$x:00004C50 ; =============== S U B R O U T I N E =======================================
.text$x:00004C50
.text$x:00004C50
.text$x:00004C50 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00004C50                                         ; DATA XREF: .xdata$x:00007EA0o
.text$x:00004C50                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C53                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004C53 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00004C53
.text$x:00004C58
.text$x:00004C58 ; =============== S U B R O U T I N E =======================================
.text$x:00004C58
.text$x:00004C58
.text$x:00004C58 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00004C58                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00004C58
.text$x:00004C58 arg_4           = dword ptr  8
.text$x:00004C58
.text$x:00004C58                 mov     edx, [esp+arg_4]
.text$x:00004C5C                 lea     eax, [edx+0Ch]
.text$x:00004C5F                 mov     ecx, [edx-8]
.text$x:00004C62                 xor     ecx, eax
.text$x:00004C64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C69                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00004C6E                 jmp     ___CxxFrameHandler3
.text$x:00004C6E __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00004C6E
.text$x:00004C6E ; ---------------------------------------------------------------------------
.text$x:00004C73                 align 4
.text$x:00004C73 _text$x         ends
.text$x:00004C73
.text$mn:00004C74 ; ===========================================================================
.text$mn:00004C74
.text$mn:00004C74 ; Segment type: Pure code
.text$mn:00004C74 ; Segment permissions: Read/Execute
.text$mn:00004C74 _text$mn        segment para public 'CODE' use32
.text$mn:00004C74                 assume cs:_text$mn
.text$mn:00004C74                 ;org 4C74h
.text$mn:00004C74 ; COMDAT (pick any)
.text$mn:00004C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C74
.text$mn:00004C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C74
.text$mn:00004C74 ; Attributes: bp-based frame
.text$mn:00004C74
.text$mn:00004C74 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00004C74                 public ??1error_category@std@@UAE@XZ
.text$mn:00004C74 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00004C74                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00004C74
.text$mn:00004C74 var_4           = dword ptr -4
.text$mn:00004C74
.text$mn:00004C74                 push    ebp
.text$mn:00004C75                 mov     ebp, esp
.text$mn:00004C77                 push    ecx
.text$mn:00004C78                 mov     [ebp+var_4], ecx
.text$mn:00004C7B                 mov     eax, [ebp+var_4]
.text$mn:00004C7E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00004C84                 mov     esp, ebp
.text$mn:00004C86                 pop     ebp
.text$mn:00004C87                 retn
.text$mn:00004C87 ??1error_category@std@@UAE@XZ endp
.text$mn:00004C87
.text$mn:00004C87 _text$mn        ends
.text$mn:00004C87
.text$mn:00004C88 ; ===========================================================================
.text$mn:00004C88
.text$mn:00004C88 ; Segment type: Pure code
.text$mn:00004C88 ; Segment permissions: Read/Execute
.text$mn:00004C88 _text$mn        segment para public 'CODE' use32
.text$mn:00004C88                 assume cs:_text$mn
.text$mn:00004C88                 ;org 4C88h
.text$mn:00004C88 ; COMDAT (pick any)
.text$mn:00004C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C88
.text$mn:00004C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C88
.text$mn:00004C88 ; Attributes: bp-based frame
.text$mn:00004C88
.text$mn:00004C88 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00004C88                 public ??2@YAPAXIPAX@Z
.text$mn:00004C88 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00004C88                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00004C88
.text$mn:00004C88 arg_4           = dword ptr  0Ch
.text$mn:00004C88
.text$mn:00004C88                 push    ebp
.text$mn:00004C89                 mov     ebp, esp
.text$mn:00004C8B                 mov     eax, [ebp+arg_4]
.text$mn:00004C8E                 pop     ebp
.text$mn:00004C8F                 retn
.text$mn:00004C8F ??2@YAPAXIPAX@Z endp
.text$mn:00004C8F
.text$mn:00004C8F _text$mn        ends
.text$mn:00004C8F
.text$mn:00004C90 ; ===========================================================================
.text$mn:00004C90
.text$mn:00004C90 ; Segment type: Pure code
.text$mn:00004C90 ; Segment permissions: Read/Execute
.text$mn:00004C90 _text$mn        segment para public 'CODE' use32
.text$mn:00004C90                 assume cs:_text$mn
.text$mn:00004C90                 ;org 4C90h
.text$mn:00004C90 ; COMDAT (pick any)
.text$mn:00004C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C90
.text$mn:00004C90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C90
.text$mn:00004C90 ; Attributes: bp-based frame
.text$mn:00004C90
.text$mn:00004C90 ; void __cdecl operator delete(void *)
.text$mn:00004C90                 public ??3@YAXPAX0@Z
.text$mn:00004C90 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00004C90                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00004C90                 push    ebp
.text$mn:00004C91                 mov     ebp, esp
.text$mn:00004C93                 pop     ebp
.text$mn:00004C94                 retn
.text$mn:00004C94 ??3@YAXPAX0@Z   endp
.text$mn:00004C94
.text$mn:00004C94 ; ---------------------------------------------------------------------------
.text$mn:00004C95                 align 4
.text$mn:00004C95 _text$mn        ends
.text$mn:00004C95
.text$mn:00004C98 ; ===========================================================================
.text$mn:00004C98
.text$mn:00004C98 ; Segment type: Pure code
.text$mn:00004C98 ; Segment permissions: Read/Execute
.text$mn:00004C98 _text$mn        segment para public 'CODE' use32
.text$mn:00004C98                 assume cs:_text$mn
.text$mn:00004C98                 ;org 4C98h
.text$mn:00004C98 ; COMDAT (pick any)
.text$mn:00004C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C98
.text$mn:00004C98 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C98
.text$mn:00004C98 ; Attributes: bp-based frame
.text$mn:00004C98
.text$mn:00004C98 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004C98                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00004C98 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00004C98                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+CAp
.text$mn:00004C98                                         ; LexerStyler::operator=(LexerStyler const &)+2Ep ...
.text$mn:00004C98
.text$mn:00004C98 var_8           = dword ptr -8
.text$mn:00004C98 var_3           = byte ptr -3
.text$mn:00004C98 var_2           = byte ptr -2
.text$mn:00004C98 var_1           = byte ptr -1
.text$mn:00004C98 arg_0           = dword ptr  8
.text$mn:00004C98
.text$mn:00004C98                 push    ebp
.text$mn:00004C99                 mov     ebp, esp
.text$mn:00004C9B                 sub     esp, 8
.text$mn:00004C9E                 mov     [ebp+var_8], ecx
.text$mn:00004CA1                 mov     eax, [ebp+var_8]
.text$mn:00004CA4                 cmp     eax, [ebp+arg_0]
.text$mn:00004CA7                 jz      short loc_4D03
.text$mn:00004CA9                 lea     ecx, [ebp+var_1]
.text$mn:00004CAC                 push    ecx
.text$mn:00004CAD                 mov     ecx, [ebp+arg_0]
.text$mn:00004CB0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004CB5                 push    eax
.text$mn:00004CB6                 lea     edx, [ebp+var_2]
.text$mn:00004CB9                 push    edx
.text$mn:00004CBA                 mov     ecx, [ebp+var_8]
.text$mn:00004CBD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004CC2                 push    eax
.text$mn:00004CC3                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00004CC8                 add     esp, 8
.text$mn:00004CCB                 movzx   eax, al
.text$mn:00004CCE                 test    eax, eax
.text$mn:00004CD0                 jz      short loc_4CF7
.text$mn:00004CD2                 xor     ecx, ecx
.text$mn:00004CD4                 jz      short loc_4CF7
.text$mn:00004CD6                 push    0
.text$mn:00004CD8                 push    1
.text$mn:00004CDA                 mov     ecx, [ebp+var_8]
.text$mn:00004CDD                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004CE2                 lea     edx, [ebp+var_3]
.text$mn:00004CE5                 push    edx
.text$mn:00004CE6                 mov     ecx, [ebp+arg_0]
.text$mn:00004CE9                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004CEE                 push    eax
.text$mn:00004CEF                 mov     ecx, [ebp+var_8]
.text$mn:00004CF2                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00004CF7
.text$mn:00004CF7 loc_4CF7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:00004CF7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:00004CF7                 mov     eax, [ebp+arg_0]
.text$mn:00004CFA                 push    eax
.text$mn:00004CFB                 mov     ecx, [ebp+var_8]
.text$mn:00004CFE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004D03
.text$mn:00004D03 loc_4D03:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:00004D03                 mov     eax, [ebp+var_8]
.text$mn:00004D06                 mov     esp, ebp
.text$mn:00004D08                 pop     ebp
.text$mn:00004D09                 retn    4
.text$mn:00004D09 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00004D09
.text$mn:00004D09 _text$mn        ends
.text$mn:00004D09
.text$mn:00004D0C ; ===========================================================================
.text$mn:00004D0C
.text$mn:00004D0C ; Segment type: Pure code
.text$mn:00004D0C ; Segment permissions: Read/Execute
.text$mn:00004D0C _text$mn        segment para public 'CODE' use32
.text$mn:00004D0C                 assume cs:_text$mn
.text$mn:00004D0C                 ;org 4D0Ch
.text$mn:00004D0C ; COMDAT (pick any)
.text$mn:00004D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D0C
.text$mn:00004D0C ; =============== S U B R O U T I N E =======================================
.text$mn:00004D0C
.text$mn:00004D0C ; Attributes: bp-based frame
.text$mn:00004D0C
.text$mn:00004D0C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00004D0C                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00004D0C ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00004D0C                                         ; CODE XREF: Style::setKeywords(wchar_t const *)+85p
.text$mn:00004D0C                                         ; LexerStyler::setLexerUserExt(wchar_t const *)+14p
.text$mn:00004D0C
.text$mn:00004D0C var_4           = dword ptr -4
.text$mn:00004D0C Str             = dword ptr  8
.text$mn:00004D0C
.text$mn:00004D0C                 push    ebp
.text$mn:00004D0D                 mov     ebp, esp
.text$mn:00004D0F                 push    ecx
.text$mn:00004D10                 mov     [ebp+var_4], ecx
.text$mn:00004D13                 mov     eax, [ebp+Str]
.text$mn:00004D16                 push    eax             ; Str
.text$mn:00004D17                 mov     ecx, [ebp+var_4]
.text$mn:00004D1A                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00004D1F                 mov     esp, ebp
.text$mn:00004D21                 pop     ebp
.text$mn:00004D22                 retn    4
.text$mn:00004D22 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00004D22
.text$mn:00004D22 ; ---------------------------------------------------------------------------
.text$mn:00004D25                 align 4
.text$mn:00004D25 _text$mn        ends
.text$mn:00004D25
.text$mn:00004D28 ; ===========================================================================
.text$mn:00004D28
.text$mn:00004D28 ; Segment type: Pure code
.text$mn:00004D28 ; Segment permissions: Read/Execute
.text$mn:00004D28 _text$mn        segment para public 'CODE' use32
.text$mn:00004D28                 assume cs:_text$mn
.text$mn:00004D28                 ;org 4D28h
.text$mn:00004D28 ; COMDAT (pick any)
.text$mn:00004D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D28
.text$mn:00004D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D28
.text$mn:00004D28 ; Attributes: bp-based frame
.text$mn:00004D28
.text$mn:00004D28 ; public: struct LexerStyler & __thiscall LexerStyler::operator=(struct LexerStyler const &)
.text$mn:00004D28                 public ??4LexerStyler@@QAEAAU0@ABU0@@Z
.text$mn:00004D28 ??4LexerStyler@@QAEAAU0@ABU0@@Z proc near
.text$mn:00004D28                                         ; CODE XREF: LexerStylerArray::operator=(LexerStylerArray const &)+58p
.text$mn:00004D28
.text$mn:00004D28 var_4           = dword ptr -4
.text$mn:00004D28 arg_0           = dword ptr  8
.text$mn:00004D28
.text$mn:00004D28                 push    ebp
.text$mn:00004D29                 mov     ebp, esp
.text$mn:00004D2B                 push    ecx
.text$mn:00004D2C                 mov     [ebp+var_4], ecx
.text$mn:00004D2F                 mov     eax, [ebp+var_4]
.text$mn:00004D32                 cmp     eax, [ebp+arg_0]
.text$mn:00004D35                 jz      short loc_4D8A
.text$mn:00004D37                 mov     ecx, [ebp+arg_0]
.text$mn:00004D3A                 push    ecx
.text$mn:00004D3B                 mov     ecx, [ebp+var_4]
.text$mn:00004D3E                 call    ??4StyleArray@@QAEAAU0@ABU0@@Z ; StyleArray::operator=(StyleArray const &)
.text$mn:00004D43                 mov     edx, [ebp+arg_0]
.text$mn:00004D46                 add     edx, 52Ch
.text$mn:00004D4C                 push    edx
.text$mn:00004D4D                 mov     ecx, [ebp+var_4]
.text$mn:00004D50                 add     ecx, 52Ch
.text$mn:00004D56                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004D5B                 mov     eax, [ebp+arg_0]
.text$mn:00004D5E                 add     eax, 548h
.text$mn:00004D63                 push    eax
.text$mn:00004D64                 mov     ecx, [ebp+var_4]
.text$mn:00004D67                 add     ecx, 548h
.text$mn:00004D6D                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004D72                 mov     ecx, [ebp+arg_0]
.text$mn:00004D75                 add     ecx, 564h
.text$mn:00004D7B                 push    ecx
.text$mn:00004D7C                 mov     ecx, [ebp+var_4]
.text$mn:00004D7F                 add     ecx, 564h
.text$mn:00004D85                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004D8A
.text$mn:00004D8A loc_4D8A:                               ; CODE XREF: LexerStyler::operator=(LexerStyler const &)+Dj
.text$mn:00004D8A                 mov     eax, [ebp+var_4]
.text$mn:00004D8D                 mov     esp, ebp
.text$mn:00004D8F                 pop     ebp
.text$mn:00004D90                 retn    4
.text$mn:00004D90 ??4LexerStyler@@QAEAAU0@ABU0@@Z endp
.text$mn:00004D90
.text$mn:00004D90 ; ---------------------------------------------------------------------------
.text$mn:00004D93                 align 4
.text$mn:00004D93 _text$mn        ends
.text$mn:00004D93
.text$mn:00004D94 ; ===========================================================================
.text$mn:00004D94
.text$mn:00004D94 ; Segment type: Pure code
.text$mn:00004D94 ; Segment permissions: Read/Execute
.text$mn:00004D94 _text$mn        segment para public 'CODE' use32
.text$mn:00004D94                 assume cs:_text$mn
.text$mn:00004D94                 ;org 4D94h
.text$mn:00004D94 ; COMDAT (pick any)
.text$mn:00004D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D94
.text$mn:00004D94 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D94
.text$mn:00004D94 ; Attributes: bp-based frame
.text$mn:00004D94
.text$mn:00004D94 ; public: struct LexerStylerArray & __thiscall LexerStylerArray::operator=(struct LexerStylerArray const &)
.text$mn:00004D94                 public ??4LexerStylerArray@@QAEAAU0@ABU0@@Z
.text$mn:00004D94 ??4LexerStylerArray@@QAEAAU0@ABU0@@Z proc near
.text$mn:00004D94                                         ; CODE XREF: WordStyleDlg::apply(void)+31p
.text$mn:00004D94                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+8C0p ...
.text$mn:00004D94
.text$mn:00004D94 var_8           = dword ptr -8
.text$mn:00004D94 var_4           = dword ptr -4
.text$mn:00004D94 arg_0           = dword ptr  8
.text$mn:00004D94
.text$mn:00004D94                 push    ebp
.text$mn:00004D95                 mov     ebp, esp
.text$mn:00004D97                 sub     esp, 8
.text$mn:00004D9A                 mov     [ebp+var_8], ecx
.text$mn:00004D9D                 mov     eax, [ebp+var_8]
.text$mn:00004DA0                 cmp     eax, [ebp+arg_0]
.text$mn:00004DA3                 jz      short loc_4DF3
.text$mn:00004DA5                 mov     ecx, [ebp+var_8]
.text$mn:00004DA8                 mov     edx, [ebp+arg_0]
.text$mn:00004DAB                 mov     eax, [edx+1B800h]
.text$mn:00004DB1                 mov     [ecx+1B800h], eax
.text$mn:00004DB7                 mov     [ebp+var_4], 0
.text$mn:00004DBE                 jmp     short loc_4DC9
.text$mn:00004DC0 ; ---------------------------------------------------------------------------
.text$mn:00004DC0
.text$mn:00004DC0 loc_4DC0:                               ; CODE XREF: LexerStylerArray::operator=(LexerStylerArray const &)+5Dj
.text$mn:00004DC0                 mov     ecx, [ebp+var_4]
.text$mn:00004DC3                 add     ecx, 1
.text$mn:00004DC6                 mov     [ebp+var_4], ecx
.text$mn:00004DC9
.text$mn:00004DC9 loc_4DC9:                               ; CODE XREF: LexerStylerArray::operator=(LexerStylerArray const &)+2Aj
.text$mn:00004DC9                 mov     edx, [ebp+var_8]
.text$mn:00004DCC                 mov     eax, [ebp+var_4]
.text$mn:00004DCF                 cmp     eax, [edx+1B800h]
.text$mn:00004DD5                 jge     short loc_4DF3
.text$mn:00004DD7                 imul    ecx, [ebp+var_4], 580h
.text$mn:00004DDE                 add     ecx, [ebp+arg_0]
.text$mn:00004DE1                 push    ecx
.text$mn:00004DE2                 imul    ecx, [ebp+var_4], 580h
.text$mn:00004DE9                 add     ecx, [ebp+var_8]
.text$mn:00004DEC                 call    ??4LexerStyler@@QAEAAU0@ABU0@@Z ; LexerStyler::operator=(LexerStyler const &)
.text$mn:00004DF1                 jmp     short loc_4DC0
.text$mn:00004DF3 ; ---------------------------------------------------------------------------
.text$mn:00004DF3
.text$mn:00004DF3 loc_4DF3:                               ; CODE XREF: LexerStylerArray::operator=(LexerStylerArray const &)+Fj
.text$mn:00004DF3                                         ; LexerStylerArray::operator=(LexerStylerArray const &)+41j
.text$mn:00004DF3                 mov     eax, [ebp+var_8]
.text$mn:00004DF6                 mov     esp, ebp
.text$mn:00004DF8                 pop     ebp
.text$mn:00004DF9                 retn    4
.text$mn:00004DF9 ??4LexerStylerArray@@QAEAAU0@ABU0@@Z endp
.text$mn:00004DF9
.text$mn:00004DF9 _text$mn        ends
.text$mn:00004DF9
.text$mn:00004DFC ; ===========================================================================
.text$mn:00004DFC
.text$mn:00004DFC ; Segment type: Pure code
.text$mn:00004DFC ; Segment permissions: Read/Execute
.text$mn:00004DFC _text$mn        segment para public 'CODE' use32
.text$mn:00004DFC                 assume cs:_text$mn
.text$mn:00004DFC                 ;org 4DFCh
.text$mn:00004DFC ; COMDAT (pick any)
.text$mn:00004DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DFC
.text$mn:00004DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00004DFC
.text$mn:00004DFC ; Attributes: bp-based frame
.text$mn:00004DFC
.text$mn:00004DFC ; public: struct Style & __thiscall Style::operator=(struct Style const &)
.text$mn:00004DFC                 public ??4Style@@QAEAAU0@ABU0@@Z
.text$mn:00004DFC ??4Style@@QAEAAU0@ABU0@@Z proc near     ; CODE XREF: StyleArray::operator=(StyleArray const &)+52p
.text$mn:00004DFC
.text$mn:00004DFC var_28          = dword ptr -28h
.text$mn:00004DFC var_24          = dword ptr -24h
.text$mn:00004DFC var_20          = dword ptr -20h
.text$mn:00004DFC var_1C          = dword ptr -1Ch
.text$mn:00004DFC var_18          = dword ptr -18h
.text$mn:00004DFC var_14          = dword ptr -14h
.text$mn:00004DFC var_10          = dword ptr -10h
.text$mn:00004DFC var_C           = dword ptr -0Ch
.text$mn:00004DFC var_4           = dword ptr -4
.text$mn:00004DFC arg_0           = dword ptr  8
.text$mn:00004DFC
.text$mn:00004DFC                 push    ebp
.text$mn:00004DFD                 mov     ebp, esp
.text$mn:00004DFF                 push    0FFFFFFFFh
.text$mn:00004E01                 push    offset __ehhandler$??4Style@@QAEAAU0@ABU0@@Z
.text$mn:00004E06                 mov     eax, large fs:0
.text$mn:00004E0C                 push    eax
.text$mn:00004E0D                 sub     esp, 1Ch
.text$mn:00004E10                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E15                 xor     eax, ebp
.text$mn:00004E17                 push    eax
.text$mn:00004E18                 lea     eax, [ebp+var_C]
.text$mn:00004E1B                 mov     large fs:0, eax
.text$mn:00004E21                 mov     [ebp+var_10], ecx
.text$mn:00004E24                 mov     eax, [ebp+var_10]
.text$mn:00004E27                 cmp     eax, [ebp+arg_0]
.text$mn:00004E2A                 jz      loc_4F72
.text$mn:00004E30                 mov     ecx, [ebp+var_10]
.text$mn:00004E33                 mov     edx, [ebp+arg_0]
.text$mn:00004E36                 mov     eax, [edx]
.text$mn:00004E38                 mov     [ecx], eax
.text$mn:00004E3A                 mov     ecx, [ebp+var_10]
.text$mn:00004E3D                 mov     edx, [ebp+arg_0]
.text$mn:00004E40                 mov     eax, [edx+4]
.text$mn:00004E43                 mov     [ecx+4], eax
.text$mn:00004E46                 mov     ecx, [ebp+var_10]
.text$mn:00004E49                 mov     edx, [ebp+arg_0]
.text$mn:00004E4C                 mov     eax, [edx+8]
.text$mn:00004E4F                 mov     [ecx+8], eax
.text$mn:00004E52                 mov     ecx, [ebp+var_10]
.text$mn:00004E55                 mov     edx, [ebp+arg_0]
.text$mn:00004E58                 mov     eax, [edx+0Ch]
.text$mn:00004E5B                 mov     [ecx+0Ch], eax
.text$mn:00004E5E                 mov     ecx, [ebp+var_10]
.text$mn:00004E61                 mov     edx, [ebp+arg_0]
.text$mn:00004E64                 mov     eax, [edx+10h]
.text$mn:00004E67                 mov     [ecx+10h], eax
.text$mn:00004E6A                 mov     ecx, [ebp+var_10]
.text$mn:00004E6D                 mov     edx, [ebp+arg_0]
.text$mn:00004E70                 mov     eax, [edx+14h]
.text$mn:00004E73                 mov     [ecx+14h], eax
.text$mn:00004E76                 mov     ecx, [ebp+var_10]
.text$mn:00004E79                 mov     edx, [ebp+arg_0]
.text$mn:00004E7C                 mov     eax, [edx+1Ch]
.text$mn:00004E7F                 mov     [ecx+1Ch], eax
.text$mn:00004E82                 mov     ecx, [ebp+var_10]
.text$mn:00004E85                 mov     edx, [ebp+arg_0]
.text$mn:00004E88                 mov     eax, [edx+18h]
.text$mn:00004E8B                 mov     [ecx+18h], eax
.text$mn:00004E8E                 mov     ecx, [ebp+var_10]
.text$mn:00004E91                 mov     edx, [ebp+arg_0]
.text$mn:00004E94                 mov     eax, [edx+24h]
.text$mn:00004E97                 mov     [ecx+24h], eax
.text$mn:00004E9A                 mov     ecx, [ebp+var_10]
.text$mn:00004E9D                 mov     edx, [ebp+arg_0]
.text$mn:00004EA0                 mov     eax, [edx+20h]
.text$mn:00004EA3                 mov     [ecx+20h], eax
.text$mn:00004EA6                 mov     ecx, [ebp+var_10]
.text$mn:00004EA9                 cmp     dword ptr [ecx+28h], 0
.text$mn:00004EAD                 jnz     short loc_4F05
.text$mn:00004EAF                 mov     edx, [ebp+arg_0]
.text$mn:00004EB2                 cmp     dword ptr [edx+28h], 0
.text$mn:00004EB6                 jz      short loc_4F05
.text$mn:00004EB8                 push    1Ch             ; unsigned int
.text$mn:00004EBA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004EBF                 add     esp, 4
.text$mn:00004EC2                 mov     [ebp+var_14], eax
.text$mn:00004EC5                 mov     [ebp+var_4], 0
.text$mn:00004ECC                 cmp     [ebp+var_14], 0
.text$mn:00004ED0                 jz      short loc_4EE6
.text$mn:00004ED2                 mov     eax, [ebp+arg_0]
.text$mn:00004ED5                 mov     ecx, [eax+28h]
.text$mn:00004ED8                 push    ecx
.text$mn:00004ED9                 mov     ecx, [ebp+var_14]
.text$mn:00004EDC                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004EE1                 mov     [ebp+var_18], eax
.text$mn:00004EE4                 jmp     short loc_4EED
.text$mn:00004EE6 ; ---------------------------------------------------------------------------
.text$mn:00004EE6
.text$mn:00004EE6 loc_4EE6:                               ; CODE XREF: Style::operator=(Style const &)+D4j
.text$mn:00004EE6                 mov     [ebp+var_18], 0
.text$mn:00004EED
.text$mn:00004EED loc_4EED:                               ; CODE XREF: Style::operator=(Style const &)+E8j
.text$mn:00004EED                 mov     edx, [ebp+var_18]
.text$mn:00004EF0                 mov     [ebp+var_20], edx
.text$mn:00004EF3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004EFA                 mov     eax, [ebp+var_10]
.text$mn:00004EFD                 mov     ecx, [ebp+var_20]
.text$mn:00004F00                 mov     [eax+28h], ecx
.text$mn:00004F03                 jmp     short loc_4F72
.text$mn:00004F05 ; ---------------------------------------------------------------------------
.text$mn:00004F05
.text$mn:00004F05 loc_4F05:                               ; CODE XREF: Style::operator=(Style const &)+B1j
.text$mn:00004F05                                         ; Style::operator=(Style const &)+BAj
.text$mn:00004F05                 mov     edx, [ebp+var_10]
.text$mn:00004F08                 cmp     dword ptr [edx+28h], 0
.text$mn:00004F0C                 jz      short loc_4F2B
.text$mn:00004F0E                 mov     eax, [ebp+arg_0]
.text$mn:00004F11                 cmp     dword ptr [eax+28h], 0
.text$mn:00004F15                 jz      short loc_4F2B
.text$mn:00004F17                 mov     ecx, [ebp+arg_0]
.text$mn:00004F1A                 mov     edx, [ecx+28h]
.text$mn:00004F1D                 push    edx
.text$mn:00004F1E                 mov     eax, [ebp+var_10]
.text$mn:00004F21                 mov     ecx, [eax+28h]
.text$mn:00004F24                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004F29                 jmp     short loc_4F72
.text$mn:00004F2B ; ---------------------------------------------------------------------------
.text$mn:00004F2B
.text$mn:00004F2B loc_4F2B:                               ; CODE XREF: Style::operator=(Style const &)+110j
.text$mn:00004F2B                                         ; Style::operator=(Style const &)+119j
.text$mn:00004F2B                 mov     ecx, [ebp+var_10]
.text$mn:00004F2E                 cmp     dword ptr [ecx+28h], 0
.text$mn:00004F32                 jz      short loc_4F72
.text$mn:00004F34                 mov     edx, [ebp+arg_0]
.text$mn:00004F37                 cmp     dword ptr [edx+28h], 0
.text$mn:00004F3B                 jnz     short loc_4F72
.text$mn:00004F3D                 mov     eax, [ebp+var_10]
.text$mn:00004F40                 mov     ecx, [eax+28h]
.text$mn:00004F43                 mov     [ebp+var_24], ecx
.text$mn:00004F46                 mov     edx, [ebp+var_24]
.text$mn:00004F49                 mov     [ebp+var_1C], edx
.text$mn:00004F4C                 cmp     [ebp+var_1C], 0
.text$mn:00004F50                 jz      short loc_4F61
.text$mn:00004F52                 push    1
.text$mn:00004F54                 mov     ecx, [ebp+var_1C]
.text$mn:00004F57                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:00004F5C                 mov     [ebp+var_28], eax
.text$mn:00004F5F                 jmp     short loc_4F68
.text$mn:00004F61 ; ---------------------------------------------------------------------------
.text$mn:00004F61
.text$mn:00004F61 loc_4F61:                               ; CODE XREF: Style::operator=(Style const &)+154j
.text$mn:00004F61                 mov     [ebp+var_28], 0
.text$mn:00004F68
.text$mn:00004F68 loc_4F68:                               ; CODE XREF: Style::operator=(Style const &)+163j
.text$mn:00004F68                 mov     eax, [ebp+var_10]
.text$mn:00004F6B                 mov     dword ptr [eax+28h], 0
.text$mn:00004F72
.text$mn:00004F72 loc_4F72:                               ; CODE XREF: Style::operator=(Style const &)+2Ej
.text$mn:00004F72                                         ; Style::operator=(Style const &)+107j ...
.text$mn:00004F72                 mov     eax, [ebp+var_10]
.text$mn:00004F75                 mov     ecx, [ebp+var_C]
.text$mn:00004F78                 mov     large fs:0, ecx
.text$mn:00004F7F                 pop     ecx
.text$mn:00004F80                 mov     esp, ebp
.text$mn:00004F82                 pop     ebp
.text$mn:00004F83                 retn    4
.text$mn:00004F83 ??4Style@@QAEAAU0@ABU0@@Z endp
.text$mn:00004F83
.text$mn:00004F83 ; ---------------------------------------------------------------------------
.text$mn:00004F86                 align 4
.text$mn:00004F86 _text$mn        ends
.text$mn:00004F86
.text$x:00004F88 ; ===========================================================================
.text$x:00004F88
.text$x:00004F88 ; Segment type: Pure code
.text$x:00004F88 ; Segment permissions: Read/Execute
.text$x:00004F88 _text$x         segment para public 'CODE' use32
.text$x:00004F88                 assume cs:_text$x
.text$x:00004F88                 ;org 4F88h
.text$x:00004F88 ; COMDAT (pick associative to section at 4DFC)
.text$x:00004F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F88
.text$x:00004F88 ; =============== S U B R O U T I N E =======================================
.text$x:00004F88
.text$x:00004F88
.text$x:00004F88 __unwindfunclet$??4Style@@QAEAAU0@ABU0@@Z$0 proc near
.text$x:00004F88                                         ; DATA XREF: .xdata$x:0000808Co
.text$x:00004F88                 mov     eax, [ebp-14h]
.text$x:00004F8B                 push    eax             ; void *
.text$x:00004F8C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004F91                 pop     ecx
.text$x:00004F92                 retn
.text$x:00004F92 __unwindfunclet$??4Style@@QAEAAU0@ABU0@@Z$0 endp
.text$x:00004F92
.text$x:00004F93
.text$x:00004F93 ; =============== S U B R O U T I N E =======================================
.text$x:00004F93
.text$x:00004F93
.text$x:00004F93 __ehhandler$??4Style@@QAEAAU0@ABU0@@Z proc near
.text$x:00004F93                                         ; DATA XREF: Style::operator=(Style const &)+5o
.text$x:00004F93
.text$x:00004F93 arg_4           = dword ptr  8
.text$x:00004F93
.text$x:00004F93                 mov     edx, [esp+arg_4]
.text$x:00004F97                 lea     eax, [edx+0Ch]
.text$x:00004F9A                 mov     ecx, [edx-20h]
.text$x:00004F9D                 xor     ecx, eax
.text$x:00004F9F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FA4                 mov     eax, offset __ehfuncinfo$??4Style@@QAEAAU0@ABU0@@Z
.text$x:00004FA9                 jmp     ___CxxFrameHandler3
.text$x:00004FA9 __ehhandler$??4Style@@QAEAAU0@ABU0@@Z endp
.text$x:00004FA9
.text$x:00004FA9 ; ---------------------------------------------------------------------------
.text$x:00004FAE                 align 10h
.text$x:00004FAE _text$x         ends
.text$x:00004FAE
.text$mn:00004FB0 ; ===========================================================================
.text$mn:00004FB0
.text$mn:00004FB0 ; Segment type: Pure code
.text$mn:00004FB0 ; Segment permissions: Read/Execute
.text$mn:00004FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FB0                 assume cs:_text$mn
.text$mn:00004FB0                 ;org 4FB0h
.text$mn:00004FB0 ; COMDAT (pick any)
.text$mn:00004FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FB0
.text$mn:00004FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FB0
.text$mn:00004FB0 ; Attributes: bp-based frame
.text$mn:00004FB0
.text$mn:00004FB0 ; public: struct StyleArray & __thiscall StyleArray::operator=(struct StyleArray const &)
.text$mn:00004FB0                 public ??4StyleArray@@QAEAAU0@ABU0@@Z
.text$mn:00004FB0 ??4StyleArray@@QAEAAU0@ABU0@@Z proc near
.text$mn:00004FB0                                         ; CODE XREF: WordStyleDlg::apply(void)+43p
.text$mn:00004FB0                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+8E1p ...
.text$mn:00004FB0
.text$mn:00004FB0 var_8           = dword ptr -8
.text$mn:00004FB0 var_4           = dword ptr -4
.text$mn:00004FB0 arg_0           = dword ptr  8
.text$mn:00004FB0
.text$mn:00004FB0                 push    ebp
.text$mn:00004FB1                 mov     ebp, esp
.text$mn:00004FB3                 sub     esp, 8
.text$mn:00004FB6                 mov     [ebp+var_8], ecx
.text$mn:00004FB9                 mov     eax, [ebp+var_8]
.text$mn:00004FBC                 cmp     eax, [ebp+arg_0]
.text$mn:00004FBF                 jz      short loc_5009
.text$mn:00004FC1                 mov     ecx, [ebp+var_8]
.text$mn:00004FC4                 mov     edx, [ebp+arg_0]
.text$mn:00004FC7                 mov     eax, [edx+528h]
.text$mn:00004FCD                 mov     [ecx+528h], eax
.text$mn:00004FD3                 mov     [ebp+var_4], 0
.text$mn:00004FDA                 jmp     short loc_4FE5
.text$mn:00004FDC ; ---------------------------------------------------------------------------
.text$mn:00004FDC
.text$mn:00004FDC loc_4FDC:                               ; CODE XREF: StyleArray::operator=(StyleArray const &)+57j
.text$mn:00004FDC                 mov     ecx, [ebp+var_4]
.text$mn:00004FDF                 add     ecx, 1
.text$mn:00004FE2                 mov     [ebp+var_4], ecx
.text$mn:00004FE5
.text$mn:00004FE5 loc_4FE5:                               ; CODE XREF: StyleArray::operator=(StyleArray const &)+2Aj
.text$mn:00004FE5                 mov     edx, [ebp+var_8]
.text$mn:00004FE8                 mov     eax, [ebp+var_4]
.text$mn:00004FEB                 cmp     eax, [edx+528h]
.text$mn:00004FF1                 jge     short loc_5009
.text$mn:00004FF3                 imul    ecx, [ebp+var_4], 2Ch
.text$mn:00004FF7                 add     ecx, [ebp+arg_0]
.text$mn:00004FFA                 push    ecx
.text$mn:00004FFB                 imul    ecx, [ebp+var_4], 2Ch
.text$mn:00004FFF                 add     ecx, [ebp+var_8]
.text$mn:00005002                 call    ??4Style@@QAEAAU0@ABU0@@Z ; Style::operator=(Style const &)
.text$mn:00005007                 jmp     short loc_4FDC
.text$mn:00005009 ; ---------------------------------------------------------------------------
.text$mn:00005009
.text$mn:00005009 loc_5009:                               ; CODE XREF: StyleArray::operator=(StyleArray const &)+Fj
.text$mn:00005009                                         ; StyleArray::operator=(StyleArray const &)+41j
.text$mn:00005009                 mov     eax, [ebp+var_8]
.text$mn:0000500C                 mov     esp, ebp
.text$mn:0000500E                 pop     ebp
.text$mn:0000500F                 retn    4
.text$mn:0000500F ??4StyleArray@@QAEAAU0@ABU0@@Z endp
.text$mn:0000500F
.text$mn:0000500F ; ---------------------------------------------------------------------------
.text$mn:00005012                 align 4
.text$mn:00005012 _text$mn        ends
.text$mn:00005012
.text$mn:00005014 ; ===========================================================================
.text$mn:00005014
.text$mn:00005014 ; Segment type: Pure code
.text$mn:00005014 ; Segment permissions: Read/Execute
.text$mn:00005014 _text$mn        segment para public 'CODE' use32
.text$mn:00005014                 assume cs:_text$mn
.text$mn:00005014                 ;org 5014h
.text$mn:00005014 ; COMDAT (pick any)
.text$mn:00005014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005014
.text$mn:00005014 ; =============== S U B R O U T I N E =======================================
.text$mn:00005014
.text$mn:00005014 ; Attributes: bp-based frame
.text$mn:00005014
.text$mn:00005014 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00005014                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00005014 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00005014                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00005014                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00005014
.text$mn:00005014 var_8           = dword ptr -8
.text$mn:00005014 var_4           = dword ptr -4
.text$mn:00005014 arg_0           = dword ptr  8
.text$mn:00005014
.text$mn:00005014                 push    ebp
.text$mn:00005015                 mov     ebp, esp
.text$mn:00005017                 sub     esp, 8
.text$mn:0000501A                 mov     [ebp+var_8], ecx
.text$mn:0000501D                 mov     eax, [ebp+var_8]
.text$mn:00005020                 cmp     eax, [ebp+arg_0]
.text$mn:00005023                 jnz     short loc_502E
.text$mn:00005025                 mov     [ebp+var_4], 1
.text$mn:0000502C                 jmp     short loc_5035
.text$mn:0000502E ; ---------------------------------------------------------------------------
.text$mn:0000502E
.text$mn:0000502E loc_502E:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000502E                 mov     [ebp+var_4], 0
.text$mn:00005035
.text$mn:00005035 loc_5035:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00005035                 mov     al, byte ptr [ebp+var_4]
.text$mn:00005038                 mov     esp, ebp
.text$mn:0000503A                 pop     ebp
.text$mn:0000503B                 retn    4
.text$mn:0000503B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:0000503B
.text$mn:0000503B ; ---------------------------------------------------------------------------
.text$mn:0000503E                 align 10h
.text$mn:0000503E _text$mn        ends
.text$mn:0000503E
.text$mn:00005040 ; ===========================================================================
.text$mn:00005040
.text$mn:00005040 ; Segment type: Pure code
.text$mn:00005040 ; Segment permissions: Read/Execute
.text$mn:00005040 _text$mn        segment para public 'CODE' use32
.text$mn:00005040                 assume cs:_text$mn
.text$mn:00005040                 ;org 5040h
.text$mn:00005040 ; COMDAT (pick any)
.text$mn:00005040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005040
.text$mn:00005040 ; =============== S U B R O U T I N E =======================================
.text$mn:00005040
.text$mn:00005040 ; Attributes: bp-based frame
.text$mn:00005040
.text$mn:00005040 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00005040                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00005040 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00005040                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00005040
.text$mn:00005040 var_8           = dword ptr -8
.text$mn:00005040 var_4           = dword ptr -4
.text$mn:00005040 arg_0           = dword ptr  8
.text$mn:00005040
.text$mn:00005040                 push    ebp
.text$mn:00005041                 mov     ebp, esp
.text$mn:00005043                 sub     esp, 8
.text$mn:00005046                 push    esi
.text$mn:00005047                 mov     [ebp+var_4], ecx
.text$mn:0000504A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000504D                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00005052                 push    eax
.text$mn:00005053                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005056                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000505B                 mov     ecx, eax
.text$mn:0000505D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00005062                 movzx   eax, al
.text$mn:00005065                 test    eax, eax
.text$mn:00005067                 jz      short loc_5088
.text$mn:00005069                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000506C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00005071                 mov     esi, eax
.text$mn:00005073                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005076                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000507B                 cmp     esi, eax
.text$mn:0000507D                 jnz     short loc_5088
.text$mn:0000507F                 mov     [ebp+var_8], 1
.text$mn:00005086                 jmp     short loc_508F
.text$mn:00005088 ; ---------------------------------------------------------------------------
.text$mn:00005088
.text$mn:00005088 loc_5088:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00005088                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00005088                 mov     [ebp+var_8], 0
.text$mn:0000508F
.text$mn:0000508F loc_508F:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000508F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00005092                 pop     esi
.text$mn:00005093                 mov     esp, ebp
.text$mn:00005095                 pop     ebp
.text$mn:00005096                 retn    4
.text$mn:00005096 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00005096
.text$mn:00005096 ; ---------------------------------------------------------------------------
.text$mn:00005099                 align 4
.text$mn:00005099 _text$mn        ends
.text$mn:00005099
.text$mn:0000509C ; ===========================================================================
.text$mn:0000509C
.text$mn:0000509C ; Segment type: Pure code
.text$mn:0000509C ; Segment permissions: Read/Execute
.text$mn:0000509C _text$mn        segment para public 'CODE' use32
.text$mn:0000509C                 assume cs:_text$mn
.text$mn:0000509C                 ;org 509Ch
.text$mn:0000509C ; COMDAT (pick any)
.text$mn:0000509C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000509C
.text$mn:0000509C ; =============== S U B R O U T I N E =======================================
.text$mn:0000509C
.text$mn:0000509C ; Attributes: bp-based frame
.text$mn:0000509C
.text$mn:0000509C ; public: wchar_t & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator[](unsigned int)
.text$mn:0000509C                 public ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
.text$mn:0000509C ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z proc near
.text$mn:0000509C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+869p
.text$mn:0000509C                                         ; WordStyleDlg::switchToTheme(void)+178p
.text$mn:0000509C
.text$mn:0000509C var_4           = dword ptr -4
.text$mn:0000509C arg_0           = dword ptr  8
.text$mn:0000509C
.text$mn:0000509C                 push    ebp
.text$mn:0000509D                 mov     ebp, esp
.text$mn:0000509F                 push    ecx
.text$mn:000050A0                 mov     [ebp+var_4], ecx
.text$mn:000050A3                 mov     eax, [ebp+var_4]
.text$mn:000050A6                 mov     ecx, [eax+14h]
.text$mn:000050A9                 cmp     ecx, [ebp+arg_0]
.text$mn:000050AC                 jnb     short loc_50C5
.text$mn:000050AE                 push    695h            ; unsigned int
.text$mn:000050B3                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000050B8                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:000050BD                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000050C2                 add     esp, 0Ch
.text$mn:000050C5
.text$mn:000050C5 loc_50C5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+10j
.text$mn:000050C5                 mov     ecx, [ebp+var_4]
.text$mn:000050C8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000050CD                 mov     edx, [ebp+arg_0]
.text$mn:000050D0                 lea     eax, [eax+edx*2]
.text$mn:000050D3                 mov     esp, ebp
.text$mn:000050D5                 pop     ebp
.text$mn:000050D6                 retn    4
.text$mn:000050D6 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z endp
.text$mn:000050D6
.text$mn:000050D6 ; ---------------------------------------------------------------------------
.text$mn:000050D9                 align 4
.text$mn:000050D9 _text$mn        ends
.text$mn:000050D9
.text$mn:000050DC ; ===========================================================================
.text$mn:000050DC
.text$mn:000050DC ; Segment type: Pure code
.text$mn:000050DC ; Segment permissions: Read/Execute
.text$mn:000050DC _text$mn        segment para public 'CODE' use32
.text$mn:000050DC                 assume cs:_text$mn
.text$mn:000050DC                 ;org 50DCh
.text$mn:000050DC ; COMDAT (pick any)
.text$mn:000050DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050DC
.text$mn:000050DC ; =============== S U B R O U T I N E =======================================
.text$mn:000050DC
.text$mn:000050DC ; Attributes: bp-based frame
.text$mn:000050DC
.text$mn:000050DC ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> & __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::operator[](unsigned int)
.text$mn:000050DC                 public ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z
.text$mn:000050DC ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z proc near
.text$mn:000050DC                                         ; CODE XREF: ThemeSwitcher::getElementFromIndex(uint)+Ep
.text$mn:000050DC
.text$mn:000050DC var_4           = dword ptr -4
.text$mn:000050DC arg_0           = dword ptr  8
.text$mn:000050DC
.text$mn:000050DC                 push    ebp
.text$mn:000050DD                 mov     ebp, esp
.text$mn:000050DF                 push    ecx
.text$mn:000050E0                 mov     [ebp+var_4], ecx
.text$mn:000050E3                 mov     ecx, [ebp+var_4]
.text$mn:000050E6                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:000050EB                 cmp     eax, [ebp+arg_0]
.text$mn:000050EE                 ja      short loc_5158
.text$mn:000050F0                 push    4B1h            ; unsigned int
.text$mn:000050F5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000050FA                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000050FF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005104                 add     esp, 0Ch
.text$mn:00005107                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000510C                 test    eax, eax
.text$mn:0000510E                 jz      short loc_5114
.text$mn:00005110                 xor     ecx, ecx
.text$mn:00005112                 jnz     short loc_513A
.text$mn:00005114
.text$mn:00005114 loc_5114:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+32j
.text$mn:00005114                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00005119                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000511E                 push    0
.text$mn:00005120                 push    4B2h
.text$mn:00005125                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000512A                 push    2
.text$mn:0000512C                 call    __CrtDbgReportW
.text$mn:00005131                 add     esp, 18h
.text$mn:00005134                 cmp     eax, 1
.text$mn:00005137                 jnz     short loc_513A
.text$mn:00005139                 int     3               ; Trap to Debugger
.text$mn:0000513A
.text$mn:0000513A loc_513A:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+36j
.text$mn:0000513A                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+5Bj
.text$mn:0000513A                 push    0
.text$mn:0000513C                 push    4B2h
.text$mn:00005141                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005146                 push    offset ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; "std::vector<struct std::pair<class std:"...
.text$mn:0000514B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00005150                 call    __invalid_parameter
.text$mn:00005155                 add     esp, 14h
.text$mn:00005158
.text$mn:00005158 loc_5158:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+12j
.text$mn:00005158                 imul    eax, [ebp+arg_0], 38h
.text$mn:0000515C                 mov     ecx, [ebp+var_4]
.text$mn:0000515F                 add     eax, [ecx+4]
.text$mn:00005162                 mov     esp, ebp
.text$mn:00005164                 pop     ebp
.text$mn:00005165                 retn    4
.text$mn:00005165 ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z endp
.text$mn:00005165
.text$mn:00005165 _text$mn        ends
.text$mn:00005165
.text$mn:00005168 ; ===========================================================================
.text$mn:00005168
.text$mn:00005168 ; Segment type: Pure code
.text$mn:00005168 ; Segment permissions: Read/Execute
.text$mn:00005168 _text$mn        segment para public 'CODE' use32
.text$mn:00005168                 assume cs:_text$mn
.text$mn:00005168                 ;org 5168h
.text$mn:00005168 ; COMDAT (pick any)
.text$mn:00005168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005168
.text$mn:00005168 ; =============== S U B R O U T I N E =======================================
.text$mn:00005168
.text$mn:00005168 ; Attributes: bp-based frame
.text$mn:00005168
.text$mn:00005168 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)const
.text$mn:00005168                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00005168 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00005168                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+32Fp
.text$mn:00005168                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+35Dp
.text$mn:00005168
.text$mn:00005168 var_4           = dword ptr -4
.text$mn:00005168 arg_0           = dword ptr  8
.text$mn:00005168
.text$mn:00005168                 push    ebp
.text$mn:00005169                 mov     ebp, esp
.text$mn:0000516B                 push    ecx
.text$mn:0000516C                 mov     [ebp+var_4], ecx
.text$mn:0000516F                 mov     ecx, [ebp+var_4]
.text$mn:00005172                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00005177                 cmp     eax, [ebp+arg_0]
.text$mn:0000517A                 ja      short loc_51E4
.text$mn:0000517C                 push    4A1h            ; unsigned int
.text$mn:00005181                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005186                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000518B                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005190                 add     esp, 0Ch
.text$mn:00005193                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00005198                 test    eax, eax
.text$mn:0000519A                 jz      short loc_51A0
.text$mn:0000519C                 xor     ecx, ecx
.text$mn:0000519E                 jnz     short loc_51C6
.text$mn:000051A0
.text$mn:000051A0 loc_51A0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:000051A0                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000051A5                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000051AA                 push    0
.text$mn:000051AC                 push    4A2h
.text$mn:000051B1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000051B6                 push    2
.text$mn:000051B8                 call    __CrtDbgReportW
.text$mn:000051BD                 add     esp, 18h
.text$mn:000051C0                 cmp     eax, 1
.text$mn:000051C3                 jnz     short loc_51C6
.text$mn:000051C5                 int     3               ; Trap to Debugger
.text$mn:000051C6
.text$mn:000051C6 loc_51C6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:000051C6                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:000051C6                 push    0
.text$mn:000051C8                 push    4A2h
.text$mn:000051CD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000051D2                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:000051D7                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000051DC                 call    __invalid_parameter
.text$mn:000051E1                 add     esp, 14h
.text$mn:000051E4
.text$mn:000051E4 loc_51E4:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:000051E4                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:000051E8                 mov     ecx, [ebp+var_4]
.text$mn:000051EB                 add     eax, [ecx+4]
.text$mn:000051EE                 mov     esp, ebp
.text$mn:000051F0                 pop     ebp
.text$mn:000051F1                 retn    4
.text$mn:000051F1 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:000051F1
.text$mn:000051F1 _text$mn        ends
.text$mn:000051F1
.text$mn:000051F4 ; ===========================================================================
.text$mn:000051F4
.text$mn:000051F4 ; Segment type: Pure code
.text$mn:000051F4 ; Segment permissions: Read/Execute
.text$mn:000051F4 _text$mn        segment para public 'CODE' use32
.text$mn:000051F4                 assume cs:_text$mn
.text$mn:000051F4                 ;org 51F4h
.text$mn:000051F4 ; COMDAT (pick any)
.text$mn:000051F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051F4
.text$mn:000051F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051F4
.text$mn:000051F4 ; Attributes: bp-based frame
.text$mn:000051F4
.text$mn:000051F4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:000051F4                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:000051F4 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:000051F4                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+64Ep
.text$mn:000051F4
.text$mn:000051F4 var_4           = dword ptr -4
.text$mn:000051F4 Str             = dword ptr  8
.text$mn:000051F4
.text$mn:000051F4                 push    ebp
.text$mn:000051F5                 mov     ebp, esp
.text$mn:000051F7                 push    ecx
.text$mn:000051F8                 mov     [ebp+var_4], ecx
.text$mn:000051FB                 mov     eax, [ebp+Str]
.text$mn:000051FE                 push    eax             ; Str
.text$mn:000051FF                 mov     ecx, [ebp+var_4]
.text$mn:00005202                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00005207                 mov     esp, ebp
.text$mn:00005209                 pop     ebp
.text$mn:0000520A                 retn    4
.text$mn:0000520A ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:0000520A
.text$mn:0000520A ; ---------------------------------------------------------------------------
.text$mn:0000520D                 align 10h
.text$mn:0000520D _text$mn        ends
.text$mn:0000520D
.text$mn:00005210 ; ===========================================================================
.text$mn:00005210
.text$mn:00005210 ; Segment type: Pure code
.text$mn:00005210 ; Segment permissions: Read/Execute
.text$mn:00005210 _text$mn        segment para public 'CODE' use32
.text$mn:00005210                 assume cs:_text$mn
.text$mn:00005210                 ;org 5210h
.text$mn:00005210 ; COMDAT (pick any)
.text$mn:00005210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005210
.text$mn:00005210 ; =============== S U B R O U T I N E =======================================
.text$mn:00005210
.text$mn:00005210 ; Attributes: bp-based frame
.text$mn:00005210
.text$mn:00005210 ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00005210                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:00005210 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:00005210                                         ; CODE XREF: Style::operator=(Style const &)+15Bp
.text$mn:00005210
.text$mn:00005210 var_4           = dword ptr -4
.text$mn:00005210 arg_0           = dword ptr  8
.text$mn:00005210
.text$mn:00005210                 push    ebp
.text$mn:00005211                 mov     ebp, esp
.text$mn:00005213                 push    ecx
.text$mn:00005214                 mov     [ebp+var_4], ecx
.text$mn:00005217                 mov     ecx, [ebp+var_4]
.text$mn:0000521A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000521F                 mov     eax, [ebp+arg_0]
.text$mn:00005222                 and     eax, 1
.text$mn:00005225                 jz      short loc_5233
.text$mn:00005227                 mov     ecx, [ebp+var_4]
.text$mn:0000522A                 push    ecx             ; void *
.text$mn:0000522B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005230                 add     esp, 4
.text$mn:00005233
.text$mn:00005233 loc_5233:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:00005233                 mov     eax, [ebp+var_4]
.text$mn:00005236                 mov     esp, ebp
.text$mn:00005238                 pop     ebp
.text$mn:00005239                 retn    4
.text$mn:00005239 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:00005239
.text$mn:00005239 _text$mn        ends
.text$mn:00005239
.text$mn:0000523C ; ===========================================================================
.text$mn:0000523C
.text$mn:0000523C ; Segment type: Pure code
.text$mn:0000523C ; Segment permissions: Read/Execute
.text$mn:0000523C _text$mn        segment para public 'CODE' use32
.text$mn:0000523C                 assume cs:_text$mn
.text$mn:0000523C                 ;org 523Ch
.text$mn:0000523C ; COMDAT (pick any)
.text$mn:0000523C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000523C
.text$mn:0000523C ; =============== S U B R O U T I N E =======================================
.text$mn:0000523C
.text$mn:0000523C ; Attributes: bp-based frame
.text$mn:0000523C
.text$mn:0000523C ; public: virtual void * __thiscall ColourPicker::`scalar deleting destructor'(unsigned int)
.text$mn:0000523C                 public ??_GColourPicker@@UAEPAXI@Z
.text$mn:0000523C ??_GColourPicker@@UAEPAXI@Z proc near
.text$mn:0000523C
.text$mn:0000523C var_4           = dword ptr -4
.text$mn:0000523C arg_0           = dword ptr  8
.text$mn:0000523C
.text$mn:0000523C                 push    ebp
.text$mn:0000523D                 mov     ebp, esp
.text$mn:0000523F                 push    ecx
.text$mn:00005240                 mov     [ebp+var_4], ecx
.text$mn:00005243                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005246                 call    ??1ColourPicker@@UAE@XZ ; ColourPicker::~ColourPicker(void)
.text$mn:0000524B                 mov     eax, [ebp+arg_0]
.text$mn:0000524E                 and     eax, 1
.text$mn:00005251                 jz      short loc_525F
.text$mn:00005253                 mov     ecx, [ebp+var_4]
.text$mn:00005256                 push    ecx             ; void *
.text$mn:00005257                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000525C                 add     esp, 4
.text$mn:0000525F
.text$mn:0000525F loc_525F:                               ; CODE XREF: ColourPicker::`scalar deleting destructor'(uint)+15j
.text$mn:0000525F                 mov     eax, [ebp+var_4]
.text$mn:00005262                 mov     esp, ebp
.text$mn:00005264                 pop     ebp
.text$mn:00005265                 retn    4
.text$mn:00005265 ??_GColourPicker@@UAEPAXI@Z endp
.text$mn:00005265
.text$mn:00005265 _text$mn        ends
.text$mn:00005265
.text$mn:00005268 ; ===========================================================================
.text$mn:00005268
.text$mn:00005268 ; Segment type: Pure code
.text$mn:00005268 ; Segment permissions: Read/Execute
.text$mn:00005268 _text$mn        segment para public 'CODE' use32
.text$mn:00005268                 assume cs:_text$mn
.text$mn:00005268                 ;org 5268h
.text$mn:00005268 ; COMDAT (pick any)
.text$mn:00005268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005268
.text$mn:00005268 ; =============== S U B R O U T I N E =======================================
.text$mn:00005268
.text$mn:00005268 ; Attributes: bp-based frame
.text$mn:00005268
.text$mn:00005268 ; public: virtual void * __thiscall Window::`scalar deleting destructor'(unsigned int)
.text$mn:00005268                 public ??_GWindow@@UAEPAXI@Z
.text$mn:00005268 ??_GWindow@@UAEPAXI@Z proc near
.text$mn:00005268
.text$mn:00005268 var_4           = dword ptr -4
.text$mn:00005268 arg_0           = dword ptr  8
.text$mn:00005268
.text$mn:00005268                 push    ebp
.text$mn:00005269                 mov     ebp, esp
.text$mn:0000526B                 push    ecx
.text$mn:0000526C                 mov     [ebp+var_4], ecx
.text$mn:0000526F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005272                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:00005277                 mov     eax, [ebp+arg_0]
.text$mn:0000527A                 and     eax, 1
.text$mn:0000527D                 jz      short loc_528B
.text$mn:0000527F                 mov     ecx, [ebp+var_4]
.text$mn:00005282                 push    ecx             ; void *
.text$mn:00005283                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005288                 add     esp, 4
.text$mn:0000528B
.text$mn:0000528B loc_528B:                               ; CODE XREF: Window::`scalar deleting destructor'(uint)+15j
.text$mn:0000528B                 mov     eax, [ebp+var_4]
.text$mn:0000528E                 mov     esp, ebp
.text$mn:00005290                 pop     ebp
.text$mn:00005291                 retn    4
.text$mn:00005291 ??_GWindow@@UAEPAXI@Z endp
.text$mn:00005291
.text$mn:00005291 _text$mn        ends
.text$mn:00005291
.text$mn:00005294 ; ===========================================================================
.text$mn:00005294
.text$mn:00005294 ; Segment type: Pure code
.text$mn:00005294 ; Segment permissions: Read/Execute
.text$mn:00005294 _text$mn        segment para public 'CODE' use32
.text$mn:00005294                 assume cs:_text$mn
.text$mn:00005294                 ;org 5294h
.text$mn:00005294 ; COMDAT (pick any)
.text$mn:00005294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005294
.text$mn:00005294 ; =============== S U B R O U T I N E =======================================
.text$mn:00005294
.text$mn:00005294 ; Attributes: bp-based frame
.text$mn:00005294
.text$mn:00005294 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005294                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00005294 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005294
.text$mn:00005294 var_4           = dword ptr -4
.text$mn:00005294 arg_0           = dword ptr  8
.text$mn:00005294
.text$mn:00005294                 push    ebp
.text$mn:00005295                 mov     ebp, esp
.text$mn:00005297                 push    ecx
.text$mn:00005298                 mov     [ebp+var_4], ecx
.text$mn:0000529B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000529E                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000052A3                 mov     eax, [ebp+arg_0]
.text$mn:000052A6                 and     eax, 1
.text$mn:000052A9                 jz      short loc_52B7
.text$mn:000052AB                 mov     ecx, [ebp+var_4]
.text$mn:000052AE                 push    ecx             ; void *
.text$mn:000052AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000052B4                 add     esp, 4
.text$mn:000052B7
.text$mn:000052B7 loc_52B7:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000052B7                 mov     eax, [ebp+var_4]
.text$mn:000052BA                 mov     esp, ebp
.text$mn:000052BC                 pop     ebp
.text$mn:000052BD                 retn    4
.text$mn:000052BD ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:000052BD
.text$mn:000052BD _text$mn        ends
.text$mn:000052BD
.text$mn:000052C0 ; ===========================================================================
.text$mn:000052C0
.text$mn:000052C0 ; Segment type: Pure code
.text$mn:000052C0 ; Segment permissions: Read/Execute
.text$mn:000052C0 _text$mn        segment para public 'CODE' use32
.text$mn:000052C0                 assume cs:_text$mn
.text$mn:000052C0                 ;org 52C0h
.text$mn:000052C0 ; COMDAT (pick any)
.text$mn:000052C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052C0
.text$mn:000052C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052C0
.text$mn:000052C0 ; Attributes: bp-based frame
.text$mn:000052C0
.text$mn:000052C0 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000052C0                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:000052C0 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:000052C0
.text$mn:000052C0 var_4           = dword ptr -4
.text$mn:000052C0 arg_0           = dword ptr  8
.text$mn:000052C0
.text$mn:000052C0                 push    ebp
.text$mn:000052C1                 mov     ebp, esp
.text$mn:000052C3                 push    ecx
.text$mn:000052C4                 mov     [ebp+var_4], ecx
.text$mn:000052C7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000052CA                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:000052CF                 mov     eax, [ebp+arg_0]
.text$mn:000052D2                 and     eax, 1
.text$mn:000052D5                 jz      short loc_52E3
.text$mn:000052D7                 mov     ecx, [ebp+var_4]
.text$mn:000052DA                 push    ecx             ; void *
.text$mn:000052DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000052E0                 add     esp, 4
.text$mn:000052E3
.text$mn:000052E3 loc_52E3:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000052E3                 mov     eax, [ebp+var_4]
.text$mn:000052E6                 mov     esp, ebp
.text$mn:000052E8                 pop     ebp
.text$mn:000052E9                 retn    4
.text$mn:000052E9 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:000052E9
.text$mn:000052E9 _text$mn        ends
.text$mn:000052E9
.text$mn:000052EC ; ===========================================================================
.text$mn:000052EC
.text$mn:000052EC ; Segment type: Pure code
.text$mn:000052EC ; Segment permissions: Read/Execute
.text$mn:000052EC _text$mn        segment para public 'CODE' use32
.text$mn:000052EC                 assume cs:_text$mn
.text$mn:000052EC                 ;org 52ECh
.text$mn:000052EC ; COMDAT (pick any)
.text$mn:000052EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052EC
.text$mn:000052EC ; =============== S U B R O U T I N E =======================================
.text$mn:000052EC
.text$mn:000052EC ; Attributes: bp-based frame
.text$mn:000052EC
.text$mn:000052EC ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000052EC                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:000052EC ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:000052EC
.text$mn:000052EC var_4           = dword ptr -4
.text$mn:000052EC arg_0           = dword ptr  8
.text$mn:000052EC
.text$mn:000052EC                 push    ebp
.text$mn:000052ED                 mov     ebp, esp
.text$mn:000052EF                 push    ecx
.text$mn:000052F0                 mov     [ebp+var_4], ecx
.text$mn:000052F3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000052F6                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:000052FB                 mov     eax, [ebp+arg_0]
.text$mn:000052FE                 and     eax, 1
.text$mn:00005301                 jz      short loc_530F
.text$mn:00005303                 mov     ecx, [ebp+var_4]
.text$mn:00005306                 push    ecx             ; void *
.text$mn:00005307                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000530C                 add     esp, 4
.text$mn:0000530F
.text$mn:0000530F loc_530F:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000530F                 mov     eax, [ebp+var_4]
.text$mn:00005312                 mov     esp, ebp
.text$mn:00005314                 pop     ebp
.text$mn:00005315                 retn    4
.text$mn:00005315 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00005315
.text$mn:00005315 _text$mn        ends
.text$mn:00005315
.text$mn:00005318 ; ===========================================================================
.text$mn:00005318
.text$mn:00005318 ; Segment type: Pure code
.text$mn:00005318 ; Segment permissions: Read/Execute
.text$mn:00005318 _text$mn        segment para public 'CODE' use32
.text$mn:00005318                 assume cs:_text$mn
.text$mn:00005318                 ;org 5318h
.text$mn:00005318 ; COMDAT (pick any)
.text$mn:00005318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005318
.text$mn:00005318 ; =============== S U B R O U T I N E =======================================
.text$mn:00005318
.text$mn:00005318 ; Attributes: bp-based frame
.text$mn:00005318
.text$mn:00005318 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005318                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00005318 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00005318
.text$mn:00005318 var_4           = dword ptr -4
.text$mn:00005318 arg_0           = dword ptr  8
.text$mn:00005318
.text$mn:00005318                 push    ebp
.text$mn:00005319                 mov     ebp, esp
.text$mn:0000531B                 push    ecx
.text$mn:0000531C                 mov     [ebp+var_4], ecx
.text$mn:0000531F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005322                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00005327                 mov     eax, [ebp+arg_0]
.text$mn:0000532A                 and     eax, 1
.text$mn:0000532D                 jz      short loc_533B
.text$mn:0000532F                 mov     ecx, [ebp+var_4]
.text$mn:00005332                 push    ecx             ; void *
.text$mn:00005333                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005338                 add     esp, 4
.text$mn:0000533B
.text$mn:0000533B loc_533B:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000533B                 mov     eax, [ebp+var_4]
.text$mn:0000533E                 mov     esp, ebp
.text$mn:00005340                 pop     ebp
.text$mn:00005341                 retn    4
.text$mn:00005341 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00005341
.text$mn:00005341 _text$mn        ends
.text$mn:00005341
.text$di:00005344 ; ===========================================================================
.text$di:00005344
.text$di:00005344 ; Segment type: Pure code
.text$di:00005344 ; Segment permissions: Read/Execute
.text$di:00005344 _text$di        segment para public 'CODE' use32
.text$di:00005344                 assume cs:_text$di
.text$di:00005344                 ;org 5344h
.text$di:00005344 ; COMDAT (pick any)
.text$di:00005344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005344
.text$di:00005344 ; =============== S U B R O U T I N E =======================================
.text$di:00005344
.text$di:00005344 ; Attributes: bp-based frame
.text$di:00005344
.text$di:00005344 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00005344 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00005344                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00005344                 push    ebp
.text$di:00005345                 mov     ebp, esp
.text$di:00005347                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:0000534C                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00005351                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00005356                 call    _atexit
.text$di:0000535B                 add     esp, 4
.text$di:0000535E                 pop     ebp
.text$di:0000535F                 retn
.text$di:0000535F ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:0000535F
.text$di:0000535F _text$di        ends
.text$di:0000535F
.text$di:00005360 ; ===========================================================================
.text$di:00005360
.text$di:00005360 ; Segment type: Pure code
.text$di:00005360 ; Segment permissions: Read/Execute
.text$di:00005360 _text$di        segment para public 'CODE' use32
.text$di:00005360                 assume cs:_text$di
.text$di:00005360                 ;org 5360h
.text$di:00005360 ; COMDAT (pick any)
.text$di:00005360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005360
.text$di:00005360 ; =============== S U B R O U T I N E =======================================
.text$di:00005360
.text$di:00005360 ; Attributes: bp-based frame
.text$di:00005360
.text$di:00005360 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00005360 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00005360                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00005360                 push    ebp
.text$di:00005361                 mov     ebp, esp
.text$di:00005363                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00005368                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:0000536D                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00005372                 call    _atexit
.text$di:00005377                 add     esp, 4
.text$di:0000537A                 pop     ebp
.text$di:0000537B                 retn
.text$di:0000537B ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:0000537B
.text$di:0000537B _text$di        ends
.text$di:0000537B
.text$di:0000537C ; ===========================================================================
.text$di:0000537C
.text$di:0000537C ; Segment type: Pure code
.text$di:0000537C ; Segment permissions: Read/Execute
.text$di:0000537C _text$di        segment para public 'CODE' use32
.text$di:0000537C                 assume cs:_text$di
.text$di:0000537C                 ;org 537Ch
.text$di:0000537C ; COMDAT (pick any)
.text$di:0000537C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000537C
.text$di:0000537C ; =============== S U B R O U T I N E =======================================
.text$di:0000537C
.text$di:0000537C ; Attributes: bp-based frame
.text$di:0000537C
.text$di:0000537C ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:0000537C ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:0000537C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:0000537C                 push    ebp
.text$di:0000537D                 mov     ebp, esp
.text$di:0000537F                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00005384                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00005389                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000538E                 call    _atexit
.text$di:00005393                 add     esp, 4
.text$di:00005396                 pop     ebp
.text$di:00005397                 retn
.text$di:00005397 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00005397
.text$di:00005397 _text$di        ends
.text$di:00005397
.text$di:00005398 ; ===========================================================================
.text$di:00005398
.text$di:00005398 ; Segment type: Pure code
.text$di:00005398 ; Segment permissions: Read/Execute
.text$di:00005398 _text$di        segment para public 'CODE' use32
.text$di:00005398                 assume cs:_text$di
.text$di:00005398                 ;org 5398h
.text$di:00005398 ; COMDAT (pick any)
.text$di:00005398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005398
.text$di:00005398 ; =============== S U B R O U T I N E =======================================
.text$di:00005398
.text$di:00005398 ; Attributes: bp-based frame
.text$di:00005398
.text$di:00005398 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00005398 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005398                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00005398                 push    ebp
.text$di:00005399                 mov     ebp, esp
.text$di:0000539B                 push    0               ; unsigned int
.text$di:0000539D                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000053A2                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000053A7                 pop     ebp
.text$di:000053A8                 retn
.text$di:000053A8 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000053A8
.text$di:000053A8 ; ---------------------------------------------------------------------------
.text$di:000053A9                 align 4
.text$di:000053A9 _text$di        ends
.text$di:000053A9
.text$di:000053AC ; ===========================================================================
.text$di:000053AC
.text$di:000053AC ; Segment type: Pure code
.text$di:000053AC ; Segment permissions: Read/Execute
.text$di:000053AC _text$di        segment para public 'CODE' use32
.text$di:000053AC                 assume cs:_text$di
.text$di:000053AC                 ;org 53ACh
.text$di:000053AC ; COMDAT (pick any)
.text$di:000053AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000053AC
.text$di:000053AC ; =============== S U B R O U T I N E =======================================
.text$di:000053AC
.text$di:000053AC ; Attributes: bp-based frame
.text$di:000053AC
.text$di:000053AC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:000053AC ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000053AC                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:000053AC                 push    ebp
.text$di:000053AD                 mov     ebp, esp
.text$di:000053AF                 push    0               ; unsigned int
.text$di:000053B1                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000053B6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000053BB                 pop     ebp
.text$di:000053BC                 retn
.text$di:000053BC ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000053BC
.text$di:000053BC ; ---------------------------------------------------------------------------
.text$di:000053BD                 align 10h
.text$di:000053BD _text$di        ends
.text$di:000053BD
.text$di:000053C0 ; ===========================================================================
.text$di:000053C0
.text$di:000053C0 ; Segment type: Pure code
.text$di:000053C0 ; Segment permissions: Read/Execute
.text$di:000053C0 _text$di        segment para public 'CODE' use32
.text$di:000053C0                 assume cs:_text$di
.text$di:000053C0                 ;org 53C0h
.text$di:000053C0 ; COMDAT (pick any)
.text$di:000053C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000053C0
.text$di:000053C0 ; =============== S U B R O U T I N E =======================================
.text$di:000053C0
.text$di:000053C0 ; Attributes: bp-based frame
.text$di:000053C0
.text$di:000053C0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:000053C0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000053C0                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:000053C0                 push    ebp
.text$di:000053C1                 mov     ebp, esp
.text$di:000053C3                 push    0               ; unsigned int
.text$di:000053C5                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:000053CA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000053CF                 pop     ebp
.text$di:000053D0                 retn
.text$di:000053D0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000053D0
.text$di:000053D0 ; ---------------------------------------------------------------------------
.text$di:000053D1                 align 4
.text$di:000053D1 _text$di        ends
.text$di:000053D1
.text$di:000053D4 ; ===========================================================================
.text$di:000053D4
.text$di:000053D4 ; Segment type: Pure code
.text$di:000053D4 ; Segment permissions: Read/Execute
.text$di:000053D4 _text$di        segment para public 'CODE' use32
.text$di:000053D4                 assume cs:_text$di
.text$di:000053D4                 ;org 53D4h
.text$di:000053D4 ; COMDAT (pick any)
.text$di:000053D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000053D4
.text$di:000053D4 ; =============== S U B R O U T I N E =======================================
.text$di:000053D4
.text$di:000053D4 ; Attributes: bp-based frame
.text$di:000053D4
.text$di:000053D4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:000053D4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000053D4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:000053D4                 push    ebp
.text$di:000053D5                 mov     ebp, esp
.text$di:000053D7                 push    0               ; unsigned int
.text$di:000053D9                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:000053DE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000053E3                 pop     ebp
.text$di:000053E4                 retn
.text$di:000053E4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000053E4
.text$di:000053E4 ; ---------------------------------------------------------------------------
.text$di:000053E5                 align 4
.text$di:000053E5 _text$di        ends
.text$di:000053E5
.text$di:000053E8 ; ===========================================================================
.text$di:000053E8
.text$di:000053E8 ; Segment type: Pure code
.text$di:000053E8 ; Segment permissions: Read/Execute
.text$di:000053E8 _text$di        segment para public 'CODE' use32
.text$di:000053E8                 assume cs:_text$di
.text$di:000053E8                 ;org 53E8h
.text$di:000053E8 ; COMDAT (pick any)
.text$di:000053E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000053E8
.text$di:000053E8 ; =============== S U B R O U T I N E =======================================
.text$di:000053E8
.text$di:000053E8 ; Attributes: bp-based frame
.text$di:000053E8
.text$di:000053E8 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:000053E8 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:000053E8
.text$di:000053E8 var_1           = byte ptr -1
.text$di:000053E8
.text$di:000053E8                 push    ebp
.text$di:000053E9                 mov     ebp, esp
.text$di:000053EB                 push    ecx
.text$di:000053EC                 xor     eax, eax
.text$di:000053EE                 mov     [ebp+var_1], al
.text$di:000053F1                 mov     esp, ebp
.text$di:000053F3                 pop     ebp
.text$di:000053F4                 retn
.text$di:000053F4 ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:000053F4
.text$di:000053F4 ; ---------------------------------------------------------------------------
.text$di:000053F5                 align 4
.text$di:000053F5 _text$di        ends
.text$di:000053F5
.text$di:000053F8 ; ===========================================================================
.text$di:000053F8
.text$di:000053F8 ; Segment type: Pure code
.text$di:000053F8 ; Segment permissions: Read/Execute
.text$di:000053F8 _text$di        segment para public 'CODE' use32
.text$di:000053F8                 assume cs:_text$di
.text$di:000053F8                 ;org 53F8h
.text$di:000053F8 ; COMDAT (pick any)
.text$di:000053F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000053F8
.text$di:000053F8 ; =============== S U B R O U T I N E =======================================
.text$di:000053F8
.text$di:000053F8 ; Attributes: bp-based frame
.text$di:000053F8
.text$di:000053F8 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:000053F8 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:000053F8
.text$di:000053F8 var_1           = byte ptr -1
.text$di:000053F8
.text$di:000053F8                 push    ebp
.text$di:000053F9                 mov     ebp, esp
.text$di:000053FB                 push    ecx
.text$di:000053FC                 xor     eax, eax
.text$di:000053FE                 mov     [ebp+var_1], al
.text$di:00005401                 mov     esp, ebp
.text$di:00005403                 pop     ebp
.text$di:00005404                 retn
.text$di:00005404 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00005404
.text$di:00005404 ; ---------------------------------------------------------------------------
.text$di:00005405                 align 4
.text$di:00005405 _text$di        ends
.text$di:00005405
.text$di:00005408 ; ===========================================================================
.text$di:00005408
.text$di:00005408 ; Segment type: Pure code
.text$di:00005408 ; Segment permissions: Read/Execute
.text$di:00005408 _text$di        segment para public 'CODE' use32
.text$di:00005408                 assume cs:_text$di
.text$di:00005408                 ;org 5408h
.text$di:00005408 ; COMDAT (pick any)
.text$di:00005408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005408
.text$di:00005408 ; =============== S U B R O U T I N E =======================================
.text$di:00005408
.text$di:00005408 ; Attributes: bp-based frame
.text$di:00005408
.text$di:00005408 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:00005408 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:00005408                 push    ebp
.text$di:00005409                 mov     ebp, esp
.text$di:0000540B                 mov     ecx, offset _ignore ; this
.text$di:00005410                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:00005415                 pop     ebp
.text$di:00005416                 retn
.text$di:00005416 ??__Eignore@std@@YAXXZ endp
.text$di:00005416
.text$di:00005416 ; ---------------------------------------------------------------------------
.text$di:00005417                 align 4
.text$di:00005417 _text$di        ends
.text$di:00005417
.text$di:00005418 ; ===========================================================================
.text$di:00005418
.text$di:00005418 ; Segment type: Pure code
.text$di:00005418 ; Segment permissions: Read/Execute
.text$di:00005418 _text$di        segment para public 'CODE' use32
.text$di:00005418                 assume cs:_text$di
.text$di:00005418                 ;org 5418h
.text$di:00005418 ; COMDAT (pick any)
.text$di:00005418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005418
.text$di:00005418 ; =============== S U B R O U T I N E =======================================
.text$di:00005418
.text$di:00005418 ; Attributes: bp-based frame
.text$di:00005418
.text$di:00005418 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00005418 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00005418                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00005418
.text$di:00005418 var_1           = byte ptr -1
.text$di:00005418
.text$di:00005418                 push    ebp
.text$di:00005419                 mov     ebp, esp
.text$di:0000541B                 push    ecx
.text$di:0000541C                 xor     eax, eax
.text$di:0000541E                 mov     [ebp+var_1], al
.text$di:00005421                 mov     esp, ebp
.text$di:00005423                 pop     ebp
.text$di:00005424                 retn
.text$di:00005424 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00005424
.text$di:00005424 ; ---------------------------------------------------------------------------
.text$di:00005425                 align 4
.text$di:00005425 _text$di        ends
.text$di:00005425
.text$yd:00005428 ; ===========================================================================
.text$yd:00005428
.text$yd:00005428 ; Segment type: Pure code
.text$yd:00005428 ; Segment permissions: Read/Execute
.text$yd:00005428 _text$yd        segment para public 'CODE' use32
.text$yd:00005428                 assume cs:_text$yd
.text$yd:00005428                 ;org 5428h
.text$yd:00005428 ; COMDAT (pick any)
.text$yd:00005428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005428
.text$yd:00005428 ; =============== S U B R O U T I N E =======================================
.text$yd:00005428
.text$yd:00005428 ; Attributes: bp-based frame
.text$yd:00005428
.text$yd:00005428 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00005428 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00005428                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00005428                 push    ebp
.text$yd:00005429                 mov     ebp, esp
.text$yd:0000542B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00005430                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00005435                 pop     ebp
.text$yd:00005436                 retn
.text$yd:00005436 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00005436
.text$yd:00005436 ; ---------------------------------------------------------------------------
.text$yd:00005437                 align 4
.text$yd:00005437 _text$yd        ends
.text$yd:00005437
.text$yd:00005438 ; ===========================================================================
.text$yd:00005438
.text$yd:00005438 ; Segment type: Pure code
.text$yd:00005438 ; Segment permissions: Read/Execute
.text$yd:00005438 _text$yd        segment para public 'CODE' use32
.text$yd:00005438                 assume cs:_text$yd
.text$yd:00005438                 ;org 5438h
.text$yd:00005438 ; COMDAT (pick any)
.text$yd:00005438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005438
.text$yd:00005438 ; =============== S U B R O U T I N E =======================================
.text$yd:00005438
.text$yd:00005438 ; Attributes: bp-based frame
.text$yd:00005438
.text$yd:00005438 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00005438 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00005438                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00005438                 push    ebp
.text$yd:00005439                 mov     ebp, esp
.text$yd:0000543B                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00005440                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00005445                 pop     ebp
.text$yd:00005446                 retn
.text$yd:00005446 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00005446
.text$yd:00005446 ; ---------------------------------------------------------------------------
.text$yd:00005447                 align 4
.text$yd:00005447 _text$yd        ends
.text$yd:00005447
.text$yd:00005448 ; ===========================================================================
.text$yd:00005448
.text$yd:00005448 ; Segment type: Pure code
.text$yd:00005448 ; Segment permissions: Read/Execute
.text$yd:00005448 _text$yd        segment para public 'CODE' use32
.text$yd:00005448                 assume cs:_text$yd
.text$yd:00005448                 ;org 5448h
.text$yd:00005448 ; COMDAT (pick any)
.text$yd:00005448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005448
.text$yd:00005448 ; =============== S U B R O U T I N E =======================================
.text$yd:00005448
.text$yd:00005448 ; Attributes: bp-based frame
.text$yd:00005448
.text$yd:00005448 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00005448 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00005448                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00005448                 push    ebp
.text$yd:00005449                 mov     ebp, esp
.text$yd:0000544B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00005450                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00005455                 pop     ebp
.text$yd:00005456                 retn
.text$yd:00005456 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00005456
.text$yd:00005456 ; ---------------------------------------------------------------------------
.text$yd:00005457                 align 4
.text$yd:00005457 _text$yd        ends
.text$yd:00005457
.text$mn:00005458 ; ===========================================================================
.text$mn:00005458
.text$mn:00005458 ; Segment type: Pure code
.text$mn:00005458 ; Segment permissions: Read/Execute
.text$mn:00005458 _text$mn        segment para public 'CODE' use32
.text$mn:00005458                 assume cs:_text$mn
.text$mn:00005458                 ;org 5458h
.text$mn:00005458 ; COMDAT (pick any)
.text$mn:00005458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005458
.text$mn:00005458 ; =============== S U B R O U T I N E =======================================
.text$mn:00005458
.text$mn:00005458 ; Attributes: bp-based frame
.text$mn:00005458
.text$mn:00005458 ; void __thiscall NppParameters::SetTransparent(NppParameters *this, HWND hWnd, int)
.text$mn:00005458                 public ?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z
.text$mn:00005458 ?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z proc near
.text$mn:00005458                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+6EEp
.text$mn:00005458                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+BA2p
.text$mn:00005458
.text$mn:00005458 var_4           = dword ptr -4
.text$mn:00005458 hWnd            = dword ptr  8
.text$mn:00005458 arg_4           = dword ptr  0Ch
.text$mn:00005458
.text$mn:00005458                 push    ebp
.text$mn:00005459                 mov     ebp, esp
.text$mn:0000545B                 push    ecx
.text$mn:0000545C                 mov     [ebp+var_4], ecx
.text$mn:0000545F                 mov     eax, [ebp+var_4]
.text$mn:00005462                 cmp     dword ptr [eax+1C8F8h], 0
.text$mn:00005469                 jnz     short loc_546D
.text$mn:0000546B                 jmp     short loc_54BF
.text$mn:0000546D ; ---------------------------------------------------------------------------
.text$mn:0000546D
.text$mn:0000546D loc_546D:                               ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+11j
.text$mn:0000546D                 push    0FFFFFFECh      ; nIndex
.text$mn:0000546F                 mov     ecx, [ebp+hWnd]
.text$mn:00005472                 push    ecx             ; hWnd
.text$mn:00005473                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00005479                 or      eax, 80000h
.text$mn:0000547E                 push    eax             ; dwNewLong
.text$mn:0000547F                 push    0FFFFFFECh      ; nIndex
.text$mn:00005481                 mov     edx, [ebp+hWnd]
.text$mn:00005484                 push    edx             ; hWnd
.text$mn:00005485                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000548B                 cmp     [ebp+arg_4], 0FFh
.text$mn:00005492                 jle     short loc_549B
.text$mn:00005494                 mov     [ebp+arg_4], 0FFh
.text$mn:0000549B
.text$mn:0000549B loc_549B:                               ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+3Aj
.text$mn:0000549B                 cmp     [ebp+arg_4], 0
.text$mn:0000549F                 jge     short loc_54A8
.text$mn:000054A1                 mov     [ebp+arg_4], 0
.text$mn:000054A8
.text$mn:000054A8 loc_54A8:                               ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+47j
.text$mn:000054A8                 push    2
.text$mn:000054AA                 mov     eax, [ebp+arg_4]
.text$mn:000054AD                 push    eax
.text$mn:000054AE                 push    0
.text$mn:000054B0                 mov     ecx, [ebp+hWnd]
.text$mn:000054B3                 push    ecx
.text$mn:000054B4                 mov     edx, [ebp+var_4]
.text$mn:000054B7                 mov     eax, [edx+1C8F8h]
.text$mn:000054BD                 call    eax
.text$mn:000054BF
.text$mn:000054BF loc_54BF:                               ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+13j
.text$mn:000054BF                 mov     esp, ebp
.text$mn:000054C1                 pop     ebp
.text$mn:000054C2                 retn    8
.text$mn:000054C2 ?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z endp
.text$mn:000054C2
.text$mn:000054C2 ; ---------------------------------------------------------------------------
.text$mn:000054C5                 align 4
.text$mn:000054C5 _text$mn        ends
.text$mn:000054C5
.text$mn:000054C8 ; ===========================================================================
.text$mn:000054C8
.text$mn:000054C8 ; Segment type: Pure code
.text$mn:000054C8 ; Segment permissions: Read/Execute
.text$mn:000054C8 _text$mn        segment para public 'CODE' use32
.text$mn:000054C8                 assume cs:_text$mn
.text$mn:000054C8                 ;org 54C8h
.text$mn:000054C8 ; COMDAT (pick any)
.text$mn:000054C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C8
.text$mn:000054C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C8
.text$mn:000054C8 ; Attributes: bp-based frame
.text$mn:000054C8
.text$mn:000054C8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000054C8                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000054C8 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000054C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:000054C8
.text$mn:000054C8 var_10          = byte ptr -10h
.text$mn:000054C8 var_8           = dword ptr -8
.text$mn:000054C8 var_1           = byte ptr -1
.text$mn:000054C8
.text$mn:000054C8                 push    ebp
.text$mn:000054C9                 mov     ebp, esp
.text$mn:000054CB                 sub     esp, 10h
.text$mn:000054CE                 mov     [ebp+var_8], ecx
.text$mn:000054D1                 lea     ecx, [ebp+var_1]
.text$mn:000054D4                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000054D9                 push    1
.text$mn:000054DB                 lea     ecx, [ebp+var_1]
.text$mn:000054DE                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000054E3                 mov     ecx, [ebp+var_8]
.text$mn:000054E6                 mov     [ecx], eax
.text$mn:000054E8                 lea     ecx, [ebp+var_10] ; this
.text$mn:000054EB                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000054F0                 push    eax             ; int
.text$mn:000054F1                 mov     edx, [ebp+var_8]
.text$mn:000054F4                 mov     eax, [edx]
.text$mn:000054F6                 push    eax             ; void *
.text$mn:000054F7                 lea     ecx, [ebp+var_1]
.text$mn:000054FA                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000054FF                 mov     ecx, [ebp+var_8]
.text$mn:00005502                 mov     edx, [ecx]
.text$mn:00005504                 mov     eax, [ebp+var_8]
.text$mn:00005507                 mov     [edx], eax
.text$mn:00005509                 mov     esp, ebp
.text$mn:0000550B                 pop     ebp
.text$mn:0000550C                 retn
.text$mn:0000550C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000550C
.text$mn:0000550C ; ---------------------------------------------------------------------------
.text$mn:0000550D                 align 10h
.text$mn:0000550D _text$mn        ends
.text$mn:0000550D
.text$mn:00005510 ; ===========================================================================
.text$mn:00005510
.text$mn:00005510 ; Segment type: Pure code
.text$mn:00005510 ; Segment permissions: Read/Execute
.text$mn:00005510 _text$mn        segment para public 'CODE' use32
.text$mn:00005510                 assume cs:_text$mn
.text$mn:00005510                 ;org 5510h
.text$mn:00005510 ; COMDAT (pick any)
.text$mn:00005510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005510
.text$mn:00005510 ; =============== S U B R O U T I N E =======================================
.text$mn:00005510
.text$mn:00005510 ; Attributes: bp-based frame
.text$mn:00005510
.text$mn:00005510 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00005510                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00005510 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005510                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00005510
.text$mn:00005510 var_10          = byte ptr -10h
.text$mn:00005510 var_8           = dword ptr -8
.text$mn:00005510 var_1           = byte ptr -1
.text$mn:00005510
.text$mn:00005510                 push    ebp
.text$mn:00005511                 mov     ebp, esp
.text$mn:00005513                 sub     esp, 10h
.text$mn:00005516                 mov     [ebp+var_8], ecx
.text$mn:00005519                 lea     ecx, [ebp+var_1]
.text$mn:0000551C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005521                 push    1
.text$mn:00005523                 lea     ecx, [ebp+var_1]
.text$mn:00005526                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000552B                 mov     ecx, [ebp+var_8]
.text$mn:0000552E                 mov     [ecx], eax
.text$mn:00005530                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005533                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005538                 push    eax             ; int
.text$mn:00005539                 mov     edx, [ebp+var_8]
.text$mn:0000553C                 mov     eax, [edx]
.text$mn:0000553E                 push    eax             ; void *
.text$mn:0000553F                 lea     ecx, [ebp+var_1]
.text$mn:00005542                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005547                 mov     ecx, [ebp+var_8]
.text$mn:0000554A                 mov     edx, [ecx]
.text$mn:0000554C                 mov     eax, [ebp+var_8]
.text$mn:0000554F                 mov     [edx], eax
.text$mn:00005551                 mov     esp, ebp
.text$mn:00005553                 pop     ebp
.text$mn:00005554                 retn
.text$mn:00005554 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005554
.text$mn:00005554 ; ---------------------------------------------------------------------------
.text$mn:00005555                 align 4
.text$mn:00005555 _text$mn        ends
.text$mn:00005555
.text$mn:00005558 ; ===========================================================================
.text$mn:00005558
.text$mn:00005558 ; Segment type: Pure code
.text$mn:00005558 ; Segment permissions: Read/Execute
.text$mn:00005558 _text$mn        segment para public 'CODE' use32
.text$mn:00005558                 assume cs:_text$mn
.text$mn:00005558                 ;org 5558h
.text$mn:00005558 ; COMDAT (pick any)
.text$mn:00005558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005558
.text$mn:00005558 ; =============== S U B R O U T I N E =======================================
.text$mn:00005558
.text$mn:00005558 ; Attributes: bp-based frame
.text$mn:00005558
.text$mn:00005558 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00005558                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:00005558 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:00005558                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:00005558
.text$mn:00005558 var_4           = dword ptr -4
.text$mn:00005558
.text$mn:00005558                 push    ebp
.text$mn:00005559                 mov     ebp, esp
.text$mn:0000555B                 push    ecx
.text$mn:0000555C                 mov     [ebp+var_4], ecx
.text$mn:0000555F                 mov     esp, ebp
.text$mn:00005561                 pop     ebp
.text$mn:00005562                 retn    4
.text$mn:00005562 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:00005562
.text$mn:00005562 ; ---------------------------------------------------------------------------
.text$mn:00005565                 align 4
.text$mn:00005565 _text$mn        ends
.text$mn:00005565
.text$mn:00005568 ; ===========================================================================
.text$mn:00005568
.text$mn:00005568 ; Segment type: Pure code
.text$mn:00005568 ; Segment permissions: Read/Execute
.text$mn:00005568 _text$mn        segment para public 'CODE' use32
.text$mn:00005568                 assume cs:_text$mn
.text$mn:00005568                 ;org 5568h
.text$mn:00005568 ; COMDAT (pick any)
.text$mn:00005568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005568
.text$mn:00005568 ; =============== S U B R O U T I N E =======================================
.text$mn:00005568
.text$mn:00005568 ; Attributes: bp-based frame
.text$mn:00005568
.text$mn:00005568 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00005568                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005568 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00005568                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00005568
.text$mn:00005568 var_20          = dword ptr -20h
.text$mn:00005568 var_1C          = dword ptr -1Ch
.text$mn:00005568 var_18          = dword ptr -18h
.text$mn:00005568 var_11          = byte ptr -11h
.text$mn:00005568 var_10          = dword ptr -10h
.text$mn:00005568 var_C           = byte ptr -0Ch
.text$mn:00005568 var_4           = dword ptr -4
.text$mn:00005568 arg_0           = dword ptr  8
.text$mn:00005568
.text$mn:00005568 ; FUNCTION CHUNK AT .text$mn:0000568A SIZE 00000009 BYTES
.text$mn:00005568
.text$mn:00005568                 push    ebp
.text$mn:00005569                 mov     ebp, esp
.text$mn:0000556B                 push    0FFFFFFFFh
.text$mn:0000556D                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005572                 mov     eax, large fs:0
.text$mn:00005578                 push    eax
.text$mn:00005579                 push    ecx
.text$mn:0000557A                 sub     esp, 10h
.text$mn:0000557D                 push    ebx
.text$mn:0000557E                 push    esi
.text$mn:0000557F                 push    edi
.text$mn:00005580                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005585                 xor     eax, ebp
.text$mn:00005587                 push    eax
.text$mn:00005588                 lea     eax, [ebp+var_C]
.text$mn:0000558B                 mov     large fs:0, eax
.text$mn:00005591                 mov     [ebp+var_10], esp
.text$mn:00005594                 mov     [ebp+var_18], ecx
.text$mn:00005597                 mov     eax, [ebp+arg_0]
.text$mn:0000559A                 or      eax, 0Fh
.text$mn:0000559D                 mov     [ebp+var_1C], eax
.text$mn:000055A0                 mov     ecx, [ebp+var_18]
.text$mn:000055A3                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000055A8                 cmp     eax, [ebp+var_1C]
.text$mn:000055AB                 jnb     short loc_55B5
.text$mn:000055AD                 mov     ecx, [ebp+arg_0]
.text$mn:000055B0                 mov     [ebp+var_1C], ecx
.text$mn:000055B3                 jmp     short loc_5607
.text$mn:000055B5 ; ---------------------------------------------------------------------------
.text$mn:000055B5
.text$mn:000055B5 loc_55B5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:000055B5                 mov     edx, [ebp+var_18]
.text$mn:000055B8                 mov     ecx, [edx+18h]
.text$mn:000055BB                 shr     ecx, 1
.text$mn:000055BD                 mov     eax, [ebp+var_1C]
.text$mn:000055C0                 xor     edx, edx
.text$mn:000055C2                 mov     esi, 3
.text$mn:000055C7                 div     esi
.text$mn:000055C9                 cmp     ecx, eax
.text$mn:000055CB                 ja      short loc_55CF
.text$mn:000055CD                 jmp     short loc_5607
.text$mn:000055CF ; ---------------------------------------------------------------------------
.text$mn:000055CF
.text$mn:000055CF loc_55CF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:000055CF                 mov     ecx, [ebp+var_18]
.text$mn:000055D2                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000055D7                 mov     edx, [ebp+var_18]
.text$mn:000055DA                 mov     ecx, [edx+18h]
.text$mn:000055DD                 shr     ecx, 1
.text$mn:000055DF                 sub     eax, ecx
.text$mn:000055E1                 mov     edx, [ebp+var_18]
.text$mn:000055E4                 cmp     [edx+18h], eax
.text$mn:000055E7                 ja      short loc_55FC
.text$mn:000055E9                 mov     eax, [ebp+var_18]
.text$mn:000055EC                 mov     ecx, [eax+18h]
.text$mn:000055EF                 shr     ecx, 1
.text$mn:000055F1                 mov     edx, [ebp+var_18]
.text$mn:000055F4                 add     ecx, [edx+18h]
.text$mn:000055F7                 mov     [ebp+var_1C], ecx
.text$mn:000055FA                 jmp     short loc_5607
.text$mn:000055FC ; ---------------------------------------------------------------------------
.text$mn:000055FC
.text$mn:000055FC loc_55FC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:000055FC                 mov     ecx, [ebp+var_18]
.text$mn:000055FF                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005604                 mov     [ebp+var_1C], eax
.text$mn:00005607
.text$mn:00005607 loc_5607:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00005607                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00005607                 mov     [ebp+var_4], 0
.text$mn:0000560E                 mov     eax, [ebp+var_1C]
.text$mn:00005611                 add     eax, 1
.text$mn:00005614                 push    eax
.text$mn:00005615                 lea     ecx, [ebp+var_11]
.text$mn:00005618                 push    ecx
.text$mn:00005619                 mov     ecx, [ebp+var_18]
.text$mn:0000561C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005621                 mov     ecx, eax
.text$mn:00005623                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005628                 mov     [ebp+var_20], eax
.text$mn:0000562B                 jmp     short loc_568A
.text$mn:0000562B ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:0000562B
.text$mn:0000562D
.text$mn:0000562D ; =============== S U B R O U T I N E =======================================
.text$mn:0000562D
.text$mn:0000562D
.text$mn:0000562D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000562D                                         ; DATA XREF: .xdata$x:00007CBCo
.text$mn:0000562D
.text$mn:0000562D ; FUNCTION CHUNK AT .text$mn:00005674 SIZE 00000009 BYTES
.text$mn:0000562D ; FUNCTION CHUNK AT .text$mn:00005684 SIZE 00000006 BYTES
.text$mn:0000562D
.text$mn:0000562D                 mov     [ebp-10h], esp
.text$mn:00005630                 mov     edx, [ebp+8]
.text$mn:00005633                 mov     [ebp-1Ch], edx
.text$mn:00005636                 mov     byte ptr [ebp-4], 2
.text$mn:0000563A                 mov     eax, [ebp-1Ch]
.text$mn:0000563D                 add     eax, 1
.text$mn:00005640                 push    eax
.text$mn:00005641                 lea     ecx, [ebp-12h]
.text$mn:00005644                 push    ecx
.text$mn:00005645                 mov     ecx, [ebp-18h]
.text$mn:00005648                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000564D                 mov     ecx, eax
.text$mn:0000564F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005654                 mov     [ebp-20h], eax
.text$mn:00005657                 jmp     short loc_5674
.text$mn:00005657 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00005657
.text$mn:00005659
.text$mn:00005659 ; =============== S U B R O U T I N E =======================================
.text$mn:00005659
.text$mn:00005659 ; Attributes: noreturn
.text$mn:00005659
.text$mn:00005659 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005659                                         ; DATA XREF: .xdata$x:00007CCCo
.text$mn:00005659                 push    0               ; Size
.text$mn:0000565B                 push    1               ; char
.text$mn:0000565D                 mov     ecx, [ebp-18h]
.text$mn:00005660                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005665                 push    0
.text$mn:00005667                 push    0
.text$mn:00005669                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005669 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00005669
.text$mn:0000566E ; ---------------------------------------------------------------------------
.text$mn:0000566E                 mov     eax, offset $LN17
.text$mn:00005673                 retn
.text$mn:00005674 ; ---------------------------------------------------------------------------
.text$mn:00005674 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005674
.text$mn:00005674 loc_5674:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005674                 mov     dword ptr [ebp-4], 1
.text$mn:0000567B                 jmp     short loc_5684
.text$mn:0000567B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000567D
.text$mn:0000567D ; =============== S U B R O U T I N E =======================================
.text$mn:0000567D
.text$mn:0000567D
.text$mn:0000567D $LN17           proc near               ; DATA XREF: .text$mn:0000566Eo
.text$mn:0000567D                 mov     dword ptr [ebp-4], 1
.text$mn:0000567D $LN17           endp ; sp-analysis failed
.text$mn:0000567D
.text$mn:00005684 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005684
.text$mn:00005684 loc_5684:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005684                 mov     eax, offset $LN19
.text$mn:00005689                 retn
.text$mn:00005689 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000568A ; ---------------------------------------------------------------------------
.text$mn:0000568A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000568A
.text$mn:0000568A loc_568A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:0000568A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005691                 jmp     short loc_569A
.text$mn:00005691 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005693
.text$mn:00005693 ; =============== S U B R O U T I N E =======================================
.text$mn:00005693
.text$mn:00005693
.text$mn:00005693 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_5684o
.text$mn:00005693                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000569A
.text$mn:0000569A loc_569A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:0000569A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000569E                 jbe     short loc_56B9
.text$mn:000056A0                 mov     edx, [ebp+0Ch]
.text$mn:000056A3                 push    edx             ; Size
.text$mn:000056A4                 mov     ecx, [ebp-18h]
.text$mn:000056A7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000056AC                 push    eax             ; Src
.text$mn:000056AD                 mov     eax, [ebp-20h]
.text$mn:000056B0                 push    eax             ; Dst
.text$mn:000056B1                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000056B6                 add     esp, 0Ch
.text$mn:000056B9
.text$mn:000056B9 loc_56B9:                               ; CODE XREF: $LN19+Bj
.text$mn:000056B9                 push    0               ; Size
.text$mn:000056BB                 push    1               ; char
.text$mn:000056BD                 mov     ecx, [ebp-18h]
.text$mn:000056C0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000056C5                 lea     ecx, [ebp-20h]
.text$mn:000056C8                 push    ecx             ; int
.text$mn:000056C9                 mov     edx, [ebp-18h]
.text$mn:000056CC                 add     edx, 4
.text$mn:000056CF                 push    edx             ; void *
.text$mn:000056D0                 lea     eax, [ebp-13h]
.text$mn:000056D3                 push    eax
.text$mn:000056D4                 mov     ecx, [ebp-18h]
.text$mn:000056D7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000056DC                 mov     ecx, eax
.text$mn:000056DE                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:000056E3                 mov     ecx, [ebp-18h]
.text$mn:000056E6                 mov     edx, [ebp-1Ch]
.text$mn:000056E9                 mov     [ecx+18h], edx
.text$mn:000056EC                 mov     eax, [ebp+0Ch]
.text$mn:000056EF                 push    eax
.text$mn:000056F0                 mov     ecx, [ebp-18h]
.text$mn:000056F3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000056F8                 mov     ecx, [ebp-0Ch]
.text$mn:000056FB                 mov     large fs:0, ecx
.text$mn:00005702                 pop     ecx
.text$mn:00005703                 pop     edi
.text$mn:00005704                 pop     esi
.text$mn:00005705                 pop     ebx
.text$mn:00005706                 mov     esp, ebp
.text$mn:00005708                 pop     ebp
.text$mn:00005709                 retn    8
.text$mn:00005709 $LN19           endp ; sp-analysis failed
.text$mn:00005709
.text$mn:00005709 _text$mn        ends
.text$mn:00005709
.text$x:0000570C ; ===========================================================================
.text$x:0000570C
.text$x:0000570C ; Segment type: Pure code
.text$x:0000570C ; Segment permissions: Read/Execute
.text$x:0000570C _text$x         segment para public 'CODE' use32
.text$x:0000570C                 assume cs:_text$x
.text$x:0000570C                 ;org 570Ch
.text$x:0000570C ; COMDAT (pick associative to section at 5568)
.text$x:0000570C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000570C
.text$x:0000570C ; =============== S U B R O U T I N E =======================================
.text$x:0000570C
.text$x:0000570C
.text$x:0000570C __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:0000570C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:0000570C
.text$x:0000570C arg_4           = dword ptr  8
.text$x:0000570C
.text$x:0000570C                 mov     edx, [esp+arg_4]
.text$x:00005710                 lea     eax, [edx+0Ch]
.text$x:00005713                 mov     ecx, [edx-24h]
.text$x:00005716                 xor     ecx, eax
.text$x:00005718                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000571D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00005722                 jmp     ___CxxFrameHandler3
.text$x:00005722 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00005722
.text$x:00005722 ; ---------------------------------------------------------------------------
.text$x:00005727                 align 4
.text$x:00005727 _text$x         ends
.text$x:00005727
.text$mn:00005728 ; ===========================================================================
.text$mn:00005728
.text$mn:00005728 ; Segment type: Pure code
.text$mn:00005728 ; Segment permissions: Read/Execute
.text$mn:00005728 _text$mn        segment para public 'CODE' use32
.text$mn:00005728                 assume cs:_text$mn
.text$mn:00005728                 ;org 5728h
.text$mn:00005728 ; COMDAT (pick any)
.text$mn:00005728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005728
.text$mn:00005728 ; =============== S U B R O U T I N E =======================================
.text$mn:00005728
.text$mn:00005728 ; Attributes: bp-based frame
.text$mn:00005728
.text$mn:00005728 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00005728                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005728 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00005728                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00005728
.text$mn:00005728 var_20          = dword ptr -20h
.text$mn:00005728 var_1C          = dword ptr -1Ch
.text$mn:00005728 var_18          = dword ptr -18h
.text$mn:00005728 var_11          = byte ptr -11h
.text$mn:00005728 var_10          = dword ptr -10h
.text$mn:00005728 var_C           = byte ptr -0Ch
.text$mn:00005728 var_4           = dword ptr -4
.text$mn:00005728 arg_0           = dword ptr  8
.text$mn:00005728
.text$mn:00005728 ; FUNCTION CHUNK AT .text$mn:0000584A SIZE 00000009 BYTES
.text$mn:00005728
.text$mn:00005728                 push    ebp
.text$mn:00005729                 mov     ebp, esp
.text$mn:0000572B                 push    0FFFFFFFFh
.text$mn:0000572D                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005732                 mov     eax, large fs:0
.text$mn:00005738                 push    eax
.text$mn:00005739                 push    ecx
.text$mn:0000573A                 sub     esp, 10h
.text$mn:0000573D                 push    ebx
.text$mn:0000573E                 push    esi
.text$mn:0000573F                 push    edi
.text$mn:00005740                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005745                 xor     eax, ebp
.text$mn:00005747                 push    eax
.text$mn:00005748                 lea     eax, [ebp+var_C]
.text$mn:0000574B                 mov     large fs:0, eax
.text$mn:00005751                 mov     [ebp+var_10], esp
.text$mn:00005754                 mov     [ebp+var_18], ecx
.text$mn:00005757                 mov     eax, [ebp+arg_0]
.text$mn:0000575A                 or      eax, 7
.text$mn:0000575D                 mov     [ebp+var_1C], eax
.text$mn:00005760                 mov     ecx, [ebp+var_18]
.text$mn:00005763                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005768                 cmp     eax, [ebp+var_1C]
.text$mn:0000576B                 jnb     short loc_5775
.text$mn:0000576D                 mov     ecx, [ebp+arg_0]
.text$mn:00005770                 mov     [ebp+var_1C], ecx
.text$mn:00005773                 jmp     short loc_57C7
.text$mn:00005775 ; ---------------------------------------------------------------------------
.text$mn:00005775
.text$mn:00005775 loc_5775:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00005775                 mov     edx, [ebp+var_18]
.text$mn:00005778                 mov     ecx, [edx+18h]
.text$mn:0000577B                 shr     ecx, 1
.text$mn:0000577D                 mov     eax, [ebp+var_1C]
.text$mn:00005780                 xor     edx, edx
.text$mn:00005782                 mov     esi, 3
.text$mn:00005787                 div     esi
.text$mn:00005789                 cmp     ecx, eax
.text$mn:0000578B                 ja      short loc_578F
.text$mn:0000578D                 jmp     short loc_57C7
.text$mn:0000578F ; ---------------------------------------------------------------------------
.text$mn:0000578F
.text$mn:0000578F loc_578F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:0000578F                 mov     ecx, [ebp+var_18]
.text$mn:00005792                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005797                 mov     edx, [ebp+var_18]
.text$mn:0000579A                 mov     ecx, [edx+18h]
.text$mn:0000579D                 shr     ecx, 1
.text$mn:0000579F                 sub     eax, ecx
.text$mn:000057A1                 mov     edx, [ebp+var_18]
.text$mn:000057A4                 cmp     [edx+18h], eax
.text$mn:000057A7                 ja      short loc_57BC
.text$mn:000057A9                 mov     eax, [ebp+var_18]
.text$mn:000057AC                 mov     ecx, [eax+18h]
.text$mn:000057AF                 shr     ecx, 1
.text$mn:000057B1                 mov     edx, [ebp+var_18]
.text$mn:000057B4                 add     ecx, [edx+18h]
.text$mn:000057B7                 mov     [ebp+var_1C], ecx
.text$mn:000057BA                 jmp     short loc_57C7
.text$mn:000057BC ; ---------------------------------------------------------------------------
.text$mn:000057BC
.text$mn:000057BC loc_57BC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:000057BC                 mov     ecx, [ebp+var_18]
.text$mn:000057BF                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000057C4                 mov     [ebp+var_1C], eax
.text$mn:000057C7
.text$mn:000057C7 loc_57C7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:000057C7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:000057C7                 mov     [ebp+var_4], 0
.text$mn:000057CE                 mov     eax, [ebp+var_1C]
.text$mn:000057D1                 add     eax, 1
.text$mn:000057D4                 push    eax
.text$mn:000057D5                 lea     ecx, [ebp+var_11]
.text$mn:000057D8                 push    ecx
.text$mn:000057D9                 mov     ecx, [ebp+var_18]
.text$mn:000057DC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000057E1                 mov     ecx, eax
.text$mn:000057E3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:000057E8                 mov     [ebp+var_20], eax
.text$mn:000057EB                 jmp     short loc_584A
.text$mn:000057EB ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:000057EB
.text$mn:000057ED
.text$mn:000057ED ; =============== S U B R O U T I N E =======================================
.text$mn:000057ED
.text$mn:000057ED
.text$mn:000057ED __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:000057ED                                         ; DATA XREF: .xdata$x:00008008o
.text$mn:000057ED
.text$mn:000057ED ; FUNCTION CHUNK AT .text$mn:00005834 SIZE 00000009 BYTES
.text$mn:000057ED ; FUNCTION CHUNK AT .text$mn:00005844 SIZE 00000006 BYTES
.text$mn:000057ED
.text$mn:000057ED                 mov     [ebp-10h], esp
.text$mn:000057F0                 mov     edx, [ebp+8]
.text$mn:000057F3                 mov     [ebp-1Ch], edx
.text$mn:000057F6                 mov     byte ptr [ebp-4], 2
.text$mn:000057FA                 mov     eax, [ebp-1Ch]
.text$mn:000057FD                 add     eax, 1
.text$mn:00005800                 push    eax
.text$mn:00005801                 lea     ecx, [ebp-12h]
.text$mn:00005804                 push    ecx
.text$mn:00005805                 mov     ecx, [ebp-18h]
.text$mn:00005808                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000580D                 mov     ecx, eax
.text$mn:0000580F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00005814                 mov     [ebp-20h], eax
.text$mn:00005817                 jmp     short loc_5834
.text$mn:00005817 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00005817
.text$mn:00005819
.text$mn:00005819 ; =============== S U B R O U T I N E =======================================
.text$mn:00005819
.text$mn:00005819 ; Attributes: noreturn
.text$mn:00005819
.text$mn:00005819 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005819                                         ; DATA XREF: .xdata$x:00008018o
.text$mn:00005819                 push    0
.text$mn:0000581B                 push    1
.text$mn:0000581D                 mov     ecx, [ebp-18h]
.text$mn:00005820                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005825                 push    0
.text$mn:00005827                 push    0
.text$mn:00005829                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005829 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00005829
.text$mn:0000582E ; ---------------------------------------------------------------------------
.text$mn:0000582E                 mov     eax, offset $LN17_0
.text$mn:00005833                 retn
.text$mn:00005834 ; ---------------------------------------------------------------------------
.text$mn:00005834 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005834
.text$mn:00005834 loc_5834:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005834                 mov     dword ptr [ebp-4], 1
.text$mn:0000583B                 jmp     short loc_5844
.text$mn:0000583B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000583D
.text$mn:0000583D ; =============== S U B R O U T I N E =======================================
.text$mn:0000583D
.text$mn:0000583D
.text$mn:0000583D $LN17_0         proc near               ; DATA XREF: .text$mn:0000582Eo
.text$mn:0000583D                 mov     dword ptr [ebp-4], 1
.text$mn:0000583D $LN17_0         endp ; sp-analysis failed
.text$mn:0000583D
.text$mn:00005844 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005844
.text$mn:00005844 loc_5844:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005844                 mov     eax, offset $LN19_0
.text$mn:00005849                 retn
.text$mn:00005849 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000584A ; ---------------------------------------------------------------------------
.text$mn:0000584A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000584A
.text$mn:0000584A loc_584A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:0000584A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005851                 jmp     short loc_585A
.text$mn:00005851 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005853
.text$mn:00005853 ; =============== S U B R O U T I N E =======================================
.text$mn:00005853
.text$mn:00005853
.text$mn:00005853 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_5844o
.text$mn:00005853                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000585A
.text$mn:0000585A loc_585A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:0000585A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000585E                 jbe     short loc_5879
.text$mn:00005860                 mov     edx, [ebp+0Ch]
.text$mn:00005863                 push    edx             ; int
.text$mn:00005864                 mov     ecx, [ebp-18h]
.text$mn:00005867                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000586C                 push    eax             ; Src
.text$mn:0000586D                 mov     eax, [ebp-20h]
.text$mn:00005870                 push    eax             ; Dst
.text$mn:00005871                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005876                 add     esp, 0Ch
.text$mn:00005879
.text$mn:00005879 loc_5879:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00005879                 push    0
.text$mn:0000587B                 push    1
.text$mn:0000587D                 mov     ecx, [ebp-18h]
.text$mn:00005880                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005885                 lea     ecx, [ebp-20h]
.text$mn:00005888                 push    ecx             ; int
.text$mn:00005889                 mov     edx, [ebp-18h]
.text$mn:0000588C                 add     edx, 4
.text$mn:0000588F                 push    edx             ; void *
.text$mn:00005890                 lea     eax, [ebp-13h]
.text$mn:00005893                 push    eax
.text$mn:00005894                 mov     ecx, [ebp-18h]
.text$mn:00005897                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000589C                 mov     ecx, eax
.text$mn:0000589E                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000058A3                 mov     ecx, [ebp-18h]
.text$mn:000058A6                 mov     edx, [ebp-1Ch]
.text$mn:000058A9                 mov     [ecx+18h], edx
.text$mn:000058AC                 mov     eax, [ebp+0Ch]
.text$mn:000058AF                 push    eax
.text$mn:000058B0                 mov     ecx, [ebp-18h]
.text$mn:000058B3                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000058B8                 mov     ecx, [ebp-0Ch]
.text$mn:000058BB                 mov     large fs:0, ecx
.text$mn:000058C2                 pop     ecx
.text$mn:000058C3                 pop     edi
.text$mn:000058C4                 pop     esi
.text$mn:000058C5                 pop     ebx
.text$mn:000058C6                 mov     esp, ebp
.text$mn:000058C8                 pop     ebp
.text$mn:000058C9                 retn    8
.text$mn:000058C9 $LN19_0         endp ; sp-analysis failed
.text$mn:000058C9
.text$mn:000058C9 _text$mn        ends
.text$mn:000058C9
.text$x:000058CC ; ===========================================================================
.text$x:000058CC
.text$x:000058CC ; Segment type: Pure code
.text$x:000058CC ; Segment permissions: Read/Execute
.text$x:000058CC _text$x         segment para public 'CODE' use32
.text$x:000058CC                 assume cs:_text$x
.text$x:000058CC                 ;org 58CCh
.text$x:000058CC ; COMDAT (pick associative to section at 5728)
.text$x:000058CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000058CC
.text$x:000058CC ; =============== S U B R O U T I N E =======================================
.text$x:000058CC
.text$x:000058CC
.text$x:000058CC __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:000058CC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:000058CC
.text$x:000058CC arg_4           = dword ptr  8
.text$x:000058CC
.text$x:000058CC                 mov     edx, [esp+arg_4]
.text$x:000058D0                 lea     eax, [edx+0Ch]
.text$x:000058D3                 mov     ecx, [edx-24h]
.text$x:000058D6                 xor     ecx, eax
.text$x:000058D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000058DD                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:000058E2                 jmp     ___CxxFrameHandler3
.text$x:000058E2 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:000058E2
.text$x:000058E2 ; ---------------------------------------------------------------------------
.text$x:000058E7                 align 4
.text$x:000058E7 _text$x         ends
.text$x:000058E7
.text$mn:000058E8 ; ===========================================================================
.text$mn:000058E8
.text$mn:000058E8 ; Segment type: Pure code
.text$mn:000058E8 ; Segment permissions: Read/Execute
.text$mn:000058E8 _text$mn        segment para public 'CODE' use32
.text$mn:000058E8                 assume cs:_text$mn
.text$mn:000058E8                 ;org 58E8h
.text$mn:000058E8 ; COMDAT (pick any)
.text$mn:000058E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058E8
.text$mn:000058E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058E8
.text$mn:000058E8 ; Attributes: bp-based frame
.text$mn:000058E8
.text$mn:000058E8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000058E8                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000058E8 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000058E8                                         ; CODE XREF: $LN19+60p
.text$mn:000058E8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000058E8
.text$mn:000058E8 var_8           = dword ptr -8
.text$mn:000058E8 var_1           = byte ptr -1
.text$mn:000058E8 arg_0           = dword ptr  8
.text$mn:000058E8
.text$mn:000058E8                 push    ebp
.text$mn:000058E9                 mov     ebp, esp
.text$mn:000058EB                 sub     esp, 8
.text$mn:000058EE                 mov     [ebp+var_8], ecx
.text$mn:000058F1                 mov     [ebp+var_1], 0
.text$mn:000058F5                 mov     eax, [ebp+var_8]
.text$mn:000058F8                 mov     ecx, [ebp+arg_0]
.text$mn:000058FB                 mov     [eax+14h], ecx
.text$mn:000058FE                 lea     edx, [ebp+var_1]
.text$mn:00005901                 push    edx
.text$mn:00005902                 mov     ecx, [ebp+var_8]
.text$mn:00005905                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000590A                 add     eax, [ebp+arg_0]
.text$mn:0000590D                 push    eax
.text$mn:0000590E                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:00005913                 add     esp, 8
.text$mn:00005916                 mov     esp, ebp
.text$mn:00005918                 pop     ebp
.text$mn:00005919                 retn    4
.text$mn:00005919 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00005919
.text$mn:00005919 _text$mn        ends
.text$mn:00005919
.text$mn:0000591C ; ===========================================================================
.text$mn:0000591C
.text$mn:0000591C ; Segment type: Pure code
.text$mn:0000591C ; Segment permissions: Read/Execute
.text$mn:0000591C _text$mn        segment para public 'CODE' use32
.text$mn:0000591C                 assume cs:_text$mn
.text$mn:0000591C                 ;org 591Ch
.text$mn:0000591C ; COMDAT (pick any)
.text$mn:0000591C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000591C
.text$mn:0000591C ; =============== S U B R O U T I N E =======================================
.text$mn:0000591C
.text$mn:0000591C ; Attributes: bp-based frame
.text$mn:0000591C
.text$mn:0000591C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:0000591C                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000591C ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000591C                                         ; CODE XREF: $LN19_0+60p
.text$mn:0000591C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:0000591C
.text$mn:0000591C var_8           = dword ptr -8
.text$mn:0000591C var_2           = word ptr -2
.text$mn:0000591C arg_0           = dword ptr  8
.text$mn:0000591C
.text$mn:0000591C                 push    ebp
.text$mn:0000591D                 mov     ebp, esp
.text$mn:0000591F                 sub     esp, 8
.text$mn:00005922                 mov     [ebp+var_8], ecx
.text$mn:00005925                 xor     eax, eax
.text$mn:00005927                 mov     [ebp+var_2], ax
.text$mn:0000592B                 mov     ecx, [ebp+var_8]
.text$mn:0000592E                 mov     edx, [ebp+arg_0]
.text$mn:00005931                 mov     [ecx+14h], edx
.text$mn:00005934                 lea     eax, [ebp+var_2]
.text$mn:00005937                 push    eax
.text$mn:00005938                 mov     ecx, [ebp+var_8]
.text$mn:0000593B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005940                 mov     ecx, [ebp+arg_0]
.text$mn:00005943                 lea     edx, [eax+ecx*2]
.text$mn:00005946                 push    edx
.text$mn:00005947                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000594C                 add     esp, 8
.text$mn:0000594F                 mov     esp, ebp
.text$mn:00005951                 pop     ebp
.text$mn:00005952                 retn    4
.text$mn:00005952 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00005952
.text$mn:00005952 ; ---------------------------------------------------------------------------
.text$mn:00005955                 align 4
.text$mn:00005955 _text$mn        ends
.text$mn:00005955
.text$mn:00005958 ; ===========================================================================
.text$mn:00005958
.text$mn:00005958 ; Segment type: Pure code
.text$mn:00005958 ; Segment permissions: Read/Execute
.text$mn:00005958 _text$mn        segment para public 'CODE' use32
.text$mn:00005958                 assume cs:_text$mn
.text$mn:00005958                 ;org 5958h
.text$mn:00005958 ; COMDAT (pick any)
.text$mn:00005958                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005958
.text$mn:00005958 ; =============== S U B R O U T I N E =======================================
.text$mn:00005958
.text$mn:00005958 ; Attributes: bp-based frame
.text$mn:00005958
.text$mn:00005958 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00005958                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00005958 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005958                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00005958
.text$mn:00005958 var_8           = dword ptr -8
.text$mn:00005958 var_1           = byte ptr -1
.text$mn:00005958
.text$mn:00005958                 push    ebp
.text$mn:00005959                 mov     ebp, esp
.text$mn:0000595B                 sub     esp, 8
.text$mn:0000595E                 mov     [ebp+var_8], ecx
.text$mn:00005961                 lea     ecx, [ebp+var_1]
.text$mn:00005964                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005969                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000596C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00005971                 mov     eax, [ebp+var_8]
.text$mn:00005974                 mov     ecx, [eax]
.text$mn:00005976                 push    ecx
.text$mn:00005977                 lea     ecx, [ebp+var_1]
.text$mn:0000597A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000597F                 push    1               ; int
.text$mn:00005981                 mov     edx, [ebp+var_8]
.text$mn:00005984                 mov     eax, [edx]
.text$mn:00005986                 push    eax             ; void *
.text$mn:00005987                 lea     ecx, [ebp+var_1]
.text$mn:0000598A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000598F                 mov     ecx, [ebp+var_8]
.text$mn:00005992                 mov     dword ptr [ecx], 0
.text$mn:00005998                 mov     esp, ebp
.text$mn:0000599A                 pop     ebp
.text$mn:0000599B                 retn
.text$mn:0000599B ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000599B
.text$mn:0000599B _text$mn        ends
.text$mn:0000599B
.text$mn:0000599C ; ===========================================================================
.text$mn:0000599C
.text$mn:0000599C ; Segment type: Pure code
.text$mn:0000599C ; Segment permissions: Read/Execute
.text$mn:0000599C _text$mn        segment para public 'CODE' use32
.text$mn:0000599C                 assume cs:_text$mn
.text$mn:0000599C                 ;org 599Ch
.text$mn:0000599C ; COMDAT (pick any)
.text$mn:0000599C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000599C
.text$mn:0000599C ; =============== S U B R O U T I N E =======================================
.text$mn:0000599C
.text$mn:0000599C ; Attributes: bp-based frame
.text$mn:0000599C
.text$mn:0000599C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000599C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000599C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000599C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000599C
.text$mn:0000599C var_8           = dword ptr -8
.text$mn:0000599C var_1           = byte ptr -1
.text$mn:0000599C
.text$mn:0000599C                 push    ebp
.text$mn:0000599D                 mov     ebp, esp
.text$mn:0000599F                 sub     esp, 8
.text$mn:000059A2                 mov     [ebp+var_8], ecx
.text$mn:000059A5                 lea     ecx, [ebp+var_1]
.text$mn:000059A8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000059AD                 mov     ecx, [ebp+var_8] ; this
.text$mn:000059B0                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000059B5                 mov     eax, [ebp+var_8]
.text$mn:000059B8                 mov     ecx, [eax]
.text$mn:000059BA                 push    ecx
.text$mn:000059BB                 lea     ecx, [ebp+var_1]
.text$mn:000059BE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000059C3                 push    1               ; int
.text$mn:000059C5                 mov     edx, [ebp+var_8]
.text$mn:000059C8                 mov     eax, [edx]
.text$mn:000059CA                 push    eax             ; void *
.text$mn:000059CB                 lea     ecx, [ebp+var_1]
.text$mn:000059CE                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000059D3                 mov     ecx, [ebp+var_8]
.text$mn:000059D6                 mov     dword ptr [ecx], 0
.text$mn:000059DC                 mov     esp, ebp
.text$mn:000059DE                 pop     ebp
.text$mn:000059DF                 retn
.text$mn:000059DF ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000059DF
.text$mn:000059DF _text$mn        ends
.text$mn:000059DF
.text$mn:000059E0 ; ===========================================================================
.text$mn:000059E0
.text$mn:000059E0 ; Segment type: Pure code
.text$mn:000059E0 ; Segment permissions: Read/Execute
.text$mn:000059E0 _text$mn        segment para public 'CODE' use32
.text$mn:000059E0                 assume cs:_text$mn
.text$mn:000059E0                 ;org 59E0h
.text$mn:000059E0 ; COMDAT (pick any)
.text$mn:000059E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059E0
.text$mn:000059E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000059E0
.text$mn:000059E0 ; Attributes: bp-based frame
.text$mn:000059E0
.text$mn:000059E0 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:000059E0                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:000059E0 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:000059E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:000059E0                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:000059E0
.text$mn:000059E0 var_4           = dword ptr -4
.text$mn:000059E0 arg_0           = dword ptr  8
.text$mn:000059E0
.text$mn:000059E0                 push    ebp
.text$mn:000059E1                 mov     ebp, esp
.text$mn:000059E3                 push    ecx
.text$mn:000059E4                 mov     [ebp+var_4], ecx
.text$mn:000059E7                 mov     ecx, [ebp+arg_0]
.text$mn:000059EA                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:000059EF                 mov     eax, [ebp+arg_0]
.text$mn:000059F2                 mov     esp, ebp
.text$mn:000059F4                 pop     ebp
.text$mn:000059F5                 retn    4
.text$mn:000059F5 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:000059F5
.text$mn:000059F5 _text$mn        ends
.text$mn:000059F5
.text$mn:000059F8 ; ===========================================================================
.text$mn:000059F8
.text$mn:000059F8 ; Segment type: Pure code
.text$mn:000059F8 ; Segment permissions: Read/Execute
.text$mn:000059F8 _text$mn        segment para public 'CODE' use32
.text$mn:000059F8                 assume cs:_text$mn
.text$mn:000059F8                 ;org 59F8h
.text$mn:000059F8 ; COMDAT (pick any)
.text$mn:000059F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059F8
.text$mn:000059F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000059F8
.text$mn:000059F8 ; Attributes: bp-based frame
.text$mn:000059F8
.text$mn:000059F8 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:000059F8                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:000059F8 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:000059F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p
.text$mn:000059F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+18p ...
.text$mn:000059F8
.text$mn:000059F8 var_4           = dword ptr -4
.text$mn:000059F8 arg_0           = dword ptr  8
.text$mn:000059F8
.text$mn:000059F8                 push    ebp
.text$mn:000059F9                 mov     ebp, esp
.text$mn:000059FB                 push    ecx
.text$mn:000059FC                 mov     [ebp+var_4], ecx
.text$mn:000059FF                 mov     ecx, [ebp+arg_0]
.text$mn:00005A02                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00005A07                 mov     eax, [ebp+arg_0]
.text$mn:00005A0A                 mov     esp, ebp
.text$mn:00005A0C                 pop     ebp
.text$mn:00005A0D                 retn    4
.text$mn:00005A0D ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00005A0D
.text$mn:00005A0D _text$mn        ends
.text$mn:00005A0D
.text$mn:00005A10 ; ===========================================================================
.text$mn:00005A10
.text$mn:00005A10 ; Segment type: Pure code
.text$mn:00005A10 ; Segment permissions: Read/Execute
.text$mn:00005A10 _text$mn        segment para public 'CODE' use32
.text$mn:00005A10                 assume cs:_text$mn
.text$mn:00005A10                 ;org 5A10h
.text$mn:00005A10 ; COMDAT (pick any)
.text$mn:00005A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A10
.text$mn:00005A10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A10
.text$mn:00005A10 ; Attributes: bp-based frame
.text$mn:00005A10
.text$mn:00005A10 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00005A10                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00005A10 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00005A10                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00005A10                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00005A10
.text$mn:00005A10 var_C           = dword ptr -0Ch
.text$mn:00005A10 Size            = dword ptr -8
.text$mn:00005A10 var_4           = dword ptr -4
.text$mn:00005A10 arg_0           = dword ptr  8
.text$mn:00005A10 arg_4           = byte ptr  0Ch
.text$mn:00005A10
.text$mn:00005A10                 push    ebp
.text$mn:00005A11                 mov     ebp, esp
.text$mn:00005A13                 sub     esp, 0Ch
.text$mn:00005A16                 mov     [ebp+var_4], ecx
.text$mn:00005A19                 mov     ecx, [ebp+var_4]
.text$mn:00005A1C                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005A21                 cmp     eax, [ebp+arg_0]
.text$mn:00005A24                 jnb     short loc_5A2E
.text$mn:00005A26                 mov     ecx, [ebp+var_4]
.text$mn:00005A29                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00005A2E
.text$mn:00005A2E loc_5A2E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00005A2E                 mov     eax, [ebp+var_4]
.text$mn:00005A31                 mov     ecx, [eax+18h]
.text$mn:00005A34                 cmp     ecx, [ebp+arg_0]
.text$mn:00005A37                 jnb     short loc_5A4E
.text$mn:00005A39                 mov     edx, [ebp+var_4]
.text$mn:00005A3C                 mov     eax, [edx+14h]
.text$mn:00005A3F                 push    eax
.text$mn:00005A40                 mov     ecx, [ebp+arg_0]
.text$mn:00005A43                 push    ecx
.text$mn:00005A44                 mov     ecx, [ebp+var_4]
.text$mn:00005A47                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00005A4C                 jmp     short loc_5A98
.text$mn:00005A4E ; ---------------------------------------------------------------------------
.text$mn:00005A4E
.text$mn:00005A4E loc_5A4E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00005A4E                 movzx   edx, [ebp+arg_4]
.text$mn:00005A52                 test    edx, edx
.text$mn:00005A54                 jz      short loc_5A88
.text$mn:00005A56                 cmp     [ebp+arg_0], 10h
.text$mn:00005A5A                 jnb     short loc_5A88
.text$mn:00005A5C                 mov     eax, [ebp+var_4]
.text$mn:00005A5F                 mov     ecx, [ebp+arg_0]
.text$mn:00005A62                 cmp     ecx, [eax+14h]
.text$mn:00005A65                 jnb     short loc_5A6F
.text$mn:00005A67                 mov     edx, [ebp+arg_0]
.text$mn:00005A6A                 mov     [ebp+Size], edx
.text$mn:00005A6D                 jmp     short loc_5A78
.text$mn:00005A6F ; ---------------------------------------------------------------------------
.text$mn:00005A6F
.text$mn:00005A6F loc_5A6F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00005A6F                 mov     eax, [ebp+var_4]
.text$mn:00005A72                 mov     ecx, [eax+14h]
.text$mn:00005A75                 mov     [ebp+Size], ecx
.text$mn:00005A78
.text$mn:00005A78 loc_5A78:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00005A78                 mov     edx, [ebp+Size]
.text$mn:00005A7B                 push    edx             ; Size
.text$mn:00005A7C                 push    1               ; char
.text$mn:00005A7E                 mov     ecx, [ebp+var_4]
.text$mn:00005A81                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005A86                 jmp     short loc_5A98
.text$mn:00005A88 ; ---------------------------------------------------------------------------
.text$mn:00005A88
.text$mn:00005A88 loc_5A88:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00005A88                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00005A88                 cmp     [ebp+arg_0], 0
.text$mn:00005A8C                 jnz     short loc_5A98
.text$mn:00005A8E                 push    0
.text$mn:00005A90                 mov     ecx, [ebp+var_4]
.text$mn:00005A93                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005A98
.text$mn:00005A98 loc_5A98:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00005A98                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00005A98                 cmp     [ebp+arg_0], 0
.text$mn:00005A9C                 jbe     short loc_5AA7
.text$mn:00005A9E                 mov     [ebp+var_C], 1
.text$mn:00005AA5                 jmp     short loc_5AAE
.text$mn:00005AA7 ; ---------------------------------------------------------------------------
.text$mn:00005AA7
.text$mn:00005AA7 loc_5AA7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00005AA7                 mov     [ebp+var_C], 0
.text$mn:00005AAE
.text$mn:00005AAE loc_5AAE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00005AAE                 mov     al, byte ptr [ebp+var_C]
.text$mn:00005AB1                 mov     esp, ebp
.text$mn:00005AB3                 pop     ebp
.text$mn:00005AB4                 retn    8
.text$mn:00005AB4 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00005AB4
.text$mn:00005AB4 ; ---------------------------------------------------------------------------
.text$mn:00005AB7                 align 4
.text$mn:00005AB7 _text$mn        ends
.text$mn:00005AB7
.text$mn:00005AB8 ; ===========================================================================
.text$mn:00005AB8
.text$mn:00005AB8 ; Segment type: Pure code
.text$mn:00005AB8 ; Segment permissions: Read/Execute
.text$mn:00005AB8 _text$mn        segment para public 'CODE' use32
.text$mn:00005AB8                 assume cs:_text$mn
.text$mn:00005AB8                 ;org 5AB8h
.text$mn:00005AB8 ; COMDAT (pick any)
.text$mn:00005AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AB8
.text$mn:00005AB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AB8
.text$mn:00005AB8 ; Attributes: bp-based frame
.text$mn:00005AB8
.text$mn:00005AB8 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00005AB8                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00005AB8 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00005AB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00005AB8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00005AB8
.text$mn:00005AB8 var_C           = dword ptr -0Ch
.text$mn:00005AB8 var_8           = dword ptr -8
.text$mn:00005AB8 var_4           = dword ptr -4
.text$mn:00005AB8 arg_0           = dword ptr  8
.text$mn:00005AB8 arg_4           = byte ptr  0Ch
.text$mn:00005AB8
.text$mn:00005AB8                 push    ebp
.text$mn:00005AB9                 mov     ebp, esp
.text$mn:00005ABB                 sub     esp, 0Ch
.text$mn:00005ABE                 mov     [ebp+var_4], ecx
.text$mn:00005AC1                 mov     ecx, [ebp+var_4]
.text$mn:00005AC4                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005AC9                 cmp     eax, [ebp+arg_0]
.text$mn:00005ACC                 jnb     short loc_5AD6
.text$mn:00005ACE                 mov     ecx, [ebp+var_4]
.text$mn:00005AD1                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00005AD6
.text$mn:00005AD6 loc_5AD6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00005AD6                 mov     eax, [ebp+var_4]
.text$mn:00005AD9                 mov     ecx, [eax+18h]
.text$mn:00005ADC                 cmp     ecx, [ebp+arg_0]
.text$mn:00005ADF                 jnb     short loc_5AF6
.text$mn:00005AE1                 mov     edx, [ebp+var_4]
.text$mn:00005AE4                 mov     eax, [edx+14h]
.text$mn:00005AE7                 push    eax
.text$mn:00005AE8                 mov     ecx, [ebp+arg_0]
.text$mn:00005AEB                 push    ecx
.text$mn:00005AEC                 mov     ecx, [ebp+var_4]
.text$mn:00005AEF                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00005AF4                 jmp     short loc_5B40
.text$mn:00005AF6 ; ---------------------------------------------------------------------------
.text$mn:00005AF6
.text$mn:00005AF6 loc_5AF6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00005AF6                 movzx   edx, [ebp+arg_4]
.text$mn:00005AFA                 test    edx, edx
.text$mn:00005AFC                 jz      short loc_5B30
.text$mn:00005AFE                 cmp     [ebp+arg_0], 8
.text$mn:00005B02                 jnb     short loc_5B30
.text$mn:00005B04                 mov     eax, [ebp+var_4]
.text$mn:00005B07                 mov     ecx, [ebp+arg_0]
.text$mn:00005B0A                 cmp     ecx, [eax+14h]
.text$mn:00005B0D                 jnb     short loc_5B17
.text$mn:00005B0F                 mov     edx, [ebp+arg_0]
.text$mn:00005B12                 mov     [ebp+var_8], edx
.text$mn:00005B15                 jmp     short loc_5B20
.text$mn:00005B17 ; ---------------------------------------------------------------------------
.text$mn:00005B17
.text$mn:00005B17 loc_5B17:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00005B17                 mov     eax, [ebp+var_4]
.text$mn:00005B1A                 mov     ecx, [eax+14h]
.text$mn:00005B1D                 mov     [ebp+var_8], ecx
.text$mn:00005B20
.text$mn:00005B20 loc_5B20:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00005B20                 mov     edx, [ebp+var_8]
.text$mn:00005B23                 push    edx
.text$mn:00005B24                 push    1
.text$mn:00005B26                 mov     ecx, [ebp+var_4]
.text$mn:00005B29                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005B2E                 jmp     short loc_5B40
.text$mn:00005B30 ; ---------------------------------------------------------------------------
.text$mn:00005B30
.text$mn:00005B30 loc_5B30:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00005B30                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00005B30                 cmp     [ebp+arg_0], 0
.text$mn:00005B34                 jnz     short loc_5B40
.text$mn:00005B36                 push    0
.text$mn:00005B38                 mov     ecx, [ebp+var_4]
.text$mn:00005B3B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005B40
.text$mn:00005B40 loc_5B40:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00005B40                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00005B40                 cmp     [ebp+arg_0], 0
.text$mn:00005B44                 jbe     short loc_5B4F
.text$mn:00005B46                 mov     [ebp+var_C], 1
.text$mn:00005B4D                 jmp     short loc_5B56
.text$mn:00005B4F ; ---------------------------------------------------------------------------
.text$mn:00005B4F
.text$mn:00005B4F loc_5B4F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00005B4F                 mov     [ebp+var_C], 0
.text$mn:00005B56
.text$mn:00005B56 loc_5B56:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00005B56                 mov     al, byte ptr [ebp+var_C]
.text$mn:00005B59                 mov     esp, ebp
.text$mn:00005B5B                 pop     ebp
.text$mn:00005B5C                 retn    8
.text$mn:00005B5C ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00005B5C
.text$mn:00005B5C ; ---------------------------------------------------------------------------
.text$mn:00005B5F                 align 10h
.text$mn:00005B5F _text$mn        ends
.text$mn:00005B5F
.text$mn:00005B60 ; ===========================================================================
.text$mn:00005B60
.text$mn:00005B60 ; Segment type: Pure code
.text$mn:00005B60 ; Segment permissions: Read/Execute
.text$mn:00005B60 _text$mn        segment para public 'CODE' use32
.text$mn:00005B60                 assume cs:_text$mn
.text$mn:00005B60                 ;org 5B60h
.text$mn:00005B60 ; COMDAT (pick any)
.text$mn:00005B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B60
.text$mn:00005B60 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B60
.text$mn:00005B60 ; Attributes: bp-based frame
.text$mn:00005B60
.text$mn:00005B60 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00005B60                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00005B60 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00005B60                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00005B60
.text$mn:00005B60 var_4           = dword ptr -4
.text$mn:00005B60 arg_0           = dword ptr  8
.text$mn:00005B60
.text$mn:00005B60                 push    ebp
.text$mn:00005B61                 mov     ebp, esp
.text$mn:00005B63                 push    ecx
.text$mn:00005B64                 mov     [ebp+var_4], ecx
.text$mn:00005B67                 cmp     [ebp+arg_0], 0
.text$mn:00005B6B                 jz      short loc_5B8D
.text$mn:00005B6D                 mov     ecx, [ebp+var_4]
.text$mn:00005B70                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005B75                 cmp     [ebp+arg_0], eax
.text$mn:00005B78                 jb      short loc_5B8D
.text$mn:00005B7A                 mov     ecx, [ebp+var_4]
.text$mn:00005B7D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005B82                 mov     ecx, [ebp+var_4]
.text$mn:00005B85                 add     eax, [ecx+14h]
.text$mn:00005B88                 cmp     eax, [ebp+arg_0]
.text$mn:00005B8B                 ja      short loc_5B93
.text$mn:00005B8D
.text$mn:00005B8D loc_5B8D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00005B8D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00005B8D                 xor     al, al
.text$mn:00005B8F                 jmp     short loc_5B95
.text$mn:00005B91 ; ---------------------------------------------------------------------------
.text$mn:00005B91                 jmp     short loc_5B95
.text$mn:00005B93 ; ---------------------------------------------------------------------------
.text$mn:00005B93
.text$mn:00005B93 loc_5B93:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00005B93                 mov     al, 1
.text$mn:00005B95
.text$mn:00005B95 loc_5B95:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00005B95                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00005B95                 mov     esp, ebp
.text$mn:00005B97                 pop     ebp
.text$mn:00005B98                 retn    4
.text$mn:00005B98 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00005B98
.text$mn:00005B98 ; ---------------------------------------------------------------------------
.text$mn:00005B9B                 align 4
.text$mn:00005B9B _text$mn        ends
.text$mn:00005B9B
.text$mn:00005B9C ; ===========================================================================
.text$mn:00005B9C
.text$mn:00005B9C ; Segment type: Pure code
.text$mn:00005B9C ; Segment permissions: Read/Execute
.text$mn:00005B9C _text$mn        segment para public 'CODE' use32
.text$mn:00005B9C                 assume cs:_text$mn
.text$mn:00005B9C                 ;org 5B9Ch
.text$mn:00005B9C ; COMDAT (pick any)
.text$mn:00005B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B9C
.text$mn:00005B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B9C
.text$mn:00005B9C ; Attributes: bp-based frame
.text$mn:00005B9C
.text$mn:00005B9C ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00005B9C                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00005B9C ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00005B9C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00005B9C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:00005B9C
.text$mn:00005B9C var_4           = dword ptr -4
.text$mn:00005B9C arg_0           = dword ptr  8
.text$mn:00005B9C
.text$mn:00005B9C                 push    ebp
.text$mn:00005B9D                 mov     ebp, esp
.text$mn:00005B9F                 push    ecx
.text$mn:00005BA0                 mov     [ebp+var_4], ecx
.text$mn:00005BA3                 cmp     [ebp+arg_0], 0
.text$mn:00005BA7                 jz      short loc_5BCC
.text$mn:00005BA9                 mov     ecx, [ebp+var_4]
.text$mn:00005BAC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005BB1                 cmp     [ebp+arg_0], eax
.text$mn:00005BB4                 jb      short loc_5BCC
.text$mn:00005BB6                 mov     ecx, [ebp+var_4]
.text$mn:00005BB9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005BBE                 mov     ecx, [ebp+var_4]
.text$mn:00005BC1                 mov     edx, [ecx+14h]
.text$mn:00005BC4                 lea     eax, [eax+edx*2]
.text$mn:00005BC7                 cmp     eax, [ebp+arg_0]
.text$mn:00005BCA                 ja      short loc_5BD2
.text$mn:00005BCC
.text$mn:00005BCC loc_5BCC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00005BCC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00005BCC                 xor     al, al
.text$mn:00005BCE                 jmp     short loc_5BD4
.text$mn:00005BD0 ; ---------------------------------------------------------------------------
.text$mn:00005BD0                 jmp     short loc_5BD4
.text$mn:00005BD2 ; ---------------------------------------------------------------------------
.text$mn:00005BD2
.text$mn:00005BD2 loc_5BD2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00005BD2                 mov     al, 1
.text$mn:00005BD4
.text$mn:00005BD4 loc_5BD4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00005BD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00005BD4                 mov     esp, ebp
.text$mn:00005BD6                 pop     ebp
.text$mn:00005BD7                 retn    4
.text$mn:00005BD7 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00005BD7
.text$mn:00005BD7 ; ---------------------------------------------------------------------------
.text$mn:00005BDA                 align 4
.text$mn:00005BDA _text$mn        ends
.text$mn:00005BDA
.text$mn:00005BDC ; ===========================================================================
.text$mn:00005BDC
.text$mn:00005BDC ; Segment type: Pure code
.text$mn:00005BDC ; Segment permissions: Read/Execute
.text$mn:00005BDC _text$mn        segment para public 'CODE' use32
.text$mn:00005BDC                 assume cs:_text$mn
.text$mn:00005BDC                 ;org 5BDCh
.text$mn:00005BDC ; COMDAT (pick any)
.text$mn:00005BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BDC
.text$mn:00005BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005BDC
.text$mn:00005BDC ; Attributes: bp-based frame
.text$mn:00005BDC
.text$mn:00005BDC ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005BDC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00005BDC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00005BDC                                         ; CODE XREF: $LN19+14p
.text$mn:00005BDC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00005BDC
.text$mn:00005BDC var_8           = dword ptr -8
.text$mn:00005BDC var_4           = dword ptr -4
.text$mn:00005BDC
.text$mn:00005BDC                 push    ebp
.text$mn:00005BDD                 mov     ebp, esp
.text$mn:00005BDF                 sub     esp, 8
.text$mn:00005BE2                 mov     [ebp+var_4], ecx
.text$mn:00005BE5                 mov     eax, [ebp+var_4]
.text$mn:00005BE8                 cmp     dword ptr [eax+18h], 10h
.text$mn:00005BEC                 jb      short loc_5C02
.text$mn:00005BEE                 mov     ecx, [ebp+var_4]
.text$mn:00005BF1                 mov     edx, [ecx+4]
.text$mn:00005BF4                 push    edx
.text$mn:00005BF5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00005BFA                 add     esp, 4
.text$mn:00005BFD                 mov     [ebp+var_8], eax
.text$mn:00005C00                 jmp     short loc_5C0B
.text$mn:00005C02 ; ---------------------------------------------------------------------------
.text$mn:00005C02
.text$mn:00005C02 loc_5C02:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00005C02                 mov     eax, [ebp+var_4]
.text$mn:00005C05                 add     eax, 4
.text$mn:00005C08                 mov     [ebp+var_8], eax
.text$mn:00005C0B
.text$mn:00005C0B loc_5C0B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00005C0B                 mov     eax, [ebp+var_8]
.text$mn:00005C0E                 mov     esp, ebp
.text$mn:00005C10                 pop     ebp
.text$mn:00005C11                 retn
.text$mn:00005C11 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00005C11
.text$mn:00005C11 ; ---------------------------------------------------------------------------
.text$mn:00005C12                 align 4
.text$mn:00005C12 _text$mn        ends
.text$mn:00005C12
.text$mn:00005C14 ; ===========================================================================
.text$mn:00005C14
.text$mn:00005C14 ; Segment type: Pure code
.text$mn:00005C14 ; Segment permissions: Read/Execute
.text$mn:00005C14 _text$mn        segment para public 'CODE' use32
.text$mn:00005C14                 assume cs:_text$mn
.text$mn:00005C14                 ;org 5C14h
.text$mn:00005C14 ; COMDAT (pick any)
.text$mn:00005C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C14
.text$mn:00005C14 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C14
.text$mn:00005C14 ; Attributes: bp-based frame
.text$mn:00005C14
.text$mn:00005C14 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00005C14                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00005C14 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00005C14                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00005C14
.text$mn:00005C14 var_8           = dword ptr -8
.text$mn:00005C14 var_4           = dword ptr -4
.text$mn:00005C14
.text$mn:00005C14                 push    ebp
.text$mn:00005C15                 mov     ebp, esp
.text$mn:00005C17                 sub     esp, 8
.text$mn:00005C1A                 mov     [ebp+var_4], ecx
.text$mn:00005C1D                 mov     eax, [ebp+var_4]
.text$mn:00005C20                 cmp     dword ptr [eax+18h], 10h
.text$mn:00005C24                 jb      short loc_5C3A
.text$mn:00005C26                 mov     ecx, [ebp+var_4]
.text$mn:00005C29                 mov     edx, [ecx+4]
.text$mn:00005C2C                 push    edx
.text$mn:00005C2D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00005C32                 add     esp, 4
.text$mn:00005C35                 mov     [ebp+var_8], eax
.text$mn:00005C38                 jmp     short loc_5C43
.text$mn:00005C3A ; ---------------------------------------------------------------------------
.text$mn:00005C3A
.text$mn:00005C3A loc_5C3A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00005C3A                 mov     eax, [ebp+var_4]
.text$mn:00005C3D                 add     eax, 4
.text$mn:00005C40                 mov     [ebp+var_8], eax
.text$mn:00005C43
.text$mn:00005C43 loc_5C43:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00005C43                 mov     eax, [ebp+var_8]
.text$mn:00005C46                 mov     esp, ebp
.text$mn:00005C48                 pop     ebp
.text$mn:00005C49                 retn
.text$mn:00005C49 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00005C49
.text$mn:00005C49 ; ---------------------------------------------------------------------------
.text$mn:00005C4A                 align 4
.text$mn:00005C4A _text$mn        ends
.text$mn:00005C4A
.text$mn:00005C4C ; ===========================================================================
.text$mn:00005C4C
.text$mn:00005C4C ; Segment type: Pure code
.text$mn:00005C4C ; Segment permissions: Read/Execute
.text$mn:00005C4C _text$mn        segment para public 'CODE' use32
.text$mn:00005C4C                 assume cs:_text$mn
.text$mn:00005C4C                 ;org 5C4Ch
.text$mn:00005C4C ; COMDAT (pick any)
.text$mn:00005C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C4C
.text$mn:00005C4C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C4C
.text$mn:00005C4C ; Attributes: bp-based frame
.text$mn:00005C4C
.text$mn:00005C4C ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005C4C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00005C4C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00005C4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+2Cp
.text$mn:00005C4C                                         ; $LN19_0+14p ...
.text$mn:00005C4C
.text$mn:00005C4C var_8           = dword ptr -8
.text$mn:00005C4C var_4           = dword ptr -4
.text$mn:00005C4C
.text$mn:00005C4C                 push    ebp
.text$mn:00005C4D                 mov     ebp, esp
.text$mn:00005C4F                 sub     esp, 8
.text$mn:00005C52                 mov     [ebp+var_4], ecx
.text$mn:00005C55                 mov     eax, [ebp+var_4]
.text$mn:00005C58                 cmp     dword ptr [eax+18h], 8
.text$mn:00005C5C                 jb      short loc_5C72
.text$mn:00005C5E                 mov     ecx, [ebp+var_4]
.text$mn:00005C61                 mov     edx, [ecx+4]
.text$mn:00005C64                 push    edx
.text$mn:00005C65                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00005C6A                 add     esp, 4
.text$mn:00005C6D                 mov     [ebp+var_8], eax
.text$mn:00005C70                 jmp     short loc_5C7B
.text$mn:00005C72 ; ---------------------------------------------------------------------------
.text$mn:00005C72
.text$mn:00005C72 loc_5C72:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00005C72                 mov     eax, [ebp+var_4]
.text$mn:00005C75                 add     eax, 4
.text$mn:00005C78                 mov     [ebp+var_8], eax
.text$mn:00005C7B
.text$mn:00005C7B loc_5C7B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00005C7B                 mov     eax, [ebp+var_8]
.text$mn:00005C7E                 mov     esp, ebp
.text$mn:00005C80                 pop     ebp
.text$mn:00005C81                 retn
.text$mn:00005C81 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00005C81
.text$mn:00005C81 ; ---------------------------------------------------------------------------
.text$mn:00005C82                 align 4
.text$mn:00005C82 _text$mn        ends
.text$mn:00005C82
.text$mn:00005C84 ; ===========================================================================
.text$mn:00005C84
.text$mn:00005C84 ; Segment type: Pure code
.text$mn:00005C84 ; Segment permissions: Read/Execute
.text$mn:00005C84 _text$mn        segment para public 'CODE' use32
.text$mn:00005C84                 assume cs:_text$mn
.text$mn:00005C84                 ;org 5C84h
.text$mn:00005C84 ; COMDAT (pick any)
.text$mn:00005C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C84
.text$mn:00005C84 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C84
.text$mn:00005C84 ; Attributes: bp-based frame
.text$mn:00005C84
.text$mn:00005C84 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00005C84                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00005C84 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00005C84                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00005C84                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00005C84
.text$mn:00005C84 var_8           = dword ptr -8
.text$mn:00005C84 var_4           = dword ptr -4
.text$mn:00005C84
.text$mn:00005C84                 push    ebp
.text$mn:00005C85                 mov     ebp, esp
.text$mn:00005C87                 sub     esp, 8
.text$mn:00005C8A                 mov     [ebp+var_4], ecx
.text$mn:00005C8D                 mov     eax, [ebp+var_4]
.text$mn:00005C90                 cmp     dword ptr [eax+18h], 8
.text$mn:00005C94                 jb      short loc_5CAA
.text$mn:00005C96                 mov     ecx, [ebp+var_4]
.text$mn:00005C99                 mov     edx, [ecx+4]
.text$mn:00005C9C                 push    edx
.text$mn:00005C9D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00005CA2                 add     esp, 4
.text$mn:00005CA5                 mov     [ebp+var_8], eax
.text$mn:00005CA8                 jmp     short loc_5CB3
.text$mn:00005CAA ; ---------------------------------------------------------------------------
.text$mn:00005CAA
.text$mn:00005CAA loc_5CAA:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00005CAA                 mov     eax, [ebp+var_4]
.text$mn:00005CAD                 add     eax, 4
.text$mn:00005CB0                 mov     [ebp+var_8], eax
.text$mn:00005CB3
.text$mn:00005CB3 loc_5CB3:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00005CB3                 mov     eax, [ebp+var_8]
.text$mn:00005CB6                 mov     esp, ebp
.text$mn:00005CB8                 pop     ebp
.text$mn:00005CB9                 retn
.text$mn:00005CB9 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00005CB9
.text$mn:00005CB9 ; ---------------------------------------------------------------------------
.text$mn:00005CBA                 align 4
.text$mn:00005CBA _text$mn        ends
.text$mn:00005CBA
.text$mn:00005CBC ; ===========================================================================
.text$mn:00005CBC
.text$mn:00005CBC ; Segment type: Pure code
.text$mn:00005CBC ; Segment permissions: Read/Execute
.text$mn:00005CBC _text$mn        segment para public 'CODE' use32
.text$mn:00005CBC                 assume cs:_text$mn
.text$mn:00005CBC                 ;org 5CBCh
.text$mn:00005CBC ; COMDAT (pick any)
.text$mn:00005CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CBC
.text$mn:00005CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005CBC
.text$mn:00005CBC ; Attributes: bp-based frame
.text$mn:00005CBC
.text$mn:00005CBC ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00005CBC                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00005CBC ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00005CBC                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00005CBC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00005CBC
.text$mn:00005CBC var_18          = byte ptr -18h
.text$mn:00005CBC var_14          = dword ptr -14h
.text$mn:00005CBC var_10          = dword ptr -10h
.text$mn:00005CBC var_C           = dword ptr -0Ch
.text$mn:00005CBC var_4           = dword ptr -4
.text$mn:00005CBC
.text$mn:00005CBC                 push    ebp
.text$mn:00005CBD                 mov     ebp, esp
.text$mn:00005CBF                 push    0FFFFFFFFh
.text$mn:00005CC1                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00005CC6                 mov     eax, large fs:0
.text$mn:00005CCC                 push    eax
.text$mn:00005CCD                 sub     esp, 0Ch
.text$mn:00005CD0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CD5                 xor     eax, ebp
.text$mn:00005CD7                 push    eax
.text$mn:00005CD8                 lea     eax, [ebp+var_C]
.text$mn:00005CDB                 mov     large fs:0, eax
.text$mn:00005CE1                 mov     [ebp+var_14], ecx
.text$mn:00005CE4                 mov     eax, [ebp+var_14]
.text$mn:00005CE7                 cmp     dword ptr [eax], 0
.text$mn:00005CEA                 jz      short loc_5D47
.text$mn:00005CEC                 push    3               ; int
.text$mn:00005CEE                 lea     ecx, [ebp+var_18] ; this
.text$mn:00005CF1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005CF6                 mov     [ebp+var_4], 0
.text$mn:00005CFD                 mov     ecx, [ebp+var_14]
.text$mn:00005D00                 mov     edx, [ecx]
.text$mn:00005D02                 add     edx, 4
.text$mn:00005D05                 mov     [ebp+var_10], edx
.text$mn:00005D08                 jmp     short loc_5D17
.text$mn:00005D0A ; ---------------------------------------------------------------------------
.text$mn:00005D0A
.text$mn:00005D0A loc_5D0A:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00005D0A                 mov     eax, [ebp+var_10]
.text$mn:00005D0D                 mov     ecx, [eax]
.text$mn:00005D0F                 mov     edx, [ebp+var_10]
.text$mn:00005D12                 mov     eax, [ecx+4]
.text$mn:00005D15                 mov     [edx], eax
.text$mn:00005D17
.text$mn:00005D17 loc_5D17:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00005D17                 mov     ecx, [ebp+var_10]
.text$mn:00005D1A                 cmp     dword ptr [ecx], 0
.text$mn:00005D1D                 jz      short loc_5D2C
.text$mn:00005D1F                 mov     edx, [ebp+var_10]
.text$mn:00005D22                 mov     eax, [edx]
.text$mn:00005D24                 mov     dword ptr [eax], 0
.text$mn:00005D2A                 jmp     short loc_5D0A
.text$mn:00005D2C ; ---------------------------------------------------------------------------
.text$mn:00005D2C
.text$mn:00005D2C loc_5D2C:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00005D2C                 mov     ecx, [ebp+var_14]
.text$mn:00005D2F                 mov     edx, [ecx]
.text$mn:00005D31                 mov     dword ptr [edx+4], 0
.text$mn:00005D38                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D3F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00005D42                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005D47
.text$mn:00005D47 loc_5D47:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00005D47                 mov     ecx, [ebp+var_C]
.text$mn:00005D4A                 mov     large fs:0, ecx
.text$mn:00005D51                 pop     ecx
.text$mn:00005D52                 mov     esp, ebp
.text$mn:00005D54                 pop     ebp
.text$mn:00005D55                 retn
.text$mn:00005D55 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00005D55
.text$mn:00005D55 ; ---------------------------------------------------------------------------
.text$mn:00005D56                 align 4
.text$mn:00005D56 _text$mn        ends
.text$mn:00005D56
.text$x:00005D58 ; ===========================================================================
.text$x:00005D58
.text$x:00005D58 ; Segment type: Pure code
.text$x:00005D58 ; Segment permissions: Read/Execute
.text$x:00005D58 _text$x         segment para public 'CODE' use32
.text$x:00005D58                 assume cs:_text$x
.text$x:00005D58                 ;org 5D58h
.text$x:00005D58 ; COMDAT (pick associative to section at 5CBC)
.text$x:00005D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D58
.text$x:00005D58 ; =============== S U B R O U T I N E =======================================
.text$x:00005D58
.text$x:00005D58
.text$x:00005D58 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00005D58                                         ; DATA XREF: .xdata$x:00007B80o
.text$x:00005D58                 lea     ecx, [ebp-18h]  ; this
.text$x:00005D5B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00005D5B __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00005D5B
.text$x:00005D60
.text$x:00005D60 ; =============== S U B R O U T I N E =======================================
.text$x:00005D60
.text$x:00005D60
.text$x:00005D60 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00005D60                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00005D60
.text$x:00005D60 arg_4           = dword ptr  8
.text$x:00005D60
.text$x:00005D60                 mov     edx, [esp+arg_4]
.text$x:00005D64                 lea     eax, [edx+0Ch]
.text$x:00005D67                 mov     ecx, [edx-10h]
.text$x:00005D6A                 xor     ecx, eax
.text$x:00005D6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D71                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00005D76                 jmp     ___CxxFrameHandler3
.text$x:00005D76 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00005D76
.text$x:00005D76 ; ---------------------------------------------------------------------------
.text$x:00005D7B                 align 4
.text$x:00005D7B _text$x         ends
.text$x:00005D7B
.text$mn:00005D7C ; ===========================================================================
.text$mn:00005D7C
.text$mn:00005D7C ; Segment type: Pure code
.text$mn:00005D7C ; Segment permissions: Read/Execute
.text$mn:00005D7C _text$mn        segment para public 'CODE' use32
.text$mn:00005D7C                 assume cs:_text$mn
.text$mn:00005D7C                 ;org 5D7Ch
.text$mn:00005D7C ; COMDAT (pick any)
.text$mn:00005D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D7C
.text$mn:00005D7C ; =============== S U B R O U T I N E =======================================
.text$mn:00005D7C
.text$mn:00005D7C ; Attributes: bp-based frame
.text$mn:00005D7C
.text$mn:00005D7C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00005D7C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00005D7C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00005D7C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:00005D7C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:00005D7C
.text$mn:00005D7C var_C           = dword ptr -0Ch
.text$mn:00005D7C var_8           = dword ptr -8
.text$mn:00005D7C var_2           = byte ptr -2
.text$mn:00005D7C var_1           = byte ptr -1
.text$mn:00005D7C arg_0           = byte ptr  8
.text$mn:00005D7C Size            = dword ptr  0Ch
.text$mn:00005D7C
.text$mn:00005D7C                 push    ebp
.text$mn:00005D7D                 mov     ebp, esp
.text$mn:00005D7F                 sub     esp, 0Ch
.text$mn:00005D82                 mov     [ebp+var_8], ecx
.text$mn:00005D85                 movzx   eax, [ebp+arg_0]
.text$mn:00005D89                 test    eax, eax
.text$mn:00005D8B                 jnz     short loc_5D8F
.text$mn:00005D8D                 jmp     short loc_5E02
.text$mn:00005D8F ; ---------------------------------------------------------------------------
.text$mn:00005D8F
.text$mn:00005D8F loc_5D8F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00005D8F                 mov     ecx, [ebp+var_8]
.text$mn:00005D92                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00005D96                 jb      short loc_5E02
.text$mn:00005D98                 mov     edx, [ebp+var_8]
.text$mn:00005D9B                 mov     eax, [edx+4]
.text$mn:00005D9E                 mov     [ebp+var_C], eax
.text$mn:00005DA1                 mov     ecx, [ebp+var_8]
.text$mn:00005DA4                 add     ecx, 4
.text$mn:00005DA7                 push    ecx
.text$mn:00005DA8                 lea     edx, [ebp+var_1]
.text$mn:00005DAB                 push    edx
.text$mn:00005DAC                 mov     ecx, [ebp+var_8]
.text$mn:00005DAF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005DB4                 mov     ecx, eax
.text$mn:00005DB6                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00005DBB                 cmp     [ebp+Size], 0
.text$mn:00005DBF                 jbe     short loc_5DE1
.text$mn:00005DC1                 mov     eax, [ebp+Size]
.text$mn:00005DC4                 push    eax             ; Size
.text$mn:00005DC5                 mov     ecx, [ebp+var_C]
.text$mn:00005DC8                 push    ecx
.text$mn:00005DC9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00005DCE                 add     esp, 4
.text$mn:00005DD1                 push    eax             ; Src
.text$mn:00005DD2                 mov     edx, [ebp+var_8]
.text$mn:00005DD5                 add     edx, 4
.text$mn:00005DD8                 push    edx             ; Dst
.text$mn:00005DD9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005DDE                 add     esp, 0Ch
.text$mn:00005DE1
.text$mn:00005DE1 loc_5DE1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00005DE1                 mov     eax, [ebp+var_8]
.text$mn:00005DE4                 mov     ecx, [eax+18h]
.text$mn:00005DE7                 add     ecx, 1
.text$mn:00005DEA                 push    ecx             ; int
.text$mn:00005DEB                 mov     edx, [ebp+var_C]
.text$mn:00005DEE                 push    edx             ; void *
.text$mn:00005DEF                 lea     eax, [ebp+var_2]
.text$mn:00005DF2                 push    eax
.text$mn:00005DF3                 mov     ecx, [ebp+var_8]
.text$mn:00005DF6                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005DFB                 mov     ecx, eax
.text$mn:00005DFD                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00005E02
.text$mn:00005E02 loc_5E02:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00005E02                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00005E02                 mov     ecx, [ebp+var_8]
.text$mn:00005E05                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00005E0C                 mov     edx, [ebp+Size]
.text$mn:00005E0F                 push    edx
.text$mn:00005E10                 mov     ecx, [ebp+var_8]
.text$mn:00005E13                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005E18                 mov     esp, ebp
.text$mn:00005E1A                 pop     ebp
.text$mn:00005E1B                 retn    8
.text$mn:00005E1B ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00005E1B
.text$mn:00005E1B ; ---------------------------------------------------------------------------
.text$mn:00005E1E                 align 10h
.text$mn:00005E1E _text$mn        ends
.text$mn:00005E1E
.text$mn:00005E20 ; ===========================================================================
.text$mn:00005E20
.text$mn:00005E20 ; Segment type: Pure code
.text$mn:00005E20 ; Segment permissions: Read/Execute
.text$mn:00005E20 _text$mn        segment para public 'CODE' use32
.text$mn:00005E20                 assume cs:_text$mn
.text$mn:00005E20                 ;org 5E20h
.text$mn:00005E20 ; COMDAT (pick any)
.text$mn:00005E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E20
.text$mn:00005E20 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E20
.text$mn:00005E20 ; Attributes: bp-based frame
.text$mn:00005E20
.text$mn:00005E20 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00005E20                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00005E20 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00005E20                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p
.text$mn:00005E20                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p ...
.text$mn:00005E20
.text$mn:00005E20 var_C           = dword ptr -0Ch
.text$mn:00005E20 var_8           = dword ptr -8
.text$mn:00005E20 var_2           = byte ptr -2
.text$mn:00005E20 var_1           = byte ptr -1
.text$mn:00005E20 arg_0           = byte ptr  8
.text$mn:00005E20 arg_4           = dword ptr  0Ch
.text$mn:00005E20
.text$mn:00005E20                 push    ebp
.text$mn:00005E21                 mov     ebp, esp
.text$mn:00005E23                 sub     esp, 0Ch
.text$mn:00005E26                 mov     [ebp+var_8], ecx
.text$mn:00005E29                 movzx   eax, [ebp+arg_0]
.text$mn:00005E2D                 test    eax, eax
.text$mn:00005E2F                 jnz     short loc_5E33
.text$mn:00005E31                 jmp     short loc_5EA6
.text$mn:00005E33 ; ---------------------------------------------------------------------------
.text$mn:00005E33
.text$mn:00005E33 loc_5E33:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00005E33                 mov     ecx, [ebp+var_8]
.text$mn:00005E36                 cmp     dword ptr [ecx+18h], 8
.text$mn:00005E3A                 jb      short loc_5EA6
.text$mn:00005E3C                 mov     edx, [ebp+var_8]
.text$mn:00005E3F                 mov     eax, [edx+4]
.text$mn:00005E42                 mov     [ebp+var_C], eax
.text$mn:00005E45                 mov     ecx, [ebp+var_8]
.text$mn:00005E48                 add     ecx, 4
.text$mn:00005E4B                 push    ecx
.text$mn:00005E4C                 lea     edx, [ebp+var_1]
.text$mn:00005E4F                 push    edx
.text$mn:00005E50                 mov     ecx, [ebp+var_8]
.text$mn:00005E53                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005E58                 mov     ecx, eax
.text$mn:00005E5A                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005E5F                 cmp     [ebp+arg_4], 0
.text$mn:00005E63                 jbe     short loc_5E85
.text$mn:00005E65                 mov     eax, [ebp+arg_4]
.text$mn:00005E68                 push    eax             ; int
.text$mn:00005E69                 mov     ecx, [ebp+var_C]
.text$mn:00005E6C                 push    ecx
.text$mn:00005E6D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00005E72                 add     esp, 4
.text$mn:00005E75                 push    eax             ; Src
.text$mn:00005E76                 mov     edx, [ebp+var_8]
.text$mn:00005E79                 add     edx, 4
.text$mn:00005E7C                 push    edx             ; Dst
.text$mn:00005E7D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005E82                 add     esp, 0Ch
.text$mn:00005E85
.text$mn:00005E85 loc_5E85:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00005E85                 mov     eax, [ebp+var_8]
.text$mn:00005E88                 mov     ecx, [eax+18h]
.text$mn:00005E8B                 add     ecx, 1
.text$mn:00005E8E                 push    ecx             ; int
.text$mn:00005E8F                 mov     edx, [ebp+var_C]
.text$mn:00005E92                 push    edx             ; void *
.text$mn:00005E93                 lea     eax, [ebp+var_2]
.text$mn:00005E96                 push    eax
.text$mn:00005E97                 mov     ecx, [ebp+var_8]
.text$mn:00005E9A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005E9F                 mov     ecx, eax
.text$mn:00005EA1                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00005EA6
.text$mn:00005EA6 loc_5EA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00005EA6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00005EA6                 mov     ecx, [ebp+var_8]
.text$mn:00005EA9                 mov     dword ptr [ecx+18h], 7
.text$mn:00005EB0                 mov     edx, [ebp+arg_4]
.text$mn:00005EB3                 push    edx
.text$mn:00005EB4                 mov     ecx, [ebp+var_8]
.text$mn:00005EB7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005EBC                 mov     esp, ebp
.text$mn:00005EBE                 pop     ebp
.text$mn:00005EBF                 retn    8
.text$mn:00005EBF ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00005EBF
.text$mn:00005EBF ; ---------------------------------------------------------------------------
.text$mn:00005EC2                 align 4
.text$mn:00005EC2 _text$mn        ends
.text$mn:00005EC2
.text$mn:00005EC4 ; ===========================================================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Segment type: Pure code
.text$mn:00005EC4 ; Segment permissions: Read/Execute
.text$mn:00005EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EC4                 assume cs:_text$mn
.text$mn:00005EC4                 ;org 5EC4h
.text$mn:00005EC4 ; COMDAT (pick any)
.text$mn:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EC4
.text$mn:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Attributes: bp-based frame
.text$mn:00005EC4
.text$mn:00005EC4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00005EC4                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00005EC4 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00005EC4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00005EC4
.text$mn:00005EC4 var_4           = dword ptr -4
.text$mn:00005EC4
.text$mn:00005EC4                 push    ebp
.text$mn:00005EC5                 mov     ebp, esp
.text$mn:00005EC7                 push    ecx
.text$mn:00005EC8                 mov     [ebp+var_4], ecx
.text$mn:00005ECB                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00005ED0                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00005ED5                 mov     esp, ebp
.text$mn:00005ED7                 pop     ebp
.text$mn:00005ED8                 retn
.text$mn:00005ED8 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00005ED8
.text$mn:00005ED8 ; ---------------------------------------------------------------------------
.text$mn:00005ED9                 align 4
.text$mn:00005ED9 _text$mn        ends
.text$mn:00005ED9
.text$mn:00005EDC ; ===========================================================================
.text$mn:00005EDC
.text$mn:00005EDC ; Segment type: Pure code
.text$mn:00005EDC ; Segment permissions: Read/Execute
.text$mn:00005EDC _text$mn        segment para public 'CODE' use32
.text$mn:00005EDC                 assume cs:_text$mn
.text$mn:00005EDC                 ;org 5EDCh
.text$mn:00005EDC ; COMDAT (pick any)
.text$mn:00005EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EDC
.text$mn:00005EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005EDC
.text$mn:00005EDC ; Attributes: bp-based frame
.text$mn:00005EDC
.text$mn:00005EDC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00005EDC                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00005EDC ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00005EDC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00005EDC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:00005EDC
.text$mn:00005EDC var_4           = dword ptr -4
.text$mn:00005EDC
.text$mn:00005EDC                 push    ebp
.text$mn:00005EDD                 mov     ebp, esp
.text$mn:00005EDF                 push    ecx
.text$mn:00005EE0                 mov     [ebp+var_4], ecx
.text$mn:00005EE3                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00005EE8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00005EED                 mov     esp, ebp
.text$mn:00005EEF                 pop     ebp
.text$mn:00005EF0                 retn
.text$mn:00005EF0 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00005EF0
.text$mn:00005EF0 ; ---------------------------------------------------------------------------
.text$mn:00005EF1                 align 4
.text$mn:00005EF1 _text$mn        ends
.text$mn:00005EF1
.text$mn:00005EF4 ; ===========================================================================
.text$mn:00005EF4
.text$mn:00005EF4 ; Segment type: Pure code
.text$mn:00005EF4 ; Segment permissions: Read/Execute
.text$mn:00005EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EF4                 assume cs:_text$mn
.text$mn:00005EF4                 ;org 5EF4h
.text$mn:00005EF4 ; COMDAT (pick any)
.text$mn:00005EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EF4
.text$mn:00005EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EF4
.text$mn:00005EF4 ; Attributes: bp-based frame
.text$mn:00005EF4
.text$mn:00005EF4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00005EF4                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00005EF4 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00005EF4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00005EF4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:00005EF4
.text$mn:00005EF4 var_4           = dword ptr -4
.text$mn:00005EF4
.text$mn:00005EF4                 push    ebp
.text$mn:00005EF5                 mov     ebp, esp
.text$mn:00005EF7                 push    ecx
.text$mn:00005EF8                 mov     [ebp+var_4], ecx
.text$mn:00005EFB                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00005F00                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00005F05                 mov     esp, ebp
.text$mn:00005F07                 pop     ebp
.text$mn:00005F08                 retn
.text$mn:00005F08 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00005F08
.text$mn:00005F08 ; ---------------------------------------------------------------------------
.text$mn:00005F09                 align 4
.text$mn:00005F09 _text$mn        ends
.text$mn:00005F09
.text$mn:00005F0C ; ===========================================================================
.text$mn:00005F0C
.text$mn:00005F0C ; Segment type: Pure code
.text$mn:00005F0C ; Segment permissions: Read/Execute
.text$mn:00005F0C _text$mn        segment para public 'CODE' use32
.text$mn:00005F0C                 assume cs:_text$mn
.text$mn:00005F0C                 ;org 5F0Ch
.text$mn:00005F0C ; COMDAT (pick any)
.text$mn:00005F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F0C
.text$mn:00005F0C ; =============== S U B R O U T I N E =======================================
.text$mn:00005F0C
.text$mn:00005F0C ; Attributes: bp-based frame
.text$mn:00005F0C
.text$mn:00005F0C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00005F0C                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00005F0C ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00005F0C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00005F0C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00005F0C
.text$mn:00005F0C var_4           = dword ptr -4
.text$mn:00005F0C
.text$mn:00005F0C                 push    ebp
.text$mn:00005F0D                 mov     ebp, esp
.text$mn:00005F0F                 push    ecx
.text$mn:00005F10                 mov     [ebp+var_4], ecx
.text$mn:00005F13                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00005F18                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00005F1D                 mov     esp, ebp
.text$mn:00005F1F                 pop     ebp
.text$mn:00005F20                 retn
.text$mn:00005F20 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00005F20
.text$mn:00005F20 ; ---------------------------------------------------------------------------
.text$mn:00005F21                 align 4
.text$mn:00005F21 _text$mn        ends
.text$mn:00005F21
.text$mn:00005F24 ; ===========================================================================
.text$mn:00005F24
.text$mn:00005F24 ; Segment type: Pure code
.text$mn:00005F24 ; Segment permissions: Read/Execute
.text$mn:00005F24 _text$mn        segment para public 'CODE' use32
.text$mn:00005F24                 assume cs:_text$mn
.text$mn:00005F24                 ;org 5F24h
.text$mn:00005F24 ; COMDAT (pick any)
.text$mn:00005F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F24
.text$mn:00005F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F24
.text$mn:00005F24 ; Attributes: bp-based frame
.text$mn:00005F24
.text$mn:00005F24 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00005F24                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00005F24 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00005F24                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00005F24                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00005F24
.text$mn:00005F24 var_4           = dword ptr -4
.text$mn:00005F24 arg_0           = dword ptr  8
.text$mn:00005F24
.text$mn:00005F24                 push    ebp
.text$mn:00005F25                 mov     ebp, esp
.text$mn:00005F27                 push    ecx
.text$mn:00005F28                 mov     [ebp+var_4], ecx
.text$mn:00005F2B                 mov     eax, [ebp+arg_0]
.text$mn:00005F2E                 push    eax
.text$mn:00005F2F                 mov     ecx, [ebp+var_4]
.text$mn:00005F32                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00005F37                 mov     esp, ebp
.text$mn:00005F39                 pop     ebp
.text$mn:00005F3A                 retn    4
.text$mn:00005F3A ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00005F3A
.text$mn:00005F3A ; ---------------------------------------------------------------------------
.text$mn:00005F3D                 align 10h
.text$mn:00005F3D _text$mn        ends
.text$mn:00005F3D
.text$mn:00005F40 ; ===========================================================================
.text$mn:00005F40
.text$mn:00005F40 ; Segment type: Pure code
.text$mn:00005F40 ; Segment permissions: Read/Execute
.text$mn:00005F40 _text$mn        segment para public 'CODE' use32
.text$mn:00005F40                 assume cs:_text$mn
.text$mn:00005F40                 ;org 5F40h
.text$mn:00005F40 ; COMDAT (pick any)
.text$mn:00005F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F40
.text$mn:00005F40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F40
.text$mn:00005F40 ; Attributes: bp-based frame
.text$mn:00005F40
.text$mn:00005F40 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00005F40                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00005F40 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00005F40                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00005F40                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00005F40
.text$mn:00005F40 var_4           = dword ptr -4
.text$mn:00005F40 arg_0           = dword ptr  8
.text$mn:00005F40
.text$mn:00005F40                 push    ebp
.text$mn:00005F41                 mov     ebp, esp
.text$mn:00005F43                 push    ecx
.text$mn:00005F44                 mov     [ebp+var_4], ecx
.text$mn:00005F47                 mov     eax, [ebp+arg_0]
.text$mn:00005F4A                 push    eax
.text$mn:00005F4B                 mov     ecx, [ebp+var_4]
.text$mn:00005F4E                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00005F53                 mov     esp, ebp
.text$mn:00005F55                 pop     ebp
.text$mn:00005F56                 retn    4
.text$mn:00005F56 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00005F56
.text$mn:00005F56 ; ---------------------------------------------------------------------------
.text$mn:00005F59                 align 4
.text$mn:00005F59 _text$mn        ends
.text$mn:00005F59
.text$mn:00005F5C ; ===========================================================================
.text$mn:00005F5C
.text$mn:00005F5C ; Segment type: Pure code
.text$mn:00005F5C ; Segment permissions: Read/Execute
.text$mn:00005F5C _text$mn        segment para public 'CODE' use32
.text$mn:00005F5C                 assume cs:_text$mn
.text$mn:00005F5C                 ;org 5F5Ch
.text$mn:00005F5C ; COMDAT (pick any)
.text$mn:00005F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F5C
.text$mn:00005F5C ; =============== S U B R O U T I N E =======================================
.text$mn:00005F5C
.text$mn:00005F5C ; Attributes: bp-based frame
.text$mn:00005F5C
.text$mn:00005F5C ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00005F5C                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00005F5C ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00005F5C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:00005F5C
.text$mn:00005F5C var_4           = dword ptr -4
.text$mn:00005F5C arg_0           = dword ptr  8
.text$mn:00005F5C
.text$mn:00005F5C                 push    ebp
.text$mn:00005F5D                 mov     ebp, esp
.text$mn:00005F5F                 push    ecx
.text$mn:00005F60                 mov     [ebp+var_4], ecx
.text$mn:00005F63                 push    0
.text$mn:00005F65                 mov     eax, [ebp+arg_0]
.text$mn:00005F68                 push    eax
.text$mn:00005F69                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:00005F6E                 add     esp, 8
.text$mn:00005F71                 mov     esp, ebp
.text$mn:00005F73                 pop     ebp
.text$mn:00005F74                 retn    4
.text$mn:00005F74 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00005F74
.text$mn:00005F74 ; ---------------------------------------------------------------------------
.text$mn:00005F77                 align 4
.text$mn:00005F77 _text$mn        ends
.text$mn:00005F77
.text$mn:00005F78 ; ===========================================================================
.text$mn:00005F78
.text$mn:00005F78 ; Segment type: Pure code
.text$mn:00005F78 ; Segment permissions: Read/Execute
.text$mn:00005F78 _text$mn        segment para public 'CODE' use32
.text$mn:00005F78                 assume cs:_text$mn
.text$mn:00005F78                 ;org 5F78h
.text$mn:00005F78 ; COMDAT (pick any)
.text$mn:00005F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F78
.text$mn:00005F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F78
.text$mn:00005F78 ; Attributes: bp-based frame
.text$mn:00005F78
.text$mn:00005F78 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00005F78                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00005F78 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00005F78                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00005F78                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:00005F78
.text$mn:00005F78 var_4           = dword ptr -4
.text$mn:00005F78 arg_0           = dword ptr  8
.text$mn:00005F78
.text$mn:00005F78                 push    ebp
.text$mn:00005F79                 mov     ebp, esp
.text$mn:00005F7B                 push    ecx
.text$mn:00005F7C                 mov     [ebp+var_4], ecx
.text$mn:00005F7F                 push    0
.text$mn:00005F81                 mov     eax, [ebp+arg_0]
.text$mn:00005F84                 push    eax
.text$mn:00005F85                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:00005F8A                 add     esp, 8
.text$mn:00005F8D                 mov     esp, ebp
.text$mn:00005F8F                 pop     ebp
.text$mn:00005F90                 retn    4
.text$mn:00005F90 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00005F90
.text$mn:00005F90 ; ---------------------------------------------------------------------------
.text$mn:00005F93                 align 4
.text$mn:00005F93 _text$mn        ends
.text$mn:00005F93
.text$mn:00005F94 ; ===========================================================================
.text$mn:00005F94
.text$mn:00005F94 ; Segment type: Pure code
.text$mn:00005F94 ; Segment permissions: Read/Execute
.text$mn:00005F94 _text$mn        segment para public 'CODE' use32
.text$mn:00005F94                 assume cs:_text$mn
.text$mn:00005F94                 ;org 5F94h
.text$mn:00005F94 ; COMDAT (pick any)
.text$mn:00005F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F94
.text$mn:00005F94 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F94
.text$mn:00005F94 ; Attributes: bp-based frame
.text$mn:00005F94
.text$mn:00005F94 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00005F94                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00005F94 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00005F94                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00005F94
.text$mn:00005F94 var_4           = dword ptr -4
.text$mn:00005F94 arg_0           = dword ptr  8
.text$mn:00005F94
.text$mn:00005F94                 push    ebp
.text$mn:00005F95                 mov     ebp, esp
.text$mn:00005F97                 push    ecx
.text$mn:00005F98                 mov     [ebp+var_4], ecx
.text$mn:00005F9B                 push    0
.text$mn:00005F9D                 mov     eax, [ebp+arg_0]
.text$mn:00005FA0                 push    eax
.text$mn:00005FA1                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00005FA6                 add     esp, 8
.text$mn:00005FA9                 mov     esp, ebp
.text$mn:00005FAB                 pop     ebp
.text$mn:00005FAC                 retn    4
.text$mn:00005FAC ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:00005FAC
.text$mn:00005FAC ; ---------------------------------------------------------------------------
.text$mn:00005FAF                 align 10h
.text$mn:00005FAF _text$mn        ends
.text$mn:00005FAF
.text$mn:00005FB0 ; ===========================================================================
.text$mn:00005FB0
.text$mn:00005FB0 ; Segment type: Pure code
.text$mn:00005FB0 ; Segment permissions: Read/Execute
.text$mn:00005FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00005FB0                 assume cs:_text$mn
.text$mn:00005FB0                 ;org 5FB0h
.text$mn:00005FB0 ; COMDAT (pick any)
.text$mn:00005FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FB0
.text$mn:00005FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FB0
.text$mn:00005FB0 ; Attributes: bp-based frame
.text$mn:00005FB0
.text$mn:00005FB0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00005FB0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00005FB0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00005FB0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00005FB0
.text$mn:00005FB0 var_8           = dword ptr -8
.text$mn:00005FB0 var_4           = dword ptr -4
.text$mn:00005FB0 arg_0           = dword ptr  8
.text$mn:00005FB0 arg_4           = dword ptr  0Ch
.text$mn:00005FB0 arg_8           = dword ptr  10h
.text$mn:00005FB0
.text$mn:00005FB0                 push    ebp
.text$mn:00005FB1                 mov     ebp, esp
.text$mn:00005FB3                 sub     esp, 8
.text$mn:00005FB6                 mov     [ebp+var_4], ecx
.text$mn:00005FB9                 mov     ecx, [ebp+arg_0]
.text$mn:00005FBC                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00005FC1                 cmp     eax, [ebp+arg_4]
.text$mn:00005FC4                 jnb     short loc_5FCE
.text$mn:00005FC6                 mov     ecx, [ebp+var_4]
.text$mn:00005FC9                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00005FCE
.text$mn:00005FCE loc_5FCE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00005FCE                 mov     ecx, [ebp+arg_0]
.text$mn:00005FD1                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00005FD6                 sub     eax, [ebp+arg_4]
.text$mn:00005FD9                 mov     [ebp+var_8], eax
.text$mn:00005FDC                 mov     eax, [ebp+var_8]
.text$mn:00005FDF                 cmp     eax, [ebp+arg_8]
.text$mn:00005FE2                 jnb     short loc_5FEA
.text$mn:00005FE4                 mov     ecx, [ebp+var_8]
.text$mn:00005FE7                 mov     [ebp+arg_8], ecx
.text$mn:00005FEA
.text$mn:00005FEA loc_5FEA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00005FEA                 mov     edx, [ebp+var_4]
.text$mn:00005FED                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00005FF2                 sub     eax, [edx+14h]
.text$mn:00005FF5                 cmp     eax, [ebp+arg_8]
.text$mn:00005FF8                 ja      short loc_6002
.text$mn:00005FFA                 mov     ecx, [ebp+var_4]
.text$mn:00005FFD                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006002
.text$mn:00006002 loc_6002:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:00006002                 cmp     [ebp+arg_8], 0
.text$mn:00006006                 jbe     short loc_6062
.text$mn:00006008                 mov     ecx, [ebp+var_4]
.text$mn:0000600B                 mov     edx, [ecx+14h]
.text$mn:0000600E                 add     edx, [ebp+arg_8]
.text$mn:00006011                 mov     [ebp+var_8], edx
.text$mn:00006014                 push    0
.text$mn:00006016                 mov     eax, [ebp+var_8]
.text$mn:00006019                 push    eax
.text$mn:0000601A                 mov     ecx, [ebp+var_4]
.text$mn:0000601D                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006022                 movzx   ecx, al
.text$mn:00006025                 test    ecx, ecx
.text$mn:00006027                 jz      short loc_6062
.text$mn:00006029                 mov     edx, [ebp+arg_8]
.text$mn:0000602C                 push    edx             ; int
.text$mn:0000602D                 mov     ecx, [ebp+arg_0]
.text$mn:00006030                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006035                 mov     ecx, [ebp+arg_4]
.text$mn:00006038                 lea     edx, [eax+ecx*2]
.text$mn:0000603B                 push    edx             ; Src
.text$mn:0000603C                 mov     ecx, [ebp+var_4]
.text$mn:0000603F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006044                 mov     ecx, [ebp+var_4]
.text$mn:00006047                 mov     edx, [ecx+14h]
.text$mn:0000604A                 lea     eax, [eax+edx*2]
.text$mn:0000604D                 push    eax             ; Dst
.text$mn:0000604E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006053                 add     esp, 0Ch
.text$mn:00006056                 mov     ecx, [ebp+var_8]
.text$mn:00006059                 push    ecx
.text$mn:0000605A                 mov     ecx, [ebp+var_4]
.text$mn:0000605D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006062
.text$mn:00006062 loc_6062:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:00006062                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:00006062                 mov     eax, [ebp+var_4]
.text$mn:00006065                 mov     esp, ebp
.text$mn:00006067                 pop     ebp
.text$mn:00006068                 retn    0Ch
.text$mn:00006068 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00006068
.text$mn:00006068 ; ---------------------------------------------------------------------------
.text$mn:0000606B                 align 4
.text$mn:0000606B _text$mn        ends
.text$mn:0000606B
.text$mn:0000606C ; ===========================================================================
.text$mn:0000606C
.text$mn:0000606C ; Segment type: Pure code
.text$mn:0000606C ; Segment permissions: Read/Execute
.text$mn:0000606C _text$mn        segment para public 'CODE' use32
.text$mn:0000606C                 assume cs:_text$mn
.text$mn:0000606C                 ;org 606Ch
.text$mn:0000606C ; COMDAT (pick any)
.text$mn:0000606C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000606C
.text$mn:0000606C ; =============== S U B R O U T I N E =======================================
.text$mn:0000606C
.text$mn:0000606C ; Attributes: bp-based frame
.text$mn:0000606C
.text$mn:0000606C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:0000606C                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000606C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000606C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:0000606C
.text$mn:0000606C var_4           = dword ptr -4
.text$mn:0000606C Str             = dword ptr  8
.text$mn:0000606C
.text$mn:0000606C                 push    ebp
.text$mn:0000606D                 mov     ebp, esp
.text$mn:0000606F                 push    ecx
.text$mn:00006070                 mov     [ebp+var_4], ecx
.text$mn:00006073                 push    43Eh            ; unsigned int
.text$mn:00006078                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000607D                 mov     eax, [ebp+Str]
.text$mn:00006080                 push    eax             ; int
.text$mn:00006081                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006086                 add     esp, 0Ch
.text$mn:00006089                 mov     ecx, [ebp+Str]
.text$mn:0000608C                 push    ecx             ; Str
.text$mn:0000608D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00006092                 add     esp, 4
.text$mn:00006095                 push    eax             ; int
.text$mn:00006096                 mov     edx, [ebp+Str]
.text$mn:00006099                 push    edx             ; Src
.text$mn:0000609A                 mov     ecx, [ebp+var_4]
.text$mn:0000609D                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:000060A2                 mov     esp, ebp
.text$mn:000060A4                 pop     ebp
.text$mn:000060A5                 retn    4
.text$mn:000060A5 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:000060A5
.text$mn:000060A5 _text$mn        ends
.text$mn:000060A5
.text$mn:000060A8 ; ===========================================================================
.text$mn:000060A8
.text$mn:000060A8 ; Segment type: Pure code
.text$mn:000060A8 ; Segment permissions: Read/Execute
.text$mn:000060A8 _text$mn        segment para public 'CODE' use32
.text$mn:000060A8                 assume cs:_text$mn
.text$mn:000060A8                 ;org 60A8h
.text$mn:000060A8 ; COMDAT (pick any)
.text$mn:000060A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060A8
.text$mn:000060A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060A8
.text$mn:000060A8 ; Attributes: bp-based frame
.text$mn:000060A8
.text$mn:000060A8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:000060A8                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:000060A8 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:000060A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:000060A8
.text$mn:000060A8 var_8           = dword ptr -8
.text$mn:000060A8 var_4           = dword ptr -4
.text$mn:000060A8 Src             = dword ptr  8
.text$mn:000060A8 arg_4           = dword ptr  0Ch
.text$mn:000060A8
.text$mn:000060A8                 push    ebp
.text$mn:000060A9                 mov     ebp, esp
.text$mn:000060AB                 sub     esp, 8
.text$mn:000060AE                 mov     [ebp+var_4], ecx
.text$mn:000060B1                 cmp     [ebp+arg_4], 0
.text$mn:000060B5                 jz      short loc_60CD
.text$mn:000060B7                 push    42Ah            ; unsigned int
.text$mn:000060BC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000060C1                 mov     eax, [ebp+Src]
.text$mn:000060C4                 push    eax             ; int
.text$mn:000060C5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000060CA                 add     esp, 0Ch
.text$mn:000060CD
.text$mn:000060CD loc_60CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:000060CD                 mov     ecx, [ebp+Src]
.text$mn:000060D0                 push    ecx
.text$mn:000060D1                 mov     ecx, [ebp+var_4]
.text$mn:000060D4                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000060D9                 movzx   edx, al
.text$mn:000060DC                 test    edx, edx
.text$mn:000060DE                 jz      short loc_6102
.text$mn:000060E0                 mov     eax, [ebp+arg_4]
.text$mn:000060E3                 push    eax
.text$mn:000060E4                 mov     ecx, [ebp+var_4]
.text$mn:000060E7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000060EC                 mov     ecx, [ebp+Src]
.text$mn:000060EF                 sub     ecx, eax
.text$mn:000060F1                 sar     ecx, 1
.text$mn:000060F3                 push    ecx
.text$mn:000060F4                 mov     edx, [ebp+var_4]
.text$mn:000060F7                 push    edx
.text$mn:000060F8                 mov     ecx, [ebp+var_4]
.text$mn:000060FB                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006100                 jmp     short loc_6173
.text$mn:00006102 ; ---------------------------------------------------------------------------
.text$mn:00006102
.text$mn:00006102 loc_6102:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:00006102                 mov     eax, [ebp+var_4]
.text$mn:00006105                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000610B                 sub     ecx, [eax+14h]
.text$mn:0000610E                 cmp     ecx, [ebp+arg_4]
.text$mn:00006111                 ja      short loc_611B
.text$mn:00006113                 mov     ecx, [ebp+var_4]
.text$mn:00006116                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000611B
.text$mn:0000611B loc_611B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:0000611B                 cmp     [ebp+arg_4], 0
.text$mn:0000611F                 jbe     short loc_6170
.text$mn:00006121                 mov     edx, [ebp+var_4]
.text$mn:00006124                 mov     eax, [edx+14h]
.text$mn:00006127                 add     eax, [ebp+arg_4]
.text$mn:0000612A                 mov     [ebp+var_8], eax
.text$mn:0000612D                 push    0
.text$mn:0000612F                 mov     ecx, [ebp+var_8]
.text$mn:00006132                 push    ecx
.text$mn:00006133                 mov     ecx, [ebp+var_4]
.text$mn:00006136                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000613B                 movzx   edx, al
.text$mn:0000613E                 test    edx, edx
.text$mn:00006140                 jz      short loc_6170
.text$mn:00006142                 mov     eax, [ebp+arg_4]
.text$mn:00006145                 push    eax             ; int
.text$mn:00006146                 mov     ecx, [ebp+Src]
.text$mn:00006149                 push    ecx             ; Src
.text$mn:0000614A                 mov     ecx, [ebp+var_4]
.text$mn:0000614D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006152                 mov     edx, [ebp+var_4]
.text$mn:00006155                 mov     ecx, [edx+14h]
.text$mn:00006158                 lea     edx, [eax+ecx*2]
.text$mn:0000615B                 push    edx             ; Dst
.text$mn:0000615C                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006161                 add     esp, 0Ch
.text$mn:00006164                 mov     eax, [ebp+var_8]
.text$mn:00006167                 push    eax
.text$mn:00006168                 mov     ecx, [ebp+var_4]
.text$mn:0000616B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006170
.text$mn:00006170 loc_6170:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00006170                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00006170                 mov     eax, [ebp+var_4]
.text$mn:00006173
.text$mn:00006173 loc_6173:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00006173                 mov     esp, ebp
.text$mn:00006175                 pop     ebp
.text$mn:00006176                 retn    8
.text$mn:00006176 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00006176
.text$mn:00006176 ; ---------------------------------------------------------------------------
.text$mn:00006179                 align 4
.text$mn:00006179 _text$mn        ends
.text$mn:00006179
.text$mn:0000617C ; ===========================================================================
.text$mn:0000617C
.text$mn:0000617C ; Segment type: Pure code
.text$mn:0000617C ; Segment permissions: Read/Execute
.text$mn:0000617C _text$mn        segment para public 'CODE' use32
.text$mn:0000617C                 assume cs:_text$mn
.text$mn:0000617C                 ;org 617Ch
.text$mn:0000617C ; COMDAT (pick any)
.text$mn:0000617C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000617C
.text$mn:0000617C ; =============== S U B R O U T I N E =======================================
.text$mn:0000617C
.text$mn:0000617C ; Attributes: bp-based frame
.text$mn:0000617C
.text$mn:0000617C ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:0000617C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000617C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000617C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:0000617C
.text$mn:0000617C Size            = dword ptr -8
.text$mn:0000617C var_4           = dword ptr -4
.text$mn:0000617C arg_0           = dword ptr  8
.text$mn:0000617C arg_4           = dword ptr  0Ch
.text$mn:0000617C arg_8           = dword ptr  10h
.text$mn:0000617C
.text$mn:0000617C                 push    ebp
.text$mn:0000617D                 mov     ebp, esp
.text$mn:0000617F                 sub     esp, 8
.text$mn:00006182                 mov     [ebp+var_4], ecx
.text$mn:00006185                 mov     ecx, [ebp+arg_0]
.text$mn:00006188                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000618D                 cmp     eax, [ebp+arg_4]
.text$mn:00006190                 jnb     short loc_619A
.text$mn:00006192                 mov     ecx, [ebp+var_4]
.text$mn:00006195                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000619A
.text$mn:0000619A loc_619A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000619A                 mov     ecx, [ebp+arg_0]
.text$mn:0000619D                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000061A2                 sub     eax, [ebp+arg_4]
.text$mn:000061A5                 mov     [ebp+Size], eax
.text$mn:000061A8                 mov     eax, [ebp+arg_8]
.text$mn:000061AB                 cmp     eax, [ebp+Size]
.text$mn:000061AE                 jnb     short loc_61B6
.text$mn:000061B0                 mov     ecx, [ebp+arg_8]
.text$mn:000061B3                 mov     [ebp+Size], ecx
.text$mn:000061B6
.text$mn:000061B6 loc_61B6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:000061B6                 mov     edx, [ebp+var_4]
.text$mn:000061B9                 cmp     edx, [ebp+arg_0]
.text$mn:000061BC                 jnz     short loc_61DD
.text$mn:000061BE                 mov     eax, [ebp+arg_4]
.text$mn:000061C1                 add     eax, [ebp+Size]
.text$mn:000061C4                 push    eax
.text$mn:000061C5                 mov     ecx, [ebp+var_4]
.text$mn:000061C8                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:000061CD                 mov     ecx, [ebp+arg_4]
.text$mn:000061D0                 push    ecx
.text$mn:000061D1                 push    0
.text$mn:000061D3                 mov     ecx, [ebp+var_4]
.text$mn:000061D6                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:000061DB                 jmp     short loc_621F
.text$mn:000061DD ; ---------------------------------------------------------------------------
.text$mn:000061DD
.text$mn:000061DD loc_61DD:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:000061DD                 push    0
.text$mn:000061DF                 mov     edx, [ebp+Size]
.text$mn:000061E2                 push    edx
.text$mn:000061E3                 mov     ecx, [ebp+var_4]
.text$mn:000061E6                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000061EB                 movzx   eax, al
.text$mn:000061EE                 test    eax, eax
.text$mn:000061F0                 jz      short loc_621F
.text$mn:000061F2                 mov     ecx, [ebp+Size]
.text$mn:000061F5                 push    ecx             ; Size
.text$mn:000061F6                 mov     ecx, [ebp+arg_0]
.text$mn:000061F9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000061FE                 add     eax, [ebp+arg_4]
.text$mn:00006201                 push    eax             ; Src
.text$mn:00006202                 mov     ecx, [ebp+var_4]
.text$mn:00006205                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000620A                 push    eax             ; Dst
.text$mn:0000620B                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00006210                 add     esp, 0Ch
.text$mn:00006213                 mov     edx, [ebp+Size]
.text$mn:00006216                 push    edx
.text$mn:00006217                 mov     ecx, [ebp+var_4]
.text$mn:0000621A                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000621F
.text$mn:0000621F loc_621F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:0000621F                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:0000621F                 mov     eax, [ebp+var_4]
.text$mn:00006222                 mov     esp, ebp
.text$mn:00006224                 pop     ebp
.text$mn:00006225                 retn    0Ch
.text$mn:00006225 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00006225
.text$mn:00006225 _text$mn        ends
.text$mn:00006225
.text$mn:00006228 ; ===========================================================================
.text$mn:00006228
.text$mn:00006228 ; Segment type: Pure code
.text$mn:00006228 ; Segment permissions: Read/Execute
.text$mn:00006228 _text$mn        segment para public 'CODE' use32
.text$mn:00006228                 assume cs:_text$mn
.text$mn:00006228                 ;org 6228h
.text$mn:00006228 ; COMDAT (pick any)
.text$mn:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006228
.text$mn:00006228 ; =============== S U B R O U T I N E =======================================
.text$mn:00006228
.text$mn:00006228 ; Attributes: bp-based frame
.text$mn:00006228
.text$mn:00006228 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00006228                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00006228 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00006228                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00006228
.text$mn:00006228 var_4           = dword ptr -4
.text$mn:00006228 Str             = dword ptr  8
.text$mn:00006228
.text$mn:00006228                 push    ebp
.text$mn:00006229                 mov     ebp, esp
.text$mn:0000622B                 push    ecx
.text$mn:0000622C                 mov     [ebp+var_4], ecx
.text$mn:0000622F                 push    490h            ; unsigned int
.text$mn:00006234                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006239                 mov     eax, [ebp+Str]
.text$mn:0000623C                 push    eax             ; int
.text$mn:0000623D                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00006242                 add     esp, 0Ch
.text$mn:00006245                 mov     ecx, [ebp+Str]
.text$mn:00006248                 push    ecx             ; Str
.text$mn:00006249                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000624E                 add     esp, 4
.text$mn:00006251                 push    eax             ; Size
.text$mn:00006252                 mov     edx, [ebp+Str]
.text$mn:00006255                 push    edx             ; Src
.text$mn:00006256                 mov     ecx, [ebp+var_4]
.text$mn:00006259                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000625E                 mov     esp, ebp
.text$mn:00006260                 pop     ebp
.text$mn:00006261                 retn    4
.text$mn:00006261 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00006261
.text$mn:00006261 _text$mn        ends
.text$mn:00006261
.text$mn:00006264 ; ===========================================================================
.text$mn:00006264
.text$mn:00006264 ; Segment type: Pure code
.text$mn:00006264 ; Segment permissions: Read/Execute
.text$mn:00006264 _text$mn        segment para public 'CODE' use32
.text$mn:00006264                 assume cs:_text$mn
.text$mn:00006264                 ;org 6264h
.text$mn:00006264 ; COMDAT (pick any)
.text$mn:00006264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006264
.text$mn:00006264 ; =============== S U B R O U T I N E =======================================
.text$mn:00006264
.text$mn:00006264 ; Attributes: bp-based frame
.text$mn:00006264
.text$mn:00006264 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00006264                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00006264 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00006264                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00006264
.text$mn:00006264 var_4           = dword ptr -4
.text$mn:00006264 Src             = dword ptr  8
.text$mn:00006264 Size            = dword ptr  0Ch
.text$mn:00006264
.text$mn:00006264                 push    ebp
.text$mn:00006265                 mov     ebp, esp
.text$mn:00006267                 push    ecx
.text$mn:00006268                 mov     [ebp+var_4], ecx
.text$mn:0000626B                 cmp     [ebp+Size], 0
.text$mn:0000626F                 jz      short loc_6287
.text$mn:00006271                 push    47Fh            ; unsigned int
.text$mn:00006276                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000627B                 mov     eax, [ebp+Src]
.text$mn:0000627E                 push    eax             ; int
.text$mn:0000627F                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00006284                 add     esp, 0Ch
.text$mn:00006287
.text$mn:00006287 loc_6287:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00006287                 mov     ecx, [ebp+Src]
.text$mn:0000628A                 push    ecx
.text$mn:0000628B                 mov     ecx, [ebp+var_4]
.text$mn:0000628E                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00006293                 movzx   edx, al
.text$mn:00006296                 test    edx, edx
.text$mn:00006298                 jz      short loc_62BA
.text$mn:0000629A                 mov     eax, [ebp+Size]
.text$mn:0000629D                 push    eax
.text$mn:0000629E                 mov     ecx, [ebp+var_4]
.text$mn:000062A1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000062A6                 mov     ecx, [ebp+Src]
.text$mn:000062A9                 sub     ecx, eax
.text$mn:000062AB                 push    ecx
.text$mn:000062AC                 mov     edx, [ebp+var_4]
.text$mn:000062AF                 push    edx
.text$mn:000062B0                 mov     ecx, [ebp+var_4]
.text$mn:000062B3                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:000062B8                 jmp     short loc_62F7
.text$mn:000062BA ; ---------------------------------------------------------------------------
.text$mn:000062BA
.text$mn:000062BA loc_62BA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:000062BA                 push    0
.text$mn:000062BC                 mov     eax, [ebp+Size]
.text$mn:000062BF                 push    eax
.text$mn:000062C0                 mov     ecx, [ebp+var_4]
.text$mn:000062C3                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000062C8                 movzx   ecx, al
.text$mn:000062CB                 test    ecx, ecx
.text$mn:000062CD                 jz      short loc_62F4
.text$mn:000062CF                 mov     edx, [ebp+Size]
.text$mn:000062D2                 push    edx             ; Size
.text$mn:000062D3                 mov     eax, [ebp+Src]
.text$mn:000062D6                 push    eax             ; Src
.text$mn:000062D7                 mov     ecx, [ebp+var_4]
.text$mn:000062DA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000062DF                 push    eax             ; Dst
.text$mn:000062E0                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000062E5                 add     esp, 0Ch
.text$mn:000062E8                 mov     ecx, [ebp+Size]
.text$mn:000062EB                 push    ecx
.text$mn:000062EC                 mov     ecx, [ebp+var_4]
.text$mn:000062EF                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000062F4
.text$mn:000062F4 loc_62F4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:000062F4                 mov     eax, [ebp+var_4]
.text$mn:000062F7
.text$mn:000062F7 loc_62F7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:000062F7                 mov     esp, ebp
.text$mn:000062F9                 pop     ebp
.text$mn:000062FA                 retn    8
.text$mn:000062FA ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:000062FA
.text$mn:000062FA ; ---------------------------------------------------------------------------
.text$mn:000062FD                 align 10h
.text$mn:000062FD _text$mn        ends
.text$mn:000062FD
.text$mn:00006300 ; ===========================================================================
.text$mn:00006300
.text$mn:00006300 ; Segment type: Pure code
.text$mn:00006300 ; Segment permissions: Read/Execute
.text$mn:00006300 _text$mn        segment para public 'CODE' use32
.text$mn:00006300                 assume cs:_text$mn
.text$mn:00006300                 ;org 6300h
.text$mn:00006300 ; COMDAT (pick any)
.text$mn:00006300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006300
.text$mn:00006300 ; =============== S U B R O U T I N E =======================================
.text$mn:00006300
.text$mn:00006300 ; Attributes: bp-based frame
.text$mn:00006300
.text$mn:00006300 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006300                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00006300 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00006300                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+25Fp
.text$mn:00006300                                         ; WordStyleDlg::updateThemeName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+4Fp ...
.text$mn:00006300
.text$mn:00006300 var_4           = dword ptr -4
.text$mn:00006300 arg_0           = dword ptr  8
.text$mn:00006300
.text$mn:00006300                 push    ebp
.text$mn:00006301                 mov     ebp, esp
.text$mn:00006303                 push    ecx
.text$mn:00006304                 mov     [ebp+var_4], ecx
.text$mn:00006307                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000630C                 push    eax
.text$mn:0000630D                 push    0
.text$mn:0000630F                 mov     ecx, [ebp+arg_0]
.text$mn:00006312                 push    ecx
.text$mn:00006313                 mov     ecx, [ebp+var_4]
.text$mn:00006316                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000631B                 mov     esp, ebp
.text$mn:0000631D                 pop     ebp
.text$mn:0000631E                 retn    4
.text$mn:0000631E ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000631E
.text$mn:0000631E ; ---------------------------------------------------------------------------
.text$mn:00006321                 align 4
.text$mn:00006321 _text$mn        ends
.text$mn:00006321
.text$mn:00006324 ; ===========================================================================
.text$mn:00006324
.text$mn:00006324 ; Segment type: Pure code
.text$mn:00006324 ; Segment permissions: Read/Execute
.text$mn:00006324 _text$mn        segment para public 'CODE' use32
.text$mn:00006324                 assume cs:_text$mn
.text$mn:00006324                 ;org 6324h
.text$mn:00006324 ; COMDAT (pick any)
.text$mn:00006324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006324
.text$mn:00006324 ; =============== S U B R O U T I N E =======================================
.text$mn:00006324
.text$mn:00006324 ; Attributes: bp-based frame
.text$mn:00006324
.text$mn:00006324 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00006324                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00006324 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00006324                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00006324                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:00006324
.text$mn:00006324 var_8           = dword ptr -8
.text$mn:00006324 var_4           = dword ptr -4
.text$mn:00006324 arg_0           = dword ptr  8
.text$mn:00006324 arg_4           = dword ptr  0Ch
.text$mn:00006324 arg_8           = dword ptr  10h
.text$mn:00006324
.text$mn:00006324                 push    ebp
.text$mn:00006325                 mov     ebp, esp
.text$mn:00006327                 sub     esp, 8
.text$mn:0000632A                 mov     [ebp+var_4], ecx
.text$mn:0000632D                 mov     ecx, [ebp+arg_0]
.text$mn:00006330                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00006335                 cmp     eax, [ebp+arg_4]
.text$mn:00006338                 jnb     short loc_6342
.text$mn:0000633A                 mov     ecx, [ebp+var_4]
.text$mn:0000633D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006342
.text$mn:00006342 loc_6342:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00006342                 mov     ecx, [ebp+arg_0]
.text$mn:00006345                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000634A                 sub     eax, [ebp+arg_4]
.text$mn:0000634D                 mov     [ebp+var_8], eax
.text$mn:00006350                 mov     eax, [ebp+arg_8]
.text$mn:00006353                 cmp     eax, [ebp+var_8]
.text$mn:00006356                 jnb     short loc_635E
.text$mn:00006358                 mov     ecx, [ebp+arg_8]
.text$mn:0000635B                 mov     [ebp+var_8], ecx
.text$mn:0000635E
.text$mn:0000635E loc_635E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000635E                 mov     edx, [ebp+var_4]
.text$mn:00006361                 cmp     edx, [ebp+arg_0]
.text$mn:00006364                 jnz     short loc_6385
.text$mn:00006366                 mov     eax, [ebp+arg_4]
.text$mn:00006369                 add     eax, [ebp+var_8]
.text$mn:0000636C                 push    eax
.text$mn:0000636D                 mov     ecx, [ebp+var_4]
.text$mn:00006370                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00006375                 mov     ecx, [ebp+arg_4]
.text$mn:00006378                 push    ecx
.text$mn:00006379                 push    0
.text$mn:0000637B                 mov     ecx, [ebp+var_4]
.text$mn:0000637E                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00006383                 jmp     short loc_63CA
.text$mn:00006385 ; ---------------------------------------------------------------------------
.text$mn:00006385
.text$mn:00006385 loc_6385:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00006385                 push    0
.text$mn:00006387                 mov     edx, [ebp+var_8]
.text$mn:0000638A                 push    edx
.text$mn:0000638B                 mov     ecx, [ebp+var_4]
.text$mn:0000638E                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006393                 movzx   eax, al
.text$mn:00006396                 test    eax, eax
.text$mn:00006398                 jz      short loc_63CA
.text$mn:0000639A                 mov     ecx, [ebp+var_8]
.text$mn:0000639D                 push    ecx             ; int
.text$mn:0000639E                 mov     ecx, [ebp+arg_0]
.text$mn:000063A1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000063A6                 mov     edx, [ebp+arg_4]
.text$mn:000063A9                 lea     eax, [eax+edx*2]
.text$mn:000063AC                 push    eax             ; Src
.text$mn:000063AD                 mov     ecx, [ebp+var_4]
.text$mn:000063B0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000063B5                 push    eax             ; Dst
.text$mn:000063B6                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000063BB                 add     esp, 0Ch
.text$mn:000063BE                 mov     ecx, [ebp+var_8]
.text$mn:000063C1                 push    ecx
.text$mn:000063C2                 mov     ecx, [ebp+var_4]
.text$mn:000063C5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000063CA
.text$mn:000063CA loc_63CA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:000063CA                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:000063CA                 mov     eax, [ebp+var_4]
.text$mn:000063CD                 mov     esp, ebp
.text$mn:000063CF                 pop     ebp
.text$mn:000063D0                 retn    0Ch
.text$mn:000063D0 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000063D0
.text$mn:000063D0 ; ---------------------------------------------------------------------------
.text$mn:000063D3                 align 4
.text$mn:000063D3 _text$mn        ends
.text$mn:000063D3
.text$mn:000063D4 ; ===========================================================================
.text$mn:000063D4
.text$mn:000063D4 ; Segment type: Pure code
.text$mn:000063D4 ; Segment permissions: Read/Execute
.text$mn:000063D4 _text$mn        segment para public 'CODE' use32
.text$mn:000063D4                 assume cs:_text$mn
.text$mn:000063D4                 ;org 63D4h
.text$mn:000063D4 ; COMDAT (pick any)
.text$mn:000063D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063D4
.text$mn:000063D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000063D4
.text$mn:000063D4 ; Attributes: bp-based frame
.text$mn:000063D4
.text$mn:000063D4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:000063D4                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:000063D4 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:000063D4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:000063D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:000063D4
.text$mn:000063D4 var_4           = dword ptr -4
.text$mn:000063D4 Str             = dword ptr  8
.text$mn:000063D4
.text$mn:000063D4                 push    ebp
.text$mn:000063D5                 mov     ebp, esp
.text$mn:000063D7                 push    ecx
.text$mn:000063D8                 mov     [ebp+var_4], ecx
.text$mn:000063DB                 push    490h            ; unsigned int
.text$mn:000063E0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000063E5                 mov     eax, [ebp+Str]
.text$mn:000063E8                 push    eax             ; int
.text$mn:000063E9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000063EE                 add     esp, 0Ch
.text$mn:000063F1                 mov     ecx, [ebp+Str]
.text$mn:000063F4                 push    ecx             ; Str
.text$mn:000063F5                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000063FA                 add     esp, 4
.text$mn:000063FD                 push    eax             ; int
.text$mn:000063FE                 mov     edx, [ebp+Str]
.text$mn:00006401                 push    edx             ; Src
.text$mn:00006402                 mov     ecx, [ebp+var_4]
.text$mn:00006405                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000640A                 mov     esp, ebp
.text$mn:0000640C                 pop     ebp
.text$mn:0000640D                 retn    4
.text$mn:0000640D ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000640D
.text$mn:0000640D _text$mn        ends
.text$mn:0000640D
.text$mn:00006410 ; ===========================================================================
.text$mn:00006410
.text$mn:00006410 ; Segment type: Pure code
.text$mn:00006410 ; Segment permissions: Read/Execute
.text$mn:00006410 _text$mn        segment para public 'CODE' use32
.text$mn:00006410                 assume cs:_text$mn
.text$mn:00006410                 ;org 6410h
.text$mn:00006410 ; COMDAT (pick any)
.text$mn:00006410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006410
.text$mn:00006410 ; =============== S U B R O U T I N E =======================================
.text$mn:00006410
.text$mn:00006410 ; Attributes: bp-based frame
.text$mn:00006410
.text$mn:00006410 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00006410                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00006410 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00006410                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00006410
.text$mn:00006410 var_4           = dword ptr -4
.text$mn:00006410 Src             = dword ptr  8
.text$mn:00006410 arg_4           = dword ptr  0Ch
.text$mn:00006410
.text$mn:00006410                 push    ebp
.text$mn:00006411                 mov     ebp, esp
.text$mn:00006413                 push    ecx
.text$mn:00006414                 mov     [ebp+var_4], ecx
.text$mn:00006417                 cmp     [ebp+arg_4], 0
.text$mn:0000641B                 jz      short loc_6433
.text$mn:0000641D                 push    47Fh            ; unsigned int
.text$mn:00006422                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006427                 mov     eax, [ebp+Src]
.text$mn:0000642A                 push    eax             ; int
.text$mn:0000642B                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006430                 add     esp, 0Ch
.text$mn:00006433
.text$mn:00006433 loc_6433:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00006433                 mov     ecx, [ebp+Src]
.text$mn:00006436                 push    ecx
.text$mn:00006437                 mov     ecx, [ebp+var_4]
.text$mn:0000643A                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000643F                 movzx   edx, al
.text$mn:00006442                 test    edx, edx
.text$mn:00006444                 jz      short loc_6468
.text$mn:00006446                 mov     eax, [ebp+arg_4]
.text$mn:00006449                 push    eax
.text$mn:0000644A                 mov     ecx, [ebp+var_4]
.text$mn:0000644D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006452                 mov     ecx, [ebp+Src]
.text$mn:00006455                 sub     ecx, eax
.text$mn:00006457                 sar     ecx, 1
.text$mn:00006459                 push    ecx
.text$mn:0000645A                 mov     edx, [ebp+var_4]
.text$mn:0000645D                 push    edx
.text$mn:0000645E                 mov     ecx, [ebp+var_4]
.text$mn:00006461                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006466                 jmp     short loc_64A5
.text$mn:00006468 ; ---------------------------------------------------------------------------
.text$mn:00006468
.text$mn:00006468 loc_6468:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00006468                 push    0
.text$mn:0000646A                 mov     eax, [ebp+arg_4]
.text$mn:0000646D                 push    eax
.text$mn:0000646E                 mov     ecx, [ebp+var_4]
.text$mn:00006471                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006476                 movzx   ecx, al
.text$mn:00006479                 test    ecx, ecx
.text$mn:0000647B                 jz      short loc_64A2
.text$mn:0000647D                 mov     edx, [ebp+arg_4]
.text$mn:00006480                 push    edx             ; int
.text$mn:00006481                 mov     eax, [ebp+Src]
.text$mn:00006484                 push    eax             ; Src
.text$mn:00006485                 mov     ecx, [ebp+var_4]
.text$mn:00006488                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000648D                 push    eax             ; Dst
.text$mn:0000648E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006493                 add     esp, 0Ch
.text$mn:00006496                 mov     ecx, [ebp+arg_4]
.text$mn:00006499                 push    ecx
.text$mn:0000649A                 mov     ecx, [ebp+var_4]
.text$mn:0000649D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000064A2
.text$mn:000064A2 loc_64A2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:000064A2                 mov     eax, [ebp+var_4]
.text$mn:000064A5
.text$mn:000064A5 loc_64A5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:000064A5                 mov     esp, ebp
.text$mn:000064A7                 pop     ebp
.text$mn:000064A8                 retn    8
.text$mn:000064A8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:000064A8
.text$mn:000064A8 ; ---------------------------------------------------------------------------
.text$mn:000064AB                 align 4
.text$mn:000064AB _text$mn        ends
.text$mn:000064AB
.text$mn:000064AC ; ===========================================================================
.text$mn:000064AC
.text$mn:000064AC ; Segment type: Pure code
.text$mn:000064AC ; Segment permissions: Read/Execute
.text$mn:000064AC _text$mn        segment para public 'CODE' use32
.text$mn:000064AC                 assume cs:_text$mn
.text$mn:000064AC                 ;org 64ACh
.text$mn:000064AC ; COMDAT (pick any)
.text$mn:000064AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064AC
.text$mn:000064AC ; =============== S U B R O U T I N E =======================================
.text$mn:000064AC
.text$mn:000064AC ; Attributes: bp-based frame
.text$mn:000064AC
.text$mn:000064AC ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:000064AC                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:000064AC ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:000064AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:000064AC
.text$mn:000064AC arg_0           = dword ptr  8
.text$mn:000064AC arg_4           = dword ptr  0Ch
.text$mn:000064AC
.text$mn:000064AC                 push    ebp
.text$mn:000064AD                 mov     ebp, esp
.text$mn:000064AF                 mov     eax, [ebp+arg_0]
.text$mn:000064B2                 mov     ecx, [ebp+arg_4]
.text$mn:000064B5                 mov     dl, [ecx]
.text$mn:000064B7                 mov     [eax], dl
.text$mn:000064B9                 pop     ebp
.text$mn:000064BA                 retn
.text$mn:000064BA ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:000064BA
.text$mn:000064BA ; ---------------------------------------------------------------------------
.text$mn:000064BB                 align 4
.text$mn:000064BB _text$mn        ends
.text$mn:000064BB
.text$mn:000064BC ; ===========================================================================
.text$mn:000064BC
.text$mn:000064BC ; Segment type: Pure code
.text$mn:000064BC ; Segment permissions: Read/Execute
.text$mn:000064BC _text$mn        segment para public 'CODE' use32
.text$mn:000064BC                 assume cs:_text$mn
.text$mn:000064BC                 ;org 64BCh
.text$mn:000064BC ; COMDAT (pick any)
.text$mn:000064BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064BC
.text$mn:000064BC ; =============== S U B R O U T I N E =======================================
.text$mn:000064BC
.text$mn:000064BC ; Attributes: bp-based frame
.text$mn:000064BC
.text$mn:000064BC ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:000064BC                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:000064BC ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:000064BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:000064BC
.text$mn:000064BC arg_0           = dword ptr  8
.text$mn:000064BC arg_4           = dword ptr  0Ch
.text$mn:000064BC
.text$mn:000064BC                 push    ebp
.text$mn:000064BD                 mov     ebp, esp
.text$mn:000064BF                 mov     eax, [ebp+arg_0]
.text$mn:000064C2                 mov     ecx, [ebp+arg_4]
.text$mn:000064C5                 mov     dx, [ecx]
.text$mn:000064C8                 mov     [eax], dx
.text$mn:000064CB                 pop     ebp
.text$mn:000064CC                 retn
.text$mn:000064CC ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:000064CC
.text$mn:000064CC ; ---------------------------------------------------------------------------
.text$mn:000064CD                 align 10h
.text$mn:000064CD _text$mn        ends
.text$mn:000064CD
.text$mn:000064D0 ; ===========================================================================
.text$mn:000064D0
.text$mn:000064D0 ; Segment type: Pure code
.text$mn:000064D0 ; Segment permissions: Read/Execute
.text$mn:000064D0 _text$mn        segment para public 'CODE' use32
.text$mn:000064D0                 assume cs:_text$mn
.text$mn:000064D0                 ;org 64D0h
.text$mn:000064D0 ; COMDAT (pick any)
.text$mn:000064D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064D0
.text$mn:000064D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000064D0
.text$mn:000064D0 ; Attributes: bp-based frame
.text$mn:000064D0
.text$mn:000064D0 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:000064D0                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:000064D0 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:000064D0                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+206p
.text$mn:000064D0                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+336p ...
.text$mn:000064D0
.text$mn:000064D0 var_4           = dword ptr -4
.text$mn:000064D0
.text$mn:000064D0                 push    ebp
.text$mn:000064D1                 mov     ebp, esp
.text$mn:000064D3                 push    ecx
.text$mn:000064D4                 mov     [ebp+var_4], ecx
.text$mn:000064D7                 mov     ecx, [ebp+var_4]
.text$mn:000064DA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000064DF                 mov     esp, ebp
.text$mn:000064E1                 pop     ebp
.text$mn:000064E2                 retn
.text$mn:000064E2 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:000064E2
.text$mn:000064E2 ; ---------------------------------------------------------------------------
.text$mn:000064E3                 align 4
.text$mn:000064E3 _text$mn        ends
.text$mn:000064E3
.text$mn:000064E4 ; ===========================================================================
.text$mn:000064E4
.text$mn:000064E4 ; Segment type: Pure code
.text$mn:000064E4 ; Segment permissions: Read/Execute
.text$mn:000064E4 _text$mn        segment para public 'CODE' use32
.text$mn:000064E4                 assume cs:_text$mn
.text$mn:000064E4                 ;org 64E4h
.text$mn:000064E4 ; COMDAT (pick any)
.text$mn:000064E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064E4
.text$mn:000064E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064E4
.text$mn:000064E4 ; Attributes: bp-based frame
.text$mn:000064E4
.text$mn:000064E4 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:000064E4                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:000064E4 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:000064E4                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:000064E4
.text$mn:000064E4 var_4           = dword ptr -4
.text$mn:000064E4
.text$mn:000064E4                 push    ebp
.text$mn:000064E5                 mov     ebp, esp
.text$mn:000064E7                 push    ecx
.text$mn:000064E8                 mov     [ebp+var_4], ecx
.text$mn:000064EB                 mov     eax, [ebp+var_4]
.text$mn:000064EE                 mov     eax, [eax+4]
.text$mn:000064F1                 mov     esp, ebp
.text$mn:000064F3                 pop     ebp
.text$mn:000064F4                 retn
.text$mn:000064F4 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:000064F4
.text$mn:000064F4 ; ---------------------------------------------------------------------------
.text$mn:000064F5                 align 4
.text$mn:000064F5 _text$mn        ends
.text$mn:000064F5
.text$mn:000064F8 ; ===========================================================================
.text$mn:000064F8
.text$mn:000064F8 ; Segment type: Pure code
.text$mn:000064F8 ; Segment permissions: Read/Execute
.text$mn:000064F8 _text$mn        segment para public 'CODE' use32
.text$mn:000064F8                 assume cs:_text$mn
.text$mn:000064F8                 ;org 64F8h
.text$mn:000064F8 ; COMDAT (pick any)
.text$mn:000064F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064F8
.text$mn:000064F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000064F8
.text$mn:000064F8 ; Attributes: bp-based frame
.text$mn:000064F8
.text$mn:000064F8 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:000064F8                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:000064F8 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:000064F8                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:000064F8                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:000064F8
.text$mn:000064F8 var_4           = dword ptr -4
.text$mn:000064F8
.text$mn:000064F8                 push    ebp
.text$mn:000064F9                 mov     ebp, esp
.text$mn:000064FB                 push    ecx
.text$mn:000064FC                 mov     [ebp+var_4], ecx
.text$mn:000064FF                 mov     eax, [ebp+var_4]
.text$mn:00006502                 mov     eax, [eax+4]
.text$mn:00006505                 mov     esp, ebp
.text$mn:00006507                 pop     ebp
.text$mn:00006508                 retn
.text$mn:00006508 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00006508
.text$mn:00006508 ; ---------------------------------------------------------------------------
.text$mn:00006509                 align 4
.text$mn:00006509 _text$mn        ends
.text$mn:00006509
.text$mn:0000650C ; ===========================================================================
.text$mn:0000650C
.text$mn:0000650C ; Segment type: Pure code
.text$mn:0000650C ; Segment permissions: Read/Execute
.text$mn:0000650C _text$mn        segment para public 'CODE' use32
.text$mn:0000650C                 assume cs:_text$mn
.text$mn:0000650C                 ;org 650Ch
.text$mn:0000650C ; COMDAT (pick any)
.text$mn:0000650C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000650C
.text$mn:0000650C ; =============== S U B R O U T I N E =======================================
.text$mn:0000650C
.text$mn:0000650C ; Attributes: bp-based frame
.text$mn:0000650C
.text$mn:0000650C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::clear(void)
.text$mn:0000650C                 public ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
.text$mn:0000650C ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ proc near
.text$mn:0000650C                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+7Bp
.text$mn:0000650C
.text$mn:0000650C var_4           = dword ptr -4
.text$mn:0000650C
.text$mn:0000650C                 push    ebp
.text$mn:0000650D                 mov     ebp, esp
.text$mn:0000650F                 push    ecx
.text$mn:00006510                 mov     [ebp+var_4], ecx
.text$mn:00006513                 push    0
.text$mn:00006515                 mov     ecx, [ebp+var_4]
.text$mn:00006518                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000651D                 mov     esp, ebp
.text$mn:0000651F                 pop     ebp
.text$mn:00006520                 retn
.text$mn:00006520 ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ endp
.text$mn:00006520
.text$mn:00006520 ; ---------------------------------------------------------------------------
.text$mn:00006521                 align 4
.text$mn:00006521 _text$mn        ends
.text$mn:00006521
.text$mn:00006524 ; ===========================================================================
.text$mn:00006524
.text$mn:00006524 ; Segment type: Pure code
.text$mn:00006524 ; Segment permissions: Read/Execute
.text$mn:00006524 _text$mn        segment para public 'CODE' use32
.text$mn:00006524                 assume cs:_text$mn
.text$mn:00006524                 ;org 6524h
.text$mn:00006524 ; COMDAT (pick any)
.text$mn:00006524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006524
.text$mn:00006524 ; =============== S U B R O U T I N E =======================================
.text$mn:00006524
.text$mn:00006524 ; Attributes: bp-based frame
.text$mn:00006524
.text$mn:00006524 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:00006524                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:00006524 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:00006524                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+23Ap
.text$mn:00006524
.text$mn:00006524 var_4           = dword ptr -4
.text$mn:00006524 arg_0           = dword ptr  8
.text$mn:00006524
.text$mn:00006524                 push    ebp
.text$mn:00006525                 mov     ebp, esp
.text$mn:00006527                 push    ecx
.text$mn:00006528                 mov     [ebp+var_4], ecx
.text$mn:0000652B                 mov     ecx, [ebp+arg_0]
.text$mn:0000652E                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00006533                 push    eax
.text$mn:00006534                 mov     ecx, [ebp+arg_0]
.text$mn:00006537                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000653C                 push    eax
.text$mn:0000653D                 mov     eax, [ebp+var_4]
.text$mn:00006540                 mov     ecx, [eax+14h]
.text$mn:00006543                 push    ecx
.text$mn:00006544                 push    0
.text$mn:00006546                 mov     ecx, [ebp+var_4]
.text$mn:00006549                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000654E                 mov     esp, ebp
.text$mn:00006550                 pop     ebp
.text$mn:00006551                 retn    4
.text$mn:00006551 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:00006551
.text$mn:00006551 _text$mn        ends
.text$mn:00006551
.text$mn:00006554 ; ===========================================================================
.text$mn:00006554
.text$mn:00006554 ; Segment type: Pure code
.text$mn:00006554 ; Segment permissions: Read/Execute
.text$mn:00006554 _text$mn        segment para public 'CODE' use32
.text$mn:00006554                 assume cs:_text$mn
.text$mn:00006554                 ;org 6554h
.text$mn:00006554 ; COMDAT (pick any)
.text$mn:00006554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006554
.text$mn:00006554 ; =============== S U B R O U T I N E =======================================
.text$mn:00006554
.text$mn:00006554 ; Attributes: bp-based frame
.text$mn:00006554
.text$mn:00006554 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:00006554                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:00006554 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:00006554                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:00006554                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:00006554
.text$mn:00006554 var_18          = dword ptr -18h
.text$mn:00006554 var_14          = dword ptr -14h
.text$mn:00006554 var_10          = dword ptr -10h
.text$mn:00006554 var_C           = dword ptr -0Ch
.text$mn:00006554 var_8           = dword ptr -8
.text$mn:00006554 var_4           = dword ptr -4
.text$mn:00006554 arg_0           = dword ptr  8
.text$mn:00006554 arg_4           = dword ptr  0Ch
.text$mn:00006554 arg_8           = dword ptr  10h
.text$mn:00006554 arg_C           = dword ptr  14h
.text$mn:00006554
.text$mn:00006554                 push    ebp
.text$mn:00006555                 mov     ebp, esp
.text$mn:00006557                 sub     esp, 18h
.text$mn:0000655A                 mov     [ebp+var_4], ecx
.text$mn:0000655D                 cmp     [ebp+arg_C], 0
.text$mn:00006561                 jz      short loc_6579
.text$mn:00006563                 push    87Dh            ; unsigned int
.text$mn:00006568                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000656D                 mov     eax, [ebp+arg_8]
.text$mn:00006570                 push    eax             ; int
.text$mn:00006571                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006576                 add     esp, 0Ch
.text$mn:00006579
.text$mn:00006579 loc_6579:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:00006579                 mov     ecx, [ebp+var_4]
.text$mn:0000657C                 mov     edx, [ecx+14h]
.text$mn:0000657F                 cmp     edx, [ebp+arg_0]
.text$mn:00006582                 jnb     short loc_658C
.text$mn:00006584                 mov     ecx, [ebp+var_4]
.text$mn:00006587                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000658C
.text$mn:0000658C loc_658C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:0000658C                 mov     eax, [ebp+var_4]
.text$mn:0000658F                 mov     ecx, [eax+14h]
.text$mn:00006592                 sub     ecx, [ebp+arg_0]
.text$mn:00006595                 cmp     ecx, [ebp+arg_4]
.text$mn:00006598                 jnb     short loc_65A6
.text$mn:0000659A                 mov     edx, [ebp+var_4]
.text$mn:0000659D                 mov     eax, [edx+14h]
.text$mn:000065A0                 sub     eax, [ebp+arg_0]
.text$mn:000065A3                 mov     [ebp+arg_4], eax
.text$mn:000065A6
.text$mn:000065A6 loc_65A6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:000065A6                 mov     ecx, [ebp+arg_4]
.text$mn:000065A9                 cmp     ecx, [ebp+arg_C]
.text$mn:000065AC                 jnb     short loc_65B6
.text$mn:000065AE                 mov     edx, [ebp+arg_4]
.text$mn:000065B1                 mov     [ebp+var_8], edx
.text$mn:000065B4                 jmp     short loc_65BC
.text$mn:000065B6 ; ---------------------------------------------------------------------------
.text$mn:000065B6
.text$mn:000065B6 loc_65B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:000065B6                 mov     eax, [ebp+arg_C]
.text$mn:000065B9                 mov     [ebp+var_8], eax
.text$mn:000065BC
.text$mn:000065BC loc_65BC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:000065BC                 mov     ecx, [ebp+var_8]
.text$mn:000065BF                 push    ecx
.text$mn:000065C0                 mov     edx, [ebp+arg_8]
.text$mn:000065C3                 push    edx
.text$mn:000065C4                 mov     ecx, [ebp+var_4]
.text$mn:000065C7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000065CC                 mov     ecx, [ebp+arg_0]
.text$mn:000065CF                 lea     edx, [eax+ecx*2]
.text$mn:000065D2                 push    edx
.text$mn:000065D3                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:000065D8                 add     esp, 0Ch
.text$mn:000065DB                 mov     [ebp+var_C], eax
.text$mn:000065DE                 cmp     [ebp+var_C], 0
.text$mn:000065E2                 jz      short loc_65EC
.text$mn:000065E4                 mov     eax, [ebp+var_C]
.text$mn:000065E7                 mov     [ebp+var_18], eax
.text$mn:000065EA                 jmp     short loc_6621
.text$mn:000065EC ; ---------------------------------------------------------------------------
.text$mn:000065EC
.text$mn:000065EC loc_65EC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:000065EC                 mov     ecx, [ebp+arg_4]
.text$mn:000065EF                 cmp     ecx, [ebp+arg_C]
.text$mn:000065F2                 jnb     short loc_65FD
.text$mn:000065F4                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:000065FB                 jmp     short loc_661B
.text$mn:000065FD ; ---------------------------------------------------------------------------
.text$mn:000065FD
.text$mn:000065FD loc_65FD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:000065FD                 mov     edx, [ebp+arg_4]
.text$mn:00006600                 cmp     edx, [ebp+arg_C]
.text$mn:00006603                 jnz     short loc_660E
.text$mn:00006605                 mov     [ebp+var_10], 0
.text$mn:0000660C                 jmp     short loc_6615
.text$mn:0000660E ; ---------------------------------------------------------------------------
.text$mn:0000660E
.text$mn:0000660E loc_660E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000660E                 mov     [ebp+var_10], 1
.text$mn:00006615
.text$mn:00006615 loc_6615:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:00006615                 mov     eax, [ebp+var_10]
.text$mn:00006618                 mov     [ebp+var_14], eax
.text$mn:0000661B
.text$mn:0000661B loc_661B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000661B                 mov     ecx, [ebp+var_14]
.text$mn:0000661E                 mov     [ebp+var_18], ecx
.text$mn:00006621
.text$mn:00006621 loc_6621:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:00006621                 mov     eax, [ebp+var_18]
.text$mn:00006624                 mov     esp, ebp
.text$mn:00006626                 pop     ebp
.text$mn:00006627                 retn    10h
.text$mn:00006627 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:00006627
.text$mn:00006627 ; ---------------------------------------------------------------------------
.text$mn:0000662A                 align 4
.text$mn:0000662A _text$mn        ends
.text$mn:0000662A
.text$mn:0000662C ; ===========================================================================
.text$mn:0000662C
.text$mn:0000662C ; Segment type: Pure code
.text$mn:0000662C ; Segment permissions: Read/Execute
.text$mn:0000662C _text$mn        segment para public 'CODE' use32
.text$mn:0000662C                 assume cs:_text$mn
.text$mn:0000662C                 ;org 662Ch
.text$mn:0000662C ; COMDAT (pick any)
.text$mn:0000662C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000662C
.text$mn:0000662C ; =============== S U B R O U T I N E =======================================
.text$mn:0000662C
.text$mn:0000662C ; Attributes: bp-based frame
.text$mn:0000662C
.text$mn:0000662C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:0000662C                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:0000662C ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:0000662C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+26Cp
.text$mn:0000662C                                         ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:0000662C
.text$mn:0000662C var_4           = dword ptr -4
.text$mn:0000662C Str             = dword ptr  8
.text$mn:0000662C
.text$mn:0000662C                 push    ebp
.text$mn:0000662D                 mov     ebp, esp
.text$mn:0000662F                 push    ecx
.text$mn:00006630                 mov     [ebp+var_4], ecx
.text$mn:00006633                 push    86Eh            ; unsigned int
.text$mn:00006638                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000663D                 mov     eax, [ebp+Str]
.text$mn:00006640                 push    eax             ; int
.text$mn:00006641                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006646                 add     esp, 0Ch
.text$mn:00006649                 mov     ecx, [ebp+Str]
.text$mn:0000664C                 push    ecx             ; Str
.text$mn:0000664D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00006652                 add     esp, 4
.text$mn:00006655                 push    eax
.text$mn:00006656                 mov     edx, [ebp+Str]
.text$mn:00006659                 push    edx
.text$mn:0000665A                 mov     eax, [ebp+var_4]
.text$mn:0000665D                 mov     ecx, [eax+14h]
.text$mn:00006660                 push    ecx
.text$mn:00006661                 push    0
.text$mn:00006663                 mov     ecx, [ebp+var_4]
.text$mn:00006666                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000666B                 mov     esp, ebp
.text$mn:0000666D                 pop     ebp
.text$mn:0000666E                 retn    4
.text$mn:0000666E ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:0000666E
.text$mn:0000666E ; ---------------------------------------------------------------------------
.text$mn:00006671                 align 4
.text$mn:00006671 _text$mn        ends
.text$mn:00006671
.text$mn:00006674 ; ===========================================================================
.text$mn:00006674
.text$mn:00006674 ; Segment type: Pure code
.text$mn:00006674 ; Segment permissions: Read/Execute
.text$mn:00006674 _text$mn        segment para public 'CODE' use32
.text$mn:00006674                 assume cs:_text$mn
.text$mn:00006674                 ;org 6674h
.text$mn:00006674 ; COMDAT (pick any)
.text$mn:00006674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006674
.text$mn:00006674 ; =============== S U B R O U T I N E =======================================
.text$mn:00006674
.text$mn:00006674 ; Attributes: bp-based frame
.text$mn:00006674
.text$mn:00006674 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:00006674                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:00006674 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:00006674                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:00006674
.text$mn:00006674 var_4           = dword ptr -4
.text$mn:00006674 arg_0           = dword ptr  8
.text$mn:00006674 arg_4           = dword ptr  0Ch
.text$mn:00006674 arg_8           = dword ptr  10h
.text$mn:00006674
.text$mn:00006674                 push    ebp
.text$mn:00006675                 mov     ebp, esp
.text$mn:00006677                 push    ecx
.text$mn:00006678                 cmp     [ebp+arg_8], 0
.text$mn:0000667C                 jnz     short loc_6687
.text$mn:0000667E                 mov     [ebp+var_4], 0
.text$mn:00006685                 jmp     short loc_669E
.text$mn:00006687 ; ---------------------------------------------------------------------------
.text$mn:00006687
.text$mn:00006687 loc_6687:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:00006687                 mov     eax, [ebp+arg_8]
.text$mn:0000668A                 push    eax
.text$mn:0000668B                 mov     ecx, [ebp+arg_4]
.text$mn:0000668E                 push    ecx
.text$mn:0000668F                 mov     edx, [ebp+arg_0]
.text$mn:00006692                 push    edx
.text$mn:00006693                 call    _wmemcmp
.text$mn:00006698                 add     esp, 0Ch
.text$mn:0000669B                 mov     [ebp+var_4], eax
.text$mn:0000669E
.text$mn:0000669E loc_669E:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000669E                 mov     eax, [ebp+var_4]
.text$mn:000066A1                 mov     esp, ebp
.text$mn:000066A3                 pop     ebp
.text$mn:000066A4                 retn
.text$mn:000066A4 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:000066A4
.text$mn:000066A4 ; ---------------------------------------------------------------------------
.text$mn:000066A5                 align 4
.text$mn:000066A5 _text$mn        ends
.text$mn:000066A5
.text$mn:000066A8 ; ===========================================================================
.text$mn:000066A8
.text$mn:000066A8 ; Segment type: Pure code
.text$mn:000066A8 ; Segment permissions: Read/Execute
.text$mn:000066A8 _text$mn        segment para public 'CODE' use32
.text$mn:000066A8                 assume cs:_text$mn
.text$mn:000066A8                 ;org 66A8h
.text$mn:000066A8 ; COMDAT (pick any)
.text$mn:000066A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066A8
.text$mn:000066A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066A8
.text$mn:000066A8 ; Attributes: bp-based frame
.text$mn:000066A8
.text$mn:000066A8 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:000066A8                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000066A8 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:000066A8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:000066A8
.text$mn:000066A8 var_4           = dword ptr -4
.text$mn:000066A8 Dst             = dword ptr  8
.text$mn:000066A8 Src             = dword ptr  0Ch
.text$mn:000066A8 Size            = dword ptr  10h
.text$mn:000066A8
.text$mn:000066A8                 push    ebp
.text$mn:000066A9                 mov     ebp, esp
.text$mn:000066AB                 push    ecx
.text$mn:000066AC                 cmp     [ebp+Size], 0
.text$mn:000066B0                 jnz     short loc_66BA
.text$mn:000066B2                 mov     eax, [ebp+Dst]
.text$mn:000066B5                 mov     [ebp+var_4], eax
.text$mn:000066B8                 jmp     short loc_66D1
.text$mn:000066BA ; ---------------------------------------------------------------------------
.text$mn:000066BA
.text$mn:000066BA loc_66BA:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:000066BA                 mov     ecx, [ebp+Size]
.text$mn:000066BD                 push    ecx             ; Size
.text$mn:000066BE                 mov     edx, [ebp+Src]
.text$mn:000066C1                 push    edx             ; Src
.text$mn:000066C2                 mov     eax, [ebp+Dst]
.text$mn:000066C5                 push    eax             ; Dst
.text$mn:000066C6                 call    _memcpy
.text$mn:000066CB                 add     esp, 0Ch
.text$mn:000066CE                 mov     [ebp+var_4], eax
.text$mn:000066D1
.text$mn:000066D1 loc_66D1:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:000066D1                 mov     eax, [ebp+var_4]
.text$mn:000066D4                 mov     esp, ebp
.text$mn:000066D6                 pop     ebp
.text$mn:000066D7                 retn
.text$mn:000066D7 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000066D7
.text$mn:000066D7 _text$mn        ends
.text$mn:000066D7
.text$mn:000066D8 ; ===========================================================================
.text$mn:000066D8
.text$mn:000066D8 ; Segment type: Pure code
.text$mn:000066D8 ; Segment permissions: Read/Execute
.text$mn:000066D8 _text$mn        segment para public 'CODE' use32
.text$mn:000066D8                 assume cs:_text$mn
.text$mn:000066D8                 ;org 66D8h
.text$mn:000066D8 ; COMDAT (pick any)
.text$mn:000066D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066D8
.text$mn:000066D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066D8
.text$mn:000066D8 ; Attributes: bp-based frame
.text$mn:000066D8
.text$mn:000066D8 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:000066D8                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:000066D8 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:000066D8                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:000066D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:000066D8
.text$mn:000066D8 var_4           = dword ptr -4
.text$mn:000066D8 Dst             = dword ptr  8
.text$mn:000066D8 Src             = dword ptr  0Ch
.text$mn:000066D8 arg_8           = dword ptr  10h
.text$mn:000066D8
.text$mn:000066D8                 push    ebp
.text$mn:000066D9                 mov     ebp, esp
.text$mn:000066DB                 push    ecx
.text$mn:000066DC                 cmp     [ebp+arg_8], 0
.text$mn:000066E0                 jnz     short loc_66EA
.text$mn:000066E2                 mov     eax, [ebp+Dst]
.text$mn:000066E5                 mov     [ebp+var_4], eax
.text$mn:000066E8                 jmp     short loc_6701
.text$mn:000066EA ; ---------------------------------------------------------------------------
.text$mn:000066EA
.text$mn:000066EA loc_66EA:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:000066EA                 mov     ecx, [ebp+arg_8]
.text$mn:000066ED                 push    ecx             ; int
.text$mn:000066EE                 mov     edx, [ebp+Src]
.text$mn:000066F1                 push    edx             ; Src
.text$mn:000066F2                 mov     eax, [ebp+Dst]
.text$mn:000066F5                 push    eax             ; Dst
.text$mn:000066F6                 call    _wmemcpy
.text$mn:000066FB                 add     esp, 0Ch
.text$mn:000066FE                 mov     [ebp+var_4], eax
.text$mn:00006701
.text$mn:00006701 loc_6701:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00006701                 mov     eax, [ebp+var_4]
.text$mn:00006704                 mov     esp, ebp
.text$mn:00006706                 pop     ebp
.text$mn:00006707                 retn
.text$mn:00006707 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00006707
.text$mn:00006707 _text$mn        ends
.text$mn:00006707
.text$mn:00006708 ; ===========================================================================
.text$mn:00006708
.text$mn:00006708 ; Segment type: Pure code
.text$mn:00006708 ; Segment permissions: Read/Execute
.text$mn:00006708 _text$mn        segment para public 'CODE' use32
.text$mn:00006708                 assume cs:_text$mn
.text$mn:00006708                 ;org 6708h
.text$mn:00006708 ; COMDAT (pick any)
.text$mn:00006708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006708
.text$mn:00006708 ; =============== S U B R O U T I N E =======================================
.text$mn:00006708
.text$mn:00006708 ; Attributes: bp-based frame
.text$mn:00006708
.text$mn:00006708 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00006708                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00006708 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00006708                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00006708
.text$mn:00006708 var_4           = dword ptr -4
.text$mn:00006708 arg_0           = dword ptr  8
.text$mn:00006708 arg_4           = dword ptr  0Ch
.text$mn:00006708
.text$mn:00006708                 push    ebp
.text$mn:00006709                 mov     ebp, esp
.text$mn:0000670B                 push    ecx
.text$mn:0000670C                 mov     [ebp+var_4], ecx
.text$mn:0000670F                 mov     eax, [ebp+arg_4]
.text$mn:00006712                 push    eax             ; int
.text$mn:00006713                 mov     ecx, [ebp+arg_0]
.text$mn:00006716                 push    ecx             ; void *
.text$mn:00006717                 mov     ecx, [ebp+var_4]
.text$mn:0000671A                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000671F                 mov     esp, ebp
.text$mn:00006721                 pop     ebp
.text$mn:00006722                 retn    8
.text$mn:00006722 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00006722
.text$mn:00006722 ; ---------------------------------------------------------------------------
.text$mn:00006725                 align 4
.text$mn:00006725 _text$mn        ends
.text$mn:00006725
.text$mn:00006728 ; ===========================================================================
.text$mn:00006728
.text$mn:00006728 ; Segment type: Pure code
.text$mn:00006728 ; Segment permissions: Read/Execute
.text$mn:00006728 _text$mn        segment para public 'CODE' use32
.text$mn:00006728                 assume cs:_text$mn
.text$mn:00006728                 ;org 6728h
.text$mn:00006728 ; COMDAT (pick any)
.text$mn:00006728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006728
.text$mn:00006728 ; =============== S U B R O U T I N E =======================================
.text$mn:00006728
.text$mn:00006728 ; Attributes: bp-based frame
.text$mn:00006728
.text$mn:00006728 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00006728                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00006728 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00006728                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00006728
.text$mn:00006728 var_4           = dword ptr -4
.text$mn:00006728 arg_0           = dword ptr  8
.text$mn:00006728 arg_4           = dword ptr  0Ch
.text$mn:00006728
.text$mn:00006728                 push    ebp
.text$mn:00006729                 mov     ebp, esp
.text$mn:0000672B                 push    ecx
.text$mn:0000672C                 mov     [ebp+var_4], ecx
.text$mn:0000672F                 mov     eax, [ebp+arg_4]
.text$mn:00006732                 push    eax             ; int
.text$mn:00006733                 mov     ecx, [ebp+arg_0]
.text$mn:00006736                 push    ecx             ; void *
.text$mn:00006737                 mov     ecx, [ebp+var_4]
.text$mn:0000673A                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000673F                 mov     esp, ebp
.text$mn:00006741                 pop     ebp
.text$mn:00006742                 retn    8
.text$mn:00006742 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00006742
.text$mn:00006742 ; ---------------------------------------------------------------------------
.text$mn:00006745                 align 4
.text$mn:00006745 _text$mn        ends
.text$mn:00006745
.text$mn:00006748 ; ===========================================================================
.text$mn:00006748
.text$mn:00006748 ; Segment type: Pure code
.text$mn:00006748 ; Segment permissions: Read/Execute
.text$mn:00006748 _text$mn        segment para public 'CODE' use32
.text$mn:00006748                 assume cs:_text$mn
.text$mn:00006748                 ;org 6748h
.text$mn:00006748 ; COMDAT (pick any)
.text$mn:00006748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006748
.text$mn:00006748 ; =============== S U B R O U T I N E =======================================
.text$mn:00006748
.text$mn:00006748 ; Attributes: bp-based frame
.text$mn:00006748
.text$mn:00006748 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00006748                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00006748 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00006748                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00006748
.text$mn:00006748 var_4           = dword ptr -4
.text$mn:00006748 arg_0           = dword ptr  8
.text$mn:00006748
.text$mn:00006748                 push    ebp
.text$mn:00006749                 mov     ebp, esp
.text$mn:0000674B                 push    ecx
.text$mn:0000674C                 mov     [ebp+var_4], ecx
.text$mn:0000674F                 mov     eax, [ebp+arg_0]
.text$mn:00006752                 push    eax             ; void *
.text$mn:00006753                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00006758                 add     esp, 4
.text$mn:0000675B                 mov     esp, ebp
.text$mn:0000675D                 pop     ebp
.text$mn:0000675E                 retn    8
.text$mn:0000675E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000675E
.text$mn:0000675E ; ---------------------------------------------------------------------------
.text$mn:00006761                 align 4
.text$mn:00006761 _text$mn        ends
.text$mn:00006761
.text$mn:00006764 ; ===========================================================================
.text$mn:00006764
.text$mn:00006764 ; Segment type: Pure code
.text$mn:00006764 ; Segment permissions: Read/Execute
.text$mn:00006764 _text$mn        segment para public 'CODE' use32
.text$mn:00006764                 assume cs:_text$mn
.text$mn:00006764                 ;org 6764h
.text$mn:00006764 ; COMDAT (pick any)
.text$mn:00006764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006764
.text$mn:00006764 ; =============== S U B R O U T I N E =======================================
.text$mn:00006764
.text$mn:00006764 ; Attributes: bp-based frame
.text$mn:00006764
.text$mn:00006764 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00006764                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00006764 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00006764                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00006764                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:00006764
.text$mn:00006764 var_4           = dword ptr -4
.text$mn:00006764 arg_0           = dword ptr  8
.text$mn:00006764
.text$mn:00006764                 push    ebp
.text$mn:00006765                 mov     ebp, esp
.text$mn:00006767                 push    ecx
.text$mn:00006768                 mov     [ebp+var_4], ecx
.text$mn:0000676B                 mov     eax, [ebp+arg_0]
.text$mn:0000676E                 push    eax             ; void *
.text$mn:0000676F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00006774                 add     esp, 4
.text$mn:00006777                 mov     esp, ebp
.text$mn:00006779                 pop     ebp
.text$mn:0000677A                 retn    8
.text$mn:0000677A ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000677A
.text$mn:0000677A ; ---------------------------------------------------------------------------
.text$mn:0000677D                 align 10h
.text$mn:0000677D _text$mn        ends
.text$mn:0000677D
.text$mn:00006780 ; ===========================================================================
.text$mn:00006780
.text$mn:00006780 ; Segment type: Pure code
.text$mn:00006780 ; Segment permissions: Read/Execute
.text$mn:00006780 _text$mn        segment para public 'CODE' use32
.text$mn:00006780                 assume cs:_text$mn
.text$mn:00006780                 ;org 6780h
.text$mn:00006780 ; COMDAT (pick any)
.text$mn:00006780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006780
.text$mn:00006780 ; =============== S U B R O U T I N E =======================================
.text$mn:00006780
.text$mn:00006780 ; Attributes: bp-based frame
.text$mn:00006780
.text$mn:00006780 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00006780                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00006780 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00006780                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00006780
.text$mn:00006780 var_4           = dword ptr -4
.text$mn:00006780 arg_0           = dword ptr  8
.text$mn:00006780
.text$mn:00006780                 push    ebp
.text$mn:00006781                 mov     ebp, esp
.text$mn:00006783                 push    ecx
.text$mn:00006784                 mov     [ebp+var_4], ecx
.text$mn:00006787                 mov     eax, [ebp+arg_0]
.text$mn:0000678A                 push    eax             ; void *
.text$mn:0000678B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00006790                 add     esp, 4
.text$mn:00006793                 mov     esp, ebp
.text$mn:00006795                 pop     ebp
.text$mn:00006796                 retn    8
.text$mn:00006796 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00006796
.text$mn:00006796 ; ---------------------------------------------------------------------------
.text$mn:00006799                 align 4
.text$mn:00006799 _text$mn        ends
.text$mn:00006799
.text$mn:0000679C ; ===========================================================================
.text$mn:0000679C
.text$mn:0000679C ; Segment type: Pure code
.text$mn:0000679C ; Segment permissions: Read/Execute
.text$mn:0000679C _text$mn        segment para public 'CODE' use32
.text$mn:0000679C                 assume cs:_text$mn
.text$mn:0000679C                 ;org 679Ch
.text$mn:0000679C ; COMDAT (pick any)
.text$mn:0000679C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000679C
.text$mn:0000679C ; =============== S U B R O U T I N E =======================================
.text$mn:0000679C
.text$mn:0000679C ; Attributes: bp-based frame
.text$mn:0000679C
.text$mn:0000679C ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000679C                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000679C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000679C                                         ; DATA XREF: .rdata:00008338o
.text$mn:0000679C
.text$mn:0000679C var_4           = dword ptr -4
.text$mn:0000679C arg_0           = dword ptr  8
.text$mn:0000679C arg_4           = dword ptr  0Ch
.text$mn:0000679C
.text$mn:0000679C                 push    ebp
.text$mn:0000679D                 mov     ebp, esp
.text$mn:0000679F                 push    ecx
.text$mn:000067A0                 mov     [ebp+var_4], ecx
.text$mn:000067A3                 mov     eax, [ebp+arg_4]
.text$mn:000067A6                 push    eax             ; int
.text$mn:000067A7                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:000067AC                 add     esp, 4
.text$mn:000067AF                 test    eax, eax
.text$mn:000067B1                 jz      short loc_67CC
.text$mn:000067B3                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:000067B8                 push    eax             ; struct std::error_category *
.text$mn:000067B9                 mov     ecx, [ebp+arg_4]
.text$mn:000067BC                 push    ecx             ; int
.text$mn:000067BD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000067C0                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000067C5                 mov     eax, [ebp+arg_0]
.text$mn:000067C8                 jmp     short loc_67E1
.text$mn:000067CA ; ---------------------------------------------------------------------------
.text$mn:000067CA                 jmp     short loc_67E1
.text$mn:000067CC ; ---------------------------------------------------------------------------
.text$mn:000067CC
.text$mn:000067CC loc_67CC:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:000067CC                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:000067D1                 push    eax             ; struct std::error_category *
.text$mn:000067D2                 mov     edx, [ebp+arg_4]
.text$mn:000067D5                 push    edx             ; int
.text$mn:000067D6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000067D9                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000067DE                 mov     eax, [ebp+arg_0]
.text$mn:000067E1
.text$mn:000067E1 loc_67E1:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:000067E1                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:000067E1                 mov     esp, ebp
.text$mn:000067E3                 pop     ebp
.text$mn:000067E4                 retn    8
.text$mn:000067E4 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:000067E4
.text$mn:000067E4 ; ---------------------------------------------------------------------------
.text$mn:000067E7                 align 4
.text$mn:000067E7 _text$mn        ends
.text$mn:000067E7
.text$mn:000067E8 ; ===========================================================================
.text$mn:000067E8
.text$mn:000067E8 ; Segment type: Pure code
.text$mn:000067E8 ; Segment permissions: Read/Execute
.text$mn:000067E8 _text$mn        segment para public 'CODE' use32
.text$mn:000067E8                 assume cs:_text$mn
.text$mn:000067E8                 ;org 67E8h
.text$mn:000067E8 ; COMDAT (pick any)
.text$mn:000067E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067E8
.text$mn:000067E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067E8
.text$mn:000067E8 ; Attributes: bp-based frame
.text$mn:000067E8
.text$mn:000067E8 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:000067E8                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:000067E8 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:000067E8                                         ; DATA XREF: .rdata:000082A8o
.text$mn:000067E8                                         ; .rdata:000082C4o ...
.text$mn:000067E8
.text$mn:000067E8 var_4           = dword ptr -4
.text$mn:000067E8 arg_0           = dword ptr  8
.text$mn:000067E8 arg_4           = dword ptr  0Ch
.text$mn:000067E8
.text$mn:000067E8                 push    ebp
.text$mn:000067E9                 mov     ebp, esp
.text$mn:000067EB                 push    ecx
.text$mn:000067EC                 mov     [ebp+var_4], ecx
.text$mn:000067EF                 mov     eax, [ebp+var_4]
.text$mn:000067F2                 push    eax             ; struct std::error_category *
.text$mn:000067F3                 mov     ecx, [ebp+arg_4]
.text$mn:000067F6                 push    ecx             ; int
.text$mn:000067F7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000067FA                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000067FF                 mov     eax, [ebp+arg_0]
.text$mn:00006802                 mov     esp, ebp
.text$mn:00006804                 pop     ebp
.text$mn:00006805                 retn    8
.text$mn:00006805 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00006805
.text$mn:00006805 _text$mn        ends
.text$mn:00006805
.text$mn:00006808 ; ===========================================================================
.text$mn:00006808
.text$mn:00006808 ; Segment type: Pure code
.text$mn:00006808 ; Segment permissions: Read/Execute
.text$mn:00006808 _text$mn        segment para public 'CODE' use32
.text$mn:00006808                 assume cs:_text$mn
.text$mn:00006808                 ;org 6808h
.text$mn:00006808 ; COMDAT (pick any)
.text$mn:00006808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006808
.text$mn:00006808 ; =============== S U B R O U T I N E =======================================
.text$mn:00006808
.text$mn:00006808 ; Attributes: bp-based frame
.text$mn:00006808
.text$mn:00006808 ; void __thiscall Window::display(Window *this, bool)
.text$mn:00006808                 public ?display@Window@@UBEX_N@Z
.text$mn:00006808 ?display@Window@@UBEX_N@Z proc near     ; DATA XREF: .rdata:0000823Co
.text$mn:00006808                                         ; .rdata:00008270o
.text$mn:00006808
.text$mn:00006808 var_8           = dword ptr -8
.text$mn:00006808 nCmdShow        = dword ptr -4
.text$mn:00006808 arg_0           = byte ptr  8
.text$mn:00006808
.text$mn:00006808                 push    ebp
.text$mn:00006809                 mov     ebp, esp
.text$mn:0000680B                 sub     esp, 8
.text$mn:0000680E                 mov     [ebp+var_8], ecx
.text$mn:00006811                 movzx   eax, [ebp+arg_0]
.text$mn:00006815                 test    eax, eax
.text$mn:00006817                 jz      short loc_6822
.text$mn:00006819                 mov     [ebp+nCmdShow], 5
.text$mn:00006820                 jmp     short loc_6829
.text$mn:00006822 ; ---------------------------------------------------------------------------
.text$mn:00006822
.text$mn:00006822 loc_6822:                               ; CODE XREF: Window::display(bool)+Fj
.text$mn:00006822                 mov     [ebp+nCmdShow], 0
.text$mn:00006829
.text$mn:00006829 loc_6829:                               ; CODE XREF: Window::display(bool)+18j
.text$mn:00006829                 mov     ecx, [ebp+nCmdShow]
.text$mn:0000682C                 push    ecx             ; nCmdShow
.text$mn:0000682D                 mov     edx, [ebp+var_8]
.text$mn:00006830                 mov     eax, [edx+0Ch]
.text$mn:00006833                 push    eax             ; hWnd
.text$mn:00006834                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000683A                 mov     esp, ebp
.text$mn:0000683C                 pop     ebp
.text$mn:0000683D                 retn    4
.text$mn:0000683D ?display@Window@@UBEX_N@Z endp
.text$mn:0000683D
.text$mn:0000683D _text$mn        ends
.text$mn:0000683D
.text$mn:00006840 ; ===========================================================================
.text$mn:00006840
.text$mn:00006840 ; Segment type: Pure code
.text$mn:00006840 ; Segment permissions: Read/Execute
.text$mn:00006840 _text$mn        segment para public 'CODE' use32
.text$mn:00006840                 assume cs:_text$mn
.text$mn:00006840                 ;org 6840h
.text$mn:00006840 ; COMDAT (pick any)
.text$mn:00006840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006840
.text$mn:00006840 ; =============== S U B R O U T I N E =======================================
.text$mn:00006840
.text$mn:00006840 ; Attributes: bp-based frame
.text$mn:00006840
.text$mn:00006840 ; void __thiscall WordStyleDlg::enableBg(WordStyleDlg *this, bool)
.text$mn:00006840                 public ?enableBg@WordStyleDlg@@AAEX_N@Z
.text$mn:00006840 ?enableBg@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:00006840                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+2F6p
.text$mn:00006840
.text$mn:00006840 var_4           = dword ptr -4
.text$mn:00006840 arg_0           = byte ptr  8
.text$mn:00006840
.text$mn:00006840                 push    ebp
.text$mn:00006841                 mov     ebp, esp
.text$mn:00006843                 push    ecx
.text$mn:00006844                 mov     [ebp+var_4], ecx
.text$mn:00006847                 movzx   eax, [ebp+arg_0]
.text$mn:0000684B                 push    eax             ; bEnable
.text$mn:0000684C                 mov     ecx, [ebp+var_4]
.text$mn:0000684F                 mov     ecx, [ecx+24h]  ; this
.text$mn:00006852                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00006857                 push    eax             ; hWnd
.text$mn:00006858                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:0000685E                 movzx   edx, [ebp+arg_0]
.text$mn:00006862                 push    edx             ; bEnable
.text$mn:00006863                 mov     eax, [ebp+var_4]
.text$mn:00006866                 mov     ecx, [eax+4Ch]
.text$mn:00006869                 push    ecx             ; hWnd
.text$mn:0000686A                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00006870                 mov     esp, ebp
.text$mn:00006872                 pop     ebp
.text$mn:00006873                 retn    4
.text$mn:00006873 ?enableBg@WordStyleDlg@@AAEX_N@Z endp
.text$mn:00006873
.text$mn:00006873 ; ---------------------------------------------------------------------------
.text$mn:00006876                 align 4
.text$mn:00006876 _text$mn        ends
.text$mn:00006876
.text$mn:00006878 ; ===========================================================================
.text$mn:00006878
.text$mn:00006878 ; Segment type: Pure code
.text$mn:00006878 ; Segment permissions: Read/Execute
.text$mn:00006878 _text$mn        segment para public 'CODE' use32
.text$mn:00006878                 assume cs:_text$mn
.text$mn:00006878                 ;org 6878h
.text$mn:00006878 ; COMDAT (pick any)
.text$mn:00006878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006878
.text$mn:00006878 ; =============== S U B R O U T I N E =======================================
.text$mn:00006878
.text$mn:00006878 ; Attributes: bp-based frame
.text$mn:00006878
.text$mn:00006878 ; void __thiscall WordStyleDlg::enableFg(WordStyleDlg *this, bool)
.text$mn:00006878                 public ?enableFg@WordStyleDlg@@AAEX_N@Z
.text$mn:00006878 ?enableFg@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:00006878                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+261p
.text$mn:00006878
.text$mn:00006878 var_4           = dword ptr -4
.text$mn:00006878 arg_0           = byte ptr  8
.text$mn:00006878
.text$mn:00006878                 push    ebp
.text$mn:00006879                 mov     ebp, esp
.text$mn:0000687B                 push    ecx
.text$mn:0000687C                 mov     [ebp+var_4], ecx
.text$mn:0000687F                 movzx   eax, [ebp+arg_0]
.text$mn:00006883                 push    eax             ; bEnable
.text$mn:00006884                 mov     ecx, [ebp+var_4]
.text$mn:00006887                 mov     ecx, [ecx+20h]  ; this
.text$mn:0000688A                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:0000688F                 push    eax             ; hWnd
.text$mn:00006890                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00006896                 movzx   edx, [ebp+arg_0]
.text$mn:0000689A                 push    edx             ; bEnable
.text$mn:0000689B                 mov     eax, [ebp+var_4]
.text$mn:0000689E                 mov     ecx, [eax+48h]
.text$mn:000068A1                 push    ecx             ; hWnd
.text$mn:000068A2                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000068A8                 mov     esp, ebp
.text$mn:000068AA                 pop     ebp
.text$mn:000068AB                 retn    4
.text$mn:000068AB ?enableFg@WordStyleDlg@@AAEX_N@Z endp
.text$mn:000068AB
.text$mn:000068AB ; ---------------------------------------------------------------------------
.text$mn:000068AE                 align 10h
.text$mn:000068AE _text$mn        ends
.text$mn:000068AE
.text$mn:000068B0 ; ===========================================================================
.text$mn:000068B0
.text$mn:000068B0 ; Segment type: Pure code
.text$mn:000068B0 ; Segment permissions: Read/Execute
.text$mn:000068B0 _text$mn        segment para public 'CODE' use32
.text$mn:000068B0                 assume cs:_text$mn
.text$mn:000068B0                 ;org 68B0h
.text$mn:000068B0 ; COMDAT (pick any)
.text$mn:000068B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068B0
.text$mn:000068B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000068B0
.text$mn:000068B0 ; Attributes: bp-based frame
.text$mn:000068B0
.text$mn:000068B0 ; void __thiscall WordStyleDlg::enableFontName(WordStyleDlg *this, bool)
.text$mn:000068B0                 public ?enableFontName@WordStyleDlg@@AAEX_N@Z
.text$mn:000068B0 ?enableFontName@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:000068B0                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+387p
.text$mn:000068B0
.text$mn:000068B0 var_4           = dword ptr -4
.text$mn:000068B0 arg_0           = byte ptr  8
.text$mn:000068B0
.text$mn:000068B0                 push    ebp
.text$mn:000068B1                 mov     ebp, esp
.text$mn:000068B3                 push    ecx
.text$mn:000068B4                 mov     [ebp+var_4], ecx
.text$mn:000068B7                 movzx   eax, [ebp+arg_0]
.text$mn:000068BB                 push    eax             ; bEnable
.text$mn:000068BC                 mov     ecx, [ebp+var_4]
.text$mn:000068BF                 mov     edx, [ecx+3Ch]
.text$mn:000068C2                 push    edx             ; hWnd
.text$mn:000068C3                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000068C9                 movzx   eax, [ebp+arg_0]
.text$mn:000068CD                 push    eax             ; bEnable
.text$mn:000068CE                 mov     ecx, [ebp+var_4]
.text$mn:000068D1                 mov     edx, [ecx+50h]
.text$mn:000068D4                 push    edx             ; hWnd
.text$mn:000068D5                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000068DB                 mov     esp, ebp
.text$mn:000068DD                 pop     ebp
.text$mn:000068DE                 retn    4
.text$mn:000068DE ?enableFontName@WordStyleDlg@@AAEX_N@Z endp
.text$mn:000068DE
.text$mn:000068DE ; ---------------------------------------------------------------------------
.text$mn:000068E1                 align 4
.text$mn:000068E1 _text$mn        ends
.text$mn:000068E1
.text$mn:000068E4 ; ===========================================================================
.text$mn:000068E4
.text$mn:000068E4 ; Segment type: Pure code
.text$mn:000068E4 ; Segment permissions: Read/Execute
.text$mn:000068E4 _text$mn        segment para public 'CODE' use32
.text$mn:000068E4                 assume cs:_text$mn
.text$mn:000068E4                 ;org 68E4h
.text$mn:000068E4 ; COMDAT (pick any)
.text$mn:000068E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068E4
.text$mn:000068E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000068E4
.text$mn:000068E4 ; Attributes: bp-based frame
.text$mn:000068E4
.text$mn:000068E4 ; void __thiscall WordStyleDlg::enableFontSize(WordStyleDlg *this, bool)
.text$mn:000068E4                 public ?enableFontSize@WordStyleDlg@@AAEX_N@Z
.text$mn:000068E4 ?enableFontSize@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:000068E4                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+42Cp
.text$mn:000068E4
.text$mn:000068E4 var_4           = dword ptr -4
.text$mn:000068E4 arg_0           = byte ptr  8
.text$mn:000068E4
.text$mn:000068E4                 push    ebp
.text$mn:000068E5                 mov     ebp, esp
.text$mn:000068E7                 push    ecx
.text$mn:000068E8                 mov     [ebp+var_4], ecx
.text$mn:000068EB                 movzx   eax, [ebp+arg_0]
.text$mn:000068EF                 push    eax             ; bEnable
.text$mn:000068F0                 mov     ecx, [ebp+var_4]
.text$mn:000068F3                 mov     edx, [ecx+40h]
.text$mn:000068F6                 push    edx             ; hWnd
.text$mn:000068F7                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000068FD                 movzx   eax, [ebp+arg_0]
.text$mn:00006901                 push    eax             ; bEnable
.text$mn:00006902                 mov     ecx, [ebp+var_4]
.text$mn:00006905                 mov     edx, [ecx+54h]
.text$mn:00006908                 push    edx             ; hWnd
.text$mn:00006909                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:0000690F                 mov     esp, ebp
.text$mn:00006911                 pop     ebp
.text$mn:00006912                 retn    4
.text$mn:00006912 ?enableFontSize@WordStyleDlg@@AAEX_N@Z endp
.text$mn:00006912
.text$mn:00006912 ; ---------------------------------------------------------------------------
.text$mn:00006915                 align 4
.text$mn:00006915 _text$mn        ends
.text$mn:00006915
.text$mn:00006918 ; ===========================================================================
.text$mn:00006918
.text$mn:00006918 ; Segment type: Pure code
.text$mn:00006918 ; Segment permissions: Read/Execute
.text$mn:00006918 _text$mn        segment para public 'CODE' use32
.text$mn:00006918                 assume cs:_text$mn
.text$mn:00006918                 ;org 6918h
.text$mn:00006918 ; COMDAT (pick any)
.text$mn:00006918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006918
.text$mn:00006918 ; =============== S U B R O U T I N E =======================================
.text$mn:00006918
.text$mn:00006918 ; Attributes: bp-based frame
.text$mn:00006918
.text$mn:00006918 ; void __thiscall WordStyleDlg::enableFontStyle(WordStyleDlg *this, bool)
.text$mn:00006918                 public ?enableFontStyle@WordStyleDlg@@AAEX_N@Z
.text$mn:00006918 ?enableFontStyle@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:00006918                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+594p
.text$mn:00006918
.text$mn:00006918 var_4           = dword ptr -4
.text$mn:00006918 arg_0           = byte ptr  8
.text$mn:00006918
.text$mn:00006918                 push    ebp
.text$mn:00006919                 mov     ebp, esp
.text$mn:0000691B                 push    ecx
.text$mn:0000691C                 mov     [ebp+var_4], ecx
.text$mn:0000691F                 movzx   eax, [ebp+arg_0]
.text$mn:00006923                 push    eax             ; bEnable
.text$mn:00006924                 mov     ecx, [ebp+var_4]
.text$mn:00006927                 mov     edx, [ecx+30h]
.text$mn:0000692A                 push    edx             ; hWnd
.text$mn:0000692B                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00006931                 movzx   eax, [ebp+arg_0]
.text$mn:00006935                 push    eax             ; bEnable
.text$mn:00006936                 mov     ecx, [ebp+var_4]
.text$mn:00006939                 mov     edx, [ecx+34h]
.text$mn:0000693C                 push    edx             ; hWnd
.text$mn:0000693D                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00006943                 movzx   eax, [ebp+arg_0]
.text$mn:00006947                 push    eax             ; bEnable
.text$mn:00006948                 mov     ecx, [ebp+var_4]
.text$mn:0000694B                 mov     edx, [ecx+38h]
.text$mn:0000694E                 push    edx             ; hWnd
.text$mn:0000694F                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00006955                 mov     esp, ebp
.text$mn:00006957                 pop     ebp
.text$mn:00006958                 retn    4
.text$mn:00006958 ?enableFontStyle@WordStyleDlg@@AAEX_N@Z endp
.text$mn:00006958
.text$mn:00006958 ; ---------------------------------------------------------------------------
.text$mn:0000695B                 align 4
.text$mn:0000695B _text$mn        ends
.text$mn:0000695B
.text$mn:0000695C ; ===========================================================================
.text$mn:0000695C
.text$mn:0000695C ; Segment type: Pure code
.text$mn:0000695C ; Segment permissions: Read/Execute
.text$mn:0000695C _text$mn        segment para public 'CODE' use32
.text$mn:0000695C                 assume cs:_text$mn
.text$mn:0000695C                 ;org 695Ch
.text$mn:0000695C ; COMDAT (pick any)
.text$mn:0000695C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000695C
.text$mn:0000695C ; =============== S U B R O U T I N E =======================================
.text$mn:0000695C
.text$mn:0000695C ; Attributes: bp-based frame
.text$mn:0000695C
.text$mn:0000695C ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000695C                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000695C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000695C                                         ; DATA XREF: .rdata:000082ACo
.text$mn:0000695C                                         ; .rdata:000082C8o ...
.text$mn:0000695C
.text$mn:0000695C var_8           = dword ptr -8
.text$mn:0000695C var_4           = dword ptr -4
.text$mn:0000695C arg_0           = dword ptr  8
.text$mn:0000695C arg_4           = dword ptr  0Ch
.text$mn:0000695C
.text$mn:0000695C                 push    ebp
.text$mn:0000695D                 mov     ebp, esp
.text$mn:0000695F                 sub     esp, 8
.text$mn:00006962                 mov     [ebp+var_8], ecx
.text$mn:00006965                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00006968                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000696D                 push    eax
.text$mn:0000696E                 mov     ecx, [ebp+var_8]
.text$mn:00006971                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00006976                 movzx   eax, al
.text$mn:00006979                 test    eax, eax
.text$mn:0000697B                 jz      short loc_6993
.text$mn:0000697D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00006980                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00006985                 cmp     eax, [ebp+arg_4]
.text$mn:00006988                 jnz     short loc_6993
.text$mn:0000698A                 mov     [ebp+var_4], 1
.text$mn:00006991                 jmp     short loc_699A
.text$mn:00006993 ; ---------------------------------------------------------------------------
.text$mn:00006993
.text$mn:00006993 loc_6993:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:00006993                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:00006993                 mov     [ebp+var_4], 0
.text$mn:0000699A
.text$mn:0000699A loc_699A:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000699A                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000699D                 mov     esp, ebp
.text$mn:0000699F                 pop     ebp
.text$mn:000069A0                 retn    8
.text$mn:000069A0 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:000069A0
.text$mn:000069A0 ; ---------------------------------------------------------------------------
.text$mn:000069A3                 align 4
.text$mn:000069A3 _text$mn        ends
.text$mn:000069A3
.text$mn:000069A4 ; ===========================================================================
.text$mn:000069A4
.text$mn:000069A4 ; Segment type: Pure code
.text$mn:000069A4 ; Segment permissions: Read/Execute
.text$mn:000069A4 _text$mn        segment para public 'CODE' use32
.text$mn:000069A4                 assume cs:_text$mn
.text$mn:000069A4                 ;org 69A4h
.text$mn:000069A4 ; COMDAT (pick any)
.text$mn:000069A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069A4
.text$mn:000069A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000069A4
.text$mn:000069A4 ; Attributes: bp-based frame
.text$mn:000069A4
.text$mn:000069A4 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:000069A4                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:000069A4 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:000069A4                                         ; DATA XREF: .rdata:000082B0o
.text$mn:000069A4                                         ; .rdata:000082CCo ...
.text$mn:000069A4
.text$mn:000069A4 var_C           = byte ptr -0Ch
.text$mn:000069A4 var_4           = dword ptr -4
.text$mn:000069A4 arg_0           = dword ptr  8
.text$mn:000069A4 arg_4           = dword ptr  0Ch
.text$mn:000069A4
.text$mn:000069A4                 push    ebp
.text$mn:000069A5                 mov     ebp, esp
.text$mn:000069A7                 sub     esp, 0Ch
.text$mn:000069AA                 mov     [ebp+var_4], ecx
.text$mn:000069AD                 mov     eax, [ebp+arg_4]
.text$mn:000069B0                 push    eax             ; std::error_condition *
.text$mn:000069B1                 mov     ecx, [ebp+arg_0]
.text$mn:000069B4                 push    ecx
.text$mn:000069B5                 lea     edx, [ebp+var_C]
.text$mn:000069B8                 push    edx
.text$mn:000069B9                 mov     eax, [ebp+var_4]
.text$mn:000069BC                 mov     edx, [eax]
.text$mn:000069BE                 mov     ecx, [ebp+var_4]
.text$mn:000069C1                 mov     eax, [edx+0Ch]
.text$mn:000069C4                 call    eax
.text$mn:000069C6                 mov     ecx, eax
.text$mn:000069C8                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:000069CD                 mov     esp, ebp
.text$mn:000069CF                 pop     ebp
.text$mn:000069D0                 retn    8
.text$mn:000069D0 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:000069D0
.text$mn:000069D0 ; ---------------------------------------------------------------------------
.text$mn:000069D3                 align 4
.text$mn:000069D3 _text$mn        ends
.text$mn:000069D3
.text$mn:000069D4 ; ===========================================================================
.text$mn:000069D4
.text$mn:000069D4 ; Segment type: Pure code
.text$mn:000069D4 ; Segment permissions: Read/Execute
.text$mn:000069D4 _text$mn        segment para public 'CODE' use32
.text$mn:000069D4                 assume cs:_text$mn
.text$mn:000069D4                 ;org 69D4h
.text$mn:000069D4 ; COMDAT (pick any)
.text$mn:000069D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069D4
.text$mn:000069D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000069D4
.text$mn:000069D4 ; Attributes: bp-based frame
.text$mn:000069D4
.text$mn:000069D4 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:000069D4                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:000069D4 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000069D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:000069D4
.text$mn:000069D4 var_4           = dword ptr -4
.text$mn:000069D4 arg_0           = dword ptr  8
.text$mn:000069D4
.text$mn:000069D4                 push    ebp
.text$mn:000069D5                 mov     ebp, esp
.text$mn:000069D7                 push    ecx
.text$mn:000069D8                 mov     [ebp+var_4], ecx
.text$mn:000069DB                 mov     eax, [ebp+var_4]
.text$mn:000069DE                 mov     ecx, [eax+14h]
.text$mn:000069E1                 cmp     ecx, [ebp+arg_0]
.text$mn:000069E4                 jnb     short loc_69EE
.text$mn:000069E6                 mov     ecx, [ebp+var_4]
.text$mn:000069E9                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000069EE
.text$mn:000069EE loc_69EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:000069EE                 mov     edx, [ebp+arg_0]
.text$mn:000069F1                 push    edx
.text$mn:000069F2                 mov     ecx, [ebp+var_4]
.text$mn:000069F5                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000069FA                 mov     eax, [ebp+var_4]
.text$mn:000069FD                 mov     esp, ebp
.text$mn:000069FF                 pop     ebp
.text$mn:00006A00                 retn    4
.text$mn:00006A00 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00006A00
.text$mn:00006A00 ; ---------------------------------------------------------------------------
.text$mn:00006A03                 align 4
.text$mn:00006A03 _text$mn        ends
.text$mn:00006A03
.text$mn:00006A04 ; ===========================================================================
.text$mn:00006A04
.text$mn:00006A04 ; Segment type: Pure code
.text$mn:00006A04 ; Segment permissions: Read/Execute
.text$mn:00006A04 _text$mn        segment para public 'CODE' use32
.text$mn:00006A04                 assume cs:_text$mn
.text$mn:00006A04                 ;org 6A04h
.text$mn:00006A04 ; COMDAT (pick any)
.text$mn:00006A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A04
.text$mn:00006A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A04
.text$mn:00006A04 ; Attributes: bp-based frame
.text$mn:00006A04
.text$mn:00006A04 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00006A04                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00006A04 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00006A04                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00006A04
.text$mn:00006A04 var_C           = dword ptr -0Ch
.text$mn:00006A04 Dst             = dword ptr -8
.text$mn:00006A04 var_4           = dword ptr -4
.text$mn:00006A04 arg_0           = dword ptr  8
.text$mn:00006A04 arg_4           = dword ptr  0Ch
.text$mn:00006A04
.text$mn:00006A04                 push    ebp
.text$mn:00006A05                 mov     ebp, esp
.text$mn:00006A07                 sub     esp, 0Ch
.text$mn:00006A0A                 mov     [ebp+var_4], ecx
.text$mn:00006A0D                 mov     eax, [ebp+var_4]
.text$mn:00006A10                 mov     ecx, [eax+14h]
.text$mn:00006A13                 cmp     ecx, [ebp+arg_0]
.text$mn:00006A16                 jnb     short loc_6A20
.text$mn:00006A18                 mov     ecx, [ebp+var_4]
.text$mn:00006A1B                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00006A20
.text$mn:00006A20 loc_6A20:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00006A20                 mov     edx, [ebp+var_4]
.text$mn:00006A23                 mov     eax, [edx+14h]
.text$mn:00006A26                 sub     eax, [ebp+arg_0]
.text$mn:00006A29                 cmp     eax, [ebp+arg_4]
.text$mn:00006A2C                 ja      short loc_6A3C
.text$mn:00006A2E                 mov     ecx, [ebp+arg_0]
.text$mn:00006A31                 push    ecx
.text$mn:00006A32                 mov     ecx, [ebp+var_4]
.text$mn:00006A35                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006A3A                 jmp     short loc_6A82
.text$mn:00006A3C ; ---------------------------------------------------------------------------
.text$mn:00006A3C
.text$mn:00006A3C loc_6A3C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00006A3C                 cmp     [ebp+arg_4], 0
.text$mn:00006A40                 jbe     short loc_6A82
.text$mn:00006A42                 mov     ecx, [ebp+var_4]
.text$mn:00006A45                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00006A4A                 add     eax, [ebp+arg_0]
.text$mn:00006A4D                 mov     [ebp+Dst], eax
.text$mn:00006A50                 mov     edx, [ebp+var_4]
.text$mn:00006A53                 mov     eax, [edx+14h]
.text$mn:00006A56                 sub     eax, [ebp+arg_4]
.text$mn:00006A59                 mov     [ebp+var_C], eax
.text$mn:00006A5C                 mov     ecx, [ebp+var_C]
.text$mn:00006A5F                 sub     ecx, [ebp+arg_0]
.text$mn:00006A62                 push    ecx             ; Size
.text$mn:00006A63                 mov     edx, [ebp+Dst]
.text$mn:00006A66                 add     edx, [ebp+arg_4]
.text$mn:00006A69                 push    edx             ; Src
.text$mn:00006A6A                 mov     eax, [ebp+Dst]
.text$mn:00006A6D                 push    eax             ; Dst
.text$mn:00006A6E                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00006A73                 add     esp, 0Ch
.text$mn:00006A76                 mov     ecx, [ebp+var_C]
.text$mn:00006A79                 push    ecx
.text$mn:00006A7A                 mov     ecx, [ebp+var_4]
.text$mn:00006A7D                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006A82
.text$mn:00006A82 loc_6A82:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:00006A82                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:00006A82                 mov     eax, [ebp+var_4]
.text$mn:00006A85                 mov     esp, ebp
.text$mn:00006A87                 pop     ebp
.text$mn:00006A88                 retn    8
.text$mn:00006A88 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00006A88
.text$mn:00006A88 ; ---------------------------------------------------------------------------
.text$mn:00006A8B                 align 4
.text$mn:00006A8B _text$mn        ends
.text$mn:00006A8B
.text$mn:00006A8C ; ===========================================================================
.text$mn:00006A8C
.text$mn:00006A8C ; Segment type: Pure code
.text$mn:00006A8C ; Segment permissions: Read/Execute
.text$mn:00006A8C _text$mn        segment para public 'CODE' use32
.text$mn:00006A8C                 assume cs:_text$mn
.text$mn:00006A8C                 ;org 6A8Ch
.text$mn:00006A8C ; COMDAT (pick any)
.text$mn:00006A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A8C
.text$mn:00006A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A8C
.text$mn:00006A8C ; Attributes: bp-based frame
.text$mn:00006A8C
.text$mn:00006A8C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00006A8C                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00006A8C ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00006A8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00006A8C
.text$mn:00006A8C var_4           = dword ptr -4
.text$mn:00006A8C arg_0           = dword ptr  8
.text$mn:00006A8C
.text$mn:00006A8C                 push    ebp
.text$mn:00006A8D                 mov     ebp, esp
.text$mn:00006A8F                 push    ecx
.text$mn:00006A90                 mov     [ebp+var_4], ecx
.text$mn:00006A93                 mov     eax, [ebp+var_4]
.text$mn:00006A96                 mov     ecx, [eax+14h]
.text$mn:00006A99                 cmp     ecx, [ebp+arg_0]
.text$mn:00006A9C                 jnb     short loc_6AA6
.text$mn:00006A9E                 mov     ecx, [ebp+var_4]
.text$mn:00006AA1                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006AA6
.text$mn:00006AA6 loc_6AA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00006AA6                 mov     edx, [ebp+arg_0]
.text$mn:00006AA9                 push    edx
.text$mn:00006AAA                 mov     ecx, [ebp+var_4]
.text$mn:00006AAD                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006AB2                 mov     eax, [ebp+var_4]
.text$mn:00006AB5                 mov     esp, ebp
.text$mn:00006AB7                 pop     ebp
.text$mn:00006AB8                 retn    4
.text$mn:00006AB8 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00006AB8
.text$mn:00006AB8 ; ---------------------------------------------------------------------------
.text$mn:00006ABB                 align 4
.text$mn:00006ABB _text$mn        ends
.text$mn:00006ABB
.text$mn:00006ABC ; ===========================================================================
.text$mn:00006ABC
.text$mn:00006ABC ; Segment type: Pure code
.text$mn:00006ABC ; Segment permissions: Read/Execute
.text$mn:00006ABC _text$mn        segment para public 'CODE' use32
.text$mn:00006ABC                 assume cs:_text$mn
.text$mn:00006ABC                 ;org 6ABCh
.text$mn:00006ABC ; COMDAT (pick any)
.text$mn:00006ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ABC
.text$mn:00006ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00006ABC
.text$mn:00006ABC ; Attributes: bp-based frame
.text$mn:00006ABC
.text$mn:00006ABC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00006ABC                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00006ABC ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00006ABC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00006ABC
.text$mn:00006ABC var_C           = dword ptr -0Ch
.text$mn:00006ABC Dst             = dword ptr -8
.text$mn:00006ABC var_4           = dword ptr -4
.text$mn:00006ABC arg_0           = dword ptr  8
.text$mn:00006ABC arg_4           = dword ptr  0Ch
.text$mn:00006ABC
.text$mn:00006ABC                 push    ebp
.text$mn:00006ABD                 mov     ebp, esp
.text$mn:00006ABF                 sub     esp, 0Ch
.text$mn:00006AC2                 mov     [ebp+var_4], ecx
.text$mn:00006AC5                 mov     eax, [ebp+var_4]
.text$mn:00006AC8                 mov     ecx, [eax+14h]
.text$mn:00006ACB                 cmp     ecx, [ebp+arg_0]
.text$mn:00006ACE                 jnb     short loc_6AD8
.text$mn:00006AD0                 mov     ecx, [ebp+var_4]
.text$mn:00006AD3                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006AD8
.text$mn:00006AD8 loc_6AD8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00006AD8                 mov     edx, [ebp+var_4]
.text$mn:00006ADB                 mov     eax, [edx+14h]
.text$mn:00006ADE                 sub     eax, [ebp+arg_0]
.text$mn:00006AE1                 cmp     eax, [ebp+arg_4]
.text$mn:00006AE4                 ja      short loc_6AF4
.text$mn:00006AE6                 mov     ecx, [ebp+arg_0]
.text$mn:00006AE9                 push    ecx
.text$mn:00006AEA                 mov     ecx, [ebp+var_4]
.text$mn:00006AED                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006AF2                 jmp     short loc_6B40
.text$mn:00006AF4 ; ---------------------------------------------------------------------------
.text$mn:00006AF4
.text$mn:00006AF4 loc_6AF4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00006AF4                 cmp     [ebp+arg_4], 0
.text$mn:00006AF8                 jbe     short loc_6B40
.text$mn:00006AFA                 mov     ecx, [ebp+var_4]
.text$mn:00006AFD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B02                 mov     edx, [ebp+arg_0]
.text$mn:00006B05                 lea     eax, [eax+edx*2]
.text$mn:00006B08                 mov     [ebp+Dst], eax
.text$mn:00006B0B                 mov     ecx, [ebp+var_4]
.text$mn:00006B0E                 mov     edx, [ecx+14h]
.text$mn:00006B11                 sub     edx, [ebp+arg_4]
.text$mn:00006B14                 mov     [ebp+var_C], edx
.text$mn:00006B17                 mov     eax, [ebp+var_C]
.text$mn:00006B1A                 sub     eax, [ebp+arg_0]
.text$mn:00006B1D                 push    eax             ; int
.text$mn:00006B1E                 mov     ecx, [ebp+arg_4]
.text$mn:00006B21                 mov     edx, [ebp+Dst]
.text$mn:00006B24                 lea     eax, [edx+ecx*2]
.text$mn:00006B27                 push    eax             ; Src
.text$mn:00006B28                 mov     ecx, [ebp+Dst]
.text$mn:00006B2B                 push    ecx             ; Dst
.text$mn:00006B2C                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006B31                 add     esp, 0Ch
.text$mn:00006B34                 mov     edx, [ebp+var_C]
.text$mn:00006B37                 push    edx
.text$mn:00006B38                 mov     ecx, [ebp+var_4]
.text$mn:00006B3B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006B40
.text$mn:00006B40 loc_6B40:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:00006B40                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:00006B40                 mov     eax, [ebp+var_4]
.text$mn:00006B43                 mov     esp, ebp
.text$mn:00006B45                 pop     ebp
.text$mn:00006B46                 retn    8
.text$mn:00006B46 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:00006B46
.text$mn:00006B46 ; ---------------------------------------------------------------------------
.text$mn:00006B49                 align 4
.text$mn:00006B49 _text$mn        ends
.text$mn:00006B49
.text$mn:00006B4C ; ===========================================================================
.text$mn:00006B4C
.text$mn:00006B4C ; Segment type: Pure code
.text$mn:00006B4C ; Segment permissions: Read/Execute
.text$mn:00006B4C _text$mn        segment para public 'CODE' use32
.text$mn:00006B4C                 assume cs:_text$mn
.text$mn:00006B4C                 ;org 6B4Ch
.text$mn:00006B4C ; COMDAT (pick any)
.text$mn:00006B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B4C
.text$mn:00006B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006B4C
.text$mn:00006B4C ; Attributes: bp-based frame
.text$mn:00006B4C
.text$mn:00006B4C ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00006B4C                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00006B4C ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00006B4C                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00006B4C                 push    ebp
.text$mn:00006B4D                 mov     ebp, esp
.text$mn:00006B4F                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00006B54                 pop     ebp
.text$mn:00006B55                 retn
.text$mn:00006B55 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00006B55
.text$mn:00006B55 ; ---------------------------------------------------------------------------
.text$mn:00006B56                 align 4
.text$mn:00006B56 _text$mn        ends
.text$mn:00006B56
.text$mn:00006B58 ; ===========================================================================
.text$mn:00006B58
.text$mn:00006B58 ; Segment type: Pure code
.text$mn:00006B58 ; Segment permissions: Read/Execute
.text$mn:00006B58 _text$mn        segment para public 'CODE' use32
.text$mn:00006B58                 assume cs:_text$mn
.text$mn:00006B58                 ;org 6B58h
.text$mn:00006B58 ; COMDAT (pick any)
.text$mn:00006B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B58
.text$mn:00006B58 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B58
.text$mn:00006B58 ; Attributes: bp-based frame
.text$mn:00006B58
.text$mn:00006B58 ; void __thiscall Window::getClientRect(Window *this, struct tagRECT *)
.text$mn:00006B58                 public ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00006B58 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00006B58                                         ; DATA XREF: .rdata:0000824Co
.text$mn:00006B58                                         ; .rdata:00008280o
.text$mn:00006B58
.text$mn:00006B58 var_4           = dword ptr -4
.text$mn:00006B58 lpRect          = dword ptr  8
.text$mn:00006B58
.text$mn:00006B58                 push    ebp
.text$mn:00006B59                 mov     ebp, esp
.text$mn:00006B5B                 push    ecx
.text$mn:00006B5C                 mov     [ebp+var_4], ecx
.text$mn:00006B5F                 mov     eax, [ebp+lpRect]
.text$mn:00006B62                 push    eax             ; lpRect
.text$mn:00006B63                 mov     ecx, [ebp+var_4]
.text$mn:00006B66                 mov     edx, [ecx+0Ch]
.text$mn:00006B69                 push    edx             ; hWnd
.text$mn:00006B6A                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00006B70                 mov     esp, ebp
.text$mn:00006B72                 pop     ebp
.text$mn:00006B73                 retn    4
.text$mn:00006B73 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:00006B73
.text$mn:00006B73 ; ---------------------------------------------------------------------------
.text$mn:00006B76                 align 4
.text$mn:00006B76 _text$mn        ends
.text$mn:00006B76
.text$mn:00006B78 ; ===========================================================================
.text$mn:00006B78
.text$mn:00006B78 ; Segment type: Pure code
.text$mn:00006B78 ; Segment permissions: Read/Execute
.text$mn:00006B78 _text$mn        segment para public 'CODE' use32
.text$mn:00006B78                 assume cs:_text$mn
.text$mn:00006B78                 ;org 6B78h
.text$mn:00006B78 ; COMDAT (pick any)
.text$mn:00006B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B78
.text$mn:00006B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B78
.text$mn:00006B78 ; Attributes: bp-based frame
.text$mn:00006B78
.text$mn:00006B78 ; unsigned __int32 __thiscall ColourPicker::getColour(ColourPicker *__hidden this)
.text$mn:00006B78                 public ?getColour@ColourPicker@@QBEKXZ
.text$mn:00006B78 ?getColour@ColourPicker@@QBEKXZ proc near
.text$mn:00006B78                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+105Fp
.text$mn:00006B78                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+10E5p ...
.text$mn:00006B78
.text$mn:00006B78 var_4           = dword ptr -4
.text$mn:00006B78
.text$mn:00006B78                 push    ebp
.text$mn:00006B79                 mov     ebp, esp
.text$mn:00006B7B                 push    ecx
.text$mn:00006B7C                 mov     [ebp+var_4], ecx
.text$mn:00006B7F                 mov     eax, [ebp+var_4]
.text$mn:00006B82                 mov     eax, [eax+10h]
.text$mn:00006B85                 mov     esp, ebp
.text$mn:00006B87                 pop     ebp
.text$mn:00006B88                 retn
.text$mn:00006B88 ?getColour@ColourPicker@@QBEKXZ endp
.text$mn:00006B88
.text$mn:00006B88 ; ---------------------------------------------------------------------------
.text$mn:00006B89                 align 4
.text$mn:00006B89 _text$mn        ends
.text$mn:00006B89
.text$mn:00006B8C ; ===========================================================================
.text$mn:00006B8C
.text$mn:00006B8C ; Segment type: Pure code
.text$mn:00006B8C ; Segment permissions: Read/Execute
.text$mn:00006B8C _text$mn        segment para public 'CODE' use32
.text$mn:00006B8C                 assume cs:_text$mn
.text$mn:00006B8C                 ;org 6B8Ch
.text$mn:00006B8C ; COMDAT (pick any)
.text$mn:00006B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B8C
.text$mn:00006B8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006B8C
.text$mn:00006B8C ; Attributes: bp-based frame
.text$mn:00006B8C
.text$mn:00006B8C ; struct Style *__thiscall WordStyleDlg::getCurrentStyler(WordStyleDlg *__hidden this)
.text$mn:00006B8C                 public ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ
.text$mn:00006B8C ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ proc near
.text$mn:00006B8C                                         ; CODE XREF: WordStyleDlg::updateColour(bool)+Cp
.text$mn:00006B8C                                         ; WordStyleDlg::updateFontStyleStatus(fontStyleType)+Cp ...
.text$mn:00006B8C
.text$mn:00006B8C var_C           = dword ptr -0Ch
.text$mn:00006B8C var_8           = dword ptr -8
.text$mn:00006B8C var_4           = dword ptr -4
.text$mn:00006B8C
.text$mn:00006B8C                 push    ebp
.text$mn:00006B8D                 mov     ebp, esp
.text$mn:00006B8F                 sub     esp, 0Ch
.text$mn:00006B92                 mov     [ebp+var_4], ecx
.text$mn:00006B95                 push    0               ; lParam
.text$mn:00006B97                 push    0               ; wParam
.text$mn:00006B99                 push    188h            ; Msg
.text$mn:00006B9E                 push    901h            ; nIDDlgItem
.text$mn:00006BA3                 mov     eax, [ebp+var_4]
.text$mn:00006BA6                 mov     ecx, [eax+0Ch]
.text$mn:00006BA9                 push    ecx             ; hDlg
.text$mn:00006BAA                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00006BB0                 mov     [ebp+var_8], eax
.text$mn:00006BB3                 cmp     [ebp+var_8], 0FFFFFFFFh
.text$mn:00006BB7                 jnz     short loc_6BC0
.text$mn:00006BB9                 mov     [ebp+var_8], 0
.text$mn:00006BC0
.text$mn:00006BC0 loc_6BC0:                               ; CODE XREF: WordStyleDlg::getCurrentStyler(void)+2Bj
.text$mn:00006BC0                 mov     edx, [ebp+var_4]
.text$mn:00006BC3                 cmp     dword ptr [edx+28h], 0
.text$mn:00006BC7                 jnz     short loc_6BDF
.text$mn:00006BC9                 mov     eax, [ebp+var_8]
.text$mn:00006BCC                 push    eax             ; int
.text$mn:00006BCD                 mov     ecx, [ebp+var_4]
.text$mn:00006BD0                 add     ecx, 1B860h     ; this
.text$mn:00006BD6                 call    ?getStyler@StyleArray@@QAEAAUStyle@@H@Z ; StyleArray::getStyler(int)
.text$mn:00006BDB                 jmp     short loc_6C03
.text$mn:00006BDD ; ---------------------------------------------------------------------------
.text$mn:00006BDD                 jmp     short loc_6C03
.text$mn:00006BDF ; ---------------------------------------------------------------------------
.text$mn:00006BDF
.text$mn:00006BDF loc_6BDF:                               ; CODE XREF: WordStyleDlg::getCurrentStyler(void)+3Bj
.text$mn:00006BDF                 mov     ecx, [ebp+var_4]
.text$mn:00006BE2                 mov     edx, [ecx+28h]
.text$mn:00006BE5                 sub     edx, 1
.text$mn:00006BE8                 push    edx             ; int
.text$mn:00006BE9                 mov     ecx, [ebp+var_4]
.text$mn:00006BEC                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00006BEF                 call    ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z ; LexerStylerArray::getLexerFromIndex(int)
.text$mn:00006BF4                 mov     [ebp+var_C], eax
.text$mn:00006BF7                 mov     eax, [ebp+var_8]
.text$mn:00006BFA                 push    eax             ; int
.text$mn:00006BFB                 mov     ecx, [ebp+var_C] ; this
.text$mn:00006BFE                 call    ?getStyler@StyleArray@@QAEAAUStyle@@H@Z ; StyleArray::getStyler(int)
.text$mn:00006C03
.text$mn:00006C03 loc_6C03:                               ; CODE XREF: WordStyleDlg::getCurrentStyler(void)+4Fj
.text$mn:00006C03                                         ; WordStyleDlg::getCurrentStyler(void)+51j
.text$mn:00006C03                 mov     esp, ebp
.text$mn:00006C05                 pop     ebp
.text$mn:00006C06                 retn
.text$mn:00006C06 ?getCurrentStyler@WordStyleDlg@@AAEAAUStyle@@XZ endp
.text$mn:00006C06
.text$mn:00006C06 ; ---------------------------------------------------------------------------
.text$mn:00006C07                 align 4
.text$mn:00006C07 _text$mn        ends
.text$mn:00006C07
.text$mn:00006C08 ; ===========================================================================
.text$mn:00006C08
.text$mn:00006C08 ; Segment type: Pure code
.text$mn:00006C08 ; Segment permissions: Read/Execute
.text$mn:00006C08 _text$mn        segment para public 'CODE' use32
.text$mn:00006C08                 assume cs:_text$mn
.text$mn:00006C08                 ;org 6C08h
.text$mn:00006C08 ; COMDAT (pick any)
.text$mn:00006C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C08
.text$mn:00006C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C08
.text$mn:00006C08 ; Attributes: bp-based frame
.text$mn:00006C08
.text$mn:00006C08 ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> & __thiscall ThemeSwitcher::getElementFromIndex(unsigned int)
.text$mn:00006C08                 public ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z
.text$mn:00006C08 ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z proc near
.text$mn:00006C08                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1FBp
.text$mn:00006C08                                         ; WordStyleDlg::switchToTheme(void)+A9p
.text$mn:00006C08
.text$mn:00006C08 var_4           = dword ptr -4
.text$mn:00006C08 arg_0           = dword ptr  8
.text$mn:00006C08
.text$mn:00006C08                 push    ebp
.text$mn:00006C09                 mov     ebp, esp
.text$mn:00006C0B                 push    ecx
.text$mn:00006C0C                 mov     [ebp+var_4], ecx
.text$mn:00006C0F                 mov     eax, [ebp+arg_0]
.text$mn:00006C12                 push    eax
.text$mn:00006C13                 mov     ecx, [ebp+var_4]
.text$mn:00006C16                 call    ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)
.text$mn:00006C1B                 mov     esp, ebp
.text$mn:00006C1D                 pop     ebp
.text$mn:00006C1E                 retn    4
.text$mn:00006C1E ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z endp
.text$mn:00006C1E
.text$mn:00006C1E ; ---------------------------------------------------------------------------
.text$mn:00006C21                 align 4
.text$mn:00006C21 _text$mn        ends
.text$mn:00006C21
.text$mn:00006C24 ; ===========================================================================
.text$mn:00006C24
.text$mn:00006C24 ; Segment type: Pure code
.text$mn:00006C24 ; Segment permissions: Read/Execute
.text$mn:00006C24 _text$mn        segment para public 'CODE' use32
.text$mn:00006C24                 assume cs:_text$mn
.text$mn:00006C24                 ;org 6C24h
.text$mn:00006C24 ; COMDAT (pick any)
.text$mn:00006C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C24
.text$mn:00006C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C24
.text$mn:00006C24 ; Attributes: bp-based frame
.text$mn:00006C24
.text$mn:00006C24 ; public: long (__stdcall *__thiscall NppParameters::getEnableThemeDlgTexture(void)const)(struct HWND__ *, unsigned int, unsigned int, long)
.text$mn:00006C24                 public ?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ
.text$mn:00006C24 ?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ proc near
.text$mn:00006C24                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5A1p
.text$mn:00006C24
.text$mn:00006C24 var_4           = dword ptr -4
.text$mn:00006C24
.text$mn:00006C24                 push    ebp
.text$mn:00006C25                 mov     ebp, esp
.text$mn:00006C27                 push    ecx
.text$mn:00006C28                 mov     [ebp+var_4], ecx
.text$mn:00006C2B                 mov     eax, [ebp+var_4]
.text$mn:00006C2E                 mov     eax, [eax+1C8FCh]
.text$mn:00006C34                 mov     esp, ebp
.text$mn:00006C36                 pop     ebp
.text$mn:00006C37                 retn
.text$mn:00006C37 ?getEnableThemeDlgTexture@NppParameters@@QBEP6GJPAUHWND__@@IIJ@ZXZ endp
.text$mn:00006C37
.text$mn:00006C37 _text$mn        ends
.text$mn:00006C37
.text$mn:00006C38 ; ===========================================================================
.text$mn:00006C38
.text$mn:00006C38 ; Segment type: Pure code
.text$mn:00006C38 ; Segment permissions: Read/Execute
.text$mn:00006C38 _text$mn        segment para public 'CODE' use32
.text$mn:00006C38                 assume cs:_text$mn
.text$mn:00006C38                 ;org 6C38h
.text$mn:00006C38 ; COMDAT (pick any)
.text$mn:00006C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C38
.text$mn:00006C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C38
.text$mn:00006C38 ; Attributes: bp-based frame
.text$mn:00006C38
.text$mn:00006C38 ; public: class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const & __thiscall NppParameters::getFontList(void)const
.text$mn:00006C38                 public ?getFontList@NppParameters@@QBEABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ
.text$mn:00006C38 ?getFontList@NppParameters@@QBEABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ proc near
.text$mn:00006C38                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+2F5p
.text$mn:00006C38
.text$mn:00006C38 var_4           = dword ptr -4
.text$mn:00006C38
.text$mn:00006C38                 push    ebp
.text$mn:00006C39                 mov     ebp, esp
.text$mn:00006C3B                 push    ecx
.text$mn:00006C3C                 mov     [ebp+var_4], ecx
.text$mn:00006C3F                 mov     eax, [ebp+var_4]
.text$mn:00006C42                 add     eax, 1C8C4h
.text$mn:00006C47                 mov     esp, ebp
.text$mn:00006C49                 pop     ebp
.text$mn:00006C4A                 retn
.text$mn:00006C4A ?getFontList@NppParameters@@QBEABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ endp
.text$mn:00006C4A
.text$mn:00006C4A ; ---------------------------------------------------------------------------
.text$mn:00006C4B                 align 4
.text$mn:00006C4B _text$mn        ends
.text$mn:00006C4B
.text$mn:00006C4C ; ===========================================================================
.text$mn:00006C4C
.text$mn:00006C4C ; Segment type: Pure code
.text$mn:00006C4C ; Segment permissions: Read/Execute
.text$mn:00006C4C _text$mn        segment para public 'CODE' use32
.text$mn:00006C4C                 assume cs:_text$mn
.text$mn:00006C4C                 ;org 6C4Ch
.text$mn:00006C4C ; COMDAT (pick any)
.text$mn:00006C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C4C
.text$mn:00006C4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C4C
.text$mn:00006C4C ; Attributes: bp-based frame
.text$mn:00006C4C
.text$mn:00006C4C ; struct GlobalOverride *__thiscall NppParameters::getGlobalOverrideStyle(NppParameters *__hidden this)
.text$mn:00006C4C                 public ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ
.text$mn:00006C4C ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ proc near
.text$mn:00006C4C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+BEBp
.text$mn:00006C4C                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+C5Ap ...
.text$mn:00006C4C
.text$mn:00006C4C var_4           = dword ptr -4
.text$mn:00006C4C
.text$mn:00006C4C                 push    ebp
.text$mn:00006C4D                 mov     ebp, esp
.text$mn:00006C4F                 push    ecx
.text$mn:00006C50                 mov     [ebp+var_4], ecx
.text$mn:00006C53                 mov     eax, [ebp+var_4]
.text$mn:00006C56                 add     eax, 2FCh
.text$mn:00006C5B                 mov     esp, ebp
.text$mn:00006C5D                 pop     ebp
.text$mn:00006C5E                 retn
.text$mn:00006C5E ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ endp
.text$mn:00006C5E
.text$mn:00006C5E ; ---------------------------------------------------------------------------
.text$mn:00006C5F                 align 10h
.text$mn:00006C5F _text$mn        ends
.text$mn:00006C5F
.text$mn:00006C60 ; ===========================================================================
.text$mn:00006C60
.text$mn:00006C60 ; Segment type: Pure code
.text$mn:00006C60 ; Segment permissions: Read/Execute
.text$mn:00006C60 _text$mn        segment para public 'CODE' use32
.text$mn:00006C60                 assume cs:_text$mn
.text$mn:00006C60                 ;org 6C60h
.text$mn:00006C60 ; COMDAT (pick any)
.text$mn:00006C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C60
.text$mn:00006C60 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C60
.text$mn:00006C60 ; Attributes: bp-based frame
.text$mn:00006C60
.text$mn:00006C60 ; struct StyleArray *__thiscall NppParameters::getGlobalStylers(NppParameters *__hidden this)
.text$mn:00006C60                 public ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ
.text$mn:00006C60 ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ proc near
.text$mn:00006C60                                         ; CODE XREF: WordStyleDlg::apply(void)+1Fp
.text$mn:00006C60                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+897p ...
.text$mn:00006C60
.text$mn:00006C60 var_4           = dword ptr -4
.text$mn:00006C60
.text$mn:00006C60                 push    ebp
.text$mn:00006C61                 mov     ebp, esp
.text$mn:00006C63                 push    ecx
.text$mn:00006C64                 mov     [ebp+var_4], ecx
.text$mn:00006C67                 mov     eax, [ebp+var_4]
.text$mn:00006C6A                 add     eax, 1C398h
.text$mn:00006C6F                 mov     esp, ebp
.text$mn:00006C71                 pop     ebp
.text$mn:00006C72                 retn
.text$mn:00006C72 ?getGlobalStylers@NppParameters@@QAEAAUStyleArray@@XZ endp
.text$mn:00006C72
.text$mn:00006C72 ; ---------------------------------------------------------------------------
.text$mn:00006C73                 align 4
.text$mn:00006C73 _text$mn        ends
.text$mn:00006C73
.text$mn:00006C74 ; ===========================================================================
.text$mn:00006C74
.text$mn:00006C74 ; Segment type: Pure code
.text$mn:00006C74 ; Segment permissions: Read/Execute
.text$mn:00006C74 _text$mn        segment para public 'CODE' use32
.text$mn:00006C74                 assume cs:_text$mn
.text$mn:00006C74                 ;org 6C74h
.text$mn:00006C74 ; COMDAT (pick any)
.text$mn:00006C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C74
.text$mn:00006C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C74
.text$mn:00006C74 ; Attributes: bp-based frame
.text$mn:00006C74
.text$mn:00006C74 ; HWND __thiscall Window::getHSelf(Window *__hidden this)
.text$mn:00006C74                 public ?getHSelf@Window@@QBEPAUHWND__@@XZ
.text$mn:00006C74 ?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
.text$mn:00006C74                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+482p
.text$mn:00006C74                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+4A3p ...
.text$mn:00006C74
.text$mn:00006C74 var_4           = dword ptr -4
.text$mn:00006C74
.text$mn:00006C74                 push    ebp
.text$mn:00006C75                 mov     ebp, esp
.text$mn:00006C77                 push    ecx
.text$mn:00006C78                 mov     [ebp+var_4], ecx
.text$mn:00006C7B                 mov     eax, [ebp+var_4]
.text$mn:00006C7E                 mov     eax, [eax+0Ch]
.text$mn:00006C81                 mov     esp, ebp
.text$mn:00006C83                 pop     ebp
.text$mn:00006C84                 retn
.text$mn:00006C84 ?getHSelf@Window@@QBEPAUHWND__@@XZ endp
.text$mn:00006C84
.text$mn:00006C84 ; ---------------------------------------------------------------------------
.text$mn:00006C85                 align 4
.text$mn:00006C85 _text$mn        ends
.text$mn:00006C85
.text$mn:00006C88 ; ===========================================================================
.text$mn:00006C88
.text$mn:00006C88 ; Segment type: Pure code
.text$mn:00006C88 ; Segment permissions: Read/Execute
.text$mn:00006C88 _text$mn        segment para public 'CODE' use32
.text$mn:00006C88                 assume cs:_text$mn
.text$mn:00006C88                 ;org 6C88h
.text$mn:00006C88 ; COMDAT (pick any)
.text$mn:00006C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C88
.text$mn:00006C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C88
.text$mn:00006C88 ; Attributes: bp-based frame
.text$mn:00006C88
.text$mn:00006C88 ; int __thiscall Window::getHeight(Window *__hidden this)
.text$mn:00006C88                 public ?getHeight@Window@@UBEHXZ
.text$mn:00006C88 ?getHeight@Window@@UBEHXZ proc near     ; DATA XREF: .rdata:00008258o
.text$mn:00006C88                                         ; .rdata:0000828Co
.text$mn:00006C88
.text$mn:00006C88 var_18          = dword ptr -18h
.text$mn:00006C88 Rect            = tagRECT ptr -14h
.text$mn:00006C88 var_4           = dword ptr -4
.text$mn:00006C88
.text$mn:00006C88                 push    ebp
.text$mn:00006C89                 mov     ebp, esp
.text$mn:00006C8B                 sub     esp, 18h
.text$mn:00006C8E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C93                 xor     eax, ebp
.text$mn:00006C95                 mov     [ebp+var_4], eax
.text$mn:00006C98                 mov     [ebp+var_18], ecx
.text$mn:00006C9B                 lea     eax, [ebp+Rect]
.text$mn:00006C9E                 push    eax             ; lpRect
.text$mn:00006C9F                 mov     ecx, [ebp+var_18]
.text$mn:00006CA2                 mov     edx, [ecx+0Ch]
.text$mn:00006CA5                 push    edx             ; hWnd
.text$mn:00006CA6                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00006CAC                 mov     eax, [ebp+var_18]
.text$mn:00006CAF                 mov     ecx, [eax+0Ch]
.text$mn:00006CB2                 push    ecx             ; hWnd
.text$mn:00006CB3                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00006CB9                 cmp     eax, 1
.text$mn:00006CBC                 jnz     short loc_6CC6
.text$mn:00006CBE                 mov     eax, [ebp+Rect.bottom]
.text$mn:00006CC1                 sub     eax, [ebp+Rect.top]
.text$mn:00006CC4                 jmp     short loc_6CC8
.text$mn:00006CC6 ; ---------------------------------------------------------------------------
.text$mn:00006CC6
.text$mn:00006CC6 loc_6CC6:                               ; CODE XREF: Window::getHeight(void)+34j
.text$mn:00006CC6                 xor     eax, eax
.text$mn:00006CC8
.text$mn:00006CC8 loc_6CC8:                               ; CODE XREF: Window::getHeight(void)+3Cj
.text$mn:00006CC8                 mov     ecx, [ebp+var_4]
.text$mn:00006CCB                 xor     ecx, ebp
.text$mn:00006CCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00006CD2                 mov     esp, ebp
.text$mn:00006CD4                 pop     ebp
.text$mn:00006CD5                 retn
.text$mn:00006CD5 ?getHeight@Window@@UBEHXZ endp
.text$mn:00006CD5
.text$mn:00006CD5 ; ---------------------------------------------------------------------------
.text$mn:00006CD6                 align 4
.text$mn:00006CD6 _text$mn        ends
.text$mn:00006CD6
.text$mn:00006CD8 ; ===========================================================================
.text$mn:00006CD8
.text$mn:00006CD8 ; Segment type: Pure code
.text$mn:00006CD8 ; Segment permissions: Read/Execute
.text$mn:00006CD8 _text$mn        segment para public 'CODE' use32
.text$mn:00006CD8                 assume cs:_text$mn
.text$mn:00006CD8                 ;org 6CD8h
.text$mn:00006CD8 ; COMDAT (pick any)
.text$mn:00006CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CD8
.text$mn:00006CD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CD8
.text$mn:00006CD8 ; Attributes: bp-based frame
.text$mn:00006CD8
.text$mn:00006CD8 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00006CD8                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00006CD8 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00006CD8                                         ; CODE XREF: WordStyleDlg::create(int,bool)+1Ap
.text$mn:00006CD8                                         ; WordStyleDlg::apply(void)+9p ...
.text$mn:00006CD8                 push    ebp
.text$mn:00006CD9                 mov     ebp, esp
.text$mn:00006CDB                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00006CE0                 pop     ebp
.text$mn:00006CE1                 retn
.text$mn:00006CE1 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00006CE1
.text$mn:00006CE1 ; ---------------------------------------------------------------------------
.text$mn:00006CE2                 align 4
.text$mn:00006CE2 _text$mn        ends
.text$mn:00006CE2
.text$mn:00006CE4 ; ===========================================================================
.text$mn:00006CE4
.text$mn:00006CE4 ; Segment type: Pure code
.text$mn:00006CE4 ; Segment permissions: Read/Execute
.text$mn:00006CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00006CE4                 assume cs:_text$mn
.text$mn:00006CE4                 ;org 6CE4h
.text$mn:00006CE4 ; COMDAT (pick any)
.text$mn:00006CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CE4
.text$mn:00006CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CE4
.text$mn:00006CE4 ; Attributes: bp-based frame
.text$mn:00006CE4
.text$mn:00006CE4 ; struct LexerStylerArray *__thiscall NppParameters::getLStylerArray(NppParameters *__hidden this)
.text$mn:00006CE4                 public ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ
.text$mn:00006CE4 ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ proc near
.text$mn:00006CE4                                         ; CODE XREF: WordStyleDlg::apply(void)+10p
.text$mn:00006CE4                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+889p ...
.text$mn:00006CE4
.text$mn:00006CE4 var_4           = dword ptr -4
.text$mn:00006CE4
.text$mn:00006CE4                 push    ebp
.text$mn:00006CE5                 mov     ebp, esp
.text$mn:00006CE7                 push    ecx
.text$mn:00006CE8                 mov     [ebp+var_4], ecx
.text$mn:00006CEB                 mov     eax, [ebp+var_4]
.text$mn:00006CEE                 add     eax, 0B94h
.text$mn:00006CF3                 mov     esp, ebp
.text$mn:00006CF5                 pop     ebp
.text$mn:00006CF6                 retn
.text$mn:00006CF6 ?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ endp
.text$mn:00006CF6
.text$mn:00006CF6 ; ---------------------------------------------------------------------------
.text$mn:00006CF7                 align 4
.text$mn:00006CF7 _text$mn        ends
.text$mn:00006CF7
.text$mn:00006CF8 ; ===========================================================================
.text$mn:00006CF8
.text$mn:00006CF8 ; Segment type: Pure code
.text$mn:00006CF8 ; Segment permissions: Read/Execute
.text$mn:00006CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00006CF8                 assume cs:_text$mn
.text$mn:00006CF8                 ;org 6CF8h
.text$mn:00006CF8 ; COMDAT (pick any)
.text$mn:00006CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CF8
.text$mn:00006CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CF8
.text$mn:00006CF8 ; Attributes: bp-based frame
.text$mn:00006CF8
.text$mn:00006CF8 ; const wchar_t *__thiscall NppParameters::getLangExtFromName(NppParameters *this, const wchar_t *)
.text$mn:00006CF8                 public ?getLangExtFromName@NppParameters@@QBEPB_WPB_W@Z
.text$mn:00006CF8 ?getLangExtFromName@NppParameters@@QBEPB_WPB_W@Z proc near
.text$mn:00006CF8                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+57p
.text$mn:00006CF8
.text$mn:00006CF8 var_8           = dword ptr -8
.text$mn:00006CF8 var_4           = dword ptr -4
.text$mn:00006CF8 Str             = dword ptr  8
.text$mn:00006CF8
.text$mn:00006CF8                 push    ebp
.text$mn:00006CF9                 mov     ebp, esp
.text$mn:00006CFB                 sub     esp, 8
.text$mn:00006CFE                 mov     [ebp+var_8], ecx
.text$mn:00006D01                 mov     [ebp+var_4], 0
.text$mn:00006D08                 jmp     short loc_6D13
.text$mn:00006D0A ; ---------------------------------------------------------------------------
.text$mn:00006D0A
.text$mn:00006D0A loc_6D0A:                               ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *):loc_6D57j
.text$mn:00006D0A                 mov     eax, [ebp+var_4]
.text$mn:00006D0D                 add     eax, 1
.text$mn:00006D10                 mov     [ebp+var_4], eax
.text$mn:00006D13
.text$mn:00006D13 loc_6D13:                               ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *)+10j
.text$mn:00006D13                 mov     ecx, [ebp+var_8]
.text$mn:00006D16                 mov     edx, [ebp+var_4]
.text$mn:00006D19                 cmp     edx, [ecx+92Ch]
.text$mn:00006D1F                 jge     short loc_6D59
.text$mn:00006D21                 mov     eax, [ebp+Str]
.text$mn:00006D24                 push    eax             ; Str
.text$mn:00006D25                 mov     ecx, [ebp+var_4]
.text$mn:00006D28                 mov     edx, [ebp+var_8]
.text$mn:00006D2B                 mov     eax, [edx+ecx*4+7ECh]
.text$mn:00006D32                 add     eax, 4
.text$mn:00006D35                 push    eax             ; int
.text$mn:00006D36                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00006D3B                 add     esp, 8
.text$mn:00006D3E                 movzx   ecx, al
.text$mn:00006D41                 test    ecx, ecx
.text$mn:00006D43                 jz      short loc_6D57
.text$mn:00006D45                 mov     edx, [ebp+var_4]
.text$mn:00006D48                 mov     eax, [ebp+var_8]
.text$mn:00006D4B                 mov     ecx, [eax+edx*4+7ECh]
.text$mn:00006D52                 mov     eax, [ecx+20h]
.text$mn:00006D55                 jmp     short loc_6D5B
.text$mn:00006D57 ; ---------------------------------------------------------------------------
.text$mn:00006D57
.text$mn:00006D57 loc_6D57:                               ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *)+4Bj
.text$mn:00006D57                 jmp     short loc_6D0A
.text$mn:00006D59 ; ---------------------------------------------------------------------------
.text$mn:00006D59
.text$mn:00006D59 loc_6D59:                               ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *)+27j
.text$mn:00006D59                 xor     eax, eax
.text$mn:00006D5B
.text$mn:00006D5B loc_6D5B:                               ; CODE XREF: NppParameters::getLangExtFromName(wchar_t const *)+5Dj
.text$mn:00006D5B                 mov     esp, ebp
.text$mn:00006D5D                 pop     ebp
.text$mn:00006D5E                 retn    4
.text$mn:00006D5E ?getLangExtFromName@NppParameters@@QBEPB_WPB_W@Z endp
.text$mn:00006D5E
.text$mn:00006D5E ; ---------------------------------------------------------------------------
.text$mn:00006D61                 align 4
.text$mn:00006D61 _text$mn        ends
.text$mn:00006D61
.text$mn:00006D64 ; ===========================================================================
.text$mn:00006D64
.text$mn:00006D64 ; Segment type: Pure code
.text$mn:00006D64 ; Segment permissions: Read/Execute
.text$mn:00006D64 _text$mn        segment para public 'CODE' use32
.text$mn:00006D64                 assume cs:_text$mn
.text$mn:00006D64                 ;org 6D64h
.text$mn:00006D64 ; COMDAT (pick any)
.text$mn:00006D64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D64
.text$mn:00006D64 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D64
.text$mn:00006D64 ; Attributes: bp-based frame
.text$mn:00006D64
.text$mn:00006D64 ; public: struct Lang * __thiscall NppParameters::getLangFromID(enum  LangType)const
.text$mn:00006D64                 public ?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z
.text$mn:00006D64 ?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z proc near
.text$mn:00006D64                                         ; CODE XREF: NppParameters::getWordList(LangType,int)+10p
.text$mn:00006D64
.text$mn:00006D64 var_8           = dword ptr -8
.text$mn:00006D64 var_4           = dword ptr -4
.text$mn:00006D64 arg_0           = dword ptr  8
.text$mn:00006D64
.text$mn:00006D64                 push    ebp
.text$mn:00006D65                 mov     ebp, esp
.text$mn:00006D67                 sub     esp, 8
.text$mn:00006D6A                 mov     [ebp+var_8], ecx
.text$mn:00006D6D                 mov     [ebp+var_4], 0
.text$mn:00006D74                 jmp     short loc_6D7F
.text$mn:00006D76 ; ---------------------------------------------------------------------------
.text$mn:00006D76
.text$mn:00006D76 loc_6D76:                               ; CODE XREF: NppParameters::getLangFromID(LangType):loc_6DC0j
.text$mn:00006D76                 mov     eax, [ebp+var_4]
.text$mn:00006D79                 add     eax, 1
.text$mn:00006D7C                 mov     [ebp+var_4], eax
.text$mn:00006D7F
.text$mn:00006D7F loc_6D7F:                               ; CODE XREF: NppParameters::getLangFromID(LangType)+10j
.text$mn:00006D7F                 mov     ecx, [ebp+var_8]
.text$mn:00006D82                 mov     edx, [ebp+var_4]
.text$mn:00006D85                 cmp     edx, [ecx+92Ch]
.text$mn:00006D8B                 jge     short loc_6DC2
.text$mn:00006D8D                 mov     eax, [ebp+var_4]
.text$mn:00006D90                 mov     ecx, [ebp+var_8]
.text$mn:00006D93                 mov     edx, [ecx+eax*4+7ECh]
.text$mn:00006D9A                 mov     eax, [edx]
.text$mn:00006D9C                 cmp     eax, [ebp+arg_0]
.text$mn:00006D9F                 jz      short loc_6DB1
.text$mn:00006DA1                 mov     ecx, [ebp+var_4]
.text$mn:00006DA4                 mov     edx, [ebp+var_8]
.text$mn:00006DA7                 cmp     dword ptr [edx+ecx*4+7ECh], 0
.text$mn:00006DAF                 jnz     short loc_6DC0
.text$mn:00006DB1
.text$mn:00006DB1 loc_6DB1:                               ; CODE XREF: NppParameters::getLangFromID(LangType)+3Bj
.text$mn:00006DB1                 mov     eax, [ebp+var_4]
.text$mn:00006DB4                 mov     ecx, [ebp+var_8]
.text$mn:00006DB7                 mov     eax, [ecx+eax*4+7ECh]
.text$mn:00006DBE                 jmp     short loc_6DC4
.text$mn:00006DC0 ; ---------------------------------------------------------------------------
.text$mn:00006DC0
.text$mn:00006DC0 loc_6DC0:                               ; CODE XREF: NppParameters::getLangFromID(LangType)+4Bj
.text$mn:00006DC0                 jmp     short loc_6D76
.text$mn:00006DC2 ; ---------------------------------------------------------------------------
.text$mn:00006DC2
.text$mn:00006DC2 loc_6DC2:                               ; CODE XREF: NppParameters::getLangFromID(LangType)+27j
.text$mn:00006DC2                 xor     eax, eax
.text$mn:00006DC4
.text$mn:00006DC4 loc_6DC4:                               ; CODE XREF: NppParameters::getLangFromID(LangType)+5Aj
.text$mn:00006DC4                 mov     esp, ebp
.text$mn:00006DC6                 pop     ebp
.text$mn:00006DC7                 retn    4
.text$mn:00006DC7 ?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z endp
.text$mn:00006DC7
.text$mn:00006DC7 ; ---------------------------------------------------------------------------
.text$mn:00006DCA                 align 4
.text$mn:00006DCA _text$mn        ends
.text$mn:00006DCA
.text$mn:00006DCC ; ===========================================================================
.text$mn:00006DCC
.text$mn:00006DCC ; Segment type: Pure code
.text$mn:00006DCC ; Segment permissions: Read/Execute
.text$mn:00006DCC _text$mn        segment para public 'CODE' use32
.text$mn:00006DCC                 assume cs:_text$mn
.text$mn:00006DCC                 ;org 6DCCh
.text$mn:00006DCC ; COMDAT (pick any)
.text$mn:00006DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DCC
.text$mn:00006DCC ; =============== S U B R O U T I N E =======================================
.text$mn:00006DCC
.text$mn:00006DCC ; Attributes: bp-based frame
.text$mn:00006DCC
.text$mn:00006DCC ; const wchar_t *__thiscall LexerStyler::getLexerDesc(LexerStyler *__hidden this)
.text$mn:00006DCC                 public ?getLexerDesc@LexerStyler@@QBEPB_WXZ
.text$mn:00006DCC ?getLexerDesc@LexerStyler@@QBEPB_WXZ proc near
.text$mn:00006DCC                                         ; CODE XREF: LexerStylerArray::getLexerDescFromIndex(int)+11p
.text$mn:00006DCC
.text$mn:00006DCC var_4           = dword ptr -4
.text$mn:00006DCC
.text$mn:00006DCC                 push    ebp
.text$mn:00006DCD                 mov     ebp, esp
.text$mn:00006DCF                 push    ecx
.text$mn:00006DD0                 mov     [ebp+var_4], ecx
.text$mn:00006DD3                 mov     ecx, [ebp+var_4]
.text$mn:00006DD6                 add     ecx, 548h
.text$mn:00006DDC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00006DE1                 mov     esp, ebp
.text$mn:00006DE3                 pop     ebp
.text$mn:00006DE4                 retn
.text$mn:00006DE4 ?getLexerDesc@LexerStyler@@QBEPB_WXZ endp
.text$mn:00006DE4
.text$mn:00006DE4 ; ---------------------------------------------------------------------------
.text$mn:00006DE5                 align 4
.text$mn:00006DE5 _text$mn        ends
.text$mn:00006DE5
.text$mn:00006DE8 ; ===========================================================================
.text$mn:00006DE8
.text$mn:00006DE8 ; Segment type: Pure code
.text$mn:00006DE8 ; Segment permissions: Read/Execute
.text$mn:00006DE8 _text$mn        segment para public 'CODE' use32
.text$mn:00006DE8                 assume cs:_text$mn
.text$mn:00006DE8                 ;org 6DE8h
.text$mn:00006DE8 ; COMDAT (pick any)
.text$mn:00006DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DE8
.text$mn:00006DE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DE8
.text$mn:00006DE8 ; Attributes: bp-based frame
.text$mn:00006DE8
.text$mn:00006DE8 ; const wchar_t *__thiscall LexerStylerArray::getLexerDescFromIndex(LexerStylerArray *this, int)
.text$mn:00006DE8                 public ?getLexerDescFromIndex@LexerStylerArray@@QBEPB_WH@Z
.text$mn:00006DE8 ?getLexerDescFromIndex@LexerStylerArray@@QBEPB_WH@Z proc near
.text$mn:00006DE8                                         ; CODE XREF: WordStyleDlg::loadLangListFromNppParam(void)+A7p
.text$mn:00006DE8
.text$mn:00006DE8 var_4           = dword ptr -4
.text$mn:00006DE8 arg_0           = dword ptr  8
.text$mn:00006DE8
.text$mn:00006DE8                 push    ebp
.text$mn:00006DE9                 mov     ebp, esp
.text$mn:00006DEB                 push    ecx
.text$mn:00006DEC                 mov     [ebp+var_4], ecx
.text$mn:00006DEF                 imul    ecx, [ebp+arg_0], 580h
.text$mn:00006DF6                 add     ecx, [ebp+var_4] ; this
.text$mn:00006DF9                 call    ?getLexerDesc@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerDesc(void)
.text$mn:00006DFE                 mov     esp, ebp
.text$mn:00006E00                 pop     ebp
.text$mn:00006E01                 retn    4
.text$mn:00006E01 ?getLexerDescFromIndex@LexerStylerArray@@QBEPB_WH@Z endp
.text$mn:00006E01
.text$mn:00006E01 _text$mn        ends
.text$mn:00006E01
.text$mn:00006E04 ; ===========================================================================
.text$mn:00006E04
.text$mn:00006E04 ; Segment type: Pure code
.text$mn:00006E04 ; Segment permissions: Read/Execute
.text$mn:00006E04 _text$mn        segment para public 'CODE' use32
.text$mn:00006E04                 assume cs:_text$mn
.text$mn:00006E04                 ;org 6E04h
.text$mn:00006E04 ; COMDAT (pick any)
.text$mn:00006E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E04
.text$mn:00006E04 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E04
.text$mn:00006E04 ; Attributes: bp-based frame
.text$mn:00006E04
.text$mn:00006E04 ; struct LexerStyler *__thiscall LexerStylerArray::getLexerFromIndex(LexerStylerArray *this, int)
.text$mn:00006E04                 public ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z
.text$mn:00006E04 ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z proc near
.text$mn:00006E04                                         ; CODE XREF: WordStyleDlg::updateExtension(void)+63p
.text$mn:00006E04                                         ; WordStyleDlg::setStyleListFromLexer(int)+22Bp ...
.text$mn:00006E04
.text$mn:00006E04 var_4           = dword ptr -4
.text$mn:00006E04 arg_0           = dword ptr  8
.text$mn:00006E04
.text$mn:00006E04                 push    ebp
.text$mn:00006E05                 mov     ebp, esp
.text$mn:00006E07                 push    ecx
.text$mn:00006E08                 mov     [ebp+var_4], ecx
.text$mn:00006E0B                 imul    eax, [ebp+arg_0], 580h
.text$mn:00006E12                 add     eax, [ebp+var_4]
.text$mn:00006E15                 mov     esp, ebp
.text$mn:00006E17                 pop     ebp
.text$mn:00006E18                 retn    4
.text$mn:00006E18 ?getLexerFromIndex@LexerStylerArray@@QAEAAULexerStyler@@H@Z endp
.text$mn:00006E18
.text$mn:00006E18 ; ---------------------------------------------------------------------------
.text$mn:00006E1B                 align 4
.text$mn:00006E1B _text$mn        ends
.text$mn:00006E1B
.text$mn:00006E1C ; ===========================================================================
.text$mn:00006E1C
.text$mn:00006E1C ; Segment type: Pure code
.text$mn:00006E1C ; Segment permissions: Read/Execute
.text$mn:00006E1C _text$mn        segment para public 'CODE' use32
.text$mn:00006E1C                 assume cs:_text$mn
.text$mn:00006E1C                 ;org 6E1Ch
.text$mn:00006E1C ; COMDAT (pick any)
.text$mn:00006E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E1C
.text$mn:00006E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E1C
.text$mn:00006E1C ; Attributes: bp-based frame
.text$mn:00006E1C
.text$mn:00006E1C ; const wchar_t *__thiscall LexerStyler::getLexerName(LexerStyler *__hidden this)
.text$mn:00006E1C                 public ?getLexerName@LexerStyler@@QBEPB_WXZ
.text$mn:00006E1C ?getLexerName@LexerStyler@@QBEPB_WXZ proc near
.text$mn:00006E1C                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+608p
.text$mn:00006E1C                                         ; WordStyleDlg::setVisualFromStyleList(void)+62Bp ...
.text$mn:00006E1C
.text$mn:00006E1C var_4           = dword ptr -4
.text$mn:00006E1C
.text$mn:00006E1C                 push    ebp
.text$mn:00006E1D                 mov     ebp, esp
.text$mn:00006E1F                 push    ecx
.text$mn:00006E20                 mov     [ebp+var_4], ecx
.text$mn:00006E23                 mov     ecx, [ebp+var_4]
.text$mn:00006E26                 add     ecx, 52Ch
.text$mn:00006E2C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00006E31                 mov     esp, ebp
.text$mn:00006E33                 pop     ebp
.text$mn:00006E34                 retn
.text$mn:00006E34 ?getLexerName@LexerStyler@@QBEPB_WXZ endp
.text$mn:00006E34
.text$mn:00006E34 ; ---------------------------------------------------------------------------
.text$mn:00006E35                 align 4
.text$mn:00006E35 _text$mn        ends
.text$mn:00006E35
.text$mn:00006E38 ; ===========================================================================
.text$mn:00006E38
.text$mn:00006E38 ; Segment type: Pure code
.text$mn:00006E38 ; Segment permissions: Read/Execute
.text$mn:00006E38 _text$mn        segment para public 'CODE' use32
.text$mn:00006E38                 assume cs:_text$mn
.text$mn:00006E38                 ;org 6E38h
.text$mn:00006E38 ; COMDAT (pick any)
.text$mn:00006E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E38
.text$mn:00006E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E38
.text$mn:00006E38 ; Attributes: bp-based frame
.text$mn:00006E38
.text$mn:00006E38 ; const wchar_t *__thiscall LexerStylerArray::getLexerNameFromIndex(LexerStylerArray *this, int)
.text$mn:00006E38                 public ?getLexerNameFromIndex@LexerStylerArray@@QBEPB_WH@Z
.text$mn:00006E38 ?getLexerNameFromIndex@LexerStylerArray@@QBEPB_WH@Z proc near
.text$mn:00006E38                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+44p
.text$mn:00006E38
.text$mn:00006E38 var_4           = dword ptr -4
.text$mn:00006E38 arg_0           = dword ptr  8
.text$mn:00006E38
.text$mn:00006E38                 push    ebp
.text$mn:00006E39                 mov     ebp, esp
.text$mn:00006E3B                 push    ecx
.text$mn:00006E3C                 mov     [ebp+var_4], ecx
.text$mn:00006E3F                 imul    ecx, [ebp+arg_0], 580h
.text$mn:00006E46                 add     ecx, [ebp+var_4] ; this
.text$mn:00006E49                 call    ?getLexerName@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerName(void)
.text$mn:00006E4E                 mov     esp, ebp
.text$mn:00006E50                 pop     ebp
.text$mn:00006E51                 retn    4
.text$mn:00006E51 ?getLexerNameFromIndex@LexerStylerArray@@QBEPB_WH@Z endp
.text$mn:00006E51
.text$mn:00006E51 _text$mn        ends
.text$mn:00006E51
.text$mn:00006E54 ; ===========================================================================
.text$mn:00006E54
.text$mn:00006E54 ; Segment type: Pure code
.text$mn:00006E54 ; Segment permissions: Read/Execute
.text$mn:00006E54 _text$mn        segment para public 'CODE' use32
.text$mn:00006E54                 assume cs:_text$mn
.text$mn:00006E54                 ;org 6E54h
.text$mn:00006E54 ; COMDAT (pick any)
.text$mn:00006E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E54
.text$mn:00006E54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E54
.text$mn:00006E54 ; Attributes: bp-based frame
.text$mn:00006E54
.text$mn:00006E54 ; struct LexerStyler *__thiscall LexerStylerArray::getLexerStylerByName(LexerStylerArray *this, const wchar_t *)
.text$mn:00006E54                 public ?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z
.text$mn:00006E54 ?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z proc near
.text$mn:00006E54                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+69p
.text$mn:00006E54
.text$mn:00006E54 var_8           = dword ptr -8
.text$mn:00006E54 var_4           = dword ptr -4
.text$mn:00006E54 lpString2       = dword ptr  8
.text$mn:00006E54
.text$mn:00006E54                 push    ebp
.text$mn:00006E55                 mov     ebp, esp
.text$mn:00006E57                 sub     esp, 8
.text$mn:00006E5A                 mov     [ebp+var_8], ecx
.text$mn:00006E5D                 cmp     [ebp+lpString2], 0
.text$mn:00006E61                 jnz     short loc_6E67
.text$mn:00006E63                 xor     eax, eax
.text$mn:00006E65                 jmp     short loc_6EB5
.text$mn:00006E67 ; ---------------------------------------------------------------------------
.text$mn:00006E67
.text$mn:00006E67 loc_6E67:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *)+Dj
.text$mn:00006E67                 mov     [ebp+var_4], 0
.text$mn:00006E6E                 jmp     short loc_6E79
.text$mn:00006E70 ; ---------------------------------------------------------------------------
.text$mn:00006E70
.text$mn:00006E70 loc_6E70:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *):loc_6EB1j
.text$mn:00006E70                 mov     eax, [ebp+var_4]
.text$mn:00006E73                 add     eax, 1
.text$mn:00006E76                 mov     [ebp+var_4], eax
.text$mn:00006E79
.text$mn:00006E79 loc_6E79:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *)+1Aj
.text$mn:00006E79                 mov     ecx, [ebp+var_8]
.text$mn:00006E7C                 mov     edx, [ebp+var_4]
.text$mn:00006E7F                 cmp     edx, [ecx+1B800h]
.text$mn:00006E85                 jge     short loc_6EB3
.text$mn:00006E87                 mov     eax, [ebp+lpString2]
.text$mn:00006E8A                 push    eax             ; lpString2
.text$mn:00006E8B                 imul    ecx, [ebp+var_4], 580h
.text$mn:00006E92                 add     ecx, [ebp+var_8] ; this
.text$mn:00006E95                 call    ?getLexerName@LexerStyler@@QBEPB_WXZ ; LexerStyler::getLexerName(void)
.text$mn:00006E9A                 push    eax             ; lpString1
.text$mn:00006E9B                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00006EA1                 test    eax, eax
.text$mn:00006EA3                 jnz     short loc_6EB1
.text$mn:00006EA5                 imul    eax, [ebp+var_4], 580h
.text$mn:00006EAC                 add     eax, [ebp+var_8]
.text$mn:00006EAF                 jmp     short loc_6EB5
.text$mn:00006EB1 ; ---------------------------------------------------------------------------
.text$mn:00006EB1
.text$mn:00006EB1 loc_6EB1:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *)+4Fj
.text$mn:00006EB1                 jmp     short loc_6E70
.text$mn:00006EB3 ; ---------------------------------------------------------------------------
.text$mn:00006EB3
.text$mn:00006EB3 loc_6EB3:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *)+31j
.text$mn:00006EB3                 xor     eax, eax
.text$mn:00006EB5
.text$mn:00006EB5 loc_6EB5:                               ; CODE XREF: LexerStylerArray::getLexerStylerByName(wchar_t const *)+11j
.text$mn:00006EB5                                         ; LexerStylerArray::getLexerStylerByName(wchar_t const *)+5Bj
.text$mn:00006EB5                 mov     esp, ebp
.text$mn:00006EB7                 pop     ebp
.text$mn:00006EB8                 retn    4
.text$mn:00006EB8 ?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z endp
.text$mn:00006EB8
.text$mn:00006EB8 ; ---------------------------------------------------------------------------
.text$mn:00006EBB                 align 4
.text$mn:00006EBB _text$mn        ends
.text$mn:00006EBB
.text$mn:00006EBC ; ===========================================================================
.text$mn:00006EBC
.text$mn:00006EBC ; Segment type: Pure code
.text$mn:00006EBC ; Segment permissions: Read/Execute
.text$mn:00006EBC _text$mn        segment para public 'CODE' use32
.text$mn:00006EBC                 assume cs:_text$mn
.text$mn:00006EBC                 ;org 6EBCh
.text$mn:00006EBC ; COMDAT (pick any)
.text$mn:00006EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EBC
.text$mn:00006EBC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EBC
.text$mn:00006EBC ; Attributes: bp-based frame
.text$mn:00006EBC
.text$mn:00006EBC ; const wchar_t *__thiscall LexerStyler::getLexerUserExt(LexerStyler *__hidden this)
.text$mn:00006EBC                 public ?getLexerUserExt@LexerStyler@@QBEPB_WXZ
.text$mn:00006EBC ?getLexerUserExt@LexerStyler@@QBEPB_WXZ proc near
.text$mn:00006EBC                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+70p
.text$mn:00006EBC
.text$mn:00006EBC var_4           = dword ptr -4
.text$mn:00006EBC
.text$mn:00006EBC                 push    ebp
.text$mn:00006EBD                 mov     ebp, esp
.text$mn:00006EBF                 push    ecx
.text$mn:00006EC0                 mov     [ebp+var_4], ecx
.text$mn:00006EC3                 mov     ecx, [ebp+var_4]
.text$mn:00006EC6                 add     ecx, 564h
.text$mn:00006ECC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00006ED1                 mov     esp, ebp
.text$mn:00006ED3                 pop     ebp
.text$mn:00006ED4                 retn
.text$mn:00006ED4 ?getLexerUserExt@LexerStyler@@QBEPB_WXZ endp
.text$mn:00006ED4
.text$mn:00006ED4 ; ---------------------------------------------------------------------------
.text$mn:00006ED5                 align 4
.text$mn:00006ED5 _text$mn        ends
.text$mn:00006ED5
.text$mn:00006ED8 ; ===========================================================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Segment type: Pure code
.text$mn:00006ED8 ; Segment permissions: Read/Execute
.text$mn:00006ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED8                 assume cs:_text$mn
.text$mn:00006ED8                 ;org 6ED8h
.text$mn:00006ED8 ; COMDAT (pick any)
.text$mn:00006ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED8
.text$mn:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Attributes: bp-based frame
.text$mn:00006ED8
.text$mn:00006ED8 ; int __thiscall LexerStylerArray::getNbLexer(LexerStylerArray *__hidden this)
.text$mn:00006ED8                 public ?getNbLexer@LexerStylerArray@@QBEHXZ
.text$mn:00006ED8 ?getNbLexer@LexerStylerArray@@QBEHXZ proc near
.text$mn:00006ED8                                         ; CODE XREF: WordStyleDlg::loadLangListFromNppParam(void)+82p
.text$mn:00006ED8
.text$mn:00006ED8 var_4           = dword ptr -4
.text$mn:00006ED8
.text$mn:00006ED8                 push    ebp
.text$mn:00006ED9                 mov     ebp, esp
.text$mn:00006EDB                 push    ecx
.text$mn:00006EDC                 mov     [ebp+var_4], ecx
.text$mn:00006EDF                 mov     eax, [ebp+var_4]
.text$mn:00006EE2                 mov     eax, [eax+1B800h]
.text$mn:00006EE8                 mov     esp, ebp
.text$mn:00006EEA                 pop     ebp
.text$mn:00006EEB                 retn
.text$mn:00006EEB ?getNbLexer@LexerStylerArray@@QBEHXZ endp
.text$mn:00006EEB
.text$mn:00006EEB _text$mn        ends
.text$mn:00006EEB
.text$mn:00006EEC ; ===========================================================================
.text$mn:00006EEC
.text$mn:00006EEC ; Segment type: Pure code
.text$mn:00006EEC ; Segment permissions: Read/Execute
.text$mn:00006EEC _text$mn        segment para public 'CODE' use32
.text$mn:00006EEC                 assume cs:_text$mn
.text$mn:00006EEC                 ;org 6EECh
.text$mn:00006EEC ; COMDAT (pick any)
.text$mn:00006EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EEC
.text$mn:00006EEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EEC
.text$mn:00006EEC ; Attributes: bp-based frame
.text$mn:00006EEC
.text$mn:00006EEC ; int __thiscall StyleArray::getNbStyler(StyleArray *__hidden this)
.text$mn:00006EEC                 public ?getNbStyler@StyleArray@@QBEHXZ
.text$mn:00006EEC ?getNbStyler@StyleArray@@QBEHXZ proc near
.text$mn:00006EEC                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+256p
.text$mn:00006EEC
.text$mn:00006EEC var_4           = dword ptr -4
.text$mn:00006EEC
.text$mn:00006EEC                 push    ebp
.text$mn:00006EED                 mov     ebp, esp
.text$mn:00006EEF                 push    ecx
.text$mn:00006EF0                 mov     [ebp+var_4], ecx
.text$mn:00006EF3                 mov     eax, [ebp+var_4]
.text$mn:00006EF6                 mov     eax, [eax+528h]
.text$mn:00006EFC                 mov     esp, ebp
.text$mn:00006EFE                 pop     ebp
.text$mn:00006EFF                 retn
.text$mn:00006EFF ?getNbStyler@StyleArray@@QBEHXZ endp
.text$mn:00006EFF
.text$mn:00006EFF _text$mn        ends
.text$mn:00006EFF
.text$mn:00006F00 ; ===========================================================================
.text$mn:00006F00
.text$mn:00006F00 ; Segment type: Pure code
.text$mn:00006F00 ; Segment permissions: Read/Execute
.text$mn:00006F00 _text$mn        segment para public 'CODE' use32
.text$mn:00006F00                 assume cs:_text$mn
.text$mn:00006F00                 ;org 6F00h
.text$mn:00006F00 ; COMDAT (pick any)
.text$mn:00006F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F00
.text$mn:00006F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F00
.text$mn:00006F00 ; Attributes: bp-based frame
.text$mn:00006F00
.text$mn:00006F00 ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:00006F00                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:00006F00 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:00006F00                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+229p
.text$mn:00006F00                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+84Ap ...
.text$mn:00006F00
.text$mn:00006F00 var_4           = dword ptr -4
.text$mn:00006F00
.text$mn:00006F00                 push    ebp
.text$mn:00006F01                 mov     ebp, esp
.text$mn:00006F03                 push    ecx
.text$mn:00006F04                 mov     [ebp+var_4], ecx
.text$mn:00006F07                 mov     eax, [ebp+var_4]
.text$mn:00006F0A                 add     eax, 118h
.text$mn:00006F0F                 mov     esp, ebp
.text$mn:00006F11                 pop     ebp
.text$mn:00006F12                 retn
.text$mn:00006F12 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:00006F12
.text$mn:00006F12 ; ---------------------------------------------------------------------------
.text$mn:00006F13                 align 4
.text$mn:00006F13 _text$mn        ends
.text$mn:00006F13
.text$mn:00006F14 ; ===========================================================================
.text$mn:00006F14
.text$mn:00006F14 ; Segment type: Pure code
.text$mn:00006F14 ; Segment permissions: Read/Execute
.text$mn:00006F14 _text$mn        segment para public 'CODE' use32
.text$mn:00006F14                 assume cs:_text$mn
.text$mn:00006F14                 ;org 6F14h
.text$mn:00006F14 ; COMDAT (pick any)
.text$mn:00006F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F14
.text$mn:00006F14 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F14
.text$mn:00006F14 ; Attributes: bp-based frame
.text$mn:00006F14
.text$mn:00006F14 ; struct Style *__thiscall StyleArray::getStyler(StyleArray *this, int)
.text$mn:00006F14                 public ?getStyler@StyleArray@@QAEAAUStyle@@H@Z
.text$mn:00006F14 ?getStyler@StyleArray@@QAEAAUStyle@@H@Z proc near
.text$mn:00006F14                                         ; CODE XREF: WordStyleDlg::setStyleListFromLexer(int)+278p
.text$mn:00006F14                                         ; WordStyleDlg::getCurrentStyler(void)+4Ap ...
.text$mn:00006F14
.text$mn:00006F14 var_4           = dword ptr -4
.text$mn:00006F14 arg_0           = dword ptr  8
.text$mn:00006F14
.text$mn:00006F14                 push    ebp
.text$mn:00006F15                 mov     ebp, esp
.text$mn:00006F17                 push    ecx
.text$mn:00006F18                 mov     [ebp+var_4], ecx
.text$mn:00006F1B                 cmp     [ebp+arg_0], 0
.text$mn:00006F1F                 jl      short loc_6F27
.text$mn:00006F21                 cmp     [ebp+arg_0], 1Eh
.text$mn:00006F25                 jl      short loc_6F3E
.text$mn:00006F27
.text$mn:00006F27 loc_6F27:                               ; CODE XREF: StyleArray::getStyler(int)+Bj
.text$mn:00006F27                 push    192h            ; Line
.text$mn:00006F2C                 push    offset ??_C@_1II@FPBMCJJL@?$AAC?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ ; "C:\\workspace\\notepad-plus-plus-6.7.9."...
.text$mn:00006F31                 push    offset ??_C@_1FG@JDMMPFCP@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAS?$AAC?$AAE?$AA_?$AAS?$AAT?$AAY?$AAL?$AAE?$AA_@ ; "index >= 0 && index < SCE_STYLE_ARRAY_S"...
.text$mn:00006F36                 call    __wassert
.text$mn:00006F3B ; ---------------------------------------------------------------------------
.text$mn:00006F3B                 add     esp, 0Ch
.text$mn:00006F3E
.text$mn:00006F3E loc_6F3E:                               ; CODE XREF: StyleArray::getStyler(int)+11j
.text$mn:00006F3E                 imul    eax, [ebp+arg_0], 2Ch
.text$mn:00006F42                 add     eax, [ebp+var_4]
.text$mn:00006F45                 mov     esp, ebp
.text$mn:00006F47                 pop     ebp
.text$mn:00006F48                 retn    4
.text$mn:00006F48 ?getStyler@StyleArray@@QAEAAUStyle@@H@Z endp
.text$mn:00006F48
.text$mn:00006F48 ; ---------------------------------------------------------------------------
.text$mn:00006F4B                 align 4
.text$mn:00006F4B _text$mn        ends
.text$mn:00006F4B
.text$mn:00006F4C ; ===========================================================================
.text$mn:00006F4C
.text$mn:00006F4C ; Segment type: Pure code
.text$mn:00006F4C ; Segment permissions: Read/Execute
.text$mn:00006F4C _text$mn        segment para public 'CODE' use32
.text$mn:00006F4C                 assume cs:_text$mn
.text$mn:00006F4C                 ;org 6F4Ch
.text$mn:00006F4C ; COMDAT (pick any)
.text$mn:00006F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F4C
.text$mn:00006F4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F4C
.text$mn:00006F4C ; Attributes: bp-based frame
.text$mn:00006F4C
.text$mn:00006F4C ; struct ThemeSwitcher *__thiscall NppParameters::getThemeSwitcher(NppParameters *__hidden this)
.text$mn:00006F4C                 public ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ
.text$mn:00006F4C ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ proc near
.text$mn:00006F4C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1C0p
.text$mn:00006F4C                                         ; WordStyleDlg::switchToTheme(void)+91p
.text$mn:00006F4C
.text$mn:00006F4C var_4           = dword ptr -4
.text$mn:00006F4C
.text$mn:00006F4C                 push    ebp
.text$mn:00006F4D                 mov     ebp, esp
.text$mn:00006F4F                 push    ecx
.text$mn:00006F50                 mov     [ebp+var_4], ecx
.text$mn:00006F53                 mov     eax, [ebp+var_4]
.text$mn:00006F56                 add     eax, 1C9E8h
.text$mn:00006F5B                 mov     esp, ebp
.text$mn:00006F5D                 pop     ebp
.text$mn:00006F5E                 retn
.text$mn:00006F5E ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ endp
.text$mn:00006F5E
.text$mn:00006F5E ; ---------------------------------------------------------------------------
.text$mn:00006F5F                 align 10h
.text$mn:00006F5F _text$mn        ends
.text$mn:00006F5F
.text$mn:00006F60 ; ===========================================================================
.text$mn:00006F60
.text$mn:00006F60 ; Segment type: Pure code
.text$mn:00006F60 ; Segment permissions: Read/Execute
.text$mn:00006F60 _text$mn        segment para public 'CODE' use32
.text$mn:00006F60                 assume cs:_text$mn
.text$mn:00006F60                 ;org 6F60h
.text$mn:00006F60 ; COMDAT (pick any)
.text$mn:00006F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F60
.text$mn:00006F60 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F60
.text$mn:00006F60 ; Attributes: bp-based frame
.text$mn:00006F60
.text$mn:00006F60 ; int __thiscall Window::getWidth(Window *__hidden this)
.text$mn:00006F60                 public ?getWidth@Window@@UBEHXZ
.text$mn:00006F60 ?getWidth@Window@@UBEHXZ proc near      ; DATA XREF: .rdata:00008254o
.text$mn:00006F60                                         ; .rdata:00008288o
.text$mn:00006F60
.text$mn:00006F60 var_18          = dword ptr -18h
.text$mn:00006F60 Rect            = tagRECT ptr -14h
.text$mn:00006F60 var_4           = dword ptr -4
.text$mn:00006F60
.text$mn:00006F60                 push    ebp
.text$mn:00006F61                 mov     ebp, esp
.text$mn:00006F63                 sub     esp, 18h
.text$mn:00006F66                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F6B                 xor     eax, ebp
.text$mn:00006F6D                 mov     [ebp+var_4], eax
.text$mn:00006F70                 mov     [ebp+var_18], ecx
.text$mn:00006F73                 lea     eax, [ebp+Rect]
.text$mn:00006F76                 push    eax             ; lpRect
.text$mn:00006F77                 mov     ecx, [ebp+var_18]
.text$mn:00006F7A                 mov     edx, [ecx+0Ch]
.text$mn:00006F7D                 push    edx             ; hWnd
.text$mn:00006F7E                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00006F84                 mov     eax, [ebp+Rect.right]
.text$mn:00006F87                 sub     eax, [ebp+Rect.left]
.text$mn:00006F8A                 mov     ecx, [ebp+var_4]
.text$mn:00006F8D                 xor     ecx, ebp
.text$mn:00006F8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00006F94                 mov     esp, ebp
.text$mn:00006F96                 pop     ebp
.text$mn:00006F97                 retn
.text$mn:00006F97 ?getWidth@Window@@UBEHXZ endp
.text$mn:00006F97
.text$mn:00006F97 _text$mn        ends
.text$mn:00006F97
.text$mn:00006F98 ; ===========================================================================
.text$mn:00006F98
.text$mn:00006F98 ; Segment type: Pure code
.text$mn:00006F98 ; Segment permissions: Read/Execute
.text$mn:00006F98 _text$mn        segment para public 'CODE' use32
.text$mn:00006F98                 assume cs:_text$mn
.text$mn:00006F98                 ;org 6F98h
.text$mn:00006F98 ; COMDAT (pick any)
.text$mn:00006F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F98
.text$mn:00006F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F98
.text$mn:00006F98 ; Attributes: bp-based frame
.text$mn:00006F98
.text$mn:00006F98 ; void __thiscall Window::getWindowRect(Window *this, struct tagRECT *)
.text$mn:00006F98                 public ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00006F98 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00006F98                                         ; DATA XREF: .rdata:00008250o
.text$mn:00006F98                                         ; .rdata:00008284o
.text$mn:00006F98
.text$mn:00006F98 var_4           = dword ptr -4
.text$mn:00006F98 lpRect          = dword ptr  8
.text$mn:00006F98
.text$mn:00006F98                 push    ebp
.text$mn:00006F99                 mov     ebp, esp
.text$mn:00006F9B                 push    ecx
.text$mn:00006F9C                 mov     [ebp+var_4], ecx
.text$mn:00006F9F                 mov     eax, [ebp+lpRect]
.text$mn:00006FA2                 push    eax             ; lpRect
.text$mn:00006FA3                 mov     ecx, [ebp+var_4]
.text$mn:00006FA6                 mov     edx, [ecx+0Ch]
.text$mn:00006FA9                 push    edx             ; hWnd
.text$mn:00006FAA                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00006FB0                 mov     esp, ebp
.text$mn:00006FB2                 pop     ebp
.text$mn:00006FB3                 retn    4
.text$mn:00006FB3 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:00006FB3
.text$mn:00006FB3 ; ---------------------------------------------------------------------------
.text$mn:00006FB6                 align 4
.text$mn:00006FB6 _text$mn        ends
.text$mn:00006FB6
.text$mn:00006FB8 ; ===========================================================================
.text$mn:00006FB8
.text$mn:00006FB8 ; Segment type: Pure code
.text$mn:00006FB8 ; Segment permissions: Read/Execute
.text$mn:00006FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00006FB8                 assume cs:_text$mn
.text$mn:00006FB8                 ;org 6FB8h
.text$mn:00006FB8 ; COMDAT (pick any)
.text$mn:00006FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FB8
.text$mn:00006FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FB8
.text$mn:00006FB8 ; Attributes: bp-based frame
.text$mn:00006FB8
.text$mn:00006FB8 ; public: wchar_t const * __thiscall NppParameters::getWordList(enum  LangType, int)const
.text$mn:00006FB8                 public ?getWordList@NppParameters@@QBEPB_WW4LangType@@H@Z
.text$mn:00006FB8 ?getWordList@NppParameters@@QBEPB_WW4LangType@@H@Z proc near
.text$mn:00006FB8                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+690p
.text$mn:00006FB8
.text$mn:00006FB8 var_8           = dword ptr -8
.text$mn:00006FB8 var_4           = dword ptr -4
.text$mn:00006FB8 arg_0           = dword ptr  8
.text$mn:00006FB8 arg_4           = dword ptr  0Ch
.text$mn:00006FB8
.text$mn:00006FB8                 push    ebp
.text$mn:00006FB9                 mov     ebp, esp
.text$mn:00006FBB                 sub     esp, 8
.text$mn:00006FBE                 mov     [ebp+var_8], ecx
.text$mn:00006FC1                 mov     eax, [ebp+arg_0]
.text$mn:00006FC4                 push    eax
.text$mn:00006FC5                 mov     ecx, [ebp+var_8]
.text$mn:00006FC8                 call    ?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z ; NppParameters::getLangFromID(LangType)
.text$mn:00006FCD                 mov     [ebp+var_4], eax
.text$mn:00006FD0                 cmp     [ebp+var_4], 0
.text$mn:00006FD4                 jnz     short loc_6FDA
.text$mn:00006FD6                 xor     eax, eax
.text$mn:00006FD8                 jmp     short loc_6FE6
.text$mn:00006FDA ; ---------------------------------------------------------------------------
.text$mn:00006FDA
.text$mn:00006FDA loc_6FDA:                               ; CODE XREF: NppParameters::getWordList(LangType,int)+1Cj
.text$mn:00006FDA                 mov     ecx, [ebp+arg_4]
.text$mn:00006FDD                 push    ecx             ; int
.text$mn:00006FDE                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006FE1                 call    ?getWords@Lang@@QBEPB_WH@Z ; Lang::getWords(int)
.text$mn:00006FE6
.text$mn:00006FE6 loc_6FE6:                               ; CODE XREF: NppParameters::getWordList(LangType,int)+20j
.text$mn:00006FE6                 mov     esp, ebp
.text$mn:00006FE8                 pop     ebp
.text$mn:00006FE9                 retn    8
.text$mn:00006FE9 ?getWordList@NppParameters@@QBEPB_WW4LangType@@H@Z endp
.text$mn:00006FE9
.text$mn:00006FE9 _text$mn        ends
.text$mn:00006FE9
.text$mn:00006FEC ; ===========================================================================
.text$mn:00006FEC
.text$mn:00006FEC ; Segment type: Pure code
.text$mn:00006FEC ; Segment permissions: Read/Execute
.text$mn:00006FEC _text$mn        segment para public 'CODE' use32
.text$mn:00006FEC                 assume cs:_text$mn
.text$mn:00006FEC                 ;org 6FECh
.text$mn:00006FEC ; COMDAT (pick any)
.text$mn:00006FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FEC
.text$mn:00006FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006FEC
.text$mn:00006FEC ; Attributes: bp-based frame
.text$mn:00006FEC
.text$mn:00006FEC ; const wchar_t *__thiscall Lang::getWords(Lang *this, int)
.text$mn:00006FEC                 public ?getWords@Lang@@QBEPB_WH@Z
.text$mn:00006FEC ?getWords@Lang@@QBEPB_WH@Z proc near    ; CODE XREF: NppParameters::getWordList(LangType,int)+29p
.text$mn:00006FEC
.text$mn:00006FEC var_4           = dword ptr -4
.text$mn:00006FEC arg_0           = dword ptr  8
.text$mn:00006FEC
.text$mn:00006FEC                 push    ebp
.text$mn:00006FED                 mov     ebp, esp
.text$mn:00006FEF                 push    ecx
.text$mn:00006FF0                 mov     [ebp+var_4], ecx
.text$mn:00006FF3                 mov     eax, [ebp+arg_0]
.text$mn:00006FF6                 mov     ecx, [ebp+var_4]
.text$mn:00006FF9                 mov     eax, [ecx+eax*4+24h]
.text$mn:00006FFD                 mov     esp, ebp
.text$mn:00006FFF                 pop     ebp
.text$mn:00007000                 retn    4
.text$mn:00007000 ?getWords@Lang@@QBEPB_WH@Z endp
.text$mn:00007000
.text$mn:00007000 ; ---------------------------------------------------------------------------
.text$mn:00007003                 align 4
.text$mn:00007003 _text$mn        ends
.text$mn:00007003
.text$mn:00007004 ; ===========================================================================
.text$mn:00007004
.text$mn:00007004 ; Segment type: Pure code
.text$mn:00007004 ; Segment permissions: Read/Execute
.text$mn:00007004 _text$mn        segment para public 'CODE' use32
.text$mn:00007004                 assume cs:_text$mn
.text$mn:00007004                 ;org 7004h
.text$mn:00007004 ; COMDAT (pick any)
.text$mn:00007004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007004
.text$mn:00007004 ; =============== S U B R O U T I N E =======================================
.text$mn:00007004
.text$mn:00007004 ; Attributes: bp-based frame
.text$mn:00007004
.text$mn:00007004 ; void __thiscall ColourStaticTextHooker::hookOn(ColourStaticTextHooker *this, HWND)
.text$mn:00007004                 public ?hookOn@ColourStaticTextHooker@@QAEXPAUHWND__@@@Z
.text$mn:00007004 ?hookOn@ColourStaticTextHooker@@QAEXPAUHWND__@@@Z proc near
.text$mn:00007004                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1A4p
.text$mn:00007004
.text$mn:00007004 dwNewLong       = dword ptr -4
.text$mn:00007004 hWnd            = dword ptr  8
.text$mn:00007004
.text$mn:00007004                 push    ebp
.text$mn:00007005                 mov     ebp, esp
.text$mn:00007007                 push    ecx
.text$mn:00007008                 mov     [ebp+dwNewLong], ecx
.text$mn:0000700B                 mov     eax, [ebp+dwNewLong]
.text$mn:0000700E                 push    eax             ; dwNewLong
.text$mn:0000700F                 push    0FFFFFFEBh      ; nIndex
.text$mn:00007011                 mov     ecx, [ebp+hWnd]
.text$mn:00007014                 push    ecx             ; hWnd
.text$mn:00007015                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000701B                 push    offset ?staticProc@ColourStaticTextHooker@@CGJPAUHWND__@@IIJ@Z ; dwNewLong
.text$mn:00007020                 push    0FFFFFFFCh      ; nIndex
.text$mn:00007022                 mov     edx, [ebp+hWnd]
.text$mn:00007025                 push    edx             ; hWnd
.text$mn:00007026                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000702C                 mov     ecx, [ebp+dwNewLong]
.text$mn:0000702F                 mov     [ecx+4], eax
.text$mn:00007032                 mov     esp, ebp
.text$mn:00007034                 pop     ebp
.text$mn:00007035                 retn    4
.text$mn:00007035 ?hookOn@ColourStaticTextHooker@@QAEXPAUHWND__@@@Z endp
.text$mn:00007035
.text$mn:00007035 _text$mn        ends
.text$mn:00007035
.text$mn:00007038 ; ===========================================================================
.text$mn:00007038
.text$mn:00007038 ; Segment type: Pure code
.text$mn:00007038 ; Segment permissions: Read/Execute
.text$mn:00007038 _text$mn        segment para public 'CODE' use32
.text$mn:00007038                 assume cs:_text$mn
.text$mn:00007038                 ;org 7038h
.text$mn:00007038 ; COMDAT (pick any)
.text$mn:00007038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007038
.text$mn:00007038 ; =============== S U B R O U T I N E =======================================
.text$mn:00007038
.text$mn:00007038 ; Attributes: bp-based frame
.text$mn:00007038
.text$mn:00007038 ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:00007038                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:00007038 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:00007038                                         ; DATA XREF: .rdata:00008234o
.text$mn:00007038
.text$mn:00007038 var_4           = dword ptr -4
.text$mn:00007038 arg_0           = dword ptr  8
.text$mn:00007038 arg_4           = dword ptr  0Ch
.text$mn:00007038
.text$mn:00007038                 push    ebp
.text$mn:00007039                 mov     ebp, esp
.text$mn:0000703B                 push    ecx
.text$mn:0000703C                 mov     [ebp+var_4], ecx
.text$mn:0000703F                 mov     eax, [ebp+var_4]
.text$mn:00007042                 mov     ecx, [ebp+arg_0]
.text$mn:00007045                 mov     [eax+4], ecx
.text$mn:00007048                 mov     edx, [ebp+var_4]
.text$mn:0000704B                 mov     eax, [ebp+arg_4]
.text$mn:0000704E                 mov     [edx+8], eax
.text$mn:00007051                 mov     esp, ebp
.text$mn:00007053                 pop     ebp
.text$mn:00007054                 retn    8
.text$mn:00007054 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:00007054
.text$mn:00007054 ; ---------------------------------------------------------------------------
.text$mn:00007057                 align 4
.text$mn:00007057 _text$mn        ends
.text$mn:00007057
.text$mn:00007058 ; ===========================================================================
.text$mn:00007058
.text$mn:00007058 ; Segment type: Pure code
.text$mn:00007058 ; Segment permissions: Read/Execute
.text$mn:00007058 _text$mn        segment para public 'CODE' use32
.text$mn:00007058                 assume cs:_text$mn
.text$mn:00007058                 ;org 7058h
.text$mn:00007058 ; COMDAT (pick any)
.text$mn:00007058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007058
.text$mn:00007058 ; =============== S U B R O U T I N E =======================================
.text$mn:00007058
.text$mn:00007058 ; Attributes: bp-based frame
.text$mn:00007058
.text$mn:00007058 ; bool __thiscall ColourPicker::isEnabled(ColourPicker *__hidden this)
.text$mn:00007058                 public ?isEnabled@ColourPicker@@QAE_NXZ
.text$mn:00007058 ?isEnabled@ColourPicker@@QAE_NXZ proc near
.text$mn:00007058                                         ; CODE XREF: WordStyleDlg::updateColour(bool)+33p
.text$mn:00007058                                         ; WordStyleDlg::updateColour(bool)+78p
.text$mn:00007058
.text$mn:00007058 var_4           = dword ptr -4
.text$mn:00007058
.text$mn:00007058                 push    ebp
.text$mn:00007059                 mov     ebp, esp
.text$mn:0000705B                 push    ecx
.text$mn:0000705C                 mov     [ebp+var_4], ecx
.text$mn:0000705F                 mov     eax, [ebp+var_4]
.text$mn:00007062                 mov     al, [eax+1Ch]
.text$mn:00007065                 mov     esp, ebp
.text$mn:00007067                 pop     ebp
.text$mn:00007068                 retn
.text$mn:00007068 ?isEnabled@ColourPicker@@QAE_NXZ endp
.text$mn:00007068
.text$mn:00007068 ; ---------------------------------------------------------------------------
.text$mn:00007069                 align 4
.text$mn:00007069 _text$mn        ends
.text$mn:00007069
.text$mn:0000706C ; ===========================================================================
.text$mn:0000706C
.text$mn:0000706C ; Segment type: Pure code
.text$mn:0000706C ; Segment permissions: Read/Execute
.text$mn:0000706C _text$mn        segment para public 'CODE' use32
.text$mn:0000706C                 assume cs:_text$mn
.text$mn:0000706C                 ;org 706Ch
.text$mn:0000706C ; COMDAT (pick any)
.text$mn:0000706C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000706C
.text$mn:0000706C ; =============== S U B R O U T I N E =======================================
.text$mn:0000706C
.text$mn:0000706C ; Attributes: bp-based frame
.text$mn:0000706C
.text$mn:0000706C ; bool __thiscall NppParameters::isTransparentAvailable(NppParameters *__hidden this)
.text$mn:0000706C                 public ?isTransparentAvailable@NppParameters@@QBE_NXZ
.text$mn:0000706C ?isTransparentAvailable@NppParameters@@QBE_NXZ proc near
.text$mn:0000706C                                         ; CODE XREF: WordStyleDlg::create(int,bool)+21p
.text$mn:0000706C
.text$mn:0000706C var_8           = dword ptr -8
.text$mn:0000706C var_4           = dword ptr -4
.text$mn:0000706C
.text$mn:0000706C                 push    ebp
.text$mn:0000706D                 mov     ebp, esp
.text$mn:0000706F                 sub     esp, 8
.text$mn:00007072                 mov     [ebp+var_8], ecx
.text$mn:00007075                 mov     eax, [ebp+var_8]
.text$mn:00007078                 cmp     dword ptr [eax+1C8F8h], 0
.text$mn:0000707F                 jz      short loc_708A
.text$mn:00007081                 mov     [ebp+var_4], 1
.text$mn:00007088                 jmp     short loc_7091
.text$mn:0000708A ; ---------------------------------------------------------------------------
.text$mn:0000708A
.text$mn:0000708A loc_708A:                               ; CODE XREF: NppParameters::isTransparentAvailable(void)+13j
.text$mn:0000708A                 mov     [ebp+var_4], 0
.text$mn:00007091
.text$mn:00007091 loc_7091:                               ; CODE XREF: NppParameters::isTransparentAvailable(void)+1Cj
.text$mn:00007091                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007094                 mov     esp, ebp
.text$mn:00007096                 pop     ebp
.text$mn:00007097                 retn
.text$mn:00007097 ?isTransparentAvailable@NppParameters@@QBE_NXZ endp
.text$mn:00007097
.text$mn:00007097 _text$mn        ends
.text$mn:00007097
.text$mn:00007098 ; ===========================================================================
.text$mn:00007098
.text$mn:00007098 ; Segment type: Pure code
.text$mn:00007098 ; Segment permissions: Read/Execute
.text$mn:00007098 _text$mn        segment para public 'CODE' use32
.text$mn:00007098                 assume cs:_text$mn
.text$mn:00007098                 ;org 7098h
.text$mn:00007098 ; COMDAT (pick any)
.text$mn:00007098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007098
.text$mn:00007098 ; =============== S U B R O U T I N E =======================================
.text$mn:00007098
.text$mn:00007098 ; Attributes: bp-based frame
.text$mn:00007098
.text$mn:00007098 ; bool __thiscall Window::isVisible(Window *__hidden this)
.text$mn:00007098                 public ?isVisible@Window@@UBE_NXZ
.text$mn:00007098 ?isVisible@Window@@UBE_NXZ proc near    ; DATA XREF: .rdata:0000825Co
.text$mn:00007098                                         ; .rdata:00008290o
.text$mn:00007098
.text$mn:00007098 var_8           = dword ptr -8
.text$mn:00007098 var_1           = byte ptr -1
.text$mn:00007098
.text$mn:00007098                 push    ebp
.text$mn:00007099                 mov     ebp, esp
.text$mn:0000709B                 sub     esp, 8
.text$mn:0000709E                 mov     [ebp+var_8], ecx
.text$mn:000070A1                 mov     eax, [ebp+var_8]
.text$mn:000070A4                 mov     ecx, [eax+0Ch]
.text$mn:000070A7                 push    ecx             ; hWnd
.text$mn:000070A8                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:000070AE                 test    eax, eax
.text$mn:000070B0                 jz      short loc_70B8
.text$mn:000070B2                 mov     [ebp+var_1], 1
.text$mn:000070B6                 jmp     short loc_70BC
.text$mn:000070B8 ; ---------------------------------------------------------------------------
.text$mn:000070B8
.text$mn:000070B8 loc_70B8:                               ; CODE XREF: Window::isVisible(void)+18j
.text$mn:000070B8                 mov     [ebp+var_1], 0
.text$mn:000070BC
.text$mn:000070BC loc_70BC:                               ; CODE XREF: Window::isVisible(void)+1Ej
.text$mn:000070BC                 mov     al, [ebp+var_1]
.text$mn:000070BF                 mov     esp, ebp
.text$mn:000070C1                 pop     ebp
.text$mn:000070C2                 retn
.text$mn:000070C2 ?isVisible@Window@@UBE_NXZ endp
.text$mn:000070C2
.text$mn:000070C2 ; ---------------------------------------------------------------------------
.text$mn:000070C3                 align 4
.text$mn:000070C3 _text$mn        ends
.text$mn:000070C3
.text$mn:000070C4 ; ===========================================================================
.text$mn:000070C4
.text$mn:000070C4 ; Segment type: Pure code
.text$mn:000070C4 ; Segment permissions: Read/Execute
.text$mn:000070C4 _text$mn        segment para public 'CODE' use32
.text$mn:000070C4                 assume cs:_text$mn
.text$mn:000070C4                 ;org 70C4h
.text$mn:000070C4 ; COMDAT (pick any)
.text$mn:000070C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070C4
.text$mn:000070C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070C4
.text$mn:000070C4 ; Attributes: bp-based frame
.text$mn:000070C4
.text$mn:000070C4 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:000070C4                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:000070C4 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:000070C4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:000070C4
.text$mn:000070C4 var_4           = dword ptr -4
.text$mn:000070C4 Str             = dword ptr  8
.text$mn:000070C4
.text$mn:000070C4                 push    ebp
.text$mn:000070C5                 mov     ebp, esp
.text$mn:000070C7                 push    ecx
.text$mn:000070C8                 mov     eax, [ebp+Str]
.text$mn:000070CB                 movsx   ecx, byte ptr [eax]
.text$mn:000070CE                 test    ecx, ecx
.text$mn:000070D0                 jnz     short loc_70DB
.text$mn:000070D2                 mov     [ebp+var_4], 0
.text$mn:000070D9                 jmp     short loc_70EA
.text$mn:000070DB ; ---------------------------------------------------------------------------
.text$mn:000070DB
.text$mn:000070DB loc_70DB:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:000070DB                 mov     edx, [ebp+Str]
.text$mn:000070DE                 push    edx             ; Str
.text$mn:000070DF                 call    _strlen
.text$mn:000070E4                 add     esp, 4
.text$mn:000070E7                 mov     [ebp+var_4], eax
.text$mn:000070EA
.text$mn:000070EA loc_70EA:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:000070EA                 mov     eax, [ebp+var_4]
.text$mn:000070ED                 mov     esp, ebp
.text$mn:000070EF                 pop     ebp
.text$mn:000070F0                 retn
.text$mn:000070F0 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:000070F0
.text$mn:000070F0 ; ---------------------------------------------------------------------------
.text$mn:000070F1                 align 4
.text$mn:000070F1 _text$mn        ends
.text$mn:000070F1
.text$mn:000070F4 ; ===========================================================================
.text$mn:000070F4
.text$mn:000070F4 ; Segment type: Pure code
.text$mn:000070F4 ; Segment permissions: Read/Execute
.text$mn:000070F4 _text$mn        segment para public 'CODE' use32
.text$mn:000070F4                 assume cs:_text$mn
.text$mn:000070F4                 ;org 70F4h
.text$mn:000070F4 ; COMDAT (pick any)
.text$mn:000070F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070F4
.text$mn:000070F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070F4
.text$mn:000070F4 ; Attributes: bp-based frame
.text$mn:000070F4
.text$mn:000070F4 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:000070F4                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:000070F4 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:000070F4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:000070F4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p ...
.text$mn:000070F4
.text$mn:000070F4 var_4           = dword ptr -4
.text$mn:000070F4 Str             = dword ptr  8
.text$mn:000070F4
.text$mn:000070F4                 push    ebp
.text$mn:000070F5                 mov     ebp, esp
.text$mn:000070F7                 push    ecx
.text$mn:000070F8                 mov     eax, [ebp+Str]
.text$mn:000070FB                 movzx   ecx, word ptr [eax]
.text$mn:000070FE                 test    ecx, ecx
.text$mn:00007100                 jnz     short loc_710B
.text$mn:00007102                 mov     [ebp+var_4], 0
.text$mn:00007109                 jmp     short loc_711A
.text$mn:0000710B ; ---------------------------------------------------------------------------
.text$mn:0000710B
.text$mn:0000710B loc_710B:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000710B                 mov     edx, [ebp+Str]
.text$mn:0000710E                 push    edx             ; Str
.text$mn:0000710F                 call    _wcslen
.text$mn:00007114                 add     esp, 4
.text$mn:00007117                 mov     [ebp+var_4], eax
.text$mn:0000711A
.text$mn:0000711A loc_711A:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000711A                 mov     eax, [ebp+var_4]
.text$mn:0000711D                 mov     esp, ebp
.text$mn:0000711F                 pop     ebp
.text$mn:00007120                 retn
.text$mn:00007120 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00007120
.text$mn:00007120 ; ---------------------------------------------------------------------------
.text$mn:00007121                 align 4
.text$mn:00007121 _text$mn        ends
.text$mn:00007121
.text$mn:00007124 ; ===========================================================================
.text$mn:00007124
.text$mn:00007124 ; Segment type: Pure code
.text$mn:00007124 ; Segment permissions: Read/Execute
.text$mn:00007124 _text$mn        segment para public 'CODE' use32
.text$mn:00007124                 assume cs:_text$mn
.text$mn:00007124                 ;org 7124h
.text$mn:00007124 ; COMDAT (pick any)
.text$mn:00007124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007124
.text$mn:00007124 ; =============== S U B R O U T I N E =======================================
.text$mn:00007124
.text$mn:00007124 ; Attributes: bp-based frame
.text$mn:00007124
.text$mn:00007124 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00007124                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00007124 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00007124                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00007124
.text$mn:00007124 var_4           = dword ptr -4
.text$mn:00007124
.text$mn:00007124                 push    ebp
.text$mn:00007125                 mov     ebp, esp
.text$mn:00007127                 push    ecx
.text$mn:00007128                 mov     [ebp+var_4], ecx
.text$mn:0000712B                 mov     eax, [ebp+var_4]
.text$mn:0000712E                 push    eax
.text$mn:0000712F                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00007134                 add     esp, 4
.text$mn:00007137                 mov     esp, ebp
.text$mn:00007139                 pop     ebp
.text$mn:0000713A                 retn
.text$mn:0000713A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000713A
.text$mn:0000713A ; ---------------------------------------------------------------------------
.text$mn:0000713B                 align 4
.text$mn:0000713B _text$mn        ends
.text$mn:0000713B
.text$mn:0000713C ; ===========================================================================
.text$mn:0000713C
.text$mn:0000713C ; Segment type: Pure code
.text$mn:0000713C ; Segment permissions: Read/Execute
.text$mn:0000713C _text$mn        segment para public 'CODE' use32
.text$mn:0000713C                 assume cs:_text$mn
.text$mn:0000713C                 ;org 713Ch
.text$mn:0000713C ; COMDAT (pick any)
.text$mn:0000713C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000713C
.text$mn:0000713C ; =============== S U B R O U T I N E =======================================
.text$mn:0000713C
.text$mn:0000713C ; Attributes: bp-based frame
.text$mn:0000713C
.text$mn:0000713C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000713C                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000713C ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000713C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000713C
.text$mn:0000713C var_4           = dword ptr -4
.text$mn:0000713C
.text$mn:0000713C                 push    ebp
.text$mn:0000713D                 mov     ebp, esp
.text$mn:0000713F                 push    ecx
.text$mn:00007140                 mov     [ebp+var_4], ecx
.text$mn:00007143                 mov     eax, [ebp+var_4]
.text$mn:00007146                 push    eax
.text$mn:00007147                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000714C                 add     esp, 4
.text$mn:0000714F                 mov     esp, ebp
.text$mn:00007151                 pop     ebp
.text$mn:00007152                 retn
.text$mn:00007152 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00007152
.text$mn:00007152 ; ---------------------------------------------------------------------------
.text$mn:00007153                 align 4
.text$mn:00007153 _text$mn        ends
.text$mn:00007153
.text$mn:00007154 ; ===========================================================================
.text$mn:00007154
.text$mn:00007154 ; Segment type: Pure code
.text$mn:00007154 ; Segment permissions: Read/Execute
.text$mn:00007154 _text$mn        segment para public 'CODE' use32
.text$mn:00007154                 assume cs:_text$mn
.text$mn:00007154                 ;org 7154h
.text$mn:00007154 ; COMDAT (pick any)
.text$mn:00007154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007154
.text$mn:00007154 ; =============== S U B R O U T I N E =======================================
.text$mn:00007154
.text$mn:00007154 ; Attributes: bp-based frame
.text$mn:00007154
.text$mn:00007154 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00007154                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00007154 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00007154                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00007154
.text$mn:00007154 var_4           = dword ptr -4
.text$mn:00007154
.text$mn:00007154                 push    ebp
.text$mn:00007155                 mov     ebp, esp
.text$mn:00007157                 push    ecx
.text$mn:00007158                 mov     [ebp+var_4], ecx
.text$mn:0000715B                 or      eax, 0FFFFFFFFh
.text$mn:0000715E                 mov     esp, ebp
.text$mn:00007160                 pop     ebp
.text$mn:00007161                 retn
.text$mn:00007161 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00007161
.text$mn:00007161 ; ---------------------------------------------------------------------------
.text$mn:00007162                 align 4
.text$mn:00007162 _text$mn        ends
.text$mn:00007162
.text$mn:00007164 ; ===========================================================================
.text$mn:00007164
.text$mn:00007164 ; Segment type: Pure code
.text$mn:00007164 ; Segment permissions: Read/Execute
.text$mn:00007164 _text$mn        segment para public 'CODE' use32
.text$mn:00007164                 assume cs:_text$mn
.text$mn:00007164                 ;org 7164h
.text$mn:00007164 ; COMDAT (pick any)
.text$mn:00007164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007164
.text$mn:00007164 ; =============== S U B R O U T I N E =======================================
.text$mn:00007164
.text$mn:00007164 ; Attributes: bp-based frame
.text$mn:00007164
.text$mn:00007164 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00007164                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00007164 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00007164                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00007164
.text$mn:00007164 var_4           = dword ptr -4
.text$mn:00007164
.text$mn:00007164                 push    ebp
.text$mn:00007165                 mov     ebp, esp
.text$mn:00007167                 push    ecx
.text$mn:00007168                 mov     [ebp+var_4], ecx
.text$mn:0000716B                 mov     eax, 7FFFFFFFh
.text$mn:00007170                 mov     esp, ebp
.text$mn:00007172                 pop     ebp
.text$mn:00007173                 retn
.text$mn:00007173 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00007173
.text$mn:00007173 _text$mn        ends
.text$mn:00007173
.text$mn:00007174 ; ===========================================================================
.text$mn:00007174
.text$mn:00007174 ; Segment type: Pure code
.text$mn:00007174 ; Segment permissions: Read/Execute
.text$mn:00007174 _text$mn        segment para public 'CODE' use32
.text$mn:00007174                 assume cs:_text$mn
.text$mn:00007174                 ;org 7174h
.text$mn:00007174 ; COMDAT (pick any)
.text$mn:00007174                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007174
.text$mn:00007174 ; =============== S U B R O U T I N E =======================================
.text$mn:00007174
.text$mn:00007174 ; Attributes: bp-based frame
.text$mn:00007174
.text$mn:00007174 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00007174                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00007174 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00007174                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00007174
.text$mn:00007174 arg_0           = dword ptr  8
.text$mn:00007174
.text$mn:00007174                 push    ebp
.text$mn:00007175                 mov     ebp, esp
.text$mn:00007177                 mov     ecx, [ebp+arg_0]
.text$mn:0000717A                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000717F                 pop     ebp
.text$mn:00007180                 retn
.text$mn:00007180 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00007180
.text$mn:00007180 ; ---------------------------------------------------------------------------
.text$mn:00007181                 align 4
.text$mn:00007181 _text$mn        ends
.text$mn:00007181
.text$mn:00007184 ; ===========================================================================
.text$mn:00007184
.text$mn:00007184 ; Segment type: Pure code
.text$mn:00007184 ; Segment permissions: Read/Execute
.text$mn:00007184 _text$mn        segment para public 'CODE' use32
.text$mn:00007184                 assume cs:_text$mn
.text$mn:00007184                 ;org 7184h
.text$mn:00007184 ; COMDAT (pick any)
.text$mn:00007184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007184
.text$mn:00007184 ; =============== S U B R O U T I N E =======================================
.text$mn:00007184
.text$mn:00007184 ; Attributes: bp-based frame
.text$mn:00007184
.text$mn:00007184 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00007184                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00007184 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00007184                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00007184
.text$mn:00007184 arg_0           = dword ptr  8
.text$mn:00007184
.text$mn:00007184                 push    ebp
.text$mn:00007185                 mov     ebp, esp
.text$mn:00007187                 mov     ecx, [ebp+arg_0]
.text$mn:0000718A                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000718F                 pop     ebp
.text$mn:00007190                 retn
.text$mn:00007190 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00007190
.text$mn:00007190 ; ---------------------------------------------------------------------------
.text$mn:00007191                 align 4
.text$mn:00007191 _text$mn        ends
.text$mn:00007191
.text$mn:00007194 ; ===========================================================================
.text$mn:00007194
.text$mn:00007194 ; Segment type: Pure code
.text$mn:00007194 ; Segment permissions: Read/Execute
.text$mn:00007194 _text$mn        segment para public 'CODE' use32
.text$mn:00007194                 assume cs:_text$mn
.text$mn:00007194                 ;org 7194h
.text$mn:00007194 ; COMDAT (pick any)
.text$mn:00007194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007194
.text$mn:00007194 ; =============== S U B R O U T I N E =======================================
.text$mn:00007194
.text$mn:00007194 ; Attributes: bp-based frame
.text$mn:00007194
.text$mn:00007194 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00007194                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00007194 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00007194                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00007194                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00007194
.text$mn:00007194 var_10          = dword ptr -10h
.text$mn:00007194 var_C           = dword ptr -0Ch
.text$mn:00007194 var_8           = dword ptr -8
.text$mn:00007194 var_1           = byte ptr -1
.text$mn:00007194
.text$mn:00007194                 push    ebp
.text$mn:00007195                 mov     ebp, esp
.text$mn:00007197                 sub     esp, 10h
.text$mn:0000719A                 mov     [ebp+var_10], ecx
.text$mn:0000719D                 lea     eax, [ebp+var_1]
.text$mn:000071A0                 push    eax
.text$mn:000071A1                 mov     ecx, [ebp+var_10]
.text$mn:000071A4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000071A9                 mov     ecx, eax
.text$mn:000071AB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:000071B0                 mov     [ebp+var_8], eax
.text$mn:000071B3                 cmp     [ebp+var_8], 1
.text$mn:000071B7                 ja      short loc_71C2
.text$mn:000071B9                 mov     [ebp+var_C], 1
.text$mn:000071C0                 jmp     short loc_71CB
.text$mn:000071C2 ; ---------------------------------------------------------------------------
.text$mn:000071C2
.text$mn:000071C2 loc_71C2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:000071C2                 mov     ecx, [ebp+var_8]
.text$mn:000071C5                 sub     ecx, 1
.text$mn:000071C8                 mov     [ebp+var_C], ecx
.text$mn:000071CB
.text$mn:000071CB loc_71CB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:000071CB                 mov     eax, [ebp+var_C]
.text$mn:000071CE                 mov     esp, ebp
.text$mn:000071D0                 pop     ebp
.text$mn:000071D1                 retn
.text$mn:000071D1 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000071D1
.text$mn:000071D1 ; ---------------------------------------------------------------------------
.text$mn:000071D2                 align 4
.text$mn:000071D2 _text$mn        ends
.text$mn:000071D2
.text$mn:000071D4 ; ===========================================================================
.text$mn:000071D4
.text$mn:000071D4 ; Segment type: Pure code
.text$mn:000071D4 ; Segment permissions: Read/Execute
.text$mn:000071D4 _text$mn        segment para public 'CODE' use32
.text$mn:000071D4                 assume cs:_text$mn
.text$mn:000071D4                 ;org 71D4h
.text$mn:000071D4 ; COMDAT (pick any)
.text$mn:000071D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071D4
.text$mn:000071D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071D4
.text$mn:000071D4 ; Attributes: bp-based frame
.text$mn:000071D4
.text$mn:000071D4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:000071D4                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000071D4 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000071D4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:000071D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:000071D4
.text$mn:000071D4 var_10          = dword ptr -10h
.text$mn:000071D4 var_C           = dword ptr -0Ch
.text$mn:000071D4 var_8           = dword ptr -8
.text$mn:000071D4 var_1           = byte ptr -1
.text$mn:000071D4
.text$mn:000071D4                 push    ebp
.text$mn:000071D5                 mov     ebp, esp
.text$mn:000071D7                 sub     esp, 10h
.text$mn:000071DA                 mov     [ebp+var_10], ecx
.text$mn:000071DD                 lea     eax, [ebp+var_1]
.text$mn:000071E0                 push    eax
.text$mn:000071E1                 mov     ecx, [ebp+var_10]
.text$mn:000071E4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000071E9                 mov     ecx, eax
.text$mn:000071EB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:000071F0                 mov     [ebp+var_8], eax
.text$mn:000071F3                 cmp     [ebp+var_8], 1
.text$mn:000071F7                 ja      short loc_7202
.text$mn:000071F9                 mov     [ebp+var_C], 1
.text$mn:00007200                 jmp     short loc_720B
.text$mn:00007202 ; ---------------------------------------------------------------------------
.text$mn:00007202
.text$mn:00007202 loc_7202:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00007202                 mov     ecx, [ebp+var_8]
.text$mn:00007205                 sub     ecx, 1
.text$mn:00007208                 mov     [ebp+var_C], ecx
.text$mn:0000720B
.text$mn:0000720B loc_720B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000720B                 mov     eax, [ebp+var_C]
.text$mn:0000720E                 mov     esp, ebp
.text$mn:00007210                 pop     ebp
.text$mn:00007211                 retn
.text$mn:00007211 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00007211
.text$mn:00007211 ; ---------------------------------------------------------------------------
.text$mn:00007212                 align 4
.text$mn:00007212 _text$mn        ends
.text$mn:00007212
.text$mn:00007214 ; ===========================================================================
.text$mn:00007214
.text$mn:00007214 ; Segment type: Pure code
.text$mn:00007214 ; Segment permissions: Read/Execute
.text$mn:00007214 _text$mn        segment para public 'CODE' use32
.text$mn:00007214                 assume cs:_text$mn
.text$mn:00007214                 ;org 7214h
.text$mn:00007214 ; COMDAT (pick any)
.text$mn:00007214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007214
.text$mn:00007214 ; =============== S U B R O U T I N E =======================================
.text$mn:00007214
.text$mn:00007214 ; Attributes: bp-based frame
.text$mn:00007214
.text$mn:00007214 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00007214                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007214 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00007214                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00007214                                         ; DATA XREF: .rdata:000082C0o
.text$mn:00007214
.text$mn:00007214 var_1C          = dword ptr -1Ch
.text$mn:00007214 var_18          = dword ptr -18h
.text$mn:00007214 Str             = dword ptr -14h
.text$mn:00007214 var_10          = dword ptr -10h
.text$mn:00007214 var_C           = dword ptr -0Ch
.text$mn:00007214 var_4           = dword ptr -4
.text$mn:00007214 arg_0           = dword ptr  8
.text$mn:00007214 arg_4           = dword ptr  0Ch
.text$mn:00007214
.text$mn:00007214                 push    ebp
.text$mn:00007215                 mov     ebp, esp
.text$mn:00007217                 push    0FFFFFFFFh
.text$mn:00007219                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000721E                 mov     eax, large fs:0
.text$mn:00007224                 push    eax
.text$mn:00007225                 sub     esp, 10h
.text$mn:00007228                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000722D                 xor     eax, ebp
.text$mn:0000722F                 push    eax
.text$mn:00007230                 lea     eax, [ebp+var_C]
.text$mn:00007233                 mov     large fs:0, eax
.text$mn:00007239                 mov     [ebp+var_1C], ecx
.text$mn:0000723C                 mov     [ebp+var_18], 0
.text$mn:00007243                 mov     eax, [ebp+arg_4]
.text$mn:00007246                 push    eax             ; int
.text$mn:00007247                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000724C                 add     esp, 4
.text$mn:0000724F                 mov     [ebp+var_10], eax
.text$mn:00007252                 cmp     [ebp+var_10], 0
.text$mn:00007256                 jz      short loc_7260
.text$mn:00007258                 mov     ecx, [ebp+var_10]
.text$mn:0000725B                 mov     [ebp+Str], ecx
.text$mn:0000725E                 jmp     short loc_7267
.text$mn:00007260 ; ---------------------------------------------------------------------------
.text$mn:00007260
.text$mn:00007260 loc_7260:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00007260                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00007267
.text$mn:00007267 loc_7267:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00007267                 mov     edx, [ebp+Str]
.text$mn:0000726A                 push    edx             ; Str
.text$mn:0000726B                 mov     ecx, [ebp+arg_0]
.text$mn:0000726E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00007273                 mov     [ebp+var_4], 0
.text$mn:0000727A                 mov     eax, [ebp+var_18]
.text$mn:0000727D                 or      eax, 1
.text$mn:00007280                 mov     [ebp+var_18], eax
.text$mn:00007283                 mov     eax, [ebp+arg_0]
.text$mn:00007286                 mov     ecx, [ebp+var_C]
.text$mn:00007289                 mov     large fs:0, ecx
.text$mn:00007290                 pop     ecx
.text$mn:00007291                 mov     esp, ebp
.text$mn:00007293                 pop     ebp
.text$mn:00007294                 retn    8
.text$mn:00007294 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007294
.text$mn:00007294 ; ---------------------------------------------------------------------------
.text$mn:00007297                 align 4
.text$mn:00007297 _text$mn        ends
.text$mn:00007297
.text$x:00007298 ; ===========================================================================
.text$x:00007298
.text$x:00007298 ; Segment type: Pure code
.text$x:00007298 ; Segment permissions: Read/Execute
.text$x:00007298 _text$x         segment para public 'CODE' use32
.text$x:00007298                 assume cs:_text$x
.text$x:00007298                 ;org 7298h
.text$x:00007298 ; COMDAT (pick associative to section at 7214)
.text$x:00007298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007298
.text$x:00007298 ; =============== S U B R O U T I N E =======================================
.text$x:00007298
.text$x:00007298
.text$x:00007298 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00007298                                         ; DATA XREF: .xdata$x:00007D6Co
.text$x:00007298                 mov     eax, [ebp-18h]
.text$x:0000729B                 and     eax, 1
.text$x:0000729E                 jz      $LN6
.text$x:000072A4                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000072A8                 mov     ecx, [ebp+8]
.text$x:000072AB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000072B0 ; ---------------------------------------------------------------------------
.text$x:000072B0
.text$x:000072B0 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000072B0                 retn
.text$x:000072B0 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000072B0
.text$x:000072B1
.text$x:000072B1 ; =============== S U B R O U T I N E =======================================
.text$x:000072B1
.text$x:000072B1
.text$x:000072B1 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000072B1                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:000072B1
.text$x:000072B1 arg_4           = dword ptr  8
.text$x:000072B1
.text$x:000072B1                 mov     edx, [esp+arg_4]
.text$x:000072B5                 lea     eax, [edx+0Ch]
.text$x:000072B8                 mov     ecx, [edx-14h]
.text$x:000072BB                 xor     ecx, eax
.text$x:000072BD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072C2                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000072C7                 jmp     ___CxxFrameHandler3
.text$x:000072C7 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000072C7
.text$x:000072C7 _text$x         ends
.text$x:000072C7
.text$mn:000072CC ; ===========================================================================
.text$mn:000072CC
.text$mn:000072CC ; Segment type: Pure code
.text$mn:000072CC ; Segment permissions: Read/Execute
.text$mn:000072CC _text$mn        segment para public 'CODE' use32
.text$mn:000072CC                 assume cs:_text$mn
.text$mn:000072CC                 ;org 72CCh
.text$mn:000072CC ; COMDAT (pick any)
.text$mn:000072CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072CC
.text$mn:000072CC ; =============== S U B R O U T I N E =======================================
.text$mn:000072CC
.text$mn:000072CC ; Attributes: bp-based frame
.text$mn:000072CC
.text$mn:000072CC ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:000072CC                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000072CC ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:000072CC                                         ; DATA XREF: .rdata:000082F4o
.text$mn:000072CC
.text$mn:000072CC var_14          = dword ptr -14h
.text$mn:000072CC var_10          = dword ptr -10h
.text$mn:000072CC var_C           = dword ptr -0Ch
.text$mn:000072CC var_4           = dword ptr -4
.text$mn:000072CC arg_0           = dword ptr  8
.text$mn:000072CC arg_4           = dword ptr  0Ch
.text$mn:000072CC
.text$mn:000072CC                 push    ebp
.text$mn:000072CD                 mov     ebp, esp
.text$mn:000072CF                 push    0FFFFFFFFh
.text$mn:000072D1                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000072D6                 mov     eax, large fs:0
.text$mn:000072DC                 push    eax
.text$mn:000072DD                 sub     esp, 8
.text$mn:000072E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072E5                 xor     eax, ebp
.text$mn:000072E7                 push    eax
.text$mn:000072E8                 lea     eax, [ebp+var_C]
.text$mn:000072EB                 mov     large fs:0, eax
.text$mn:000072F1                 mov     [ebp+var_14], ecx
.text$mn:000072F4                 mov     [ebp+var_10], 0
.text$mn:000072FB                 cmp     [ebp+arg_4], 1
.text$mn:000072FF                 jnz     short loc_7325
.text$mn:00007301                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00007306                 mov     ecx, [ebp+arg_0]
.text$mn:00007309                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000730E                 mov     [ebp+var_4], 0
.text$mn:00007315                 mov     eax, [ebp+var_10]
.text$mn:00007318                 or      eax, 1
.text$mn:0000731B                 mov     [ebp+var_10], eax
.text$mn:0000731E                 mov     eax, [ebp+arg_0]
.text$mn:00007321                 jmp     short loc_7348
.text$mn:00007323 ; ---------------------------------------------------------------------------
.text$mn:00007323                 jmp     short loc_7348
.text$mn:00007325 ; ---------------------------------------------------------------------------
.text$mn:00007325
.text$mn:00007325 loc_7325:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00007325                 mov     ecx, [ebp+arg_4]
.text$mn:00007328                 push    ecx
.text$mn:00007329                 mov     edx, [ebp+arg_0]
.text$mn:0000732C                 push    edx
.text$mn:0000732D                 mov     ecx, [ebp+var_14]
.text$mn:00007330                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00007335                 mov     [ebp+var_4], 0
.text$mn:0000733C                 mov     eax, [ebp+var_10]
.text$mn:0000733F                 or      eax, 1
.text$mn:00007342                 mov     [ebp+var_10], eax
.text$mn:00007345                 mov     eax, [ebp+arg_0]
.text$mn:00007348
.text$mn:00007348 loc_7348:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00007348                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00007348                 mov     ecx, [ebp+var_C]
.text$mn:0000734B                 mov     large fs:0, ecx
.text$mn:00007352                 pop     ecx
.text$mn:00007353                 mov     esp, ebp
.text$mn:00007355                 pop     ebp
.text$mn:00007356                 retn    8
.text$mn:00007356 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007356
.text$mn:00007356 ; ---------------------------------------------------------------------------
.text$mn:00007359                 align 4
.text$mn:00007359 _text$mn        ends
.text$mn:00007359
.text$x:0000735C ; ===========================================================================
.text$x:0000735C
.text$x:0000735C ; Segment type: Pure code
.text$x:0000735C ; Segment permissions: Read/Execute
.text$x:0000735C _text$x         segment para public 'CODE' use32
.text$x:0000735C                 assume cs:_text$x
.text$x:0000735C                 ;org 735Ch
.text$x:0000735C ; COMDAT (pick associative to section at 72CC)
.text$x:0000735C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000735C
.text$x:0000735C ; =============== S U B R O U T I N E =======================================
.text$x:0000735C
.text$x:0000735C
.text$x:0000735C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000735C                                         ; DATA XREF: .xdata$x:00007DF0o
.text$x:0000735C                 mov     eax, [ebp-10h]
.text$x:0000735F                 and     eax, 1
.text$x:00007362                 jz      $LN6_0
.text$x:00007368                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000736C                 mov     ecx, [ebp+8]
.text$x:0000736F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00007374 ; ---------------------------------------------------------------------------
.text$x:00007374
.text$x:00007374 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00007374                 retn
.text$x:00007374 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00007374
.text$x:00007375
.text$x:00007375 ; =============== S U B R O U T I N E =======================================
.text$x:00007375
.text$x:00007375
.text$x:00007375 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00007375                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00007375
.text$x:00007375 arg_4           = dword ptr  8
.text$x:00007375
.text$x:00007375                 mov     edx, [esp+arg_4]
.text$x:00007379                 lea     eax, [edx+0Ch]
.text$x:0000737C                 mov     ecx, [edx-0Ch]
.text$x:0000737F                 xor     ecx, eax
.text$x:00007381                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007386                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000738B                 jmp     ___CxxFrameHandler3
.text$x:0000738B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000738B
.text$x:0000738B _text$x         ends
.text$x:0000738B
.text$mn:00007390 ; ===========================================================================
.text$mn:00007390
.text$mn:00007390 ; Segment type: Pure code
.text$mn:00007390 ; Segment permissions: Read/Execute
.text$mn:00007390 _text$mn        segment para public 'CODE' use32
.text$mn:00007390                 assume cs:_text$mn
.text$mn:00007390                 ;org 7390h
.text$mn:00007390 ; COMDAT (pick any)
.text$mn:00007390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007390
.text$mn:00007390 ; =============== S U B R O U T I N E =======================================
.text$mn:00007390
.text$mn:00007390 ; Attributes: bp-based frame
.text$mn:00007390
.text$mn:00007390 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00007390                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00007390 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00007390                                         ; DATA XREF: .rdata:00008334o
.text$mn:00007390
.text$mn:00007390 var_1C          = dword ptr -1Ch
.text$mn:00007390 var_18          = dword ptr -18h
.text$mn:00007390 Str             = dword ptr -14h
.text$mn:00007390 var_10          = dword ptr -10h
.text$mn:00007390 var_C           = dword ptr -0Ch
.text$mn:00007390 var_4           = dword ptr -4
.text$mn:00007390 arg_0           = dword ptr  8
.text$mn:00007390 arg_4           = dword ptr  0Ch
.text$mn:00007390
.text$mn:00007390                 push    ebp
.text$mn:00007391                 mov     ebp, esp
.text$mn:00007393                 push    0FFFFFFFFh
.text$mn:00007395                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000739A                 mov     eax, large fs:0
.text$mn:000073A0                 push    eax
.text$mn:000073A1                 sub     esp, 10h
.text$mn:000073A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000073A9                 xor     eax, ebp
.text$mn:000073AB                 push    eax
.text$mn:000073AC                 lea     eax, [ebp+var_C]
.text$mn:000073AF                 mov     large fs:0, eax
.text$mn:000073B5                 mov     [ebp+var_1C], ecx
.text$mn:000073B8                 mov     [ebp+var_18], 0
.text$mn:000073BF                 mov     eax, [ebp+arg_4]
.text$mn:000073C2                 push    eax             ; int
.text$mn:000073C3                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:000073C8                 add     esp, 4
.text$mn:000073CB                 mov     [ebp+var_10], eax
.text$mn:000073CE                 cmp     [ebp+var_10], 0
.text$mn:000073D2                 jz      short loc_73DC
.text$mn:000073D4                 mov     ecx, [ebp+var_10]
.text$mn:000073D7                 mov     [ebp+Str], ecx
.text$mn:000073DA                 jmp     short loc_73E3
.text$mn:000073DC ; ---------------------------------------------------------------------------
.text$mn:000073DC
.text$mn:000073DC loc_73DC:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:000073DC                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:000073E3
.text$mn:000073E3 loc_73E3:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:000073E3                 mov     edx, [ebp+Str]
.text$mn:000073E6                 push    edx             ; Str
.text$mn:000073E7                 mov     ecx, [ebp+arg_0]
.text$mn:000073EA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000073EF                 mov     [ebp+var_4], 0
.text$mn:000073F6                 mov     eax, [ebp+var_18]
.text$mn:000073F9                 or      eax, 1
.text$mn:000073FC                 mov     [ebp+var_18], eax
.text$mn:000073FF                 mov     eax, [ebp+arg_0]
.text$mn:00007402                 mov     ecx, [ebp+var_C]
.text$mn:00007405                 mov     large fs:0, ecx
.text$mn:0000740C                 pop     ecx
.text$mn:0000740D                 mov     esp, ebp
.text$mn:0000740F                 pop     ebp
.text$mn:00007410                 retn    8
.text$mn:00007410 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00007410
.text$mn:00007410 ; ---------------------------------------------------------------------------
.text$mn:00007413                 align 4
.text$mn:00007413 _text$mn        ends
.text$mn:00007413
.text$x:00007414 ; ===========================================================================
.text$x:00007414
.text$x:00007414 ; Segment type: Pure code
.text$x:00007414 ; Segment permissions: Read/Execute
.text$x:00007414 _text$x         segment para public 'CODE' use32
.text$x:00007414                 assume cs:_text$x
.text$x:00007414                 ;org 7414h
.text$x:00007414 ; COMDAT (pick associative to section at 7390)
.text$x:00007414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007414
.text$x:00007414 ; =============== S U B R O U T I N E =======================================
.text$x:00007414
.text$x:00007414
.text$x:00007414 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00007414                                         ; DATA XREF: .xdata$x:00007E74o
.text$x:00007414                 mov     eax, [ebp-18h]
.text$x:00007417                 and     eax, 1
.text$x:0000741A                 jz      $LN6_1
.text$x:00007420                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00007424                 mov     ecx, [ebp+8]
.text$x:00007427                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000742C ; ---------------------------------------------------------------------------
.text$x:0000742C
.text$x:0000742C $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000742C                 retn
.text$x:0000742C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000742C
.text$x:0000742D
.text$x:0000742D ; =============== S U B R O U T I N E =======================================
.text$x:0000742D
.text$x:0000742D
.text$x:0000742D __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000742D                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000742D
.text$x:0000742D arg_4           = dword ptr  8
.text$x:0000742D
.text$x:0000742D                 mov     edx, [esp+arg_4]
.text$x:00007431                 lea     eax, [edx+0Ch]
.text$x:00007434                 mov     ecx, [edx-14h]
.text$x:00007437                 xor     ecx, eax
.text$x:00007439                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000743E                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00007443                 jmp     ___CxxFrameHandler3
.text$x:00007443 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00007443
.text$x:00007443 _text$x         ends
.text$x:00007443
.text$mn:00007448 ; ===========================================================================
.text$mn:00007448
.text$mn:00007448 ; Segment type: Pure code
.text$mn:00007448 ; Segment permissions: Read/Execute
.text$mn:00007448 _text$mn        segment para public 'CODE' use32
.text$mn:00007448                 assume cs:_text$mn
.text$mn:00007448                 ;org 7448h
.text$mn:00007448 ; COMDAT (pick any)
.text$mn:00007448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007448
.text$mn:00007448 ; =============== S U B R O U T I N E =======================================
.text$mn:00007448
.text$mn:00007448 ; Attributes: bp-based frame
.text$mn:00007448
.text$mn:00007448 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00007448                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00007448 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00007448                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00007448
.text$mn:00007448 var_4           = dword ptr -4
.text$mn:00007448 Dst             = dword ptr  8
.text$mn:00007448 Src             = dword ptr  0Ch
.text$mn:00007448 Size            = dword ptr  10h
.text$mn:00007448
.text$mn:00007448                 push    ebp
.text$mn:00007449                 mov     ebp, esp
.text$mn:0000744B                 push    ecx
.text$mn:0000744C                 cmp     [ebp+Size], 0
.text$mn:00007450                 jnz     short loc_745A
.text$mn:00007452                 mov     eax, [ebp+Dst]
.text$mn:00007455                 mov     [ebp+var_4], eax
.text$mn:00007458                 jmp     short loc_7471
.text$mn:0000745A ; ---------------------------------------------------------------------------
.text$mn:0000745A
.text$mn:0000745A loc_745A:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000745A                 mov     ecx, [ebp+Size]
.text$mn:0000745D                 push    ecx             ; Size
.text$mn:0000745E                 mov     edx, [ebp+Src]
.text$mn:00007461                 push    edx             ; Src
.text$mn:00007462                 mov     eax, [ebp+Dst]
.text$mn:00007465                 push    eax             ; Dst
.text$mn:00007466                 call    _memmove
.text$mn:0000746B                 add     esp, 0Ch
.text$mn:0000746E                 mov     [ebp+var_4], eax
.text$mn:00007471
.text$mn:00007471 loc_7471:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00007471                 mov     eax, [ebp+var_4]
.text$mn:00007474                 mov     esp, ebp
.text$mn:00007476                 pop     ebp
.text$mn:00007477                 retn
.text$mn:00007477 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00007477
.text$mn:00007477 _text$mn        ends
.text$mn:00007477
.text$mn:00007478 ; ===========================================================================
.text$mn:00007478
.text$mn:00007478 ; Segment type: Pure code
.text$mn:00007478 ; Segment permissions: Read/Execute
.text$mn:00007478 _text$mn        segment para public 'CODE' use32
.text$mn:00007478                 assume cs:_text$mn
.text$mn:00007478                 ;org 7478h
.text$mn:00007478 ; COMDAT (pick any)
.text$mn:00007478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007478
.text$mn:00007478 ; =============== S U B R O U T I N E =======================================
.text$mn:00007478
.text$mn:00007478 ; Attributes: bp-based frame
.text$mn:00007478
.text$mn:00007478 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:00007478                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00007478 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00007478                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:00007478
.text$mn:00007478 var_4           = dword ptr -4
.text$mn:00007478 Dst             = dword ptr  8
.text$mn:00007478 Src             = dword ptr  0Ch
.text$mn:00007478 arg_8           = dword ptr  10h
.text$mn:00007478
.text$mn:00007478                 push    ebp
.text$mn:00007479                 mov     ebp, esp
.text$mn:0000747B                 push    ecx
.text$mn:0000747C                 cmp     [ebp+arg_8], 0
.text$mn:00007480                 jnz     short loc_748A
.text$mn:00007482                 mov     eax, [ebp+Dst]
.text$mn:00007485                 mov     [ebp+var_4], eax
.text$mn:00007488                 jmp     short loc_74A1
.text$mn:0000748A ; ---------------------------------------------------------------------------
.text$mn:0000748A
.text$mn:0000748A loc_748A:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000748A                 mov     ecx, [ebp+arg_8]
.text$mn:0000748D                 push    ecx             ; int
.text$mn:0000748E                 mov     edx, [ebp+Src]
.text$mn:00007491                 push    edx             ; Src
.text$mn:00007492                 mov     eax, [ebp+Dst]
.text$mn:00007495                 push    eax             ; Dst
.text$mn:00007496                 call    _wmemmove
.text$mn:0000749B                 add     esp, 0Ch
.text$mn:0000749E                 mov     [ebp+var_4], eax
.text$mn:000074A1
.text$mn:000074A1 loc_74A1:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:000074A1                 mov     eax, [ebp+var_4]
.text$mn:000074A4                 mov     esp, ebp
.text$mn:000074A6                 pop     ebp
.text$mn:000074A7                 retn
.text$mn:000074A7 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:000074A7
.text$mn:000074A7 _text$mn        ends
.text$mn:000074A7
.text$mn:000074A8 ; ===========================================================================
.text$mn:000074A8
.text$mn:000074A8 ; Segment type: Pure code
.text$mn:000074A8 ; Segment permissions: Read/Execute
.text$mn:000074A8 _text$mn        segment para public 'CODE' use32
.text$mn:000074A8                 assume cs:_text$mn
.text$mn:000074A8                 ;org 74A8h
.text$mn:000074A8 ; COMDAT (pick any)
.text$mn:000074A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074A8
.text$mn:000074A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000074A8
.text$mn:000074A8 ; Attributes: bp-based frame
.text$mn:000074A8
.text$mn:000074A8 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:000074A8                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:000074A8 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:000074A8                                         ; DATA XREF: .rdata:000082BCo
.text$mn:000074A8
.text$mn:000074A8 var_4           = dword ptr -4
.text$mn:000074A8
.text$mn:000074A8                 push    ebp
.text$mn:000074A9                 mov     ebp, esp
.text$mn:000074AB                 push    ecx
.text$mn:000074AC                 mov     [ebp+var_4], ecx
.text$mn:000074AF                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:000074B4                 mov     esp, ebp
.text$mn:000074B6                 pop     ebp
.text$mn:000074B7                 retn
.text$mn:000074B7 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:000074B7
.text$mn:000074B7 _text$mn        ends
.text$mn:000074B7
.text$mn:000074B8 ; ===========================================================================
.text$mn:000074B8
.text$mn:000074B8 ; Segment type: Pure code
.text$mn:000074B8 ; Segment permissions: Read/Execute
.text$mn:000074B8 _text$mn        segment para public 'CODE' use32
.text$mn:000074B8                 assume cs:_text$mn
.text$mn:000074B8                 ;org 74B8h
.text$mn:000074B8 ; COMDAT (pick any)
.text$mn:000074B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074B8
.text$mn:000074B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000074B8
.text$mn:000074B8 ; Attributes: bp-based frame
.text$mn:000074B8
.text$mn:000074B8 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:000074B8                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:000074B8 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:000074B8                                         ; DATA XREF: .rdata:000082F0o
.text$mn:000074B8
.text$mn:000074B8 var_4           = dword ptr -4
.text$mn:000074B8
.text$mn:000074B8                 push    ebp
.text$mn:000074B9                 mov     ebp, esp
.text$mn:000074BB                 push    ecx
.text$mn:000074BC                 mov     [ebp+var_4], ecx
.text$mn:000074BF                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:000074C4                 mov     esp, ebp
.text$mn:000074C6                 pop     ebp
.text$mn:000074C7                 retn
.text$mn:000074C7 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:000074C7
.text$mn:000074C7 _text$mn        ends
.text$mn:000074C7
.text$mn:000074C8 ; ===========================================================================
.text$mn:000074C8
.text$mn:000074C8 ; Segment type: Pure code
.text$mn:000074C8 ; Segment permissions: Read/Execute
.text$mn:000074C8 _text$mn        segment para public 'CODE' use32
.text$mn:000074C8                 assume cs:_text$mn
.text$mn:000074C8                 ;org 74C8h
.text$mn:000074C8 ; COMDAT (pick any)
.text$mn:000074C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074C8
.text$mn:000074C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000074C8
.text$mn:000074C8 ; Attributes: bp-based frame
.text$mn:000074C8
.text$mn:000074C8 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:000074C8                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:000074C8 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:000074C8                                         ; DATA XREF: .rdata:00008330o
.text$mn:000074C8
.text$mn:000074C8 var_4           = dword ptr -4
.text$mn:000074C8
.text$mn:000074C8                 push    ebp
.text$mn:000074C9                 mov     ebp, esp
.text$mn:000074CB                 push    ecx
.text$mn:000074CC                 mov     [ebp+var_4], ecx
.text$mn:000074CF                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:000074D4                 mov     esp, ebp
.text$mn:000074D6                 pop     ebp
.text$mn:000074D7                 retn
.text$mn:000074D7 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:000074D7
.text$mn:000074D7 _text$mn        ends
.text$mn:000074D7
.text$mn:000074D8 ; ===========================================================================
.text$mn:000074D8
.text$mn:000074D8 ; Segment type: Pure code
.text$mn:000074D8 ; Segment permissions: Read/Execute
.text$mn:000074D8 _text$mn        segment para public 'CODE' use32
.text$mn:000074D8                 assume cs:_text$mn
.text$mn:000074D8                 ;org 74D8h
.text$mn:000074D8 ; COMDAT (pick any)
.text$mn:000074D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074D8
.text$mn:000074D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000074D8
.text$mn:000074D8 ; Attributes: bp-based frame
.text$mn:000074D8
.text$mn:000074D8 ; __int32 __thiscall WordStyleDlg::notifyDataModified(WordStyleDlg *__hidden this)
.text$mn:000074D8                 public ?notifyDataModified@WordStyleDlg@@AAEJXZ
.text$mn:000074D8 ?notifyDataModified@WordStyleDlg@@AAEJXZ proc near
.text$mn:000074D8                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+73Cp
.text$mn:000074D8                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+762p ...
.text$mn:000074D8
.text$mn:000074D8 var_4           = dword ptr -4
.text$mn:000074D8
.text$mn:000074D8                 push    ebp
.text$mn:000074D9                 mov     ebp, esp
.text$mn:000074DB                 push    ecx
.text$mn:000074DC                 mov     [ebp+var_4], ecx
.text$mn:000074DF                 mov     eax, [ebp+var_4]
.text$mn:000074E2                 mov     byte ptr [eax+37AE8h], 1
.text$mn:000074E9                 mov     ecx, [ebp+var_4]
.text$mn:000074EC                 mov     byte ptr [ecx+37AE9h], 1
.text$mn:000074F3                 push    1               ; bEnable
.text$mn:000074F5                 push    8FDh            ; nIDDlgItem
.text$mn:000074FA                 mov     edx, [ebp+var_4]
.text$mn:000074FD                 mov     eax, [edx+0Ch]
.text$mn:00007500                 push    eax             ; hDlg
.text$mn:00007501                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00007507                 push    eax             ; hWnd
.text$mn:00007508                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:0000750E                 mov     eax, 1
.text$mn:00007513                 mov     esp, ebp
.text$mn:00007515                 pop     ebp
.text$mn:00007516                 retn
.text$mn:00007516 ?notifyDataModified@WordStyleDlg@@AAEJXZ endp
.text$mn:00007516
.text$mn:00007516 ; ---------------------------------------------------------------------------
.text$mn:00007517                 align 4
.text$mn:00007517 _text$mn        ends
.text$mn:00007517
.text$mn:00007518 ; ===========================================================================
.text$mn:00007518
.text$mn:00007518 ; Segment type: Pure code
.text$mn:00007518 ; Segment permissions: Read/Execute
.text$mn:00007518 _text$mn        segment para public 'CODE' use32
.text$mn:00007518                 assume cs:_text$mn
.text$mn:00007518                 ;org 7518h
.text$mn:00007518 ; COMDAT (pick any)
.text$mn:00007518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007518
.text$mn:00007518 ; =============== S U B R O U T I N E =======================================
.text$mn:00007518
.text$mn:00007518 ; Attributes: bp-based frame
.text$mn:00007518
.text$mn:00007518 ; void __thiscall Window::reSizeTo(Window *this, struct tagRECT *)
.text$mn:00007518                 public ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
.text$mn:00007518 ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:00007518                                         ; DATA XREF: .rdata:00008240o
.text$mn:00007518                                         ; .rdata:00008274o
.text$mn:00007518
.text$mn:00007518 var_4           = dword ptr -4
.text$mn:00007518 arg_0           = dword ptr  8
.text$mn:00007518
.text$mn:00007518                 push    ebp
.text$mn:00007519                 mov     ebp, esp
.text$mn:0000751B                 push    ecx
.text$mn:0000751C                 mov     [ebp+var_4], ecx
.text$mn:0000751F                 push    1               ; bRepaint
.text$mn:00007521                 mov     eax, [ebp+arg_0]
.text$mn:00007524                 mov     ecx, [eax+0Ch]
.text$mn:00007527                 push    ecx             ; nHeight
.text$mn:00007528                 mov     edx, [ebp+arg_0]
.text$mn:0000752B                 mov     eax, [edx+8]
.text$mn:0000752E                 push    eax             ; nWidth
.text$mn:0000752F                 mov     ecx, [ebp+arg_0]
.text$mn:00007532                 mov     edx, [ecx+4]
.text$mn:00007535                 push    edx             ; Y
.text$mn:00007536                 mov     eax, [ebp+arg_0]
.text$mn:00007539                 mov     ecx, [eax]
.text$mn:0000753B                 push    ecx             ; X
.text$mn:0000753C                 mov     edx, [ebp+var_4]
.text$mn:0000753F                 mov     eax, [edx+0Ch]
.text$mn:00007542                 push    eax             ; hWnd
.text$mn:00007543                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:00007549                 push    0
.text$mn:0000754B                 mov     ecx, [ebp+var_4]
.text$mn:0000754E                 mov     edx, [ecx]
.text$mn:00007550                 mov     ecx, [ebp+var_4]
.text$mn:00007553                 mov     eax, [edx+18h]
.text$mn:00007556                 call    eax
.text$mn:00007558                 mov     esp, ebp
.text$mn:0000755A                 pop     ebp
.text$mn:0000755B                 retn    4
.text$mn:0000755B ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000755B
.text$mn:0000755B ; ---------------------------------------------------------------------------
.text$mn:0000755E                 align 10h
.text$mn:0000755E _text$mn        ends
.text$mn:0000755E
.text$mn:00007560 ; ===========================================================================
.text$mn:00007560
.text$mn:00007560 ; Segment type: Pure code
.text$mn:00007560 ; Segment permissions: Read/Execute
.text$mn:00007560 _text$mn        segment para public 'CODE' use32
.text$mn:00007560                 assume cs:_text$mn
.text$mn:00007560                 ;org 7560h
.text$mn:00007560 ; COMDAT (pick any)
.text$mn:00007560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007560
.text$mn:00007560 ; =============== S U B R O U T I N E =======================================
.text$mn:00007560
.text$mn:00007560 ; Attributes: bp-based frame
.text$mn:00007560
.text$mn:00007560 ; void __thiscall Window::reSizeToWH(Window *this, struct tagRECT *)
.text$mn:00007560                 public ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
.text$mn:00007560 ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:00007560                                         ; DATA XREF: .rdata:00008244o
.text$mn:00007560                                         ; .rdata:00008278o
.text$mn:00007560
.text$mn:00007560 var_4           = dword ptr -4
.text$mn:00007560 arg_0           = dword ptr  8
.text$mn:00007560
.text$mn:00007560                 push    ebp
.text$mn:00007561                 mov     ebp, esp
.text$mn:00007563                 push    ecx
.text$mn:00007564                 mov     [ebp+var_4], ecx
.text$mn:00007567                 push    1               ; bRepaint
.text$mn:00007569                 mov     eax, [ebp+arg_0]
.text$mn:0000756C                 mov     ecx, [ebp+arg_0]
.text$mn:0000756F                 mov     edx, [eax+0Ch]
.text$mn:00007572                 sub     edx, [ecx+4]
.text$mn:00007575                 push    edx             ; nHeight
.text$mn:00007576                 mov     eax, [ebp+arg_0]
.text$mn:00007579                 mov     ecx, [ebp+arg_0]
.text$mn:0000757C                 mov     edx, [eax+8]
.text$mn:0000757F                 sub     edx, [ecx]
.text$mn:00007581                 push    edx             ; nWidth
.text$mn:00007582                 mov     eax, [ebp+arg_0]
.text$mn:00007585                 mov     ecx, [eax+4]
.text$mn:00007588                 push    ecx             ; Y
.text$mn:00007589                 mov     edx, [ebp+arg_0]
.text$mn:0000758C                 mov     eax, [edx]
.text$mn:0000758E                 push    eax             ; X
.text$mn:0000758F                 mov     ecx, [ebp+var_4]
.text$mn:00007592                 mov     edx, [ecx+0Ch]
.text$mn:00007595                 push    edx             ; hWnd
.text$mn:00007596                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000759C                 push    0
.text$mn:0000759E                 mov     eax, [ebp+var_4]
.text$mn:000075A1                 mov     edx, [eax]
.text$mn:000075A3                 mov     ecx, [ebp+var_4]
.text$mn:000075A6                 mov     eax, [edx+18h]
.text$mn:000075A9                 call    eax
.text$mn:000075AB                 mov     esp, ebp
.text$mn:000075AD                 pop     ebp
.text$mn:000075AE                 retn    4
.text$mn:000075AE ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:000075AE
.text$mn:000075AE ; ---------------------------------------------------------------------------
.text$mn:000075B1                 align 4
.text$mn:000075B1 _text$mn        ends
.text$mn:000075B1
.text$mn:000075B4 ; ===========================================================================
.text$mn:000075B4
.text$mn:000075B4 ; Segment type: Pure code
.text$mn:000075B4 ; Segment permissions: Read/Execute
.text$mn:000075B4 _text$mn        segment para public 'CODE' use32
.text$mn:000075B4                 assume cs:_text$mn
.text$mn:000075B4                 ;org 75B4h
.text$mn:000075B4 ; COMDAT (pick any)
.text$mn:000075B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075B4
.text$mn:000075B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000075B4
.text$mn:000075B4 ; Attributes: bp-based frame
.text$mn:000075B4
.text$mn:000075B4 ; void __thiscall Window::redraw(Window *this, bool)
.text$mn:000075B4                 public ?redraw@Window@@UBEX_N@Z
.text$mn:000075B4 ?redraw@Window@@UBEX_N@Z proc near      ; DATA XREF: .rdata:00008248o
.text$mn:000075B4                                         ; .rdata:0000827Co
.text$mn:000075B4
.text$mn:000075B4 var_4           = dword ptr -4
.text$mn:000075B4 arg_0           = byte ptr  8
.text$mn:000075B4
.text$mn:000075B4                 push    ebp
.text$mn:000075B5                 mov     ebp, esp
.text$mn:000075B7                 push    ecx
.text$mn:000075B8                 mov     [ebp+var_4], ecx
.text$mn:000075BB                 push    1               ; bErase
.text$mn:000075BD                 push    0               ; lpRect
.text$mn:000075BF                 mov     eax, [ebp+var_4]
.text$mn:000075C2                 mov     ecx, [eax+0Ch]
.text$mn:000075C5                 push    ecx             ; hWnd
.text$mn:000075C6                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:000075CC                 movzx   edx, [ebp+arg_0]
.text$mn:000075D0                 test    edx, edx
.text$mn:000075D2                 jz      short loc_75E1
.text$mn:000075D4                 mov     eax, [ebp+var_4]
.text$mn:000075D7                 mov     ecx, [eax+0Ch]
.text$mn:000075DA                 push    ecx             ; hWnd
.text$mn:000075DB                 call    dword ptr ds:__imp__UpdateWindow@4 ; UpdateWindow(x)
.text$mn:000075E1
.text$mn:000075E1 loc_75E1:                               ; CODE XREF: Window::redraw(bool)+1Ej
.text$mn:000075E1                 mov     esp, ebp
.text$mn:000075E3                 pop     ebp
.text$mn:000075E4                 retn    4
.text$mn:000075E4 ?redraw@Window@@UBEX_N@Z endp
.text$mn:000075E4
.text$mn:000075E4 ; ---------------------------------------------------------------------------
.text$mn:000075E7                 align 4
.text$mn:000075E7 _text$mn        ends
.text$mn:000075E7
.text$mn:000075E8 ; ===========================================================================
.text$mn:000075E8
.text$mn:000075E8 ; Segment type: Pure code
.text$mn:000075E8 ; Segment permissions: Read/Execute
.text$mn:000075E8 _text$mn        segment para public 'CODE' use32
.text$mn:000075E8                 assume cs:_text$mn
.text$mn:000075E8                 ;org 75E8h
.text$mn:000075E8 ; COMDAT (pick any)
.text$mn:000075E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075E8
.text$mn:000075E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000075E8
.text$mn:000075E8 ; Attributes: bp-based frame
.text$mn:000075E8
.text$mn:000075E8 ; void __thiscall NppParameters::removeTransparent(NppParameters *this, HWND)
.text$mn:000075E8                 public ?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z
.text$mn:000075E8 ?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z proc near
.text$mn:000075E8                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+BB7p
.text$mn:000075E8
.text$mn:000075E8 var_4           = dword ptr -4
.text$mn:000075E8 hWnd            = dword ptr  8
.text$mn:000075E8
.text$mn:000075E8                 push    ebp
.text$mn:000075E9                 mov     ebp, esp
.text$mn:000075EB                 push    ecx
.text$mn:000075EC                 mov     [ebp+var_4], ecx
.text$mn:000075EF                 push    0FFFFFFECh      ; nIndex
.text$mn:000075F1                 mov     eax, [ebp+hWnd]
.text$mn:000075F4                 push    eax             ; hWnd
.text$mn:000075F5                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:000075FB                 and     eax, 0FFF7FFFFh
.text$mn:00007600                 push    eax             ; dwNewLong
.text$mn:00007601                 push    0FFFFFFECh      ; nIndex
.text$mn:00007603                 mov     ecx, [ebp+hWnd]
.text$mn:00007606                 push    ecx             ; hWnd
.text$mn:00007607                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:0000760D                 mov     esp, ebp
.text$mn:0000760F                 pop     ebp
.text$mn:00007610                 retn    4
.text$mn:00007610 ?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z endp
.text$mn:00007610
.text$mn:00007610 ; ---------------------------------------------------------------------------
.text$mn:00007613                 align 4
.text$mn:00007613 _text$mn        ends
.text$mn:00007613
.text$mn:00007614 ; ===========================================================================
.text$mn:00007614
.text$mn:00007614 ; Segment type: Pure code
.text$mn:00007614 ; Segment permissions: Read/Execute
.text$mn:00007614 _text$mn        segment para public 'CODE' use32
.text$mn:00007614                 assume cs:_text$mn
.text$mn:00007614                 ;org 7614h
.text$mn:00007614 ; COMDAT (pick any)
.text$mn:00007614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007614
.text$mn:00007614 ; =============== S U B R O U T I N E =======================================
.text$mn:00007614
.text$mn:00007614 ; Attributes: bp-based frame
.text$mn:00007614
.text$mn:00007614 ; void __thiscall WordStyleDlg::restoreGlobalOverrideValues(WordStyleDlg *__hidden this)
.text$mn:00007614                 public ?restoreGlobalOverrideValues@WordStyleDlg@@QAEXXZ
.text$mn:00007614 ?restoreGlobalOverrideValues@WordStyleDlg@@QAEXXZ proc near
.text$mn:00007614                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+93Ep
.text$mn:00007614
.text$mn:00007614 var_8           = dword ptr -8
.text$mn:00007614 var_4           = dword ptr -4
.text$mn:00007614
.text$mn:00007614                 push    ebp
.text$mn:00007615                 mov     ebp, esp
.text$mn:00007617                 sub     esp, 8
.text$mn:0000761A                 mov     [ebp+var_4], ecx
.text$mn:0000761D                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00007622                 mov     ecx, eax        ; this
.text$mn:00007624                 call    ?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ ; NppParameters::getGlobalOverrideStyle(void)
.text$mn:00007629                 mov     [ebp+var_8], eax
.text$mn:0000762C                 mov     eax, [ebp+var_4]
.text$mn:0000762F                 add     eax, 37AD8h
.text$mn:00007634                 mov     ecx, [ebp+var_8]
.text$mn:00007637                 mov     edx, [eax]
.text$mn:00007639                 mov     [ecx], edx
.text$mn:0000763B                 mov     dx, [eax+4]
.text$mn:0000763F                 mov     [ecx+4], dx
.text$mn:00007643                 mov     al, [eax+6]
.text$mn:00007646                 mov     [ecx+6], al
.text$mn:00007649                 mov     esp, ebp
.text$mn:0000764B                 pop     ebp
.text$mn:0000764C                 retn
.text$mn:0000764C ?restoreGlobalOverrideValues@WordStyleDlg@@QAEXXZ endp
.text$mn:0000764C
.text$mn:0000764C ; ---------------------------------------------------------------------------
.text$mn:0000764D                 align 10h
.text$mn:0000764D _text$mn        ends
.text$mn:0000764D
.text$mn:00007650 ; ===========================================================================
.text$mn:00007650
.text$mn:00007650 ; Segment type: Pure code
.text$mn:00007650 ; Segment permissions: Read/Execute
.text$mn:00007650 _text$mn        segment para public 'CODE' use32
.text$mn:00007650                 assume cs:_text$mn
.text$mn:00007650                 ;org 7650h
.text$mn:00007650 ; COMDAT (pick any)
.text$mn:00007650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007650
.text$mn:00007650 ; =============== S U B R O U T I N E =======================================
.text$mn:00007650
.text$mn:00007650 ; Attributes: bp-based frame
.text$mn:00007650
.text$mn:00007650 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:00007650                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:00007650 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:00007650                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:00007650
.text$mn:00007650 var_8           = dword ptr -8
.text$mn:00007650 var_1           = byte ptr -1
.text$mn:00007650 arg_0           = dword ptr  8
.text$mn:00007650
.text$mn:00007650                 push    ebp
.text$mn:00007651                 mov     ebp, esp
.text$mn:00007653                 sub     esp, 8
.text$mn:00007656                 mov     [ebp+var_8], ecx
.text$mn:00007659                 mov     eax, [ebp+var_8]
.text$mn:0000765C                 push    eax
.text$mn:0000765D                 lea     ecx, [ebp+var_1]
.text$mn:00007660                 push    ecx
.text$mn:00007661                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:00007666                 add     esp, 8
.text$mn:00007669                 push    eax
.text$mn:0000766A                 mov     ecx, [ebp+arg_0]
.text$mn:0000766D                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:00007672                 mov     eax, [ebp+arg_0]
.text$mn:00007675                 mov     esp, ebp
.text$mn:00007677                 pop     ebp
.text$mn:00007678                 retn    4
.text$mn:00007678 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:00007678
.text$mn:00007678 ; ---------------------------------------------------------------------------
.text$mn:0000767B                 align 4
.text$mn:0000767B _text$mn        ends
.text$mn:0000767B
.text$mn:0000767C ; ===========================================================================
.text$mn:0000767C
.text$mn:0000767C ; Segment type: Pure code
.text$mn:0000767C ; Segment permissions: Read/Execute
.text$mn:0000767C _text$mn        segment para public 'CODE' use32
.text$mn:0000767C                 assume cs:_text$mn
.text$mn:0000767C                 ;org 767Ch
.text$mn:0000767C ; COMDAT (pick any)
.text$mn:0000767C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000767C
.text$mn:0000767C ; =============== S U B R O U T I N E =======================================
.text$mn:0000767C
.text$mn:0000767C ; Attributes: bp-based frame
.text$mn:0000767C
.text$mn:0000767C ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000767C                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000767C ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000767C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000767C
.text$mn:0000767C var_4           = dword ptr -4
.text$mn:0000767C arg_0           = dword ptr  8
.text$mn:0000767C
.text$mn:0000767C                 push    ebp
.text$mn:0000767D                 mov     ebp, esp
.text$mn:0000767F                 push    ecx
.text$mn:00007680                 mov     [ebp+var_4], ecx
.text$mn:00007683                 mov     eax, [ebp+var_4]
.text$mn:00007686                 push    eax
.text$mn:00007687                 mov     ecx, [ebp+arg_0]
.text$mn:0000768A                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000768F                 mov     eax, [ebp+arg_0]
.text$mn:00007692                 mov     esp, ebp
.text$mn:00007694                 pop     ebp
.text$mn:00007695                 retn    4
.text$mn:00007695 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:00007695
.text$mn:00007695 _text$mn        ends
.text$mn:00007695
.text$mn:00007698 ; ===========================================================================
.text$mn:00007698
.text$mn:00007698 ; Segment type: Pure code
.text$mn:00007698 ; Segment permissions: Read/Execute
.text$mn:00007698 _text$mn        segment para public 'CODE' use32
.text$mn:00007698                 assume cs:_text$mn
.text$mn:00007698                 ;org 7698h
.text$mn:00007698 ; COMDAT (pick any)
.text$mn:00007698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007698
.text$mn:00007698 ; =============== S U B R O U T I N E =======================================
.text$mn:00007698
.text$mn:00007698 ; Attributes: bp-based frame
.text$mn:00007698
.text$mn:00007698 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:00007698                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:00007698 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:00007698                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:00007698
.text$mn:00007698 arg_0           = dword ptr  8
.text$mn:00007698 arg_4           = dword ptr  0Ch
.text$mn:00007698
.text$mn:00007698                 push    ebp
.text$mn:00007699                 mov     ebp, esp
.text$mn:0000769B                 mov     eax, [ebp+arg_0]
.text$mn:0000769E                 push    eax
.text$mn:0000769F                 mov     ecx, [ebp+arg_4]
.text$mn:000076A2                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:000076A7                 mov     eax, [ebp+arg_0]
.text$mn:000076AA                 pop     ebp
.text$mn:000076AB                 retn
.text$mn:000076AB ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:000076AB
.text$mn:000076AB _text$mn        ends
.text$mn:000076AB
.text$mn:000076AC ; ===========================================================================
.text$mn:000076AC
.text$mn:000076AC ; Segment type: Pure code
.text$mn:000076AC ; Segment permissions: Read/Execute
.text$mn:000076AC _text$mn        segment para public 'CODE' use32
.text$mn:000076AC                 assume cs:_text$mn
.text$mn:000076AC                 ;org 76ACh
.text$mn:000076AC ; COMDAT (pick any)
.text$mn:000076AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076AC
.text$mn:000076AC ; =============== S U B R O U T I N E =======================================
.text$mn:000076AC
.text$mn:000076AC ; Attributes: bp-based frame
.text$mn:000076AC
.text$mn:000076AC ; void __thiscall ColourPicker::setColour(ColourPicker *this, unsigned __int32)
.text$mn:000076AC                 public ?setColour@ColourPicker@@QAEXK@Z
.text$mn:000076AC ?setColour@ColourPicker@@QAEXK@Z proc near
.text$mn:000076AC                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+213p
.text$mn:000076AC                                         ; WordStyleDlg::setVisualFromStyleList(void)+2A8p
.text$mn:000076AC
.text$mn:000076AC var_4           = dword ptr -4
.text$mn:000076AC arg_0           = dword ptr  8
.text$mn:000076AC
.text$mn:000076AC                 push    ebp
.text$mn:000076AD                 mov     ebp, esp
.text$mn:000076AF                 push    ecx
.text$mn:000076B0                 mov     [ebp+var_4], ecx
.text$mn:000076B3                 mov     eax, [ebp+var_4]
.text$mn:000076B6                 mov     ecx, [ebp+arg_0]
.text$mn:000076B9                 mov     [eax+10h], ecx
.text$mn:000076BC                 mov     esp, ebp
.text$mn:000076BE                 pop     ebp
.text$mn:000076BF                 retn    4
.text$mn:000076BF ?setColour@ColourPicker@@QAEXK@Z endp
.text$mn:000076BF
.text$mn:000076BF ; ---------------------------------------------------------------------------
.text$mn:000076C2                 align 4
.text$mn:000076C2 _text$mn        ends
.text$mn:000076C2
.text$mn:000076C4 ; ===========================================================================
.text$mn:000076C4
.text$mn:000076C4 ; Segment type: Pure code
.text$mn:000076C4 ; Segment permissions: Read/Execute
.text$mn:000076C4 _text$mn        segment para public 'CODE' use32
.text$mn:000076C4                 assume cs:_text$mn
.text$mn:000076C4                 ;org 76C4h
.text$mn:000076C4 ; COMDAT (pick any)
.text$mn:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076C4
.text$mn:000076C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000076C4
.text$mn:000076C4 ; Attributes: bp-based frame
.text$mn:000076C4
.text$mn:000076C4 ; unsigned __int32 __thiscall ColourStaticTextHooker::setColour(ColourStaticTextHooker *this, unsigned __int32)
.text$mn:000076C4                 public ?setColour@ColourStaticTextHooker@@QAEKK@Z
.text$mn:000076C4 ?setColour@ColourStaticTextHooker@@QAEKK@Z proc near
.text$mn:000076C4                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+18Fp
.text$mn:000076C4                                         ; WordStyleDlg::setVisualFromStyleList(void)+1B5p
.text$mn:000076C4
.text$mn:000076C4 var_8           = dword ptr -8
.text$mn:000076C4 var_4           = dword ptr -4
.text$mn:000076C4 arg_0           = dword ptr  8
.text$mn:000076C4
.text$mn:000076C4                 push    ebp
.text$mn:000076C5                 mov     ebp, esp
.text$mn:000076C7                 sub     esp, 8
.text$mn:000076CA                 mov     [ebp+var_4], ecx
.text$mn:000076CD                 mov     eax, [ebp+var_4]
.text$mn:000076D0                 mov     ecx, [eax]
.text$mn:000076D2                 mov     [ebp+var_8], ecx
.text$mn:000076D5                 mov     edx, [ebp+var_4]
.text$mn:000076D8                 mov     eax, [ebp+arg_0]
.text$mn:000076DB                 mov     [edx], eax
.text$mn:000076DD                 mov     eax, [ebp+var_8]
.text$mn:000076E0                 mov     esp, ebp
.text$mn:000076E2                 pop     ebp
.text$mn:000076E3                 retn    4
.text$mn:000076E3 ?setColour@ColourStaticTextHooker@@QAEKK@Z endp
.text$mn:000076E3
.text$mn:000076E3 ; ---------------------------------------------------------------------------
.text$mn:000076E6                 align 4
.text$mn:000076E6 _text$mn        ends
.text$mn:000076E6
.text$mn:000076E8 ; ===========================================================================
.text$mn:000076E8
.text$mn:000076E8 ; Segment type: Pure code
.text$mn:000076E8 ; Segment permissions: Read/Execute
.text$mn:000076E8 _text$mn        segment para public 'CODE' use32
.text$mn:000076E8                 assume cs:_text$mn
.text$mn:000076E8                 ;org 76E8h
.text$mn:000076E8 ; COMDAT (pick any)
.text$mn:000076E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076E8
.text$mn:000076E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000076E8
.text$mn:000076E8 ; Attributes: bp-based frame
.text$mn:000076E8
.text$mn:000076E8 ; void __thiscall ColourPicker::setEnabled(ColourPicker *this, bool)
.text$mn:000076E8                 public ?setEnabled@ColourPicker@@QAEX_N@Z
.text$mn:000076E8 ?setEnabled@ColourPicker@@QAEX_N@Z proc near
.text$mn:000076E8                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+247p
.text$mn:000076E8                                         ; WordStyleDlg::setVisualFromStyleList(void)+2DCp
.text$mn:000076E8
.text$mn:000076E8 var_4           = dword ptr -4
.text$mn:000076E8 arg_0           = byte ptr  8
.text$mn:000076E8
.text$mn:000076E8                 push    ebp
.text$mn:000076E9                 mov     ebp, esp
.text$mn:000076EB                 push    ecx
.text$mn:000076EC                 mov     [ebp+var_4], ecx
.text$mn:000076EF                 mov     eax, [ebp+var_4]
.text$mn:000076F2                 mov     cl, [ebp+arg_0]
.text$mn:000076F5                 mov     [eax+1Ch], cl
.text$mn:000076F8                 mov     esp, ebp
.text$mn:000076FA                 pop     ebp
.text$mn:000076FB                 retn    4
.text$mn:000076FB ?setEnabled@ColourPicker@@QAEX_N@Z endp
.text$mn:000076FB
.text$mn:000076FB ; ---------------------------------------------------------------------------
.text$mn:000076FE                 align 10h
.text$mn:000076FE _text$mn        ends
.text$mn:000076FE
.text$mn:00007700 ; ===========================================================================
.text$mn:00007700
.text$mn:00007700 ; Segment type: Pure code
.text$mn:00007700 ; Segment permissions: Read/Execute
.text$mn:00007700 _text$mn        segment para public 'CODE' use32
.text$mn:00007700                 assume cs:_text$mn
.text$mn:00007700                 ;org 7700h
.text$mn:00007700 ; COMDAT (pick any)
.text$mn:00007700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007700
.text$mn:00007700 ; =============== S U B R O U T I N E =======================================
.text$mn:00007700
.text$mn:00007700 ; Attributes: bp-based frame
.text$mn:00007700
.text$mn:00007700 ; void __thiscall Style::setKeywords(Style *this, const wchar_t *)
.text$mn:00007700                 public ?setKeywords@Style@@QAEXPB_W@Z
.text$mn:00007700 ?setKeywords@Style@@QAEXPB_W@Z proc near
.text$mn:00007700                                         ; CODE XREF: WordStyleDlg::updateUserKeywords(void)+80p
.text$mn:00007700
.text$mn:00007700 var_1C          = dword ptr -1Ch
.text$mn:00007700 var_18          = dword ptr -18h
.text$mn:00007700 var_14          = dword ptr -14h
.text$mn:00007700 var_10          = dword ptr -10h
.text$mn:00007700 var_C           = dword ptr -0Ch
.text$mn:00007700 var_4           = dword ptr -4
.text$mn:00007700 Str             = dword ptr  8
.text$mn:00007700
.text$mn:00007700                 push    ebp
.text$mn:00007701                 mov     ebp, esp
.text$mn:00007703                 push    0FFFFFFFFh
.text$mn:00007705                 push    offset __ehhandler$?setKeywords@Style@@QAEXPB_W@Z
.text$mn:0000770A                 mov     eax, large fs:0
.text$mn:00007710                 push    eax
.text$mn:00007711                 sub     esp, 10h
.text$mn:00007714                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007719                 xor     eax, ebp
.text$mn:0000771B                 push    eax
.text$mn:0000771C                 lea     eax, [ebp+var_C]
.text$mn:0000771F                 mov     large fs:0, eax
.text$mn:00007725                 mov     [ebp+var_10], ecx
.text$mn:00007728                 mov     eax, [ebp+var_10]
.text$mn:0000772B                 cmp     dword ptr [eax+28h], 0
.text$mn:0000772F                 jnz     short loc_777B
.text$mn:00007731                 push    1Ch             ; unsigned int
.text$mn:00007733                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00007738                 add     esp, 4
.text$mn:0000773B                 mov     [ebp+var_14], eax
.text$mn:0000773E                 mov     [ebp+var_4], 0
.text$mn:00007745                 cmp     [ebp+var_14], 0
.text$mn:00007749                 jz      short loc_775C
.text$mn:0000774B                 mov     ecx, [ebp+Str]
.text$mn:0000774E                 push    ecx             ; Str
.text$mn:0000774F                 mov     ecx, [ebp+var_14]
.text$mn:00007752                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00007757                 mov     [ebp+var_18], eax
.text$mn:0000775A                 jmp     short loc_7763
.text$mn:0000775C ; ---------------------------------------------------------------------------
.text$mn:0000775C
.text$mn:0000775C loc_775C:                               ; CODE XREF: Style::setKeywords(wchar_t const *)+49j
.text$mn:0000775C                 mov     [ebp+var_18], 0
.text$mn:00007763
.text$mn:00007763 loc_7763:                               ; CODE XREF: Style::setKeywords(wchar_t const *)+5Aj
.text$mn:00007763                 mov     edx, [ebp+var_18]
.text$mn:00007766                 mov     [ebp+var_1C], edx
.text$mn:00007769                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007770                 mov     eax, [ebp+var_10]
.text$mn:00007773                 mov     ecx, [ebp+var_1C]
.text$mn:00007776                 mov     [eax+28h], ecx
.text$mn:00007779                 jmp     short loc_778A
.text$mn:0000777B ; ---------------------------------------------------------------------------
.text$mn:0000777B
.text$mn:0000777B loc_777B:                               ; CODE XREF: Style::setKeywords(wchar_t const *)+2Fj
.text$mn:0000777B                 mov     edx, [ebp+Str]
.text$mn:0000777E                 push    edx             ; Str
.text$mn:0000777F                 mov     eax, [ebp+var_10]
.text$mn:00007782                 mov     ecx, [eax+28h]
.text$mn:00007785                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000778A
.text$mn:0000778A loc_778A:                               ; CODE XREF: Style::setKeywords(wchar_t const *)+79j
.text$mn:0000778A                 mov     ecx, [ebp+var_C]
.text$mn:0000778D                 mov     large fs:0, ecx
.text$mn:00007794                 pop     ecx
.text$mn:00007795                 mov     esp, ebp
.text$mn:00007797                 pop     ebp
.text$mn:00007798                 retn    4
.text$mn:00007798 ?setKeywords@Style@@QAEXPB_W@Z endp
.text$mn:00007798
.text$mn:00007798 ; ---------------------------------------------------------------------------
.text$mn:0000779B                 align 4
.text$mn:0000779B _text$mn        ends
.text$mn:0000779B
.text$x:0000779C ; ===========================================================================
.text$x:0000779C
.text$x:0000779C ; Segment type: Pure code
.text$x:0000779C ; Segment permissions: Read/Execute
.text$x:0000779C _text$x         segment para public 'CODE' use32
.text$x:0000779C                 assume cs:_text$x
.text$x:0000779C                 ;org 779Ch
.text$x:0000779C ; COMDAT (pick associative to section at 7700)
.text$x:0000779C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000779C
.text$x:0000779C ; =============== S U B R O U T I N E =======================================
.text$x:0000779C
.text$x:0000779C
.text$x:0000779C __unwindfunclet$?setKeywords@Style@@QAEXPB_W@Z$0 proc near
.text$x:0000779C                                         ; DATA XREF: .xdata$x:000080B8o
.text$x:0000779C                 mov     eax, [ebp-14h]
.text$x:0000779F                 push    eax             ; void *
.text$x:000077A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000077A5                 pop     ecx
.text$x:000077A6                 retn
.text$x:000077A6 __unwindfunclet$?setKeywords@Style@@QAEXPB_W@Z$0 endp
.text$x:000077A6
.text$x:000077A7
.text$x:000077A7 ; =============== S U B R O U T I N E =======================================
.text$x:000077A7
.text$x:000077A7
.text$x:000077A7 __ehhandler$?setKeywords@Style@@QAEXPB_W@Z proc near
.text$x:000077A7                                         ; DATA XREF: Style::setKeywords(wchar_t const *)+5o
.text$x:000077A7
.text$x:000077A7 arg_4           = dword ptr  8
.text$x:000077A7
.text$x:000077A7                 mov     edx, [esp+arg_4]
.text$x:000077AB                 lea     eax, [edx+0Ch]
.text$x:000077AE                 mov     ecx, [edx-14h]
.text$x:000077B1                 xor     ecx, eax
.text$x:000077B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000077B8                 mov     eax, offset __ehfuncinfo$?setKeywords@Style@@QAEXPB_W@Z
.text$x:000077BD                 jmp     ___CxxFrameHandler3
.text$x:000077BD __ehhandler$?setKeywords@Style@@QAEXPB_W@Z endp
.text$x:000077BD
.text$x:000077BD ; ---------------------------------------------------------------------------
.text$x:000077C2                 align 4
.text$x:000077C2 _text$x         ends
.text$x:000077C2
.text$mn:000077C4 ; ===========================================================================
.text$mn:000077C4
.text$mn:000077C4 ; Segment type: Pure code
.text$mn:000077C4 ; Segment permissions: Read/Execute
.text$mn:000077C4 _text$mn        segment para public 'CODE' use32
.text$mn:000077C4                 assume cs:_text$mn
.text$mn:000077C4                 ;org 77C4h
.text$mn:000077C4 ; COMDAT (pick any)
.text$mn:000077C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077C4
.text$mn:000077C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000077C4
.text$mn:000077C4 ; Attributes: bp-based frame
.text$mn:000077C4
.text$mn:000077C4 ; void __thiscall LexerStyler::setLexerUserExt(LexerStyler *this, const wchar_t *)
.text$mn:000077C4                 public ?setLexerUserExt@LexerStyler@@QAEXPB_W@Z
.text$mn:000077C4 ?setLexerUserExt@LexerStyler@@QAEXPB_W@Z proc near
.text$mn:000077C4                                         ; CODE XREF: WordStyleDlg::updateExtension(void)+6Ap
.text$mn:000077C4
.text$mn:000077C4 var_4           = dword ptr -4
.text$mn:000077C4 Str             = dword ptr  8
.text$mn:000077C4
.text$mn:000077C4                 push    ebp
.text$mn:000077C5                 mov     ebp, esp
.text$mn:000077C7                 push    ecx
.text$mn:000077C8                 mov     [ebp+var_4], ecx
.text$mn:000077CB                 mov     eax, [ebp+Str]
.text$mn:000077CE                 push    eax             ; Str
.text$mn:000077CF                 mov     ecx, [ebp+var_4]
.text$mn:000077D2                 add     ecx, 564h
.text$mn:000077D8                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000077DD                 mov     esp, ebp
.text$mn:000077DF                 pop     ebp
.text$mn:000077E0                 retn    4
.text$mn:000077E0 ?setLexerUserExt@LexerStyler@@QAEXPB_W@Z endp
.text$mn:000077E0
.text$mn:000077E0 ; ---------------------------------------------------------------------------
.text$mn:000077E3                 align 4
.text$mn:000077E3 _text$mn        ends
.text$mn:000077E3
.text$mn:000077E4 ; ===========================================================================
.text$mn:000077E4
.text$mn:000077E4 ; Segment type: Pure code
.text$mn:000077E4 ; Segment permissions: Read/Execute
.text$mn:000077E4 _text$mn        segment para public 'CODE' use32
.text$mn:000077E4                 assume cs:_text$mn
.text$mn:000077E4                 ;org 77E4h
.text$mn:000077E4 ; COMDAT (pick any)
.text$mn:000077E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077E4
.text$mn:000077E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000077E4
.text$mn:000077E4 ; Attributes: bp-based frame
.text$mn:000077E4
.text$mn:000077E4 ; void __thiscall WordStyleDlg::showGlobalOverrideCtrls(WordStyleDlg *this, bool)
.text$mn:000077E4                 public ?showGlobalOverrideCtrls@WordStyleDlg@@AAEX_N@Z
.text$mn:000077E4 ?showGlobalOverrideCtrls@WordStyleDlg@@AAEX_N@Z proc near
.text$mn:000077E4                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+39p
.text$mn:000077E4                                         ; WordStyleDlg::setVisualFromStyleList(void)+7Cp
.text$mn:000077E4
.text$mn:000077E4 var_20          = dword ptr -20h
.text$mn:000077E4 var_1C          = dword ptr -1Ch
.text$mn:000077E4 var_18          = dword ptr -18h
.text$mn:000077E4 var_14          = dword ptr -14h
.text$mn:000077E4 var_10          = dword ptr -10h
.text$mn:000077E4 var_C           = dword ptr -0Ch
.text$mn:000077E4 nCmdShow        = dword ptr -8
.text$mn:000077E4 var_4           = dword ptr -4
.text$mn:000077E4 arg_0           = byte ptr  8
.text$mn:000077E4
.text$mn:000077E4                 push    ebp
.text$mn:000077E5                 mov     ebp, esp
.text$mn:000077E7                 sub     esp, 20h
.text$mn:000077EA                 mov     [ebp+var_4], ecx
.text$mn:000077ED                 movzx   eax, [ebp+arg_0]
.text$mn:000077F1                 test    eax, eax
.text$mn:000077F3                 jz      short loc_77FD
.text$mn:000077F5                 mov     ecx, [ebp+var_4] ; this
.text$mn:000077F8                 call    ?updateGlobalOverrideCtrls@WordStyleDlg@@AAEXXZ ; WordStyleDlg::updateGlobalOverrideCtrls(void)
.text$mn:000077FD
.text$mn:000077FD loc_77FD:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+Fj
.text$mn:000077FD                 movzx   ecx, [ebp+arg_0]
.text$mn:00007801                 test    ecx, ecx
.text$mn:00007803                 jz      short loc_780E
.text$mn:00007805                 mov     [ebp+nCmdShow], 5
.text$mn:0000780C                 jmp     short loc_7815
.text$mn:0000780E ; ---------------------------------------------------------------------------
.text$mn:0000780E
.text$mn:0000780E loc_780E:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+1Fj
.text$mn:0000780E                 mov     [ebp+nCmdShow], 0
.text$mn:00007815
.text$mn:00007815 loc_7815:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+28j
.text$mn:00007815                 mov     edx, [ebp+nCmdShow]
.text$mn:00007818                 push    edx             ; nCmdShow
.text$mn:00007819                 push    8B2h            ; nIDDlgItem
.text$mn:0000781E                 mov     eax, [ebp+var_4]
.text$mn:00007821                 mov     ecx, [eax+0Ch]
.text$mn:00007824                 push    ecx             ; hDlg
.text$mn:00007825                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000782B                 push    eax             ; hWnd
.text$mn:0000782C                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00007832                 movzx   edx, [ebp+arg_0]
.text$mn:00007836                 test    edx, edx
.text$mn:00007838                 jz      short loc_7843
.text$mn:0000783A                 mov     [ebp+var_C], 5
.text$mn:00007841                 jmp     short loc_784A
.text$mn:00007843 ; ---------------------------------------------------------------------------
.text$mn:00007843
.text$mn:00007843 loc_7843:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+54j
.text$mn:00007843                 mov     [ebp+var_C], 0
.text$mn:0000784A
.text$mn:0000784A loc_784A:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+5Dj
.text$mn:0000784A                 mov     eax, [ebp+var_C]
.text$mn:0000784D                 push    eax             ; nCmdShow
.text$mn:0000784E                 push    8B3h            ; nIDDlgItem
.text$mn:00007853                 mov     ecx, [ebp+var_4]
.text$mn:00007856                 mov     edx, [ecx+0Ch]
.text$mn:00007859                 push    edx             ; hDlg
.text$mn:0000785A                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00007860                 push    eax             ; hWnd
.text$mn:00007861                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00007867                 movzx   eax, [ebp+arg_0]
.text$mn:0000786B                 test    eax, eax
.text$mn:0000786D                 jz      short loc_7878
.text$mn:0000786F                 mov     [ebp+var_10], 5
.text$mn:00007876                 jmp     short loc_787F
.text$mn:00007878 ; ---------------------------------------------------------------------------
.text$mn:00007878
.text$mn:00007878 loc_7878:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+89j
.text$mn:00007878                 mov     [ebp+var_10], 0
.text$mn:0000787F
.text$mn:0000787F loc_787F:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+92j
.text$mn:0000787F                 mov     ecx, [ebp+var_10]
.text$mn:00007882                 push    ecx             ; nCmdShow
.text$mn:00007883                 push    8B4h            ; nIDDlgItem
.text$mn:00007888                 mov     edx, [ebp+var_4]
.text$mn:0000788B                 mov     eax, [edx+0Ch]
.text$mn:0000788E                 push    eax             ; hDlg
.text$mn:0000788F                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00007895                 push    eax             ; hWnd
.text$mn:00007896                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000789C                 movzx   ecx, [ebp+arg_0]
.text$mn:000078A0                 test    ecx, ecx
.text$mn:000078A2                 jz      short loc_78AD
.text$mn:000078A4                 mov     [ebp+var_14], 5
.text$mn:000078AB                 jmp     short loc_78B4
.text$mn:000078AD ; ---------------------------------------------------------------------------
.text$mn:000078AD
.text$mn:000078AD loc_78AD:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+BEj
.text$mn:000078AD                 mov     [ebp+var_14], 0
.text$mn:000078B4
.text$mn:000078B4 loc_78B4:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+C7j
.text$mn:000078B4                 mov     edx, [ebp+var_14]
.text$mn:000078B7                 push    edx             ; nCmdShow
.text$mn:000078B8                 push    8B5h            ; nIDDlgItem
.text$mn:000078BD                 mov     eax, [ebp+var_4]
.text$mn:000078C0                 mov     ecx, [eax+0Ch]
.text$mn:000078C3                 push    ecx             ; hDlg
.text$mn:000078C4                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000078CA                 push    eax             ; hWnd
.text$mn:000078CB                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000078D1                 movzx   edx, [ebp+arg_0]
.text$mn:000078D5                 test    edx, edx
.text$mn:000078D7                 jz      short loc_78E2
.text$mn:000078D9                 mov     [ebp+var_18], 5
.text$mn:000078E0                 jmp     short loc_78E9
.text$mn:000078E2 ; ---------------------------------------------------------------------------
.text$mn:000078E2
.text$mn:000078E2 loc_78E2:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+F3j
.text$mn:000078E2                 mov     [ebp+var_18], 0
.text$mn:000078E9
.text$mn:000078E9 loc_78E9:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+FCj
.text$mn:000078E9                 mov     eax, [ebp+var_18]
.text$mn:000078EC                 push    eax             ; nCmdShow
.text$mn:000078ED                 push    8B6h            ; nIDDlgItem
.text$mn:000078F2                 mov     ecx, [ebp+var_4]
.text$mn:000078F5                 mov     edx, [ecx+0Ch]
.text$mn:000078F8                 push    edx             ; hDlg
.text$mn:000078F9                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000078FF                 push    eax             ; hWnd
.text$mn:00007900                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00007906                 movzx   eax, [ebp+arg_0]
.text$mn:0000790A                 test    eax, eax
.text$mn:0000790C                 jz      short loc_7917
.text$mn:0000790E                 mov     [ebp+var_1C], 5
.text$mn:00007915                 jmp     short loc_791E
.text$mn:00007917 ; ---------------------------------------------------------------------------
.text$mn:00007917
.text$mn:00007917 loc_7917:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+128j
.text$mn:00007917                 mov     [ebp+var_1C], 0
.text$mn:0000791E
.text$mn:0000791E loc_791E:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+131j
.text$mn:0000791E                 mov     ecx, [ebp+var_1C]
.text$mn:00007921                 push    ecx             ; nCmdShow
.text$mn:00007922                 push    8B7h            ; nIDDlgItem
.text$mn:00007927                 mov     edx, [ebp+var_4]
.text$mn:0000792A                 mov     eax, [edx+0Ch]
.text$mn:0000792D                 push    eax             ; hDlg
.text$mn:0000792E                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00007934                 push    eax             ; hWnd
.text$mn:00007935                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000793B                 movzx   ecx, [ebp+arg_0]
.text$mn:0000793F                 test    ecx, ecx
.text$mn:00007941                 jz      short loc_794C
.text$mn:00007943                 mov     [ebp+var_20], 5
.text$mn:0000794A                 jmp     short loc_7953
.text$mn:0000794C ; ---------------------------------------------------------------------------
.text$mn:0000794C
.text$mn:0000794C loc_794C:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+15Dj
.text$mn:0000794C                 mov     [ebp+var_20], 0
.text$mn:00007953
.text$mn:00007953 loc_7953:                               ; CODE XREF: WordStyleDlg::showGlobalOverrideCtrls(bool)+166j
.text$mn:00007953                 mov     edx, [ebp+var_20]
.text$mn:00007956                 push    edx             ; nCmdShow
.text$mn:00007957                 push    8B8h            ; nIDDlgItem
.text$mn:0000795C                 mov     eax, [ebp+var_4]
.text$mn:0000795F                 mov     ecx, [eax+0Ch]
.text$mn:00007962                 push    ecx             ; hDlg
.text$mn:00007963                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00007969                 push    eax             ; hWnd
.text$mn:0000796A                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00007970                 mov     edx, [ebp+var_4]
.text$mn:00007973                 mov     al, [ebp+arg_0]
.text$mn:00007976                 mov     [edx+37AEAh], al
.text$mn:0000797C                 mov     esp, ebp
.text$mn:0000797E                 pop     ebp
.text$mn:0000797F                 retn    4
.text$mn:0000797F ?showGlobalOverrideCtrls@WordStyleDlg@@AAEX_N@Z endp
.text$mn:0000797F
.text$mn:0000797F ; ---------------------------------------------------------------------------
.text$mn:00007982                 align 4
.text$mn:00007982 _text$mn        ends
.text$mn:00007982
.text$mn:00007984 ; ===========================================================================
.text$mn:00007984
.text$mn:00007984 ; Segment type: Pure code
.text$mn:00007984 ; Segment permissions: Read/Execute
.text$mn:00007984 _text$mn        segment para public 'CODE' use32
.text$mn:00007984                 assume cs:_text$mn
.text$mn:00007984                 ;org 7984h
.text$mn:00007984 ; COMDAT (pick any)
.text$mn:00007984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007984
.text$mn:00007984 ; =============== S U B R O U T I N E =======================================
.text$mn:00007984
.text$mn:00007984 ; Attributes: bp-based frame
.text$mn:00007984
.text$mn:00007984 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:00007984                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00007984 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00007984                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:00007984                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:00007984
.text$mn:00007984 var_4           = dword ptr -4
.text$mn:00007984
.text$mn:00007984                 push    ebp
.text$mn:00007985                 mov     ebp, esp
.text$mn:00007987                 push    ecx
.text$mn:00007988                 mov     [ebp+var_4], ecx
.text$mn:0000798B                 mov     eax, [ebp+var_4]
.text$mn:0000798E                 mov     eax, [eax+14h]
.text$mn:00007991                 mov     esp, ebp
.text$mn:00007993                 pop     ebp
.text$mn:00007994                 retn
.text$mn:00007994 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00007994
.text$mn:00007994 ; ---------------------------------------------------------------------------
.text$mn:00007995                 align 4
.text$mn:00007995 _text$mn        ends
.text$mn:00007995
.text$mn:00007998 ; ===========================================================================
.text$mn:00007998
.text$mn:00007998 ; Segment type: Pure code
.text$mn:00007998 ; Segment permissions: Read/Execute
.text$mn:00007998 _text$mn        segment para public 'CODE' use32
.text$mn:00007998                 assume cs:_text$mn
.text$mn:00007998                 ;org 7998h
.text$mn:00007998 ; COMDAT (pick any)
.text$mn:00007998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007998
.text$mn:00007998 ; =============== S U B R O U T I N E =======================================
.text$mn:00007998
.text$mn:00007998 ; Attributes: bp-based frame
.text$mn:00007998
.text$mn:00007998 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:00007998                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00007998 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00007998                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:00007998                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:00007998
.text$mn:00007998 var_4           = dword ptr -4
.text$mn:00007998
.text$mn:00007998                 push    ebp
.text$mn:00007999                 mov     ebp, esp
.text$mn:0000799B                 push    ecx
.text$mn:0000799C                 mov     [ebp+var_4], ecx
.text$mn:0000799F                 mov     eax, [ebp+var_4]
.text$mn:000079A2                 mov     eax, [eax+14h]
.text$mn:000079A5                 mov     esp, ebp
.text$mn:000079A7                 pop     ebp
.text$mn:000079A8                 retn
.text$mn:000079A8 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000079A8
.text$mn:000079A8 ; ---------------------------------------------------------------------------
.text$mn:000079A9                 align 4
.text$mn:000079A9 _text$mn        ends
.text$mn:000079A9
.text$mn:000079AC ; ===========================================================================
.text$mn:000079AC
.text$mn:000079AC ; Segment type: Pure code
.text$mn:000079AC ; Segment permissions: Read/Execute
.text$mn:000079AC _text$mn        segment para public 'CODE' use32
.text$mn:000079AC                 assume cs:_text$mn
.text$mn:000079AC                 ;org 79ACh
.text$mn:000079AC ; COMDAT (pick any)
.text$mn:000079AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079AC
.text$mn:000079AC ; =============== S U B R O U T I N E =======================================
.text$mn:000079AC
.text$mn:000079AC ; Attributes: bp-based frame
.text$mn:000079AC
.text$mn:000079AC ; public: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::size(void)const
.text$mn:000079AC                 public ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ
.text$mn:000079AC ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000079AC                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+Ap
.text$mn:000079AC                                         ; ThemeSwitcher::size(void)+Ap
.text$mn:000079AC
.text$mn:000079AC var_4           = dword ptr -4
.text$mn:000079AC
.text$mn:000079AC                 push    ebp
.text$mn:000079AD                 mov     ebp, esp
.text$mn:000079AF                 push    ecx
.text$mn:000079B0                 mov     [ebp+var_4], ecx
.text$mn:000079B3                 mov     eax, [ebp+var_4]
.text$mn:000079B6                 mov     ecx, [ebp+var_4]
.text$mn:000079B9                 mov     eax, [eax+8]
.text$mn:000079BC                 sub     eax, [ecx+4]
.text$mn:000079BF                 cdq
.text$mn:000079C0                 mov     ecx, 38h ; '8'
.text$mn:000079C5                 idiv    ecx
.text$mn:000079C7                 mov     esp, ebp
.text$mn:000079C9                 pop     ebp
.text$mn:000079CA                 retn
.text$mn:000079CA ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ endp
.text$mn:000079CA
.text$mn:000079CA ; ---------------------------------------------------------------------------
.text$mn:000079CB                 align 4
.text$mn:000079CB _text$mn        ends
.text$mn:000079CB
.text$mn:000079CC ; ===========================================================================
.text$mn:000079CC
.text$mn:000079CC ; Segment type: Pure code
.text$mn:000079CC ; Segment permissions: Read/Execute
.text$mn:000079CC _text$mn        segment para public 'CODE' use32
.text$mn:000079CC                 assume cs:_text$mn
.text$mn:000079CC                 ;org 79CCh
.text$mn:000079CC ; COMDAT (pick any)
.text$mn:000079CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079CC
.text$mn:000079CC ; =============== S U B R O U T I N E =======================================
.text$mn:000079CC
.text$mn:000079CC ; Attributes: bp-based frame
.text$mn:000079CC
.text$mn:000079CC ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:000079CC                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:000079CC ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000079CC                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+307p
.text$mn:000079CC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+Ap
.text$mn:000079CC
.text$mn:000079CC var_4           = dword ptr -4
.text$mn:000079CC
.text$mn:000079CC                 push    ebp
.text$mn:000079CD                 mov     ebp, esp
.text$mn:000079CF                 push    ecx
.text$mn:000079D0                 mov     [ebp+var_4], ecx
.text$mn:000079D3                 mov     eax, [ebp+var_4]
.text$mn:000079D6                 mov     ecx, [ebp+var_4]
.text$mn:000079D9                 mov     eax, [eax+8]
.text$mn:000079DC                 sub     eax, [ecx+4]
.text$mn:000079DF                 cdq
.text$mn:000079E0                 mov     ecx, 1Ch
.text$mn:000079E5                 idiv    ecx
.text$mn:000079E7                 mov     esp, ebp
.text$mn:000079E9                 pop     ebp
.text$mn:000079EA                 retn
.text$mn:000079EA ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:000079EA
.text$mn:000079EA ; ---------------------------------------------------------------------------
.text$mn:000079EB                 align 4
.text$mn:000079EB _text$mn        ends
.text$mn:000079EB
.text$mn:000079EC ; ===========================================================================
.text$mn:000079EC
.text$mn:000079EC ; Segment type: Pure code
.text$mn:000079EC ; Segment permissions: Read/Execute
.text$mn:000079EC _text$mn        segment para public 'CODE' use32
.text$mn:000079EC                 assume cs:_text$mn
.text$mn:000079EC                 ;org 79ECh
.text$mn:000079EC ; COMDAT (pick any)
.text$mn:000079EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079EC
.text$mn:000079EC ; =============== S U B R O U T I N E =======================================
.text$mn:000079EC
.text$mn:000079EC ; Attributes: bp-based frame
.text$mn:000079EC
.text$mn:000079EC ; unsigned int __thiscall ThemeSwitcher::size(ThemeSwitcher *__hidden this)
.text$mn:000079EC                 public ?size@ThemeSwitcher@@QBEIXZ
.text$mn:000079EC ?size@ThemeSwitcher@@QBEIXZ proc near   ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1E3p
.text$mn:000079EC
.text$mn:000079EC var_4           = dword ptr -4
.text$mn:000079EC
.text$mn:000079EC                 push    ebp
.text$mn:000079ED                 mov     ebp, esp
.text$mn:000079EF                 push    ecx
.text$mn:000079F0                 mov     [ebp+var_4], ecx
.text$mn:000079F3                 mov     ecx, [ebp+var_4]
.text$mn:000079F6                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:000079FB                 mov     esp, ebp
.text$mn:000079FD                 pop     ebp
.text$mn:000079FE                 retn
.text$mn:000079FE ?size@ThemeSwitcher@@QBEIXZ endp
.text$mn:000079FE
.text$mn:000079FE ; ---------------------------------------------------------------------------
.text$mn:000079FF                 align 10h
.text$mn:000079FF _text$mn        ends
.text$mn:000079FF
.text$mn:00007A00 ; ===========================================================================
.text$mn:00007A00
.text$mn:00007A00 ; Segment type: Pure code
.text$mn:00007A00 ; Segment permissions: Read/Execute
.text$mn:00007A00 _text$mn        segment para public 'CODE' use32
.text$mn:00007A00                 assume cs:_text$mn
.text$mn:00007A00                 ;org 7A00h
.text$mn:00007A00 ; COMDAT (pick any)
.text$mn:00007A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A00
.text$mn:00007A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A00
.text$mn:00007A00 ; Attributes: bp-based frame
.text$mn:00007A00
.text$mn:00007A00 ; __int32 __stdcall ColourStaticTextHooker::staticProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.text$mn:00007A00                 public ?staticProc@ColourStaticTextHooker@@CGJPAUHWND__@@IIJ@Z
.text$mn:00007A00 ?staticProc@ColourStaticTextHooker@@CGJPAUHWND__@@IIJ@Z proc near
.text$mn:00007A00                                         ; DATA XREF: ColourStaticTextHooker::hookOn(HWND__ *)+17o
.text$mn:00007A00
.text$mn:00007A00 var_4           = dword ptr -4
.text$mn:00007A00 hWnd            = dword ptr  8
.text$mn:00007A00 Msg             = dword ptr  0Ch
.text$mn:00007A00 wParam          = dword ptr  10h
.text$mn:00007A00 lParam          = dword ptr  14h
.text$mn:00007A00
.text$mn:00007A00                 push    ebp
.text$mn:00007A01                 mov     ebp, esp
.text$mn:00007A03                 push    ecx
.text$mn:00007A04                 push    0FFFFFFEBh      ; nIndex
.text$mn:00007A06                 mov     eax, [ebp+hWnd]
.text$mn:00007A09                 push    eax             ; hWnd
.text$mn:00007A0A                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00007A10                 mov     [ebp+var_4], eax
.text$mn:00007A13                 mov     ecx, [ebp+lParam]
.text$mn:00007A16                 push    ecx             ; lParam
.text$mn:00007A17                 mov     edx, [ebp+wParam]
.text$mn:00007A1A                 push    edx             ; wParam
.text$mn:00007A1B                 mov     eax, [ebp+Msg]
.text$mn:00007A1E                 push    eax             ; Msg
.text$mn:00007A1F                 mov     ecx, [ebp+hWnd]
.text$mn:00007A22                 push    ecx             ; hWnd
.text$mn:00007A23                 mov     edx, [ebp+var_4]
.text$mn:00007A26                 push    edx             ; this
.text$mn:00007A27                 call    ?colourStaticProc@ColourStaticTextHooker@@AAGJPAUHWND__@@IIJ@Z ; ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)
.text$mn:00007A2C                 mov     esp, ebp
.text$mn:00007A2E                 pop     ebp
.text$mn:00007A2F                 retn    10h
.text$mn:00007A2F ?staticProc@ColourStaticTextHooker@@CGJPAUHWND__@@IIJ@Z endp
.text$mn:00007A2F
.text$mn:00007A2F ; ---------------------------------------------------------------------------
.text$mn:00007A32                 align 4
.text$mn:00007A32 _text$mn        ends
.text$mn:00007A32
.text$mn:00007A34 ; ===========================================================================
.text$mn:00007A34
.text$mn:00007A34 ; Segment type: Pure code
.text$mn:00007A34 ; Segment permissions: Read/Execute
.text$mn:00007A34 _text$mn        segment para public 'CODE' use32
.text$mn:00007A34                 assume cs:_text$mn
.text$mn:00007A34                 ;org 7A34h
.text$mn:00007A34 ; COMDAT (pick any)
.text$mn:00007A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A34
.text$mn:00007A34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A34
.text$mn:00007A34 ; Attributes: bp-based frame
.text$mn:00007A34
.text$mn:00007A34 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:00007A34                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:00007A34 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00007A34                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_67CCp
.text$mn:00007A34                 push    ebp
.text$mn:00007A35                 mov     ebp, esp
.text$mn:00007A37                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00007A3C                 pop     ebp
.text$mn:00007A3D                 retn
.text$mn:00007A3D ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00007A3D
.text$mn:00007A3D ; ---------------------------------------------------------------------------
.text$mn:00007A3E                 align 10h
.text$mn:00007A3E _text$mn        ends
.text$mn:00007A3E
.text$mn:00007A40 ; ===========================================================================
.text$mn:00007A40
.text$mn:00007A40 ; Segment type: Pure code
.text$mn:00007A40 ; Segment permissions: Read/Execute
.text$mn:00007A40 _text$mn        segment para public 'CODE' use32
.text$mn:00007A40                 assume cs:_text$mn
.text$mn:00007A40                 ;org 7A40h
.text$mn:00007A40 ; COMDAT (pick any)
.text$mn:00007A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A40
.text$mn:00007A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A40
.text$mn:00007A40 ; Attributes: bp-based frame
.text$mn:00007A40
.text$mn:00007A40 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00007A40                 public ?value@error_code@std@@QBEHXZ
.text$mn:00007A40 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00007A40
.text$mn:00007A40 var_4           = dword ptr -4
.text$mn:00007A40
.text$mn:00007A40                 push    ebp
.text$mn:00007A41                 mov     ebp, esp
.text$mn:00007A43                 push    ecx
.text$mn:00007A44                 mov     [ebp+var_4], ecx
.text$mn:00007A47                 mov     eax, [ebp+var_4]
.text$mn:00007A4A                 mov     eax, [eax]
.text$mn:00007A4C                 mov     esp, ebp
.text$mn:00007A4E                 pop     ebp
.text$mn:00007A4F                 retn
.text$mn:00007A4F ?value@error_code@std@@QBEHXZ endp
.text$mn:00007A4F
.text$mn:00007A4F _text$mn        ends
.text$mn:00007A4F
.text$mn:00007A50 ; ===========================================================================
.text$mn:00007A50
.text$mn:00007A50 ; Segment type: Pure code
.text$mn:00007A50 ; Segment permissions: Read/Execute
.text$mn:00007A50 _text$mn        segment para public 'CODE' use32
.text$mn:00007A50                 assume cs:_text$mn
.text$mn:00007A50                 ;org 7A50h
.text$mn:00007A50 ; COMDAT (pick any)
.text$mn:00007A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A50
.text$mn:00007A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A50
.text$mn:00007A50 ; Attributes: bp-based frame
.text$mn:00007A50
.text$mn:00007A50 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00007A50                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00007A50 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00007A50                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00007A50                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00007A50
.text$mn:00007A50 var_4           = dword ptr -4
.text$mn:00007A50
.text$mn:00007A50                 push    ebp
.text$mn:00007A51                 mov     ebp, esp
.text$mn:00007A53                 push    ecx
.text$mn:00007A54                 mov     [ebp+var_4], ecx
.text$mn:00007A57                 mov     eax, [ebp+var_4]
.text$mn:00007A5A                 mov     eax, [eax]
.text$mn:00007A5C                 mov     esp, ebp
.text$mn:00007A5E                 pop     ebp
.text$mn:00007A5F                 retn
.text$mn:00007A5F ?value@error_condition@std@@QBEHXZ endp
.text$mn:00007A5F
.text$mn:00007A5F _text$mn        ends
.text$mn:00007A5F
.text$mn:00007A60 ; ===========================================================================
.text$mn:00007A60
.text$mn:00007A60 ; Segment type: Pure code
.text$mn:00007A60 ; Segment permissions: Read/Execute
.text$mn:00007A60 _text$mn        segment para public 'CODE' use32
.text$mn:00007A60                 assume cs:_text$mn
.text$mn:00007A60                 ;org 7A60h
.text$mn:00007A60 ; COMDAT (pick any)
.text$mn:00007A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A60
.text$mn:00007A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A60
.text$mn:00007A60 ; Attributes: bp-based frame
.text$mn:00007A60
.text$mn:00007A60                 public _hypot
.text$mn:00007A60 _hypot          proc near
.text$mn:00007A60
.text$mn:00007A60 var_10          = qword ptr -10h
.text$mn:00007A60 var_8           = qword ptr -8
.text$mn:00007A60 arg_0           = qword ptr  8
.text$mn:00007A60 arg_8           = qword ptr  10h
.text$mn:00007A60
.text$mn:00007A60                 push    ebp
.text$mn:00007A61                 mov     ebp, esp
.text$mn:00007A63                 sub     esp, 8
.text$mn:00007A66                 movsd   xmm0, [ebp+arg_8]
.text$mn:00007A6B                 movsd   [esp+8+var_8], xmm0
.text$mn:00007A70                 sub     esp, 8
.text$mn:00007A73                 movsd   xmm0, [ebp+arg_0]
.text$mn:00007A78                 movsd   [esp+10h+var_10], xmm0
.text$mn:00007A7D                 call    __hypot
.text$mn:00007A82                 add     esp, 10h
.text$mn:00007A85                 pop     ebp
.text$mn:00007A86                 retn
.text$mn:00007A86 _hypot          endp
.text$mn:00007A86
.text$mn:00007A86 ; ---------------------------------------------------------------------------
.text$mn:00007A87                 align 4
.text$mn:00007A87 _text$mn        ends
.text$mn:00007A87
.text$mn:00007A88 ; ===========================================================================
.text$mn:00007A88
.text$mn:00007A88 ; Segment type: Pure code
.text$mn:00007A88 ; Segment permissions: Read/Execute
.text$mn:00007A88 _text$mn        segment para public 'CODE' use32
.text$mn:00007A88                 assume cs:_text$mn
.text$mn:00007A88                 ;org 7A88h
.text$mn:00007A88 ; COMDAT (pick any)
.text$mn:00007A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A88
.text$mn:00007A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A88
.text$mn:00007A88 ; Attributes: bp-based frame
.text$mn:00007A88
.text$mn:00007A88                 public _wmemcmp
.text$mn:00007A88 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:00007A88
.text$mn:00007A88 var_4           = dword ptr -4
.text$mn:00007A88 arg_0           = dword ptr  8
.text$mn:00007A88 arg_4           = dword ptr  0Ch
.text$mn:00007A88 arg_8           = dword ptr  10h
.text$mn:00007A88
.text$mn:00007A88                 push    ebp
.text$mn:00007A89                 mov     ebp, esp
.text$mn:00007A8B                 push    ecx
.text$mn:00007A8C                 jmp     short loc_7AA9
.text$mn:00007A8E ; ---------------------------------------------------------------------------
.text$mn:00007A8E
.text$mn:00007A8E loc_7A8E:                               ; CODE XREF: _wmemcmp:loc_7AE4j
.text$mn:00007A8E                 mov     eax, [ebp+arg_0]
.text$mn:00007A91                 add     eax, 2
.text$mn:00007A94                 mov     [ebp+arg_0], eax
.text$mn:00007A97                 mov     ecx, [ebp+arg_4]
.text$mn:00007A9A                 add     ecx, 2
.text$mn:00007A9D                 mov     [ebp+arg_4], ecx
.text$mn:00007AA0                 mov     edx, [ebp+arg_8]
.text$mn:00007AA3                 sub     edx, 1
.text$mn:00007AA6                 mov     [ebp+arg_8], edx
.text$mn:00007AA9
.text$mn:00007AA9 loc_7AA9:                               ; CODE XREF: _wmemcmp+4j
.text$mn:00007AA9                 cmp     [ebp+arg_8], 0
.text$mn:00007AAD                 jbe     short loc_7AE6
.text$mn:00007AAF                 mov     eax, [ebp+arg_0]
.text$mn:00007AB2                 movzx   ecx, word ptr [eax]
.text$mn:00007AB5                 mov     edx, [ebp+arg_4]
.text$mn:00007AB8                 movzx   eax, word ptr [edx]
.text$mn:00007ABB                 cmp     ecx, eax
.text$mn:00007ABD                 jz      short loc_7AE4
.text$mn:00007ABF                 mov     ecx, [ebp+arg_0]
.text$mn:00007AC2                 movzx   edx, word ptr [ecx]
.text$mn:00007AC5                 mov     eax, [ebp+arg_4]
.text$mn:00007AC8                 movzx   ecx, word ptr [eax]
.text$mn:00007ACB                 cmp     edx, ecx
.text$mn:00007ACD                 jge     short loc_7AD8
.text$mn:00007ACF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007AD6                 jmp     short loc_7ADF
.text$mn:00007AD8 ; ---------------------------------------------------------------------------
.text$mn:00007AD8
.text$mn:00007AD8 loc_7AD8:                               ; CODE XREF: _wmemcmp+45j
.text$mn:00007AD8                 mov     [ebp+var_4], 1
.text$mn:00007ADF
.text$mn:00007ADF loc_7ADF:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:00007ADF                 mov     eax, [ebp+var_4]
.text$mn:00007AE2                 jmp     short loc_7AE8
.text$mn:00007AE4 ; ---------------------------------------------------------------------------
.text$mn:00007AE4
.text$mn:00007AE4 loc_7AE4:                               ; CODE XREF: _wmemcmp+35j
.text$mn:00007AE4                 jmp     short loc_7A8E
.text$mn:00007AE6 ; ---------------------------------------------------------------------------
.text$mn:00007AE6
.text$mn:00007AE6 loc_7AE6:                               ; CODE XREF: _wmemcmp+25j
.text$mn:00007AE6                 xor     eax, eax
.text$mn:00007AE8
.text$mn:00007AE8 loc_7AE8:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:00007AE8                 mov     esp, ebp
.text$mn:00007AEA                 pop     ebp
.text$mn:00007AEB                 retn
.text$mn:00007AEB _wmemcmp        endp
.text$mn:00007AEB
.text$mn:00007AEB _text$mn        ends
.text$mn:00007AEB
.text$mn:00007AEC ; ===========================================================================
.text$mn:00007AEC
.text$mn:00007AEC ; Segment type: Pure code
.text$mn:00007AEC ; Segment permissions: Read/Execute
.text$mn:00007AEC _text$mn        segment para public 'CODE' use32
.text$mn:00007AEC                 assume cs:_text$mn
.text$mn:00007AEC                 ;org 7AECh
.text$mn:00007AEC ; COMDAT (pick any)
.text$mn:00007AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AEC
.text$mn:00007AEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007AEC
.text$mn:00007AEC ; Attributes: bp-based frame
.text$mn:00007AEC
.text$mn:00007AEC ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:00007AEC                 public _wmemcpy
.text$mn:00007AEC _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00007AEC
.text$mn:00007AEC Dst             = dword ptr  8
.text$mn:00007AEC Src             = dword ptr  0Ch
.text$mn:00007AEC arg_8           = dword ptr  10h
.text$mn:00007AEC
.text$mn:00007AEC                 push    ebp
.text$mn:00007AED                 mov     ebp, esp
.text$mn:00007AEF                 mov     eax, [ebp+arg_8]
.text$mn:00007AF2                 shl     eax, 1
.text$mn:00007AF4                 push    eax             ; Size
.text$mn:00007AF5                 mov     ecx, [ebp+Src]
.text$mn:00007AF8                 push    ecx             ; Src
.text$mn:00007AF9                 mov     edx, [ebp+Dst]
.text$mn:00007AFC                 push    edx             ; Dst
.text$mn:00007AFD                 call    _memcpy
.text$mn:00007B02                 add     esp, 0Ch
.text$mn:00007B05                 pop     ebp
.text$mn:00007B06                 retn
.text$mn:00007B06 _wmemcpy        endp
.text$mn:00007B06
.text$mn:00007B06 ; ---------------------------------------------------------------------------
.text$mn:00007B07                 align 4
.text$mn:00007B07 _text$mn        ends
.text$mn:00007B07
.text$mn:00007B08 ; ===========================================================================
.text$mn:00007B08
.text$mn:00007B08 ; Segment type: Pure code
.text$mn:00007B08 ; Segment permissions: Read/Execute
.text$mn:00007B08 _text$mn        segment para public 'CODE' use32
.text$mn:00007B08                 assume cs:_text$mn
.text$mn:00007B08                 ;org 7B08h
.text$mn:00007B08 ; COMDAT (pick any)
.text$mn:00007B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B08
.text$mn:00007B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B08
.text$mn:00007B08 ; Attributes: bp-based frame
.text$mn:00007B08
.text$mn:00007B08 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:00007B08                 public _wmemmove
.text$mn:00007B08 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00007B08
.text$mn:00007B08 Dst             = dword ptr  8
.text$mn:00007B08 Src             = dword ptr  0Ch
.text$mn:00007B08 arg_8           = dword ptr  10h
.text$mn:00007B08
.text$mn:00007B08                 push    ebp
.text$mn:00007B09                 mov     ebp, esp
.text$mn:00007B0B                 mov     eax, [ebp+arg_8]
.text$mn:00007B0E                 shl     eax, 1
.text$mn:00007B10                 push    eax             ; Size
.text$mn:00007B11                 mov     ecx, [ebp+Src]
.text$mn:00007B14                 push    ecx             ; Src
.text$mn:00007B15                 mov     edx, [ebp+Dst]
.text$mn:00007B18                 push    edx             ; Dst
.text$mn:00007B19                 call    _memmove
.text$mn:00007B1E                 add     esp, 0Ch
.text$mn:00007B21                 pop     ebp
.text$mn:00007B22                 retn
.text$mn:00007B22 _wmemmove       endp
.text$mn:00007B22
.text$mn:00007B22 ; ---------------------------------------------------------------------------
.text$mn:00007B23                 align 4
.text$mn:00007B23 _text$mn        ends
.text$mn:00007B23
.xdata$x:00007B24 ; ===========================================================================
.xdata$x:00007B24
.xdata$x:00007B24 ; Segment type: Pure data
.xdata$x:00007B24 ; Segment permissions: Read
.xdata$x:00007B24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B24                 assume cs:_xdata$x
.xdata$x:00007B24                 ;org 7B24h
.xdata$x:00007B24 ; COMDAT (pick associative to section at 44D8)
.xdata$x:00007B24 __unwindtable$??0ColourPicker@@QAE@XZ db 0FFh
.xdata$x:00007B24                                         ; DATA XREF: .xdata$x:00007B34o
.xdata$x:00007B25                 db 0FFh
.xdata$x:00007B26                 db 0FFh
.xdata$x:00007B27                 db 0FFh
.xdata$x:00007B28                 dd offset __unwindfunclet$??0ColourPicker@@QAE@XZ$0
.xdata$x:00007B2C __ehfuncinfo$??0ColourPicker@@QAE@XZ db  22h ; "
.xdata$x:00007B2C                                         ; DATA XREF: __ehhandler$??0ColourPicker@@QAE@XZ+11o
.xdata$x:00007B2D                 db    5
.xdata$x:00007B2E                 db  93h ; ô
.xdata$x:00007B2F                 db  19h
.xdata$x:00007B30                 db    1
.xdata$x:00007B31                 db    0
.xdata$x:00007B32                 db    0
.xdata$x:00007B33                 db    0
.xdata$x:00007B34                 dd offset __unwindtable$??0ColourPicker@@QAE@XZ
.xdata$x:00007B38                 db    0
.xdata$x:00007B39                 db    0
.xdata$x:00007B3A                 db    0
.xdata$x:00007B3B                 db    0
.xdata$x:00007B3C                 db    0
.xdata$x:00007B3D                 db    0
.xdata$x:00007B3E                 db    0
.xdata$x:00007B3F                 db    0
.xdata$x:00007B40                 db    0
.xdata$x:00007B41                 db    0
.xdata$x:00007B42                 db    0
.xdata$x:00007B43                 db    0
.xdata$x:00007B44                 db    0
.xdata$x:00007B45                 db    0
.xdata$x:00007B46                 db    0
.xdata$x:00007B47                 db    0
.xdata$x:00007B48                 db    0
.xdata$x:00007B49                 db    0
.xdata$x:00007B4A                 db    0
.xdata$x:00007B4B                 db    0
.xdata$x:00007B4C                 db    0
.xdata$x:00007B4D                 db    0
.xdata$x:00007B4E                 db    0
.xdata$x:00007B4F                 db    0
.xdata$x:00007B4F _xdata$x        ends
.xdata$x:00007B4F
.xdata$x:00007B50 ; ===========================================================================
.xdata$x:00007B50
.xdata$x:00007B50 ; Segment type: Pure data
.xdata$x:00007B50 ; Segment permissions: Read
.xdata$x:00007B50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B50                 assume cs:_xdata$x
.xdata$x:00007B50                 ;org 7B50h
.xdata$x:00007B50 ; COMDAT (pick associative to section at 4A84)
.xdata$x:00007B50 __unwindtable$??1ColourPicker@@UAE@XZ db 0FFh
.xdata$x:00007B50                                         ; DATA XREF: .xdata$x:00007B60o
.xdata$x:00007B51                 db 0FFh
.xdata$x:00007B52                 db 0FFh
.xdata$x:00007B53                 db 0FFh
.xdata$x:00007B54                 dd offset __unwindfunclet$??1ColourPicker@@UAE@XZ$0
.xdata$x:00007B58 __ehfuncinfo$??1ColourPicker@@UAE@XZ db  22h ; "
.xdata$x:00007B58                                         ; DATA XREF: __ehhandler$??1ColourPicker@@UAE@XZ+11o
.xdata$x:00007B59                 db    5
.xdata$x:00007B5A                 db  93h ; ô
.xdata$x:00007B5B                 db  19h
.xdata$x:00007B5C                 db    1
.xdata$x:00007B5D                 db    0
.xdata$x:00007B5E                 db    0
.xdata$x:00007B5F                 db    0
.xdata$x:00007B60                 dd offset __unwindtable$??1ColourPicker@@UAE@XZ
.xdata$x:00007B64                 db    0
.xdata$x:00007B65                 db    0
.xdata$x:00007B66                 db    0
.xdata$x:00007B67                 db    0
.xdata$x:00007B68                 db    0
.xdata$x:00007B69                 db    0
.xdata$x:00007B6A                 db    0
.xdata$x:00007B6B                 db    0
.xdata$x:00007B6C                 db    0
.xdata$x:00007B6D                 db    0
.xdata$x:00007B6E                 db    0
.xdata$x:00007B6F                 db    0
.xdata$x:00007B70                 db    0
.xdata$x:00007B71                 db    0
.xdata$x:00007B72                 db    0
.xdata$x:00007B73                 db    0
.xdata$x:00007B74                 db    0
.xdata$x:00007B75                 db    0
.xdata$x:00007B76                 db    0
.xdata$x:00007B77                 db    0
.xdata$x:00007B78                 db    0
.xdata$x:00007B79                 db    0
.xdata$x:00007B7A                 db    0
.xdata$x:00007B7B                 db    0
.xdata$x:00007B7B _xdata$x        ends
.xdata$x:00007B7B
.xdata$x:00007B7C ; ===========================================================================
.xdata$x:00007B7C
.xdata$x:00007B7C ; Segment type: Pure data
.xdata$x:00007B7C ; Segment permissions: Read
.xdata$x:00007B7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B7C                 assume cs:_xdata$x
.xdata$x:00007B7C                 ;org 7B7Ch
.xdata$x:00007B7C ; COMDAT (pick associative to section at 5CBC)
.xdata$x:00007B7C __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:00007B7C                                         ; DATA XREF: .xdata$x:00007B8Co
.xdata$x:00007B7D                 db 0FFh
.xdata$x:00007B7E                 db 0FFh
.xdata$x:00007B7F                 db 0FFh
.xdata$x:00007B80                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:00007B84 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:00007B84                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:00007B85                 db    5
.xdata$x:00007B86                 db  93h ; ô
.xdata$x:00007B87                 db  19h
.xdata$x:00007B88                 db    1
.xdata$x:00007B89                 db    0
.xdata$x:00007B8A                 db    0
.xdata$x:00007B8B                 db    0
.xdata$x:00007B8C                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00007B90                 db    0
.xdata$x:00007B91                 db    0
.xdata$x:00007B92                 db    0
.xdata$x:00007B93                 db    0
.xdata$x:00007B94                 db    0
.xdata$x:00007B95                 db    0
.xdata$x:00007B96                 db    0
.xdata$x:00007B97                 db    0
.xdata$x:00007B98                 db    0
.xdata$x:00007B99                 db    0
.xdata$x:00007B9A                 db    0
.xdata$x:00007B9B                 db    0
.xdata$x:00007B9C                 db    0
.xdata$x:00007B9D                 db    0
.xdata$x:00007B9E                 db    0
.xdata$x:00007B9F                 db    0
.xdata$x:00007BA0                 db    0
.xdata$x:00007BA1                 db    0
.xdata$x:00007BA2                 db    0
.xdata$x:00007BA3                 db    0
.xdata$x:00007BA4                 db    0
.xdata$x:00007BA5                 db    0
.xdata$x:00007BA6                 db    0
.xdata$x:00007BA7                 db    0
.xdata$x:00007BA7 _xdata$x        ends
.xdata$x:00007BA7
.xdata$x:00007BA8 ; ===========================================================================
.xdata$x:00007BA8
.xdata$x:00007BA8 ; Segment type: Pure data
.xdata$x:00007BA8 ; Segment permissions: Read
.xdata$x:00007BA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007BA8                 assume cs:_xdata$x
.xdata$x:00007BA8                 ;org 7BA8h
.xdata$x:00007BA8 ; COMDAT (pick associative to section at 415C)
.xdata$x:00007BA8 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007BA8                                         ; DATA XREF: .xdata$x:00007BB8o
.xdata$x:00007BA9                 db 0FFh
.xdata$x:00007BAA                 db 0FFh
.xdata$x:00007BAB                 db 0FFh
.xdata$x:00007BAC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00007BB0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007BB0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00007BB1                 db    5
.xdata$x:00007BB2                 db  93h ; ô
.xdata$x:00007BB3                 db  19h
.xdata$x:00007BB4                 db    1
.xdata$x:00007BB5                 db    0
.xdata$x:00007BB6                 db    0
.xdata$x:00007BB7                 db    0
.xdata$x:00007BB8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00007BBC                 db    0
.xdata$x:00007BBD                 db    0
.xdata$x:00007BBE                 db    0
.xdata$x:00007BBF                 db    0
.xdata$x:00007BC0                 db    0
.xdata$x:00007BC1                 db    0
.xdata$x:00007BC2                 db    0
.xdata$x:00007BC3                 db    0
.xdata$x:00007BC4                 db    0
.xdata$x:00007BC5                 db    0
.xdata$x:00007BC6                 db    0
.xdata$x:00007BC7                 db    0
.xdata$x:00007BC8                 db    0
.xdata$x:00007BC9                 db    0
.xdata$x:00007BCA                 db    0
.xdata$x:00007BCB                 db    0
.xdata$x:00007BCC                 db    0
.xdata$x:00007BCD                 db    0
.xdata$x:00007BCE                 db    0
.xdata$x:00007BCF                 db    0
.xdata$x:00007BD0                 db    0
.xdata$x:00007BD1                 db    0
.xdata$x:00007BD2                 db    0
.xdata$x:00007BD3                 db    0
.xdata$x:00007BD3 _xdata$x        ends
.xdata$x:00007BD3
.xdata$x:00007BD4 ; ===========================================================================
.xdata$x:00007BD4
.xdata$x:00007BD4 ; Segment type: Pure data
.xdata$x:00007BD4 ; Segment permissions: Read
.xdata$x:00007BD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007BD4                 assume cs:_xdata$x
.xdata$x:00007BD4                 ;org 7BD4h
.xdata$x:00007BD4 ; COMDAT (pick associative to section at 48AC)
.xdata$x:00007BD4 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007BD4                                         ; DATA XREF: .xdata$x:00007BE4o
.xdata$x:00007BD5                 db 0FFh
.xdata$x:00007BD6                 db 0FFh
.xdata$x:00007BD7                 db 0FFh
.xdata$x:00007BD8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00007BDC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007BDC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00007BDD                 db    5
.xdata$x:00007BDE                 db  93h ; ô
.xdata$x:00007BDF                 db  19h
.xdata$x:00007BE0                 db    1
.xdata$x:00007BE1                 db    0
.xdata$x:00007BE2                 db    0
.xdata$x:00007BE3                 db    0
.xdata$x:00007BE4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00007BE8                 align 20h
.xdata$x:00007BE8 _xdata$x        ends
.xdata$x:00007BE8
.xdata$x:00007C00 ; ===========================================================================
.xdata$x:00007C00
.xdata$x:00007C00 ; Segment type: Pure data
.xdata$x:00007C00 ; Segment permissions: Read
.xdata$x:00007C00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007C00                 assume cs:_xdata$x
.xdata$x:00007C00                 ;org 7C00h
.xdata$x:00007C00 ; COMDAT (pick associative to section at 4064)
.xdata$x:00007C00 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00007C00                                         ; DATA XREF: .xdata$x:00007C10o
.xdata$x:00007C01                 db 0FFh
.xdata$x:00007C02                 db 0FFh
.xdata$x:00007C03                 db 0FFh
.xdata$x:00007C04                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:00007C08 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:00007C08                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:00007C09                 db    5
.xdata$x:00007C0A                 db  93h ; ô
.xdata$x:00007C0B                 db  19h
.xdata$x:00007C0C                 db    1
.xdata$x:00007C0D                 db    0
.xdata$x:00007C0E                 db    0
.xdata$x:00007C0F                 db    0
.xdata$x:00007C10                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:00007C14                 db    0
.xdata$x:00007C15                 db    0
.xdata$x:00007C16                 db    0
.xdata$x:00007C17                 db    0
.xdata$x:00007C18                 db    0
.xdata$x:00007C19                 db    0
.xdata$x:00007C1A                 db    0
.xdata$x:00007C1B                 db    0
.xdata$x:00007C1C                 db    0
.xdata$x:00007C1D                 db    0
.xdata$x:00007C1E                 db    0
.xdata$x:00007C1F                 db    0
.xdata$x:00007C20                 db    0
.xdata$x:00007C21                 db    0
.xdata$x:00007C22                 db    0
.xdata$x:00007C23                 db    0
.xdata$x:00007C24                 db    0
.xdata$x:00007C25                 db    0
.xdata$x:00007C26                 db    0
.xdata$x:00007C27                 db    0
.xdata$x:00007C28                 db    0
.xdata$x:00007C29                 db    0
.xdata$x:00007C2A                 db    0
.xdata$x:00007C2B                 db    0
.xdata$x:00007C2B _xdata$x        ends
.xdata$x:00007C2B
.xdata$x:00007C2C ; ===========================================================================
.xdata$x:00007C2C
.xdata$x:00007C2C ; Segment type: Pure data
.xdata$x:00007C2C ; Segment permissions: Read
.xdata$x:00007C2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007C2C                 assume cs:_xdata$x
.xdata$x:00007C2C                 ;org 7C2Ch
.xdata$x:00007C2C ; COMDAT (pick associative to section at 47BC)
.xdata$x:00007C2C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007C2C                                         ; DATA XREF: .xdata$x:00007C3Co
.xdata$x:00007C2D                 db 0FFh
.xdata$x:00007C2E                 db 0FFh
.xdata$x:00007C2F                 db 0FFh
.xdata$x:00007C30                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007C34 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007C34                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007C35                 db    5
.xdata$x:00007C36                 db  93h ; ô
.xdata$x:00007C37                 db  19h
.xdata$x:00007C38                 db    1
.xdata$x:00007C39                 db    0
.xdata$x:00007C3A                 db    0
.xdata$x:00007C3B                 db    0
.xdata$x:00007C3C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00007C40                 db    0
.xdata$x:00007C41                 db    0
.xdata$x:00007C42                 db    0
.xdata$x:00007C43                 db    0
.xdata$x:00007C44                 db    0
.xdata$x:00007C45                 db    0
.xdata$x:00007C46                 db    0
.xdata$x:00007C47                 db    0
.xdata$x:00007C48                 db    0
.xdata$x:00007C49                 db    0
.xdata$x:00007C4A                 db    0
.xdata$x:00007C4B                 db    0
.xdata$x:00007C4C                 db    0
.xdata$x:00007C4D                 db    0
.xdata$x:00007C4E                 db    0
.xdata$x:00007C4F                 db    0
.xdata$x:00007C50                 db    0
.xdata$x:00007C51                 db    0
.xdata$x:00007C52                 db    0
.xdata$x:00007C53                 db    0
.xdata$x:00007C54                 db    0
.xdata$x:00007C55                 db    0
.xdata$x:00007C56                 db    0
.xdata$x:00007C57                 db    0
.xdata$x:00007C57 _xdata$x        ends
.xdata$x:00007C57
.xdata$x:00007C58 ; ===========================================================================
.xdata$x:00007C58
.xdata$x:00007C58 ; Segment type: Pure data
.xdata$x:00007C58 ; Segment permissions: Read
.xdata$x:00007C58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007C58                 assume cs:_xdata$x
.xdata$x:00007C58                 ;org 7C58h
.xdata$x:00007C58 ; COMDAT (pick associative to section at 42F8)
.xdata$x:00007C58 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00007C58                                         ; DATA XREF: .xdata$x:00007C68o
.xdata$x:00007C59                 db 0FFh
.xdata$x:00007C5A                 db 0FFh
.xdata$x:00007C5B                 db 0FFh
.xdata$x:00007C5C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00007C60 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00007C60                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00007C61                 db    5
.xdata$x:00007C62                 db  93h ; ô
.xdata$x:00007C63                 db  19h
.xdata$x:00007C64                 db    1
.xdata$x:00007C65                 db    0
.xdata$x:00007C66                 db    0
.xdata$x:00007C67                 db    0
.xdata$x:00007C68                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00007C6C                 db    0
.xdata$x:00007C6D                 db    0
.xdata$x:00007C6E                 db    0
.xdata$x:00007C6F                 db    0
.xdata$x:00007C70                 db    0
.xdata$x:00007C71                 db    0
.xdata$x:00007C72                 db    0
.xdata$x:00007C73                 db    0
.xdata$x:00007C74                 db    0
.xdata$x:00007C75                 db    0
.xdata$x:00007C76                 db    0
.xdata$x:00007C77                 db    0
.xdata$x:00007C78                 db    0
.xdata$x:00007C79                 db    0
.xdata$x:00007C7A                 db    0
.xdata$x:00007C7B                 db    0
.xdata$x:00007C7C                 db    0
.xdata$x:00007C7D                 db    0
.xdata$x:00007C7E                 db    0
.xdata$x:00007C7F                 db    0
.xdata$x:00007C80                 db    0
.xdata$x:00007C81                 db    0
.xdata$x:00007C82                 db    0
.xdata$x:00007C83                 db    0
.xdata$x:00007C83 _xdata$x        ends
.xdata$x:00007C83
.xdata$x:00007C84 ; ===========================================================================
.xdata$x:00007C84
.xdata$x:00007C84 ; Segment type: Pure data
.xdata$x:00007C84 ; Segment permissions: Read
.xdata$x:00007C84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007C84                 assume cs:_xdata$x
.xdata$x:00007C84                 ;org 7C84h
.xdata$x:00007C84 ; COMDAT (pick associative to section at 498C)
.xdata$x:00007C84 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007C84                                         ; DATA XREF: .xdata$x:00007C94o
.xdata$x:00007C85                 db 0FFh
.xdata$x:00007C86                 db 0FFh
.xdata$x:00007C87                 db 0FFh
.xdata$x:00007C88                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:00007C8C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007C8C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:00007C8D                 db    5
.xdata$x:00007C8E                 db  93h ; ô
.xdata$x:00007C8F                 db  19h
.xdata$x:00007C90                 db    1
.xdata$x:00007C91                 db    0
.xdata$x:00007C92                 db    0
.xdata$x:00007C93                 db    0
.xdata$x:00007C94                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:00007C98                 db    0
.xdata$x:00007C99                 db    0
.xdata$x:00007C9A                 db    0
.xdata$x:00007C9B                 db    0
.xdata$x:00007C9C                 db    0
.xdata$x:00007C9D                 db    0
.xdata$x:00007C9E                 db    0
.xdata$x:00007C9F                 db    0
.xdata$x:00007CA0                 db    0
.xdata$x:00007CA1                 db    0
.xdata$x:00007CA2                 db    0
.xdata$x:00007CA3                 db    0
.xdata$x:00007CA4                 db    0
.xdata$x:00007CA5                 db    0
.xdata$x:00007CA6                 db    0
.xdata$x:00007CA7                 db    0
.xdata$x:00007CA8                 db    0
.xdata$x:00007CA9                 db    0
.xdata$x:00007CAA                 db    0
.xdata$x:00007CAB                 db    0
.xdata$x:00007CAC                 db    0
.xdata$x:00007CAD                 db    0
.xdata$x:00007CAE                 db    0
.xdata$x:00007CAF                 db    0
.xdata$x:00007CAF _xdata$x        ends
.xdata$x:00007CAF
.xdata$x:00007CB0 ; ===========================================================================
.xdata$x:00007CB0
.xdata$x:00007CB0 ; Segment type: Pure data
.xdata$x:00007CB0 ; Segment permissions: Read
.xdata$x:00007CB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007CB0                 assume cs:_xdata$x
.xdata$x:00007CB0                 ;org 7CB0h
.xdata$x:00007CB0 ; COMDAT (pick associative to section at 5568)
.xdata$x:00007CB0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00007CB0                                         ; DATA XREF: .xdata$x:00007D38o
.xdata$x:00007CB1                 db    0
.xdata$x:00007CB2                 db    0
.xdata$x:00007CB3                 db    0
.xdata$x:00007CB4                 db    0
.xdata$x:00007CB5                 db    0
.xdata$x:00007CB6                 db    0
.xdata$x:00007CB7                 db    0
.xdata$x:00007CB8                 db    0
.xdata$x:00007CB9                 db    0
.xdata$x:00007CBA                 db    0
.xdata$x:00007CBB                 db    0
.xdata$x:00007CBC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:00007CC0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00007CC0                                         ; DATA XREF: .xdata$x:00007D24o
.xdata$x:00007CC1                 db    0
.xdata$x:00007CC2                 db    0
.xdata$x:00007CC3                 db    0
.xdata$x:00007CC4                 db    0
.xdata$x:00007CC5                 db    0
.xdata$x:00007CC6                 db    0
.xdata$x:00007CC7                 db    0
.xdata$x:00007CC8                 db    0
.xdata$x:00007CC9                 db    0
.xdata$x:00007CCA                 db    0
.xdata$x:00007CCB                 db    0
.xdata$x:00007CCC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:00007CD0 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00007CD0                                         ; DATA XREF: .xdata$x:00007CF8o
.xdata$x:00007CD1                 db 0FFh
.xdata$x:00007CD2                 db 0FFh
.xdata$x:00007CD3                 db 0FFh
.xdata$x:00007CD4                 db    0
.xdata$x:00007CD5                 db    0
.xdata$x:00007CD6                 db    0
.xdata$x:00007CD7                 db    0
.xdata$x:00007CD8                 db 0FFh
.xdata$x:00007CD9                 db 0FFh
.xdata$x:00007CDA                 db 0FFh
.xdata$x:00007CDB                 db 0FFh
.xdata$x:00007CDC                 db    0
.xdata$x:00007CDD                 db    0
.xdata$x:00007CDE                 db    0
.xdata$x:00007CDF                 db    0
.xdata$x:00007CE0                 db    1
.xdata$x:00007CE1                 db    0
.xdata$x:00007CE2                 db    0
.xdata$x:00007CE3                 db    0
.xdata$x:00007CE4                 db    0
.xdata$x:00007CE5                 db    0
.xdata$x:00007CE6                 db    0
.xdata$x:00007CE7                 db    0
.xdata$x:00007CE8                 db    1
.xdata$x:00007CE9                 db    0
.xdata$x:00007CEA                 db    0
.xdata$x:00007CEB                 db    0
.xdata$x:00007CEC                 db    0
.xdata$x:00007CED                 db    0
.xdata$x:00007CEE                 db    0
.xdata$x:00007CEF                 db    0
.xdata$x:00007CF0 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00007CF0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:00007CF1                 db    5
.xdata$x:00007CF2                 db  93h ; ô
.xdata$x:00007CF3                 db  19h
.xdata$x:00007CF4                 db    4
.xdata$x:00007CF5                 db    0
.xdata$x:00007CF6                 db    0
.xdata$x:00007CF7                 db    0
.xdata$x:00007CF8                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00007CFC                 db    2
.xdata$x:00007CFD                 db    0
.xdata$x:00007CFE                 db    0
.xdata$x:00007CFF                 db    0
.xdata$x:00007D00                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00007D04                 db    0
.xdata$x:00007D05                 db    0
.xdata$x:00007D06                 db    0
.xdata$x:00007D07                 db    0
.xdata$x:00007D08                 db    0
.xdata$x:00007D09                 db    0
.xdata$x:00007D0A                 db    0
.xdata$x:00007D0B                 db    0
.xdata$x:00007D0C                 db    0
.xdata$x:00007D0D                 db    0
.xdata$x:00007D0E                 db    0
.xdata$x:00007D0F                 db    0
.xdata$x:00007D10                 db    0
.xdata$x:00007D11                 db    0
.xdata$x:00007D12                 db    0
.xdata$x:00007D13                 db    0
.xdata$x:00007D14 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:00007D14                                         ; DATA XREF: .xdata$x:00007D00o
.xdata$x:00007D15                 db    0
.xdata$x:00007D16                 db    0
.xdata$x:00007D17                 db    0
.xdata$x:00007D18                 db    2
.xdata$x:00007D19                 db    0
.xdata$x:00007D1A                 db    0
.xdata$x:00007D1B                 db    0
.xdata$x:00007D1C                 db    3
.xdata$x:00007D1D                 db    0
.xdata$x:00007D1E                 db    0
.xdata$x:00007D1F                 db    0
.xdata$x:00007D20                 db    1
.xdata$x:00007D21                 db    0
.xdata$x:00007D22                 db    0
.xdata$x:00007D23                 db    0
.xdata$x:00007D24                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:00007D28                 align 10h
.xdata$x:00007D30                 db    3
.xdata$x:00007D31                 db    0
.xdata$x:00007D32                 db    0
.xdata$x:00007D33                 db    0
.xdata$x:00007D34                 db    1
.xdata$x:00007D35                 db    0
.xdata$x:00007D36                 db    0
.xdata$x:00007D37                 db    0
.xdata$x:00007D38                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00007D38 _xdata$x        ends
.xdata$x:00007D38
.xdata$x:00007D3C ; ===========================================================================
.xdata$x:00007D3C
.xdata$x:00007D3C ; Segment type: Pure data
.xdata$x:00007D3C ; Segment permissions: Read
.xdata$x:00007D3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D3C                 assume cs:_xdata$x
.xdata$x:00007D3C                 ;org 7D3Ch
.xdata$x:00007D3C ; COMDAT (pick associative to section at 45E4)
.xdata$x:00007D3C __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00007D3C                                         ; DATA XREF: .xdata$x:00007D4Co
.xdata$x:00007D3D                 db 0FFh
.xdata$x:00007D3E                 db 0FFh
.xdata$x:00007D3F                 db 0FFh
.xdata$x:00007D40                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:00007D44 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00007D44                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:00007D45                 db    5
.xdata$x:00007D46                 db  93h ; ô
.xdata$x:00007D47                 db  19h
.xdata$x:00007D48                 db    1
.xdata$x:00007D49                 db    0
.xdata$x:00007D4A                 db    0
.xdata$x:00007D4B                 db    0
.xdata$x:00007D4C                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:00007D50                 db    0
.xdata$x:00007D51                 db    0
.xdata$x:00007D52                 db    0
.xdata$x:00007D53                 db    0
.xdata$x:00007D54                 db    0
.xdata$x:00007D55                 db    0
.xdata$x:00007D56                 db    0
.xdata$x:00007D57                 db    0
.xdata$x:00007D58                 db    0
.xdata$x:00007D59                 db    0
.xdata$x:00007D5A                 db    0
.xdata$x:00007D5B                 db    0
.xdata$x:00007D5C                 db    0
.xdata$x:00007D5D                 db    0
.xdata$x:00007D5E                 db    0
.xdata$x:00007D5F                 db    0
.xdata$x:00007D60                 db    0
.xdata$x:00007D61                 db    0
.xdata$x:00007D62                 db    0
.xdata$x:00007D63                 db    0
.xdata$x:00007D64                 db    0
.xdata$x:00007D65                 db    0
.xdata$x:00007D66                 db    0
.xdata$x:00007D67                 db    0
.xdata$x:00007D67 _xdata$x        ends
.xdata$x:00007D67
.xdata$x:00007D68 ; ===========================================================================
.xdata$x:00007D68
.xdata$x:00007D68 ; Segment type: Pure data
.xdata$x:00007D68 ; Segment permissions: Read
.xdata$x:00007D68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D68                 assume cs:_xdata$x
.xdata$x:00007D68                 ;org 7D68h
.xdata$x:00007D68 ; COMDAT (pick associative to section at 7214)
.xdata$x:00007D68 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00007D68                                         ; DATA XREF: .xdata$x:00007D78o
.xdata$x:00007D69                 db 0FFh
.xdata$x:00007D6A                 db 0FFh
.xdata$x:00007D6B                 db 0FFh
.xdata$x:00007D6C                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00007D70 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00007D70                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00007D71                 db    5
.xdata$x:00007D72                 db  93h ; ô
.xdata$x:00007D73                 db  19h
.xdata$x:00007D74                 db    1
.xdata$x:00007D75                 db    0
.xdata$x:00007D76                 db    0
.xdata$x:00007D77                 db    0
.xdata$x:00007D78                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00007D7C                 db    0
.xdata$x:00007D7D                 db    0
.xdata$x:00007D7E                 db    0
.xdata$x:00007D7F                 db    0
.xdata$x:00007D80                 db    0
.xdata$x:00007D81                 db    0
.xdata$x:00007D82                 db    0
.xdata$x:00007D83                 db    0
.xdata$x:00007D84                 db    0
.xdata$x:00007D85                 db    0
.xdata$x:00007D86                 db    0
.xdata$x:00007D87                 db    0
.xdata$x:00007D88                 db    0
.xdata$x:00007D89                 db    0
.xdata$x:00007D8A                 db    0
.xdata$x:00007D8B                 db    0
.xdata$x:00007D8C                 db    0
.xdata$x:00007D8D                 db    0
.xdata$x:00007D8E                 db    0
.xdata$x:00007D8F                 db    0
.xdata$x:00007D90                 db    0
.xdata$x:00007D91                 db    0
.xdata$x:00007D92                 db    0
.xdata$x:00007D93                 db    0
.xdata$x:00007D93 _xdata$x        ends
.xdata$x:00007D93
.xdata$x:00007D94 ; ===========================================================================
.xdata$x:00007D94
.xdata$x:00007D94 ; Segment type: Pure data
.xdata$x:00007D94 ; Segment permissions: Read
.xdata$x:00007D94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D94                 assume cs:_xdata$x
.xdata$x:00007D94                 ;org 7D94h
.xdata$x:00007D94 ; COMDAT (pick associative to section at 4B24)
.xdata$x:00007D94 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00007D94                                         ; DATA XREF: .xdata$x:00007DA4o
.xdata$x:00007D95                 db 0FFh
.xdata$x:00007D96                 db 0FFh
.xdata$x:00007D97                 db 0FFh
.xdata$x:00007D98                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:00007D9C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00007D9C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:00007D9D                 db    5
.xdata$x:00007D9E                 db  93h ; ô
.xdata$x:00007D9F                 db  19h
.xdata$x:00007DA0                 db    1
.xdata$x:00007DA1                 db    0
.xdata$x:00007DA2                 db    0
.xdata$x:00007DA3                 db    0
.xdata$x:00007DA4                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:00007DA8                 align 20h
.xdata$x:00007DA8 _xdata$x        ends
.xdata$x:00007DA8
.xdata$x:00007DC0 ; ===========================================================================
.xdata$x:00007DC0
.xdata$x:00007DC0 ; Segment type: Pure data
.xdata$x:00007DC0 ; Segment permissions: Read
.xdata$x:00007DC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DC0                 assume cs:_xdata$x
.xdata$x:00007DC0                 ;org 7DC0h
.xdata$x:00007DC0 ; COMDAT (pick associative to section at 4670)
.xdata$x:00007DC0 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00007DC0                                         ; DATA XREF: .xdata$x:00007DD0o
.xdata$x:00007DC1                 db 0FFh
.xdata$x:00007DC2                 db 0FFh
.xdata$x:00007DC3                 db 0FFh
.xdata$x:00007DC4                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:00007DC8 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00007DC8                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:00007DC9                 db    5
.xdata$x:00007DCA                 db  93h ; ô
.xdata$x:00007DCB                 db  19h
.xdata$x:00007DCC                 db    1
.xdata$x:00007DCD                 db    0
.xdata$x:00007DCE                 db    0
.xdata$x:00007DCF                 db    0
.xdata$x:00007DD0                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:00007DD4                 db    0
.xdata$x:00007DD5                 db    0
.xdata$x:00007DD6                 db    0
.xdata$x:00007DD7                 db    0
.xdata$x:00007DD8                 db    0
.xdata$x:00007DD9                 db    0
.xdata$x:00007DDA                 db    0
.xdata$x:00007DDB                 db    0
.xdata$x:00007DDC                 db    0
.xdata$x:00007DDD                 db    0
.xdata$x:00007DDE                 db    0
.xdata$x:00007DDF                 db    0
.xdata$x:00007DE0                 db    0
.xdata$x:00007DE1                 db    0
.xdata$x:00007DE2                 db    0
.xdata$x:00007DE3                 db    0
.xdata$x:00007DE4                 db    0
.xdata$x:00007DE5                 db    0
.xdata$x:00007DE6                 db    0
.xdata$x:00007DE7                 db    0
.xdata$x:00007DE8                 db    0
.xdata$x:00007DE9                 db    0
.xdata$x:00007DEA                 db    0
.xdata$x:00007DEB                 db    0
.xdata$x:00007DEB _xdata$x        ends
.xdata$x:00007DEB
.xdata$x:00007DEC ; ===========================================================================
.xdata$x:00007DEC
.xdata$x:00007DEC ; Segment type: Pure data
.xdata$x:00007DEC ; Segment permissions: Read
.xdata$x:00007DEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DEC                 assume cs:_xdata$x
.xdata$x:00007DEC                 ;org 7DECh
.xdata$x:00007DEC ; COMDAT (pick associative to section at 72CC)
.xdata$x:00007DEC __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00007DEC                                         ; DATA XREF: .xdata$x:00007DFCo
.xdata$x:00007DED                 db 0FFh
.xdata$x:00007DEE                 db 0FFh
.xdata$x:00007DEF                 db 0FFh
.xdata$x:00007DF0                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00007DF4 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00007DF4                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00007DF5                 db    5
.xdata$x:00007DF6                 db  93h ; ô
.xdata$x:00007DF7                 db  19h
.xdata$x:00007DF8                 db    1
.xdata$x:00007DF9                 db    0
.xdata$x:00007DFA                 db    0
.xdata$x:00007DFB                 db    0
.xdata$x:00007DFC                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00007E00                 db    0
.xdata$x:00007E01                 db    0
.xdata$x:00007E02                 db    0
.xdata$x:00007E03                 db    0
.xdata$x:00007E04                 db    0
.xdata$x:00007E05                 db    0
.xdata$x:00007E06                 db    0
.xdata$x:00007E07                 db    0
.xdata$x:00007E08                 db    0
.xdata$x:00007E09                 db    0
.xdata$x:00007E0A                 db    0
.xdata$x:00007E0B                 db    0
.xdata$x:00007E0C                 db    0
.xdata$x:00007E0D                 db    0
.xdata$x:00007E0E                 db    0
.xdata$x:00007E0F                 db    0
.xdata$x:00007E10                 db    0
.xdata$x:00007E11                 db    0
.xdata$x:00007E12                 db    0
.xdata$x:00007E13                 db    0
.xdata$x:00007E14                 db    0
.xdata$x:00007E15                 db    0
.xdata$x:00007E16                 db    0
.xdata$x:00007E17                 db    0
.xdata$x:00007E17 _xdata$x        ends
.xdata$x:00007E17
.xdata$x:00007E18 ; ===========================================================================
.xdata$x:00007E18
.xdata$x:00007E18 ; Segment type: Pure data
.xdata$x:00007E18 ; Segment permissions: Read
.xdata$x:00007E18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E18                 assume cs:_xdata$x
.xdata$x:00007E18                 ;org 7E18h
.xdata$x:00007E18 ; COMDAT (pick associative to section at 4B94)
.xdata$x:00007E18 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00007E18                                         ; DATA XREF: .xdata$x:00007E28o
.xdata$x:00007E19                 db 0FFh
.xdata$x:00007E1A                 db 0FFh
.xdata$x:00007E1B                 db 0FFh
.xdata$x:00007E1C                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00007E20 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00007E20                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00007E21                 db    5
.xdata$x:00007E22                 db  93h ; ô
.xdata$x:00007E23                 db  19h
.xdata$x:00007E24                 db    1
.xdata$x:00007E25                 db    0
.xdata$x:00007E26                 db    0
.xdata$x:00007E27                 db    0
.xdata$x:00007E28                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:00007E2C                 db    0
.xdata$x:00007E2D                 db    0
.xdata$x:00007E2E                 db    0
.xdata$x:00007E2F                 db    0
.xdata$x:00007E30                 db    0
.xdata$x:00007E31                 db    0
.xdata$x:00007E32                 db    0
.xdata$x:00007E33                 db    0
.xdata$x:00007E34                 db    0
.xdata$x:00007E35                 db    0
.xdata$x:00007E36                 db    0
.xdata$x:00007E37                 db    0
.xdata$x:00007E38                 db    0
.xdata$x:00007E39                 db    0
.xdata$x:00007E3A                 db    0
.xdata$x:00007E3B                 db    0
.xdata$x:00007E3C                 db    0
.xdata$x:00007E3D                 db    0
.xdata$x:00007E3E                 db    0
.xdata$x:00007E3F                 db    0
.xdata$x:00007E40                 db    0
.xdata$x:00007E41                 db    0
.xdata$x:00007E42                 db    0
.xdata$x:00007E43                 db    0
.xdata$x:00007E43 _xdata$x        ends
.xdata$x:00007E43
.xdata$x:00007E44 ; ===========================================================================
.xdata$x:00007E44
.xdata$x:00007E44 ; Segment type: Pure data
.xdata$x:00007E44 ; Segment permissions: Read
.xdata$x:00007E44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E44                 assume cs:_xdata$x
.xdata$x:00007E44                 ;org 7E44h
.xdata$x:00007E44 ; COMDAT (pick associative to section at 46EC)
.xdata$x:00007E44 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00007E44                                         ; DATA XREF: .xdata$x:00007E54o
.xdata$x:00007E45                 db 0FFh
.xdata$x:00007E46                 db 0FFh
.xdata$x:00007E47                 db 0FFh
.xdata$x:00007E48                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:00007E4C __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00007E4C                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:00007E4D                 db    5
.xdata$x:00007E4E                 db  93h ; ô
.xdata$x:00007E4F                 db  19h
.xdata$x:00007E50                 db    1
.xdata$x:00007E51                 db    0
.xdata$x:00007E52                 db    0
.xdata$x:00007E53                 db    0
.xdata$x:00007E54                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00007E58                 db    0
.xdata$x:00007E59                 db    0
.xdata$x:00007E5A                 db    0
.xdata$x:00007E5B                 db    0
.xdata$x:00007E5C                 db    0
.xdata$x:00007E5D                 db    0
.xdata$x:00007E5E                 db    0
.xdata$x:00007E5F                 db    0
.xdata$x:00007E60                 db    0
.xdata$x:00007E61                 db    0
.xdata$x:00007E62                 db    0
.xdata$x:00007E63                 db    0
.xdata$x:00007E64                 db    0
.xdata$x:00007E65                 db    0
.xdata$x:00007E66                 db    0
.xdata$x:00007E67                 db    0
.xdata$x:00007E68                 db    0
.xdata$x:00007E69                 db    0
.xdata$x:00007E6A                 db    0
.xdata$x:00007E6B                 db    0
.xdata$x:00007E6C                 db    0
.xdata$x:00007E6D                 db    0
.xdata$x:00007E6E                 db    0
.xdata$x:00007E6F                 db    0
.xdata$x:00007E6F _xdata$x        ends
.xdata$x:00007E6F
.xdata$x:00007E70 ; ===========================================================================
.xdata$x:00007E70
.xdata$x:00007E70 ; Segment type: Pure data
.xdata$x:00007E70 ; Segment permissions: Read
.xdata$x:00007E70 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E70                 assume cs:_xdata$x
.xdata$x:00007E70                 ;org 7E70h
.xdata$x:00007E70 ; COMDAT (pick associative to section at 7390)
.xdata$x:00007E70 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00007E70                                         ; DATA XREF: .xdata$x:00007E80o
.xdata$x:00007E71                 db 0FFh
.xdata$x:00007E72                 db 0FFh
.xdata$x:00007E73                 db 0FFh
.xdata$x:00007E74                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00007E78 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00007E78                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00007E79                 db    5
.xdata$x:00007E7A                 db  93h ; ô
.xdata$x:00007E7B                 db  19h
.xdata$x:00007E7C                 db    1
.xdata$x:00007E7D                 db    0
.xdata$x:00007E7E                 db    0
.xdata$x:00007E7F                 db    0
.xdata$x:00007E80                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00007E84                 db    0
.xdata$x:00007E85                 db    0
.xdata$x:00007E86                 db    0
.xdata$x:00007E87                 db    0
.xdata$x:00007E88                 db    0
.xdata$x:00007E89                 db    0
.xdata$x:00007E8A                 db    0
.xdata$x:00007E8B                 db    0
.xdata$x:00007E8C                 db    0
.xdata$x:00007E8D                 db    0
.xdata$x:00007E8E                 db    0
.xdata$x:00007E8F                 db    0
.xdata$x:00007E90                 db    0
.xdata$x:00007E91                 db    0
.xdata$x:00007E92                 db    0
.xdata$x:00007E93                 db    0
.xdata$x:00007E94                 db    0
.xdata$x:00007E95                 db    0
.xdata$x:00007E96                 db    0
.xdata$x:00007E97                 db    0
.xdata$x:00007E98                 db    0
.xdata$x:00007E99                 db    0
.xdata$x:00007E9A                 db    0
.xdata$x:00007E9B                 db    0
.xdata$x:00007E9B _xdata$x        ends
.xdata$x:00007E9B
.xdata$x:00007E9C ; ===========================================================================
.xdata$x:00007E9C
.xdata$x:00007E9C ; Segment type: Pure data
.xdata$x:00007E9C ; Segment permissions: Read
.xdata$x:00007E9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E9C                 assume cs:_xdata$x
.xdata$x:00007E9C                 ;org 7E9Ch
.xdata$x:00007E9C ; COMDAT (pick associative to section at 4C04)
.xdata$x:00007E9C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00007E9C                                         ; DATA XREF: .xdata$x:00007EACo
.xdata$x:00007E9D                 db 0FFh
.xdata$x:00007E9E                 db 0FFh
.xdata$x:00007E9F                 db 0FFh
.xdata$x:00007EA0                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00007EA4 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00007EA4                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00007EA5                 db    5
.xdata$x:00007EA6                 db  93h ; ô
.xdata$x:00007EA7                 db  19h
.xdata$x:00007EA8                 db    1
.xdata$x:00007EA9                 db    0
.xdata$x:00007EAA                 db    0
.xdata$x:00007EAB                 db    0
.xdata$x:00007EAC                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00007EB0                 db    0
.xdata$x:00007EB1                 db    0
.xdata$x:00007EB2                 db    0
.xdata$x:00007EB3                 db    0
.xdata$x:00007EB4                 db    0
.xdata$x:00007EB5                 db    0
.xdata$x:00007EB6                 db    0
.xdata$x:00007EB7                 db    0
.xdata$x:00007EB8                 db    0
.xdata$x:00007EB9                 db    0
.xdata$x:00007EBA                 db    0
.xdata$x:00007EBB                 db    0
.xdata$x:00007EBC                 db    0
.xdata$x:00007EBD                 db    0
.xdata$x:00007EBE                 db    0
.xdata$x:00007EBF                 db    0
.xdata$x:00007EC0                 db    0
.xdata$x:00007EC1                 db    0
.xdata$x:00007EC2                 db    0
.xdata$x:00007EC3                 db    0
.xdata$x:00007EC4                 db    0
.xdata$x:00007EC5                 db    0
.xdata$x:00007EC6                 db    0
.xdata$x:00007EC7                 db    0
.xdata$x:00007EC7 _xdata$x        ends
.xdata$x:00007EC7
.xdata$x:00007EC8 ; ===========================================================================
.xdata$x:00007EC8
.xdata$x:00007EC8 ; Segment type: Pure data
.xdata$x:00007EC8 ; Segment permissions: Read
.xdata$x:00007EC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007EC8                 assume cs:_xdata$x
.xdata$x:00007EC8                 ;org 7EC8h
.xdata$x:00007EC8 ; COMDAT (pick associative to section at 41E4)
.xdata$x:00007EC8 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007EC8                                         ; DATA XREF: .xdata$x:00007ED8o
.xdata$x:00007EC9                 db 0FFh
.xdata$x:00007ECA                 db 0FFh
.xdata$x:00007ECB                 db 0FFh
.xdata$x:00007ECC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00007ED0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007ED0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00007ED1                 db    5
.xdata$x:00007ED2                 db  93h ; ô
.xdata$x:00007ED3                 db  19h
.xdata$x:00007ED4                 db    1
.xdata$x:00007ED5                 db    0
.xdata$x:00007ED6                 db    0
.xdata$x:00007ED7                 db    0
.xdata$x:00007ED8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00007EDC                 db    0
.xdata$x:00007EDD                 db    0
.xdata$x:00007EDE                 db    0
.xdata$x:00007EDF                 db    0
.xdata$x:00007EE0                 db    0
.xdata$x:00007EE1                 db    0
.xdata$x:00007EE2                 db    0
.xdata$x:00007EE3                 db    0
.xdata$x:00007EE4                 db    0
.xdata$x:00007EE5                 db    0
.xdata$x:00007EE6                 db    0
.xdata$x:00007EE7                 db    0
.xdata$x:00007EE8                 db    0
.xdata$x:00007EE9                 db    0
.xdata$x:00007EEA                 db    0
.xdata$x:00007EEB                 db    0
.xdata$x:00007EEC                 db    0
.xdata$x:00007EED                 db    0
.xdata$x:00007EEE                 db    0
.xdata$x:00007EEF                 db    0
.xdata$x:00007EF0                 db    0
.xdata$x:00007EF1                 db    0
.xdata$x:00007EF2                 db    0
.xdata$x:00007EF3                 db    0
.xdata$x:00007EF3 _xdata$x        ends
.xdata$x:00007EF3
.xdata$x:00007EF4 ; ===========================================================================
.xdata$x:00007EF4
.xdata$x:00007EF4 ; Segment type: Pure data
.xdata$x:00007EF4 ; Segment permissions: Read
.xdata$x:00007EF4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007EF4                 assume cs:_xdata$x
.xdata$x:00007EF4                 ;org 7EF4h
.xdata$x:00007EF4 ; COMDAT (pick associative to section at 491C)
.xdata$x:00007EF4 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007EF4                                         ; DATA XREF: .xdata$x:00007F04o
.xdata$x:00007EF5                 db 0FFh
.xdata$x:00007EF6                 db 0FFh
.xdata$x:00007EF7                 db 0FFh
.xdata$x:00007EF8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00007EFC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007EFC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00007EFD                 db    5
.xdata$x:00007EFE                 db  93h ; ô
.xdata$x:00007EFF                 db  19h
.xdata$x:00007F00                 db    1
.xdata$x:00007F01                 db    0
.xdata$x:00007F02                 db    0
.xdata$x:00007F03                 db    0
.xdata$x:00007F04                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00007F08                 align 20h
.xdata$x:00007F08 _xdata$x        ends
.xdata$x:00007F08
.xdata$x:00007F20 ; ===========================================================================
.xdata$x:00007F20
.xdata$x:00007F20 ; Segment type: Pure data
.xdata$x:00007F20 ; Segment permissions: Read
.xdata$x:00007F20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F20                 assume cs:_xdata$x
.xdata$x:00007F20                 ;org 7F20h
.xdata$x:00007F20 ; COMDAT (pick associative to section at 40E0)
.xdata$x:00007F20 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:00007F20                                         ; DATA XREF: .xdata$x:00007F30o
.xdata$x:00007F21                 db 0FFh
.xdata$x:00007F22                 db 0FFh
.xdata$x:00007F23                 db 0FFh
.xdata$x:00007F24                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00007F28 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00007F28                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00007F29                 db    5
.xdata$x:00007F2A                 db  93h ; ô
.xdata$x:00007F2B                 db  19h
.xdata$x:00007F2C                 db    1
.xdata$x:00007F2D                 db    0
.xdata$x:00007F2E                 db    0
.xdata$x:00007F2F                 db    0
.xdata$x:00007F30                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:00007F34                 db    0
.xdata$x:00007F35                 db    0
.xdata$x:00007F36                 db    0
.xdata$x:00007F37                 db    0
.xdata$x:00007F38                 db    0
.xdata$x:00007F39                 db    0
.xdata$x:00007F3A                 db    0
.xdata$x:00007F3B                 db    0
.xdata$x:00007F3C                 db    0
.xdata$x:00007F3D                 db    0
.xdata$x:00007F3E                 db    0
.xdata$x:00007F3F                 db    0
.xdata$x:00007F40                 db    0
.xdata$x:00007F41                 db    0
.xdata$x:00007F42                 db    0
.xdata$x:00007F43                 db    0
.xdata$x:00007F44                 db    0
.xdata$x:00007F45                 db    0
.xdata$x:00007F46                 db    0
.xdata$x:00007F47                 db    0
.xdata$x:00007F48                 db    0
.xdata$x:00007F49                 db    0
.xdata$x:00007F4A                 db    0
.xdata$x:00007F4B                 db    0
.xdata$x:00007F4B _xdata$x        ends
.xdata$x:00007F4B
.xdata$x:00007F4C ; ===========================================================================
.xdata$x:00007F4C
.xdata$x:00007F4C ; Segment type: Pure data
.xdata$x:00007F4C ; Segment permissions: Read
.xdata$x:00007F4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F4C                 assume cs:_xdata$x
.xdata$x:00007F4C                 ;org 7F4Ch
.xdata$x:00007F4C ; COMDAT (pick associative to section at 4834)
.xdata$x:00007F4C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007F4C                                         ; DATA XREF: .xdata$x:00007F5Co
.xdata$x:00007F4D                 db 0FFh
.xdata$x:00007F4E                 db 0FFh
.xdata$x:00007F4F                 db 0FFh
.xdata$x:00007F50                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007F54 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007F54                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007F55                 db    5
.xdata$x:00007F56                 db  93h ; ô
.xdata$x:00007F57                 db  19h
.xdata$x:00007F58                 db    1
.xdata$x:00007F59                 db    0
.xdata$x:00007F5A                 db    0
.xdata$x:00007F5B                 db    0
.xdata$x:00007F5C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00007F60                 db    0
.xdata$x:00007F61                 db    0
.xdata$x:00007F62                 db    0
.xdata$x:00007F63                 db    0
.xdata$x:00007F64                 db    0
.xdata$x:00007F65                 db    0
.xdata$x:00007F66                 db    0
.xdata$x:00007F67                 db    0
.xdata$x:00007F68                 db    0
.xdata$x:00007F69                 db    0
.xdata$x:00007F6A                 db    0
.xdata$x:00007F6B                 db    0
.xdata$x:00007F6C                 db    0
.xdata$x:00007F6D                 db    0
.xdata$x:00007F6E                 db    0
.xdata$x:00007F6F                 db    0
.xdata$x:00007F70                 db    0
.xdata$x:00007F71                 db    0
.xdata$x:00007F72                 db    0
.xdata$x:00007F73                 db    0
.xdata$x:00007F74                 db    0
.xdata$x:00007F75                 db    0
.xdata$x:00007F76                 db    0
.xdata$x:00007F77                 db    0
.xdata$x:00007F77 _xdata$x        ends
.xdata$x:00007F77
.xdata$x:00007F78 ; ===========================================================================
.xdata$x:00007F78
.xdata$x:00007F78 ; Segment type: Pure data
.xdata$x:00007F78 ; Segment permissions: Read
.xdata$x:00007F78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F78                 assume cs:_xdata$x
.xdata$x:00007F78                 ;org 7F78h
.xdata$x:00007F78 ; COMDAT (pick associative to section at 4390)
.xdata$x:00007F78 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00007F78                                         ; DATA XREF: .xdata$x:00007F88o
.xdata$x:00007F79                 db 0FFh
.xdata$x:00007F7A                 db 0FFh
.xdata$x:00007F7B                 db 0FFh
.xdata$x:00007F7C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:00007F80 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00007F80                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:00007F81                 db    5
.xdata$x:00007F82                 db  93h ; ô
.xdata$x:00007F83                 db  19h
.xdata$x:00007F84                 db    1
.xdata$x:00007F85                 db    0
.xdata$x:00007F86                 db    0
.xdata$x:00007F87                 db    0
.xdata$x:00007F88                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:00007F8C                 db    0
.xdata$x:00007F8D                 db    0
.xdata$x:00007F8E                 db    0
.xdata$x:00007F8F                 db    0
.xdata$x:00007F90                 db    0
.xdata$x:00007F91                 db    0
.xdata$x:00007F92                 db    0
.xdata$x:00007F93                 db    0
.xdata$x:00007F94                 db    0
.xdata$x:00007F95                 db    0
.xdata$x:00007F96                 db    0
.xdata$x:00007F97                 db    0
.xdata$x:00007F98                 db    0
.xdata$x:00007F99                 db    0
.xdata$x:00007F9A                 db    0
.xdata$x:00007F9B                 db    0
.xdata$x:00007F9C                 db    0
.xdata$x:00007F9D                 db    0
.xdata$x:00007F9E                 db    0
.xdata$x:00007F9F                 db    0
.xdata$x:00007FA0                 db    0
.xdata$x:00007FA1                 db    0
.xdata$x:00007FA2                 db    0
.xdata$x:00007FA3                 db    0
.xdata$x:00007FA3 _xdata$x        ends
.xdata$x:00007FA3
.xdata$x:00007FA4 ; ===========================================================================
.xdata$x:00007FA4
.xdata$x:00007FA4 ; Segment type: Pure data
.xdata$x:00007FA4 ; Segment permissions: Read
.xdata$x:00007FA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FA4                 assume cs:_xdata$x
.xdata$x:00007FA4                 ;org 7FA4h
.xdata$x:00007FA4 ; COMDAT (pick associative to section at 4440)
.xdata$x:00007FA4 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00007FA4                                         ; DATA XREF: .xdata$x:00007FB4o
.xdata$x:00007FA5                 db 0FFh
.xdata$x:00007FA6                 db 0FFh
.xdata$x:00007FA7                 db 0FFh
.xdata$x:00007FA8                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:00007FAC __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:00007FAC                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:00007FAD                 db    5
.xdata$x:00007FAE                 db  93h ; ô
.xdata$x:00007FAF                 db  19h
.xdata$x:00007FB0                 db    1
.xdata$x:00007FB1                 db    0
.xdata$x:00007FB2                 db    0
.xdata$x:00007FB3                 db    0
.xdata$x:00007FB4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00007FB8                 db    0
.xdata$x:00007FB9                 db    0
.xdata$x:00007FBA                 db    0
.xdata$x:00007FBB                 db    0
.xdata$x:00007FBC                 db    0
.xdata$x:00007FBD                 db    0
.xdata$x:00007FBE                 db    0
.xdata$x:00007FBF                 db    0
.xdata$x:00007FC0                 db    0
.xdata$x:00007FC1                 db    0
.xdata$x:00007FC2                 db    0
.xdata$x:00007FC3                 db    0
.xdata$x:00007FC4                 db    0
.xdata$x:00007FC5                 db    0
.xdata$x:00007FC6                 db    0
.xdata$x:00007FC7                 db    0
.xdata$x:00007FC8                 db    0
.xdata$x:00007FC9                 db    0
.xdata$x:00007FCA                 db    0
.xdata$x:00007FCB                 db    0
.xdata$x:00007FCC                 db    0
.xdata$x:00007FCD                 db    0
.xdata$x:00007FCE                 db    0
.xdata$x:00007FCF                 db    0
.xdata$x:00007FCF _xdata$x        ends
.xdata$x:00007FCF
.xdata$x:00007FD0 ; ===========================================================================
.xdata$x:00007FD0
.xdata$x:00007FD0 ; Segment type: Pure data
.xdata$x:00007FD0 ; Segment permissions: Read
.xdata$x:00007FD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FD0                 assume cs:_xdata$x
.xdata$x:00007FD0                 ;org 7FD0h
.xdata$x:00007FD0 ; COMDAT (pick associative to section at 4A08)
.xdata$x:00007FD0 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007FD0                                         ; DATA XREF: .xdata$x:00007FE0o
.xdata$x:00007FD1                 db 0FFh
.xdata$x:00007FD2                 db 0FFh
.xdata$x:00007FD3                 db 0FFh
.xdata$x:00007FD4                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00007FD8 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007FD8                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00007FD9                 db    5
.xdata$x:00007FDA                 db  93h ; ô
.xdata$x:00007FDB                 db  19h
.xdata$x:00007FDC                 db    1
.xdata$x:00007FDD                 db    0
.xdata$x:00007FDE                 db    0
.xdata$x:00007FDF                 db    0
.xdata$x:00007FE0                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00007FE4                 db    0
.xdata$x:00007FE5                 db    0
.xdata$x:00007FE6                 db    0
.xdata$x:00007FE7                 db    0
.xdata$x:00007FE8                 db    0
.xdata$x:00007FE9                 db    0
.xdata$x:00007FEA                 db    0
.xdata$x:00007FEB                 db    0
.xdata$x:00007FEC                 db    0
.xdata$x:00007FED                 db    0
.xdata$x:00007FEE                 db    0
.xdata$x:00007FEF                 db    0
.xdata$x:00007FF0                 db    0
.xdata$x:00007FF1                 db    0
.xdata$x:00007FF2                 db    0
.xdata$x:00007FF3                 db    0
.xdata$x:00007FF4                 db    0
.xdata$x:00007FF5                 db    0
.xdata$x:00007FF6                 db    0
.xdata$x:00007FF7                 db    0
.xdata$x:00007FF8                 db    0
.xdata$x:00007FF9                 db    0
.xdata$x:00007FFA                 db    0
.xdata$x:00007FFB                 db    0
.xdata$x:00007FFB _xdata$x        ends
.xdata$x:00007FFB
.xdata$x:00007FFC ; ===========================================================================
.xdata$x:00007FFC
.xdata$x:00007FFC ; Segment type: Pure data
.xdata$x:00007FFC ; Segment permissions: Read
.xdata$x:00007FFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FFC                 assume cs:_xdata$x
.xdata$x:00007FFC                 ;org 7FFCh
.xdata$x:00007FFC ; COMDAT (pick associative to section at 5728)
.xdata$x:00007FFC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00007FFC                                         ; DATA XREF: .xdata$x:00008084o
.xdata$x:00007FFD                 db    0
.xdata$x:00007FFE                 db    0
.xdata$x:00007FFF                 db    0
.xdata$x:00008000                 db    0
.xdata$x:00008001                 db    0
.xdata$x:00008002                 db    0
.xdata$x:00008003                 db    0
.xdata$x:00008004                 db    0
.xdata$x:00008005                 db    0
.xdata$x:00008006                 db    0
.xdata$x:00008007                 db    0
.xdata$x:00008008                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000800C __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000800C                                         ; DATA XREF: .xdata$x:00008070o
.xdata$x:0000800D                 db    0
.xdata$x:0000800E                 db    0
.xdata$x:0000800F                 db    0
.xdata$x:00008010                 db    0
.xdata$x:00008011                 db    0
.xdata$x:00008012                 db    0
.xdata$x:00008013                 db    0
.xdata$x:00008014                 db    0
.xdata$x:00008015                 db    0
.xdata$x:00008016                 db    0
.xdata$x:00008017                 db    0
.xdata$x:00008018                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000801C __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000801C                                         ; DATA XREF: .xdata$x:00008044o
.xdata$x:0000801D                 db 0FFh
.xdata$x:0000801E                 db 0FFh
.xdata$x:0000801F                 db 0FFh
.xdata$x:00008020                 db    0
.xdata$x:00008021                 db    0
.xdata$x:00008022                 db    0
.xdata$x:00008023                 db    0
.xdata$x:00008024                 db 0FFh
.xdata$x:00008025                 db 0FFh
.xdata$x:00008026                 db 0FFh
.xdata$x:00008027                 db 0FFh
.xdata$x:00008028                 db    0
.xdata$x:00008029                 db    0
.xdata$x:0000802A                 db    0
.xdata$x:0000802B                 db    0
.xdata$x:0000802C                 db    1
.xdata$x:0000802D                 db    0
.xdata$x:0000802E                 db    0
.xdata$x:0000802F                 db    0
.xdata$x:00008030                 db    0
.xdata$x:00008031                 db    0
.xdata$x:00008032                 db    0
.xdata$x:00008033                 db    0
.xdata$x:00008034                 db    1
.xdata$x:00008035                 db    0
.xdata$x:00008036                 db    0
.xdata$x:00008037                 db    0
.xdata$x:00008038                 db    0
.xdata$x:00008039                 db    0
.xdata$x:0000803A                 db    0
.xdata$x:0000803B                 db    0
.xdata$x:0000803C __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000803C                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000803D                 db    5
.xdata$x:0000803E                 db  93h ; ô
.xdata$x:0000803F                 db  19h
.xdata$x:00008040                 db    4
.xdata$x:00008041                 db    0
.xdata$x:00008042                 db    0
.xdata$x:00008043                 db    0
.xdata$x:00008044                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00008048                 db    2
.xdata$x:00008049                 db    0
.xdata$x:0000804A                 db    0
.xdata$x:0000804B                 db    0
.xdata$x:0000804C                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00008050                 align 20h
.xdata$x:00008060 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00008060                                         ; DATA XREF: .xdata$x:0000804Co
.xdata$x:00008061                 db    0
.xdata$x:00008062                 db    0
.xdata$x:00008063                 db    0
.xdata$x:00008064                 db    2
.xdata$x:00008065                 db    0
.xdata$x:00008066                 db    0
.xdata$x:00008067                 db    0
.xdata$x:00008068                 db    3
.xdata$x:00008069                 db    0
.xdata$x:0000806A                 db    0
.xdata$x:0000806B                 db    0
.xdata$x:0000806C                 db    1
.xdata$x:0000806D                 db    0
.xdata$x:0000806E                 db    0
.xdata$x:0000806F                 db    0
.xdata$x:00008070                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00008074                 db    0
.xdata$x:00008075                 db    0
.xdata$x:00008076                 db    0
.xdata$x:00008077                 db    0
.xdata$x:00008078                 db    0
.xdata$x:00008079                 db    0
.xdata$x:0000807A                 db    0
.xdata$x:0000807B                 db    0
.xdata$x:0000807C                 db    3
.xdata$x:0000807D                 db    0
.xdata$x:0000807E                 db    0
.xdata$x:0000807F                 db    0
.xdata$x:00008080                 db    1
.xdata$x:00008081                 db    0
.xdata$x:00008082                 db    0
.xdata$x:00008083                 db    0
.xdata$x:00008084                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00008084 _xdata$x        ends
.xdata$x:00008084
.xdata$x:00008088 ; ===========================================================================
.xdata$x:00008088
.xdata$x:00008088 ; Segment type: Pure data
.xdata$x:00008088 ; Segment permissions: Read
.xdata$x:00008088 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008088                 assume cs:_xdata$x
.xdata$x:00008088                 ;org 8088h
.xdata$x:00008088 ; COMDAT (pick associative to section at 4DFC)
.xdata$x:00008088 __unwindtable$??4Style@@QAEAAU0@ABU0@@Z db 0FFh
.xdata$x:00008088                                         ; DATA XREF: .xdata$x:00008098o
.xdata$x:00008089                 db 0FFh
.xdata$x:0000808A                 db 0FFh
.xdata$x:0000808B                 db 0FFh
.xdata$x:0000808C                 dd offset __unwindfunclet$??4Style@@QAEAAU0@ABU0@@Z$0
.xdata$x:00008090 __ehfuncinfo$??4Style@@QAEAAU0@ABU0@@Z db  22h ; "
.xdata$x:00008090                                         ; DATA XREF: __ehhandler$??4Style@@QAEAAU0@ABU0@@Z+11o
.xdata$x:00008091                 db    5
.xdata$x:00008092                 db  93h ; ô
.xdata$x:00008093                 db  19h
.xdata$x:00008094                 db    1
.xdata$x:00008095                 db    0
.xdata$x:00008096                 db    0
.xdata$x:00008097                 db    0
.xdata$x:00008098                 dd offset __unwindtable$??4Style@@QAEAAU0@ABU0@@Z
.xdata$x:0000809C                 db    0
.xdata$x:0000809D                 db    0
.xdata$x:0000809E                 db    0
.xdata$x:0000809F                 db    0
.xdata$x:000080A0                 db    0
.xdata$x:000080A1                 db    0
.xdata$x:000080A2                 db    0
.xdata$x:000080A3                 db    0
.xdata$x:000080A4                 db    0
.xdata$x:000080A5                 db    0
.xdata$x:000080A6                 db    0
.xdata$x:000080A7                 db    0
.xdata$x:000080A8                 db    0
.xdata$x:000080A9                 db    0
.xdata$x:000080AA                 db    0
.xdata$x:000080AB                 db    0
.xdata$x:000080AC                 db    0
.xdata$x:000080AD                 db    0
.xdata$x:000080AE                 db    0
.xdata$x:000080AF                 db    0
.xdata$x:000080B0                 db    0
.xdata$x:000080B1                 db    0
.xdata$x:000080B2                 db    0
.xdata$x:000080B3                 db    0
.xdata$x:000080B3 _xdata$x        ends
.xdata$x:000080B3
.xdata$x:000080B4 ; ===========================================================================
.xdata$x:000080B4
.xdata$x:000080B4 ; Segment type: Pure data
.xdata$x:000080B4 ; Segment permissions: Read
.xdata$x:000080B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000080B4                 assume cs:_xdata$x
.xdata$x:000080B4                 ;org 80B4h
.xdata$x:000080B4 ; COMDAT (pick associative to section at 7700)
.xdata$x:000080B4 __unwindtable$?setKeywords@Style@@QAEXPB_W@Z db 0FFh
.xdata$x:000080B4                                         ; DATA XREF: .xdata$x:000080C4o
.xdata$x:000080B5                 db 0FFh
.xdata$x:000080B6                 db 0FFh
.xdata$x:000080B7                 db 0FFh
.xdata$x:000080B8                 dd offset __unwindfunclet$?setKeywords@Style@@QAEXPB_W@Z$0
.xdata$x:000080BC __ehfuncinfo$?setKeywords@Style@@QAEXPB_W@Z db  22h ; "
.xdata$x:000080BC                                         ; DATA XREF: __ehhandler$?setKeywords@Style@@QAEXPB_W@Z+11o
.xdata$x:000080BD                 db    5
.xdata$x:000080BE                 db  93h ; ô
.xdata$x:000080BF                 db  19h
.xdata$x:000080C0                 db    1
.xdata$x:000080C1                 db    0
.xdata$x:000080C2                 db    0
.xdata$x:000080C3                 db    0
.xdata$x:000080C4                 dd offset __unwindtable$?setKeywords@Style@@QAEXPB_W@Z
.xdata$x:000080C8                 align 20h
.xdata$x:000080C8 _xdata$x        ends
.xdata$x:000080C8
.xdata$x:000080E0 ; ===========================================================================
.xdata$x:000080E0
.xdata$x:000080E0 ; Segment type: Pure data
.xdata$x:000080E0 ; Segment permissions: Read
.xdata$x:000080E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000080E0                 assume cs:_xdata$x
.xdata$x:000080E0                 ;org 80E0h
.xdata$x:000080E0 __unwindtable$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ db 0FFh
.xdata$x:000080E0                                         ; DATA XREF: .xdata$x:00008120o
.xdata$x:000080E1                 db 0FFh
.xdata$x:000080E2                 db 0FFh
.xdata$x:000080E3                 db 0FFh
.xdata$x:000080E4                 dd offset __unwindfunclet$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ$0
.xdata$x:000080E8 __unwindtable$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:000080E8                                         ; DATA XREF: .xdata$x:00008144o
.xdata$x:000080E9                 db 0FFh
.xdata$x:000080EA                 db 0FFh
.xdata$x:000080EB                 db 0FFh
.xdata$x:000080EC                 dd offset __unwindfunclet$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:000080F0 __unwindtable$?switchToTheme@WordStyleDlg@@AAEXXZ db 0FFh
.xdata$x:000080F0                                         ; DATA XREF: .xdata$x:00008168o
.xdata$x:000080F1                 db 0FFh
.xdata$x:000080F2                 db 0FFh
.xdata$x:000080F3                 db 0FFh
.xdata$x:000080F4                 dd offset __unwindfunclet$?switchToTheme@WordStyleDlg@@AAEXXZ$0
.xdata$x:000080F8 __unwindtable$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z db 0FFh
.xdata$x:000080F8                                         ; DATA XREF: .xdata$x:0000818Co
.xdata$x:000080F9                 db 0FFh
.xdata$x:000080FA                 db 0FFh
.xdata$x:000080FB                 db 0FFh
.xdata$x:000080FC                 dd offset __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$0
.xdata$x:00008100                 db 0FFh
.xdata$x:00008101                 db 0FFh
.xdata$x:00008102                 db 0FFh
.xdata$x:00008103                 db 0FFh
.xdata$x:00008104                 dd offset __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$1
.xdata$x:00008108                 db 0FFh
.xdata$x:00008109                 db 0FFh
.xdata$x:0000810A                 db 0FFh
.xdata$x:0000810B                 db 0FFh
.xdata$x:0000810C                 dd offset __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$2
.xdata$x:00008110                 db 0FFh
.xdata$x:00008111                 db 0FFh
.xdata$x:00008112                 db 0FFh
.xdata$x:00008113                 db 0FFh
.xdata$x:00008114                 dd offset __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$3
.xdata$x:00008118 __ehfuncinfo$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ db  22h ; "
.xdata$x:00008118                                         ; DATA XREF: __ehhandler$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ+1Eo
.xdata$x:00008119                 db    5
.xdata$x:0000811A                 db  93h ; ô
.xdata$x:0000811B                 db  19h
.xdata$x:0000811C                 db    1
.xdata$x:0000811D                 db    0
.xdata$x:0000811E                 db    0
.xdata$x:0000811F                 db    0
.xdata$x:00008120                 dd offset __unwindtable$?setVisualFromStyleList@WordStyleDlg@@AAEXXZ
.xdata$x:00008124                 db    0
.xdata$x:00008125                 db    0
.xdata$x:00008126                 db    0
.xdata$x:00008127                 db    0
.xdata$x:00008128                 db    0
.xdata$x:00008129                 db    0
.xdata$x:0000812A                 db    0
.xdata$x:0000812B                 db    0
.xdata$x:0000812C                 db    0
.xdata$x:0000812D                 db    0
.xdata$x:0000812E                 db    0
.xdata$x:0000812F                 db    0
.xdata$x:00008130                 db    0
.xdata$x:00008131                 db    0
.xdata$x:00008132                 db    0
.xdata$x:00008133                 db    0
.xdata$x:00008134                 db    0
.xdata$x:00008135                 db    0
.xdata$x:00008136                 db    0
.xdata$x:00008137                 db    0
.xdata$x:00008138                 db    0
.xdata$x:00008139                 db    0
.xdata$x:0000813A                 db    0
.xdata$x:0000813B                 db    0
.xdata$x:0000813C __ehfuncinfo$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:0000813C                                         ; DATA XREF: __ehhandler$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:0000813D                 db    5
.xdata$x:0000813E                 db  93h ; ô
.xdata$x:0000813F                 db  19h
.xdata$x:00008140                 db    1
.xdata$x:00008141                 db    0
.xdata$x:00008142                 db    0
.xdata$x:00008143                 db    0
.xdata$x:00008144                 dd offset __unwindtable$?updateThemeName@WordStyleDlg@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:00008148                 align 20h
.xdata$x:00008160 __ehfuncinfo$?switchToTheme@WordStyleDlg@@AAEXXZ db  22h ; "
.xdata$x:00008160                                         ; DATA XREF: __ehhandler$?switchToTheme@WordStyleDlg@@AAEXXZ+1Eo
.xdata$x:00008161                 db    5
.xdata$x:00008162                 db  93h ; ô
.xdata$x:00008163                 db  19h
.xdata$x:00008164                 db    1
.xdata$x:00008165                 db    0
.xdata$x:00008166                 db    0
.xdata$x:00008167                 db    0
.xdata$x:00008168                 dd offset __unwindtable$?switchToTheme@WordStyleDlg@@AAEXXZ
.xdata$x:0000816C                 db    0
.xdata$x:0000816D                 db    0
.xdata$x:0000816E                 db    0
.xdata$x:0000816F                 db    0
.xdata$x:00008170                 db    0
.xdata$x:00008171                 db    0
.xdata$x:00008172                 db    0
.xdata$x:00008173                 db    0
.xdata$x:00008174                 db    0
.xdata$x:00008175                 db    0
.xdata$x:00008176                 db    0
.xdata$x:00008177                 db    0
.xdata$x:00008178                 db    0
.xdata$x:00008179                 db    0
.xdata$x:0000817A                 db    0
.xdata$x:0000817B                 db    0
.xdata$x:0000817C                 db    0
.xdata$x:0000817D                 db    0
.xdata$x:0000817E                 db    0
.xdata$x:0000817F                 db    0
.xdata$x:00008180                 db    0
.xdata$x:00008181                 db    0
.xdata$x:00008182                 db    0
.xdata$x:00008183                 db    0
.xdata$x:00008184 __ehfuncinfo$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z db  22h ; "
.xdata$x:00008184                                         ; DATA XREF: __ehhandler$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z+1Eo
.xdata$x:00008185                 db    5
.xdata$x:00008186                 db  93h ; ô
.xdata$x:00008187                 db  19h
.xdata$x:00008188                 db    4
.xdata$x:00008189                 db    0
.xdata$x:0000818A                 db    0
.xdata$x:0000818B                 db    0
.xdata$x:0000818C                 dd offset __unwindtable$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z
.xdata$x:00008190                 db    0
.xdata$x:00008191                 db    0
.xdata$x:00008192                 db    0
.xdata$x:00008193                 db    0
.xdata$x:00008194                 db    0
.xdata$x:00008195                 db    0
.xdata$x:00008196                 db    0
.xdata$x:00008197                 db    0
.xdata$x:00008198                 db    0
.xdata$x:00008199                 db    0
.xdata$x:0000819A                 db    0
.xdata$x:0000819B                 db    0
.xdata$x:0000819C                 db    0
.xdata$x:0000819D                 db    0
.xdata$x:0000819E                 db    0
.xdata$x:0000819F                 db    0
.xdata$x:000081A0                 db    0
.xdata$x:000081A1                 db    0
.xdata$x:000081A2                 db    0
.xdata$x:000081A3                 db    0
.xdata$x:000081A4                 db    0
.xdata$x:000081A5                 db    0
.xdata$x:000081A6                 db    0
.xdata$x:000081A7                 db    0
.xdata$x:000081A7 _xdata$x        ends
.xdata$x:000081A7
.xdata$x:000081A8 ; ===========================================================================
.xdata$x:000081A8
.xdata$x:000081A8 ; Segment type: Pure data
.xdata$x:000081A8 ; Segment permissions: Read
.xdata$x:000081A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000081A8                 assume cs:_xdata$x
.xdata$x:000081A8                 ;org 81A8h
.xdata$x:000081A8 ; COMDAT (pick associative to section at 3EFC)
.xdata$x:000081A8 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:000081A8                                         ; DATA XREF: .xdata$x:000081B8o
.xdata$x:000081A9                 db 0FFh
.xdata$x:000081AA                 db 0FFh
.xdata$x:000081AB                 db 0FFh
.xdata$x:000081AC                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:000081B0 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:000081B0                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:000081B1                 db    5
.xdata$x:000081B2                 db  93h ; ô
.xdata$x:000081B3                 db  19h
.xdata$x:000081B4                 db    1
.xdata$x:000081B5                 db    0
.xdata$x:000081B6                 db    0
.xdata$x:000081B7                 db    0
.xdata$x:000081B8                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:000081BC                 db    0
.xdata$x:000081BD                 db    0
.xdata$x:000081BE                 db    0
.xdata$x:000081BF                 db    0
.xdata$x:000081C0                 db    0
.xdata$x:000081C1                 db    0
.xdata$x:000081C2                 db    0
.xdata$x:000081C3                 db    0
.xdata$x:000081C4                 db    0
.xdata$x:000081C5                 db    0
.xdata$x:000081C6                 db    0
.xdata$x:000081C7                 db    0
.xdata$x:000081C8                 db    0
.xdata$x:000081C9                 db    0
.xdata$x:000081CA                 db    0
.xdata$x:000081CB                 db    0
.xdata$x:000081CC                 db    0
.xdata$x:000081CD                 db    0
.xdata$x:000081CE                 db    0
.xdata$x:000081CF                 db    0
.xdata$x:000081D0                 db    0
.xdata$x:000081D1                 db    0
.xdata$x:000081D2                 db    0
.xdata$x:000081D3                 db    0
.xdata$x:000081D3 _xdata$x        ends
.xdata$x:000081D3
.xdata$x:000081D4 ; ===========================================================================
.xdata$x:000081D4
.xdata$x:000081D4 ; Segment type: Pure data
.xdata$x:000081D4 ; Segment permissions: Read
.xdata$x:000081D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000081D4                 assume cs:_xdata$x
.xdata$x:000081D4                 ;org 81D4h
.xdata$x:000081D4 ; COMDAT (pick associative to section at 3D28)
.xdata$x:000081D4 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:000081D4                                         ; DATA XREF: .xdata$x:000081E4o
.xdata$x:000081D5                 db 0FFh
.xdata$x:000081D6                 db 0FFh
.xdata$x:000081D7                 db 0FFh
.xdata$x:000081D8                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:000081DC __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:000081DC                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:000081DD                 db    5
.xdata$x:000081DE                 db  93h ; ô
.xdata$x:000081DF                 db  19h
.xdata$x:000081E0                 db    1
.xdata$x:000081E1                 db    0
.xdata$x:000081E2                 db    0
.xdata$x:000081E3                 db    0
.xdata$x:000081E4                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:000081E8                 align 20h
.xdata$x:000081E8 _xdata$x        ends
.xdata$x:000081E8
.xdata$x:00008200 ; ===========================================================================
.xdata$x:00008200
.xdata$x:00008200 ; Segment type: Pure data
.xdata$x:00008200 ; Segment permissions: Read
.xdata$x:00008200 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008200                 assume cs:_xdata$x
.xdata$x:00008200                 ;org 8200h
.xdata$x:00008200 ; COMDAT (pick associative to section at 3E28)
.xdata$x:00008200 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00008200                                         ; DATA XREF: .xdata$x:00008210o
.xdata$x:00008201                 db 0FFh
.xdata$x:00008202                 db 0FFh
.xdata$x:00008203                 db 0FFh
.xdata$x:00008204                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00008208 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00008208                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00008209                 db    5
.xdata$x:0000820A                 db  93h ; ô
.xdata$x:0000820B                 db  19h
.xdata$x:0000820C                 db    1
.xdata$x:0000820D                 db    0
.xdata$x:0000820E                 db    0
.xdata$x:0000820F                 db    0
.xdata$x:00008210                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00008214                 db    0
.xdata$x:00008215                 db    0
.xdata$x:00008216                 db    0
.xdata$x:00008217                 db    0
.xdata$x:00008218                 db    0
.xdata$x:00008219                 db    0
.xdata$x:0000821A                 db    0
.xdata$x:0000821B                 db    0
.xdata$x:0000821C                 db    0
.xdata$x:0000821D                 db    0
.xdata$x:0000821E                 db    0
.xdata$x:0000821F                 db    0
.xdata$x:00008220                 db    0
.xdata$x:00008221                 db    0
.xdata$x:00008222                 db    0
.xdata$x:00008223                 db    0
.xdata$x:00008224                 db    0
.xdata$x:00008225                 db    0
.xdata$x:00008226                 db    0
.xdata$x:00008227                 db    0
.xdata$x:00008228                 db    0
.xdata$x:00008229                 db    0
.xdata$x:0000822A                 db    0
.xdata$x:0000822B                 db    0
.xdata$x:0000822B _xdata$x        ends
.xdata$x:0000822B
.rdata:0000822C ; ===========================================================================
.rdata:0000822C
.rdata:0000822C ; Segment type: Pure data
.rdata:0000822C ; Segment permissions: Read
.rdata:0000822C _rdata          segment dword public 'DATA' use32
.rdata:0000822C                 assume cs:_rdata
.rdata:0000822C                 ;org 822Ch
.rdata:0000822C ; COMDAT (pick largest)
.rdata:0000822C                 dd offset ??_R4Window@@6B@ ; const Window::`RTTI Complete Object Locator'
.rdata:00008230                 public ??_7Window@@6B@
.rdata:00008230 ; const Window::`vftable'
.rdata:00008230 ??_7Window@@6B@ dd offset ??_EWindow@@UAEPAXI@Z
.rdata:00008230                                         ; DATA XREF: Window::Window(void)+Ao
.rdata:00008230                                         ; Window::~Window(void)+Ao
.rdata:00008230                                         ; Window::`vector deleting destructor'(uint)
.rdata:00008234                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:00008238                 dd offset __purecall
.rdata:0000823C                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:00008240                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:00008244                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:00008248                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000824C                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:00008250                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:00008254                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:00008258                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000825C                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000825C _rdata          ends
.rdata:0000825C
.rdata:00008260 ; ===========================================================================
.rdata:00008260
.rdata:00008260 ; Segment type: Pure data
.rdata:00008260 ; Segment permissions: Read
.rdata:00008260 _rdata          segment dword public 'DATA' use32
.rdata:00008260                 assume cs:_rdata
.rdata:00008260                 ;org 8260h
.rdata:00008260 ; COMDAT (pick largest)
.rdata:00008260                 dd offset ??_R4ColourPicker@@6B@ ; const ColourPicker::`RTTI Complete Object Locator'
.rdata:00008264                 public ??_7ColourPicker@@6B@
.rdata:00008264 ; const ColourPicker::`vftable'
.rdata:00008264 ??_7ColourPicker@@6B@ dd offset ??_EColourPicker@@UAEPAXI@Z
.rdata:00008264                                         ; DATA XREF: ColourPicker::ColourPicker(void)+38o
.rdata:00008264                                         ; ColourPicker::~ColourPicker(void)+29o
.rdata:00008264                                         ; ColourPicker::`vector deleting destructor'(uint)
.rdata:00008268                 dd offset ?init@ColourPicker@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; ColourPicker::init(HINSTANCE__ *,HWND__ *)
.rdata:0000826C                 dd offset ?destroy@ColourPicker@@UAEXXZ ; ColourPicker::destroy(void)
.rdata:00008270                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:00008274                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:00008278                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000827C                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:00008280                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:00008284                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:00008288                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000828C                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:00008290                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:00008290 _rdata          ends
.rdata:00008290
.bss:00008294 ; ===========================================================================
.bss:00008294
.bss:00008294 ; Segment type: Uninitialized
.bss:00008294 ; Segment permissions: Read/Write
.bss:00008294 _bss            segment byte public 'BSS' use32
.bss:00008294                 assume cs:_bss
.bss:00008294                 ;org 8294h
.bss:00008294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008294 __Tuple_alloc   db    ? ;
.bss:00008295 ; std::_Ignore ignore
.bss:00008295 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00008296 _allocator_arg  db    ? ;
.bss:00008297 _piecewise_construct db    ? ;
.bss:00008297 _bss            ends
.bss:00008297
.rdata:00008298 ; ===========================================================================
.rdata:00008298
.rdata:00008298 ; Segment type: Pure data
.rdata:00008298 ; Segment permissions: Read
.rdata:00008298 _rdata          segment dword public 'DATA' use32
.rdata:00008298                 assume cs:_rdata
.rdata:00008298                 ;org 8298h
.rdata:00008298 ; COMDAT (pick largest)
.rdata:00008298                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000829C                 public ??_7error_category@std@@6B@
.rdata:0000829C ; const std::error_category::`vftable'
.rdata:0000829C ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000829C                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000829C                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000829C                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:000082A0                 dd offset __purecall
.rdata:000082A4                 dd offset __purecall
.rdata:000082A8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:000082AC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:000082B0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:000082B0 _rdata          ends
.rdata:000082B0
.rdata:000082B4 ; ===========================================================================
.rdata:000082B4
.rdata:000082B4 ; Segment type: Pure data
.rdata:000082B4 ; Segment permissions: Read
.rdata:000082B4 _rdata          segment dword public 'DATA' use32
.rdata:000082B4                 assume cs:_rdata
.rdata:000082B4                 ;org 82B4h
.rdata:000082B4 ; COMDAT (pick largest)
.rdata:000082B4                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:000082B8                 public ??_7_Generic_error_category@std@@6B@
.rdata:000082B8 ; const std::_Generic_error_category::`vftable'
.rdata:000082B8 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:000082B8                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:000082B8                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:000082BC                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:000082C0                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:000082C4                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:000082C8                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:000082CC                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:000082CC _rdata          ends
.rdata:000082CC
.rdata:000082D0 ; ===========================================================================
.rdata:000082D0
.rdata:000082D0 ; Segment type: Pure data
.rdata:000082D0 ; Segment permissions: Read
.rdata:000082D0 _rdata          segment dword public 'DATA' use32
.rdata:000082D0                 assume cs:_rdata
.rdata:000082D0                 ;org 82D0h
.rdata:000082D0 ; COMDAT (pick any)
.rdata:000082D0                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:000082D0 ; `string'
.rdata:000082D0 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:000082D0                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:000082D0 _rdata          ends
.rdata:000082D0
.rdata:000082D8 ; ===========================================================================
.rdata:000082D8
.rdata:000082D8 ; Segment type: Pure data
.rdata:000082D8 ; Segment permissions: Read
.rdata:000082D8 _rdata          segment dword public 'DATA' use32
.rdata:000082D8                 assume cs:_rdata
.rdata:000082D8                 ;org 82D8h
.rdata:000082D8 ; COMDAT (pick any)
.rdata:000082D8                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:000082D8 ; `string'
.rdata:000082D8 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:000082D8                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_7260o
.rdata:000082D8                                         ; std::_System_error_category::message(int):loc_73DCo
.rdata:000082E6                 align 4
.rdata:000082E6 _rdata          ends
.rdata:000082E6
.rdata:000082E8 ; ===========================================================================
.rdata:000082E8
.rdata:000082E8 ; Segment type: Pure data
.rdata:000082E8 ; Segment permissions: Read
.rdata:000082E8 _rdata          segment dword public 'DATA' use32
.rdata:000082E8                 assume cs:_rdata
.rdata:000082E8                 ;org 82E8h
.rdata:000082E8 ; COMDAT (pick largest)
.rdata:000082E8                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:000082EC                 public ??_7_Iostream_error_category@std@@6B@
.rdata:000082EC ; const std::_Iostream_error_category::`vftable'
.rdata:000082EC ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:000082EC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:000082EC                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:000082F0                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:000082F4                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:000082F8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:000082FC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008300                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008300 _rdata          ends
.rdata:00008300
.rdata:00008304 ; ===========================================================================
.rdata:00008304
.rdata:00008304 ; Segment type: Pure data
.rdata:00008304 ; Segment permissions: Read
.rdata:00008304 _rdata          segment dword public 'DATA' use32
.rdata:00008304                 assume cs:_rdata
.rdata:00008304                 ;org 8304h
.rdata:00008304 ; COMDAT (pick any)
.rdata:00008304                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00008304 ; `string'
.rdata:00008304 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00008304                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000830D                 align 10h
.rdata:0000830D _rdata          ends
.rdata:0000830D
.rdata:00008310 ; ===========================================================================
.rdata:00008310
.rdata:00008310 ; Segment type: Pure data
.rdata:00008310 ; Segment permissions: Read
.rdata:00008310 _rdata          segment dword public 'DATA' use32
.rdata:00008310                 assume cs:_rdata
.rdata:00008310                 ;org 8310h
.rdata:00008310 ; COMDAT (pick any)
.rdata:00008310                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00008310 ; char `string'[]
.rdata:00008310 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00008310                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:00008326                 align 4
.rdata:00008326 _rdata          ends
.rdata:00008326
.rdata:00008328 ; ===========================================================================
.rdata:00008328
.rdata:00008328 ; Segment type: Pure data
.rdata:00008328 ; Segment permissions: Read
.rdata:00008328 _rdata          segment dword public 'DATA' use32
.rdata:00008328                 assume cs:_rdata
.rdata:00008328                 ;org 8328h
.rdata:00008328 ; COMDAT (pick largest)
.rdata:00008328                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000832C                 public ??_7_System_error_category@std@@6B@
.rdata:0000832C ; const std::_System_error_category::`vftable'
.rdata:0000832C ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000832C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000832C                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00008330                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00008334                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00008338                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000833C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008340                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008340 _rdata          ends
.rdata:00008340
.rdata:00008344 ; ===========================================================================
.rdata:00008344
.rdata:00008344 ; Segment type: Pure data
.rdata:00008344 ; Segment permissions: Read
.rdata:00008344 _rdata          segment dword public 'DATA' use32
.rdata:00008344                 assume cs:_rdata
.rdata:00008344                 ;org 8344h
.rdata:00008344 ; COMDAT (pick any)
.rdata:00008344                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:00008344 ; `string'
.rdata:00008344 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:00008344                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000834B                 align 4
.rdata:0000834B _rdata          ends
.rdata:0000834B
.bss:0000834C ; ===========================================================================
.bss:0000834C
.bss:0000834C ; Segment type: Uninitialized
.bss:0000834C ; Segment permissions: Read/Write
.bss:0000834C _bss            segment dword public 'BSS' use32
.bss:0000834C                 assume cs:_bss
.bss:0000834C                 ;org 834Ch
.bss:0000834C ; COMDAT (pick any)
.bss:0000834C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000834C                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000834C ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000834C ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000834C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000834C                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000834D                 db    ? ;
.bss:0000834E                 db    ? ;
.bss:0000834F                 db    ? ;
.bss:0000834F _bss            ends
.bss:0000834F
.bss:00008350 ; ===========================================================================
.bss:00008350
.bss:00008350 ; Segment type: Uninitialized
.bss:00008350 ; Segment permissions: Read/Write
.bss:00008350 _bss            segment dword public 'BSS' use32
.bss:00008350                 assume cs:_bss
.bss:00008350                 ;org 8350h
.bss:00008350 ; COMDAT (pick any)
.bss:00008350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008350                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:00008350 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:00008350 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:00008350                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00008350                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00008351                 db    ? ;
.bss:00008352                 db    ? ;
.bss:00008353                 db    ? ;
.bss:00008353 _bss            ends
.bss:00008353
.bss:00008354 ; ===========================================================================
.bss:00008354
.bss:00008354 ; Segment type: Uninitialized
.bss:00008354 ; Segment permissions: Read/Write
.bss:00008354 _bss            segment dword public 'BSS' use32
.bss:00008354                 assume cs:_bss
.bss:00008354                 ;org 8354h
.bss:00008354 ; COMDAT (pick any)
.bss:00008354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008354                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:00008354 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:00008354 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:00008354                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:00008354                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:00008355                 db    ? ;
.bss:00008356                 db    ? ;
.bss:00008357                 db    ? ;
.bss:00008357 _bss            ends
.bss:00008357
.rdata:00008358 ; ===========================================================================
.rdata:00008358
.rdata:00008358 ; Segment type: Pure data
.rdata:00008358 ; Segment permissions: Read
.rdata:00008358 _rdata          segment dword public 'DATA' use32
.rdata:00008358                 assume cs:_rdata
.rdata:00008358                 ;org 8358h
.rdata:00008358 ; COMDAT (pick any)
.rdata:00008358                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:00008358 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:00008358 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:00008358                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:00008358                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+3Dr ...
.rdata:00008358 _rdata          ends
.rdata:00008358
.bss:0000835C ; ===========================================================================
.bss:0000835C
.bss:0000835C ; Segment type: Uninitialized
.bss:0000835C ; Segment permissions: Read/Write
.bss:0000835C _bss            segment dword public 'BSS' use32
.bss:0000835C                 assume cs:_bss
.bss:0000835C                 ;org 835Ch
.bss:0000835C ; COMDAT (pick any)
.bss:0000835C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000835C                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000835C ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000835C ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000835C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000835D                 db    ? ;
.bss:0000835E                 db    ? ;
.bss:0000835F                 db    ? ;
.bss:0000835F _bss            ends
.bss:0000835F
.bss:00008360 ; ===========================================================================
.bss:00008360
.bss:00008360 ; Segment type: Uninitialized
.bss:00008360 ; Segment permissions: Read/Write
.bss:00008360 _bss            segment dword public 'BSS' use32
.bss:00008360                 assume cs:_bss
.bss:00008360                 ;org 8360h
.bss:00008360 ; COMDAT (pick any)
.bss:00008360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008360                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00008360 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:00008360 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00008360                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:00008361                 db    ? ;
.bss:00008362                 db    ? ;
.bss:00008363                 db    ? ;
.bss:00008363 _bss            ends
.bss:00008363
.rdata:00008364 ; ===========================================================================
.rdata:00008364
.rdata:00008364 ; Segment type: Pure data
.rdata:00008364 ; Segment permissions: Read
.rdata:00008364 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008364 _rdata          segment para public 'DATA' use32
.rdata:00008364                 assume cs:_rdata
.rdata:00008364                 ;org 8364h
.rdata:00008364 ; COMDAT (pick any)
.rdata:00008364                 public ??_C@_1II@FPBMCJJL@?$AAC?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
.rdata:00008364 ; wchar_t `string'
.rdata:00008364 ??_C@_1II@FPBMCJJL@?$AAC?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@:
.rdata:00008364                                         ; DATA XREF: StyleArray::getStyler(int)+18o
.rdata:00008364                 unicode 0, <C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\src\Pa>
.rdata:00008364                 unicode 0, <rameters.h>,0
.rdata:00008364 _rdata          ends
.rdata:00008364
.rdata:000083EC ; ===========================================================================
.rdata:000083EC
.rdata:000083EC ; Segment type: Pure data
.rdata:000083EC ; Segment permissions: Read
.rdata:000083EC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000083EC _rdata          segment para public 'DATA' use32
.rdata:000083EC                 assume cs:_rdata
.rdata:000083EC                 ;org 83ECh
.rdata:000083EC ; COMDAT (pick any)
.rdata:000083EC                 public ??_C@_1FG@JDMMPFCP@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAS?$AAC?$AAE?$AA_?$AAS?$AAT?$AAY?$AAL?$AAE?$AA_@
.rdata:000083EC ; wchar_t `string'
.rdata:000083EC ??_C@_1FG@JDMMPFCP@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAS?$AAC?$AAE?$AA_?$AAS?$AAT?$AAY?$AAL?$AAE?$AA_@:
.rdata:000083EC                                         ; DATA XREF: StyleArray::getStyler(int)+1Do
.rdata:000083EC                 unicode 0, <index >
.rdata:000083EC                 dw 3Eh
.rdata:000083EC                 unicode 0, <= 0 && index >
.rdata:000083EC                 dw 3Ch
.rdata:000083EC                 unicode 0, < SCE_STYLE_ARRAY_SIZE>,0
.rdata:00008442                 align 4
.rdata:00008442 _rdata          ends
.rdata:00008442
.rdata:00008444 ; ===========================================================================
.rdata:00008444
.rdata:00008444 ; Segment type: Pure data
.rdata:00008444 ; Segment permissions: Read
.rdata:00008444 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008444 _rdata          segment para public 'DATA' use32
.rdata:00008444                 assume cs:_rdata
.rdata:00008444                 ;org 8444h
.rdata:00008444 ; COMDAT (pick any)
.rdata:00008444                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00008444 ; wchar_t `string'
.rdata:00008444 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00008444                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+17o
.rdata:00008444                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+Co ...
.rdata:00008444                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00008444                 unicode 0, <clude\xstring>,0
.rdata:000084D2                 align 4
.rdata:000084D2 _rdata          ends
.rdata:000084D2
.rdata:000084D4 ; ===========================================================================
.rdata:000084D4
.rdata:000084D4 ; Segment type: Pure data
.rdata:000084D4 ; Segment permissions: Read
.rdata:000084D4 _rdata          segment dword public 'DATA' use32
.rdata:000084D4                 assume cs:_rdata
.rdata:000084D4                 ;org 84D4h
.rdata:000084D4 ; COMDAT (pick any)
.rdata:000084D4                 public ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:000084D4 ; wchar_t `string'
.rdata:000084D4 ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:000084D4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+1Co
.rdata:000084D4                 unicode 0, <string subscript out of range>,0
.rdata:000084D4 _rdata          ends
.rdata:000084D4
.bss:00008510 ; ===========================================================================
.bss:00008510
.bss:00008510 ; Segment type: Uninitialized
.bss:00008510 ; Segment permissions: Read/Write
.bss:00008510 _bss            segment dword public 'BSS' use32
.bss:00008510                 assume cs:_bss
.bss:00008510                 ;org 8510h
.bss:00008510 ; COMDAT (pick any)
.bss:00008510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008510                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:00008510 ; std::locale::id std::numpunct<char>::id
.bss:00008510 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:00008510                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:00008511                 db    ? ;
.bss:00008512                 db    ? ;
.bss:00008513                 db    ? ;
.bss:00008513 _bss            ends
.bss:00008513
.bss:00008514 ; ===========================================================================
.bss:00008514
.bss:00008514 ; Segment type: Uninitialized
.bss:00008514 ; Segment permissions: Read/Write
.bss:00008514 _bss            segment dword public 'BSS' use32
.bss:00008514                 assume cs:_bss
.bss:00008514                 ;org 8514h
.bss:00008514 ; COMDAT (pick any)
.bss:00008514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008514                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00008514 ; std::locale::id std::numpunct<wchar_t>::id
.bss:00008514 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00008514                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00008515                 db    ? ;
.bss:00008516                 db    ? ;
.bss:00008517                 db    ? ;
.bss:00008517 _bss            ends
.bss:00008517
.rdata:00008518 ; ===========================================================================
.rdata:00008518
.rdata:00008518 ; Segment type: Pure data
.rdata:00008518 ; Segment permissions: Read
.rdata:00008518 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008518 _rdata          segment para public 'DATA' use32
.rdata:00008518                 assume cs:_rdata
.rdata:00008518                 ;org 8518h
.rdata:00008518 ; COMDAT (pick any)
.rdata:00008518                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00008518 ; wchar_t `string'
.rdata:00008518 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00008518                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+19o
.rdata:00008518                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+49o ...
.rdata:00008518                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00008518                 unicode 0, <clude\vector>,0
.rdata:00008518 _rdata          ends
.rdata:00008518
.rdata:000085A4 ; ===========================================================================
.rdata:000085A4
.rdata:000085A4 ; Segment type: Pure data
.rdata:000085A4 ; Segment permissions: Read
.rdata:000085A4 _rdata          segment dword public 'DATA' use32
.rdata:000085A4                 assume cs:_rdata
.rdata:000085A4                 ;org 85A4h
.rdata:000085A4 ; COMDAT (pick any)
.rdata:000085A4                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:000085A4 ; wchar_t `string'
.rdata:000085A4 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:000085A4                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+1Eo
.rdata:000085A4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+1Eo
.rdata:000085A4                 unicode 0, <vector subscript out of range>,0
.rdata:000085A4 _rdata          ends
.rdata:000085A4
.rdata:000085E0 ; ===========================================================================
.rdata:000085E0
.rdata:000085E0 ; Segment type: Pure data
.rdata:000085E0 ; Segment permissions: Read
.rdata:000085E0 _rdata          segment dword public 'DATA' use32
.rdata:000085E0                 assume cs:_rdata
.rdata:000085E0                 ;org 85E0h
.rdata:000085E0 ; COMDAT (pick any)
.rdata:000085E0                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:000085E0 ; `string'
.rdata:000085E0 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:000085E0                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+2Bo
.rdata:000085E0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+2Bo
.rdata:000085E0 _rdata          ends
.rdata:000085E0
.rdata:00008604 ; ===========================================================================
.rdata:00008604
.rdata:00008604 ; Segment type: Pure data
.rdata:00008604 ; Segment permissions: Read
.rdata:00008604 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008604 _rdata          segment para public 'DATA' use32
.rdata:00008604                 assume cs:_rdata
.rdata:00008604                 ;org 8604h
.rdata:00008604 ; COMDAT (pick any)
.rdata:00008604                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:00008604 ; `string'
.rdata:00008604 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:00008604                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint):loc_5114o
.rdata:00008604                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint):loc_51A0o
.rdata:00008604                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000865A                 align 4
.rdata:0000865A _rdata          ends
.rdata:0000865A
.rdata:0000865C ; ===========================================================================
.rdata:0000865C
.rdata:0000865C ; Segment type: Pure data
.rdata:0000865C ; Segment permissions: Read
.rdata:0000865C _rdata          segment dword public 'DATA' use32
.rdata:0000865C                 assume cs:_rdata
.rdata:0000865C                 ;org 865Ch
.rdata:0000865C ; COMDAT (pick any)
.rdata:0000865C                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000865C ; `string'
.rdata:0000865C ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000865C                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+3Do
.rdata:0000865C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+3Do
.rdata:0000865C                 unicode 0, <%s>,0
.rdata:00008662                 align 4
.rdata:00008662 _rdata          ends
.rdata:00008662
.rdata:00008664 ; ===========================================================================
.rdata:00008664
.rdata:00008664 ; Segment type: Pure data
.rdata:00008664 ; Segment permissions: Read
.rdata:00008664 _rdata          segment dword public 'DATA' use32
.rdata:00008664                 assume cs:_rdata
.rdata:00008664                 ;org 8664h
.rdata:00008664 ; COMDAT (pick any)
.rdata:00008664                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:00008664 ; `string'
.rdata:00008664 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:00008664                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+6Fo
.rdata:00008664                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Fo
.rdata:00008664                 unicode 0, <"out of range">,0
.rdata:00008682                 align 4
.rdata:00008682 _rdata          ends
.rdata:00008682
.rdata:00008684 ; ===========================================================================
.rdata:00008684
.rdata:00008684 ; Segment type: Pure data
.rdata:00008684 ; Segment permissions: Read
.rdata:00008684 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008684 _rdata          segment para public 'DATA' use32
.rdata:00008684                 assume cs:_rdata
.rdata:00008684                 ;org 8684h
.rdata:00008684 ; COMDAT (pick any)
.rdata:00008684                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:00008684 ; `string'
.rdata:00008684 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:00008684                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:00008684                 unicode 0, <std::vector>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <class std::basic_string>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t>
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, <,class std::allocator>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t>
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, < >
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, <,class std::allocator>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <class std::basic_string>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t>
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, <,class std::allocator>
.rdata:00008684                 dw 3Ch
.rdata:00008684                 unicode 0, <wchar_t>
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, < >
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, < >
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, < >
.rdata:00008684                 dw 3Eh
.rdata:00008684                 unicode 0, <::operator []>,0
.rdata:00008684 _rdata          ends
.rdata:00008684
.rdata:0000886C ; ===========================================================================
.rdata:0000886C
.rdata:0000886C ; Segment type: Pure data
.rdata:0000886C ; Segment permissions: Read
.rdata:0000886C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000886C _rdata          segment para public 'DATA' use32
.rdata:0000886C                 assume cs:_rdata
.rdata:0000886C                 ;org 886Ch
.rdata:0000886C ; COMDAT (pick any)
.rdata:0000886C                 public ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
.rdata:0000886C ; `string'
.rdata:0000886C ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@:
.rdata:0000886C                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+6Ao
.rdata:0000886C                 unicode 0, <std::vector>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <struct std::pair>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <class std::basic_string>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::allocator>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::basic_string>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::allocator>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::allocator>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <struct std::pair>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <class std::basic_string>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::allocator>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::basic_string>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <,class std::allocator>
.rdata:0000886C                 dw 3Ch
.rdata:0000886C                 unicode 0, <wchar_t>
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, < >
.rdata:0000886C                 dw 3Eh
.rdata:0000886C                 unicode 0, <::operator []>,0
.rdata:0000886C _rdata          ends
.rdata:0000886C
.rdata:00008C24 ; ===========================================================================
.rdata:00008C24
.rdata:00008C24 ; Segment type: Pure data
.rdata:00008C24 ; Segment permissions: Read
.rdata:00008C24 _rdata          segment dword public 'DATA' use32
.rdata:00008C24                 assume cs:_rdata
.rdata:00008C24                 ;org 8C24h
.rdata:00008C24 ; COMDAT (pick any)
.rdata:00008C24                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:00008C24 ; char `string'[]
.rdata:00008C24 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:00008C24                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:00008C24                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:00008C24 _rdata          ends
.rdata:00008C24
.rdata:00008C34 ; ===========================================================================
.rdata:00008C34
.rdata:00008C34 ; Segment type: Pure data
.rdata:00008C34 ; Segment permissions: Read
.rdata:00008C34 _rdata          segment dword public 'DATA' use32
.rdata:00008C34                 assume cs:_rdata
.rdata:00008C34                 ;org 8C34h
.rdata:00008C34 ; COMDAT (pick any)
.rdata:00008C34                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:00008C34 ; char `string'[]
.rdata:00008C34 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:00008C34                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:00008C34                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:00008C34 _rdata          ends
.rdata:00008C34
.rdata:00008C4C ; ===========================================================================
.rdata:00008C4C
.rdata:00008C4C ; Segment type: Pure data
.rdata:00008C4C ; Segment permissions: Read
.rdata:00008C4C _rdata          segment dword public 'DATA' use32
.rdata:00008C4C                 assume cs:_rdata
.rdata:00008C4C                 ;org 8C4Ch
.rdata:00008C4C ; COMDAT (pick any)
.rdata:00008C4C                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00008C4C ; wchar_t `string'
.rdata:00008C4C ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00008C4C                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:00008C4C                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+11o
.rdata:00008C4C                 unicode 0, <invalid null pointer>,0
.rdata:00008C76                 align 4
.rdata:00008C76 _rdata          ends
.rdata:00008C76
.rdata$r:00008C78 ; ===========================================================================
.rdata$r:00008C78
.rdata$r:00008C78 ; Segment type: Pure data
.rdata$r:00008C78 ; Segment permissions: Read
.rdata$r:00008C78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008C78                 assume cs:_rdata$r
.rdata$r:00008C78                 ;org 8C78h
.rdata$r:00008C78 ; COMDAT (pick any)
.rdata$r:00008C78                 public ??_R4Window@@6B@
.rdata$r:00008C78 ; const Window::`RTTI Complete Object Locator'
.rdata$r:00008C78 ??_R4Window@@6B@ db    0                ; DATA XREF: .rdata:0000822Co
.rdata$r:00008C79                 db    0
.rdata$r:00008C7A                 db    0
.rdata$r:00008C7B                 db    0
.rdata$r:00008C7C                 db    0
.rdata$r:00008C7D                 db    0
.rdata$r:00008C7E                 db    0
.rdata$r:00008C7F                 db    0
.rdata$r:00008C80                 db    0
.rdata$r:00008C81                 db    0
.rdata$r:00008C82                 db    0
.rdata$r:00008C83                 db    0
.rdata$r:00008C84                 dd offset ??_R0?AVWindow@@@8 ; Window `RTTI Type Descriptor'
.rdata$r:00008C88                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008C88 _rdata$r        ends
.rdata$r:00008C88
.data$r:00008C8C ; ===========================================================================
.data$r:00008C8C
.data$r:00008C8C ; Segment type: Pure data
.data$r:00008C8C ; Segment permissions: Read/Write
.data$r:00008C8C _data$r         segment dword public 'DATA' use32
.data$r:00008C8C                 assume cs:_data$r
.data$r:00008C8C                 ;org 8C8Ch
.data$r:00008C8C ; COMDAT (pick any)
.data$r:00008C8C                 public ??_R0?AVWindow@@@8
.data$r:00008C8C ; class Window `RTTI Type Descriptor'
.data$r:00008C8C ??_R0?AVWindow@@@8 dd offset ??_7type_info@@6B@
.data$r:00008C8C                                         ; DATA XREF: .rdata$r:00008C84o
.data$r:00008C8C                                         ; .rdata$r:Window::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008C8C                                         ; const type_info::`vftable'
.data$r:00008C90                 db    0
.data$r:00008C91                 db    0
.data$r:00008C92                 db    0
.data$r:00008C93                 db    0
.data$r:00008C94                 db  2Eh ; .
.data$r:00008C95                 db  3Fh ; ?
.data$r:00008C96                 db  41h ; A
.data$r:00008C97                 db  56h ; V
.data$r:00008C98                 db  57h ; W
.data$r:00008C99                 db  69h ; i
.data$r:00008C9A                 db  6Eh ; n
.data$r:00008C9B                 db  64h ; d
.data$r:00008C9C                 db  6Fh ; o
.data$r:00008C9D                 db  77h ; w
.data$r:00008C9E                 db  40h ; @
.data$r:00008C9F                 db  40h ; @
.data$r:00008CA0                 db    0
.data$r:00008CA1                 align 4
.data$r:00008CA1 _data$r         ends
.data$r:00008CA1
.rdata$r:00008CA4 ; ===========================================================================
.rdata$r:00008CA4
.rdata$r:00008CA4 ; Segment type: Pure data
.rdata$r:00008CA4 ; Segment permissions: Read
.rdata$r:00008CA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CA4                 assume cs:_rdata$r
.rdata$r:00008CA4                 ;org 8CA4h
.rdata$r:00008CA4 ; COMDAT (pick any)
.rdata$r:00008CA4                 public ??_R3Window@@8
.rdata$r:00008CA4 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008CA4 ??_R3Window@@8  db    0                 ; DATA XREF: .rdata$r:00008C88o
.rdata$r:00008CA4                                         ; .rdata$r:00008CD4o
.rdata$r:00008CA5                 db    0
.rdata$r:00008CA6                 db    0
.rdata$r:00008CA7                 db    0
.rdata$r:00008CA8                 db    0
.rdata$r:00008CA9                 db    0
.rdata$r:00008CAA                 db    0
.rdata$r:00008CAB                 db    0
.rdata$r:00008CAC                 db    1
.rdata$r:00008CAD                 db    0
.rdata$r:00008CAE                 db    0
.rdata$r:00008CAF                 db    0
.rdata$r:00008CB0                 dd offset ??_R2Window@@8 ; Window::`RTTI Base Class Array'
.rdata$r:00008CB0 _rdata$r        ends
.rdata$r:00008CB0
.rdata$r:00008CB4 ; ===========================================================================
.rdata$r:00008CB4
.rdata$r:00008CB4 ; Segment type: Pure data
.rdata$r:00008CB4 ; Segment permissions: Read
.rdata$r:00008CB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CB4                 assume cs:_rdata$r
.rdata$r:00008CB4                 ;org 8CB4h
.rdata$r:00008CB4 ; COMDAT (pick any)
.rdata$r:00008CB4                 public ??_R2Window@@8
.rdata$r:00008CB4 ; Window::`RTTI Base Class Array'
.rdata$r:00008CB4 ??_R2Window@@8  dd offset ??_R1A@?0A@EA@Window@@8
.rdata$r:00008CB4                                         ; DATA XREF: .rdata$r:00008CB0o
.rdata$r:00008CB4                                         ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008CB8                 db    0
.rdata$r:00008CB9                 align 4
.rdata$r:00008CB9 _rdata$r        ends
.rdata$r:00008CB9
.rdata$r:00008CBC ; ===========================================================================
.rdata$r:00008CBC
.rdata$r:00008CBC ; Segment type: Pure data
.rdata$r:00008CBC ; Segment permissions: Read
.rdata$r:00008CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CBC                 assume cs:_rdata$r
.rdata$r:00008CBC                 ;org 8CBCh
.rdata$r:00008CBC ; COMDAT (pick any)
.rdata$r:00008CBC                 public ??_R1A@?0A@EA@Window@@8
.rdata$r:00008CBC ; Window::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008CBC ??_R1A@?0A@EA@Window@@8 dd offset ??_R0?AVWindow@@@8
.rdata$r:00008CBC                                         ; DATA XREF: .rdata$r:Window::`RTTI Base Class Array'o
.rdata$r:00008CBC                                         ; .rdata$r:00008D1Co
.rdata$r:00008CBC                                         ; Window `RTTI Type Descriptor'
.rdata$r:00008CC0                 db    0
.rdata$r:00008CC1                 db    0
.rdata$r:00008CC2                 db    0
.rdata$r:00008CC3                 db    0
.rdata$r:00008CC4                 db    0
.rdata$r:00008CC5                 db    0
.rdata$r:00008CC6                 db    0
.rdata$r:00008CC7                 db    0
.rdata$r:00008CC8                 db 0FFh
.rdata$r:00008CC9                 db 0FFh
.rdata$r:00008CCA                 db 0FFh
.rdata$r:00008CCB                 db 0FFh
.rdata$r:00008CCC                 db    0
.rdata$r:00008CCD                 db    0
.rdata$r:00008CCE                 db    0
.rdata$r:00008CCF                 db    0
.rdata$r:00008CD0                 db  40h ; @
.rdata$r:00008CD1                 db    0
.rdata$r:00008CD2                 db    0
.rdata$r:00008CD3                 db    0
.rdata$r:00008CD4                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008CD4 _rdata$r        ends
.rdata$r:00008CD4
.rdata$r:00008CD8 ; ===========================================================================
.rdata$r:00008CD8
.rdata$r:00008CD8 ; Segment type: Pure data
.rdata$r:00008CD8 ; Segment permissions: Read
.rdata$r:00008CD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CD8                 assume cs:_rdata$r
.rdata$r:00008CD8                 ;org 8CD8h
.rdata$r:00008CD8 ; COMDAT (pick any)
.rdata$r:00008CD8                 public ??_R4ColourPicker@@6B@
.rdata$r:00008CD8 ; const ColourPicker::`RTTI Complete Object Locator'
.rdata$r:00008CD8 ??_R4ColourPicker@@6B@ db    0          ; DATA XREF: .rdata:00008260o
.rdata$r:00008CD9                 db    0
.rdata$r:00008CDA                 db    0
.rdata$r:00008CDB                 db    0
.rdata$r:00008CDC                 db    0
.rdata$r:00008CDD                 db    0
.rdata$r:00008CDE                 db    0
.rdata$r:00008CDF                 db    0
.rdata$r:00008CE0                 db    0
.rdata$r:00008CE1                 db    0
.rdata$r:00008CE2                 db    0
.rdata$r:00008CE3                 db    0
.rdata$r:00008CE4                 dd offset ??_R0?AVColourPicker@@@8 ; ColourPicker `RTTI Type Descriptor'
.rdata$r:00008CE8                 dd offset ??_R3ColourPicker@@8 ; ColourPicker::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008CE8 _rdata$r        ends
.rdata$r:00008CE8
.data$r:00008CEC ; ===========================================================================
.data$r:00008CEC
.data$r:00008CEC ; Segment type: Pure data
.data$r:00008CEC ; Segment permissions: Read/Write
.data$r:00008CEC _data$r         segment dword public 'DATA' use32
.data$r:00008CEC                 assume cs:_data$r
.data$r:00008CEC                 ;org 8CECh
.data$r:00008CEC ; COMDAT (pick any)
.data$r:00008CEC                 public ??_R0?AVColourPicker@@@8
.data$r:00008CEC ; class ColourPicker `RTTI Type Descriptor'
.data$r:00008CEC ??_R0?AVColourPicker@@@8 dd offset ??_7type_info@@6B@
.data$r:00008CEC                                         ; DATA XREF: .rdata$r:00008CE4o
.data$r:00008CEC                                         ; .rdata$r:ColourPicker::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008CEC                                         ; const type_info::`vftable'
.data$r:00008CF0                 db    0
.data$r:00008CF1                 db    0
.data$r:00008CF2                 db    0
.data$r:00008CF3                 db    0
.data$r:00008CF4                 db  2Eh ; .
.data$r:00008CF5                 db  3Fh ; ?
.data$r:00008CF6                 db  41h ; A
.data$r:00008CF7                 db  56h ; V
.data$r:00008CF8                 db  43h ; C
.data$r:00008CF9                 db  6Fh ; o
.data$r:00008CFA                 db  6Ch ; l
.data$r:00008CFB                 db  6Fh ; o
.data$r:00008CFC                 db  75h ; u
.data$r:00008CFD                 db  72h ; r
.data$r:00008CFE                 db  50h ; P
.data$r:00008CFF                 db  69h ; i
.data$r:00008D00                 db  63h ; c
.data$r:00008D01                 db  6Bh ; k
.data$r:00008D02                 db  65h ; e
.data$r:00008D03                 db  72h ; r
.data$r:00008D04                 db  40h ; @
.data$r:00008D05                 db  40h ; @
.data$r:00008D06                 db    0
.data$r:00008D07                 align 4
.data$r:00008D07 _data$r         ends
.data$r:00008D07
.rdata$r:00008D08 ; ===========================================================================
.rdata$r:00008D08
.rdata$r:00008D08 ; Segment type: Pure data
.rdata$r:00008D08 ; Segment permissions: Read
.rdata$r:00008D08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D08                 assume cs:_rdata$r
.rdata$r:00008D08                 ;org 8D08h
.rdata$r:00008D08 ; COMDAT (pick any)
.rdata$r:00008D08                 public ??_R3ColourPicker@@8
.rdata$r:00008D08 ; ColourPicker::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D08 ??_R3ColourPicker@@8 db    0            ; DATA XREF: .rdata$r:00008CE8o
.rdata$r:00008D08                                         ; .rdata$r:00008D3Co
.rdata$r:00008D09                 db    0
.rdata$r:00008D0A                 db    0
.rdata$r:00008D0B                 db    0
.rdata$r:00008D0C                 db    0
.rdata$r:00008D0D                 db    0
.rdata$r:00008D0E                 db    0
.rdata$r:00008D0F                 db    0
.rdata$r:00008D10                 db    2
.rdata$r:00008D11                 db    0
.rdata$r:00008D12                 db    0
.rdata$r:00008D13                 db    0
.rdata$r:00008D14                 dd offset ??_R2ColourPicker@@8 ; ColourPicker::`RTTI Base Class Array'
.rdata$r:00008D14 _rdata$r        ends
.rdata$r:00008D14
.rdata$r:00008D18 ; ===========================================================================
.rdata$r:00008D18
.rdata$r:00008D18 ; Segment type: Pure data
.rdata$r:00008D18 ; Segment permissions: Read
.rdata$r:00008D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D18                 assume cs:_rdata$r
.rdata$r:00008D18                 ;org 8D18h
.rdata$r:00008D18 ; COMDAT (pick any)
.rdata$r:00008D18                 public ??_R2ColourPicker@@8
.rdata$r:00008D18 ; ColourPicker::`RTTI Base Class Array'
.rdata$r:00008D18 ??_R2ColourPicker@@8 dd offset ??_R1A@?0A@EA@ColourPicker@@8
.rdata$r:00008D18                                         ; DATA XREF: .rdata$r:00008D14o
.rdata$r:00008D18                                         ; ColourPicker::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008D1C                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008D20                 db    0
.rdata$r:00008D21                 align 4
.rdata$r:00008D21 _rdata$r        ends
.rdata$r:00008D21
.rdata$r:00008D24 ; ===========================================================================
.rdata$r:00008D24
.rdata$r:00008D24 ; Segment type: Pure data
.rdata$r:00008D24 ; Segment permissions: Read
.rdata$r:00008D24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D24                 assume cs:_rdata$r
.rdata$r:00008D24                 ;org 8D24h
.rdata$r:00008D24 ; COMDAT (pick any)
.rdata$r:00008D24                 public ??_R1A@?0A@EA@ColourPicker@@8
.rdata$r:00008D24 ; ColourPicker::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008D24 ??_R1A@?0A@EA@ColourPicker@@8 dd offset ??_R0?AVColourPicker@@@8
.rdata$r:00008D24                                         ; DATA XREF: .rdata$r:ColourPicker::`RTTI Base Class Array'o
.rdata$r:00008D24                                         ; ColourPicker `RTTI Type Descriptor'
.rdata$r:00008D28                 db    1
.rdata$r:00008D29                 db    0
.rdata$r:00008D2A                 db    0
.rdata$r:00008D2B                 db    0
.rdata$r:00008D2C                 db    0
.rdata$r:00008D2D                 db    0
.rdata$r:00008D2E                 db    0
.rdata$r:00008D2F                 db    0
.rdata$r:00008D30                 db 0FFh
.rdata$r:00008D31                 db 0FFh
.rdata$r:00008D32                 db 0FFh
.rdata$r:00008D33                 db 0FFh
.rdata$r:00008D34                 db    0
.rdata$r:00008D35                 db    0
.rdata$r:00008D36                 db    0
.rdata$r:00008D37                 db    0
.rdata$r:00008D38                 db  40h ; @
.rdata$r:00008D39                 db    0
.rdata$r:00008D3A                 db    0
.rdata$r:00008D3B                 db    0
.rdata$r:00008D3C                 dd offset ??_R3ColourPicker@@8 ; ColourPicker::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D3C _rdata$r        ends
.rdata$r:00008D3C
.rdata$r:00008D40 ; ===========================================================================
.rdata$r:00008D40
.rdata$r:00008D40 ; Segment type: Pure data
.rdata$r:00008D40 ; Segment permissions: Read
.rdata$r:00008D40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D40                 assume cs:_rdata$r
.rdata$r:00008D40                 ;org 8D40h
.rdata$r:00008D40 ; COMDAT (pick any)
.rdata$r:00008D40                 public ??_R4error_category@std@@6B@
.rdata$r:00008D40 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00008D40 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:00008298o
.rdata$r:00008D41                 db    0
.rdata$r:00008D42                 db    0
.rdata$r:00008D43                 db    0
.rdata$r:00008D44                 db    0
.rdata$r:00008D45                 db    0
.rdata$r:00008D46                 db    0
.rdata$r:00008D47                 db    0
.rdata$r:00008D48                 db    0
.rdata$r:00008D49                 db    0
.rdata$r:00008D4A                 db    0
.rdata$r:00008D4B                 db    0
.rdata$r:00008D4C                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:00008D50                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D50 _rdata$r        ends
.rdata$r:00008D50
.data$r:00008D54 ; ===========================================================================
.data$r:00008D54
.data$r:00008D54 ; Segment type: Pure data
.data$r:00008D54 ; Segment permissions: Read/Write
.data$r:00008D54 _data$r         segment dword public 'DATA' use32
.data$r:00008D54                 assume cs:_data$r
.data$r:00008D54                 ;org 8D54h
.data$r:00008D54 ; COMDAT (pick any)
.data$r:00008D54                 public ??_R0?AVerror_category@std@@@8
.data$r:00008D54 ; class std::error_category `RTTI Type Descriptor'
.data$r:00008D54 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008D54                                         ; DATA XREF: .rdata$r:00008D4Co
.data$r:00008D54                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008D54                                         ; const type_info::`vftable'
.data$r:00008D58                 db    0
.data$r:00008D59                 db    0
.data$r:00008D5A                 db    0
.data$r:00008D5B                 db    0
.data$r:00008D5C                 db  2Eh ; .
.data$r:00008D5D                 db  3Fh ; ?
.data$r:00008D5E                 db  41h ; A
.data$r:00008D5F                 db  56h ; V
.data$r:00008D60                 db  65h ; e
.data$r:00008D61                 db  72h ; r
.data$r:00008D62                 db  72h ; r
.data$r:00008D63                 db  6Fh ; o
.data$r:00008D64                 db  72h ; r
.data$r:00008D65                 db  5Fh ; _
.data$r:00008D66                 db  63h ; c
.data$r:00008D67                 db  61h ; a
.data$r:00008D68                 db  74h ; t
.data$r:00008D69                 db  65h ; e
.data$r:00008D6A                 db  67h ; g
.data$r:00008D6B                 db  6Fh ; o
.data$r:00008D6C                 db  72h ; r
.data$r:00008D6D                 db  79h ; y
.data$r:00008D6E                 db  40h ; @
.data$r:00008D6F                 db  73h ; s
.data$r:00008D70                 db  74h ; t
.data$r:00008D71                 db  64h ; d
.data$r:00008D72                 db  40h ; @
.data$r:00008D73                 db  40h ; @
.data$r:00008D74                 db    0
.data$r:00008D75                 align 4
.data$r:00008D75 _data$r         ends
.data$r:00008D75
.rdata$r:00008D78 ; ===========================================================================
.rdata$r:00008D78
.rdata$r:00008D78 ; Segment type: Pure data
.rdata$r:00008D78 ; Segment permissions: Read
.rdata$r:00008D78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D78                 assume cs:_rdata$r
.rdata$r:00008D78                 ;org 8D78h
.rdata$r:00008D78 ; COMDAT (pick any)
.rdata$r:00008D78                 public ??_R3error_category@std@@8
.rdata$r:00008D78 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D78 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:00008D50o
.rdata$r:00008D78                                         ; .rdata$r:00008DA8o
.rdata$r:00008D79                 db    0
.rdata$r:00008D7A                 db    0
.rdata$r:00008D7B                 db    0
.rdata$r:00008D7C                 db    0
.rdata$r:00008D7D                 db    0
.rdata$r:00008D7E                 db    0
.rdata$r:00008D7F                 db    0
.rdata$r:00008D80                 db    1
.rdata$r:00008D81                 db    0
.rdata$r:00008D82                 db    0
.rdata$r:00008D83                 db    0
.rdata$r:00008D84                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00008D84 _rdata$r        ends
.rdata$r:00008D84
.rdata$r:00008D88 ; ===========================================================================
.rdata$r:00008D88
.rdata$r:00008D88 ; Segment type: Pure data
.rdata$r:00008D88 ; Segment permissions: Read
.rdata$r:00008D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D88                 assume cs:_rdata$r
.rdata$r:00008D88                 ;org 8D88h
.rdata$r:00008D88 ; COMDAT (pick any)
.rdata$r:00008D88                 public ??_R2error_category@std@@8
.rdata$r:00008D88 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00008D88 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00008D88                                         ; DATA XREF: .rdata$r:00008D84o
.rdata$r:00008D88                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008D8C                 db    0
.rdata$r:00008D8D                 align 10h
.rdata$r:00008D8D _rdata$r        ends
.rdata$r:00008D8D
.rdata$r:00008D90 ; ===========================================================================
.rdata$r:00008D90
.rdata$r:00008D90 ; Segment type: Pure data
.rdata$r:00008D90 ; Segment permissions: Read
.rdata$r:00008D90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D90                 assume cs:_rdata$r
.rdata$r:00008D90                 ;org 8D90h
.rdata$r:00008D90 ; COMDAT (pick any)
.rdata$r:00008D90                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00008D90 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008D90 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00008D90                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00008D90                                         ; .rdata$r:00008E00o ...
.rdata$r:00008D90                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:00008D94                 db    0
.rdata$r:00008D95                 db    0
.rdata$r:00008D96                 db    0
.rdata$r:00008D97                 db    0
.rdata$r:00008D98                 db    0
.rdata$r:00008D99                 db    0
.rdata$r:00008D9A                 db    0
.rdata$r:00008D9B                 db    0
.rdata$r:00008D9C                 db 0FFh
.rdata$r:00008D9D                 db 0FFh
.rdata$r:00008D9E                 db 0FFh
.rdata$r:00008D9F                 db 0FFh
.rdata$r:00008DA0                 db    0
.rdata$r:00008DA1                 db    0
.rdata$r:00008DA2                 db    0
.rdata$r:00008DA3                 db    0
.rdata$r:00008DA4                 db  40h ; @
.rdata$r:00008DA5                 db    0
.rdata$r:00008DA6                 db    0
.rdata$r:00008DA7                 db    0
.rdata$r:00008DA8                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008DA8 _rdata$r        ends
.rdata$r:00008DA8
.rdata$r:00008DAC ; ===========================================================================
.rdata$r:00008DAC
.rdata$r:00008DAC ; Segment type: Pure data
.rdata$r:00008DAC ; Segment permissions: Read
.rdata$r:00008DAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008DAC                 assume cs:_rdata$r
.rdata$r:00008DAC                 ;org 8DACh
.rdata$r:00008DAC ; COMDAT (pick any)
.rdata$r:00008DAC                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00008DAC ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00008DAC ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00008DAC                                         ; DATA XREF: .rdata:000082B4o
.rdata$r:00008DAD                 db    0
.rdata$r:00008DAE                 db    0
.rdata$r:00008DAF                 db    0
.rdata$r:00008DB0                 db    0
.rdata$r:00008DB1                 db    0
.rdata$r:00008DB2                 db    0
.rdata$r:00008DB3                 db    0
.rdata$r:00008DB4                 db    0
.rdata$r:00008DB5                 db    0
.rdata$r:00008DB6                 db    0
.rdata$r:00008DB7                 db    0
.rdata$r:00008DB8                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00008DBC                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008DBC _rdata$r        ends
.rdata$r:00008DBC
.data$r:00008DC0 ; ===========================================================================
.data$r:00008DC0
.data$r:00008DC0 ; Segment type: Pure data
.data$r:00008DC0 ; Segment permissions: Read/Write
.data$r:00008DC0 _data$r         segment dword public 'DATA' use32
.data$r:00008DC0                 assume cs:_data$r
.data$r:00008DC0                 ;org 8DC0h
.data$r:00008DC0 ; COMDAT (pick any)
.data$r:00008DC0                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00008DC0 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00008DC0 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008DC0                                         ; DATA XREF: .rdata$r:00008DB8o
.data$r:00008DC0                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008DC0                                         ; const type_info::`vftable'
.data$r:00008DC4                 align 8
.data$r:00008DC8 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:00008DEA                 align 4
.data$r:00008DEA _data$r         ends
.data$r:00008DEA
.rdata$r:00008DEC ; ===========================================================================
.rdata$r:00008DEC
.rdata$r:00008DEC ; Segment type: Pure data
.rdata$r:00008DEC ; Segment permissions: Read
.rdata$r:00008DEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008DEC                 assume cs:_rdata$r
.rdata$r:00008DEC                 ;org 8DECh
.rdata$r:00008DEC ; COMDAT (pick any)
.rdata$r:00008DEC                 public ??_R3_Generic_error_category@std@@8
.rdata$r:00008DEC ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008DEC ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:00008DEC                                         ; DATA XREF: .rdata$r:00008DBCo
.rdata$r:00008DEC                                         ; .rdata$r:00008E20o
.rdata$r:00008DED                 db    0
.rdata$r:00008DEE                 db    0
.rdata$r:00008DEF                 db    0
.rdata$r:00008DF0                 db    0
.rdata$r:00008DF1                 db    0
.rdata$r:00008DF2                 db    0
.rdata$r:00008DF3                 db    0
.rdata$r:00008DF4                 db    2
.rdata$r:00008DF5                 db    0
.rdata$r:00008DF6                 db    0
.rdata$r:00008DF7                 db    0
.rdata$r:00008DF8                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00008DF8 _rdata$r        ends
.rdata$r:00008DF8
.rdata$r:00008DFC ; ===========================================================================
.rdata$r:00008DFC
.rdata$r:00008DFC ; Segment type: Pure data
.rdata$r:00008DFC ; Segment permissions: Read
.rdata$r:00008DFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008DFC                 assume cs:_rdata$r
.rdata$r:00008DFC                 ;org 8DFCh
.rdata$r:00008DFC ; COMDAT (pick any)
.rdata$r:00008DFC                 public ??_R2_Generic_error_category@std@@8
.rdata$r:00008DFC ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00008DFC ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00008DFC                                         ; DATA XREF: .rdata$r:00008DF8o
.rdata$r:00008DFC                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008E00                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008E04                 db    0
.rdata$r:00008E05                 align 4
.rdata$r:00008E05 _rdata$r        ends
.rdata$r:00008E05
.rdata$r:00008E08 ; ===========================================================================
.rdata$r:00008E08
.rdata$r:00008E08 ; Segment type: Pure data
.rdata$r:00008E08 ; Segment permissions: Read
.rdata$r:00008E08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008E08                 assume cs:_rdata$r
.rdata$r:00008E08                 ;org 8E08h
.rdata$r:00008E08 ; COMDAT (pick any)
.rdata$r:00008E08                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00008E08 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008E08 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:00008E08                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:00008E08                                         ; .rdata$r:00008E78o ...
.rdata$r:00008E08                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00008E0C                 db    1
.rdata$r:00008E0D                 db    0
.rdata$r:00008E0E                 db    0
.rdata$r:00008E0F                 db    0
.rdata$r:00008E10                 db    0
.rdata$r:00008E11                 db    0
.rdata$r:00008E12                 db    0
.rdata$r:00008E13                 db    0
.rdata$r:00008E14                 db 0FFh
.rdata$r:00008E15                 db 0FFh
.rdata$r:00008E16                 db 0FFh
.rdata$r:00008E17                 db 0FFh
.rdata$r:00008E18                 db    0
.rdata$r:00008E19                 db    0
.rdata$r:00008E1A                 db    0
.rdata$r:00008E1B                 db    0
.rdata$r:00008E1C                 db  40h ; @
.rdata$r:00008E1D                 db    0
.rdata$r:00008E1E                 db    0
.rdata$r:00008E1F                 db    0
.rdata$r:00008E20                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008E20 _rdata$r        ends
.rdata$r:00008E20
.rdata$r:00008E24 ; ===========================================================================
.rdata$r:00008E24
.rdata$r:00008E24 ; Segment type: Pure data
.rdata$r:00008E24 ; Segment permissions: Read
.rdata$r:00008E24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008E24                 assume cs:_rdata$r
.rdata$r:00008E24                 ;org 8E24h
.rdata$r:00008E24 ; COMDAT (pick any)
.rdata$r:00008E24                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:00008E24 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:00008E24 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:00008E24                                         ; DATA XREF: .rdata:000082E8o
.rdata$r:00008E25                 db    0
.rdata$r:00008E26                 db    0
.rdata$r:00008E27                 db    0
.rdata$r:00008E28                 db    0
.rdata$r:00008E29                 db    0
.rdata$r:00008E2A                 db    0
.rdata$r:00008E2B                 db    0
.rdata$r:00008E2C                 db    0
.rdata$r:00008E2D                 db    0
.rdata$r:00008E2E                 db    0
.rdata$r:00008E2F                 db    0
.rdata$r:00008E30                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00008E34                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008E34 _rdata$r        ends
.rdata$r:00008E34
.data$r:00008E38 ; ===========================================================================
.data$r:00008E38
.data$r:00008E38 ; Segment type: Pure data
.data$r:00008E38 ; Segment permissions: Read/Write
.data$r:00008E38 _data$r         segment dword public 'DATA' use32
.data$r:00008E38                 assume cs:_data$r
.data$r:00008E38                 ;org 8E38h
.data$r:00008E38 ; COMDAT (pick any)
.data$r:00008E38                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00008E38 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00008E38 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008E38                                         ; DATA XREF: .rdata$r:00008E30o
.data$r:00008E38                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008E38                                         ; const type_info::`vftable'
.data$r:00008E3C                 align 10h
.data$r:00008E40 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:00008E63                 align 4
.data$r:00008E63 _data$r         ends
.data$r:00008E63
.rdata$r:00008E64 ; ===========================================================================
.rdata$r:00008E64
.rdata$r:00008E64 ; Segment type: Pure data
.rdata$r:00008E64 ; Segment permissions: Read
.rdata$r:00008E64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008E64                 assume cs:_rdata$r
.rdata$r:00008E64                 ;org 8E64h
.rdata$r:00008E64 ; COMDAT (pick any)
.rdata$r:00008E64                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00008E64 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008E64 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00008E64                                         ; DATA XREF: .rdata$r:00008E34o
.rdata$r:00008E64                                         ; .rdata$r:00008E9Co
.rdata$r:00008E65                 db    0
.rdata$r:00008E66                 db    0
.rdata$r:00008E67                 db    0
.rdata$r:00008E68                 db    0
.rdata$r:00008E69                 db    0
.rdata$r:00008E6A                 db    0
.rdata$r:00008E6B                 db    0
.rdata$r:00008E6C                 db    3
.rdata$r:00008E6D                 db    0
.rdata$r:00008E6E                 db    0
.rdata$r:00008E6F                 db    0
.rdata$r:00008E70                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00008E70 _rdata$r        ends
.rdata$r:00008E70
.rdata$r:00008E74 ; ===========================================================================
.rdata$r:00008E74
.rdata$r:00008E74 ; Segment type: Pure data
.rdata$r:00008E74 ; Segment permissions: Read
.rdata$r:00008E74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008E74                 assume cs:_rdata$r
.rdata$r:00008E74                 ;org 8E74h
.rdata$r:00008E74 ; COMDAT (pick any)
.rdata$r:00008E74                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00008E74 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00008E74 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00008E74                                         ; DATA XREF: .rdata$r:00008E70o
.rdata$r:00008E74                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008E78                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008E7C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008E80                 db    0
.rdata$r:00008E81                 align 4
.rdata$r:00008E81 _rdata$r        ends
.rdata$r:00008E81
.rdata$r:00008E84 ; ===========================================================================
.rdata$r:00008E84
.rdata$r:00008E84 ; Segment type: Pure data
.rdata$r:00008E84 ; Segment permissions: Read
.rdata$r:00008E84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008E84                 assume cs:_rdata$r
.rdata$r:00008E84                 ;org 8E84h
.rdata$r:00008E84 ; COMDAT (pick any)
.rdata$r:00008E84                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00008E84 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008E84 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00008E84                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00008E84                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00008E88                 db    2
.rdata$r:00008E89                 db    0
.rdata$r:00008E8A                 db    0
.rdata$r:00008E8B                 db    0
.rdata$r:00008E8C                 db    0
.rdata$r:00008E8D                 db    0
.rdata$r:00008E8E                 db    0
.rdata$r:00008E8F                 db    0
.rdata$r:00008E90                 db 0FFh
.rdata$r:00008E91                 db 0FFh
.rdata$r:00008E92                 db 0FFh
.rdata$r:00008E93                 db 0FFh
.rdata$r:00008E94                 db    0
.rdata$r:00008E95                 db    0
.rdata$r:00008E96                 db    0
.rdata$r:00008E97                 db    0
.rdata$r:00008E98                 db  40h ; @
.rdata$r:00008E99                 db    0
.rdata$r:00008E9A                 db    0
.rdata$r:00008E9B                 db    0
.rdata$r:00008E9C                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008E9C _rdata$r        ends
.rdata$r:00008E9C
.rdata$r:00008EA0 ; ===========================================================================
.rdata$r:00008EA0
.rdata$r:00008EA0 ; Segment type: Pure data
.rdata$r:00008EA0 ; Segment permissions: Read
.rdata$r:00008EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008EA0                 assume cs:_rdata$r
.rdata$r:00008EA0                 ;org 8EA0h
.rdata$r:00008EA0 ; COMDAT (pick any)
.rdata$r:00008EA0                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00008EA0 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00008EA0 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00008328o
.rdata$r:00008EA1                 db    0
.rdata$r:00008EA2                 db    0
.rdata$r:00008EA3                 db    0
.rdata$r:00008EA4                 db    0
.rdata$r:00008EA5                 db    0
.rdata$r:00008EA6                 db    0
.rdata$r:00008EA7                 db    0
.rdata$r:00008EA8                 db    0
.rdata$r:00008EA9                 db    0
.rdata$r:00008EAA                 db    0
.rdata$r:00008EAB                 db    0
.rdata$r:00008EAC                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00008EB0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008EB0 _rdata$r        ends
.rdata$r:00008EB0
.data$r:00008EB4 ; ===========================================================================
.data$r:00008EB4
.data$r:00008EB4 ; Segment type: Pure data
.data$r:00008EB4 ; Segment permissions: Read/Write
.data$r:00008EB4 _data$r         segment dword public 'DATA' use32
.data$r:00008EB4                 assume cs:_data$r
.data$r:00008EB4                 ;org 8EB4h
.data$r:00008EB4 ; COMDAT (pick any)
.data$r:00008EB4                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00008EB4 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00008EB4 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008EB4                                         ; DATA XREF: .rdata$r:00008EACo
.data$r:00008EB4                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008EB4                                         ; const type_info::`vftable'
.data$r:00008EB8                 db    0
.data$r:00008EB9                 db    0
.data$r:00008EBA                 db    0
.data$r:00008EBB                 db    0
.data$r:00008EBC                 db  2Eh ; .
.data$r:00008EBD                 db  3Fh ; ?
.data$r:00008EBE                 db  41h ; A
.data$r:00008EBF                 db  56h ; V
.data$r:00008EC0                 db  5Fh ; _
.data$r:00008EC1                 db  53h ; S
.data$r:00008EC2                 db  79h ; y
.data$r:00008EC3                 db  73h ; s
.data$r:00008EC4                 db  74h ; t
.data$r:00008EC5                 db  65h ; e
.data$r:00008EC6                 db  6Dh ; m
.data$r:00008EC7                 db  5Fh ; _
.data$r:00008EC8                 db  65h ; e
.data$r:00008EC9                 db  72h ; r
.data$r:00008ECA                 db  72h ; r
.data$r:00008ECB                 db  6Fh ; o
.data$r:00008ECC                 db  72h ; r
.data$r:00008ECD                 db  5Fh ; _
.data$r:00008ECE                 db  63h ; c
.data$r:00008ECF                 db  61h ; a
.data$r:00008ED0                 db  74h ; t
.data$r:00008ED1                 db  65h ; e
.data$r:00008ED2                 db  67h ; g
.data$r:00008ED3                 db  6Fh ; o
.data$r:00008ED4                 db  72h ; r
.data$r:00008ED5                 db  79h ; y
.data$r:00008ED6                 db  40h ; @
.data$r:00008ED7                 db  73h ; s
.data$r:00008ED8                 db  74h ; t
.data$r:00008ED9                 db  64h ; d
.data$r:00008EDA                 db  40h ; @
.data$r:00008EDB                 db  40h ; @
.data$r:00008EDC                 db    0
.data$r:00008EDD                 align 10h
.data$r:00008EDD _data$r         ends
.data$r:00008EDD
.rdata$r:00008EE0 ; ===========================================================================
.rdata$r:00008EE0
.rdata$r:00008EE0 ; Segment type: Pure data
.rdata$r:00008EE0 ; Segment permissions: Read
.rdata$r:00008EE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008EE0                 assume cs:_rdata$r
.rdata$r:00008EE0                 ;org 8EE0h
.rdata$r:00008EE0 ; COMDAT (pick any)
.rdata$r:00008EE0                 public ??_R3_System_error_category@std@@8
.rdata$r:00008EE0 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008EE0 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00008EB0o
.rdata$r:00008EE0                                         ; .rdata$r:00008F18o
.rdata$r:00008EE1                 db    0
.rdata$r:00008EE2                 db    0
.rdata$r:00008EE3                 db    0
.rdata$r:00008EE4                 db    0
.rdata$r:00008EE5                 db    0
.rdata$r:00008EE6                 db    0
.rdata$r:00008EE7                 db    0
.rdata$r:00008EE8                 db    3
.rdata$r:00008EE9                 db    0
.rdata$r:00008EEA                 db    0
.rdata$r:00008EEB                 db    0
.rdata$r:00008EEC                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00008EEC _rdata$r        ends
.rdata$r:00008EEC
.rdata$r:00008EF0 ; ===========================================================================
.rdata$r:00008EF0
.rdata$r:00008EF0 ; Segment type: Pure data
.rdata$r:00008EF0 ; Segment permissions: Read
.rdata$r:00008EF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008EF0                 assume cs:_rdata$r
.rdata$r:00008EF0                 ;org 8EF0h
.rdata$r:00008EF0 ; COMDAT (pick any)
.rdata$r:00008EF0                 public ??_R2_System_error_category@std@@8
.rdata$r:00008EF0 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00008EF0 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00008EF0                                         ; DATA XREF: .rdata$r:00008EECo
.rdata$r:00008EF0                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008EF4                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008EF8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008EFC                 db    0
.rdata$r:00008EFD                 align 10h
.rdata$r:00008EFD _rdata$r        ends
.rdata$r:00008EFD
.rdata$r:00008F00 ; ===========================================================================
.rdata$r:00008F00
.rdata$r:00008F00 ; Segment type: Pure data
.rdata$r:00008F00 ; Segment permissions: Read
.rdata$r:00008F00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008F00                 assume cs:_rdata$r
.rdata$r:00008F00                 ;org 8F00h
.rdata$r:00008F00 ; COMDAT (pick any)
.rdata$r:00008F00                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00008F00 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008F00 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:00008F00                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:00008F00                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00008F04                 db    2
.rdata$r:00008F05                 db    0
.rdata$r:00008F06                 db    0
.rdata$r:00008F07                 db    0
.rdata$r:00008F08                 db    0
.rdata$r:00008F09                 db    0
.rdata$r:00008F0A                 db    0
.rdata$r:00008F0B                 db    0
.rdata$r:00008F0C                 db 0FFh
.rdata$r:00008F0D                 db 0FFh
.rdata$r:00008F0E                 db 0FFh
.rdata$r:00008F0F                 db 0FFh
.rdata$r:00008F10                 db    0
.rdata$r:00008F11                 db    0
.rdata$r:00008F12                 db    0
.rdata$r:00008F13                 db    0
.rdata$r:00008F14                 db  40h ; @
.rdata$r:00008F15                 db    0
.rdata$r:00008F16                 db    0
.rdata$r:00008F17                 db    0
.rdata$r:00008F18                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008F18 _rdata$r        ends
.rdata$r:00008F18
.CRT$XCU:00008F1C ; ===========================================================================
.CRT$XCU:00008F1C
.CRT$XCU:00008F1C ; Segment type: Pure data
.CRT$XCU:00008F1C ; Segment permissions: Read
.CRT$XCU:00008F1C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F1C                 assume cs:_CRT$XCU
.CRT$XCU:00008F1C                 ;org 8F1Ch
.CRT$XCU:00008F1C _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00008F20 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00008F24 _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:00008F28 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:00008F28 _CRT$XCU        ends
.CRT$XCU:00008F28
.CRT$XCU:00008F2C ; ===========================================================================
.CRT$XCU:00008F2C
.CRT$XCU:00008F2C ; Segment type: Pure data
.CRT$XCU:00008F2C ; Segment permissions: Read
.CRT$XCU:00008F2C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F2C                 assume cs:_CRT$XCU
.CRT$XCU:00008F2C                 ;org 8F2Ch
.CRT$XCU:00008F2C ; COMDAT (pick associative to section at 834C)
.CRT$XCU:00008F2C ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:00008F2C ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:00008F2C _CRT$XCU        ends
.CRT$XCU:00008F2C
.CRT$XCU:00008F30 ; ===========================================================================
.CRT$XCU:00008F30
.CRT$XCU:00008F30 ; Segment type: Pure data
.CRT$XCU:00008F30 ; Segment permissions: Read
.CRT$XCU:00008F30 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F30                 assume cs:_CRT$XCU
.CRT$XCU:00008F30                 ;org 8F30h
.CRT$XCU:00008F30 ; COMDAT (pick associative to section at 8350)
.CRT$XCU:00008F30 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:00008F30 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:00008F30 _CRT$XCU        ends
.CRT$XCU:00008F30
.CRT$XCU:00008F34 ; ===========================================================================
.CRT$XCU:00008F34
.CRT$XCU:00008F34 ; Segment type: Pure data
.CRT$XCU:00008F34 ; Segment permissions: Read
.CRT$XCU:00008F34 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F34                 assume cs:_CRT$XCU
.CRT$XCU:00008F34                 ;org 8F34h
.CRT$XCU:00008F34 ; COMDAT (pick associative to section at 8354)
.CRT$XCU:00008F34 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:00008F34 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:00008F34 _CRT$XCU        ends
.CRT$XCU:00008F34
.CRT$XCU:00008F38 ; ===========================================================================
.CRT$XCU:00008F38
.CRT$XCU:00008F38 ; Segment type: Pure data
.CRT$XCU:00008F38 ; Segment permissions: Read
.CRT$XCU:00008F38 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F38                 assume cs:_CRT$XCU
.CRT$XCU:00008F38                 ;org 8F38h
.CRT$XCU:00008F38 ; COMDAT (pick associative to section at 835C)
.CRT$XCU:00008F38 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00008F38 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00008F38 _CRT$XCU        ends
.CRT$XCU:00008F38
.CRT$XCU:00008F3C ; ===========================================================================
.CRT$XCU:00008F3C
.CRT$XCU:00008F3C ; Segment type: Pure data
.CRT$XCU:00008F3C ; Segment permissions: Read
.CRT$XCU:00008F3C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F3C                 assume cs:_CRT$XCU
.CRT$XCU:00008F3C                 ;org 8F3Ch
.CRT$XCU:00008F3C ; COMDAT (pick associative to section at 8360)
.CRT$XCU:00008F3C ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:00008F3C ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:00008F3C _CRT$XCU        ends
.CRT$XCU:00008F3C
.CRT$XCU:00008F40 ; ===========================================================================
.CRT$XCU:00008F40
.CRT$XCU:00008F40 ; Segment type: Pure data
.CRT$XCU:00008F40 ; Segment permissions: Read
.CRT$XCU:00008F40 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F40                 assume cs:_CRT$XCU
.CRT$XCU:00008F40                 ;org 8F40h
.CRT$XCU:00008F40 ; COMDAT (pick associative to section at 8510)
.CRT$XCU:00008F40 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00008F40 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00008F40 _CRT$XCU        ends
.CRT$XCU:00008F40
.CRT$XCU:00008F44 ; ===========================================================================
.CRT$XCU:00008F44
.CRT$XCU:00008F44 ; Segment type: Pure data
.CRT$XCU:00008F44 ; Segment permissions: Read
.CRT$XCU:00008F44 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008F44                 assume cs:_CRT$XCU
.CRT$XCU:00008F44                 ;org 8F44h
.CRT$XCU:00008F44 ; COMDAT (pick associative to section at 8514)
.CRT$XCU:00008F44 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:00008F44 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:00008F44 _CRT$XCU        ends
.CRT$XCU:00008F44
UNDEF:00008F50 ; ===========================================================================
UNDEF:00008F50
UNDEF:00008F50 ; Segment type: Externs
UNDEF:00008F50 ; UNDEF
UNDEF:00008F50                 extrn __purecall:near   ; DATA XREF: .rdata:00008238o
UNDEF:00008F50                                         ; .rdata:000082A0o ...
UNDEF:00008F54 ; void *__cdecl operator new(unsigned int)
UNDEF:00008F54                 extrn ??2@YAPAXI@Z:near ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+387p
UNDEF:00008F54                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+3DAp ...
UNDEF:00008F58 ; void __cdecl operator delete(void *)
UNDEF:00008F58                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$0+4p
UNDEF:00008F58                                         ; __unwindfunclet$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z$1+7p ...
UNDEF:00008F5C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00008F5C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:00008F5C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:00008F60                 extrn ___report_rangecheckfailure:near
UNDEF:00008F60                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void):loc_31DBp
UNDEF:00008F64                 extrn __invalid_parameter:near
UNDEF:00008F64                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+74p
UNDEF:00008F64                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+74p
UNDEF:00008F68 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00008F68                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:00008F68                                         ; _wmemcpy+11p
UNDEF:00008F6C ; size_t __cdecl strlen(const char *Str)
UNDEF:00008F6C                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00008F70 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00008F70                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:00008F70                                         ; _wmemmove+11p
UNDEF:00008F74 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:00008F74                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:00008F78 ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:00008F78                 extrn __imp__lstrcmpW@8:near
UNDEF:00008F78                                         ; CODE XREF: WordStyleDlg::whichTabColourIndex(void)+82p
UNDEF:00008F78                                         ; WordStyleDlg::whichTabColourIndex(void)+9Fp ...
UNDEF:00008F7C ; LPWSTR __stdcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:00008F7C                 extrn __imp__lstrcpyW@8:near
UNDEF:00008F7C                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+F7p
UNDEF:00008F7C                                         ; DATA XREF: WordStyleDlg::switchToTheme(void)+F7r
UNDEF:00008F80 ; LPWSTR __stdcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:00008F80                 extrn __imp__lstrcatW@8:near
UNDEF:00008F80                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+183p
UNDEF:00008F80                                         ; WordStyleDlg::setVisualFromStyleList(void)+18Ap ...
UNDEF:00008F84 ; HGDIOBJ __stdcall GetStockObject(int i)
UNDEF:00008F84                 extrn __imp__GetStockObject@4:near
UNDEF:00008F84                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+67p
UNDEF:00008F84                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+67r
UNDEF:00008F88 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:00008F88                 extrn __imp__SelectObject@8:near
UNDEF:00008F88                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+81p
UNDEF:00008F88                                         ; ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+D0p
UNDEF:00008F88                                         ; DATA XREF: ...
UNDEF:00008F8C ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:00008F8C                 extrn __imp__SetTextColor@8:near
UNDEF:00008F8C                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+5Fp
UNDEF:00008F8C                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+5Fr
UNDEF:00008F90 ; int _wsprintfW(LPWSTR, LPCWSTR, ...)
UNDEF:00008F90                 extrn __imp__wsprintfW:near
UNDEF:00008F90                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+3CFp
UNDEF:00008F90                                         ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+3CFr
UNDEF:00008F94 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008F94                 extrn __imp__SendMessageW@16:near
UNDEF:00008F94                                         ; CODE XREF: WordStyleDlg::apply(void)+70p
UNDEF:00008F94                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+21Ap ...
UNDEF:00008F98 ; LRESULT __stdcall CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008F98                 extrn __imp__CallWindowProcW@20:near
UNDEF:00008F98                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+105p
UNDEF:00008F98                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+105r
UNDEF:00008F9C ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00008F9C                 extrn __imp__ShowWindow@8:near
UNDEF:00008F9C                                         ; CODE XREF: WordStyleDlg::create(int,bool)+46p
UNDEF:00008F9C                                         ; WordStyleDlg::create(int,bool)+61p ...
UNDEF:00008FA0 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:00008FA0                 extrn __imp__MoveWindow@24:near
UNDEF:00008FA0                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+512p
UNDEF:00008FA0                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+532p ...
UNDEF:00008FA4 ; BOOL __stdcall IsWindowVisible(HWND hWnd)
UNDEF:00008FA4                 extrn __imp__IsWindowVisible@4:near
UNDEF:00008FA4                                         ; CODE XREF: Window::getHeight(void)+2Bp
UNDEF:00008FA4                                         ; Window::isVisible(void)+10p
UNDEF:00008FA4                                         ; DATA XREF: ...
UNDEF:00008FA8 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00008FA8                 extrn __imp__GetDlgItem@8:near
UNDEF:00008FA8                                         ; CODE XREF: WordStyleDlg::create(int,bool)+3Fp
UNDEF:00008FA8                                         ; WordStyleDlg::create(int,bool)+5Ap ...
UNDEF:00008FAC ; LRESULT __stdcall SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008FAC                 extrn __imp__SendDlgItemMessageW@20:near
UNDEF:00008FAC                                         ; CODE XREF: WordStyleDlg::create(int,bool)+7Fp
UNDEF:00008FAC                                         ; WordStyleDlg::create(int,bool)+9Dp ...
UNDEF:00008FB0 ; BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
UNDEF:00008FB0                 extrn __imp__EnableWindow@8:near
UNDEF:00008FB0                                         ; CODE XREF: WordStyleDlg::create(int,bool)+D8p
UNDEF:00008FB0                                         ; WordStyleDlg::apply(void)+5Ap ...
UNDEF:00008FB4 ; int __stdcall DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format)
UNDEF:00008FB4                 extrn __imp__DrawTextW@20:near
UNDEF:00008FB4                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+BCp
UNDEF:00008FB4                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+BCr
UNDEF:00008FB8 ; BOOL __stdcall UpdateWindow(HWND hWnd)
UNDEF:00008FB8                 extrn __imp__UpdateWindow@4:near
UNDEF:00008FB8                                         ; CODE XREF: Window::redraw(bool)+27p
UNDEF:00008FB8                                         ; DATA XREF: Window::redraw(bool)+27r
UNDEF:00008FBC ; HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint)
UNDEF:00008FBC                 extrn __imp__BeginPaint@8:near
UNDEF:00008FBC                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+46p
UNDEF:00008FBC                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+46r
UNDEF:00008FC0 ; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
UNDEF:00008FC0                 extrn __imp__EndPaint@8:near
UNDEF:00008FC0                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+E1p
UNDEF:00008FC0                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+E1r
UNDEF:00008FC4 ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00008FC4                 extrn __imp__InvalidateRect@12:near
UNDEF:00008FC4                                         ; CODE XREF: Window::redraw(bool)+12p
UNDEF:00008FC4                                         ; DATA XREF: Window::redraw(bool)+12r
UNDEF:00008FC8 ; BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString)
UNDEF:00008FC8                 extrn __imp__SetWindowTextW@8:near
UNDEF:00008FC8                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+1CBp
UNDEF:00008FC8                                         ; DATA XREF: WordStyleDlg::setVisualFromStyleList(void)+1CBr
UNDEF:00008FCC ; int __stdcall GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount)
UNDEF:00008FCC                 extrn __imp__GetWindowTextW@12:near
UNDEF:00008FCC                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+9Dp
UNDEF:00008FCC                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+9Dr
UNDEF:00008FD0 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:00008FD0                 extrn __imp__GetClientRect@8:near
UNDEF:00008FD0                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+35p
UNDEF:00008FD0                                         ; Window::getClientRect(tagRECT &)+12p ...
UNDEF:00008FD4 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00008FD4                 extrn __imp__GetWindowRect@8:near
UNDEF:00008FD4                                         ; CODE XREF: Window::getWindowRect(tagRECT &)+12p
UNDEF:00008FD4                                         ; DATA XREF: Window::getWindowRect(tagRECT &)+12r
UNDEF:00008FD8 ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:00008FD8                 extrn __imp__MessageBoxW@16:near
UNDEF:00008FD8                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+132p
UNDEF:00008FD8                                         ; DATA XREF: WordStyleDlg::switchToTheme(void)+132r
UNDEF:00008FDC ; LONG __stdcall GetWindowLongW(HWND hWnd, int nIndex)
UNDEF:00008FDC                 extrn __imp__GetWindowLongW@8:near
UNDEF:00008FDC                                         ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+1Bp
UNDEF:00008FDC                                         ; NppParameters::removeTransparent(HWND__ *)+Dp ...
UNDEF:00008FE0 ; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00008FE0                 extrn __imp__SetWindowLongW@12:near
UNDEF:00008FE0                                         ; CODE XREF: NppParameters::SetTransparent(HWND__ *,int)+2Dp
UNDEF:00008FE0                                         ; ColourStaticTextHooker::hookOn(HWND__ *)+11p ...
UNDEF:00008FE4 ; __int32 __cdecl wcstol(const wchar_t *Str, wchar_t **EndPtr, int Radix)
UNDEF:00008FE4                 extrn _wcstol:near      ; CODE XREF: WordStyleDlg::updateFontSize(void)+7Ep
UNDEF:00008FE8 ; void __stdcall PathRemoveExtensionW(LPWSTR pszPath)
UNDEF:00008FE8                 extrn __imp__PathRemoveExtensionW@4:near
UNDEF:00008FE8                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+111p
UNDEF:00008FE8                                         ; DATA XREF: WordStyleDlg::switchToTheme(void)+111r
UNDEF:00008FEC ; void __stdcall PathStripPathW(LPWSTR pszPath)
UNDEF:00008FEC                 extrn __imp__PathStripPathW@4:near
UNDEF:00008FEC                                         ; CODE XREF: WordStyleDlg::switchToTheme(void)+104p
UNDEF:00008FEC                                         ; DATA XREF: WordStyleDlg::switchToTheme(void)+104r
UNDEF:00008FF0 ; public: virtual void * __thiscall Window::`vector deleting destructor'(unsigned int)
UNDEF:00008FF0                 extrn ??_EWindow@@UAEPAXI@Z:near ; weak
UNDEF:00008FF0                                         ; DATA XREF: .rdata:const Window::`vftable'o
UNDEF:00008FF4 ; public: virtual void __thiscall ColourPicker::init(struct HINSTANCE__ *, struct HWND__ *)
UNDEF:00008FF4                 extrn ?init@ColourPicker@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z:near
UNDEF:00008FF4                                         ; DATA XREF: .rdata:00008268o
UNDEF:00008FF8 ; public: virtual void __thiscall ColourPicker::destroy(void)
UNDEF:00008FF8                 extrn ?destroy@ColourPicker@@UAEXXZ:near
UNDEF:00008FF8                                         ; DATA XREF: .rdata:0000826Co
UNDEF:00008FFC ; public: virtual void * __thiscall ColourPicker::`vector deleting destructor'(unsigned int)
UNDEF:00008FFC                 extrn ??_EColourPicker@@UAEPAXI@Z:near ; weak
UNDEF:00008FFC                                         ; DATA XREF: .rdata:const ColourPicker::`vftable'o
UNDEF:00009000 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00009000                 extrn __wassert:near    ; CODE XREF: StyleArray::getStyler(int)+22p
UNDEF:00009004 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00009004                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00009004                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+35p
UNDEF:00009008 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:00009008                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:00009008                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+86p
UNDEF:00009008                                         ; __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0+3j
UNDEF:0000900C                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00009010 ; void __cdecl operator delete[](void *)
UNDEF:00009010                 extrn ??_V@YAXPAX@Z:near
UNDEF:00009010                                         ; CODE XREF: WordStyleDlg::updateUserKeywords(void)+8Fp
UNDEF:00009014 ; void *__cdecl operator new[](unsigned int)
UNDEF:00009014                 extrn ??_U@YAPAXI@Z:near
UNDEF:00009014                                         ; CODE XREF: WordStyleDlg::updateUserKeywords(void)+4Cp
UNDEF:00009018                 extrn __CrtDbgReportW:near
UNDEF:00009018                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+50p
UNDEF:00009018                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+50p
UNDEF:0000901C ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000901C                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000901C                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000901C                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+16p ...
UNDEF:00009020 ; void __cdecl std::_Xbad_alloc()
UNDEF:00009020                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00009020                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_3C1Ep
UNDEF:00009020                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_3C60p ...
UNDEF:00009024 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00009024                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00009024                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:00009024                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:00009028 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:00009028                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:00009028                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:00009028                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000902C ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000902C                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000902C                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:00009030 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:00009030                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:00009030                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:00009030                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:00009034 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:00009034                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:00009034                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:00009038 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009038                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009038                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000903C ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000903C                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000903C                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00009040 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00009040                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00009040                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:00009044 ; void __cdecl printStr(const wchar_t *)
UNDEF:00009044                 extrn ?printStr@@YAXPB_W@Z:near
UNDEF:00009044                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+65Fp
UNDEF:00009048 ; void __thiscall StaticDialog::create(StaticDialog *__hidden this, int, bool, bool)
UNDEF:00009048                 extrn ?create@StaticDialog@@UAEXH_N0@Z:near
UNDEF:00009048                                         ; CODE XREF: WordStyleDlg::create(int,bool)+15p
UNDEF:0000904C ; void __thiscall StaticDialog::goToCenter(StaticDialog *__hidden this)
UNDEF:0000904C                 extrn ?goToCenter@StaticDialog@@QAEXXZ:near
UNDEF:0000904C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+5E4p
UNDEF:00009050 ; void __thiscall __high StaticDialog::alignWith(HWND, HWND, enum PosAlign, struct tagPOINT *)
UNDEF:00009050                 extrn ?alignWith@StaticDialog@@IAEXPAUHWND__@@0W4PosAlign@@AAUtagPOINT@@@Z:near
UNDEF:00009050                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+492p
UNDEF:00009050                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+4B3p
UNDEF:00009054 ; enum LangType __cdecl __high static NppParameters::getLangIDFromStr(const wchar_t *)
UNDEF:00009054                 extrn ?getLangIDFromStr@NppParameters@@SA?AW4LangType@@PB_W@Z:near
UNDEF:00009054                                         ; CODE XREF: WordStyleDlg::setVisualFromStyleList(void)+60Ep
UNDEF:00009058 ; bool __thiscall NppParameters::reloadStylers(NppParameters *__hidden this, wchar_t *)
UNDEF:00009058                 extrn ?reloadStylers@NppParameters@@QAE_NPA_W@Z:near
UNDEF:00009058                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+872p
UNDEF:00009058                                         ; WordStyleDlg::switchToTheme(void)+184p
UNDEF:0000905C ; void __thiscall NppParameters::writeStyles(NppParameters *__hidden this, struct LexerStylerArray *, struct StyleArray *)
UNDEF:0000905C                 extrn ?writeStyles@NppParameters@@QAEXAAULexerStylerArray@@AAUStyleArray@@@Z:near
UNDEF:0000905C                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+AD6p
UNDEF:0000905C                                         ; WordStyleDlg::switchToTheme(void)+165p
UNDEF:00009060 ; void __cdecl __high static TabBarPlus::setColour(unsigned __int32, enum TabBarPlus::tabColourIndex)
UNDEF:00009060                 extrn ?setColour@TabBarPlus@@SAXKW4tabColourIndex@1@@Z:near
UNDEF:00009060                                         ; CODE XREF: WordStyleDlg::run_dlgProc(uint,uint,long)+1065p
UNDEF:00009060                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+10EBp
UNDEF:00009064 ; __fastcall __security_check_cookie(x)
UNDEF:00009064                 extrn @__security_check_cookie@4:near
UNDEF:00009064                                         ; CODE XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+110p
UNDEF:00009064                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+111Ep ...
UNDEF:00009068 ; __stdcall _CxxThrowException(x, x)
UNDEF:00009068                 extrn __CxxThrowException@8:near
UNDEF:00009068                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:00009068                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p
UNDEF:0000906C                 extrn ___CxxFrameHandler3:near
UNDEF:0000906C                                         ; CODE XREF: __ehhandler$?run_dlgProc@WordStyleDlg@@EAGHIIJ@Z+23j
UNDEF:0000906C                                         ; __ehhandler$?switchToTheme@WordStyleDlg@@AAEXXZ+23j ...
UNDEF:00009070 ; const type_info::`vftable'
UNDEF:00009070                 extrn ??_7type_info@@6B@:near
UNDEF:00009070                                         ; DATA XREF: .data$r:Window `RTTI Type Descriptor'o
UNDEF:00009070                                         ; .data$r:ColourPicker `RTTI Type Descriptor'o ...
UNDEF:00009074 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:00009074                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:00009074                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:00009078                 extrn ___security_cookie:near
UNDEF:00009078                                         ; DATA XREF: ColourStaticTextHooker::colourStaticProc(HWND__ *,uint,uint,long)+9r
UNDEF:00009078                                         ; WordStyleDlg::run_dlgProc(uint,uint,long)+17r ...
UNDEF:0000907C                 extrn __fltused:near
UNDEF:0000907C
UNDEF:0000907C
UNDEF:0000907C                 end