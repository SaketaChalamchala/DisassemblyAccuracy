.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : B8831286A529DCFC76EF5538462ACE10
.rdata:00000000 ; Input CRC32 : F9C266E1
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\tinyxml.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG96261
.rdata:00000000 $SG96261:                               ; DATA XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+2Do
.rdata:00000000                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:00000036                 align 4
.rdata:00000038 ; wchar_t _SG96262
.rdata:00000038 $SG96262:                               ; DATA XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+32o
.rdata:00000038                                         ; .rdata:$SG96532o ...
.rdata:00000038                 unicode 0, <previous->
.rdata:00000038                 dw 3Eh
.rdata:00000038                 unicode 0, <parent == this>,0
.rdata:0000006A                 align 4
.rdata:0000006C ; const WCHAR _SG96426
.rdata:0000006C $SG96426:                               ; DATA XREF: TiXmlElement::SetAttribute(wchar_t const *,int)+1Do
.rdata:0000006C                 unicode 0, <%d>,0
.rdata:00000072 unk_72          db    0                 ; DATA XREF: .rdata:$SG96661o
.rdata:00000073                 db    0
.rdata:00000074 ; wchar_t _SG96452
.rdata:00000074 $SG96452:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+23o
.rdata:00000074                                         ; .rdata:$SG96680o
.rdata:00000074                 unicode 0, <    >,0
.rdata:0000007E                 align 10h
.rdata:00000080 ; wchar_t _SG96453
.rdata:00000080 $SG96453:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+42o
.rdata:00000080                 dw 3Ch
.rdata:00000080                 unicode 0, <%s>,0
.rdata:00000088 ; wchar_t _SG96458
.rdata:00000088 $SG96458        dd offset $SG96261+20h  ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+74o
.rdata:00000088                                         ; "inyxml.cpp"
.rdata:0000008C ; wchar_t _SG96461
.rdata:0000008C $SG96461:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+A5o
.rdata:0000008C                 unicode 0, < />
.rdata:0000008C                 dw 3Eh, 0
.rdata:00000094 ; wchar_t _SG96464
.rdata:00000094 $SG96464        dd offset $SG96262+6    ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+D8o
.rdata:00000094                                         ; "vious->parent == this"
.rdata:00000098 ; wchar_t _SG96465
.rdata:00000098 $SG96465:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+113o
.rdata:00000098                 dw 3Ch
.rdata:00000098                 unicode 0, </%s>
.rdata:00000098                 dw 3Eh, 0
.rdata:000000A4 ; wchar_t _SG96467
.rdata:000000A4 $SG96467        dd offset $SG96262+6    ; DATA XREF: TiXmlElement::Print(_iobuf *,int):loc_2305o
.rdata:000000A4                                         ; "vious->parent == this"
.rdata:000000A8 ; wchar_t _SG96472
.rdata:000000A8 $SG96472        dw 0Ah                  ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+162o
.rdata:000000AA                 align 4
.rdata:000000AC ; wchar_t _SG96473
.rdata:000000AC $SG96473        dw 0Ah                  ; DATA XREF: TiXmlElement::Print(_iobuf *,int):loc_2369o
.rdata:000000AE                 align 10h
.rdata:000000B0 ; wchar_t _SG96477
.rdata:000000B0 $SG96477:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+1B8o
.rdata:000000B0                 unicode 0, <    >,0
.rdata:000000BA                 align 4
.rdata:000000BC ; wchar_t _SG96478
.rdata:000000BC $SG96478:                               ; DATA XREF: TiXmlElement::Print(_iobuf *,int)+1D7o
.rdata:000000BC                 dw 3Ch
.rdata:000000BC                 unicode 0, </%s>
.rdata:000000BC                 dw 3Eh, 0
.rdata:000000C8 ; wchar_t _SG96532
.rdata:000000C8 $SG96532        dd offset $SG96262+4    ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+10o
.rdata:000000C8                                         ; "evious->parent == this"
.rdata:000000CC ; wchar_t _SG96545
.rdata:000000CC $SG96545        dd offset $SG96261+20h  ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+4Bo
.rdata:000000CC                                         ; "inyxml.cpp"
.rdata:000000D0 ; wchar_t _SG96556
.rdata:000000D0 $SG96556        dd offset $SG96262+6    ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+78o
.rdata:000000D0                                         ; "vious->parent == this"
.rdata:000000D4 ; wchar_t _SG96595
.rdata:000000D4 $SG96595        dd offset $SG96262+6    ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *):loc_2484o
.rdata:000000D4                                         ; "vious->parent == this"
.rdata:000000D8 ; wchar_t _SG96596
.rdata:000000D8 $SG96596:                               ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+C4o
.rdata:000000D8                 dw 3Ch
.rdata:000000D8                 unicode 0, </>,0
.rdata:000000DE                 align 10h
.rdata:000000E0 ; wchar_t _SG96617
.rdata:000000E0 $SG96617:                               ; DATA XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *):loc_24B5o
.rdata:000000E0                 unicode 0, < />
.rdata:000000E0                 dw 3Eh, 0
.rdata:000000E8 ; wchar_t _SG96661
.rdata:000000E8 $SG96661        dd offset unk_72        ; DATA XREF: TiXmlDocument::LoadFile(wchar_t const *)+60o
.rdata:000000EC ; wchar_t _SG96680
.rdata:000000EC $SG96680        dd offset $SG96452+3    ; DATA XREF: TiXmlDocument::SaveFile(wchar_t const *)+9o
.rdata:000000EC                                         ; "  "
.rdata:000000F0 ; wchar_t _SG96704
.rdata:000000F0 $SG96704        dw 0Ah                  ; DATA XREF: TiXmlDocument::Print(_iobuf *,int)+3Co
.rdata:000000F2                 align 4
.rdata:000000F4 ; wchar_t _SG96736
.rdata:000000F4 $SG96736:                               ; DATA XREF: TiXmlAttribute::Print(_iobuf *,int)+DDo
.rdata:000000F4                 unicode 0, <%s="%s">,0
.rdata:00000104 ; wchar_t _SG96738
.rdata:00000104 $SG96738:                               ; DATA XREF: TiXmlAttribute::Print(_iobuf *,int)+102o
.rdata:00000104                 unicode 0, <%s=>
.rdata:00000104                 dw 27h
.rdata:00000104                 unicode 0, <%s>
.rdata:00000104                 dw 27h, 0
.rdata:00000114 ; wchar_t _SG96764
.rdata:00000114 $SG96764        dd offset $SG96261+27h  ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+31o
.rdata:00000114                                         ; "洀氀⸀挀瀀瀀"
.rdata:00000118 ; wchar_t _SG96765
.rdata:00000118 $SG96765        dd offset $SG96262+5    ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+36o
.rdata:00000118                                         ; "瘀椀漀甀猀ⴀ㸀瀀愀爀攀渀琀"...
.rdata:0000011C ; wchar_t _SG96774
.rdata:0000011C $SG96774        dd offset $SG96261+27h  ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+63o
.rdata:0000011C                                         ; "洀氀⸀挀瀀瀀"
.rdata:00000120 ; wchar_t _SG96792
.rdata:00000120 $SG96792        dd offset $SG96261+22h  ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+89o
.rdata:00000120                                         ; "nyxml.cpp"
.rdata:00000124 ; wchar_t _SG96793
.rdata:00000124 $SG96793        dd offset $SG96262+5    ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+8Eo
.rdata:00000124                                         ; "瘀椀漀甀猀ⴀ㸀瀀愀爀攀渀琀"...
.rdata:00000128 ; wchar_t _SG96802
.rdata:00000128 $SG96802        dd offset $SG96261+22h  ; DATA XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+BBo
.rdata:00000128                                         ; "nyxml.cpp"
.rdata:0000012C ; wchar_t _SG96808
.rdata:0000012C $SG96808:                               ; DATA XREF: TiXmlAttribute::QueryIntValue(int *)+Bo
.rdata:0000012C                 unicode 0, <%d>,0
.rdata:00000132                 align 4
.rdata:00000134 ; wchar_t _SG96814
.rdata:00000134 $SG96814:                               ; DATA XREF: TiXmlAttribute::QueryDoubleValue(double *)+Bo
.rdata:00000134                 unicode 0, <%lf>,0
.rdata:0000013C ; const WCHAR _SG96820
.rdata:0000013C $SG96820:                               ; DATA XREF: TiXmlAttribute::SetIntValue(int)+1Do
.rdata:0000013C                 unicode 0, <%d>,0
.rdata:00000142                 align 4
.rdata:00000144 ; const WCHAR _SG96826
.rdata:00000144 $SG96826:                               ; DATA XREF: TiXmlAttribute::SetDoubleValue(double)+26o
.rdata:00000144                 unicode 0, <%lf>,0
.rdata:0000014C ; char _SG96842[]
.rdata:0000014C $SG96842        db '    ',0             ; DATA XREF: TiXmlComment::Print(_iobuf *,int)+27o
.rdata:00000151                 align 4
.rdata:00000154 ; wchar_t _SG96843
.rdata:00000154 $SG96843:                               ; DATA XREF: TiXmlComment::Print(_iobuf *,int)+42o
.rdata:00000154                 dw 3Ch
.rdata:00000154                 unicode 0, <!--%s-->
.rdata:00000154                 dw 3Eh, 0
.rdata:00000168 ; wchar_t _SG96871
.rdata:00000168 $SG96871:                               ; DATA XREF: TiXmlComment::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+7o
.rdata:00000168                 dw 3Ch
.rdata:00000168                 unicode 0, <!-->,0
.rdata:00000172                 align 4
.rdata:00000174 ; wchar_t _SG96880
.rdata:00000174 $SG96880:                               ; DATA XREF: TiXmlComment::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+2Bo
.rdata:00000174                 unicode 0, <-->
.rdata:00000174                 dw 3Eh, 0
.rdata:0000017C ; wchar_t _SG96896
.rdata:0000017C $SG96896:                               ; DATA XREF: TiXmlText::Print(_iobuf *,int)+56o
.rdata:0000017C                 unicode 0, <%s>,0
.rdata:00000182                 align 4
.rdata:00000184 ; wchar_t _SG96913
.rdata:00000184 $SG96913        dw 0                    ; DATA XREF: TiXmlText::Clone(void)+49o
.rdata:00000186                 db    0
.rdata:00000187                 db    0
.rdata:00000188 ; wchar_t _SG96926
.rdata:00000188 $SG96926:                               ; DATA XREF: TiXmlDeclaration::Print(_iobuf *,int)+7o
.rdata:00000188                 dw 3Ch
.rdata:00000188                 unicode 0, <?xml >,0
.rdata:00000196                 align 4
.rdata:00000198 ; wchar_t _SG96928
.rdata:00000198 $SG96928:                               ; DATA XREF: TiXmlDeclaration::Print(_iobuf *,int)+36o
.rdata:00000198                 unicode 0, <version="%s" >,0
.rdata:000001B4 ; wchar_t _SG96930
.rdata:000001B4 $SG96930:                               ; DATA XREF: TiXmlDeclaration::Print(_iobuf *,int)+65o
.rdata:000001B4                 unicode 0, <encoding="%s" >,0
.rdata:000001D2                 align 4
.rdata:000001D4 ; wchar_t _SG96932
.rdata:000001D4 $SG96932:                               ; DATA XREF: TiXmlDeclaration::Print(_iobuf *,int)+94o
.rdata:000001D4                 unicode 0, <standalone="%s" >,0
.rdata:000001F6                 align 4
.rdata:000001F8 ; wchar_t _SG96933
.rdata:000001F8 $SG96933:                               ; DATA XREF: TiXmlDeclaration::Print(_iobuf *,int):loc_29B1o
.rdata:000001F8                 unicode 0, <?>
.rdata:000001F8                 dw 3Eh, 0
.rdata:000001FE                 align 10h
.rdata:00000200 ; wchar_t _SG96961
.rdata:00000200 $SG96961:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+7o
.rdata:00000200                 dw 3Ch
.rdata:00000200                 unicode 0, <?xml >,0
.rdata:0000020E                 align 10h
.rdata:00000210 ; wchar_t _SG96982
.rdata:00000210 $SG96982:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+2Ao
.rdata:00000210                 unicode 0, <version=">,0
.rdata:00000224 ; wchar_t _SG96991
.rdata:00000224 $SG96991:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+4Eo
.rdata:00000224                 unicode 0, <" >,0
.rdata:0000022A                 align 4
.rdata:0000022C ; wchar_t _SG97012
.rdata:0000022C $SG97012:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+71o
.rdata:0000022C                 unicode 0, <encoding=">,0
.rdata:00000242                 align 4
.rdata:00000244 ; wchar_t _SG97021
.rdata:00000244 $SG97021:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+95o
.rdata:00000244                 unicode 0, <" >,0
.rdata:0000024A                 align 4
.rdata:0000024C ; wchar_t _SG97042
.rdata:0000024C $SG97042:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+B8o
.rdata:0000024C                 unicode 0, <standalone=">,0
.rdata:00000266                 align 4
.rdata:00000268 ; wchar_t _SG97051
.rdata:00000268 $SG97051:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+DCo
.rdata:00000268                 unicode 0, <" >,0
.rdata:0000026E                 align 10h
.rdata:00000270 ; wchar_t _SG97060
.rdata:00000270 $SG97060:                               ; DATA XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *):loc_2AB9o
.rdata:00000270                 unicode 0, <?>
.rdata:00000270                 dw 3Eh, 0
.rdata:00000276                 align 4
.rdata:00000278 ; wchar_t _SG97079
.rdata:00000278 $SG97079:                               ; DATA XREF: TiXmlUnknown::Print(_iobuf *,int)+23o
.rdata:00000278                 unicode 0, <    >,0
.rdata:00000282                 align 4
.rdata:00000284 ; wchar_t _SG97080
.rdata:00000284 $SG97080:                               ; DATA XREF: TiXmlUnknown::Print(_iobuf *,int)+42o
.rdata:00000284                 unicode 0, <%s>,0
.rdata:0000028A                 align 4
.rdata:0000028C ; const WCHAR _SG96077
.rdata:0000028C $SG96077:                               ; DATA XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+201o
.rdata:0000028C                 unicode 0, <&#x%04X;>,0
.rdata:0000029E                 align 10h
.rdata:000002A0 ; wchar_t _SG97113
.rdata:000002A0 $SG97113        dd offset $SG96262+6    ; DATA XREF: TiXmlUnknown::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+7o
.rdata:000002A0                                         ; "vious->parent == this"
.rdata:000002A4 ; wchar_t _SG97114
.rdata:000002A4 $SG97114        dd offset $SG96262+4    ; DATA XREF: TiXmlUnknown::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+13o
.rdata:000002A4                                         ; "evious->parent == this"
.rdata:000002A8 ; wchar_t _SG97131
.rdata:000002A8 $SG97131:                               ; DATA XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+3Do
.rdata:000002A8                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:000002DE                 align 10h
.rdata:000002E0 ; wchar_t _SG97132
.rdata:000002E0 $SG97132:                               ; DATA XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+42o
.rdata:000002E0                 unicode 0, <sentinel.next == &sentinel>,0
.rdata:00000316                 align 4
.rdata:00000318 ; wchar_t _SG97134
.rdata:00000318 $SG97134:                               ; DATA XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+5Fo
.rdata:00000318                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:0000034E                 align 10h
.rdata:00000350 ; wchar_t _SG97135
.rdata:00000350 $SG97135:                               ; DATA XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+64o
.rdata:00000350                 unicode 0, <sentinel.prev == &sentinel>,0
.rdata:00000386                 align 4
.rdata:00000388 ; wchar_t _SG97141
.rdata:00000388 $SG97141:                               ; DATA XREF: TiXmlAttributeSet::Add(TiXmlAttribute *)+21o
.rdata:00000388                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:000003BE                 align 10h
.rdata:000003C0 ; wchar_t _SG97142
.rdata:000003C0 $SG97142:                               ; DATA XREF: TiXmlAttributeSet::Add(TiXmlAttribute *)+26o
.rdata:000003C0                 unicode 0, <!Find( addMe->
.rdata:000003C0                 dw 3Eh
.rdata:000003C0                 unicode 0, <Name() )>,0
.rdata:000003EE                 align 10h
.rdata:000003F0 ; wchar_t _SG97153
.rdata:000003F0 $SG97153:                               ; DATA XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+6Co
.rdata:000003F0                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:00000426                 align 4
.rdata:00000428 ; wchar_t _SG97154
.rdata:00000428 $SG97154        dd offset $SG96261+30h  ; DATA XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+71o
.rdata:00000428                                         ; "pp"
.rdata:0000042C ; wchar_t _SG96144
.rdata:0000042C $SG96144:                               ; DATA XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+80o
.rdata:0000042C                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:00000462                 align 4
.rdata:00000464 ; wchar_t _SG96145
.rdata:00000464 $SG96145:                               ; DATA XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+85o
.rdata:00000464                 unicode 0, <firstChild == beforeThis>,0
.rdata:00000496                 align 4
.rdata:00000498 ; wchar_t _SG96158
.rdata:00000498 $SG96158:                               ; DATA XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+80o
.rdata:00000498                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:000004CE                 align 10h
.rdata:000004D0 ; wchar_t _SG96159
.rdata:000004D0 $SG96159:                               ; DATA XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+85o
.rdata:000004D0                 unicode 0, <lastChild == afterThis>,0
.rdata:000004FE                 align 10h
.rdata:00000500 ; wchar_t _SG96180
.rdata:00000500 $SG96180:                               ; DATA XREF: TiXmlNode::RemoveChild(TiXmlNode *)+1Do
.rdata:00000500                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:00000536                 align 4
.rdata:00000538 ; wchar_t _SG96181
.rdata:00000538 $SG96181        dd offset $SG96261+30h  ; DATA XREF: TiXmlNode::RemoveChild(TiXmlNode *)+22o
.rdata:00000538                                         ; "pp"
.rdata:0000053C ; wchar_t _SG96251
.rdata:0000053C $SG96251:                               ; DATA XREF: TiXmlNode::IterateChildren(TiXmlNode *)+29o
.rdata:0000053C                 unicode 0, <..\src\TinyXml\tinyxml.cpp>,0
.rdata:00000572                 align 4
.rdata:00000574 ; wchar_t _SG96252
.rdata:00000574 $SG96252:                               ; DATA XREF: TiXmlNode::IterateChildren(TiXmlNode *)+2Eo
.rdata:00000574                 unicode 0, <previous->
.rdata:00000574                 dw 3Eh
.rdata:00000574                 unicode 0, <parent == this>,0
.rdata:000005A6                 align 4
.rdata:000005A6 _rdata          ends
.rdata:000005A6
.data:000005A8 ; ===========================================================================
.data:000005A8
.data:000005A8 ; Segment type: Pure data
.data:000005A8 ; Segment permissions: Read/Write
.data:000005A8 _data           segment byte public 'DATA' use32
.data:000005A8                 assume cs:_data
.data:000005A8                 ;org 5A8h
.data:000005A8                 public ?condenseWhiteSpace@TiXmlBase@@0_NA
.data:000005A8 ; private: static bool TiXmlBase::condenseWhiteSpace
.data:000005A8 ?condenseWhiteSpace@TiXmlBase@@0_NA db    1
.data:000005A9                 align 4
.data:000005A9 _data           ends
.data:000005A9
.text$mn:000005AC ; ===========================================================================
.text$mn:000005AC
.text$mn:000005AC ; Segment type: Pure code
.text$mn:000005AC ; Segment permissions: Read/Execute
.text$mn:000005AC _text$mn        segment para public 'CODE' use32
.text$mn:000005AC                 assume cs:_text$mn
.text$mn:000005AC                 ;org 5ACh
.text$mn:000005AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000005AC
.text$mn:000005AC ; =============== S U B R O U T I N E =======================================
.text$mn:000005AC
.text$mn:000005AC ; Attributes: bp-based frame
.text$mn:000005AC
.text$mn:000005AC ; public: __thiscall TiXmlBase::StringToBuffer::StringToBuffer(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000005AC                 public ??0StringToBuffer@TiXmlBase@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:000005AC ??0StringToBuffer@TiXmlBase@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:000005AC                                         ; CODE XREF: TiXmlDocument::LoadFile(void)+32p
.text$mn:000005AC                                         ; TiXmlDocument::SaveFile(void)+32p
.text$mn:000005AC
.text$mn:000005AC var_8           = dword ptr -8
.text$mn:000005AC var_4           = dword ptr -4
.text$mn:000005AC arg_0           = dword ptr  8
.text$mn:000005AC
.text$mn:000005AC                 push    ebp
.text$mn:000005AD                 mov     ebp, esp
.text$mn:000005AF                 sub     esp, 8
.text$mn:000005B2                 mov     [ebp+var_4], ecx
.text$mn:000005B5                 mov     ecx, [ebp+arg_0]
.text$mn:000005B8                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000005BD                 add     eax, 1
.text$mn:000005C0                 xor     ecx, ecx
.text$mn:000005C2                 mov     edx, 2
.text$mn:000005C7                 mul     edx
.text$mn:000005C9                 seto    cl
.text$mn:000005CC                 neg     ecx
.text$mn:000005CE                 or      ecx, eax
.text$mn:000005D0                 push    ecx             ; unsigned int
.text$mn:000005D1                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:000005D6                 add     esp, 4
.text$mn:000005D9                 mov     [ebp+var_8], eax
.text$mn:000005DC                 mov     eax, [ebp+var_4]
.text$mn:000005DF                 mov     ecx, [ebp+var_8]
.text$mn:000005E2                 mov     [eax], ecx
.text$mn:000005E4                 mov     edx, [ebp+var_4]
.text$mn:000005E7                 cmp     dword ptr [edx], 0
.text$mn:000005EA                 jz      short loc_601
.text$mn:000005EC                 mov     ecx, [ebp+arg_0]
.text$mn:000005EF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000005F4                 push    eax             ; lpString2
.text$mn:000005F5                 mov     eax, [ebp+var_4]
.text$mn:000005F8                 mov     ecx, [eax]
.text$mn:000005FA                 push    ecx             ; lpString1
.text$mn:000005FB                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00000601
.text$mn:00000601 loc_601:                                ; CODE XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ej
.text$mn:00000601                 mov     eax, [ebp+var_4]
.text$mn:00000604                 mov     esp, ebp
.text$mn:00000606                 pop     ebp
.text$mn:00000607                 retn    4
.text$mn:00000607 ??0StringToBuffer@TiXmlBase@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00000607
.text$mn:00000607 ; ---------------------------------------------------------------------------
.text$mn:0000060A                 align 4
.text$mn:0000060C
.text$mn:0000060C ; =============== S U B R O U T I N E =======================================
.text$mn:0000060C
.text$mn:0000060C ; Attributes: bp-based frame
.text$mn:0000060C
.text$mn:0000060C ; _DWORD __thiscall TiXmlBase::StringToBuffer::~StringToBuffer(TiXmlBase::StringToBuffer *__hidden this)
.text$mn:0000060C                 public ??1StringToBuffer@TiXmlBase@@QAE@XZ
.text$mn:0000060C ??1StringToBuffer@TiXmlBase@@QAE@XZ proc near
.text$mn:0000060C                                         ; CODE XREF: TiXmlDocument::LoadFile(void)+65p
.text$mn:0000060C                                         ; TiXmlDocument::LoadFile(void)+7Dp ...
.text$mn:0000060C
.text$mn:0000060C var_8           = dword ptr -8
.text$mn:0000060C var_4           = dword ptr -4
.text$mn:0000060C
.text$mn:0000060C                 push    ebp
.text$mn:0000060D                 mov     ebp, esp
.text$mn:0000060F                 sub     esp, 8
.text$mn:00000612                 mov     [ebp+var_4], ecx
.text$mn:00000615                 mov     eax, [ebp+var_4]
.text$mn:00000618                 mov     ecx, [eax]
.text$mn:0000061A                 mov     [ebp+var_8], ecx
.text$mn:0000061D                 mov     edx, [ebp+var_8]
.text$mn:00000620                 push    edx             ; void *
.text$mn:00000621                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:00000626                 add     esp, 4
.text$mn:00000629                 mov     esp, ebp
.text$mn:0000062B                 pop     ebp
.text$mn:0000062C                 retn
.text$mn:0000062C ??1StringToBuffer@TiXmlBase@@QAE@XZ endp
.text$mn:0000062C
.text$mn:0000062C ; ---------------------------------------------------------------------------
.text$mn:0000062D                 db 0Fh dup(0CCh)
.text$mn:0000063C
.text$mn:0000063C ; =============== S U B R O U T I N E =======================================
.text$mn:0000063C
.text$mn:0000063C ; Attributes: bp-based frame
.text$mn:0000063C
.text$mn:0000063C ; protected: static void __cdecl TiXmlBase::PutString(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)
.text$mn:0000063C                 public ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z
.text$mn:0000063C ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z proc near
.text$mn:0000063C                                         ; CODE XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+29p
.text$mn:0000063C                                         ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+5Bp ...
.text$mn:0000063C
.text$mn:0000063C var_2C          = byte ptr -2Ch
.text$mn:0000063C var_10          = dword ptr -10h
.text$mn:0000063C var_C           = dword ptr -0Ch
.text$mn:0000063C var_4           = dword ptr -4
.text$mn:0000063C arg_0           = dword ptr  8
.text$mn:0000063C arg_4           = dword ptr  0Ch
.text$mn:0000063C
.text$mn:0000063C                 push    ebp
.text$mn:0000063D                 mov     ebp, esp
.text$mn:0000063F                 push    0FFFFFFFFh
.text$mn:00000641                 push    offset __ehhandler$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z
.text$mn:00000646                 mov     eax, large fs:0
.text$mn:0000064C                 push    eax
.text$mn:0000064D                 sub     esp, 20h
.text$mn:00000650                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000655                 xor     eax, ebp
.text$mn:00000657                 mov     [ebp+var_10], eax
.text$mn:0000065A                 push    eax
.text$mn:0000065B                 lea     eax, [ebp+var_C]
.text$mn:0000065E                 mov     large fs:0, eax
.text$mn:00000664                 lea     ecx, [ebp+var_2C]
.text$mn:00000667                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000066C                 mov     [ebp+var_4], 0
.text$mn:00000673                 lea     eax, [ebp+var_2C]
.text$mn:00000676                 push    eax
.text$mn:00000677                 mov     ecx, [ebp+arg_0]
.text$mn:0000067A                 push    ecx
.text$mn:0000067B                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00000680                 add     esp, 8
.text$mn:00000683                 lea     edx, [ebp+var_2C]
.text$mn:00000686                 push    edx
.text$mn:00000687                 mov     eax, [ebp+arg_4]
.text$mn:0000068A                 push    eax
.text$mn:0000068B                 call    ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000690                 add     esp, 8
.text$mn:00000693                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000069A                 lea     ecx, [ebp+var_2C]
.text$mn:0000069D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000006A2                 mov     ecx, [ebp+var_C]
.text$mn:000006A5                 mov     large fs:0, ecx
.text$mn:000006AC                 pop     ecx
.text$mn:000006AD                 mov     ecx, [ebp+var_10]
.text$mn:000006B0                 xor     ecx, ebp
.text$mn:000006B2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000006B7                 mov     esp, ebp
.text$mn:000006B9                 pop     ebp
.text$mn:000006BA                 retn
.text$mn:000006BA ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z endp
.text$mn:000006BA
.text$mn:000006BA ; ---------------------------------------------------------------------------
.text$mn:000006BB                 align 4
.text$mn:000006BC
.text$mn:000006BC ; =============== S U B R O U T I N E =======================================
.text$mn:000006BC
.text$mn:000006BC ; Attributes: bp-based frame
.text$mn:000006BC
.text$mn:000006BC ; protected: static void __cdecl TiXmlBase::PutString(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000006BC                 public ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z
.text$mn:000006BC ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z proc near
.text$mn:000006BC                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+3Fp
.text$mn:000006BC                                         ; TiXmlAttribute::Print(_iobuf *,int)+69p ...
.text$mn:000006BC
.text$mn:000006BC Src             = word ptr -50h
.text$mn:000006BC var_4C          = dword ptr -4Ch
.text$mn:000006BC var_48          = dword ptr -48h
.text$mn:000006BC String          = word ptr -44h
.text$mn:000006BC var_4           = dword ptr -4
.text$mn:000006BC arg_0           = dword ptr  8
.text$mn:000006BC arg_4           = dword ptr  0Ch
.text$mn:000006BC
.text$mn:000006BC                 push    ebp
.text$mn:000006BD                 mov     ebp, esp
.text$mn:000006BF                 sub     esp, 50h
.text$mn:000006C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000006C7                 xor     eax, ebp
.text$mn:000006C9                 mov     [ebp+var_4], eax
.text$mn:000006CC                 mov     [ebp+var_48], 0
.text$mn:000006D3
.text$mn:000006D3 loc_6D3:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_910j
.text$mn:000006D3                 mov     ecx, [ebp+arg_0]
.text$mn:000006D6                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000006DB                 cmp     [ebp+var_48], eax
.text$mn:000006DE                 jge     loc_915
.text$mn:000006E4                 mov     eax, [ebp+var_48]
.text$mn:000006E7                 push    eax
.text$mn:000006E8                 mov     ecx, [ebp+arg_0]
.text$mn:000006EB                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:000006F0                 movzx   ecx, word ptr [eax]
.text$mn:000006F3                 mov     [ebp+var_4C], ecx
.text$mn:000006F6                 cmp     [ebp+var_4C], 26h ; '&'
.text$mn:000006FA                 jnz     loc_78A
.text$mn:00000700                 mov     ecx, [ebp+arg_0]
.text$mn:00000703                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00000708                 sub     eax, 2
.text$mn:0000070B                 cmp     [ebp+var_48], eax
.text$mn:0000070E                 jge     short loc_78A
.text$mn:00000710                 mov     edx, [ebp+var_48]
.text$mn:00000713                 add     edx, 1
.text$mn:00000716                 push    edx
.text$mn:00000717                 mov     ecx, [ebp+arg_0]
.text$mn:0000071A                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:0000071F                 movzx   eax, word ptr [eax]
.text$mn:00000722                 cmp     eax, 23h ; '#'
.text$mn:00000725                 jnz     short loc_78A
.text$mn:00000727                 mov     ecx, [ebp+var_48]
.text$mn:0000072A                 add     ecx, 2
.text$mn:0000072D                 push    ecx
.text$mn:0000072E                 mov     ecx, [ebp+arg_0]
.text$mn:00000731                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00000736                 movzx   edx, word ptr [eax]
.text$mn:00000739                 cmp     edx, 78h ; 'x'
.text$mn:0000073C                 jnz     short loc_78A
.text$mn:0000073E
.text$mn:0000073E loc_73E:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_783j
.text$mn:0000073E                 mov     ecx, [ebp+arg_0]
.text$mn:00000741                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00000746                 cmp     [ebp+var_48], eax
.text$mn:00000749                 jge     short loc_785
.text$mn:0000074B                 push    1               ; int
.text$mn:0000074D                 mov     ecx, [ebp+arg_0]
.text$mn:00000750                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000755                 mov     ecx, [ebp+var_48]
.text$mn:00000758                 lea     edx, [eax+ecx*2]
.text$mn:0000075B                 push    edx             ; Src
.text$mn:0000075C                 mov     ecx, [ebp+arg_4]
.text$mn:0000075F                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00000764                 mov     eax, [ebp+var_48]
.text$mn:00000767                 add     eax, 1
.text$mn:0000076A                 mov     [ebp+var_48], eax
.text$mn:0000076D                 mov     ecx, [ebp+var_48]
.text$mn:00000770                 push    ecx
.text$mn:00000771                 mov     ecx, [ebp+arg_0]
.text$mn:00000774                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00000779                 movzx   edx, word ptr [eax]
.text$mn:0000077C                 cmp     edx, 3Bh ; ';'
.text$mn:0000077F                 jnz     short loc_783
.text$mn:00000781                 jmp     short loc_785
.text$mn:00000783 ; ---------------------------------------------------------------------------
.text$mn:00000783
.text$mn:00000783 loc_783:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+C3j
.text$mn:00000783                 jmp     short loc_73E
.text$mn:00000785 ; ---------------------------------------------------------------------------
.text$mn:00000785
.text$mn:00000785 loc_785:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+8Dj
.text$mn:00000785                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+C5j
.text$mn:00000785                 jmp     loc_910
.text$mn:0000078A ; ---------------------------------------------------------------------------
.text$mn:0000078A
.text$mn:0000078A loc_78A:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Ej
.text$mn:0000078A                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+52j ...
.text$mn:0000078A                 cmp     [ebp+var_4C], 26h ; '&'
.text$mn:0000078E                 jnz     short loc_7C4
.text$mn:00000790                 mov     eax, 0Ch
.text$mn:00000795                 imul    ecx, eax, 0
.text$mn:00000798                 mov     edx, dword ptr ds:(?entity@TiXmlBase@@0PAUEntity@1@A+4)[ecx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:0000079E                 push    edx             ; int
.text$mn:0000079F                 mov     eax, 0Ch
.text$mn:000007A4                 imul    ecx, eax, 0
.text$mn:000007A7                 mov     edx, dword ptr ds:?entity@TiXmlBase@@0PAUEntity@1@A[ecx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:000007AD                 push    edx             ; Src
.text$mn:000007AE                 mov     ecx, [ebp+arg_4]
.text$mn:000007B1                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:000007B6                 mov     eax, [ebp+var_48]
.text$mn:000007B9                 add     eax, 1
.text$mn:000007BC                 mov     [ebp+var_48], eax
.text$mn:000007BF                 jmp     loc_910
.text$mn:000007C4 ; ---------------------------------------------------------------------------
.text$mn:000007C4
.text$mn:000007C4 loc_7C4:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+D2j
.text$mn:000007C4                 cmp     [ebp+var_4C], 3Ch ; '<'
.text$mn:000007C8                 jnz     short loc_7FE
.text$mn:000007CA                 mov     ecx, 0Ch
.text$mn:000007CF                 shl     ecx, 0
.text$mn:000007D2                 mov     edx, dword ptr ds:(?entity@TiXmlBase@@0PAUEntity@1@A+4)[ecx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:000007D8                 push    edx             ; int
.text$mn:000007D9                 mov     eax, 0Ch
.text$mn:000007DE                 shl     eax, 0
.text$mn:000007E1                 mov     ecx, dword ptr ds:?entity@TiXmlBase@@0PAUEntity@1@A[eax] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:000007E7                 push    ecx             ; Src
.text$mn:000007E8                 mov     ecx, [ebp+arg_4]
.text$mn:000007EB                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:000007F0                 mov     edx, [ebp+var_48]
.text$mn:000007F3                 add     edx, 1
.text$mn:000007F6                 mov     [ebp+var_48], edx
.text$mn:000007F9                 jmp     loc_910
.text$mn:000007FE ; ---------------------------------------------------------------------------
.text$mn:000007FE
.text$mn:000007FE loc_7FE:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10Cj
.text$mn:000007FE                 cmp     [ebp+var_4C], 3Eh ; '>'
.text$mn:00000802                 jnz     short loc_836
.text$mn:00000804                 mov     eax, 0Ch
.text$mn:00000809                 shl     eax, 1
.text$mn:0000080B                 mov     ecx, dword ptr ds:(?entity@TiXmlBase@@0PAUEntity@1@A+4)[eax] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000811                 push    ecx             ; int
.text$mn:00000812                 mov     edx, 0Ch
.text$mn:00000817                 shl     edx, 1
.text$mn:00000819                 mov     eax, dword ptr ds:?entity@TiXmlBase@@0PAUEntity@1@A[edx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:0000081F                 push    eax             ; Src
.text$mn:00000820                 mov     ecx, [ebp+arg_4]
.text$mn:00000823                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00000828                 mov     ecx, [ebp+var_48]
.text$mn:0000082B                 add     ecx, 1
.text$mn:0000082E                 mov     [ebp+var_48], ecx
.text$mn:00000831                 jmp     loc_910
.text$mn:00000836 ; ---------------------------------------------------------------------------
.text$mn:00000836
.text$mn:00000836 loc_836:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+146j
.text$mn:00000836                 cmp     [ebp+var_4C], 22h ; '"'
.text$mn:0000083A                 jnz     short loc_870
.text$mn:0000083C                 mov     edx, 0Ch
.text$mn:00000841                 imul    eax, edx, 3
.text$mn:00000844                 mov     ecx, dword ptr ds:(?entity@TiXmlBase@@0PAUEntity@1@A+4)[eax] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:0000084A                 push    ecx             ; int
.text$mn:0000084B                 mov     edx, 0Ch
.text$mn:00000850                 imul    eax, edx, 3
.text$mn:00000853                 mov     ecx, dword ptr ds:?entity@TiXmlBase@@0PAUEntity@1@A[eax] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000859                 push    ecx             ; Src
.text$mn:0000085A                 mov     ecx, [ebp+arg_4]
.text$mn:0000085D                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00000862                 mov     edx, [ebp+var_48]
.text$mn:00000865                 add     edx, 1
.text$mn:00000868                 mov     [ebp+var_48], edx
.text$mn:0000086B                 jmp     loc_910
.text$mn:00000870 ; ---------------------------------------------------------------------------
.text$mn:00000870
.text$mn:00000870 loc_870:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+17Ej
.text$mn:00000870                 cmp     [ebp+var_4C], 27h ; '''
.text$mn:00000874                 jnz     short loc_8A7
.text$mn:00000876                 mov     eax, 0Ch
.text$mn:0000087B                 shl     eax, 2
.text$mn:0000087E                 mov     ecx, dword ptr ds:(?entity@TiXmlBase@@0PAUEntity@1@A+4)[eax] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000884                 push    ecx             ; int
.text$mn:00000885                 mov     edx, 0Ch
.text$mn:0000088A                 shl     edx, 2
.text$mn:0000088D                 mov     eax, dword ptr ds:?entity@TiXmlBase@@0PAUEntity@1@A[edx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000893                 push    eax             ; Src
.text$mn:00000894                 mov     ecx, [ebp+arg_4]
.text$mn:00000897                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000089C                 mov     ecx, [ebp+var_48]
.text$mn:0000089F                 add     ecx, 1
.text$mn:000008A2                 mov     [ebp+var_48], ecx
.text$mn:000008A5                 jmp     short loc_910
.text$mn:000008A7 ; ---------------------------------------------------------------------------
.text$mn:000008A7
.text$mn:000008A7 loc_8A7:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1B8j
.text$mn:000008A7                 cmp     [ebp+var_4C], 20h ; ' '
.text$mn:000008AB                 jl      short loc_8B3
.text$mn:000008AD                 cmp     [ebp+var_4C], 7Eh ; '~'
.text$mn:000008B1                 jle     short loc_8F1
.text$mn:000008B3
.text$mn:000008B3 loc_8B3:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1EFj
.text$mn:000008B3                 mov     edx, [ebp+var_4C]
.text$mn:000008B6                 and     edx, 0FFFFh
.text$mn:000008BC                 push    edx
.text$mn:000008BD                 push    offset $SG96077 ; "&#x%04X;"
.text$mn:000008C2                 lea     eax, [ebp+String]
.text$mn:000008C5                 push    eax             ; LPWSTR
.text$mn:000008C6                 call    dword ptr ds:__imp__wsprintfW
.text$mn:000008CC                 add     esp, 0Ch
.text$mn:000008CF                 lea     ecx, [ebp+String]
.text$mn:000008D2                 push    ecx             ; lpString
.text$mn:000008D3                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000008D9                 push    eax             ; int
.text$mn:000008DA                 lea     edx, [ebp+String]
.text$mn:000008DD                 push    edx             ; Src
.text$mn:000008DE                 mov     ecx, [ebp+arg_4]
.text$mn:000008E1                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:000008E6                 mov     eax, [ebp+var_48]
.text$mn:000008E9                 add     eax, 1
.text$mn:000008EC                 mov     [ebp+var_48], eax
.text$mn:000008EF                 jmp     short loc_910
.text$mn:000008F1 ; ---------------------------------------------------------------------------
.text$mn:000008F1
.text$mn:000008F1 loc_8F1:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1F5j
.text$mn:000008F1                 mov     cx, word ptr [ebp+var_4C]
.text$mn:000008F5                 mov     [ebp+Src], cx
.text$mn:000008F9                 push    1               ; int
.text$mn:000008FB                 lea     edx, [ebp+Src]
.text$mn:000008FE                 push    edx             ; Src
.text$mn:000008FF                 mov     ecx, [ebp+arg_4]
.text$mn:00000902                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00000907                 mov     eax, [ebp+var_48]
.text$mn:0000090A                 add     eax, 1
.text$mn:0000090D                 mov     [ebp+var_48], eax
.text$mn:00000910
.text$mn:00000910 loc_910:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_785j
.text$mn:00000910                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+103j ...
.text$mn:00000910                 jmp     loc_6D3
.text$mn:00000915 ; ---------------------------------------------------------------------------
.text$mn:00000915
.text$mn:00000915 loc_915:                                ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+22j
.text$mn:00000915                 mov     ecx, [ebp+var_4]
.text$mn:00000918                 xor     ecx, ebp
.text$mn:0000091A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000091F                 mov     esp, ebp
.text$mn:00000921                 pop     ebp
.text$mn:00000922                 retn
.text$mn:00000922 ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z endp
.text$mn:00000922
.text$mn:00000922 ; ---------------------------------------------------------------------------
.text$mn:00000923                 db 9 dup(0CCh)
.text$mn:0000092C
.text$mn:0000092C ; =============== S U B R O U T I N E =======================================
.text$mn:0000092C
.text$mn:0000092C ; Attributes: bp-based frame
.text$mn:0000092C
.text$mn:0000092C ; class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> & __cdecl operator>>(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> &, class TiXmlNode &)
.text$mn:0000092C                 public ??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z
.text$mn:0000092C ??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z proc near
.text$mn:0000092C
.text$mn:0000092C var_30          = dword ptr -30h
.text$mn:0000092C var_2C          = byte ptr -2Ch
.text$mn:0000092C var_10          = dword ptr -10h
.text$mn:0000092C var_C           = dword ptr -0Ch
.text$mn:0000092C var_4           = dword ptr -4
.text$mn:0000092C arg_0           = dword ptr  8
.text$mn:0000092C arg_4           = dword ptr  0Ch
.text$mn:0000092C
.text$mn:0000092C                 push    ebp
.text$mn:0000092D                 mov     ebp, esp
.text$mn:0000092F                 push    0FFFFFFFFh
.text$mn:00000931                 push    offset __ehhandler$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z
.text$mn:00000936                 mov     eax, large fs:0
.text$mn:0000093C                 push    eax
.text$mn:0000093D                 sub     esp, 24h
.text$mn:00000940                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000945                 xor     eax, ebp
.text$mn:00000947                 mov     [ebp+var_10], eax
.text$mn:0000094A                 push    eax
.text$mn:0000094B                 lea     eax, [ebp+var_C]
.text$mn:0000094E                 mov     large fs:0, eax
.text$mn:00000954                 lea     ecx, [ebp+var_2C]
.text$mn:00000957                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000095C                 mov     [ebp+var_4], 0
.text$mn:00000963                 push    1F40h
.text$mn:00000968                 lea     ecx, [ebp+var_2C]
.text$mn:0000096B                 call    ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)
.text$mn:00000970                 lea     eax, [ebp+var_2C]
.text$mn:00000973                 push    eax
.text$mn:00000974                 mov     ecx, [ebp+arg_0]
.text$mn:00000977                 push    ecx
.text$mn:00000978                 mov     edx, [ebp+arg_4]
.text$mn:0000097B                 mov     eax, [edx]
.text$mn:0000097D                 mov     ecx, [ebp+arg_4]
.text$mn:00000980                 mov     edx, [eax+18h]
.text$mn:00000983                 call    edx
.text$mn:00000985                 push    0
.text$mn:00000987                 lea     ecx, [ebp+var_2C]
.text$mn:0000098A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000098F                 push    eax
.text$mn:00000990                 mov     eax, [ebp+arg_4]
.text$mn:00000993                 mov     edx, [eax]
.text$mn:00000995                 mov     ecx, [ebp+arg_4]
.text$mn:00000998                 mov     eax, [edx+0Ch]
.text$mn:0000099B                 call    eax
.text$mn:0000099D                 mov     ecx, [ebp+arg_0]
.text$mn:000009A0                 mov     [ebp+var_30], ecx
.text$mn:000009A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000009AA                 lea     ecx, [ebp+var_2C]
.text$mn:000009AD                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000009B2                 mov     eax, [ebp+var_30]
.text$mn:000009B5                 mov     ecx, [ebp+var_C]
.text$mn:000009B8                 mov     large fs:0, ecx
.text$mn:000009BF                 pop     ecx
.text$mn:000009C0                 mov     ecx, [ebp+var_10]
.text$mn:000009C3                 xor     ecx, ebp
.text$mn:000009C5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000009CA                 mov     esp, ebp
.text$mn:000009CC                 pop     ebp
.text$mn:000009CD                 retn
.text$mn:000009CD ??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z endp
.text$mn:000009CD
.text$mn:000009CD ; ---------------------------------------------------------------------------
.text$mn:000009CE                 db 0Eh dup(0CCh)
.text$mn:000009DC
.text$mn:000009DC ; =============== S U B R O U T I N E =======================================
.text$mn:000009DC
.text$mn:000009DC ; Attributes: bp-based frame
.text$mn:000009DC
.text$mn:000009DC ; class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> & __cdecl operator<<(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &, class TiXmlNode const &)
.text$mn:000009DC                 public ??6@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@AAV01@ABVTiXmlNode@@@Z
.text$mn:000009DC ??6@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@AAV01@ABVTiXmlNode@@@Z proc near
.text$mn:000009DC
.text$mn:000009DC arg_0           = dword ptr  8
.text$mn:000009DC arg_4           = dword ptr  0Ch
.text$mn:000009DC
.text$mn:000009DC                 push    ebp
.text$mn:000009DD                 mov     ebp, esp
.text$mn:000009DF                 mov     eax, [ebp+arg_0]
.text$mn:000009E2                 push    eax
.text$mn:000009E3                 mov     ecx, [ebp+arg_4]
.text$mn:000009E6                 mov     edx, [ecx]
.text$mn:000009E8                 mov     ecx, [ebp+arg_4]
.text$mn:000009EB                 mov     eax, [edx+8]
.text$mn:000009EE                 call    eax
.text$mn:000009F0                 mov     eax, [ebp+arg_0]
.text$mn:000009F3                 pop     ebp
.text$mn:000009F4                 retn
.text$mn:000009F4 ??6@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@AAV01@ABVTiXmlNode@@@Z endp
.text$mn:000009F4
.text$mn:000009F4 ; ---------------------------------------------------------------------------
.text$mn:000009F5                 db 7 dup(0CCh)
.text$mn:000009FC
.text$mn:000009FC ; =============== S U B R O U T I N E =======================================
.text$mn:000009FC
.text$mn:000009FC ; Attributes: bp-based frame
.text$mn:000009FC
.text$mn:000009FC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __cdecl operator<<(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class TiXmlNode const &)
.text$mn:000009FC                 public ??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z
.text$mn:000009FC ??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z proc near
.text$mn:000009FC
.text$mn:000009FC var_D0          = byte ptr -0D0h
.text$mn:000009FC var_38          = dword ptr -38h
.text$mn:000009FC var_34          = dword ptr -34h
.text$mn:000009FC var_30          = dword ptr -30h
.text$mn:000009FC var_2C          = byte ptr -2Ch
.text$mn:000009FC var_10          = dword ptr -10h
.text$mn:000009FC var_C           = dword ptr -0Ch
.text$mn:000009FC var_4           = dword ptr -4
.text$mn:000009FC arg_0           = dword ptr  8
.text$mn:000009FC arg_4           = dword ptr  0Ch
.text$mn:000009FC
.text$mn:000009FC                 push    ebp
.text$mn:000009FD                 mov     ebp, esp
.text$mn:000009FF                 push    0FFFFFFFFh
.text$mn:00000A01                 push    offset __ehhandler$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z
.text$mn:00000A06                 mov     eax, large fs:0
.text$mn:00000A0C                 push    eax
.text$mn:00000A0D                 sub     esp, 0C4h
.text$mn:00000A13                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000A18                 xor     eax, ebp
.text$mn:00000A1A                 mov     [ebp+var_10], eax
.text$mn:00000A1D                 push    eax
.text$mn:00000A1E                 lea     eax, [ebp+var_C]
.text$mn:00000A21                 mov     large fs:0, eax
.text$mn:00000A27                 push    1
.text$mn:00000A29                 push    2
.text$mn:00000A2B                 lea     ecx, [ebp+var_D0]
.text$mn:00000A31                 call    ??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)
.text$mn:00000A36                 mov     [ebp+var_4], 0
.text$mn:00000A3D                 lea     eax, [ebp+var_D0]
.text$mn:00000A43                 push    eax
.text$mn:00000A44                 mov     ecx, [ebp+arg_4]
.text$mn:00000A47                 mov     edx, [ecx]
.text$mn:00000A49                 mov     ecx, [ebp+arg_4]
.text$mn:00000A4C                 mov     eax, [edx+8]
.text$mn:00000A4F                 call    eax
.text$mn:00000A51                 lea     ecx, [ebp+var_2C]
.text$mn:00000A54                 push    ecx
.text$mn:00000A55                 lea     ecx, [ebp+var_D0]
.text$mn:00000A5B                 call    ?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)
.text$mn:00000A60                 mov     [ebp+var_38], eax
.text$mn:00000A63                 mov     edx, [ebp+var_38]
.text$mn:00000A66                 mov     [ebp+var_34], edx
.text$mn:00000A69                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000A6D                 mov     eax, [ebp+var_34]
.text$mn:00000A70                 push    eax
.text$mn:00000A71                 mov     ecx, [ebp+arg_0]
.text$mn:00000A74                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000A79                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000A7D                 lea     ecx, [ebp+var_2C]
.text$mn:00000A80                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000A85                 mov     ecx, [ebp+arg_0]
.text$mn:00000A88                 mov     [ebp+var_30], ecx
.text$mn:00000A8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000A92                 lea     ecx, [ebp+var_D0]
.text$mn:00000A98                 call    ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vbase destructor(void)
.text$mn:00000A9D                 mov     eax, [ebp+var_30]
.text$mn:00000AA0                 mov     ecx, [ebp+var_C]
.text$mn:00000AA3                 mov     large fs:0, ecx
.text$mn:00000AAA                 pop     ecx
.text$mn:00000AAB                 mov     ecx, [ebp+var_10]
.text$mn:00000AAE                 xor     ecx, ebp
.text$mn:00000AB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000AB5                 mov     esp, ebp
.text$mn:00000AB7                 pop     ebp
.text$mn:00000AB8                 retn
.text$mn:00000AB8 ??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z endp
.text$mn:00000AB8
.text$mn:00000AB8 ; ---------------------------------------------------------------------------
.text$mn:00000AB9                 align 4
.text$mn:00000ABC
.text$mn:00000ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00000ABC
.text$mn:00000ABC ; Attributes: bp-based frame
.text$mn:00000ABC
.text$mn:00000ABC ; _DWORD __thiscall TiXmlNode::~TiXmlNode(TiXmlNode *__hidden this)
.text$mn:00000ABC                 public ??1TiXmlNode@@UAE@XZ
.text$mn:00000ABC ??1TiXmlNode@@UAE@XZ proc near          ; CODE XREF: TiXmlElement::~TiXmlElement(void)+ABp
.text$mn:00000ABC                                         ; __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$0+3j ...
.text$mn:00000ABC
.text$mn:00000ABC var_24          = dword ptr -24h
.text$mn:00000ABC var_20          = dword ptr -20h
.text$mn:00000ABC var_1C          = dword ptr -1Ch
.text$mn:00000ABC var_18          = dword ptr -18h
.text$mn:00000ABC var_14          = dword ptr -14h
.text$mn:00000ABC var_10          = dword ptr -10h
.text$mn:00000ABC var_C           = dword ptr -0Ch
.text$mn:00000ABC var_4           = dword ptr -4
.text$mn:00000ABC
.text$mn:00000ABC                 push    ebp
.text$mn:00000ABD                 mov     ebp, esp
.text$mn:00000ABF                 push    0FFFFFFFFh
.text$mn:00000AC1                 push    offset __ehhandler$??1TiXmlNode@@UAE@XZ
.text$mn:00000AC6                 mov     eax, large fs:0
.text$mn:00000ACC                 push    eax
.text$mn:00000ACD                 sub     esp, 18h
.text$mn:00000AD0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000AD5                 xor     eax, ebp
.text$mn:00000AD7                 push    eax
.text$mn:00000AD8                 lea     eax, [ebp+var_C]
.text$mn:00000ADB                 mov     large fs:0, eax
.text$mn:00000AE1                 mov     [ebp+var_14], ecx
.text$mn:00000AE4                 mov     eax, [ebp+var_14]
.text$mn:00000AE7                 mov     dword ptr [eax], offset ??_7TiXmlNode@@6B@ ; const TiXmlNode::`vftable'
.text$mn:00000AED                 mov     [ebp+var_4], 1
.text$mn:00000AF4                 mov     ecx, [ebp+var_14]
.text$mn:00000AF7                 mov     edx, [ecx+14h]
.text$mn:00000AFA                 mov     [ebp+var_10], edx
.text$mn:00000AFD                 mov     [ebp+var_1C], 0
.text$mn:00000B04
.text$mn:00000B04 loc_B04:                                ; CODE XREF: TiXmlNode::~TiXmlNode(void):loc_B45j
.text$mn:00000B04                 cmp     [ebp+var_10], 0
.text$mn:00000B08                 jz      short loc_B47
.text$mn:00000B0A                 mov     eax, [ebp+var_10]
.text$mn:00000B0D                 mov     [ebp+var_1C], eax
.text$mn:00000B10                 mov     ecx, [ebp+var_10]
.text$mn:00000B13                 mov     edx, [ecx+3Ch]
.text$mn:00000B16                 mov     [ebp+var_10], edx
.text$mn:00000B19                 mov     eax, [ebp+var_1C]
.text$mn:00000B1C                 mov     [ebp+var_20], eax
.text$mn:00000B1F                 mov     ecx, [ebp+var_20]
.text$mn:00000B22                 mov     [ebp+var_18], ecx
.text$mn:00000B25                 cmp     [ebp+var_18], 0
.text$mn:00000B29                 jz      short loc_B3E
.text$mn:00000B2B                 push    1
.text$mn:00000B2D                 mov     edx, [ebp+var_18]
.text$mn:00000B30                 mov     eax, [edx]
.text$mn:00000B32                 mov     ecx, [ebp+var_18]
.text$mn:00000B35                 mov     edx, [eax]
.text$mn:00000B37                 call    edx
.text$mn:00000B39                 mov     [ebp+var_24], eax
.text$mn:00000B3C                 jmp     short loc_B45
.text$mn:00000B3E ; ---------------------------------------------------------------------------
.text$mn:00000B3E
.text$mn:00000B3E loc_B3E:                                ; CODE XREF: TiXmlNode::~TiXmlNode(void)+6Dj
.text$mn:00000B3E                 mov     [ebp+var_24], 0
.text$mn:00000B45
.text$mn:00000B45 loc_B45:                                ; CODE XREF: TiXmlNode::~TiXmlNode(void)+80j
.text$mn:00000B45                 jmp     short loc_B04
.text$mn:00000B47 ; ---------------------------------------------------------------------------
.text$mn:00000B47
.text$mn:00000B47 loc_B47:                                ; CODE XREF: TiXmlNode::~TiXmlNode(void)+4Cj
.text$mn:00000B47                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000B4B                 mov     ecx, [ebp+var_14]
.text$mn:00000B4E                 add     ecx, 1Ch
.text$mn:00000B51                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000B56                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000B5D                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000B60                 call    ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$mn:00000B65                 mov     ecx, [ebp+var_C]
.text$mn:00000B68                 mov     large fs:0, ecx
.text$mn:00000B6F                 pop     ecx
.text$mn:00000B70                 mov     esp, ebp
.text$mn:00000B72                 pop     ebp
.text$mn:00000B73                 retn
.text$mn:00000B73 ??1TiXmlNode@@UAE@XZ endp
.text$mn:00000B73
.text$mn:00000B73 ; ---------------------------------------------------------------------------
.text$mn:00000B74                 db 8 dup(0CCh)
.text$mn:00000B7C
.text$mn:00000B7C ; =============== S U B R O U T I N E =======================================
.text$mn:00000B7C
.text$mn:00000B7C ; Attributes: bp-based frame
.text$mn:00000B7C
.text$mn:00000B7C ; void __thiscall TiXmlNode::Clear(TiXmlNode *__hidden this)
.text$mn:00000B7C                 public ?Clear@TiXmlNode@@QAEXXZ
.text$mn:00000B7C ?Clear@TiXmlNode@@QAEXXZ proc near      ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+3Bp
.text$mn:00000B7C
.text$mn:00000B7C var_18          = dword ptr -18h
.text$mn:00000B7C var_14          = dword ptr -14h
.text$mn:00000B7C var_10          = dword ptr -10h
.text$mn:00000B7C var_C           = dword ptr -0Ch
.text$mn:00000B7C var_8           = dword ptr -8
.text$mn:00000B7C var_4           = dword ptr -4
.text$mn:00000B7C
.text$mn:00000B7C                 push    ebp
.text$mn:00000B7D                 mov     ebp, esp
.text$mn:00000B7F                 sub     esp, 18h
.text$mn:00000B82                 mov     [ebp+var_C], ecx
.text$mn:00000B85                 mov     eax, [ebp+var_C]
.text$mn:00000B88                 mov     ecx, [eax+14h]
.text$mn:00000B8B                 mov     [ebp+var_4], ecx
.text$mn:00000B8E                 mov     [ebp+var_10], 0
.text$mn:00000B95
.text$mn:00000B95 loc_B95:                                ; CODE XREF: TiXmlNode::Clear(void):loc_BD6j
.text$mn:00000B95                 cmp     [ebp+var_4], 0
.text$mn:00000B99                 jz      short loc_BD8
.text$mn:00000B9B                 mov     edx, [ebp+var_4]
.text$mn:00000B9E                 mov     [ebp+var_10], edx
.text$mn:00000BA1                 mov     eax, [ebp+var_4]
.text$mn:00000BA4                 mov     ecx, [eax+3Ch]
.text$mn:00000BA7                 mov     [ebp+var_4], ecx
.text$mn:00000BAA                 mov     edx, [ebp+var_10]
.text$mn:00000BAD                 mov     [ebp+var_14], edx
.text$mn:00000BB0                 mov     eax, [ebp+var_14]
.text$mn:00000BB3                 mov     [ebp+var_8], eax
.text$mn:00000BB6                 cmp     [ebp+var_8], 0
.text$mn:00000BBA                 jz      short loc_BCF
.text$mn:00000BBC                 push    1
.text$mn:00000BBE                 mov     ecx, [ebp+var_8]
.text$mn:00000BC1                 mov     edx, [ecx]
.text$mn:00000BC3                 mov     ecx, [ebp+var_8]
.text$mn:00000BC6                 mov     eax, [edx]
.text$mn:00000BC8                 call    eax
.text$mn:00000BCA                 mov     [ebp+var_18], eax
.text$mn:00000BCD                 jmp     short loc_BD6
.text$mn:00000BCF ; ---------------------------------------------------------------------------
.text$mn:00000BCF
.text$mn:00000BCF loc_BCF:                                ; CODE XREF: TiXmlNode::Clear(void)+3Ej
.text$mn:00000BCF                 mov     [ebp+var_18], 0
.text$mn:00000BD6
.text$mn:00000BD6 loc_BD6:                                ; CODE XREF: TiXmlNode::Clear(void)+51j
.text$mn:00000BD6                 jmp     short loc_B95
.text$mn:00000BD8 ; ---------------------------------------------------------------------------
.text$mn:00000BD8
.text$mn:00000BD8 loc_BD8:                                ; CODE XREF: TiXmlNode::Clear(void)+1Dj
.text$mn:00000BD8                 mov     ecx, [ebp+var_C]
.text$mn:00000BDB                 mov     dword ptr [ecx+14h], 0
.text$mn:00000BE2                 mov     edx, [ebp+var_C]
.text$mn:00000BE5                 mov     dword ptr [edx+18h], 0
.text$mn:00000BEC                 mov     esp, ebp
.text$mn:00000BEE                 pop     ebp
.text$mn:00000BEF                 retn
.text$mn:00000BEF ?Clear@TiXmlNode@@QAEXXZ endp
.text$mn:00000BEF
.text$mn:00000BEF ; ---------------------------------------------------------------------------
.text$mn:00000BF0                 db 0Ch dup(0CCh)
.text$mn:00000BFC
.text$mn:00000BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00000BFC
.text$mn:00000BFC ; Attributes: bp-based frame
.text$mn:00000BFC
.text$mn:00000BFC ; struct TiXmlNode *__thiscall TiXmlNode::FirstChild(TiXmlNode *this, const wchar_t *)
.text$mn:00000BFC                 public ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:00000BFC ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$mn:00000BFC                                         ; CODE XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+14p
.text$mn:00000BFC                                         ; TiXmlNode::FirstChildElement(wchar_t const *)+10p ...
.text$mn:00000BFC
.text$mn:00000BFC var_64          = dword ptr -64h
.text$mn:00000BFC var_60          = dword ptr -60h
.text$mn:00000BFC var_5C          = dword ptr -5Ch
.text$mn:00000BFC var_58          = dword ptr -58h
.text$mn:00000BFC var_54          = dword ptr -54h
.text$mn:00000BFC var_50          = dword ptr -50h
.text$mn:00000BFC var_49          = byte ptr -49h
.text$mn:00000BFC var_48          = byte ptr -48h
.text$mn:00000BFC var_2C          = byte ptr -2Ch
.text$mn:00000BFC var_10          = dword ptr -10h
.text$mn:00000BFC var_C           = dword ptr -0Ch
.text$mn:00000BFC var_4           = dword ptr -4
.text$mn:00000BFC Str             = dword ptr  8
.text$mn:00000BFC
.text$mn:00000BFC                 push    ebp
.text$mn:00000BFD                 mov     ebp, esp
.text$mn:00000BFF                 push    0FFFFFFFFh
.text$mn:00000C01                 push    offset __ehhandler$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:00000C06                 mov     eax, large fs:0
.text$mn:00000C0C                 push    eax
.text$mn:00000C0D                 sub     esp, 58h
.text$mn:00000C10                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000C15                 xor     eax, ebp
.text$mn:00000C17                 mov     [ebp+var_10], eax
.text$mn:00000C1A                 push    eax
.text$mn:00000C1B                 lea     eax, [ebp+var_C]
.text$mn:00000C1E                 mov     large fs:0, eax
.text$mn:00000C24                 mov     [ebp+var_64], ecx
.text$mn:00000C27                 mov     eax, [ebp+var_64]
.text$mn:00000C2A                 mov     ecx, [eax+14h]
.text$mn:00000C2D                 mov     [ebp+var_50], ecx
.text$mn:00000C30                 jmp     short loc_C3B
.text$mn:00000C32 ; ---------------------------------------------------------------------------
.text$mn:00000C32
.text$mn:00000C32 loc_C32:                                ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *):loc_CB1j
.text$mn:00000C32                 mov     edx, [ebp+var_50]
.text$mn:00000C35                 mov     eax, [edx+3Ch]
.text$mn:00000C38                 mov     [ebp+var_50], eax
.text$mn:00000C3B
.text$mn:00000C3B loc_C3B:                                ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+34j
.text$mn:00000C3B                 cmp     [ebp+var_50], 0
.text$mn:00000C3F                 jz      short loc_CB6
.text$mn:00000C41                 mov     ecx, [ebp+Str]
.text$mn:00000C44                 push    ecx             ; Str
.text$mn:00000C45                 lea     ecx, [ebp+var_2C]
.text$mn:00000C48                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000C4D                 mov     [ebp+var_5C], eax
.text$mn:00000C50                 mov     edx, [ebp+var_5C]
.text$mn:00000C53                 mov     [ebp+var_54], edx
.text$mn:00000C56                 mov     [ebp+var_4], 0
.text$mn:00000C5D                 mov     eax, [ebp+var_54]
.text$mn:00000C60                 push    eax
.text$mn:00000C61                 lea     ecx, [ebp+var_48]
.text$mn:00000C64                 push    ecx
.text$mn:00000C65                 mov     ecx, [ebp+var_50]
.text$mn:00000C68                 call    ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; TiXmlNode::SValue(void)
.text$mn:00000C6D                 mov     [ebp+var_60], eax
.text$mn:00000C70                 mov     edx, [ebp+var_60]
.text$mn:00000C73                 mov     [ebp+var_58], edx
.text$mn:00000C76                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000C7A                 mov     eax, [ebp+var_58]
.text$mn:00000C7D                 push    eax
.text$mn:00000C7E                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000C83                 add     esp, 8
.text$mn:00000C86                 mov     [ebp+var_49], al
.text$mn:00000C89                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000C8D                 lea     ecx, [ebp+var_48]
.text$mn:00000C90                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000C95                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000C9C                 lea     ecx, [ebp+var_2C]
.text$mn:00000C9F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000CA4                 movzx   ecx, [ebp+var_49]
.text$mn:00000CA8                 test    ecx, ecx
.text$mn:00000CAA                 jz      short loc_CB1
.text$mn:00000CAC                 mov     eax, [ebp+var_50]
.text$mn:00000CAF                 jmp     short loc_CB8
.text$mn:00000CB1 ; ---------------------------------------------------------------------------
.text$mn:00000CB1
.text$mn:00000CB1 loc_CB1:                                ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+AEj
.text$mn:00000CB1                 jmp     loc_C32
.text$mn:00000CB6 ; ---------------------------------------------------------------------------
.text$mn:00000CB6
.text$mn:00000CB6 loc_CB6:                                ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+43j
.text$mn:00000CB6                 xor     eax, eax
.text$mn:00000CB8
.text$mn:00000CB8 loc_CB8:                                ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+B3j
.text$mn:00000CB8                 mov     ecx, [ebp+var_C]
.text$mn:00000CBB                 mov     large fs:0, ecx
.text$mn:00000CC2                 pop     ecx
.text$mn:00000CC3                 mov     ecx, [ebp+var_10]
.text$mn:00000CC6                 xor     ecx, ebp
.text$mn:00000CC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000CCD                 mov     esp, ebp
.text$mn:00000CCF                 pop     ebp
.text$mn:00000CD0                 retn    4
.text$mn:00000CD0 ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$mn:00000CD0
.text$mn:00000CD0 ; ---------------------------------------------------------------------------
.text$mn:00000CD3                 db 9 dup(0CCh)
.text$mn:00000CDC
.text$mn:00000CDC ; =============== S U B R O U T I N E =======================================
.text$mn:00000CDC
.text$mn:00000CDC ; Attributes: bp-based frame
.text$mn:00000CDC
.text$mn:00000CDC ; struct TiXmlNode *__thiscall TiXmlNode::LastChild(TiXmlNode *this, const wchar_t *)
.text$mn:00000CDC                 public ?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:00000CDC ?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$mn:00000CDC
.text$mn:00000CDC var_64          = dword ptr -64h
.text$mn:00000CDC var_60          = dword ptr -60h
.text$mn:00000CDC var_5C          = dword ptr -5Ch
.text$mn:00000CDC var_58          = dword ptr -58h
.text$mn:00000CDC var_54          = dword ptr -54h
.text$mn:00000CDC var_50          = dword ptr -50h
.text$mn:00000CDC var_49          = byte ptr -49h
.text$mn:00000CDC var_48          = byte ptr -48h
.text$mn:00000CDC var_2C          = byte ptr -2Ch
.text$mn:00000CDC var_10          = dword ptr -10h
.text$mn:00000CDC var_C           = dword ptr -0Ch
.text$mn:00000CDC var_4           = dword ptr -4
.text$mn:00000CDC Str             = dword ptr  8
.text$mn:00000CDC
.text$mn:00000CDC                 push    ebp
.text$mn:00000CDD                 mov     ebp, esp
.text$mn:00000CDF                 push    0FFFFFFFFh
.text$mn:00000CE1                 push    offset __ehhandler$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:00000CE6                 mov     eax, large fs:0
.text$mn:00000CEC                 push    eax
.text$mn:00000CED                 sub     esp, 58h
.text$mn:00000CF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000CF5                 xor     eax, ebp
.text$mn:00000CF7                 mov     [ebp+var_10], eax
.text$mn:00000CFA                 push    eax
.text$mn:00000CFB                 lea     eax, [ebp+var_C]
.text$mn:00000CFE                 mov     large fs:0, eax
.text$mn:00000D04                 mov     [ebp+var_64], ecx
.text$mn:00000D07                 mov     eax, [ebp+var_64]
.text$mn:00000D0A                 mov     ecx, [eax+18h]
.text$mn:00000D0D                 mov     [ebp+var_50], ecx
.text$mn:00000D10                 jmp     short loc_D1B
.text$mn:00000D12 ; ---------------------------------------------------------------------------
.text$mn:00000D12
.text$mn:00000D12 loc_D12:                                ; CODE XREF: TiXmlNode::LastChild(wchar_t const *):loc_D91j
.text$mn:00000D12                 mov     edx, [ebp+var_50]
.text$mn:00000D15                 mov     eax, [edx+38h]
.text$mn:00000D18                 mov     [ebp+var_50], eax
.text$mn:00000D1B
.text$mn:00000D1B loc_D1B:                                ; CODE XREF: TiXmlNode::LastChild(wchar_t const *)+34j
.text$mn:00000D1B                 cmp     [ebp+var_50], 0
.text$mn:00000D1F                 jz      short loc_D96
.text$mn:00000D21                 mov     ecx, [ebp+Str]
.text$mn:00000D24                 push    ecx             ; Str
.text$mn:00000D25                 lea     ecx, [ebp+var_2C]
.text$mn:00000D28                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000D2D                 mov     [ebp+var_5C], eax
.text$mn:00000D30                 mov     edx, [ebp+var_5C]
.text$mn:00000D33                 mov     [ebp+var_54], edx
.text$mn:00000D36                 mov     [ebp+var_4], 0
.text$mn:00000D3D                 mov     eax, [ebp+var_54]
.text$mn:00000D40                 push    eax
.text$mn:00000D41                 lea     ecx, [ebp+var_48]
.text$mn:00000D44                 push    ecx
.text$mn:00000D45                 mov     ecx, [ebp+var_50]
.text$mn:00000D48                 call    ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; TiXmlNode::SValue(void)
.text$mn:00000D4D                 mov     [ebp+var_60], eax
.text$mn:00000D50                 mov     edx, [ebp+var_60]
.text$mn:00000D53                 mov     [ebp+var_58], edx
.text$mn:00000D56                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000D5A                 mov     eax, [ebp+var_58]
.text$mn:00000D5D                 push    eax
.text$mn:00000D5E                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000D63                 add     esp, 8
.text$mn:00000D66                 mov     [ebp+var_49], al
.text$mn:00000D69                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000D6D                 lea     ecx, [ebp+var_48]
.text$mn:00000D70                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000D75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000D7C                 lea     ecx, [ebp+var_2C]
.text$mn:00000D7F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000D84                 movzx   ecx, [ebp+var_49]
.text$mn:00000D88                 test    ecx, ecx
.text$mn:00000D8A                 jz      short loc_D91
.text$mn:00000D8C                 mov     eax, [ebp+var_50]
.text$mn:00000D8F                 jmp     short loc_D98
.text$mn:00000D91 ; ---------------------------------------------------------------------------
.text$mn:00000D91
.text$mn:00000D91 loc_D91:                                ; CODE XREF: TiXmlNode::LastChild(wchar_t const *)+AEj
.text$mn:00000D91                 jmp     loc_D12
.text$mn:00000D96 ; ---------------------------------------------------------------------------
.text$mn:00000D96
.text$mn:00000D96 loc_D96:                                ; CODE XREF: TiXmlNode::LastChild(wchar_t const *)+43j
.text$mn:00000D96                 xor     eax, eax
.text$mn:00000D98
.text$mn:00000D98 loc_D98:                                ; CODE XREF: TiXmlNode::LastChild(wchar_t const *)+B3j
.text$mn:00000D98                 mov     ecx, [ebp+var_C]
.text$mn:00000D9B                 mov     large fs:0, ecx
.text$mn:00000DA2                 pop     ecx
.text$mn:00000DA3                 mov     ecx, [ebp+var_10]
.text$mn:00000DA6                 xor     ecx, ebp
.text$mn:00000DA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000DAD                 mov     esp, ebp
.text$mn:00000DAF                 pop     ebp
.text$mn:00000DB0                 retn    4
.text$mn:00000DB0 ?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$mn:00000DB0
.text$mn:00000DB0 ; ---------------------------------------------------------------------------
.text$mn:00000DB3                 db 9 dup(0CCh)
.text$mn:00000DBC
.text$mn:00000DBC ; =============== S U B R O U T I N E =======================================
.text$mn:00000DBC
.text$mn:00000DBC ; Attributes: bp-based frame
.text$mn:00000DBC
.text$mn:00000DBC ; struct TiXmlNode *__thiscall TiXmlNode::IterateChildren(TiXmlNode *this, struct TiXmlNode *)
.text$mn:00000DBC                 public ?IterateChildren@TiXmlNode@@QBEPAV1@PAV1@@Z
.text$mn:00000DBC ?IterateChildren@TiXmlNode@@QBEPAV1@PAV1@@Z proc near
.text$mn:00000DBC
.text$mn:00000DBC var_4           = dword ptr -4
.text$mn:00000DBC arg_0           = dword ptr  8
.text$mn:00000DBC
.text$mn:00000DBC                 push    ebp
.text$mn:00000DBD                 mov     ebp, esp
.text$mn:00000DBF                 push    ecx
.text$mn:00000DC0                 mov     [ebp+var_4], ecx
.text$mn:00000DC3                 cmp     [ebp+arg_0], 0
.text$mn:00000DC7                 jnz     short loc_DD5
.text$mn:00000DC9                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000DCC                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:00000DD1                 jmp     short loc_DFF
.text$mn:00000DD3 ; ---------------------------------------------------------------------------
.text$mn:00000DD3                 jmp     short loc_DFF
.text$mn:00000DD5 ; ---------------------------------------------------------------------------
.text$mn:00000DD5
.text$mn:00000DD5 loc_DD5:                                ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+Bj
.text$mn:00000DD5                 mov     eax, [ebp+arg_0]
.text$mn:00000DD8                 mov     ecx, [eax+0Ch]
.text$mn:00000DDB                 cmp     ecx, [ebp+var_4]
.text$mn:00000DDE                 jz      short loc_DF7
.text$mn:00000DE0                 push    145h            ; Line
.text$mn:00000DE5                 push    offset $SG96251 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00000DEA                 push    offset $SG96252 ; "previous->parent == this"
.text$mn:00000DEF                 call    __wassert
.text$mn:00000DF4 ; ---------------------------------------------------------------------------
.text$mn:00000DF4                 add     esp, 0Ch
.text$mn:00000DF7
.text$mn:00000DF7 loc_DF7:                                ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+22j
.text$mn:00000DF7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00000DFA                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:00000DFF
.text$mn:00000DFF loc_DFF:                                ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+15j
.text$mn:00000DFF                                         ; TiXmlNode::IterateChildren(TiXmlNode *)+17j
.text$mn:00000DFF                 mov     esp, ebp
.text$mn:00000E01                 pop     ebp
.text$mn:00000E02                 retn    4
.text$mn:00000E02 ?IterateChildren@TiXmlNode@@QBEPAV1@PAV1@@Z endp
.text$mn:00000E02
.text$mn:00000E02 ; ---------------------------------------------------------------------------
.text$mn:00000E05                 db 7 dup(0CCh)
.text$mn:00000E0C
.text$mn:00000E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00000E0C
.text$mn:00000E0C ; Attributes: bp-based frame
.text$mn:00000E0C
.text$mn:00000E0C ; struct TiXmlNode *__thiscall TiXmlNode::IterateChildren(TiXmlNode *this, const wchar_t *, struct TiXmlNode *)
.text$mn:00000E0C                 public ?IterateChildren@TiXmlNode@@QBEPAV1@PB_WPAV1@@Z
.text$mn:00000E0C ?IterateChildren@TiXmlNode@@QBEPAV1@PB_WPAV1@@Z proc near
.text$mn:00000E0C
.text$mn:00000E0C var_4           = dword ptr -4
.text$mn:00000E0C arg_0           = dword ptr  8
.text$mn:00000E0C arg_4           = dword ptr  0Ch
.text$mn:00000E0C
.text$mn:00000E0C                 push    ebp
.text$mn:00000E0D                 mov     ebp, esp
.text$mn:00000E0F                 push    ecx
.text$mn:00000E10                 mov     [ebp+var_4], ecx
.text$mn:00000E13                 cmp     [ebp+arg_4], 0
.text$mn:00000E17                 jnz     short loc_E29
.text$mn:00000E19                 mov     eax, [ebp+arg_0]
.text$mn:00000E1C                 push    eax             ; wchar_t *
.text$mn:00000E1D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000E20                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00000E25                 jmp     short loc_E57
.text$mn:00000E27 ; ---------------------------------------------------------------------------
.text$mn:00000E27                 jmp     short loc_E57
.text$mn:00000E29 ; ---------------------------------------------------------------------------
.text$mn:00000E29
.text$mn:00000E29 loc_E29:                                ; CODE XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+Bj
.text$mn:00000E29                 mov     ecx, [ebp+arg_4]
.text$mn:00000E2C                 mov     edx, [ecx+0Ch]
.text$mn:00000E2F                 cmp     edx, [ebp+var_4]
.text$mn:00000E32                 jz      short loc_E4B
.text$mn:00000E34                 push    152h            ; Line
.text$mn:00000E39                 push    offset $SG96261 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00000E3E                 push    offset $SG96262 ; "previous->parent == this"
.text$mn:00000E43                 call    __wassert
.text$mn:00000E48 ; ---------------------------------------------------------------------------
.text$mn:00000E48                 add     esp, 0Ch
.text$mn:00000E4B
.text$mn:00000E4B loc_E4B:                                ; CODE XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+26j
.text$mn:00000E4B                 mov     ecx, [ebp+arg_0]
.text$mn:00000E4E                 push    ecx             ; wchar_t *
.text$mn:00000E4F                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000E52                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00000E57
.text$mn:00000E57 loc_E57:                                ; CODE XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+19j
.text$mn:00000E57                                         ; TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+1Bj
.text$mn:00000E57                 mov     esp, ebp
.text$mn:00000E59                 pop     ebp
.text$mn:00000E5A                 retn    8
.text$mn:00000E5A ?IterateChildren@TiXmlNode@@QBEPAV1@PB_WPAV1@@Z endp
.text$mn:00000E5A
.text$mn:00000E5A ; ---------------------------------------------------------------------------
.text$mn:00000E5D                 db 0Fh dup(0CCh)
.text$mn:00000E6C
.text$mn:00000E6C ; =============== S U B R O U T I N E =======================================
.text$mn:00000E6C
.text$mn:00000E6C ; Attributes: bp-based frame
.text$mn:00000E6C
.text$mn:00000E6C ; struct TiXmlNode *__thiscall TiXmlNode::InsertEndChild(TiXmlNode *this, const struct TiXmlNode *)
.text$mn:00000E6C                 public ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z
.text$mn:00000E6C ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z proc near
.text$mn:00000E6C
.text$mn:00000E6C var_8           = dword ptr -8
.text$mn:00000E6C var_4           = dword ptr -4
.text$mn:00000E6C arg_0           = dword ptr  8
.text$mn:00000E6C
.text$mn:00000E6C                 push    ebp
.text$mn:00000E6D                 mov     ebp, esp
.text$mn:00000E6F                 sub     esp, 8
.text$mn:00000E72                 mov     [ebp+var_8], ecx
.text$mn:00000E75                 mov     eax, [ebp+arg_0]
.text$mn:00000E78                 mov     edx, [eax]
.text$mn:00000E7A                 mov     ecx, [ebp+arg_0]
.text$mn:00000E7D                 mov     eax, [edx+14h]
.text$mn:00000E80                 call    eax
.text$mn:00000E82                 mov     [ebp+var_4], eax
.text$mn:00000E85                 cmp     [ebp+var_4], 0
.text$mn:00000E89                 jnz     short loc_E8F
.text$mn:00000E8B                 xor     eax, eax
.text$mn:00000E8D                 jmp     short loc_E9B
.text$mn:00000E8F ; ---------------------------------------------------------------------------
.text$mn:00000E8F
.text$mn:00000E8F loc_E8F:                                ; CODE XREF: TiXmlNode::InsertEndChild(TiXmlNode const &)+1Dj
.text$mn:00000E8F                 mov     ecx, [ebp+var_4]
.text$mn:00000E92                 push    ecx             ; struct TiXmlNode *
.text$mn:00000E93                 mov     ecx, [ebp+var_8] ; this
.text$mn:00000E96                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:00000E9B
.text$mn:00000E9B loc_E9B:                                ; CODE XREF: TiXmlNode::InsertEndChild(TiXmlNode const &)+21j
.text$mn:00000E9B                 mov     esp, ebp
.text$mn:00000E9D                 pop     ebp
.text$mn:00000E9E                 retn    4
.text$mn:00000E9E ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z endp
.text$mn:00000E9E
.text$mn:00000E9E ; ---------------------------------------------------------------------------
.text$mn:00000EA1                 db 0Bh dup(0CCh)
.text$mn:00000EAC
.text$mn:00000EAC ; =============== S U B R O U T I N E =======================================
.text$mn:00000EAC
.text$mn:00000EAC ; Attributes: bp-based frame
.text$mn:00000EAC
.text$mn:00000EAC ; struct TiXmlNode *__thiscall TiXmlNode::LinkEndChild(TiXmlNode *this, struct TiXmlNode *)
.text$mn:00000EAC                 public ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z
.text$mn:00000EAC ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z proc near
.text$mn:00000EAC                                         ; CODE XREF: TiXmlNode::InsertEndChild(TiXmlNode const &)+2Ap
.text$mn:00000EAC                                         ; TiXmlElement::Clone(void)+106p ...
.text$mn:00000EAC
.text$mn:00000EAC var_4           = dword ptr -4
.text$mn:00000EAC arg_0           = dword ptr  8
.text$mn:00000EAC
.text$mn:00000EAC                 push    ebp
.text$mn:00000EAD                 mov     ebp, esp
.text$mn:00000EAF                 push    ecx
.text$mn:00000EB0                 mov     [ebp+var_4], ecx
.text$mn:00000EB3                 mov     eax, [ebp+arg_0]
.text$mn:00000EB6                 mov     ecx, [ebp+var_4]
.text$mn:00000EB9                 mov     [eax+0Ch], ecx
.text$mn:00000EBC                 mov     edx, [ebp+arg_0]
.text$mn:00000EBF                 mov     eax, [ebp+var_4]
.text$mn:00000EC2                 mov     ecx, [eax+18h]
.text$mn:00000EC5                 mov     [edx+38h], ecx
.text$mn:00000EC8                 mov     edx, [ebp+arg_0]
.text$mn:00000ECB                 mov     dword ptr [edx+3Ch], 0
.text$mn:00000ED2                 mov     eax, [ebp+var_4]
.text$mn:00000ED5                 cmp     dword ptr [eax+18h], 0
.text$mn:00000ED9                 jz      short loc_EE9
.text$mn:00000EDB                 mov     ecx, [ebp+var_4]
.text$mn:00000EDE                 mov     edx, [ecx+18h]
.text$mn:00000EE1                 mov     eax, [ebp+arg_0]
.text$mn:00000EE4                 mov     [edx+3Ch], eax
.text$mn:00000EE7                 jmp     short loc_EF2
.text$mn:00000EE9 ; ---------------------------------------------------------------------------
.text$mn:00000EE9
.text$mn:00000EE9 loc_EE9:                                ; CODE XREF: TiXmlNode::LinkEndChild(TiXmlNode *)+2Dj
.text$mn:00000EE9                 mov     ecx, [ebp+var_4]
.text$mn:00000EEC                 mov     edx, [ebp+arg_0]
.text$mn:00000EEF                 mov     [ecx+14h], edx
.text$mn:00000EF2
.text$mn:00000EF2 loc_EF2:                                ; CODE XREF: TiXmlNode::LinkEndChild(TiXmlNode *)+3Bj
.text$mn:00000EF2                 mov     eax, [ebp+var_4]
.text$mn:00000EF5                 mov     ecx, [ebp+arg_0]
.text$mn:00000EF8                 mov     [eax+18h], ecx
.text$mn:00000EFB                 mov     eax, [ebp+arg_0]
.text$mn:00000EFE                 mov     esp, ebp
.text$mn:00000F00                 pop     ebp
.text$mn:00000F01                 retn    4
.text$mn:00000F01 ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z endp
.text$mn:00000F01
.text$mn:00000F01 ; ---------------------------------------------------------------------------
.text$mn:00000F04                 db 8 dup(0CCh)
.text$mn:00000F0C
.text$mn:00000F0C ; =============== S U B R O U T I N E =======================================
.text$mn:00000F0C
.text$mn:00000F0C ; Attributes: bp-based frame
.text$mn:00000F0C
.text$mn:00000F0C ; struct TiXmlNode *__thiscall TiXmlNode::InsertBeforeChild(TiXmlNode *this, struct TiXmlNode *, const struct TiXmlNode *)
.text$mn:00000F0C                 public ?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:00000F0C ?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:00000F0C
.text$mn:00000F0C var_8           = dword ptr -8
.text$mn:00000F0C var_4           = dword ptr -4
.text$mn:00000F0C arg_0           = dword ptr  8
.text$mn:00000F0C arg_4           = dword ptr  0Ch
.text$mn:00000F0C
.text$mn:00000F0C                 push    ebp
.text$mn:00000F0D                 mov     ebp, esp
.text$mn:00000F0F                 sub     esp, 8
.text$mn:00000F12                 mov     [ebp+var_8], ecx
.text$mn:00000F15                 cmp     [ebp+arg_0], 0
.text$mn:00000F19                 jz      short loc_F26
.text$mn:00000F1B                 mov     eax, [ebp+arg_0]
.text$mn:00000F1E                 mov     ecx, [eax+0Ch]
.text$mn:00000F21                 cmp     ecx, [ebp+var_8]
.text$mn:00000F24                 jz      short loc_F2D
.text$mn:00000F26
.text$mn:00000F26 loc_F26:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+Dj
.text$mn:00000F26                 xor     eax, eax
.text$mn:00000F28                 jmp     loc_FB3
.text$mn:00000F2D ; ---------------------------------------------------------------------------
.text$mn:00000F2D
.text$mn:00000F2D loc_F2D:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+18j
.text$mn:00000F2D                 mov     edx, [ebp+arg_4]
.text$mn:00000F30                 mov     eax, [edx]
.text$mn:00000F32                 mov     ecx, [ebp+arg_4]
.text$mn:00000F35                 mov     edx, [eax+14h]
.text$mn:00000F38                 call    edx
.text$mn:00000F3A                 mov     [ebp+var_4], eax
.text$mn:00000F3D                 cmp     [ebp+var_4], 0
.text$mn:00000F41                 jnz     short loc_F47
.text$mn:00000F43                 xor     eax, eax
.text$mn:00000F45                 jmp     short loc_FB3
.text$mn:00000F47 ; ---------------------------------------------------------------------------
.text$mn:00000F47
.text$mn:00000F47 loc_F47:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+35j
.text$mn:00000F47                 mov     eax, [ebp+var_4]
.text$mn:00000F4A                 mov     ecx, [ebp+var_8]
.text$mn:00000F4D                 mov     [eax+0Ch], ecx
.text$mn:00000F50                 mov     edx, [ebp+var_4]
.text$mn:00000F53                 mov     eax, [ebp+arg_0]
.text$mn:00000F56                 mov     [edx+3Ch], eax
.text$mn:00000F59                 mov     ecx, [ebp+var_4]
.text$mn:00000F5C                 mov     edx, [ebp+arg_0]
.text$mn:00000F5F                 mov     eax, [edx+38h]
.text$mn:00000F62                 mov     [ecx+38h], eax
.text$mn:00000F65                 mov     ecx, [ebp+arg_0]
.text$mn:00000F68                 cmp     dword ptr [ecx+38h], 0
.text$mn:00000F6C                 jz      short loc_F7C
.text$mn:00000F6E                 mov     edx, [ebp+arg_0]
.text$mn:00000F71                 mov     eax, [edx+38h]
.text$mn:00000F74                 mov     ecx, [ebp+var_4]
.text$mn:00000F77                 mov     [eax+3Ch], ecx
.text$mn:00000F7A                 jmp     short loc_FA7
.text$mn:00000F7C ; ---------------------------------------------------------------------------
.text$mn:00000F7C
.text$mn:00000F7C loc_F7C:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+60j
.text$mn:00000F7C                 mov     edx, [ebp+var_8]
.text$mn:00000F7F                 mov     eax, [edx+14h]
.text$mn:00000F82                 cmp     eax, [ebp+arg_0]
.text$mn:00000F85                 jz      short loc_F9E
.text$mn:00000F87                 push    0D3h ; '+'      ; Line
.text$mn:00000F8C                 push    offset $SG96144 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00000F91                 push    offset $SG96145 ; "firstChild == beforeThis"
.text$mn:00000F96                 call    __wassert
.text$mn:00000F9B ; ---------------------------------------------------------------------------
.text$mn:00000F9B                 add     esp, 0Ch
.text$mn:00000F9E
.text$mn:00000F9E loc_F9E:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+79j
.text$mn:00000F9E                 mov     edx, [ebp+var_8]
.text$mn:00000FA1                 mov     eax, [ebp+var_4]
.text$mn:00000FA4                 mov     [edx+14h], eax
.text$mn:00000FA7
.text$mn:00000FA7 loc_FA7:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+6Ej
.text$mn:00000FA7                 mov     ecx, [ebp+arg_0]
.text$mn:00000FAA                 mov     edx, [ebp+var_4]
.text$mn:00000FAD                 mov     [ecx+38h], edx
.text$mn:00000FB0                 mov     eax, [ebp+var_4]
.text$mn:00000FB3
.text$mn:00000FB3 loc_FB3:                                ; CODE XREF: TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+1Cj
.text$mn:00000FB3                                         ; TiXmlNode::InsertBeforeChild(TiXmlNode *,TiXmlNode const &)+39j
.text$mn:00000FB3                 mov     esp, ebp
.text$mn:00000FB5                 pop     ebp
.text$mn:00000FB6                 retn    8
.text$mn:00000FB6 ?InsertBeforeChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00000FB6
.text$mn:00000FB6 ; ---------------------------------------------------------------------------
.text$mn:00000FB9                 align 4
.text$mn:00000FBC
.text$mn:00000FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00000FBC
.text$mn:00000FBC ; Attributes: bp-based frame
.text$mn:00000FBC
.text$mn:00000FBC ; struct TiXmlNode *__thiscall TiXmlNode::InsertAfterChild(TiXmlNode *this, struct TiXmlNode *, const struct TiXmlNode *)
.text$mn:00000FBC                 public ?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:00000FBC ?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:00000FBC
.text$mn:00000FBC var_8           = dword ptr -8
.text$mn:00000FBC var_4           = dword ptr -4
.text$mn:00000FBC arg_0           = dword ptr  8
.text$mn:00000FBC arg_4           = dword ptr  0Ch
.text$mn:00000FBC
.text$mn:00000FBC                 push    ebp
.text$mn:00000FBD                 mov     ebp, esp
.text$mn:00000FBF                 sub     esp, 8
.text$mn:00000FC2                 mov     [ebp+var_8], ecx
.text$mn:00000FC5                 cmp     [ebp+arg_0], 0
.text$mn:00000FC9                 jz      short loc_FD6
.text$mn:00000FCB                 mov     eax, [ebp+arg_0]
.text$mn:00000FCE                 mov     ecx, [eax+0Ch]
.text$mn:00000FD1                 cmp     ecx, [ebp+var_8]
.text$mn:00000FD4                 jz      short loc_FDD
.text$mn:00000FD6
.text$mn:00000FD6 loc_FD6:                                ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+Dj
.text$mn:00000FD6                 xor     eax, eax
.text$mn:00000FD8                 jmp     loc_1063
.text$mn:00000FDD ; ---------------------------------------------------------------------------
.text$mn:00000FDD
.text$mn:00000FDD loc_FDD:                                ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+18j
.text$mn:00000FDD                 mov     edx, [ebp+arg_4]
.text$mn:00000FE0                 mov     eax, [edx]
.text$mn:00000FE2                 mov     ecx, [ebp+arg_4]
.text$mn:00000FE5                 mov     edx, [eax+14h]
.text$mn:00000FE8                 call    edx
.text$mn:00000FEA                 mov     [ebp+var_4], eax
.text$mn:00000FED                 cmp     [ebp+var_4], 0
.text$mn:00000FF1                 jnz     short loc_FF7
.text$mn:00000FF3                 xor     eax, eax
.text$mn:00000FF5                 jmp     short loc_1063
.text$mn:00000FF7 ; ---------------------------------------------------------------------------
.text$mn:00000FF7
.text$mn:00000FF7 loc_FF7:                                ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+35j
.text$mn:00000FF7                 mov     eax, [ebp+var_4]
.text$mn:00000FFA                 mov     ecx, [ebp+var_8]
.text$mn:00000FFD                 mov     [eax+0Ch], ecx
.text$mn:00001000                 mov     edx, [ebp+var_4]
.text$mn:00001003                 mov     eax, [ebp+arg_0]
.text$mn:00001006                 mov     [edx+38h], eax
.text$mn:00001009                 mov     ecx, [ebp+var_4]
.text$mn:0000100C                 mov     edx, [ebp+arg_0]
.text$mn:0000100F                 mov     eax, [edx+3Ch]
.text$mn:00001012                 mov     [ecx+3Ch], eax
.text$mn:00001015                 mov     ecx, [ebp+arg_0]
.text$mn:00001018                 cmp     dword ptr [ecx+3Ch], 0
.text$mn:0000101C                 jz      short loc_102C
.text$mn:0000101E                 mov     edx, [ebp+arg_0]
.text$mn:00001021                 mov     eax, [edx+3Ch]
.text$mn:00001024                 mov     ecx, [ebp+var_4]
.text$mn:00001027                 mov     [eax+38h], ecx
.text$mn:0000102A                 jmp     short loc_1057
.text$mn:0000102C ; ---------------------------------------------------------------------------
.text$mn:0000102C
.text$mn:0000102C loc_102C:                               ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+60j
.text$mn:0000102C                 mov     edx, [ebp+var_8]
.text$mn:0000102F                 mov     eax, [edx+18h]
.text$mn:00001032                 cmp     eax, [ebp+arg_0]
.text$mn:00001035                 jz      short loc_104E
.text$mn:00001037                 push    0EDh ; 'f'      ; Line
.text$mn:0000103C                 push    offset $SG96158 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00001041                 push    offset $SG96159 ; "lastChild == afterThis"
.text$mn:00001046                 call    __wassert
.text$mn:0000104B ; ---------------------------------------------------------------------------
.text$mn:0000104B                 add     esp, 0Ch
.text$mn:0000104E
.text$mn:0000104E loc_104E:                               ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+79j
.text$mn:0000104E                 mov     edx, [ebp+var_8]
.text$mn:00001051                 mov     eax, [ebp+var_4]
.text$mn:00001054                 mov     [edx+18h], eax
.text$mn:00001057
.text$mn:00001057 loc_1057:                               ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+6Ej
.text$mn:00001057                 mov     ecx, [ebp+arg_0]
.text$mn:0000105A                 mov     edx, [ebp+var_4]
.text$mn:0000105D                 mov     [ecx+3Ch], edx
.text$mn:00001060                 mov     eax, [ebp+var_4]
.text$mn:00001063
.text$mn:00001063 loc_1063:                               ; CODE XREF: TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+1Cj
.text$mn:00001063                                         ; TiXmlNode::InsertAfterChild(TiXmlNode *,TiXmlNode const &)+39j
.text$mn:00001063                 mov     esp, ebp
.text$mn:00001065                 pop     ebp
.text$mn:00001066                 retn    8
.text$mn:00001066 ?InsertAfterChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00001066
.text$mn:00001066 ; ---------------------------------------------------------------------------
.text$mn:00001069                 align 4
.text$mn:0000106C
.text$mn:0000106C ; =============== S U B R O U T I N E =======================================
.text$mn:0000106C
.text$mn:0000106C ; Attributes: bp-based frame
.text$mn:0000106C
.text$mn:0000106C ; struct TiXmlNode *__thiscall TiXmlNode::ReplaceChild(TiXmlNode *this, struct TiXmlNode *, const struct TiXmlNode *)
.text$mn:0000106C                 public ?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:0000106C ?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:0000106C
.text$mn:0000106C var_14          = dword ptr -14h
.text$mn:0000106C var_10          = dword ptr -10h
.text$mn:0000106C var_C           = dword ptr -0Ch
.text$mn:0000106C var_8           = dword ptr -8
.text$mn:0000106C var_4           = dword ptr -4
.text$mn:0000106C arg_0           = dword ptr  8
.text$mn:0000106C arg_4           = dword ptr  0Ch
.text$mn:0000106C
.text$mn:0000106C                 push    ebp
.text$mn:0000106D                 mov     ebp, esp
.text$mn:0000106F                 sub     esp, 14h
.text$mn:00001072                 mov     [ebp+var_8], ecx
.text$mn:00001075                 mov     eax, [ebp+arg_0]
.text$mn:00001078                 mov     ecx, [eax+0Ch]
.text$mn:0000107B                 cmp     ecx, [ebp+var_8]
.text$mn:0000107E                 jz      short loc_1087
.text$mn:00001080                 xor     eax, eax
.text$mn:00001082                 jmp     loc_1134
.text$mn:00001087 ; ---------------------------------------------------------------------------
.text$mn:00001087
.text$mn:00001087 loc_1087:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+12j
.text$mn:00001087                 mov     edx, [ebp+arg_4]
.text$mn:0000108A                 mov     eax, [edx]
.text$mn:0000108C                 mov     ecx, [ebp+arg_4]
.text$mn:0000108F                 mov     edx, [eax+14h]
.text$mn:00001092                 call    edx
.text$mn:00001094                 mov     [ebp+var_4], eax
.text$mn:00001097                 cmp     [ebp+var_4], 0
.text$mn:0000109B                 jnz     short loc_10A4
.text$mn:0000109D                 xor     eax, eax
.text$mn:0000109F                 jmp     loc_1134
.text$mn:000010A4 ; ---------------------------------------------------------------------------
.text$mn:000010A4
.text$mn:000010A4 loc_10A4:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+2Fj
.text$mn:000010A4                 mov     eax, [ebp+var_4]
.text$mn:000010A7                 mov     ecx, [ebp+arg_0]
.text$mn:000010AA                 mov     edx, [ecx+3Ch]
.text$mn:000010AD                 mov     [eax+3Ch], edx
.text$mn:000010B0                 mov     eax, [ebp+var_4]
.text$mn:000010B3                 mov     ecx, [ebp+arg_0]
.text$mn:000010B6                 mov     edx, [ecx+38h]
.text$mn:000010B9                 mov     [eax+38h], edx
.text$mn:000010BC                 mov     eax, [ebp+arg_0]
.text$mn:000010BF                 cmp     dword ptr [eax+3Ch], 0
.text$mn:000010C3                 jz      short loc_10D3
.text$mn:000010C5                 mov     ecx, [ebp+arg_0]
.text$mn:000010C8                 mov     edx, [ecx+3Ch]
.text$mn:000010CB                 mov     eax, [ebp+var_4]
.text$mn:000010CE                 mov     [edx+38h], eax
.text$mn:000010D1                 jmp     short loc_10DC
.text$mn:000010D3 ; ---------------------------------------------------------------------------
.text$mn:000010D3
.text$mn:000010D3 loc_10D3:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+57j
.text$mn:000010D3                 mov     ecx, [ebp+var_8]
.text$mn:000010D6                 mov     edx, [ebp+var_4]
.text$mn:000010D9                 mov     [ecx+18h], edx
.text$mn:000010DC
.text$mn:000010DC loc_10DC:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+65j
.text$mn:000010DC                 mov     eax, [ebp+arg_0]
.text$mn:000010DF                 cmp     dword ptr [eax+38h], 0
.text$mn:000010E3                 jz      short loc_10F3
.text$mn:000010E5                 mov     ecx, [ebp+arg_0]
.text$mn:000010E8                 mov     edx, [ecx+38h]
.text$mn:000010EB                 mov     eax, [ebp+var_4]
.text$mn:000010EE                 mov     [edx+3Ch], eax
.text$mn:000010F1                 jmp     short loc_10FC
.text$mn:000010F3 ; ---------------------------------------------------------------------------
.text$mn:000010F3
.text$mn:000010F3 loc_10F3:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+77j
.text$mn:000010F3                 mov     ecx, [ebp+var_8]
.text$mn:000010F6                 mov     edx, [ebp+var_4]
.text$mn:000010F9                 mov     [ecx+14h], edx
.text$mn:000010FC
.text$mn:000010FC loc_10FC:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+85j
.text$mn:000010FC                 mov     eax, [ebp+arg_0]
.text$mn:000010FF                 mov     [ebp+var_10], eax
.text$mn:00001102                 mov     ecx, [ebp+var_10]
.text$mn:00001105                 mov     [ebp+var_C], ecx
.text$mn:00001108                 cmp     [ebp+var_C], 0
.text$mn:0000110C                 jz      short loc_1121
.text$mn:0000110E                 push    1
.text$mn:00001110                 mov     edx, [ebp+var_C]
.text$mn:00001113                 mov     eax, [edx]
.text$mn:00001115                 mov     ecx, [ebp+var_C]
.text$mn:00001118                 mov     edx, [eax]
.text$mn:0000111A                 call    edx
.text$mn:0000111C                 mov     [ebp+var_14], eax
.text$mn:0000111F                 jmp     short loc_1128
.text$mn:00001121 ; ---------------------------------------------------------------------------
.text$mn:00001121
.text$mn:00001121 loc_1121:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+A0j
.text$mn:00001121                 mov     [ebp+var_14], 0
.text$mn:00001128
.text$mn:00001128 loc_1128:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+B3j
.text$mn:00001128                 mov     eax, [ebp+var_4]
.text$mn:0000112B                 mov     ecx, [ebp+var_8]
.text$mn:0000112E                 mov     [eax+0Ch], ecx
.text$mn:00001131                 mov     eax, [ebp+var_4]
.text$mn:00001134
.text$mn:00001134 loc_1134:                               ; CODE XREF: TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+16j
.text$mn:00001134                                         ; TiXmlNode::ReplaceChild(TiXmlNode *,TiXmlNode const &)+33j
.text$mn:00001134                 mov     esp, ebp
.text$mn:00001136                 pop     ebp
.text$mn:00001137                 retn    8
.text$mn:00001137 ?ReplaceChild@TiXmlNode@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00001137
.text$mn:00001137 ; ---------------------------------------------------------------------------
.text$mn:0000113A                 align 4
.text$mn:0000113C
.text$mn:0000113C ; =============== S U B R O U T I N E =======================================
.text$mn:0000113C
.text$mn:0000113C ; Attributes: bp-based frame
.text$mn:0000113C
.text$mn:0000113C ; bool __thiscall TiXmlNode::RemoveChild(TiXmlNode *this, struct TiXmlNode *)
.text$mn:0000113C                 public ?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z
.text$mn:0000113C ?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z proc near
.text$mn:0000113C
.text$mn:0000113C var_10          = dword ptr -10h
.text$mn:0000113C var_C           = dword ptr -0Ch
.text$mn:0000113C var_8           = dword ptr -8
.text$mn:0000113C var_4           = dword ptr -4
.text$mn:0000113C arg_0           = dword ptr  8
.text$mn:0000113C
.text$mn:0000113C                 push    ebp
.text$mn:0000113D                 mov     ebp, esp
.text$mn:0000113F                 sub     esp, 10h
.text$mn:00001142                 mov     [ebp+var_4], ecx
.text$mn:00001145                 mov     eax, [ebp+arg_0]
.text$mn:00001148                 mov     ecx, [eax+0Ch]
.text$mn:0000114B                 cmp     ecx, [ebp+var_4]
.text$mn:0000114E                 jz      short loc_116F
.text$mn:00001150                 xor     edx, edx
.text$mn:00001152                 jnz     short loc_116B
.text$mn:00001154                 push    115h            ; Line
.text$mn:00001159                 push    offset $SG96180 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:0000115E                 push    offset $SG96181 ; Message
.text$mn:00001163                 call    __wassert
.text$mn:00001168 ; ---------------------------------------------------------------------------
.text$mn:00001168                 add     esp, 0Ch
.text$mn:0000116B
.text$mn:0000116B loc_116B:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+16j
.text$mn:0000116B                 xor     al, al
.text$mn:0000116D                 jmp     short loc_11E9
.text$mn:0000116F ; ---------------------------------------------------------------------------
.text$mn:0000116F
.text$mn:0000116F loc_116F:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+12j
.text$mn:0000116F                 mov     ecx, [ebp+arg_0]
.text$mn:00001172                 cmp     dword ptr [ecx+3Ch], 0
.text$mn:00001176                 jz      short loc_1189
.text$mn:00001178                 mov     edx, [ebp+arg_0]
.text$mn:0000117B                 mov     eax, [edx+3Ch]
.text$mn:0000117E                 mov     ecx, [ebp+arg_0]
.text$mn:00001181                 mov     edx, [ecx+38h]
.text$mn:00001184                 mov     [eax+38h], edx
.text$mn:00001187                 jmp     short loc_1195
.text$mn:00001189 ; ---------------------------------------------------------------------------
.text$mn:00001189
.text$mn:00001189 loc_1189:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+3Aj
.text$mn:00001189                 mov     eax, [ebp+var_4]
.text$mn:0000118C                 mov     ecx, [ebp+arg_0]
.text$mn:0000118F                 mov     edx, [ecx+38h]
.text$mn:00001192                 mov     [eax+18h], edx
.text$mn:00001195
.text$mn:00001195 loc_1195:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+4Bj
.text$mn:00001195                 mov     eax, [ebp+arg_0]
.text$mn:00001198                 cmp     dword ptr [eax+38h], 0
.text$mn:0000119C                 jz      short loc_11AF
.text$mn:0000119E                 mov     ecx, [ebp+arg_0]
.text$mn:000011A1                 mov     edx, [ecx+38h]
.text$mn:000011A4                 mov     eax, [ebp+arg_0]
.text$mn:000011A7                 mov     ecx, [eax+3Ch]
.text$mn:000011AA                 mov     [edx+3Ch], ecx
.text$mn:000011AD                 jmp     short loc_11BB
.text$mn:000011AF ; ---------------------------------------------------------------------------
.text$mn:000011AF
.text$mn:000011AF loc_11AF:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+60j
.text$mn:000011AF                 mov     edx, [ebp+var_4]
.text$mn:000011B2                 mov     eax, [ebp+arg_0]
.text$mn:000011B5                 mov     ecx, [eax+3Ch]
.text$mn:000011B8                 mov     [edx+14h], ecx
.text$mn:000011BB
.text$mn:000011BB loc_11BB:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+71j
.text$mn:000011BB                 mov     edx, [ebp+arg_0]
.text$mn:000011BE                 mov     [ebp+var_C], edx
.text$mn:000011C1                 mov     eax, [ebp+var_C]
.text$mn:000011C4                 mov     [ebp+var_8], eax
.text$mn:000011C7                 cmp     [ebp+var_8], 0
.text$mn:000011CB                 jz      short loc_11E0
.text$mn:000011CD                 push    1
.text$mn:000011CF                 mov     ecx, [ebp+var_8]
.text$mn:000011D2                 mov     edx, [ecx]
.text$mn:000011D4                 mov     ecx, [ebp+var_8]
.text$mn:000011D7                 mov     eax, [edx]
.text$mn:000011D9                 call    eax
.text$mn:000011DB                 mov     [ebp+var_10], eax
.text$mn:000011DE                 jmp     short loc_11E7
.text$mn:000011E0 ; ---------------------------------------------------------------------------
.text$mn:000011E0
.text$mn:000011E0 loc_11E0:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+8Fj
.text$mn:000011E0                 mov     [ebp+var_10], 0
.text$mn:000011E7
.text$mn:000011E7 loc_11E7:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+A2j
.text$mn:000011E7                 mov     al, 1
.text$mn:000011E9
.text$mn:000011E9 loc_11E9:                               ; CODE XREF: TiXmlNode::RemoveChild(TiXmlNode *)+31j
.text$mn:000011E9                 mov     esp, ebp
.text$mn:000011EB                 pop     ebp
.text$mn:000011EC                 retn    4
.text$mn:000011EC ?RemoveChild@TiXmlNode@@QAE_NPAV1@@Z endp
.text$mn:000011EC
.text$mn:000011EC ; ---------------------------------------------------------------------------
.text$mn:000011EF                 db 0Dh dup(0CCh)
.text$mn:000011FC
.text$mn:000011FC ; =============== S U B R O U T I N E =======================================
.text$mn:000011FC
.text$mn:000011FC ; Attributes: bp-based frame
.text$mn:000011FC
.text$mn:000011FC ; struct TiXmlNode *__thiscall TiXmlNode::PreviousSibling(TiXmlNode *this, const wchar_t *)
.text$mn:000011FC                 public ?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:000011FC ?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$mn:000011FC
.text$mn:000011FC var_64          = dword ptr -64h
.text$mn:000011FC var_60          = dword ptr -60h
.text$mn:000011FC var_5C          = dword ptr -5Ch
.text$mn:000011FC var_58          = dword ptr -58h
.text$mn:000011FC var_54          = dword ptr -54h
.text$mn:000011FC var_50          = dword ptr -50h
.text$mn:000011FC var_49          = byte ptr -49h
.text$mn:000011FC var_48          = byte ptr -48h
.text$mn:000011FC var_2C          = byte ptr -2Ch
.text$mn:000011FC var_10          = dword ptr -10h
.text$mn:000011FC var_C           = dword ptr -0Ch
.text$mn:000011FC var_4           = dword ptr -4
.text$mn:000011FC Str             = dword ptr  8
.text$mn:000011FC
.text$mn:000011FC                 push    ebp
.text$mn:000011FD                 mov     ebp, esp
.text$mn:000011FF                 push    0FFFFFFFFh
.text$mn:00001201                 push    offset __ehhandler$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:00001206                 mov     eax, large fs:0
.text$mn:0000120C                 push    eax
.text$mn:0000120D                 sub     esp, 58h
.text$mn:00001210                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001215                 xor     eax, ebp
.text$mn:00001217                 mov     [ebp+var_10], eax
.text$mn:0000121A                 push    eax
.text$mn:0000121B                 lea     eax, [ebp+var_C]
.text$mn:0000121E                 mov     large fs:0, eax
.text$mn:00001224                 mov     [ebp+var_64], ecx
.text$mn:00001227                 mov     eax, [ebp+var_64]
.text$mn:0000122A                 mov     ecx, [eax+38h]
.text$mn:0000122D                 mov     [ebp+var_50], ecx
.text$mn:00001230                 jmp     short loc_123B
.text$mn:00001232 ; ---------------------------------------------------------------------------
.text$mn:00001232
.text$mn:00001232 loc_1232:                               ; CODE XREF: TiXmlNode::PreviousSibling(wchar_t const *):loc_12B1j
.text$mn:00001232                 mov     edx, [ebp+var_50]
.text$mn:00001235                 mov     eax, [edx+38h]
.text$mn:00001238                 mov     [ebp+var_50], eax
.text$mn:0000123B
.text$mn:0000123B loc_123B:                               ; CODE XREF: TiXmlNode::PreviousSibling(wchar_t const *)+34j
.text$mn:0000123B                 cmp     [ebp+var_50], 0
.text$mn:0000123F                 jz      short loc_12B6
.text$mn:00001241                 mov     ecx, [ebp+Str]
.text$mn:00001244                 push    ecx             ; Str
.text$mn:00001245                 lea     ecx, [ebp+var_2C]
.text$mn:00001248                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000124D                 mov     [ebp+var_5C], eax
.text$mn:00001250                 mov     edx, [ebp+var_5C]
.text$mn:00001253                 mov     [ebp+var_54], edx
.text$mn:00001256                 mov     [ebp+var_4], 0
.text$mn:0000125D                 mov     eax, [ebp+var_54]
.text$mn:00001260                 push    eax
.text$mn:00001261                 lea     ecx, [ebp+var_48]
.text$mn:00001264                 push    ecx
.text$mn:00001265                 mov     ecx, [ebp+var_50]
.text$mn:00001268                 call    ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; TiXmlNode::SValue(void)
.text$mn:0000126D                 mov     [ebp+var_60], eax
.text$mn:00001270                 mov     edx, [ebp+var_60]
.text$mn:00001273                 mov     [ebp+var_58], edx
.text$mn:00001276                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000127A                 mov     eax, [ebp+var_58]
.text$mn:0000127D                 push    eax
.text$mn:0000127E                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001283                 add     esp, 8
.text$mn:00001286                 mov     [ebp+var_49], al
.text$mn:00001289                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000128D                 lea     ecx, [ebp+var_48]
.text$mn:00001290                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001295                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000129C                 lea     ecx, [ebp+var_2C]
.text$mn:0000129F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000012A4                 movzx   ecx, [ebp+var_49]
.text$mn:000012A8                 test    ecx, ecx
.text$mn:000012AA                 jz      short loc_12B1
.text$mn:000012AC                 mov     eax, [ebp+var_50]
.text$mn:000012AF                 jmp     short loc_12B8
.text$mn:000012B1 ; ---------------------------------------------------------------------------
.text$mn:000012B1
.text$mn:000012B1 loc_12B1:                               ; CODE XREF: TiXmlNode::PreviousSibling(wchar_t const *)+AEj
.text$mn:000012B1                 jmp     loc_1232
.text$mn:000012B6 ; ---------------------------------------------------------------------------
.text$mn:000012B6
.text$mn:000012B6 loc_12B6:                               ; CODE XREF: TiXmlNode::PreviousSibling(wchar_t const *)+43j
.text$mn:000012B6                 xor     eax, eax
.text$mn:000012B8
.text$mn:000012B8 loc_12B8:                               ; CODE XREF: TiXmlNode::PreviousSibling(wchar_t const *)+B3j
.text$mn:000012B8                 mov     ecx, [ebp+var_C]
.text$mn:000012BB                 mov     large fs:0, ecx
.text$mn:000012C2                 pop     ecx
.text$mn:000012C3                 mov     ecx, [ebp+var_10]
.text$mn:000012C6                 xor     ecx, ebp
.text$mn:000012C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000012CD                 mov     esp, ebp
.text$mn:000012CF                 pop     ebp
.text$mn:000012D0                 retn    4
.text$mn:000012D0 ?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$mn:000012D0
.text$mn:000012D0 ; ---------------------------------------------------------------------------
.text$mn:000012D3                 db 9 dup(0CCh)
.text$mn:000012DC
.text$mn:000012DC ; =============== S U B R O U T I N E =======================================
.text$mn:000012DC
.text$mn:000012DC ; Attributes: bp-based frame
.text$mn:000012DC
.text$mn:000012DC ; struct TiXmlNode *__thiscall TiXmlNode::NextSibling(TiXmlNode *this, const wchar_t *)
.text$mn:000012DC                 public ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:000012DC ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$mn:000012DC                                         ; CODE XREF: TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+46p
.text$mn:000012DC                                         ; TiXmlNode::NextSiblingElement(wchar_t const *)+10p ...
.text$mn:000012DC
.text$mn:000012DC var_64          = dword ptr -64h
.text$mn:000012DC var_60          = dword ptr -60h
.text$mn:000012DC var_5C          = dword ptr -5Ch
.text$mn:000012DC var_58          = dword ptr -58h
.text$mn:000012DC var_54          = dword ptr -54h
.text$mn:000012DC var_50          = dword ptr -50h
.text$mn:000012DC var_49          = byte ptr -49h
.text$mn:000012DC var_48          = byte ptr -48h
.text$mn:000012DC var_2C          = byte ptr -2Ch
.text$mn:000012DC var_10          = dword ptr -10h
.text$mn:000012DC var_C           = dword ptr -0Ch
.text$mn:000012DC var_4           = dword ptr -4
.text$mn:000012DC Str             = dword ptr  8
.text$mn:000012DC
.text$mn:000012DC                 push    ebp
.text$mn:000012DD                 mov     ebp, esp
.text$mn:000012DF                 push    0FFFFFFFFh
.text$mn:000012E1                 push    offset __ehhandler$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$mn:000012E6                 mov     eax, large fs:0
.text$mn:000012EC                 push    eax
.text$mn:000012ED                 sub     esp, 58h
.text$mn:000012F0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000012F5                 xor     eax, ebp
.text$mn:000012F7                 mov     [ebp+var_10], eax
.text$mn:000012FA                 push    eax
.text$mn:000012FB                 lea     eax, [ebp+var_C]
.text$mn:000012FE                 mov     large fs:0, eax
.text$mn:00001304                 mov     [ebp+var_64], ecx
.text$mn:00001307                 mov     eax, [ebp+var_64]
.text$mn:0000130A                 mov     ecx, [eax+3Ch]
.text$mn:0000130D                 mov     [ebp+var_50], ecx
.text$mn:00001310                 jmp     short loc_131B
.text$mn:00001312 ; ---------------------------------------------------------------------------
.text$mn:00001312
.text$mn:00001312 loc_1312:                               ; CODE XREF: TiXmlNode::NextSibling(wchar_t const *):loc_1391j
.text$mn:00001312                 mov     edx, [ebp+var_50]
.text$mn:00001315                 mov     eax, [edx+3Ch]
.text$mn:00001318                 mov     [ebp+var_50], eax
.text$mn:0000131B
.text$mn:0000131B loc_131B:                               ; CODE XREF: TiXmlNode::NextSibling(wchar_t const *)+34j
.text$mn:0000131B                 cmp     [ebp+var_50], 0
.text$mn:0000131F                 jz      short loc_1396
.text$mn:00001321                 mov     ecx, [ebp+Str]
.text$mn:00001324                 push    ecx             ; Str
.text$mn:00001325                 lea     ecx, [ebp+var_2C]
.text$mn:00001328                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000132D                 mov     [ebp+var_5C], eax
.text$mn:00001330                 mov     edx, [ebp+var_5C]
.text$mn:00001333                 mov     [ebp+var_54], edx
.text$mn:00001336                 mov     [ebp+var_4], 0
.text$mn:0000133D                 mov     eax, [ebp+var_54]
.text$mn:00001340                 push    eax
.text$mn:00001341                 lea     ecx, [ebp+var_48]
.text$mn:00001344                 push    ecx
.text$mn:00001345                 mov     ecx, [ebp+var_50]
.text$mn:00001348                 call    ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; TiXmlNode::SValue(void)
.text$mn:0000134D                 mov     [ebp+var_60], eax
.text$mn:00001350                 mov     edx, [ebp+var_60]
.text$mn:00001353                 mov     [ebp+var_58], edx
.text$mn:00001356                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000135A                 mov     eax, [ebp+var_58]
.text$mn:0000135D                 push    eax
.text$mn:0000135E                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001363                 add     esp, 8
.text$mn:00001366                 mov     [ebp+var_49], al
.text$mn:00001369                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000136D                 lea     ecx, [ebp+var_48]
.text$mn:00001370                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001375                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000137C                 lea     ecx, [ebp+var_2C]
.text$mn:0000137F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001384                 movzx   ecx, [ebp+var_49]
.text$mn:00001388                 test    ecx, ecx
.text$mn:0000138A                 jz      short loc_1391
.text$mn:0000138C                 mov     eax, [ebp+var_50]
.text$mn:0000138F                 jmp     short loc_1398
.text$mn:00001391 ; ---------------------------------------------------------------------------
.text$mn:00001391
.text$mn:00001391 loc_1391:                               ; CODE XREF: TiXmlNode::NextSibling(wchar_t const *)+AEj
.text$mn:00001391                 jmp     loc_1312
.text$mn:00001396 ; ---------------------------------------------------------------------------
.text$mn:00001396
.text$mn:00001396 loc_1396:                               ; CODE XREF: TiXmlNode::NextSibling(wchar_t const *)+43j
.text$mn:00001396                 xor     eax, eax
.text$mn:00001398
.text$mn:00001398 loc_1398:                               ; CODE XREF: TiXmlNode::NextSibling(wchar_t const *)+B3j
.text$mn:00001398                 mov     ecx, [ebp+var_C]
.text$mn:0000139B                 mov     large fs:0, ecx
.text$mn:000013A2                 pop     ecx
.text$mn:000013A3                 mov     ecx, [ebp+var_10]
.text$mn:000013A6                 xor     ecx, ebp
.text$mn:000013A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000013AD                 mov     esp, ebp
.text$mn:000013AF                 pop     ebp
.text$mn:000013B0                 retn    4
.text$mn:000013B0 ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$mn:000013B0
.text$mn:000013B0 ; ---------------------------------------------------------------------------
.text$mn:000013B3                 db 9 dup(0CCh)
.text$mn:000013BC
.text$mn:000013BC ; =============== S U B R O U T I N E =======================================
.text$mn:000013BC
.text$mn:000013BC ; Attributes: bp-based frame
.text$mn:000013BC
.text$mn:000013BC ; struct TiXmlElement *__thiscall TiXmlNode::NextSiblingElement(TiXmlNode *__hidden this)
.text$mn:000013BC                 public ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:000013BC ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:000013BC                                         ; CODE XREF: TiXmlHandle::ChildElement(int)+2Ap
.text$mn:000013BC
.text$mn:000013BC var_8           = dword ptr -8
.text$mn:000013BC var_4           = dword ptr -4
.text$mn:000013BC
.text$mn:000013BC                 push    ebp
.text$mn:000013BD                 mov     ebp, esp
.text$mn:000013BF                 sub     esp, 8
.text$mn:000013C2                 mov     [ebp+var_8], ecx
.text$mn:000013C5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000013C8                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:000013CD                 mov     [ebp+var_4], eax
.text$mn:000013D0                 jmp     short loc_13DD
.text$mn:000013D2 ; ---------------------------------------------------------------------------
.text$mn:000013D2
.text$mn:000013D2 loc_13D2:                               ; CODE XREF: TiXmlNode::NextSiblingElement(void):loc_13F9j
.text$mn:000013D2                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013D5                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:000013DA                 mov     [ebp+var_4], eax
.text$mn:000013DD
.text$mn:000013DD loc_13DD:                               ; CODE XREF: TiXmlNode::NextSiblingElement(void)+14j
.text$mn:000013DD                 cmp     [ebp+var_4], 0
.text$mn:000013E1                 jz      short loc_13FB
.text$mn:000013E3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013E6                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000013EB                 test    eax, eax
.text$mn:000013ED                 jz      short loc_13F9
.text$mn:000013EF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013F2                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000013F7                 jmp     short loc_13FD
.text$mn:000013F9 ; ---------------------------------------------------------------------------
.text$mn:000013F9
.text$mn:000013F9 loc_13F9:                               ; CODE XREF: TiXmlNode::NextSiblingElement(void)+31j
.text$mn:000013F9                 jmp     short loc_13D2
.text$mn:000013FB ; ---------------------------------------------------------------------------
.text$mn:000013FB
.text$mn:000013FB loc_13FB:                               ; CODE XREF: TiXmlNode::NextSiblingElement(void)+25j
.text$mn:000013FB                 xor     eax, eax
.text$mn:000013FD
.text$mn:000013FD loc_13FD:                               ; CODE XREF: TiXmlNode::NextSiblingElement(void)+3Bj
.text$mn:000013FD                 mov     esp, ebp
.text$mn:000013FF                 pop     ebp
.text$mn:00001400                 retn
.text$mn:00001400 ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:00001400
.text$mn:00001400 ; ---------------------------------------------------------------------------
.text$mn:00001401                 db 0Bh dup(0CCh)
.text$mn:0000140C
.text$mn:0000140C ; =============== S U B R O U T I N E =======================================
.text$mn:0000140C
.text$mn:0000140C ; Attributes: bp-based frame
.text$mn:0000140C
.text$mn:0000140C ; struct TiXmlElement *__thiscall TiXmlNode::NextSiblingElement(TiXmlNode *this, const wchar_t *)
.text$mn:0000140C                 public ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z
.text$mn:0000140C ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z proc near
.text$mn:0000140C                                         ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+32p
.text$mn:0000140C
.text$mn:0000140C var_8           = dword ptr -8
.text$mn:0000140C var_4           = dword ptr -4
.text$mn:0000140C arg_0           = dword ptr  8
.text$mn:0000140C
.text$mn:0000140C                 push    ebp
.text$mn:0000140D                 mov     ebp, esp
.text$mn:0000140F                 sub     esp, 8
.text$mn:00001412                 mov     [ebp+var_8], ecx
.text$mn:00001415                 mov     eax, [ebp+arg_0]
.text$mn:00001418                 push    eax             ; wchar_t *
.text$mn:00001419                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000141C                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00001421                 mov     [ebp+var_4], eax
.text$mn:00001424                 jmp     short loc_1435
.text$mn:00001426 ; ---------------------------------------------------------------------------
.text$mn:00001426
.text$mn:00001426 loc_1426:                               ; CODE XREF: TiXmlNode::NextSiblingElement(wchar_t const *):loc_1451j
.text$mn:00001426                 mov     ecx, [ebp+arg_0]
.text$mn:00001429                 push    ecx             ; wchar_t *
.text$mn:0000142A                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000142D                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00001432                 mov     [ebp+var_4], eax
.text$mn:00001435
.text$mn:00001435 loc_1435:                               ; CODE XREF: TiXmlNode::NextSiblingElement(wchar_t const *)+18j
.text$mn:00001435                 cmp     [ebp+var_4], 0
.text$mn:00001439                 jz      short loc_1453
.text$mn:0000143B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000143E                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00001443                 test    eax, eax
.text$mn:00001445                 jz      short loc_1451
.text$mn:00001447                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000144A                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000144F                 jmp     short loc_1455
.text$mn:00001451 ; ---------------------------------------------------------------------------
.text$mn:00001451
.text$mn:00001451 loc_1451:                               ; CODE XREF: TiXmlNode::NextSiblingElement(wchar_t const *)+39j
.text$mn:00001451                 jmp     short loc_1426
.text$mn:00001453 ; ---------------------------------------------------------------------------
.text$mn:00001453
.text$mn:00001453 loc_1453:                               ; CODE XREF: TiXmlNode::NextSiblingElement(wchar_t const *)+2Dj
.text$mn:00001453                 xor     eax, eax
.text$mn:00001455
.text$mn:00001455 loc_1455:                               ; CODE XREF: TiXmlNode::NextSiblingElement(wchar_t const *)+43j
.text$mn:00001455                 mov     esp, ebp
.text$mn:00001457                 pop     ebp
.text$mn:00001458                 retn    4
.text$mn:00001458 ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z endp
.text$mn:00001458
.text$mn:00001458 ; ---------------------------------------------------------------------------
.text$mn:0000145B                 align 4
.text$mn:0000145C
.text$mn:0000145C ; =============== S U B R O U T I N E =======================================
.text$mn:0000145C
.text$mn:0000145C ; Attributes: bp-based frame
.text$mn:0000145C
.text$mn:0000145C ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *__hidden this)
.text$mn:0000145C                 public ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:0000145C ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:0000145C                                         ; CODE XREF: TiXmlHandle::FirstChildElement(void)+16p
.text$mn:0000145C                                         ; TiXmlHandle::ChildElement(int)+16p
.text$mn:0000145C
.text$mn:0000145C var_8           = dword ptr -8
.text$mn:0000145C var_4           = dword ptr -4
.text$mn:0000145C
.text$mn:0000145C                 push    ebp
.text$mn:0000145D                 mov     ebp, esp
.text$mn:0000145F                 sub     esp, 8
.text$mn:00001462                 mov     [ebp+var_8], ecx
.text$mn:00001465                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001468                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:0000146D                 mov     [ebp+var_4], eax
.text$mn:00001470                 jmp     short loc_147D
.text$mn:00001472 ; ---------------------------------------------------------------------------
.text$mn:00001472
.text$mn:00001472 loc_1472:                               ; CODE XREF: TiXmlNode::FirstChildElement(void):loc_1499j
.text$mn:00001472                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001475                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:0000147A                 mov     [ebp+var_4], eax
.text$mn:0000147D
.text$mn:0000147D loc_147D:                               ; CODE XREF: TiXmlNode::FirstChildElement(void)+14j
.text$mn:0000147D                 cmp     [ebp+var_4], 0
.text$mn:00001481                 jz      short loc_149B
.text$mn:00001483                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001486                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000148B                 test    eax, eax
.text$mn:0000148D                 jz      short loc_1499
.text$mn:0000148F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001492                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00001497                 jmp     short loc_149D
.text$mn:00001499 ; ---------------------------------------------------------------------------
.text$mn:00001499
.text$mn:00001499 loc_1499:                               ; CODE XREF: TiXmlNode::FirstChildElement(void)+31j
.text$mn:00001499                 jmp     short loc_1472
.text$mn:0000149B ; ---------------------------------------------------------------------------
.text$mn:0000149B
.text$mn:0000149B loc_149B:                               ; CODE XREF: TiXmlNode::FirstChildElement(void)+25j
.text$mn:0000149B                 xor     eax, eax
.text$mn:0000149D
.text$mn:0000149D loc_149D:                               ; CODE XREF: TiXmlNode::FirstChildElement(void)+3Bj
.text$mn:0000149D                 mov     esp, ebp
.text$mn:0000149F                 pop     ebp
.text$mn:000014A0                 retn
.text$mn:000014A0 ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:000014A0
.text$mn:000014A0 ; ---------------------------------------------------------------------------
.text$mn:000014A1                 db 0Bh dup(0CCh)
.text$mn:000014AC
.text$mn:000014AC ; =============== S U B R O U T I N E =======================================
.text$mn:000014AC
.text$mn:000014AC ; Attributes: bp-based frame
.text$mn:000014AC
.text$mn:000014AC ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *this, const wchar_t *)
.text$mn:000014AC                 public ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z
.text$mn:000014AC ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z proc near
.text$mn:000014AC                                         ; CODE XREF: TiXmlHandle::FirstChildElement(wchar_t const *)+1Ap
.text$mn:000014AC                                         ; TiXmlHandle::ChildElement(wchar_t const *,int)+1Ap
.text$mn:000014AC
.text$mn:000014AC var_8           = dword ptr -8
.text$mn:000014AC var_4           = dword ptr -4
.text$mn:000014AC arg_0           = dword ptr  8
.text$mn:000014AC
.text$mn:000014AC                 push    ebp
.text$mn:000014AD                 mov     ebp, esp
.text$mn:000014AF                 sub     esp, 8
.text$mn:000014B2                 mov     [ebp+var_8], ecx
.text$mn:000014B5                 mov     eax, [ebp+arg_0]
.text$mn:000014B8                 push    eax             ; wchar_t *
.text$mn:000014B9                 mov     ecx, [ebp+var_8] ; this
.text$mn:000014BC                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000014C1                 mov     [ebp+var_4], eax
.text$mn:000014C4                 jmp     short loc_14D5
.text$mn:000014C6 ; ---------------------------------------------------------------------------
.text$mn:000014C6
.text$mn:000014C6 loc_14C6:                               ; CODE XREF: TiXmlNode::FirstChildElement(wchar_t const *):loc_14F1j
.text$mn:000014C6                 mov     ecx, [ebp+arg_0]
.text$mn:000014C9                 push    ecx             ; wchar_t *
.text$mn:000014CA                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014CD                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000014D2                 mov     [ebp+var_4], eax
.text$mn:000014D5
.text$mn:000014D5 loc_14D5:                               ; CODE XREF: TiXmlNode::FirstChildElement(wchar_t const *)+18j
.text$mn:000014D5                 cmp     [ebp+var_4], 0
.text$mn:000014D9                 jz      short loc_14F3
.text$mn:000014DB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014DE                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000014E3                 test    eax, eax
.text$mn:000014E5                 jz      short loc_14F1
.text$mn:000014E7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014EA                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000014EF                 jmp     short loc_14F5
.text$mn:000014F1 ; ---------------------------------------------------------------------------
.text$mn:000014F1
.text$mn:000014F1 loc_14F1:                               ; CODE XREF: TiXmlNode::FirstChildElement(wchar_t const *)+39j
.text$mn:000014F1                 jmp     short loc_14C6
.text$mn:000014F3 ; ---------------------------------------------------------------------------
.text$mn:000014F3
.text$mn:000014F3 loc_14F3:                               ; CODE XREF: TiXmlNode::FirstChildElement(wchar_t const *)+2Dj
.text$mn:000014F3                 xor     eax, eax
.text$mn:000014F5
.text$mn:000014F5 loc_14F5:                               ; CODE XREF: TiXmlNode::FirstChildElement(wchar_t const *)+43j
.text$mn:000014F5                 mov     esp, ebp
.text$mn:000014F7                 pop     ebp
.text$mn:000014F8                 retn    4
.text$mn:000014F8 ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z endp
.text$mn:000014F8
.text$mn:000014F8 ; ---------------------------------------------------------------------------
.text$mn:000014FB                 align 4
.text$mn:000014FC
.text$mn:000014FC ; =============== S U B R O U T I N E =======================================
.text$mn:000014FC
.text$mn:000014FC ; Attributes: bp-based frame
.text$mn:000014FC
.text$mn:000014FC ; struct TiXmlDocument *__thiscall TiXmlNode::GetDocument(TiXmlNode *__hidden this)
.text$mn:000014FC                 public ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ
.text$mn:000014FC ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ proc near
.text$mn:000014FC                                         ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+B1p
.text$mn:000014FC
.text$mn:000014FC var_8           = dword ptr -8
.text$mn:000014FC var_4           = dword ptr -4
.text$mn:000014FC
.text$mn:000014FC                 push    ebp
.text$mn:000014FD                 mov     ebp, esp
.text$mn:000014FF                 sub     esp, 8
.text$mn:00001502                 mov     [ebp+var_8], ecx
.text$mn:00001505                 mov     eax, [ebp+var_8]
.text$mn:00001508                 mov     [ebp+var_4], eax
.text$mn:0000150B                 jmp     short loc_1516
.text$mn:0000150D ; ---------------------------------------------------------------------------
.text$mn:0000150D
.text$mn:0000150D loc_150D:                               ; CODE XREF: TiXmlNode::GetDocument(void):loc_1532j
.text$mn:0000150D                 mov     ecx, [ebp+var_4]
.text$mn:00001510                 mov     edx, [ecx+0Ch]
.text$mn:00001513                 mov     [ebp+var_4], edx
.text$mn:00001516
.text$mn:00001516 loc_1516:                               ; CODE XREF: TiXmlNode::GetDocument(void)+Fj
.text$mn:00001516                 cmp     [ebp+var_4], 0
.text$mn:0000151A                 jz      short loc_1534
.text$mn:0000151C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000151F                 call    ?ToDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::ToDocument(void)
.text$mn:00001524                 test    eax, eax
.text$mn:00001526                 jz      short loc_1532
.text$mn:00001528                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000152B                 call    ?ToDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::ToDocument(void)
.text$mn:00001530                 jmp     short loc_1536
.text$mn:00001532 ; ---------------------------------------------------------------------------
.text$mn:00001532
.text$mn:00001532 loc_1532:                               ; CODE XREF: TiXmlNode::GetDocument(void)+2Aj
.text$mn:00001532                 jmp     short loc_150D
.text$mn:00001534 ; ---------------------------------------------------------------------------
.text$mn:00001534
.text$mn:00001534 loc_1534:                               ; CODE XREF: TiXmlNode::GetDocument(void)+1Ej
.text$mn:00001534                 xor     eax, eax
.text$mn:00001536
.text$mn:00001536 loc_1536:                               ; CODE XREF: TiXmlNode::GetDocument(void)+34j
.text$mn:00001536                 mov     esp, ebp
.text$mn:00001538                 pop     ebp
.text$mn:00001539                 retn
.text$mn:00001539 ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ endp
.text$mn:00001539
.text$mn:00001539 ; ---------------------------------------------------------------------------
.text$mn:0000153A                 align 4
.text$mn:0000153C
.text$mn:0000153C ; =============== S U B R O U T I N E =======================================
.text$mn:0000153C
.text$mn:0000153C ; Attributes: bp-based frame
.text$mn:0000153C
.text$mn:0000153C ; protected: __thiscall TiXmlNode::TiXmlNode(enum  TiXmlNode::NodeType)
.text$mn:0000153C                 public ??0TiXmlNode@@IAE@W4NodeType@0@@Z
.text$mn:0000153C ??0TiXmlNode@@IAE@W4NodeType@0@@Z proc near
.text$mn:0000153C                                         ; CODE XREF: TiXmlElement::TiXmlElement(wchar_t const *)+2Bp
.text$mn:0000153C                                         ; TiXmlDeclaration::TiXmlDeclaration(wchar_t const *,wchar_t const *,wchar_t const *)+2Bp ...
.text$mn:0000153C
.text$mn:0000153C var_10          = dword ptr -10h
.text$mn:0000153C var_C           = dword ptr -0Ch
.text$mn:0000153C var_4           = dword ptr -4
.text$mn:0000153C arg_0           = dword ptr  8
.text$mn:0000153C
.text$mn:0000153C                 push    ebp
.text$mn:0000153D                 mov     ebp, esp
.text$mn:0000153F                 push    0FFFFFFFFh
.text$mn:00001541                 push    offset __ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z
.text$mn:00001546                 mov     eax, large fs:0
.text$mn:0000154C                 push    eax
.text$mn:0000154D                 push    ecx
.text$mn:0000154E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001553                 xor     eax, ebp
.text$mn:00001555                 push    eax
.text$mn:00001556                 lea     eax, [ebp+var_C]
.text$mn:00001559                 mov     large fs:0, eax
.text$mn:0000155F                 mov     [ebp+var_10], ecx
.text$mn:00001562                 mov     ecx, [ebp+var_10]
.text$mn:00001565                 call    ??0TiXmlBase@@QAE@XZ ; TiXmlBase::TiXmlBase(void)
.text$mn:0000156A                 mov     [ebp+var_4], 0
.text$mn:00001571                 mov     eax, [ebp+var_10]
.text$mn:00001574                 mov     dword ptr [eax], offset ??_7TiXmlNode@@6B@ ; const TiXmlNode::`vftable'
.text$mn:0000157A                 mov     ecx, [ebp+var_10]
.text$mn:0000157D                 add     ecx, 1Ch
.text$mn:00001580                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001585                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001589                 mov     ecx, [ebp+var_10]
.text$mn:0000158C                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00001593                 mov     edx, [ebp+var_10]
.text$mn:00001596                 mov     eax, [ebp+arg_0]
.text$mn:00001599                 mov     [edx+10h], eax
.text$mn:0000159C                 mov     ecx, [ebp+var_10]
.text$mn:0000159F                 mov     dword ptr [ecx+14h], 0
.text$mn:000015A6                 mov     edx, [ebp+var_10]
.text$mn:000015A9                 mov     dword ptr [edx+18h], 0
.text$mn:000015B0                 mov     eax, [ebp+var_10]
.text$mn:000015B3                 mov     dword ptr [eax+38h], 0
.text$mn:000015BA                 mov     ecx, [ebp+var_10]
.text$mn:000015BD                 mov     dword ptr [ecx+3Ch], 0
.text$mn:000015C4                 mov     edx, [ebp+var_10]
.text$mn:000015C7                 mov     dword ptr [edx+40h], 0
.text$mn:000015CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000015D5                 mov     eax, [ebp+var_10]
.text$mn:000015D8                 mov     ecx, [ebp+var_C]
.text$mn:000015DB                 mov     large fs:0, ecx
.text$mn:000015E2                 pop     ecx
.text$mn:000015E3                 mov     esp, ebp
.text$mn:000015E5                 pop     ebp
.text$mn:000015E6                 retn    4
.text$mn:000015E6 ??0TiXmlNode@@IAE@W4NodeType@0@@Z endp
.text$mn:000015E6
.text$mn:000015E6 ; ---------------------------------------------------------------------------
.text$mn:000015E9                 align 4
.text$mn:000015EC
.text$mn:000015EC ; =============== S U B R O U T I N E =======================================
.text$mn:000015EC
.text$mn:000015EC ; Attributes: bp-based frame
.text$mn:000015EC
.text$mn:000015EC ; int __thiscall TiXmlAttribute::IntValue(TiXmlAttribute *__hidden this)
.text$mn:000015EC                 public ?IntValue@TiXmlAttribute@@QBE?BHXZ
.text$mn:000015EC ?IntValue@TiXmlAttribute@@QBE?BHXZ proc near
.text$mn:000015EC
.text$mn:000015EC var_4           = dword ptr -4
.text$mn:000015EC
.text$mn:000015EC                 push    ebp
.text$mn:000015ED                 mov     ebp, esp
.text$mn:000015EF                 push    ecx
.text$mn:000015F0                 mov     [ebp+var_4], ecx
.text$mn:000015F3                 mov     ecx, [ebp+var_4]
.text$mn:000015F6                 add     ecx, 2Ch ; ','
.text$mn:000015F9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000015FE                 push    eax             ; Str
.text$mn:000015FF                 call    __wtoi
.text$mn:00001604                 add     esp, 4
.text$mn:00001607                 mov     esp, ebp
.text$mn:00001609                 pop     ebp
.text$mn:0000160A                 retn
.text$mn:0000160A ?IntValue@TiXmlAttribute@@QBE?BHXZ endp
.text$mn:0000160A
.text$mn:0000160A ; ---------------------------------------------------------------------------
.text$mn:0000160B                 align 4
.text$mn:0000160C
.text$mn:0000160C ; =============== S U B R O U T I N E =======================================
.text$mn:0000160C
.text$mn:0000160C ; Attributes: bp-based frame
.text$mn:0000160C
.text$mn:0000160C ; double __thiscall TiXmlAttribute::DoubleValue(TiXmlAttribute *__hidden this)
.text$mn:0000160C                 public ?DoubleValue@TiXmlAttribute@@QBE?BNXZ
.text$mn:0000160C ?DoubleValue@TiXmlAttribute@@QBE?BNXZ proc near
.text$mn:0000160C
.text$mn:0000160C var_4           = dword ptr -4
.text$mn:0000160C
.text$mn:0000160C                 push    ebp
.text$mn:0000160D                 mov     ebp, esp
.text$mn:0000160F                 push    ecx
.text$mn:00001610                 mov     [ebp+var_4], ecx
.text$mn:00001613                 mov     ecx, [ebp+var_4]
.text$mn:00001616                 add     ecx, 2Ch ; ','
.text$mn:00001619                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000161E                 push    eax             ; Str
.text$mn:0000161F                 call    __wtof
.text$mn:00001624                 add     esp, 4
.text$mn:00001627                 mov     esp, ebp
.text$mn:00001629                 pop     ebp
.text$mn:0000162A                 retn
.text$mn:0000162A ?DoubleValue@TiXmlAttribute@@QBE?BNXZ endp
.text$mn:0000162A
.text$mn:0000162A ; ---------------------------------------------------------------------------
.text$mn:0000162B                 align 4
.text$mn:0000162C
.text$mn:0000162C ; =============== S U B R O U T I N E =======================================
.text$mn:0000162C
.text$mn:0000162C ; Attributes: bp-based frame
.text$mn:0000162C
.text$mn:0000162C ; int __thiscall TiXmlAttribute::QueryIntValue(TiXmlAttribute *this, int *)
.text$mn:0000162C                 public ?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z
.text$mn:0000162C ?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z proc near
.text$mn:0000162C                                         ; CODE XREF: TiXmlElement::QueryIntAttribute(wchar_t const *,int *)+2Fp
.text$mn:0000162C
.text$mn:0000162C var_4           = dword ptr -4
.text$mn:0000162C arg_0           = dword ptr  8
.text$mn:0000162C
.text$mn:0000162C                 push    ebp
.text$mn:0000162D                 mov     ebp, esp
.text$mn:0000162F                 push    ecx
.text$mn:00001630                 mov     [ebp+var_4], ecx
.text$mn:00001633                 mov     eax, [ebp+arg_0]
.text$mn:00001636                 push    eax
.text$mn:00001637                 push    offset $SG96808 ; "%d"
.text$mn:0000163C                 mov     ecx, [ebp+var_4]
.text$mn:0000163F                 add     ecx, 2Ch ; ','
.text$mn:00001642                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001647                 push    eax             ; Src
.text$mn:00001648                 call    _swscanf
.text$mn:0000164D                 add     esp, 0Ch
.text$mn:00001650                 cmp     eax, 1
.text$mn:00001653                 jnz     short loc_1659
.text$mn:00001655                 xor     eax, eax
.text$mn:00001657                 jmp     short loc_165E
.text$mn:00001659 ; ---------------------------------------------------------------------------
.text$mn:00001659
.text$mn:00001659 loc_1659:                               ; CODE XREF: TiXmlAttribute::QueryIntValue(int *)+27j
.text$mn:00001659                 mov     eax, 2
.text$mn:0000165E
.text$mn:0000165E loc_165E:                               ; CODE XREF: TiXmlAttribute::QueryIntValue(int *)+2Bj
.text$mn:0000165E                 mov     esp, ebp
.text$mn:00001660                 pop     ebp
.text$mn:00001661                 retn    4
.text$mn:00001661 ?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z endp
.text$mn:00001661
.text$mn:00001661 ; ---------------------------------------------------------------------------
.text$mn:00001664                 db 8 dup(0CCh)
.text$mn:0000166C
.text$mn:0000166C ; =============== S U B R O U T I N E =======================================
.text$mn:0000166C
.text$mn:0000166C ; Attributes: bp-based frame
.text$mn:0000166C
.text$mn:0000166C ; int __thiscall TiXmlAttribute::QueryDoubleValue(TiXmlAttribute *this, double *)
.text$mn:0000166C                 public ?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z
.text$mn:0000166C ?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z proc near
.text$mn:0000166C                                         ; CODE XREF: TiXmlElement::QueryDoubleAttribute(wchar_t const *,double *)+2Fp
.text$mn:0000166C
.text$mn:0000166C var_4           = dword ptr -4
.text$mn:0000166C arg_0           = dword ptr  8
.text$mn:0000166C
.text$mn:0000166C                 push    ebp
.text$mn:0000166D                 mov     ebp, esp
.text$mn:0000166F                 push    ecx
.text$mn:00001670                 mov     [ebp+var_4], ecx
.text$mn:00001673                 mov     eax, [ebp+arg_0]
.text$mn:00001676                 push    eax
.text$mn:00001677                 push    offset $SG96814 ; "%lf"
.text$mn:0000167C                 mov     ecx, [ebp+var_4]
.text$mn:0000167F                 add     ecx, 2Ch ; ','
.text$mn:00001682                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001687                 push    eax             ; Src
.text$mn:00001688                 call    _swscanf
.text$mn:0000168D                 add     esp, 0Ch
.text$mn:00001690                 cmp     eax, 1
.text$mn:00001693                 jnz     short loc_1699
.text$mn:00001695                 xor     eax, eax
.text$mn:00001697                 jmp     short loc_169E
.text$mn:00001699 ; ---------------------------------------------------------------------------
.text$mn:00001699
.text$mn:00001699 loc_1699:                               ; CODE XREF: TiXmlAttribute::QueryDoubleValue(double *)+27j
.text$mn:00001699                 mov     eax, 2
.text$mn:0000169E
.text$mn:0000169E loc_169E:                               ; CODE XREF: TiXmlAttribute::QueryDoubleValue(double *)+2Bj
.text$mn:0000169E                 mov     esp, ebp
.text$mn:000016A0                 pop     ebp
.text$mn:000016A1                 retn    4
.text$mn:000016A1 ?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z endp
.text$mn:000016A1
.text$mn:000016A1 ; ---------------------------------------------------------------------------
.text$mn:000016A4                 db 8 dup(0CCh)
.text$mn:000016AC
.text$mn:000016AC ; =============== S U B R O U T I N E =======================================
.text$mn:000016AC
.text$mn:000016AC ; Attributes: bp-based frame
.text$mn:000016AC
.text$mn:000016AC ; void __thiscall TiXmlAttribute::SetIntValue(TiXmlAttribute *this, int)
.text$mn:000016AC                 public ?SetIntValue@TiXmlAttribute@@QAEXH@Z
.text$mn:000016AC ?SetIntValue@TiXmlAttribute@@QAEXH@Z proc near
.text$mn:000016AC
.text$mn:000016AC var_88          = dword ptr -88h
.text$mn:000016AC var_84          = word ptr -84h
.text$mn:000016AC var_4           = dword ptr -4
.text$mn:000016AC arg_0           = dword ptr  8
.text$mn:000016AC
.text$mn:000016AC                 push    ebp
.text$mn:000016AD                 mov     ebp, esp
.text$mn:000016AF                 sub     esp, 88h
.text$mn:000016B5                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000016BA                 xor     eax, ebp
.text$mn:000016BC                 mov     [ebp+var_4], eax
.text$mn:000016BF                 mov     [ebp+var_88], ecx
.text$mn:000016C5                 mov     eax, [ebp+arg_0]
.text$mn:000016C8                 push    eax
.text$mn:000016C9                 push    offset $SG96820 ; "%d"
.text$mn:000016CE                 lea     ecx, [ebp+var_84]
.text$mn:000016D4                 push    ecx             ; LPWSTR
.text$mn:000016D5                 call    dword ptr ds:__imp__wsprintfW
.text$mn:000016DB                 add     esp, 0Ch
.text$mn:000016DE                 lea     edx, [ebp+var_84]
.text$mn:000016E4                 push    edx             ; wchar_t *
.text$mn:000016E5                 mov     ecx, [ebp+var_88] ; this
.text$mn:000016EB                 call    ?SetValue@TiXmlAttribute@@QAEXPB_W@Z ; TiXmlAttribute::SetValue(wchar_t const *)
.text$mn:000016F0                 mov     ecx, [ebp+var_4]
.text$mn:000016F3                 xor     ecx, ebp
.text$mn:000016F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000016FA                 mov     esp, ebp
.text$mn:000016FC                 pop     ebp
.text$mn:000016FD                 retn    4
.text$mn:000016FD ?SetIntValue@TiXmlAttribute@@QAEXH@Z endp
.text$mn:000016FD
.text$mn:000016FD ; ---------------------------------------------------------------------------
.text$mn:00001700                 db 0Ch dup(0CCh)
.text$mn:0000170C
.text$mn:0000170C ; =============== S U B R O U T I N E =======================================
.text$mn:0000170C
.text$mn:0000170C ; Attributes: bp-based frame
.text$mn:0000170C
.text$mn:0000170C ; void __thiscall TiXmlAttribute::SetDoubleValue(TiXmlAttribute *this, double)
.text$mn:0000170C                 public ?SetDoubleValue@TiXmlAttribute@@QAEXN@Z
.text$mn:0000170C ?SetDoubleValue@TiXmlAttribute@@QAEXN@Z proc near
.text$mn:0000170C
.text$mn:0000170C var_90          = qword ptr -90h
.text$mn:0000170C var_88          = dword ptr -88h
.text$mn:0000170C var_84          = word ptr -84h
.text$mn:0000170C var_4           = dword ptr -4
.text$mn:0000170C arg_0           = qword ptr  8
.text$mn:0000170C
.text$mn:0000170C                 push    ebp
.text$mn:0000170D                 mov     ebp, esp
.text$mn:0000170F                 sub     esp, 88h
.text$mn:00001715                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000171A                 xor     eax, ebp
.text$mn:0000171C                 mov     [ebp+var_4], eax
.text$mn:0000171F                 mov     [ebp+var_88], ecx
.text$mn:00001725                 sub     esp, 8
.text$mn:00001728                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000172D                 movsd   [esp+90h+var_90], xmm0
.text$mn:00001732                 push    offset $SG96826 ; "%lf"
.text$mn:00001737                 lea     eax, [ebp+var_84]
.text$mn:0000173D                 push    eax             ; LPWSTR
.text$mn:0000173E                 call    dword ptr ds:__imp__wsprintfW
.text$mn:00001744                 add     esp, 10h
.text$mn:00001747                 lea     ecx, [ebp+var_84]
.text$mn:0000174D                 push    ecx             ; wchar_t *
.text$mn:0000174E                 mov     ecx, [ebp+var_88] ; this
.text$mn:00001754                 call    ?SetValue@TiXmlAttribute@@QAEXPB_W@Z ; TiXmlAttribute::SetValue(wchar_t const *)
.text$mn:00001759                 mov     ecx, [ebp+var_4]
.text$mn:0000175C                 xor     ecx, ebp
.text$mn:0000175E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001763                 mov     esp, ebp
.text$mn:00001765                 pop     ebp
.text$mn:00001766                 retn    8
.text$mn:00001766 ?SetDoubleValue@TiXmlAttribute@@QAEXN@Z endp
.text$mn:00001766
.text$mn:00001766 ; ---------------------------------------------------------------------------
.text$mn:00001769                 align 4
.text$mn:0000176C
.text$mn:0000176C ; =============== S U B R O U T I N E =======================================
.text$mn:0000176C
.text$mn:0000176C ; Attributes: bp-based frame
.text$mn:0000176C
.text$mn:0000176C ; struct TiXmlAttribute *__thiscall TiXmlAttribute::Next(TiXmlAttribute *__hidden this)
.text$mn:0000176C                 public ?Next@TiXmlAttribute@@QBEPAV1@XZ
.text$mn:0000176C ?Next@TiXmlAttribute@@QBEPAV1@XZ proc near
.text$mn:0000176C                                         ; CODE XREF: TiXmlElement::Clone(void)+A8p
.text$mn:0000176C                                         ; TiXmlElement::Print(_iobuf *,int)+66p ...
.text$mn:0000176C
.text$mn:0000176C var_4           = dword ptr -4
.text$mn:0000176C
.text$mn:0000176C                 push    ebp
.text$mn:0000176D                 mov     ebp, esp
.text$mn:0000176F                 push    ecx
.text$mn:00001770                 mov     [ebp+var_4], ecx
.text$mn:00001773                 mov     eax, [ebp+var_4]
.text$mn:00001776                 mov     ecx, [eax+4Ch]
.text$mn:00001779                 add     ecx, 2Ch ; ','
.text$mn:0000177C                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:00001781                 movzx   ecx, al
.text$mn:00001784                 test    ecx, ecx
.text$mn:00001786                 jz      short loc_17A1
.text$mn:00001788                 mov     edx, [ebp+var_4]
.text$mn:0000178B                 mov     ecx, [edx+4Ch]
.text$mn:0000178E                 add     ecx, 10h
.text$mn:00001791                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:00001796                 movzx   eax, al
.text$mn:00001799                 test    eax, eax
.text$mn:0000179B                 jz      short loc_17A1
.text$mn:0000179D                 xor     eax, eax
.text$mn:0000179F                 jmp     short loc_17A7
.text$mn:000017A1 ; ---------------------------------------------------------------------------
.text$mn:000017A1
.text$mn:000017A1 loc_17A1:                               ; CODE XREF: TiXmlAttribute::Next(void)+1Aj
.text$mn:000017A1                                         ; TiXmlAttribute::Next(void)+2Fj
.text$mn:000017A1                 mov     ecx, [ebp+var_4]
.text$mn:000017A4                 mov     eax, [ecx+4Ch]
.text$mn:000017A7
.text$mn:000017A7 loc_17A7:                               ; CODE XREF: TiXmlAttribute::Next(void)+33j
.text$mn:000017A7                 mov     esp, ebp
.text$mn:000017A9                 pop     ebp
.text$mn:000017AA                 retn
.text$mn:000017AA ?Next@TiXmlAttribute@@QBEPAV1@XZ endp
.text$mn:000017AA
.text$mn:000017AA ; ---------------------------------------------------------------------------
.text$mn:000017AB                 align 4
.text$mn:000017AC
.text$mn:000017AC ; =============== S U B R O U T I N E =======================================
.text$mn:000017AC
.text$mn:000017AC ; Attributes: bp-based frame
.text$mn:000017AC
.text$mn:000017AC ; struct TiXmlAttribute *__thiscall TiXmlAttribute::Previous(TiXmlAttribute *__hidden this)
.text$mn:000017AC                 public ?Previous@TiXmlAttribute@@QBEPAV1@XZ
.text$mn:000017AC ?Previous@TiXmlAttribute@@QBEPAV1@XZ proc near
.text$mn:000017AC
.text$mn:000017AC var_4           = dword ptr -4
.text$mn:000017AC
.text$mn:000017AC                 push    ebp
.text$mn:000017AD                 mov     ebp, esp
.text$mn:000017AF                 push    ecx
.text$mn:000017B0                 mov     [ebp+var_4], ecx
.text$mn:000017B3                 mov     eax, [ebp+var_4]
.text$mn:000017B6                 mov     ecx, [eax+48h]
.text$mn:000017B9                 add     ecx, 2Ch ; ','
.text$mn:000017BC                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:000017C1                 movzx   ecx, al
.text$mn:000017C4                 test    ecx, ecx
.text$mn:000017C6                 jz      short loc_17E1
.text$mn:000017C8                 mov     edx, [ebp+var_4]
.text$mn:000017CB                 mov     ecx, [edx+48h]
.text$mn:000017CE                 add     ecx, 10h
.text$mn:000017D1                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:000017D6                 movzx   eax, al
.text$mn:000017D9                 test    eax, eax
.text$mn:000017DB                 jz      short loc_17E1
.text$mn:000017DD                 xor     eax, eax
.text$mn:000017DF                 jmp     short loc_17E7
.text$mn:000017E1 ; ---------------------------------------------------------------------------
.text$mn:000017E1
.text$mn:000017E1 loc_17E1:                               ; CODE XREF: TiXmlAttribute::Previous(void)+1Aj
.text$mn:000017E1                                         ; TiXmlAttribute::Previous(void)+2Fj
.text$mn:000017E1                 mov     ecx, [ebp+var_4]
.text$mn:000017E4                 mov     eax, [ecx+48h]
.text$mn:000017E7
.text$mn:000017E7 loc_17E7:                               ; CODE XREF: TiXmlAttribute::Previous(void)+33j
.text$mn:000017E7                 mov     esp, ebp
.text$mn:000017E9                 pop     ebp
.text$mn:000017EA                 retn
.text$mn:000017EA ?Previous@TiXmlAttribute@@QBEPAV1@XZ endp
.text$mn:000017EA
.text$mn:000017EA ; ---------------------------------------------------------------------------
.text$mn:000017EB                 align 4
.text$mn:000017EC
.text$mn:000017EC ; =============== S U B R O U T I N E =======================================
.text$mn:000017EC
.text$mn:000017EC ; Attributes: bp-based frame
.text$mn:000017EC
.text$mn:000017EC ; void __thiscall TiXmlAttribute::Print(TiXmlAttribute *this, FILE *File, int)
.text$mn:000017EC                 public ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
.text$mn:000017EC ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000017EC                                         ; DATA XREF: .rdata:0000E4A4o
.text$mn:000017EC
.text$mn:000017EC var_84          = dword ptr -84h
.text$mn:000017EC var_80          = byte ptr -80h
.text$mn:000017EC var_64          = byte ptr -64h
.text$mn:000017EC var_48          = byte ptr -48h
.text$mn:000017EC var_2C          = byte ptr -2Ch
.text$mn:000017EC var_10          = dword ptr -10h
.text$mn:000017EC var_C           = dword ptr -0Ch
.text$mn:000017EC var_4           = dword ptr -4
.text$mn:000017EC File            = dword ptr  8
.text$mn:000017EC
.text$mn:000017EC                 push    ebp
.text$mn:000017ED                 mov     ebp, esp
.text$mn:000017EF                 push    0FFFFFFFFh
.text$mn:000017F1                 push    offset __ehhandler$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
.text$mn:000017F6                 mov     eax, large fs:0
.text$mn:000017FC                 push    eax
.text$mn:000017FD                 sub     esp, 78h
.text$mn:00001800                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001805                 xor     eax, ebp
.text$mn:00001807                 mov     [ebp+var_10], eax
.text$mn:0000180A                 push    eax
.text$mn:0000180B                 lea     eax, [ebp+var_C]
.text$mn:0000180E                 mov     large fs:0, eax
.text$mn:00001814                 mov     [ebp+var_84], ecx
.text$mn:0000181A                 lea     ecx, [ebp+var_2C]
.text$mn:0000181D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001822                 mov     [ebp+var_4], 0
.text$mn:00001829                 lea     ecx, [ebp+var_48]
.text$mn:0000182C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001831                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001835                 mov     ecx, [ebp+var_84] ; this
.text$mn:0000183B                 call    ?Name@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Name(void)
.text$mn:00001840                 push    eax             ; Str
.text$mn:00001841                 lea     ecx, [ebp+var_80]
.text$mn:00001844                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001849                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000184D                 lea     eax, [ebp+var_2C]
.text$mn:00001850                 push    eax
.text$mn:00001851                 lea     ecx, [ebp+var_80]
.text$mn:00001854                 push    ecx
.text$mn:00001855                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000185A                 add     esp, 8
.text$mn:0000185D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001861                 lea     ecx, [ebp+var_80]
.text$mn:00001864                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001869                 mov     ecx, [ebp+var_84] ; this
.text$mn:0000186F                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:00001874                 push    eax             ; Str
.text$mn:00001875                 lea     ecx, [ebp+var_64]
.text$mn:00001878                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000187D                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001881                 lea     edx, [ebp+var_48]
.text$mn:00001884                 push    edx
.text$mn:00001885                 lea     eax, [ebp+var_64]
.text$mn:00001888                 push    eax
.text$mn:00001889                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000188E                 add     esp, 8
.text$mn:00001891                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001895                 lea     ecx, [ebp+var_64]
.text$mn:00001898                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000189D                 push    0
.text$mn:0000189F                 push    22h ; '"'
.text$mn:000018A1                 mov     ecx, [ebp+var_84]
.text$mn:000018A7                 add     ecx, 2Ch ; ','
.text$mn:000018AA                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t,uint)
.text$mn:000018AF                 cmp     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000018B5                 jnz     short loc_18DC
.text$mn:000018B7                 lea     ecx, [ebp+var_48]
.text$mn:000018BA                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018BF                 push    eax
.text$mn:000018C0                 lea     ecx, [ebp+var_2C]
.text$mn:000018C3                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018C8                 push    eax
.text$mn:000018C9                 push    offset $SG96736 ; "%s=\"%s\""
.text$mn:000018CE                 mov     ecx, [ebp+File]
.text$mn:000018D1                 push    ecx             ; File
.text$mn:000018D2                 call    _fwprintf
.text$mn:000018D7                 add     esp, 10h
.text$mn:000018DA                 jmp     short loc_18FF
.text$mn:000018DC ; ---------------------------------------------------------------------------
.text$mn:000018DC
.text$mn:000018DC loc_18DC:                               ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+C9j
.text$mn:000018DC                 lea     ecx, [ebp+var_48]
.text$mn:000018DF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018E4                 push    eax
.text$mn:000018E5                 lea     ecx, [ebp+var_2C]
.text$mn:000018E8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018ED                 push    eax
.text$mn:000018EE                 push    offset $SG96738 ; "%s='%s'"
.text$mn:000018F3                 mov     edx, [ebp+File]
.text$mn:000018F6                 push    edx             ; File
.text$mn:000018F7                 call    _fwprintf
.text$mn:000018FC                 add     esp, 10h
.text$mn:000018FF
.text$mn:000018FF loc_18FF:                               ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+EEj
.text$mn:000018FF                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001903                 lea     ecx, [ebp+var_48]
.text$mn:00001906                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000190B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001912                 lea     ecx, [ebp+var_2C]
.text$mn:00001915                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000191A                 mov     ecx, [ebp+var_C]
.text$mn:0000191D                 mov     large fs:0, ecx
.text$mn:00001924                 pop     ecx
.text$mn:00001925                 mov     ecx, [ebp+var_10]
.text$mn:00001928                 xor     ecx, ebp
.text$mn:0000192A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000192F                 mov     esp, ebp
.text$mn:00001931                 pop     ebp
.text$mn:00001932                 retn    8
.text$mn:00001932 ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00001932
.text$mn:00001932 ; ---------------------------------------------------------------------------
.text$mn:00001935                 db 7 dup(0CCh)
.text$mn:0000193C
.text$mn:0000193C ; =============== S U B R O U T I N E =======================================
.text$mn:0000193C
.text$mn:0000193C ; Attributes: bp-based frame
.text$mn:0000193C
.text$mn:0000193C ; public: virtual void __thiscall TiXmlAttribute::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:0000193C                 public ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:0000193C ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:0000193C                                         ; DATA XREF: .rdata:0000E4A8o
.text$mn:0000193C
.text$mn:0000193C var_4           = dword ptr -4
.text$mn:0000193C arg_0           = dword ptr  8
.text$mn:0000193C
.text$mn:0000193C                 push    ebp
.text$mn:0000193D                 mov     ebp, esp
.text$mn:0000193F                 push    ecx
.text$mn:00001940                 mov     [ebp+var_4], ecx
.text$mn:00001943                 push    0
.text$mn:00001945                 push    22h ; '"'
.text$mn:00001947                 mov     ecx, [ebp+var_4]
.text$mn:0000194A                 add     ecx, 2Ch ; ','
.text$mn:0000194D                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t,uint)
.text$mn:00001952                 cmp     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00001958                 jz      short loc_19B2
.text$mn:0000195A                 mov     eax, [ebp+arg_0]
.text$mn:0000195D                 push    eax
.text$mn:0000195E                 mov     ecx, [ebp+var_4]
.text$mn:00001961                 add     ecx, 10h
.text$mn:00001964                 push    ecx
.text$mn:00001965                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:0000196A                 add     esp, 8
.text$mn:0000196D                 push    offset $SG96764 ; Str
.text$mn:00001972                 push    offset $SG96765 ; Str
.text$mn:00001977                 mov     edx, [ebp+arg_0]
.text$mn:0000197A                 push    edx             ; int
.text$mn:0000197B                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00001980                 add     esp, 8
.text$mn:00001983                 push    eax             ; int
.text$mn:00001984                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00001989                 add     esp, 8
.text$mn:0000198C                 mov     eax, [ebp+arg_0]
.text$mn:0000198F                 push    eax
.text$mn:00001990                 mov     ecx, [ebp+var_4]
.text$mn:00001993                 add     ecx, 2Ch ; ','
.text$mn:00001996                 push    ecx
.text$mn:00001997                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:0000199C                 add     esp, 8
.text$mn:0000199F                 push    offset $SG96774 ; Str
.text$mn:000019A4                 mov     edx, [ebp+arg_0]
.text$mn:000019A7                 push    edx             ; int
.text$mn:000019A8                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000019AD                 add     esp, 8
.text$mn:000019B0                 jmp     short loc_1A08
.text$mn:000019B2 ; ---------------------------------------------------------------------------
.text$mn:000019B2
.text$mn:000019B2 loc_19B2:                               ; CODE XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+1Cj
.text$mn:000019B2                 mov     eax, [ebp+arg_0]
.text$mn:000019B5                 push    eax
.text$mn:000019B6                 mov     ecx, [ebp+var_4]
.text$mn:000019B9                 add     ecx, 10h
.text$mn:000019BC                 push    ecx
.text$mn:000019BD                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:000019C2                 add     esp, 8
.text$mn:000019C5                 push    offset $SG96792 ; Str
.text$mn:000019CA                 push    offset $SG96793 ; Str
.text$mn:000019CF                 mov     edx, [ebp+arg_0]
.text$mn:000019D2                 push    edx             ; int
.text$mn:000019D3                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000019D8                 add     esp, 8
.text$mn:000019DB                 push    eax             ; int
.text$mn:000019DC                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000019E1                 add     esp, 8
.text$mn:000019E4                 mov     eax, [ebp+arg_0]
.text$mn:000019E7                 push    eax
.text$mn:000019E8                 mov     ecx, [ebp+var_4]
.text$mn:000019EB                 add     ecx, 2Ch ; ','
.text$mn:000019EE                 push    ecx
.text$mn:000019EF                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:000019F4                 add     esp, 8
.text$mn:000019F7                 push    offset $SG96802 ; Str
.text$mn:000019FC                 mov     edx, [ebp+arg_0]
.text$mn:000019FF                 push    edx             ; int
.text$mn:00001A00                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00001A05                 add     esp, 8
.text$mn:00001A08
.text$mn:00001A08 loc_1A08:                               ; CODE XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+74j
.text$mn:00001A08                 mov     esp, ebp
.text$mn:00001A0A                 pop     ebp
.text$mn:00001A0B                 retn    4
.text$mn:00001A0B ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:00001A0B
.text$mn:00001A0B ; ---------------------------------------------------------------------------
.text$mn:00001A0E                 db 0Eh dup(0CCh)
.text$mn:00001A1C
.text$mn:00001A1C ; =============== S U B R O U T I N E =======================================
.text$mn:00001A1C
.text$mn:00001A1C ; Attributes: bp-based frame
.text$mn:00001A1C
.text$mn:00001A1C ; public: __thiscall TiXmlAttributeSet::TiXmlAttributeSet(void)
.text$mn:00001A1C                 public ??0TiXmlAttributeSet@@QAE@XZ
.text$mn:00001A1C ??0TiXmlAttributeSet@@QAE@XZ proc near  ; CODE XREF: TiXmlElement::TiXmlElement(wchar_t const *)+46p
.text$mn:00001A1C
.text$mn:00001A1C var_10          = dword ptr -10h
.text$mn:00001A1C var_C           = dword ptr -0Ch
.text$mn:00001A1C var_4           = dword ptr -4
.text$mn:00001A1C
.text$mn:00001A1C                 push    ebp
.text$mn:00001A1D                 mov     ebp, esp
.text$mn:00001A1F                 push    0FFFFFFFFh
.text$mn:00001A21                 push    offset __ehhandler$??0TiXmlAttributeSet@@QAE@XZ
.text$mn:00001A26                 mov     eax, large fs:0
.text$mn:00001A2C                 push    eax
.text$mn:00001A2D                 push    ecx
.text$mn:00001A2E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001A33                 xor     eax, ebp
.text$mn:00001A35                 push    eax
.text$mn:00001A36                 lea     eax, [ebp+var_C]
.text$mn:00001A39                 mov     large fs:0, eax
.text$mn:00001A3F                 mov     [ebp+var_10], ecx
.text$mn:00001A42                 mov     ecx, [ebp+var_10]
.text$mn:00001A45                 call    ??0TiXmlAttribute@@QAE@XZ ; TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00001A4A                 mov     [ebp+var_4], 0
.text$mn:00001A51                 mov     eax, [ebp+var_10]
.text$mn:00001A54                 mov     ecx, [ebp+var_10]
.text$mn:00001A57                 mov     [ecx+4Ch], eax
.text$mn:00001A5A                 mov     edx, [ebp+var_10]
.text$mn:00001A5D                 mov     eax, [ebp+var_10]
.text$mn:00001A60                 mov     [eax+48h], edx
.text$mn:00001A63                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001A6A                 mov     eax, [ebp+var_10]
.text$mn:00001A6D                 mov     ecx, [ebp+var_C]
.text$mn:00001A70                 mov     large fs:0, ecx
.text$mn:00001A77                 pop     ecx
.text$mn:00001A78                 mov     esp, ebp
.text$mn:00001A7A                 pop     ebp
.text$mn:00001A7B                 retn
.text$mn:00001A7B ??0TiXmlAttributeSet@@QAE@XZ endp
.text$mn:00001A7B
.text$mn:00001A7C
.text$mn:00001A7C ; =============== S U B R O U T I N E =======================================
.text$mn:00001A7C
.text$mn:00001A7C ; Attributes: bp-based frame
.text$mn:00001A7C
.text$mn:00001A7C ; _DWORD __thiscall TiXmlAttributeSet::~TiXmlAttributeSet(TiXmlAttributeSet *__hidden this)
.text$mn:00001A7C                 public ??1TiXmlAttributeSet@@QAE@XZ
.text$mn:00001A7C ??1TiXmlAttributeSet@@QAE@XZ proc near  ; CODE XREF: TiXmlElement::~TiXmlElement(void)+9Cp
.text$mn:00001A7C                                         ; __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$1+6j ...
.text$mn:00001A7C
.text$mn:00001A7C var_10          = dword ptr -10h
.text$mn:00001A7C var_C           = dword ptr -0Ch
.text$mn:00001A7C var_4           = dword ptr -4
.text$mn:00001A7C
.text$mn:00001A7C                 push    ebp
.text$mn:00001A7D                 mov     ebp, esp
.text$mn:00001A7F                 push    0FFFFFFFFh
.text$mn:00001A81                 push    offset __ehhandler$??1TiXmlAttributeSet@@QAE@XZ
.text$mn:00001A86                 mov     eax, large fs:0
.text$mn:00001A8C                 push    eax
.text$mn:00001A8D                 push    ecx
.text$mn:00001A8E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001A93                 xor     eax, ebp
.text$mn:00001A95                 push    eax
.text$mn:00001A96                 lea     eax, [ebp+var_C]
.text$mn:00001A99                 mov     large fs:0, eax
.text$mn:00001A9F                 mov     [ebp+var_10], ecx
.text$mn:00001AA2                 mov     [ebp+var_4], 0
.text$mn:00001AA9                 mov     eax, [ebp+var_10]
.text$mn:00001AAC                 mov     ecx, [ebp+var_10]
.text$mn:00001AAF                 cmp     [ecx+4Ch], eax
.text$mn:00001AB2                 jz      short loc_1ACB
.text$mn:00001AB4                 push    41Fh            ; Line
.text$mn:00001AB9                 push    offset $SG97131 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00001ABE                 push    offset $SG97132 ; "sentinel.next == &sentinel"
.text$mn:00001AC3                 call    __wassert
.text$mn:00001AC8 ; ---------------------------------------------------------------------------
.text$mn:00001AC8                 add     esp, 0Ch
.text$mn:00001ACB
.text$mn:00001ACB loc_1ACB:                               ; CODE XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+36j
.text$mn:00001ACB                 mov     eax, [ebp+var_10]
.text$mn:00001ACE                 mov     ecx, [ebp+var_10]
.text$mn:00001AD1                 cmp     [ecx+48h], eax
.text$mn:00001AD4                 jz      short loc_1AED
.text$mn:00001AD6                 push    420h            ; Line
.text$mn:00001ADB                 push    offset $SG97134 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00001AE0                 push    offset $SG97135 ; "sentinel.prev == &sentinel"
.text$mn:00001AE5                 call    __wassert
.text$mn:00001AEA ; ---------------------------------------------------------------------------
.text$mn:00001AEA                 add     esp, 0Ch
.text$mn:00001AED
.text$mn:00001AED loc_1AED:                               ; CODE XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+58j
.text$mn:00001AED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001AF4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001AF7                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:00001AFC                 mov     ecx, [ebp+var_C]
.text$mn:00001AFF                 mov     large fs:0, ecx
.text$mn:00001B06                 pop     ecx
.text$mn:00001B07                 mov     esp, ebp
.text$mn:00001B09                 pop     ebp
.text$mn:00001B0A                 retn
.text$mn:00001B0A ??1TiXmlAttributeSet@@QAE@XZ endp
.text$mn:00001B0A
.text$mn:00001B0A ; ---------------------------------------------------------------------------
.text$mn:00001B0B                 align 4
.text$mn:00001B0C
.text$mn:00001B0C ; =============== S U B R O U T I N E =======================================
.text$mn:00001B0C
.text$mn:00001B0C ; Attributes: bp-based frame
.text$mn:00001B0C
.text$mn:00001B0C ; void __thiscall TiXmlAttributeSet::Add(TiXmlAttributeSet *this, struct TiXmlAttribute *)
.text$mn:00001B0C                 public ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z
.text$mn:00001B0C ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z proc near
.text$mn:00001B0C                                         ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+A7p
.text$mn:00001B0C
.text$mn:00001B0C var_4           = dword ptr -4
.text$mn:00001B0C arg_0           = dword ptr  8
.text$mn:00001B0C
.text$mn:00001B0C                 push    ebp
.text$mn:00001B0D                 mov     ebp, esp
.text$mn:00001B0F                 push    ecx
.text$mn:00001B10                 mov     [ebp+var_4], ecx
.text$mn:00001B13                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001B16                 call    ?Name@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Name(void)
.text$mn:00001B1B                 push    eax             ; wchar_t *
.text$mn:00001B1C                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001B1F                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00001B24                 test    eax, eax
.text$mn:00001B26                 jz      short loc_1B3F
.text$mn:00001B28                 push    426h            ; Line
.text$mn:00001B2D                 push    offset $SG97141 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00001B32                 push    offset $SG97142 ; "!Find( addMe->Name() )"
.text$mn:00001B37                 call    __wassert
.text$mn:00001B3C ; ---------------------------------------------------------------------------
.text$mn:00001B3C                 add     esp, 0Ch
.text$mn:00001B3F
.text$mn:00001B3F loc_1B3F:                               ; CODE XREF: TiXmlAttributeSet::Add(TiXmlAttribute *)+1Aj
.text$mn:00001B3F                 mov     ecx, [ebp+var_4]
.text$mn:00001B42                 mov     edx, [ebp+arg_0]
.text$mn:00001B45                 mov     [edx+4Ch], ecx
.text$mn:00001B48                 mov     eax, [ebp+arg_0]
.text$mn:00001B4B                 mov     ecx, [ebp+var_4]
.text$mn:00001B4E                 mov     edx, [ecx+48h]
.text$mn:00001B51                 mov     [eax+48h], edx
.text$mn:00001B54                 mov     eax, [ebp+var_4]
.text$mn:00001B57                 mov     ecx, [eax+48h]
.text$mn:00001B5A                 mov     edx, [ebp+arg_0]
.text$mn:00001B5D                 mov     [ecx+4Ch], edx
.text$mn:00001B60                 mov     eax, [ebp+var_4]
.text$mn:00001B63                 mov     ecx, [ebp+arg_0]
.text$mn:00001B66                 mov     [eax+48h], ecx
.text$mn:00001B69                 mov     esp, ebp
.text$mn:00001B6B                 pop     ebp
.text$mn:00001B6C                 retn    4
.text$mn:00001B6C ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z endp
.text$mn:00001B6C
.text$mn:00001B6C ; ---------------------------------------------------------------------------
.text$mn:00001B6F                 db 0Dh dup(0CCh)
.text$mn:00001B7C
.text$mn:00001B7C ; =============== S U B R O U T I N E =======================================
.text$mn:00001B7C
.text$mn:00001B7C ; Attributes: bp-based frame
.text$mn:00001B7C
.text$mn:00001B7C ; void __thiscall TiXmlAttributeSet::Remove(TiXmlAttributeSet *this, struct TiXmlAttribute *)
.text$mn:00001B7C                 public ?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z
.text$mn:00001B7C ?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z proc near
.text$mn:00001B7C                                         ; CODE XREF: TiXmlElement::~TiXmlElement(void)+5Fp
.text$mn:00001B7C                                         ; TiXmlElement::RemoveAttribute(wchar_t const *)+2Bp
.text$mn:00001B7C
.text$mn:00001B7C var_8           = dword ptr -8
.text$mn:00001B7C var_4           = dword ptr -4
.text$mn:00001B7C arg_0           = dword ptr  8
.text$mn:00001B7C
.text$mn:00001B7C                 push    ebp
.text$mn:00001B7D                 mov     ebp, esp
.text$mn:00001B7F                 sub     esp, 8
.text$mn:00001B82                 mov     [ebp+var_8], ecx
.text$mn:00001B85                 mov     eax, [ebp+var_8]
.text$mn:00001B88                 mov     ecx, [eax+4Ch]
.text$mn:00001B8B                 mov     [ebp+var_4], ecx
.text$mn:00001B8E                 jmp     short loc_1B99
.text$mn:00001B90 ; ---------------------------------------------------------------------------
.text$mn:00001B90
.text$mn:00001B90 loc_1B90:                               ; CODE XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *):loc_1BDDj
.text$mn:00001B90                 mov     edx, [ebp+var_4]
.text$mn:00001B93                 mov     eax, [edx+4Ch]
.text$mn:00001B96                 mov     [ebp+var_4], eax
.text$mn:00001B99
.text$mn:00001B99 loc_1B99:                               ; CODE XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+12j
.text$mn:00001B99                 mov     ecx, [ebp+var_8]
.text$mn:00001B9C                 cmp     [ebp+var_4], ecx
.text$mn:00001B9F                 jz      short loc_1BDF
.text$mn:00001BA1                 mov     edx, [ebp+var_4]
.text$mn:00001BA4                 cmp     edx, [ebp+arg_0]
.text$mn:00001BA7                 jnz     short loc_1BDD
.text$mn:00001BA9                 mov     eax, [ebp+var_4]
.text$mn:00001BAC                 mov     ecx, [eax+48h]
.text$mn:00001BAF                 mov     edx, [ebp+var_4]
.text$mn:00001BB2                 mov     eax, [edx+4Ch]
.text$mn:00001BB5                 mov     [ecx+4Ch], eax
.text$mn:00001BB8                 mov     ecx, [ebp+var_4]
.text$mn:00001BBB                 mov     edx, [ecx+4Ch]
.text$mn:00001BBE                 mov     eax, [ebp+var_4]
.text$mn:00001BC1                 mov     ecx, [eax+48h]
.text$mn:00001BC4                 mov     [edx+48h], ecx
.text$mn:00001BC7                 mov     edx, [ebp+var_4]
.text$mn:00001BCA                 mov     dword ptr [edx+4Ch], 0
.text$mn:00001BD1                 mov     eax, [ebp+var_4]
.text$mn:00001BD4                 mov     dword ptr [eax+48h], 0
.text$mn:00001BDB                 jmp     short loc_1BFA
.text$mn:00001BDD ; ---------------------------------------------------------------------------
.text$mn:00001BDD
.text$mn:00001BDD loc_1BDD:                               ; CODE XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+2Bj
.text$mn:00001BDD                 jmp     short loc_1B90
.text$mn:00001BDF ; ---------------------------------------------------------------------------
.text$mn:00001BDF
.text$mn:00001BDF loc_1BDF:                               ; CODE XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+23j
.text$mn:00001BDF                 xor     ecx, ecx
.text$mn:00001BE1                 jnz     short loc_1BFA
.text$mn:00001BE3                 push    43Eh            ; Line
.text$mn:00001BE8                 push    offset $SG97153 ; "..\\src\\TinyXml\\tinyxml.cpp"
.text$mn:00001BED                 push    offset $SG97154 ; Message
.text$mn:00001BF2                 call    __wassert
.text$mn:00001BF7 ; ---------------------------------------------------------------------------
.text$mn:00001BF7                 add     esp, 0Ch
.text$mn:00001BFA
.text$mn:00001BFA loc_1BFA:                               ; CODE XREF: TiXmlAttributeSet::Remove(TiXmlAttribute *)+5Fj
.text$mn:00001BFA                                         ; TiXmlAttributeSet::Remove(TiXmlAttribute *)+65j
.text$mn:00001BFA                 mov     esp, ebp
.text$mn:00001BFC                 pop     ebp
.text$mn:00001BFD                 retn    4
.text$mn:00001BFD ?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z endp
.text$mn:00001BFD
.text$mn:00001BFD ; ---------------------------------------------------------------------------
.text$mn:00001C00                 db 0Ch dup(0CCh)
.text$mn:00001C0C
.text$mn:00001C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00001C0C
.text$mn:00001C0C ; Attributes: bp-based frame
.text$mn:00001C0C
.text$mn:00001C0C ; struct TiXmlAttribute *__thiscall TiXmlAttributeSet::Find(TiXmlAttributeSet *this, const wchar_t *)
.text$mn:00001C0C                 public ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z
.text$mn:00001C0C ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z proc near
.text$mn:00001C0C                                         ; CODE XREF: TiXmlAttributeSet::Add(TiXmlAttribute *)+13p
.text$mn:00001C0C                                         ; TiXmlElement::Attribute(wchar_t const *)+13p ...
.text$mn:00001C0C
.text$mn:00001C0C var_8           = dword ptr -8
.text$mn:00001C0C var_4           = dword ptr -4
.text$mn:00001C0C Str             = dword ptr  8
.text$mn:00001C0C
.text$mn:00001C0C                 push    ebp
.text$mn:00001C0D                 mov     ebp, esp
.text$mn:00001C0F                 sub     esp, 8
.text$mn:00001C12                 mov     [ebp+var_8], ecx
.text$mn:00001C15                 mov     eax, [ebp+var_8]
.text$mn:00001C18                 mov     ecx, [eax+4Ch]
.text$mn:00001C1B                 mov     [ebp+var_4], ecx
.text$mn:00001C1E                 jmp     short loc_1C29
.text$mn:00001C20 ; ---------------------------------------------------------------------------
.text$mn:00001C20
.text$mn:00001C20 loc_1C20:                               ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *):loc_1C50j
.text$mn:00001C20                 mov     edx, [ebp+var_4]
.text$mn:00001C23                 mov     eax, [edx+4Ch]
.text$mn:00001C26                 mov     [ebp+var_4], eax
.text$mn:00001C29
.text$mn:00001C29 loc_1C29:                               ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *)+12j
.text$mn:00001C29                 mov     ecx, [ebp+var_8]
.text$mn:00001C2C                 cmp     [ebp+var_4], ecx
.text$mn:00001C2F                 jz      short loc_1C52
.text$mn:00001C31                 mov     edx, [ebp+Str]
.text$mn:00001C34                 push    edx             ; Str
.text$mn:00001C35                 mov     eax, [ebp+var_4]
.text$mn:00001C38                 add     eax, 10h
.text$mn:00001C3B                 push    eax             ; int
.text$mn:00001C3C                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001C41                 add     esp, 8
.text$mn:00001C44                 movzx   ecx, al
.text$mn:00001C47                 test    ecx, ecx
.text$mn:00001C49                 jz      short loc_1C50
.text$mn:00001C4B                 mov     eax, [ebp+var_4]
.text$mn:00001C4E                 jmp     short loc_1C54
.text$mn:00001C50 ; ---------------------------------------------------------------------------
.text$mn:00001C50
.text$mn:00001C50 loc_1C50:                               ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *)+3Dj
.text$mn:00001C50                 jmp     short loc_1C20
.text$mn:00001C52 ; ---------------------------------------------------------------------------
.text$mn:00001C52
.text$mn:00001C52 loc_1C52:                               ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *)+23j
.text$mn:00001C52                 xor     eax, eax
.text$mn:00001C54
.text$mn:00001C54 loc_1C54:                               ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *)+42j
.text$mn:00001C54                 mov     esp, ebp
.text$mn:00001C56                 pop     ebp
.text$mn:00001C57                 retn    4
.text$mn:00001C57 ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z endp
.text$mn:00001C57
.text$mn:00001C57 ; ---------------------------------------------------------------------------
.text$mn:00001C5A                 align 4
.text$mn:00001C5C
.text$mn:00001C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00001C5C
.text$mn:00001C5C ; Attributes: bp-based frame
.text$mn:00001C5C
.text$mn:00001C5C ; int __stdcall TiXmlElement::TiXmlElement(wchar_t *Str)
.text$mn:00001C5C                 public ??0TiXmlElement@@QAE@PB_W@Z
.text$mn:00001C5C ??0TiXmlElement@@QAE@PB_W@Z proc near   ; CODE XREF: TiXmlElement::Clone(void)+51p
.text$mn:00001C5C
.text$mn:00001C5C var_10          = dword ptr -10h
.text$mn:00001C5C var_C           = dword ptr -0Ch
.text$mn:00001C5C var_4           = dword ptr -4
.text$mn:00001C5C Str             = dword ptr  8
.text$mn:00001C5C
.text$mn:00001C5C                 push    ebp
.text$mn:00001C5D                 mov     ebp, esp
.text$mn:00001C5F                 push    0FFFFFFFFh
.text$mn:00001C61                 push    offset __ehhandler$??0TiXmlElement@@QAE@PB_W@Z
.text$mn:00001C66                 mov     eax, large fs:0
.text$mn:00001C6C                 push    eax
.text$mn:00001C6D                 push    ecx
.text$mn:00001C6E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001C73                 xor     eax, ebp
.text$mn:00001C75                 push    eax
.text$mn:00001C76                 lea     eax, [ebp+var_C]
.text$mn:00001C79                 mov     large fs:0, eax
.text$mn:00001C7F                 mov     [ebp+var_10], ecx
.text$mn:00001C82                 push    1
.text$mn:00001C84                 mov     ecx, [ebp+var_10]
.text$mn:00001C87                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00001C8C                 mov     [ebp+var_4], 0
.text$mn:00001C93                 mov     eax, [ebp+var_10]
.text$mn:00001C96                 mov     dword ptr [eax], offset ??_7TiXmlElement@@6B@ ; const TiXmlElement::`vftable'
.text$mn:00001C9C                 mov     ecx, [ebp+var_10]
.text$mn:00001C9F                 add     ecx, 44h ; 'D'
.text$mn:00001CA2                 call    ??0TiXmlAttributeSet@@QAE@XZ ; TiXmlAttributeSet::TiXmlAttributeSet(void)
.text$mn:00001CA7                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001CAB                 mov     ecx, [ebp+var_10]
.text$mn:00001CAE                 mov     dword ptr [ecx+18h], 0
.text$mn:00001CB5                 mov     edx, [ebp+var_10]
.text$mn:00001CB8                 mov     dword ptr [edx+14h], 0
.text$mn:00001CBF                 mov     eax, [ebp+Str]
.text$mn:00001CC2                 push    eax             ; Str
.text$mn:00001CC3                 mov     ecx, [ebp+var_10]
.text$mn:00001CC6                 add     ecx, 1Ch
.text$mn:00001CC9                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001CCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001CD5                 mov     eax, [ebp+var_10]
.text$mn:00001CD8                 mov     ecx, [ebp+var_C]
.text$mn:00001CDB                 mov     large fs:0, ecx
.text$mn:00001CE2                 pop     ecx
.text$mn:00001CE3                 mov     esp, ebp
.text$mn:00001CE5                 pop     ebp
.text$mn:00001CE6                 retn    4
.text$mn:00001CE6 ??0TiXmlElement@@QAE@PB_W@Z endp
.text$mn:00001CE6
.text$mn:00001CE6 ; ---------------------------------------------------------------------------
.text$mn:00001CE9                 align 4
.text$mn:00001CEC
.text$mn:00001CEC ; =============== S U B R O U T I N E =======================================
.text$mn:00001CEC
.text$mn:00001CEC ; Attributes: bp-based frame
.text$mn:00001CEC
.text$mn:00001CEC ; _DWORD __thiscall TiXmlElement::~TiXmlElement(TiXmlElement *__hidden this)
.text$mn:00001CEC                 public ??1TiXmlElement@@UAE@XZ
.text$mn:00001CEC ??1TiXmlElement@@UAE@XZ proc near       ; CODE XREF: TiXmlElement::`scalar deleting destructor'(uint)+Ap
.text$mn:00001CEC
.text$mn:00001CEC var_20          = dword ptr -20h
.text$mn:00001CEC var_1C          = dword ptr -1Ch
.text$mn:00001CEC var_18          = dword ptr -18h
.text$mn:00001CEC var_14          = dword ptr -14h
.text$mn:00001CEC var_10          = dword ptr -10h
.text$mn:00001CEC var_C           = dword ptr -0Ch
.text$mn:00001CEC var_4           = dword ptr -4
.text$mn:00001CEC
.text$mn:00001CEC                 push    ebp
.text$mn:00001CED                 mov     ebp, esp
.text$mn:00001CEF                 push    0FFFFFFFFh
.text$mn:00001CF1                 push    offset __ehhandler$??1TiXmlElement@@UAE@XZ
.text$mn:00001CF6                 mov     eax, large fs:0
.text$mn:00001CFC                 push    eax
.text$mn:00001CFD                 sub     esp, 14h
.text$mn:00001D00                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001D05                 xor     eax, ebp
.text$mn:00001D07                 push    eax
.text$mn:00001D08                 lea     eax, [ebp+var_C]
.text$mn:00001D0B                 mov     large fs:0, eax
.text$mn:00001D11                 mov     [ebp+var_10], ecx
.text$mn:00001D14                 mov     eax, [ebp+var_10]
.text$mn:00001D17                 mov     dword ptr [eax], offset ??_7TiXmlElement@@6B@ ; const TiXmlElement::`vftable'
.text$mn:00001D1D                 mov     [ebp+var_4], 1
.text$mn:00001D24
.text$mn:00001D24 loc_1D24:                               ; CODE XREF: TiXmlElement::~TiXmlElement(void):loc_1D7Cj
.text$mn:00001D24                 mov     ecx, [ebp+var_10]
.text$mn:00001D27                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D2A                 call    ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First(void)
.text$mn:00001D2F                 test    eax, eax
.text$mn:00001D31                 jz      short loc_1D7E
.text$mn:00001D33                 mov     ecx, [ebp+var_10]
.text$mn:00001D36                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D39                 call    ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First(void)
.text$mn:00001D3E                 mov     [ebp+var_18], eax
.text$mn:00001D41                 mov     ecx, [ebp+var_18]
.text$mn:00001D44                 push    ecx             ; struct TiXmlAttribute *
.text$mn:00001D45                 mov     ecx, [ebp+var_10]
.text$mn:00001D48                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D4B                 call    ?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Remove(TiXmlAttribute *)
.text$mn:00001D50                 mov     edx, [ebp+var_18]
.text$mn:00001D53                 mov     [ebp+var_1C], edx
.text$mn:00001D56                 mov     eax, [ebp+var_1C]
.text$mn:00001D59                 mov     [ebp+var_14], eax
.text$mn:00001D5C                 cmp     [ebp+var_14], 0
.text$mn:00001D60                 jz      short loc_1D75
.text$mn:00001D62                 push    1
.text$mn:00001D64                 mov     ecx, [ebp+var_14]
.text$mn:00001D67                 mov     edx, [ecx]
.text$mn:00001D69                 mov     ecx, [ebp+var_14]
.text$mn:00001D6C                 mov     eax, [edx]
.text$mn:00001D6E                 call    eax
.text$mn:00001D70                 mov     [ebp+var_20], eax
.text$mn:00001D73                 jmp     short loc_1D7C
.text$mn:00001D75 ; ---------------------------------------------------------------------------
.text$mn:00001D75
.text$mn:00001D75 loc_1D75:                               ; CODE XREF: TiXmlElement::~TiXmlElement(void)+74j
.text$mn:00001D75                 mov     [ebp+var_20], 0
.text$mn:00001D7C
.text$mn:00001D7C loc_1D7C:                               ; CODE XREF: TiXmlElement::~TiXmlElement(void)+87j
.text$mn:00001D7C                 jmp     short loc_1D24
.text$mn:00001D7E ; ---------------------------------------------------------------------------
.text$mn:00001D7E
.text$mn:00001D7E loc_1D7E:                               ; CODE XREF: TiXmlElement::~TiXmlElement(void)+45j
.text$mn:00001D7E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001D82                 mov     ecx, [ebp+var_10]
.text$mn:00001D85                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D88                 call    ??1TiXmlAttributeSet@@QAE@XZ ; TiXmlAttributeSet::~TiXmlAttributeSet(void)
.text$mn:00001D8D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D94                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001D97                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00001D9C                 mov     ecx, [ebp+var_C]
.text$mn:00001D9F                 mov     large fs:0, ecx
.text$mn:00001DA6                 pop     ecx
.text$mn:00001DA7                 mov     esp, ebp
.text$mn:00001DA9                 pop     ebp
.text$mn:00001DAA                 retn
.text$mn:00001DAA ??1TiXmlElement@@UAE@XZ endp
.text$mn:00001DAA
.text$mn:00001DAA ; ---------------------------------------------------------------------------
.text$mn:00001DAB                 align 4
.text$mn:00001DAC
.text$mn:00001DAC ; =============== S U B R O U T I N E =======================================
.text$mn:00001DAC
.text$mn:00001DAC ; Attributes: bp-based frame
.text$mn:00001DAC
.text$mn:00001DAC ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *this, const wchar_t *)
.text$mn:00001DAC                 public ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z
.text$mn:00001DAC ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z proc near
.text$mn:00001DAC                                         ; CODE XREF: TiXmlElement::Attribute(wchar_t const *,int *)+10p
.text$mn:00001DAC                                         ; TiXmlElement::Attribute(wchar_t const *,double *)+10p
.text$mn:00001DAC
.text$mn:00001DAC var_8           = dword ptr -8
.text$mn:00001DAC var_4           = dword ptr -4
.text$mn:00001DAC arg_0           = dword ptr  8
.text$mn:00001DAC
.text$mn:00001DAC                 push    ebp
.text$mn:00001DAD                 mov     ebp, esp
.text$mn:00001DAF                 sub     esp, 8
.text$mn:00001DB2                 mov     [ebp+var_8], ecx
.text$mn:00001DB5                 mov     eax, [ebp+arg_0]
.text$mn:00001DB8                 push    eax             ; wchar_t *
.text$mn:00001DB9                 mov     ecx, [ebp+var_8]
.text$mn:00001DBC                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001DBF                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00001DC4                 mov     [ebp+var_4], eax
.text$mn:00001DC7                 cmp     [ebp+var_4], 0
.text$mn:00001DCB                 jz      short loc_1DD7
.text$mn:00001DCD                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001DD0                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:00001DD5                 jmp     short loc_1DD9
.text$mn:00001DD7 ; ---------------------------------------------------------------------------
.text$mn:00001DD7
.text$mn:00001DD7 loc_1DD7:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *)+1Fj
.text$mn:00001DD7                 xor     eax, eax
.text$mn:00001DD9
.text$mn:00001DD9 loc_1DD9:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *)+29j
.text$mn:00001DD9                 mov     esp, ebp
.text$mn:00001DDB                 pop     ebp
.text$mn:00001DDC                 retn    4
.text$mn:00001DDC ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z endp
.text$mn:00001DDC
.text$mn:00001DDC ; ---------------------------------------------------------------------------
.text$mn:00001DDF                 db 0Dh dup(0CCh)
.text$mn:00001DEC
.text$mn:00001DEC ; =============== S U B R O U T I N E =======================================
.text$mn:00001DEC
.text$mn:00001DEC ; Attributes: bp-based frame
.text$mn:00001DEC
.text$mn:00001DEC ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *this, const wchar_t *, int *)
.text$mn:00001DEC                 public ?Attribute@TiXmlElement@@QBEPB_WPB_WPAH@Z
.text$mn:00001DEC ?Attribute@TiXmlElement@@QBEPB_WPB_WPAH@Z proc near
.text$mn:00001DEC
.text$mn:00001DEC var_8           = dword ptr -8
.text$mn:00001DEC Str             = dword ptr -4
.text$mn:00001DEC arg_0           = dword ptr  8
.text$mn:00001DEC arg_4           = dword ptr  0Ch
.text$mn:00001DEC
.text$mn:00001DEC                 push    ebp
.text$mn:00001DED                 mov     ebp, esp
.text$mn:00001DEF                 sub     esp, 8
.text$mn:00001DF2                 mov     [ebp+var_8], ecx
.text$mn:00001DF5                 mov     eax, [ebp+arg_0]
.text$mn:00001DF8                 push    eax             ; wchar_t *
.text$mn:00001DF9                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001DFC                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001E01                 mov     [ebp+Str], eax
.text$mn:00001E04                 cmp     [ebp+arg_4], 0
.text$mn:00001E08                 jz      short loc_1E2C
.text$mn:00001E0A                 cmp     [ebp+Str], 0
.text$mn:00001E0E                 jz      short loc_1E23
.text$mn:00001E10                 mov     ecx, [ebp+Str]
.text$mn:00001E13                 push    ecx             ; Str
.text$mn:00001E14                 call    __wtoi
.text$mn:00001E19                 add     esp, 4
.text$mn:00001E1C                 mov     edx, [ebp+arg_4]
.text$mn:00001E1F                 mov     [edx], eax
.text$mn:00001E21                 jmp     short loc_1E2C
.text$mn:00001E23 ; ---------------------------------------------------------------------------
.text$mn:00001E23
.text$mn:00001E23 loc_1E23:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *,int *)+22j
.text$mn:00001E23                 mov     eax, [ebp+arg_4]
.text$mn:00001E26                 mov     dword ptr [eax], 0
.text$mn:00001E2C
.text$mn:00001E2C loc_1E2C:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *,int *)+1Cj
.text$mn:00001E2C                                         ; TiXmlElement::Attribute(wchar_t const *,int *)+35j
.text$mn:00001E2C                 mov     eax, [ebp+Str]
.text$mn:00001E2F                 mov     esp, ebp
.text$mn:00001E31                 pop     ebp
.text$mn:00001E32                 retn    8
.text$mn:00001E32 ?Attribute@TiXmlElement@@QBEPB_WPB_WPAH@Z endp
.text$mn:00001E32
.text$mn:00001E32 ; ---------------------------------------------------------------------------
.text$mn:00001E35                 db 7 dup(0CCh)
.text$mn:00001E3C
.text$mn:00001E3C ; =============== S U B R O U T I N E =======================================
.text$mn:00001E3C
.text$mn:00001E3C ; Attributes: bp-based frame
.text$mn:00001E3C
.text$mn:00001E3C ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *this, const wchar_t *, double *)
.text$mn:00001E3C                 public ?Attribute@TiXmlElement@@QBEPB_WPB_WPAN@Z
.text$mn:00001E3C ?Attribute@TiXmlElement@@QBEPB_WPB_WPAN@Z proc near
.text$mn:00001E3C
.text$mn:00001E3C var_8           = dword ptr -8
.text$mn:00001E3C Str             = dword ptr -4
.text$mn:00001E3C arg_0           = dword ptr  8
.text$mn:00001E3C arg_4           = dword ptr  0Ch
.text$mn:00001E3C
.text$mn:00001E3C                 push    ebp
.text$mn:00001E3D                 mov     ebp, esp
.text$mn:00001E3F                 sub     esp, 8
.text$mn:00001E42                 mov     [ebp+var_8], ecx
.text$mn:00001E45                 mov     eax, [ebp+arg_0]
.text$mn:00001E48                 push    eax             ; wchar_t *
.text$mn:00001E49                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001E4C                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001E51                 mov     [ebp+Str], eax
.text$mn:00001E54                 cmp     [ebp+arg_4], 0
.text$mn:00001E58                 jz      short loc_1E82
.text$mn:00001E5A                 cmp     [ebp+Str], 0
.text$mn:00001E5E                 jz      short loc_1E73
.text$mn:00001E60                 mov     ecx, [ebp+Str]
.text$mn:00001E63                 push    ecx             ; Str
.text$mn:00001E64                 call    __wtof
.text$mn:00001E69                 add     esp, 4
.text$mn:00001E6C                 mov     edx, [ebp+arg_4]
.text$mn:00001E6F                 fstp    qword ptr [edx]
.text$mn:00001E71                 jmp     short loc_1E82
.text$mn:00001E73 ; ---------------------------------------------------------------------------
.text$mn:00001E73
.text$mn:00001E73 loc_1E73:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *,double *)+22j
.text$mn:00001E73                 mov     eax, [ebp+arg_4]
.text$mn:00001E76                 movsd   xmm0, ds:__real@0000000000000000
.text$mn:00001E7E                 movsd   qword ptr [eax], xmm0
.text$mn:00001E82
.text$mn:00001E82 loc_1E82:                               ; CODE XREF: TiXmlElement::Attribute(wchar_t const *,double *)+1Cj
.text$mn:00001E82                                         ; TiXmlElement::Attribute(wchar_t const *,double *)+35j
.text$mn:00001E82                 mov     eax, [ebp+Str]
.text$mn:00001E85                 mov     esp, ebp
.text$mn:00001E87                 pop     ebp
.text$mn:00001E88                 retn    8
.text$mn:00001E88 ?Attribute@TiXmlElement@@QBEPB_WPB_WPAN@Z endp
.text$mn:00001E88
.text$mn:00001E88 ; ---------------------------------------------------------------------------
.text$mn:00001E8B                 align 4
.text$mn:00001E8C
.text$mn:00001E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00001E8C
.text$mn:00001E8C ; Attributes: bp-based frame
.text$mn:00001E8C
.text$mn:00001E8C ; int __thiscall TiXmlElement::QueryIntAttribute(TiXmlElement *this, const wchar_t *, int *)
.text$mn:00001E8C                 public ?QueryIntAttribute@TiXmlElement@@QBEHPB_WPAH@Z
.text$mn:00001E8C ?QueryIntAttribute@TiXmlElement@@QBEHPB_WPAH@Z proc near
.text$mn:00001E8C
.text$mn:00001E8C var_8           = dword ptr -8
.text$mn:00001E8C var_4           = dword ptr -4
.text$mn:00001E8C arg_0           = dword ptr  8
.text$mn:00001E8C arg_4           = dword ptr  0Ch
.text$mn:00001E8C
.text$mn:00001E8C                 push    ebp
.text$mn:00001E8D                 mov     ebp, esp
.text$mn:00001E8F                 sub     esp, 8
.text$mn:00001E92                 mov     [ebp+var_8], ecx
.text$mn:00001E95                 mov     eax, [ebp+arg_0]
.text$mn:00001E98                 push    eax             ; wchar_t *
.text$mn:00001E99                 mov     ecx, [ebp+var_8]
.text$mn:00001E9C                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001E9F                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00001EA4                 mov     [ebp+var_4], eax
.text$mn:00001EA7                 cmp     [ebp+var_4], 0
.text$mn:00001EAB                 jnz     short loc_1EB4
.text$mn:00001EAD                 mov     eax, 1
.text$mn:00001EB2                 jmp     short loc_1EC0
.text$mn:00001EB4 ; ---------------------------------------------------------------------------
.text$mn:00001EB4
.text$mn:00001EB4 loc_1EB4:                               ; CODE XREF: TiXmlElement::QueryIntAttribute(wchar_t const *,int *)+1Fj
.text$mn:00001EB4                 mov     ecx, [ebp+arg_4]
.text$mn:00001EB7                 push    ecx             ; int *
.text$mn:00001EB8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001EBB                 call    ?QueryIntValue@TiXmlAttribute@@QBEHPAH@Z ; TiXmlAttribute::QueryIntValue(int *)
.text$mn:00001EC0
.text$mn:00001EC0 loc_1EC0:                               ; CODE XREF: TiXmlElement::QueryIntAttribute(wchar_t const *,int *)+26j
.text$mn:00001EC0                 mov     esp, ebp
.text$mn:00001EC2                 pop     ebp
.text$mn:00001EC3                 retn    8
.text$mn:00001EC3 ?QueryIntAttribute@TiXmlElement@@QBEHPB_WPAH@Z endp
.text$mn:00001EC3
.text$mn:00001EC3 ; ---------------------------------------------------------------------------
.text$mn:00001EC6                 db 6 dup(0CCh)
.text$mn:00001ECC
.text$mn:00001ECC ; =============== S U B R O U T I N E =======================================
.text$mn:00001ECC
.text$mn:00001ECC ; Attributes: bp-based frame
.text$mn:00001ECC
.text$mn:00001ECC ; int __thiscall TiXmlElement::QueryDoubleAttribute(TiXmlElement *this, const wchar_t *, double *)
.text$mn:00001ECC                 public ?QueryDoubleAttribute@TiXmlElement@@QBEHPB_WPAN@Z
.text$mn:00001ECC ?QueryDoubleAttribute@TiXmlElement@@QBEHPB_WPAN@Z proc near
.text$mn:00001ECC
.text$mn:00001ECC var_8           = dword ptr -8
.text$mn:00001ECC var_4           = dword ptr -4
.text$mn:00001ECC arg_0           = dword ptr  8
.text$mn:00001ECC arg_4           = dword ptr  0Ch
.text$mn:00001ECC
.text$mn:00001ECC                 push    ebp
.text$mn:00001ECD                 mov     ebp, esp
.text$mn:00001ECF                 sub     esp, 8
.text$mn:00001ED2                 mov     [ebp+var_8], ecx
.text$mn:00001ED5                 mov     eax, [ebp+arg_0]
.text$mn:00001ED8                 push    eax             ; wchar_t *
.text$mn:00001ED9                 mov     ecx, [ebp+var_8]
.text$mn:00001EDC                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001EDF                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00001EE4                 mov     [ebp+var_4], eax
.text$mn:00001EE7                 cmp     [ebp+var_4], 0
.text$mn:00001EEB                 jnz     short loc_1EF4
.text$mn:00001EED                 mov     eax, 1
.text$mn:00001EF2                 jmp     short loc_1F00
.text$mn:00001EF4 ; ---------------------------------------------------------------------------
.text$mn:00001EF4
.text$mn:00001EF4 loc_1EF4:                               ; CODE XREF: TiXmlElement::QueryDoubleAttribute(wchar_t const *,double *)+1Fj
.text$mn:00001EF4                 mov     ecx, [ebp+arg_4]
.text$mn:00001EF7                 push    ecx             ; double *
.text$mn:00001EF8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001EFB                 call    ?QueryDoubleValue@TiXmlAttribute@@QBEHPAN@Z ; TiXmlAttribute::QueryDoubleValue(double *)
.text$mn:00001F00
.text$mn:00001F00 loc_1F00:                               ; CODE XREF: TiXmlElement::QueryDoubleAttribute(wchar_t const *,double *)+26j
.text$mn:00001F00                 mov     esp, ebp
.text$mn:00001F02                 pop     ebp
.text$mn:00001F03                 retn    8
.text$mn:00001F03 ?QueryDoubleAttribute@TiXmlElement@@QBEHPB_WPAN@Z endp
.text$mn:00001F03
.text$mn:00001F03 ; ---------------------------------------------------------------------------
.text$mn:00001F06                 db 6 dup(0CCh)
.text$mn:00001F0C
.text$mn:00001F0C ; =============== S U B R O U T I N E =======================================
.text$mn:00001F0C
.text$mn:00001F0C ; Attributes: bp-based frame
.text$mn:00001F0C
.text$mn:00001F0C ; void __thiscall TiXmlElement::SetAttribute(TiXmlElement *this, const wchar_t *Str, const wchar_t *)
.text$mn:00001F0C                 public ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z
.text$mn:00001F0C ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z proc near
.text$mn:00001F0C                                         ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,int)+43p
.text$mn:00001F0C                                         ; TiXmlElement::Clone(void)+CBp
.text$mn:00001F0C
.text$mn:00001F0C var_28          = dword ptr -28h
.text$mn:00001F0C var_24          = dword ptr -24h
.text$mn:00001F0C var_20          = dword ptr -20h
.text$mn:00001F0C var_1C          = dword ptr -1Ch
.text$mn:00001F0C var_18          = dword ptr -18h
.text$mn:00001F0C var_14          = dword ptr -14h
.text$mn:00001F0C var_10          = dword ptr -10h
.text$mn:00001F0C var_C           = dword ptr -0Ch
.text$mn:00001F0C var_4           = dword ptr -4
.text$mn:00001F0C Str             = dword ptr  8
.text$mn:00001F0C arg_4           = dword ptr  0Ch
.text$mn:00001F0C
.text$mn:00001F0C                 push    ebp
.text$mn:00001F0D                 mov     ebp, esp
.text$mn:00001F0F                 push    0FFFFFFFFh
.text$mn:00001F11                 push    offset __ehhandler$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z
.text$mn:00001F16                 mov     eax, large fs:0
.text$mn:00001F1C                 push    eax
.text$mn:00001F1D                 sub     esp, 1Ch
.text$mn:00001F20                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001F25                 xor     eax, ebp
.text$mn:00001F27                 push    eax
.text$mn:00001F28                 lea     eax, [ebp+var_C]
.text$mn:00001F2B                 mov     large fs:0, eax
.text$mn:00001F31                 mov     [ebp+var_10], ecx
.text$mn:00001F34                 mov     eax, [ebp+Str]
.text$mn:00001F37                 push    eax             ; wchar_t *
.text$mn:00001F38                 mov     ecx, [ebp+var_10]
.text$mn:00001F3B                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001F3E                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00001F43                 mov     [ebp+var_14], eax
.text$mn:00001F46                 cmp     [ebp+var_14], 0
.text$mn:00001F4A                 jz      short loc_1F5A
.text$mn:00001F4C                 mov     ecx, [ebp+arg_4]
.text$mn:00001F4F                 push    ecx             ; wchar_t *
.text$mn:00001F50                 mov     ecx, [ebp+var_14] ; this
.text$mn:00001F53                 call    ?SetValue@TiXmlAttribute@@QAEXPB_W@Z ; TiXmlAttribute::SetValue(wchar_t const *)
.text$mn:00001F58                 jmp     short loc_1FD9
.text$mn:00001F5A ; ---------------------------------------------------------------------------
.text$mn:00001F5A
.text$mn:00001F5A loc_1F5A:                               ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+3Ej
.text$mn:00001F5A                 push    50h ; 'P'       ; unsigned int
.text$mn:00001F5C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001F61                 add     esp, 4
.text$mn:00001F64                 mov     [ebp+var_18], eax
.text$mn:00001F67                 mov     [ebp+var_4], 0
.text$mn:00001F6E                 cmp     [ebp+var_18], 0
.text$mn:00001F72                 jz      short loc_1F89
.text$mn:00001F74                 mov     edx, [ebp+arg_4]
.text$mn:00001F77                 push    edx             ; wchar_t *
.text$mn:00001F78                 mov     eax, [ebp+Str]
.text$mn:00001F7B                 push    eax             ; Str
.text$mn:00001F7C                 mov     ecx, [ebp+var_18]
.text$mn:00001F7F                 call    ??0TiXmlAttribute@@QAE@PB_W0@Z ; TiXmlAttribute::TiXmlAttribute(wchar_t const *,wchar_t const *)
.text$mn:00001F84                 mov     [ebp+var_1C], eax
.text$mn:00001F87                 jmp     short loc_1F90
.text$mn:00001F89 ; ---------------------------------------------------------------------------
.text$mn:00001F89
.text$mn:00001F89 loc_1F89:                               ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+66j
.text$mn:00001F89                 mov     [ebp+var_1C], 0
.text$mn:00001F90
.text$mn:00001F90 loc_1F90:                               ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+7Bj
.text$mn:00001F90                 mov     ecx, [ebp+var_1C]
.text$mn:00001F93                 mov     [ebp+var_28], ecx
.text$mn:00001F96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F9D                 mov     edx, [ebp+var_28]
.text$mn:00001FA0                 mov     [ebp+var_20], edx
.text$mn:00001FA3                 cmp     [ebp+var_20], 0
.text$mn:00001FA7                 jz      short loc_1FBA
.text$mn:00001FA9                 mov     eax, [ebp+var_20]
.text$mn:00001FAC                 push    eax             ; struct TiXmlAttribute *
.text$mn:00001FAD                 mov     ecx, [ebp+var_10]
.text$mn:00001FB0                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001FB3                 call    ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Add(TiXmlAttribute *)
.text$mn:00001FB8                 jmp     short loc_1FD9
.text$mn:00001FBA ; ---------------------------------------------------------------------------
.text$mn:00001FBA
.text$mn:00001FBA loc_1FBA:                               ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+9Bj
.text$mn:00001FBA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001FBD                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:00001FC2                 mov     [ebp+var_24], eax
.text$mn:00001FC5                 cmp     [ebp+var_24], 0
.text$mn:00001FC9                 jz      short loc_1FD9
.text$mn:00001FCB                 push    0               ; struct TiXmlParsingData *
.text$mn:00001FCD                 push    0               ; wchar_t *
.text$mn:00001FCF                 push    3               ; int
.text$mn:00001FD1                 mov     ecx, [ebp+var_24] ; this
.text$mn:00001FD4                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001FD9
.text$mn:00001FD9 loc_1FD9:                               ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+4Cj
.text$mn:00001FD9                                         ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+ACj ...
.text$mn:00001FD9                 mov     ecx, [ebp+var_C]
.text$mn:00001FDC                 mov     large fs:0, ecx
.text$mn:00001FE3                 pop     ecx
.text$mn:00001FE4                 mov     esp, ebp
.text$mn:00001FE6                 pop     ebp
.text$mn:00001FE7                 retn    8
.text$mn:00001FE7 ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z endp
.text$mn:00001FE7
.text$mn:00001FE7 ; ---------------------------------------------------------------------------
.text$mn:00001FEA                 align 4
.text$mn:00001FEC
.text$mn:00001FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00001FEC
.text$mn:00001FEC ; Attributes: bp-based frame
.text$mn:00001FEC
.text$mn:00001FEC ; void __thiscall TiXmlElement::SetAttribute(TiXmlElement *this, const wchar_t *Str, int)
.text$mn:00001FEC                 public ?SetAttribute@TiXmlElement@@QAEXPB_WH@Z
.text$mn:00001FEC ?SetAttribute@TiXmlElement@@QAEXPB_WH@Z proc near
.text$mn:00001FEC
.text$mn:00001FEC var_88          = dword ptr -88h
.text$mn:00001FEC var_84          = word ptr -84h
.text$mn:00001FEC var_4           = dword ptr -4
.text$mn:00001FEC Str             = dword ptr  8
.text$mn:00001FEC arg_4           = dword ptr  0Ch
.text$mn:00001FEC
.text$mn:00001FEC                 push    ebp
.text$mn:00001FED                 mov     ebp, esp
.text$mn:00001FEF                 sub     esp, 88h
.text$mn:00001FF5                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001FFA                 xor     eax, ebp
.text$mn:00001FFC                 mov     [ebp+var_4], eax
.text$mn:00001FFF                 mov     [ebp+var_88], ecx
.text$mn:00002005                 mov     eax, [ebp+arg_4]
.text$mn:00002008                 push    eax
.text$mn:00002009                 push    offset $SG96426 ; "%d"
.text$mn:0000200E                 lea     ecx, [ebp+var_84]
.text$mn:00002014                 push    ecx             ; LPWSTR
.text$mn:00002015                 call    dword ptr ds:__imp__wsprintfW
.text$mn:0000201B                 add     esp, 0Ch
.text$mn:0000201E                 lea     edx, [ebp+var_84]
.text$mn:00002024                 push    edx             ; wchar_t *
.text$mn:00002025                 mov     eax, [ebp+Str]
.text$mn:00002028                 push    eax             ; Str
.text$mn:00002029                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000202F                 call    ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)
.text$mn:00002034                 mov     ecx, [ebp+var_4]
.text$mn:00002037                 xor     ecx, ebp
.text$mn:00002039                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000203E                 mov     esp, ebp
.text$mn:00002040                 pop     ebp
.text$mn:00002041                 retn    8
.text$mn:00002041 ?SetAttribute@TiXmlElement@@QAEXPB_WH@Z endp
.text$mn:00002041
.text$mn:00002041 ; ---------------------------------------------------------------------------
.text$mn:00002044                 db 8 dup(0CCh)
.text$mn:0000204C
.text$mn:0000204C ; =============== S U B R O U T I N E =======================================
.text$mn:0000204C
.text$mn:0000204C ; Attributes: bp-based frame
.text$mn:0000204C
.text$mn:0000204C ; void __thiscall TiXmlElement::RemoveAttribute(TiXmlElement *this, const wchar_t *)
.text$mn:0000204C                 public ?RemoveAttribute@TiXmlElement@@QAEXPB_W@Z
.text$mn:0000204C ?RemoveAttribute@TiXmlElement@@QAEXPB_W@Z proc near
.text$mn:0000204C
.text$mn:0000204C var_14          = dword ptr -14h
.text$mn:0000204C var_10          = dword ptr -10h
.text$mn:0000204C var_C           = dword ptr -0Ch
.text$mn:0000204C var_8           = dword ptr -8
.text$mn:0000204C var_4           = dword ptr -4
.text$mn:0000204C arg_0           = dword ptr  8
.text$mn:0000204C
.text$mn:0000204C                 push    ebp
.text$mn:0000204D                 mov     ebp, esp
.text$mn:0000204F                 sub     esp, 14h
.text$mn:00002052                 mov     [ebp+var_C], ecx
.text$mn:00002055                 mov     eax, [ebp+arg_0]
.text$mn:00002058                 push    eax             ; wchar_t *
.text$mn:00002059                 mov     ecx, [ebp+var_C]
.text$mn:0000205C                 add     ecx, 44h ; 'D'  ; this
.text$mn:0000205F                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:00002064                 mov     [ebp+var_4], eax
.text$mn:00002067                 cmp     [ebp+var_4], 0
.text$mn:0000206B                 jz      short loc_20A8
.text$mn:0000206D                 mov     ecx, [ebp+var_4]
.text$mn:00002070                 push    ecx             ; struct TiXmlAttribute *
.text$mn:00002071                 mov     ecx, [ebp+var_C]
.text$mn:00002074                 add     ecx, 44h ; 'D'  ; this
.text$mn:00002077                 call    ?Remove@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Remove(TiXmlAttribute *)
.text$mn:0000207C                 mov     edx, [ebp+var_4]
.text$mn:0000207F                 mov     [ebp+var_10], edx
.text$mn:00002082                 mov     eax, [ebp+var_10]
.text$mn:00002085                 mov     [ebp+var_8], eax
.text$mn:00002088                 cmp     [ebp+var_8], 0
.text$mn:0000208C                 jz      short loc_20A1
.text$mn:0000208E                 push    1
.text$mn:00002090                 mov     ecx, [ebp+var_8]
.text$mn:00002093                 mov     edx, [ecx]
.text$mn:00002095                 mov     ecx, [ebp+var_8]
.text$mn:00002098                 mov     eax, [edx]
.text$mn:0000209A                 call    eax
.text$mn:0000209C                 mov     [ebp+var_14], eax
.text$mn:0000209F                 jmp     short loc_20A8
.text$mn:000020A1 ; ---------------------------------------------------------------------------
.text$mn:000020A1
.text$mn:000020A1 loc_20A1:                               ; CODE XREF: TiXmlElement::RemoveAttribute(wchar_t const *)+40j
.text$mn:000020A1                 mov     [ebp+var_14], 0
.text$mn:000020A8
.text$mn:000020A8 loc_20A8:                               ; CODE XREF: TiXmlElement::RemoveAttribute(wchar_t const *)+1Fj
.text$mn:000020A8                                         ; TiXmlElement::RemoveAttribute(wchar_t const *)+53j
.text$mn:000020A8                 mov     esp, ebp
.text$mn:000020AA                 pop     ebp
.text$mn:000020AB                 retn    4
.text$mn:000020AB ?RemoveAttribute@TiXmlElement@@QAEXPB_W@Z endp
.text$mn:000020AB
.text$mn:000020AB ; ---------------------------------------------------------------------------
.text$mn:000020AE                 db 0Eh dup(0CCh)
.text$mn:000020BC
.text$mn:000020BC ; =============== S U B R O U T I N E =======================================
.text$mn:000020BC
.text$mn:000020BC ; Attributes: bp-based frame
.text$mn:000020BC
.text$mn:000020BC ; struct TiXmlNode *__thiscall TiXmlElement::Clone(TiXmlElement *__hidden this)
.text$mn:000020BC                 public ?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
.text$mn:000020BC ?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ proc near
.text$mn:000020BC                                         ; DATA XREF: .rdata:0000E4C8o
.text$mn:000020BC
.text$mn:000020BC var_28          = dword ptr -28h
.text$mn:000020BC var_24          = dword ptr -24h
.text$mn:000020BC var_20          = dword ptr -20h
.text$mn:000020BC var_1C          = dword ptr -1Ch
.text$mn:000020BC var_18          = dword ptr -18h
.text$mn:000020BC var_14          = dword ptr -14h
.text$mn:000020BC var_10          = dword ptr -10h
.text$mn:000020BC var_C           = dword ptr -0Ch
.text$mn:000020BC var_4           = dword ptr -4
.text$mn:000020BC
.text$mn:000020BC                 push    ebp
.text$mn:000020BD                 mov     ebp, esp
.text$mn:000020BF                 push    0FFFFFFFFh
.text$mn:000020C1                 push    offset __ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
.text$mn:000020C6                 mov     eax, large fs:0
.text$mn:000020CC                 push    eax
.text$mn:000020CD                 sub     esp, 1Ch
.text$mn:000020D0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000020D5                 xor     eax, ebp
.text$mn:000020D7                 push    eax
.text$mn:000020D8                 lea     eax, [ebp+var_C]
.text$mn:000020DB                 mov     large fs:0, eax
.text$mn:000020E1                 mov     [ebp+var_1C], ecx
.text$mn:000020E4                 push    94h ; 'ö'       ; unsigned int
.text$mn:000020E9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000020EE                 add     esp, 4
.text$mn:000020F1                 mov     [ebp+var_20], eax
.text$mn:000020F4                 mov     [ebp+var_4], 0
.text$mn:000020FB                 cmp     [ebp+var_20], 0
.text$mn:000020FF                 jz      short loc_2117
.text$mn:00002101                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00002104                 call    ?Value@TiXmlNode@@QBEPB_WXZ ; TiXmlNode::Value(void)
.text$mn:00002109                 push    eax             ; Str
.text$mn:0000210A                 mov     ecx, [ebp+var_20]
.text$mn:0000210D                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:00002112                 mov     [ebp+var_24], eax
.text$mn:00002115                 jmp     short loc_211E
.text$mn:00002117 ; ---------------------------------------------------------------------------
.text$mn:00002117
.text$mn:00002117 loc_2117:                               ; CODE XREF: TiXmlElement::Clone(void)+43j
.text$mn:00002117                 mov     [ebp+var_24], 0
.text$mn:0000211E
.text$mn:0000211E loc_211E:                               ; CODE XREF: TiXmlElement::Clone(void)+59j
.text$mn:0000211E                 mov     eax, [ebp+var_24]
.text$mn:00002121                 mov     [ebp+var_28], eax
.text$mn:00002124                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000212B                 mov     ecx, [ebp+var_28]
.text$mn:0000212E                 mov     [ebp+var_18], ecx
.text$mn:00002131                 cmp     [ebp+var_18], 0
.text$mn:00002135                 jnz     short loc_213E
.text$mn:00002137                 xor     eax, eax
.text$mn:00002139                 jmp     loc_21CC
.text$mn:0000213E ; ---------------------------------------------------------------------------
.text$mn:0000213E
.text$mn:0000213E loc_213E:                               ; CODE XREF: TiXmlElement::Clone(void)+79j
.text$mn:0000213E                 mov     edx, [ebp+var_18]
.text$mn:00002141                 push    edx             ; struct TiXmlNode *
.text$mn:00002142                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00002145                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:0000214A                 mov     [ebp+var_10], 0
.text$mn:00002151                 mov     ecx, [ebp+var_1C]
.text$mn:00002154                 add     ecx, 44h ; 'D'  ; this
.text$mn:00002157                 call    ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First(void)
.text$mn:0000215C                 mov     [ebp+var_10], eax
.text$mn:0000215F                 jmp     short loc_216C
.text$mn:00002161 ; ---------------------------------------------------------------------------
.text$mn:00002161
.text$mn:00002161 loc_2161:                               ; CODE XREF: TiXmlElement::Clone(void)+D0j
.text$mn:00002161                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002164                 call    ?Next@TiXmlAttribute@@QBEPAV1@XZ ; TiXmlAttribute::Next(void)
.text$mn:00002169                 mov     [ebp+var_10], eax
.text$mn:0000216C
.text$mn:0000216C loc_216C:                               ; CODE XREF: TiXmlElement::Clone(void)+A3j
.text$mn:0000216C                 cmp     [ebp+var_10], 0
.text$mn:00002170                 jz      short loc_218E
.text$mn:00002172                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002175                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:0000217A                 push    eax             ; wchar_t *
.text$mn:0000217B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000217E                 call    ?Name@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Name(void)
.text$mn:00002183                 push    eax             ; Str
.text$mn:00002184                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002187                 call    ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)
.text$mn:0000218C                 jmp     short loc_2161
.text$mn:0000218E ; ---------------------------------------------------------------------------
.text$mn:0000218E
.text$mn:0000218E loc_218E:                               ; CODE XREF: TiXmlElement::Clone(void)+B4j
.text$mn:0000218E                 mov     [ebp+var_14], 0
.text$mn:00002195                 mov     eax, [ebp+var_1C]
.text$mn:00002198                 mov     ecx, [eax+14h]
.text$mn:0000219B                 mov     [ebp+var_14], ecx
.text$mn:0000219E                 jmp     short loc_21AB
.text$mn:000021A0 ; ---------------------------------------------------------------------------
.text$mn:000021A0
.text$mn:000021A0 loc_21A0:                               ; CODE XREF: TiXmlElement::Clone(void)+10Bj
.text$mn:000021A0                 mov     ecx, [ebp+var_14] ; this
.text$mn:000021A3                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:000021A8                 mov     [ebp+var_14], eax
.text$mn:000021AB
.text$mn:000021AB loc_21AB:                               ; CODE XREF: TiXmlElement::Clone(void)+E2j
.text$mn:000021AB                 cmp     [ebp+var_14], 0
.text$mn:000021AF                 jz      short loc_21C9
.text$mn:000021B1                 mov     edx, [ebp+var_14]
.text$mn:000021B4                 mov     eax, [edx]
.text$mn:000021B6                 mov     ecx, [ebp+var_14]
.text$mn:000021B9                 mov     edx, [eax+14h]
.text$mn:000021BC                 call    edx
.text$mn:000021BE                 push    eax             ; struct TiXmlNode *
.text$mn:000021BF                 mov     ecx, [ebp+var_18] ; this
.text$mn:000021C2                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:000021C7                 jmp     short loc_21A0
.text$mn:000021C9 ; ---------------------------------------------------------------------------
.text$mn:000021C9
.text$mn:000021C9 loc_21C9:                               ; CODE XREF: TiXmlElement::Clone(void)+F3j
.text$mn:000021C9                 mov     eax, [ebp+var_18]
.text$mn:000021CC
.text$mn:000021CC loc_21CC:                               ; CODE XREF: TiXmlElement::Clone(void)+7Dj
.text$mn:000021CC                 mov     ecx, [ebp+var_C]
.text$mn:000021CF                 mov     large fs:0, ecx
.text$mn:000021D6                 pop     ecx
.text$mn:000021D7                 mov     esp, ebp
.text$mn:000021D9                 pop     ebp
.text$mn:000021DA                 retn
.text$mn:000021DA ?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ endp
.text$mn:000021DA
.text$mn:000021DA ; ---------------------------------------------------------------------------
.text$mn:000021DB                 align 4
.text$mn:000021DC
.text$mn:000021DC ; =============== S U B R O U T I N E =======================================
.text$mn:000021DC
.text$mn:000021DC ; Attributes: bp-based frame
.text$mn:000021DC
.text$mn:000021DC ; void __thiscall TiXmlElement::Print(TiXmlElement *this, FILE *File, int)
.text$mn:000021DC                 public ?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z
.text$mn:000021DC ?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000021DC                                         ; DATA XREF: .rdata:0000E4B8o
.text$mn:000021DC
.text$mn:000021DC var_10          = dword ptr -10h
.text$mn:000021DC var_C           = dword ptr -0Ch
.text$mn:000021DC var_8           = dword ptr -8
.text$mn:000021DC var_4           = dword ptr -4
.text$mn:000021DC File            = dword ptr  8
.text$mn:000021DC arg_4           = dword ptr  0Ch
.text$mn:000021DC
.text$mn:000021DC                 push    ebp
.text$mn:000021DD                 mov     ebp, esp
.text$mn:000021DF                 sub     esp, 10h
.text$mn:000021E2                 mov     [ebp+var_4], ecx
.text$mn:000021E5                 mov     [ebp+var_8], 0
.text$mn:000021EC                 jmp     short loc_21F7
.text$mn:000021EE ; ---------------------------------------------------------------------------
.text$mn:000021EE
.text$mn:000021EE loc_21EE:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+34j
.text$mn:000021EE                 mov     eax, [ebp+var_8]
.text$mn:000021F1                 add     eax, 1
.text$mn:000021F4                 mov     [ebp+var_8], eax
.text$mn:000021F7
.text$mn:000021F7 loc_21F7:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+10j
.text$mn:000021F7                 mov     ecx, [ebp+var_8]
.text$mn:000021FA                 cmp     ecx, [ebp+arg_4]
.text$mn:000021FD                 jge     short loc_2212
.text$mn:000021FF                 push    offset $SG96452 ; "    "
.text$mn:00002204                 mov     edx, [ebp+File]
.text$mn:00002207                 push    edx             ; File
.text$mn:00002208                 call    _fwprintf
.text$mn:0000220D                 add     esp, 8
.text$mn:00002210                 jmp     short loc_21EE
.text$mn:00002212 ; ---------------------------------------------------------------------------
.text$mn:00002212
.text$mn:00002212 loc_2212:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+21j
.text$mn:00002212                 mov     ecx, [ebp+var_4]
.text$mn:00002215                 add     ecx, 1Ch
.text$mn:00002218                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000221D                 push    eax
.text$mn:0000221E                 push    offset $SG96453 ; "<%s"
.text$mn:00002223                 mov     eax, [ebp+File]
.text$mn:00002226                 push    eax             ; File
.text$mn:00002227                 call    _fwprintf
.text$mn:0000222C                 add     esp, 0Ch
.text$mn:0000222F                 mov     ecx, [ebp+var_4]
.text$mn:00002232                 add     ecx, 44h ; 'D'  ; this
.text$mn:00002235                 call    ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First(void)
.text$mn:0000223A                 mov     [ebp+var_10], eax
.text$mn:0000223D                 jmp     short loc_224A
.text$mn:0000223F ; ---------------------------------------------------------------------------
.text$mn:0000223F
.text$mn:0000223F loc_223F:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+9Aj
.text$mn:0000223F                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002242                 call    ?Next@TiXmlAttribute@@QBEPAV1@XZ ; TiXmlAttribute::Next(void)
.text$mn:00002247                 mov     [ebp+var_10], eax
.text$mn:0000224A
.text$mn:0000224A loc_224A:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+61j
.text$mn:0000224A                 cmp     [ebp+var_10], 0
.text$mn:0000224E                 jz      short loc_2278
.text$mn:00002250                 push    offset $SG96458 ; Format
.text$mn:00002255                 mov     ecx, [ebp+File]
.text$mn:00002258                 push    ecx             ; File
.text$mn:00002259                 call    _fwprintf
.text$mn:0000225E                 add     esp, 8
.text$mn:00002261                 mov     edx, [ebp+arg_4]
.text$mn:00002264                 push    edx
.text$mn:00002265                 mov     eax, [ebp+File]
.text$mn:00002268                 push    eax
.text$mn:00002269                 mov     ecx, [ebp+var_10]
.text$mn:0000226C                 mov     edx, [ecx]
.text$mn:0000226E                 mov     ecx, [ebp+var_10]
.text$mn:00002271                 mov     eax, [edx+4]
.text$mn:00002274                 call    eax
.text$mn:00002276                 jmp     short loc_223F
.text$mn:00002278 ; ---------------------------------------------------------------------------
.text$mn:00002278
.text$mn:00002278 loc_2278:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+72j
.text$mn:00002278                 mov     ecx, [ebp+var_4]
.text$mn:0000227B                 cmp     dword ptr [ecx+14h], 0
.text$mn:0000227F                 jnz     short loc_2297
.text$mn:00002281                 push    offset $SG96461 ; " />"
.text$mn:00002286                 mov     edx, [ebp+File]
.text$mn:00002289                 push    edx             ; File
.text$mn:0000228A                 call    _fwprintf
.text$mn:0000228F                 add     esp, 8
.text$mn:00002292                 jmp     loc_23C4
.text$mn:00002297 ; ---------------------------------------------------------------------------
.text$mn:00002297
.text$mn:00002297 loc_2297:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+A3j
.text$mn:00002297                 mov     eax, [ebp+var_4]
.text$mn:0000229A                 mov     ecx, [ebp+var_4]
.text$mn:0000229D                 mov     edx, [eax+14h]
.text$mn:000022A0                 cmp     edx, [ecx+18h]
.text$mn:000022A3                 jnz     short loc_2305
.text$mn:000022A5                 mov     eax, [ebp+var_4]
.text$mn:000022A8                 mov     ecx, [eax+14h]  ; this
.text$mn:000022AB                 call    ?ToText@TiXmlNode@@QBEPAVTiXmlText@@XZ ; TiXmlNode::ToText(void)
.text$mn:000022B0                 test    eax, eax
.text$mn:000022B2                 jz      short loc_2305
.text$mn:000022B4                 push    offset $SG96464 ; Format
.text$mn:000022B9                 mov     ecx, [ebp+File]
.text$mn:000022BC                 push    ecx             ; File
.text$mn:000022BD                 call    _fwprintf
.text$mn:000022C2                 add     esp, 8
.text$mn:000022C5                 mov     edx, [ebp+arg_4]
.text$mn:000022C8                 add     edx, 1
.text$mn:000022CB                 push    edx
.text$mn:000022CC                 mov     eax, [ebp+File]
.text$mn:000022CF                 push    eax
.text$mn:000022D0                 mov     ecx, [ebp+var_4]
.text$mn:000022D3                 mov     edx, [ecx+14h]
.text$mn:000022D6                 mov     eax, [ebp+var_4]
.text$mn:000022D9                 mov     edx, [edx]
.text$mn:000022DB                 mov     ecx, [eax+14h]
.text$mn:000022DE                 mov     eax, [edx+4]
.text$mn:000022E1                 call    eax
.text$mn:000022E3                 mov     ecx, [ebp+var_4]
.text$mn:000022E6                 add     ecx, 1Ch
.text$mn:000022E9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000022EE                 push    eax
.text$mn:000022EF                 push    offset $SG96465 ; "</%s>"
.text$mn:000022F4                 mov     ecx, [ebp+File]
.text$mn:000022F7                 push    ecx             ; File
.text$mn:000022F8                 call    _fwprintf
.text$mn:000022FD                 add     esp, 0Ch
.text$mn:00002300                 jmp     loc_23C4
.text$mn:00002305 ; ---------------------------------------------------------------------------
.text$mn:00002305
.text$mn:00002305 loc_2305:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+C7j
.text$mn:00002305                                         ; TiXmlElement::Print(_iobuf *,int)+D6j
.text$mn:00002305                 push    offset $SG96467 ; Format
.text$mn:0000230A                 mov     edx, [ebp+File]
.text$mn:0000230D                 push    edx             ; File
.text$mn:0000230E                 call    _fwprintf
.text$mn:00002313                 add     esp, 8
.text$mn:00002316                 mov     eax, [ebp+var_4]
.text$mn:00002319                 mov     ecx, [eax+14h]
.text$mn:0000231C                 mov     [ebp+var_C], ecx
.text$mn:0000231F                 jmp     short loc_232C
.text$mn:00002321 ; ---------------------------------------------------------------------------
.text$mn:00002321
.text$mn:00002321 loc_2321:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+18Bj
.text$mn:00002321                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002324                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:00002329                 mov     [ebp+var_C], eax
.text$mn:0000232C
.text$mn:0000232C loc_232C:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+143j
.text$mn:0000232C                 cmp     [ebp+var_C], 0
.text$mn:00002330                 jz      short loc_2369
.text$mn:00002332                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002335                 call    ?ToText@TiXmlNode@@QBEPAVTiXmlText@@XZ ; TiXmlNode::ToText(void)
.text$mn:0000233A                 test    eax, eax
.text$mn:0000233C                 jnz     short loc_234F
.text$mn:0000233E                 push    offset $SG96472 ; Format
.text$mn:00002343                 mov     edx, [ebp+File]
.text$mn:00002346                 push    edx             ; File
.text$mn:00002347                 call    _fwprintf
.text$mn:0000234C                 add     esp, 8
.text$mn:0000234F
.text$mn:0000234F loc_234F:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+160j
.text$mn:0000234F                 mov     eax, [ebp+arg_4]
.text$mn:00002352                 add     eax, 1
.text$mn:00002355                 push    eax
.text$mn:00002356                 mov     ecx, [ebp+File]
.text$mn:00002359                 push    ecx
.text$mn:0000235A                 mov     edx, [ebp+var_C]
.text$mn:0000235D                 mov     eax, [edx]
.text$mn:0000235F                 mov     ecx, [ebp+var_C]
.text$mn:00002362                 mov     edx, [eax+4]
.text$mn:00002365                 call    edx
.text$mn:00002367                 jmp     short loc_2321
.text$mn:00002369 ; ---------------------------------------------------------------------------
.text$mn:00002369
.text$mn:00002369 loc_2369:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+154j
.text$mn:00002369                 push    offset $SG96473 ; Format
.text$mn:0000236E                 mov     eax, [ebp+File]
.text$mn:00002371                 push    eax             ; File
.text$mn:00002372                 call    _fwprintf
.text$mn:00002377                 add     esp, 8
.text$mn:0000237A                 mov     [ebp+var_8], 0
.text$mn:00002381                 jmp     short loc_238C
.text$mn:00002383 ; ---------------------------------------------------------------------------
.text$mn:00002383
.text$mn:00002383 loc_2383:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+1C9j
.text$mn:00002383                 mov     ecx, [ebp+var_8]
.text$mn:00002386                 add     ecx, 1
.text$mn:00002389                 mov     [ebp+var_8], ecx
.text$mn:0000238C
.text$mn:0000238C loc_238C:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+1A5j
.text$mn:0000238C                 mov     edx, [ebp+var_8]
.text$mn:0000238F                 cmp     edx, [ebp+arg_4]
.text$mn:00002392                 jge     short loc_23A7
.text$mn:00002394                 push    offset $SG96477 ; "    "
.text$mn:00002399                 mov     eax, [ebp+File]
.text$mn:0000239C                 push    eax             ; File
.text$mn:0000239D                 call    _fwprintf
.text$mn:000023A2                 add     esp, 8
.text$mn:000023A5                 jmp     short loc_2383
.text$mn:000023A7 ; ---------------------------------------------------------------------------
.text$mn:000023A7
.text$mn:000023A7 loc_23A7:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+1B6j
.text$mn:000023A7                 mov     ecx, [ebp+var_4]
.text$mn:000023AA                 add     ecx, 1Ch
.text$mn:000023AD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000023B2                 push    eax
.text$mn:000023B3                 push    offset $SG96478 ; "</%s>"
.text$mn:000023B8                 mov     ecx, [ebp+File]
.text$mn:000023BB                 push    ecx             ; File
.text$mn:000023BC                 call    _fwprintf
.text$mn:000023C1                 add     esp, 0Ch
.text$mn:000023C4
.text$mn:000023C4 loc_23C4:                               ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+B6j
.text$mn:000023C4                                         ; TiXmlElement::Print(_iobuf *,int)+124j
.text$mn:000023C4                 mov     esp, ebp
.text$mn:000023C6                 pop     ebp
.text$mn:000023C7                 retn    8
.text$mn:000023C7 ?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z endp
.text$mn:000023C7
.text$mn:000023C7 ; ---------------------------------------------------------------------------
.text$mn:000023CA                 align 4
.text$mn:000023CC
.text$mn:000023CC ; =============== S U B R O U T I N E =======================================
.text$mn:000023CC
.text$mn:000023CC ; Attributes: bp-based frame
.text$mn:000023CC
.text$mn:000023CC ; protected: virtual void __thiscall TiXmlElement::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:000023CC                 public ?StreamOut@TiXmlElement@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:000023CC ?StreamOut@TiXmlElement@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:000023CC                                         ; DATA XREF: .rdata:0000E4BCo
.text$mn:000023CC
.text$mn:000023CC var_C           = dword ptr -0Ch
.text$mn:000023CC var_8           = dword ptr -8
.text$mn:000023CC var_4           = dword ptr -4
.text$mn:000023CC arg_0           = dword ptr  8
.text$mn:000023CC
.text$mn:000023CC                 push    ebp
.text$mn:000023CD                 mov     ebp, esp
.text$mn:000023CF                 sub     esp, 0Ch
.text$mn:000023D2                 mov     [ebp+var_C], ecx
.text$mn:000023D5                 mov     eax, [ebp+var_C]
.text$mn:000023D8                 add     eax, 1Ch
.text$mn:000023DB                 push    eax
.text$mn:000023DC                 push    offset $SG96532 ; Str
.text$mn:000023E1                 mov     ecx, [ebp+arg_0]
.text$mn:000023E4                 push    ecx             ; int
.text$mn:000023E5                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000023EA                 add     esp, 8
.text$mn:000023ED                 push    eax
.text$mn:000023EE                 call    ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000023F3                 add     esp, 8
.text$mn:000023F6                 mov     ecx, [ebp+var_C]
.text$mn:000023F9                 add     ecx, 44h ; 'D'  ; this
.text$mn:000023FC                 call    ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ ; TiXmlAttributeSet::First(void)
.text$mn:00002401                 mov     [ebp+var_4], eax
.text$mn:00002404                 jmp     short loc_2411
.text$mn:00002406 ; ---------------------------------------------------------------------------
.text$mn:00002406
.text$mn:00002406 loc_2406:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+6Dj
.text$mn:00002406                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002409                 call    ?Next@TiXmlAttribute@@QBEPAV1@XZ ; TiXmlAttribute::Next(void)
.text$mn:0000240E                 mov     [ebp+var_4], eax
.text$mn:00002411
.text$mn:00002411 loc_2411:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+38j
.text$mn:00002411                 cmp     [ebp+var_4], 0
.text$mn:00002415                 jz      short loc_243B
.text$mn:00002417                 push    offset $SG96545 ; Str
.text$mn:0000241C                 mov     edx, [ebp+arg_0]
.text$mn:0000241F                 push    edx             ; int
.text$mn:00002420                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002425                 add     esp, 8
.text$mn:00002428                 mov     eax, [ebp+arg_0]
.text$mn:0000242B                 push    eax
.text$mn:0000242C                 mov     ecx, [ebp+var_4]
.text$mn:0000242F                 mov     edx, [ecx]
.text$mn:00002431                 mov     ecx, [ebp+var_4]
.text$mn:00002434                 mov     eax, [edx+8]
.text$mn:00002437                 call    eax
.text$mn:00002439                 jmp     short loc_2406
.text$mn:0000243B ; ---------------------------------------------------------------------------
.text$mn:0000243B
.text$mn:0000243B loc_243B:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+49j
.text$mn:0000243B                 mov     ecx, [ebp+var_C]
.text$mn:0000243E                 cmp     dword ptr [ecx+14h], 0
.text$mn:00002442                 jz      short loc_24B5
.text$mn:00002444                 push    offset $SG96556 ; Str
.text$mn:00002449                 mov     edx, [ebp+arg_0]
.text$mn:0000244C                 push    edx             ; int
.text$mn:0000244D                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002452                 add     esp, 8
.text$mn:00002455                 mov     eax, [ebp+var_C]
.text$mn:00002458                 mov     ecx, [eax+14h]
.text$mn:0000245B                 mov     [ebp+var_8], ecx
.text$mn:0000245E                 jmp     short loc_246B
.text$mn:00002460 ; ---------------------------------------------------------------------------
.text$mn:00002460
.text$mn:00002460 loc_2460:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+B6j
.text$mn:00002460                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002463                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:00002468                 mov     [ebp+var_8], eax
.text$mn:0000246B
.text$mn:0000246B loc_246B:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+92j
.text$mn:0000246B                 cmp     [ebp+var_8], 0
.text$mn:0000246F                 jz      short loc_2484
.text$mn:00002471                 mov     edx, [ebp+arg_0]
.text$mn:00002474                 push    edx
.text$mn:00002475                 mov     eax, [ebp+var_8]
.text$mn:00002478                 mov     edx, [eax]
.text$mn:0000247A                 mov     ecx, [ebp+var_8]
.text$mn:0000247D                 mov     eax, [edx+8]
.text$mn:00002480                 call    eax
.text$mn:00002482                 jmp     short loc_2460
.text$mn:00002484 ; ---------------------------------------------------------------------------
.text$mn:00002484
.text$mn:00002484 loc_2484:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+A3j
.text$mn:00002484                 push    offset $SG96595 ; Str
.text$mn:00002489                 mov     ecx, [ebp+var_C]
.text$mn:0000248C                 add     ecx, 1Ch
.text$mn:0000248F                 push    ecx
.text$mn:00002490                 push    offset $SG96596 ; "</"
.text$mn:00002495                 mov     edx, [ebp+arg_0]
.text$mn:00002498                 push    edx             ; int
.text$mn:00002499                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:0000249E                 add     esp, 8
.text$mn:000024A1                 push    eax
.text$mn:000024A2                 call    ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000024A7                 add     esp, 8
.text$mn:000024AA                 push    eax             ; int
.text$mn:000024AB                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000024B0                 add     esp, 8
.text$mn:000024B3                 jmp     short loc_24C6
.text$mn:000024B5 ; ---------------------------------------------------------------------------
.text$mn:000024B5
.text$mn:000024B5 loc_24B5:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+76j
.text$mn:000024B5                 push    offset $SG96617 ; " />"
.text$mn:000024BA                 mov     eax, [ebp+arg_0]
.text$mn:000024BD                 push    eax             ; int
.text$mn:000024BE                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000024C3                 add     esp, 8
.text$mn:000024C6
.text$mn:000024C6 loc_24C6:                               ; CODE XREF: TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+E7j
.text$mn:000024C6                 mov     esp, ebp
.text$mn:000024C8                 pop     ebp
.text$mn:000024C9                 retn    4
.text$mn:000024C9 ?StreamOut@TiXmlElement@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:000024C9
.text$mn:000024CC
.text$mn:000024CC ; =============== S U B R O U T I N E =======================================
.text$mn:000024CC
.text$mn:000024CC ; Attributes: bp-based frame
.text$mn:000024CC
.text$mn:000024CC ; struct TiXmlNode *__thiscall TiXmlComment::Clone(TiXmlComment *__hidden this)
.text$mn:000024CC                 public ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
.text$mn:000024CC ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ proc near
.text$mn:000024CC                                         ; DATA XREF: .rdata:0000E4E8o
.text$mn:000024CC
.text$mn:000024CC var_20          = dword ptr -20h
.text$mn:000024CC var_1C          = dword ptr -1Ch
.text$mn:000024CC var_18          = dword ptr -18h
.text$mn:000024CC var_14          = dword ptr -14h
.text$mn:000024CC var_10          = dword ptr -10h
.text$mn:000024CC var_C           = dword ptr -0Ch
.text$mn:000024CC var_4           = dword ptr -4
.text$mn:000024CC
.text$mn:000024CC                 push    ebp
.text$mn:000024CD                 mov     ebp, esp
.text$mn:000024CF                 push    0FFFFFFFFh
.text$mn:000024D1                 push    offset __ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
.text$mn:000024D6                 mov     eax, large fs:0
.text$mn:000024DC                 push    eax
.text$mn:000024DD                 sub     esp, 14h
.text$mn:000024E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000024E5                 xor     eax, ebp
.text$mn:000024E7                 push    eax
.text$mn:000024E8                 lea     eax, [ebp+var_C]
.text$mn:000024EB                 mov     large fs:0, eax
.text$mn:000024F1                 mov     [ebp+var_20], ecx
.text$mn:000024F4                 push    44h ; 'D'       ; unsigned int
.text$mn:000024F6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000024FB                 add     esp, 4
.text$mn:000024FE                 mov     [ebp+var_14], eax
.text$mn:00002501                 mov     [ebp+var_4], 0
.text$mn:00002508                 cmp     [ebp+var_14], 0
.text$mn:0000250C                 jz      short loc_251B
.text$mn:0000250E                 mov     ecx, [ebp+var_14]
.text$mn:00002511                 call    ??0TiXmlComment@@QAE@XZ ; TiXmlComment::TiXmlComment(void)
.text$mn:00002516                 mov     [ebp+var_18], eax
.text$mn:00002519                 jmp     short loc_2522
.text$mn:0000251B ; ---------------------------------------------------------------------------
.text$mn:0000251B
.text$mn:0000251B loc_251B:                               ; CODE XREF: TiXmlComment::Clone(void)+40j
.text$mn:0000251B                 mov     [ebp+var_18], 0
.text$mn:00002522
.text$mn:00002522 loc_2522:                               ; CODE XREF: TiXmlComment::Clone(void)+4Dj
.text$mn:00002522                 mov     eax, [ebp+var_18]
.text$mn:00002525                 mov     [ebp+var_1C], eax
.text$mn:00002528                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000252F                 mov     ecx, [ebp+var_1C]
.text$mn:00002532                 mov     [ebp+var_10], ecx
.text$mn:00002535                 cmp     [ebp+var_10], 0
.text$mn:00002539                 jnz     short loc_253F
.text$mn:0000253B                 xor     eax, eax
.text$mn:0000253D                 jmp     short loc_254E
.text$mn:0000253F ; ---------------------------------------------------------------------------
.text$mn:0000253F
.text$mn:0000253F loc_253F:                               ; CODE XREF: TiXmlComment::Clone(void)+6Dj
.text$mn:0000253F                 mov     edx, [ebp+var_10]
.text$mn:00002542                 push    edx             ; struct TiXmlNode *
.text$mn:00002543                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002546                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:0000254B                 mov     eax, [ebp+var_10]
.text$mn:0000254E
.text$mn:0000254E loc_254E:                               ; CODE XREF: TiXmlComment::Clone(void)+71j
.text$mn:0000254E                 mov     ecx, [ebp+var_C]
.text$mn:00002551                 mov     large fs:0, ecx
.text$mn:00002558                 pop     ecx
.text$mn:00002559                 mov     esp, ebp
.text$mn:0000255B                 pop     ebp
.text$mn:0000255C                 retn
.text$mn:0000255C ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ endp
.text$mn:0000255C
.text$mn:0000255C ; ---------------------------------------------------------------------------
.text$mn:0000255D                 db 0Fh dup(0CCh)
.text$mn:0000256C
.text$mn:0000256C ; =============== S U B R O U T I N E =======================================
.text$mn:0000256C
.text$mn:0000256C ; Attributes: bp-based frame
.text$mn:0000256C
.text$mn:0000256C ; void __thiscall TiXmlComment::Print(TiXmlComment *this, FILE *File, int)
.text$mn:0000256C                 public ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z
.text$mn:0000256C ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:0000256C                                         ; DATA XREF: .rdata:0000E4D8o
.text$mn:0000256C
.text$mn:0000256C var_8           = dword ptr -8
.text$mn:0000256C var_4           = dword ptr -4
.text$mn:0000256C File            = dword ptr  8
.text$mn:0000256C arg_4           = dword ptr  0Ch
.text$mn:0000256C
.text$mn:0000256C                 push    ebp
.text$mn:0000256D                 mov     ebp, esp
.text$mn:0000256F                 sub     esp, 8
.text$mn:00002572                 mov     [ebp+var_8], ecx
.text$mn:00002575                 mov     [ebp+var_4], 0
.text$mn:0000257C                 jmp     short loc_2587
.text$mn:0000257E ; ---------------------------------------------------------------------------
.text$mn:0000257E
.text$mn:0000257E loc_257E:                               ; CODE XREF: TiXmlComment::Print(_iobuf *,int)+34j
.text$mn:0000257E                 mov     eax, [ebp+var_4]
.text$mn:00002581                 add     eax, 1
.text$mn:00002584                 mov     [ebp+var_4], eax
.text$mn:00002587
.text$mn:00002587 loc_2587:                               ; CODE XREF: TiXmlComment::Print(_iobuf *,int)+10j
.text$mn:00002587                 mov     ecx, [ebp+var_4]
.text$mn:0000258A                 cmp     ecx, [ebp+arg_4]
.text$mn:0000258D                 jge     short loc_25A2
.text$mn:0000258F                 mov     edx, [ebp+File]
.text$mn:00002592                 push    edx             ; File
.text$mn:00002593                 push    offset $SG96842 ; "    "
.text$mn:00002598                 call    _fputs
.text$mn:0000259D                 add     esp, 8
.text$mn:000025A0                 jmp     short loc_257E
.text$mn:000025A2 ; ---------------------------------------------------------------------------
.text$mn:000025A2
.text$mn:000025A2 loc_25A2:                               ; CODE XREF: TiXmlComment::Print(_iobuf *,int)+21j
.text$mn:000025A2                 mov     ecx, [ebp+var_8]
.text$mn:000025A5                 add     ecx, 1Ch
.text$mn:000025A8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000025AD                 push    eax
.text$mn:000025AE                 push    offset $SG96843 ; "<!--%s-->"
.text$mn:000025B3                 mov     eax, [ebp+File]
.text$mn:000025B6                 push    eax             ; File
.text$mn:000025B7                 call    _fwprintf
.text$mn:000025BC                 add     esp, 0Ch
.text$mn:000025BF                 mov     esp, ebp
.text$mn:000025C1                 pop     ebp
.text$mn:000025C2                 retn    8
.text$mn:000025C2 ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z endp
.text$mn:000025C2
.text$mn:000025C2 ; ---------------------------------------------------------------------------
.text$mn:000025C5                 db 7 dup(0CCh)
.text$mn:000025CC
.text$mn:000025CC ; =============== S U B R O U T I N E =======================================
.text$mn:000025CC
.text$mn:000025CC ; Attributes: bp-based frame
.text$mn:000025CC
.text$mn:000025CC ; protected: virtual void __thiscall TiXmlComment::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:000025CC                 public ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:000025CC ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:000025CC                                         ; DATA XREF: .rdata:0000E4DCo
.text$mn:000025CC
.text$mn:000025CC var_4           = dword ptr -4
.text$mn:000025CC arg_0           = dword ptr  8
.text$mn:000025CC
.text$mn:000025CC                 push    ebp
.text$mn:000025CD                 mov     ebp, esp
.text$mn:000025CF                 push    ecx
.text$mn:000025D0                 mov     [ebp+var_4], ecx
.text$mn:000025D3                 push    offset $SG96871 ; "<!--"
.text$mn:000025D8                 mov     eax, [ebp+arg_0]
.text$mn:000025DB                 push    eax             ; int
.text$mn:000025DC                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000025E1                 add     esp, 8
.text$mn:000025E4                 mov     ecx, [ebp+arg_0]
.text$mn:000025E7                 push    ecx
.text$mn:000025E8                 mov     edx, [ebp+var_4]
.text$mn:000025EB                 add     edx, 1Ch
.text$mn:000025EE                 push    edx
.text$mn:000025EF                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:000025F4                 add     esp, 8
.text$mn:000025F7                 push    offset $SG96880 ; "-->"
.text$mn:000025FC                 mov     eax, [ebp+arg_0]
.text$mn:000025FF                 push    eax             ; int
.text$mn:00002600                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002605                 add     esp, 8
.text$mn:00002608                 mov     esp, ebp
.text$mn:0000260A                 pop     ebp
.text$mn:0000260B                 retn    4
.text$mn:0000260B ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:0000260B
.text$mn:0000260B ; ---------------------------------------------------------------------------
.text$mn:0000260E                 db 0Eh dup(0CCh)
.text$mn:0000261C
.text$mn:0000261C ; =============== S U B R O U T I N E =======================================
.text$mn:0000261C
.text$mn:0000261C ; Attributes: bp-based frame
.text$mn:0000261C
.text$mn:0000261C ; void __thiscall TiXmlText::Print(TiXmlText *this, FILE *File, int)
.text$mn:0000261C                 public ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
.text$mn:0000261C ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:0000261C                                         ; DATA XREF: .rdata:0000E4F8o
.text$mn:0000261C
.text$mn:0000261C var_30          = dword ptr -30h
.text$mn:0000261C var_2C          = byte ptr -2Ch
.text$mn:0000261C var_10          = dword ptr -10h
.text$mn:0000261C var_C           = dword ptr -0Ch
.text$mn:0000261C var_4           = dword ptr -4
.text$mn:0000261C File            = dword ptr  8
.text$mn:0000261C
.text$mn:0000261C                 push    ebp
.text$mn:0000261D                 mov     ebp, esp
.text$mn:0000261F                 push    0FFFFFFFFh
.text$mn:00002621                 push    offset __ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
.text$mn:00002626                 mov     eax, large fs:0
.text$mn:0000262C                 push    eax
.text$mn:0000262D                 sub     esp, 24h
.text$mn:00002630                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002635                 xor     eax, ebp
.text$mn:00002637                 mov     [ebp+var_10], eax
.text$mn:0000263A                 push    eax
.text$mn:0000263B                 lea     eax, [ebp+var_C]
.text$mn:0000263E                 mov     large fs:0, eax
.text$mn:00002644                 mov     [ebp+var_30], ecx
.text$mn:00002647                 lea     ecx, [ebp+var_2C]
.text$mn:0000264A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000264F                 mov     [ebp+var_4], 0
.text$mn:00002656                 lea     eax, [ebp+var_2C]
.text$mn:00002659                 push    eax
.text$mn:0000265A                 mov     ecx, [ebp+var_30]
.text$mn:0000265D                 add     ecx, 1Ch
.text$mn:00002660                 push    ecx
.text$mn:00002661                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV23@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002666                 add     esp, 8
.text$mn:00002669                 lea     ecx, [ebp+var_2C]
.text$mn:0000266C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002671                 push    eax
.text$mn:00002672                 push    offset $SG96896 ; "%s"
.text$mn:00002677                 mov     edx, [ebp+File]
.text$mn:0000267A                 push    edx             ; File
.text$mn:0000267B                 call    _fwprintf
.text$mn:00002680                 add     esp, 0Ch
.text$mn:00002683                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000268A                 lea     ecx, [ebp+var_2C]
.text$mn:0000268D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002692                 mov     ecx, [ebp+var_C]
.text$mn:00002695                 mov     large fs:0, ecx
.text$mn:0000269C                 pop     ecx
.text$mn:0000269D                 mov     ecx, [ebp+var_10]
.text$mn:000026A0                 xor     ecx, ebp
.text$mn:000026A2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000026A7                 mov     esp, ebp
.text$mn:000026A9                 pop     ebp
.text$mn:000026AA                 retn    8
.text$mn:000026AA ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z endp
.text$mn:000026AA
.text$mn:000026AA ; ---------------------------------------------------------------------------
.text$mn:000026AD                 db 0Fh dup(0CCh)
.text$mn:000026BC
.text$mn:000026BC ; =============== S U B R O U T I N E =======================================
.text$mn:000026BC
.text$mn:000026BC ; Attributes: bp-based frame
.text$mn:000026BC
.text$mn:000026BC ; struct TiXmlNode *__thiscall TiXmlText::Clone(TiXmlText *__hidden this)
.text$mn:000026BC                 public ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
.text$mn:000026BC ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ proc near
.text$mn:000026BC                                         ; DATA XREF: .rdata:0000E508o
.text$mn:000026BC
.text$mn:000026BC var_20          = dword ptr -20h
.text$mn:000026BC var_1C          = dword ptr -1Ch
.text$mn:000026BC var_18          = dword ptr -18h
.text$mn:000026BC var_14          = dword ptr -14h
.text$mn:000026BC var_10          = dword ptr -10h
.text$mn:000026BC var_C           = dword ptr -0Ch
.text$mn:000026BC var_4           = dword ptr -4
.text$mn:000026BC
.text$mn:000026BC                 push    ebp
.text$mn:000026BD                 mov     ebp, esp
.text$mn:000026BF                 push    0FFFFFFFFh
.text$mn:000026C1                 push    offset __ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
.text$mn:000026C6                 mov     eax, large fs:0
.text$mn:000026CC                 push    eax
.text$mn:000026CD                 sub     esp, 14h
.text$mn:000026D0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000026D5                 xor     eax, ebp
.text$mn:000026D7                 push    eax
.text$mn:000026D8                 lea     eax, [ebp+var_C]
.text$mn:000026DB                 mov     large fs:0, eax
.text$mn:000026E1                 mov     [ebp+var_20], ecx
.text$mn:000026E4                 mov     [ebp+var_10], 0
.text$mn:000026EB                 push    44h ; 'D'       ; unsigned int
.text$mn:000026ED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000026F2                 add     esp, 4
.text$mn:000026F5                 mov     [ebp+var_14], eax
.text$mn:000026F8                 mov     [ebp+var_4], 0
.text$mn:000026FF                 cmp     [ebp+var_14], 0
.text$mn:00002703                 jz      short loc_2717
.text$mn:00002705                 push    offset $SG96913 ; wchar_t *
.text$mn:0000270A                 mov     ecx, [ebp+var_14]
.text$mn:0000270D                 call    ??0TiXmlText@@QAE@PB_W@Z ; TiXmlText::TiXmlText(wchar_t const *)
.text$mn:00002712                 mov     [ebp+var_18], eax
.text$mn:00002715                 jmp     short loc_271E
.text$mn:00002717 ; ---------------------------------------------------------------------------
.text$mn:00002717
.text$mn:00002717 loc_2717:                               ; CODE XREF: TiXmlText::Clone(void)+47j
.text$mn:00002717                 mov     [ebp+var_18], 0
.text$mn:0000271E
.text$mn:0000271E loc_271E:                               ; CODE XREF: TiXmlText::Clone(void)+59j
.text$mn:0000271E                 mov     eax, [ebp+var_18]
.text$mn:00002721                 mov     [ebp+var_1C], eax
.text$mn:00002724                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000272B                 mov     ecx, [ebp+var_1C]
.text$mn:0000272E                 mov     [ebp+var_10], ecx
.text$mn:00002731                 cmp     [ebp+var_10], 0
.text$mn:00002735                 jnz     short loc_273B
.text$mn:00002737                 xor     eax, eax
.text$mn:00002739                 jmp     short loc_274A
.text$mn:0000273B ; ---------------------------------------------------------------------------
.text$mn:0000273B
.text$mn:0000273B loc_273B:                               ; CODE XREF: TiXmlText::Clone(void)+79j
.text$mn:0000273B                 mov     edx, [ebp+var_10]
.text$mn:0000273E                 push    edx             ; struct TiXmlNode *
.text$mn:0000273F                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002742                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:00002747                 mov     eax, [ebp+var_10]
.text$mn:0000274A
.text$mn:0000274A loc_274A:                               ; CODE XREF: TiXmlText::Clone(void)+7Dj
.text$mn:0000274A                 mov     ecx, [ebp+var_C]
.text$mn:0000274D                 mov     large fs:0, ecx
.text$mn:00002754                 pop     ecx
.text$mn:00002755                 mov     esp, ebp
.text$mn:00002757                 pop     ebp
.text$mn:00002758                 retn
.text$mn:00002758 ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ endp
.text$mn:00002758
.text$mn:00002758 ; ---------------------------------------------------------------------------
.text$mn:00002759                 align 4
.text$mn:0000275C
.text$mn:0000275C ; =============== S U B R O U T I N E =======================================
.text$mn:0000275C
.text$mn:0000275C ; Attributes: bp-based frame
.text$mn:0000275C
.text$mn:0000275C ; protected: virtual void __thiscall TiXmlText::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:0000275C                 public ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:0000275C ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:0000275C                                         ; DATA XREF: .rdata:0000E4FCo
.text$mn:0000275C
.text$mn:0000275C var_4           = dword ptr -4
.text$mn:0000275C arg_0           = dword ptr  8
.text$mn:0000275C
.text$mn:0000275C                 push    ebp
.text$mn:0000275D                 mov     ebp, esp
.text$mn:0000275F                 push    ecx
.text$mn:00002760                 mov     [ebp+var_4], ecx
.text$mn:00002763                 mov     eax, [ebp+arg_0]
.text$mn:00002766                 push    eax
.text$mn:00002767                 mov     ecx, [ebp+var_4]
.text$mn:0000276A                 add     ecx, 1Ch
.text$mn:0000276D                 push    ecx
.text$mn:0000276E                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:00002773                 add     esp, 8
.text$mn:00002776                 mov     esp, ebp
.text$mn:00002778                 pop     ebp
.text$mn:00002779                 retn    4
.text$mn:00002779 ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:00002779
.text$mn:0000277C
.text$mn:0000277C ; =============== S U B R O U T I N E =======================================
.text$mn:0000277C
.text$mn:0000277C ; Attributes: bp-based frame
.text$mn:0000277C
.text$mn:0000277C ; int __stdcall TiXmlDeclaration::TiXmlDeclaration(wchar_t *Str, wchar_t *, wchar_t *)
.text$mn:0000277C                 public ??0TiXmlDeclaration@@QAE@PB_W00@Z
.text$mn:0000277C ??0TiXmlDeclaration@@QAE@PB_W00@Z proc near
.text$mn:0000277C
.text$mn:0000277C var_10          = dword ptr -10h
.text$mn:0000277C var_C           = dword ptr -0Ch
.text$mn:0000277C var_4           = dword ptr -4
.text$mn:0000277C Str             = dword ptr  8
.text$mn:0000277C arg_4           = dword ptr  0Ch
.text$mn:0000277C arg_8           = dword ptr  10h
.text$mn:0000277C
.text$mn:0000277C                 push    ebp
.text$mn:0000277D                 mov     ebp, esp
.text$mn:0000277F                 push    0FFFFFFFFh
.text$mn:00002781                 push    offset __ehhandler$??0TiXmlDeclaration@@QAE@PB_W00@Z
.text$mn:00002786                 mov     eax, large fs:0
.text$mn:0000278C                 push    eax
.text$mn:0000278D                 push    ecx
.text$mn:0000278E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002793                 xor     eax, ebp
.text$mn:00002795                 push    eax
.text$mn:00002796                 lea     eax, [ebp+var_C]
.text$mn:00002799                 mov     large fs:0, eax
.text$mn:0000279F                 mov     [ebp+var_10], ecx
.text$mn:000027A2                 push    5
.text$mn:000027A4                 mov     ecx, [ebp+var_10]
.text$mn:000027A7                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:000027AC                 mov     [ebp+var_4], 0
.text$mn:000027B3                 mov     eax, [ebp+var_10]
.text$mn:000027B6                 mov     dword ptr [eax], offset ??_7TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`vftable'
.text$mn:000027BC                 mov     ecx, [ebp+var_10]
.text$mn:000027BF                 add     ecx, 44h ; 'D'
.text$mn:000027C2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027C7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000027CB                 mov     ecx, [ebp+var_10]
.text$mn:000027CE                 add     ecx, 60h ; '`'
.text$mn:000027D1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027D6                 mov     byte ptr [ebp+var_4], 2
.text$mn:000027DA                 mov     ecx, [ebp+var_10]
.text$mn:000027DD                 add     ecx, 7Ch ; '|'
.text$mn:000027E0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027E5                 mov     byte ptr [ebp+var_4], 3
.text$mn:000027E9                 mov     ecx, [ebp+Str]
.text$mn:000027EC                 push    ecx             ; Str
.text$mn:000027ED                 mov     ecx, [ebp+var_10]
.text$mn:000027F0                 add     ecx, 44h ; 'D'
.text$mn:000027F3                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000027F8                 mov     edx, [ebp+arg_4]
.text$mn:000027FB                 push    edx             ; Str
.text$mn:000027FC                 mov     ecx, [ebp+var_10]
.text$mn:000027FF                 add     ecx, 60h ; '`'
.text$mn:00002802                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002807                 mov     eax, [ebp+arg_8]
.text$mn:0000280A                 push    eax             ; Str
.text$mn:0000280B                 mov     ecx, [ebp+var_10]
.text$mn:0000280E                 add     ecx, 7Ch ; '|'
.text$mn:00002811                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002816                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000281D                 mov     eax, [ebp+var_10]
.text$mn:00002820                 mov     ecx, [ebp+var_C]
.text$mn:00002823                 mov     large fs:0, ecx
.text$mn:0000282A                 pop     ecx
.text$mn:0000282B                 mov     esp, ebp
.text$mn:0000282D                 pop     ebp
.text$mn:0000282E                 retn    0Ch
.text$mn:0000282E ??0TiXmlDeclaration@@QAE@PB_W00@Z endp
.text$mn:0000282E
.text$mn:0000282E ; ---------------------------------------------------------------------------
.text$mn:00002831                 db 0Bh dup(0CCh)
.text$mn:0000283C
.text$mn:0000283C ; =============== S U B R O U T I N E =======================================
.text$mn:0000283C
.text$mn:0000283C ; Attributes: bp-based frame
.text$mn:0000283C
.text$mn:0000283C ; struct TiXmlNode *__thiscall TiXmlDeclaration::Clone(TiXmlDeclaration *__hidden this)
.text$mn:0000283C                 public ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
.text$mn:0000283C ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ proc near
.text$mn:0000283C                                         ; DATA XREF: .rdata:0000E528o
.text$mn:0000283C
.text$mn:0000283C var_20          = dword ptr -20h
.text$mn:0000283C var_1C          = dword ptr -1Ch
.text$mn:0000283C var_18          = dword ptr -18h
.text$mn:0000283C var_14          = dword ptr -14h
.text$mn:0000283C var_10          = dword ptr -10h
.text$mn:0000283C var_C           = dword ptr -0Ch
.text$mn:0000283C var_4           = dword ptr -4
.text$mn:0000283C
.text$mn:0000283C                 push    ebp
.text$mn:0000283D                 mov     ebp, esp
.text$mn:0000283F                 push    0FFFFFFFFh
.text$mn:00002841                 push    offset __ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
.text$mn:00002846                 mov     eax, large fs:0
.text$mn:0000284C                 push    eax
.text$mn:0000284D                 sub     esp, 14h
.text$mn:00002850                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002855                 xor     eax, ebp
.text$mn:00002857                 push    eax
.text$mn:00002858                 lea     eax, [ebp+var_C]
.text$mn:0000285B                 mov     large fs:0, eax
.text$mn:00002861                 mov     [ebp+var_14], ecx
.text$mn:00002864                 push    98h ; 'ÿ'       ; unsigned int
.text$mn:00002869                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000286E                 add     esp, 4
.text$mn:00002871                 mov     [ebp+var_18], eax
.text$mn:00002874                 mov     [ebp+var_4], 0
.text$mn:0000287B                 cmp     [ebp+var_18], 0
.text$mn:0000287F                 jz      short loc_288E
.text$mn:00002881                 mov     ecx, [ebp+var_18]
.text$mn:00002884                 call    ??0TiXmlDeclaration@@QAE@XZ ; TiXmlDeclaration::TiXmlDeclaration(void)
.text$mn:00002889                 mov     [ebp+var_1C], eax
.text$mn:0000288C                 jmp     short loc_2895
.text$mn:0000288E ; ---------------------------------------------------------------------------
.text$mn:0000288E
.text$mn:0000288E loc_288E:                               ; CODE XREF: TiXmlDeclaration::Clone(void)+43j
.text$mn:0000288E                 mov     [ebp+var_1C], 0
.text$mn:00002895
.text$mn:00002895 loc_2895:                               ; CODE XREF: TiXmlDeclaration::Clone(void)+50j
.text$mn:00002895                 mov     eax, [ebp+var_1C]
.text$mn:00002898                 mov     [ebp+var_20], eax
.text$mn:0000289B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000028A2                 mov     ecx, [ebp+var_20]
.text$mn:000028A5                 mov     [ebp+var_10], ecx
.text$mn:000028A8                 cmp     [ebp+var_10], 0
.text$mn:000028AC                 jnz     short loc_28B2
.text$mn:000028AE                 xor     eax, eax
.text$mn:000028B0                 jmp     short loc_28F7
.text$mn:000028B2 ; ---------------------------------------------------------------------------
.text$mn:000028B2
.text$mn:000028B2 loc_28B2:                               ; CODE XREF: TiXmlDeclaration::Clone(void)+70j
.text$mn:000028B2                 mov     edx, [ebp+var_10]
.text$mn:000028B5                 push    edx             ; struct TiXmlNode *
.text$mn:000028B6                 mov     ecx, [ebp+var_14] ; this
.text$mn:000028B9                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:000028BE                 mov     eax, [ebp+var_14]
.text$mn:000028C1                 add     eax, 44h ; 'D'
.text$mn:000028C4                 push    eax
.text$mn:000028C5                 mov     ecx, [ebp+var_10]
.text$mn:000028C8                 add     ecx, 44h ; 'D'
.text$mn:000028CB                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000028D0                 mov     ecx, [ebp+var_14]
.text$mn:000028D3                 add     ecx, 60h ; '`'
.text$mn:000028D6                 push    ecx
.text$mn:000028D7                 mov     ecx, [ebp+var_10]
.text$mn:000028DA                 add     ecx, 60h ; '`'
.text$mn:000028DD                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000028E2                 mov     edx, [ebp+var_14]
.text$mn:000028E5                 add     edx, 7Ch ; '|'
.text$mn:000028E8                 push    edx
.text$mn:000028E9                 mov     ecx, [ebp+var_10]
.text$mn:000028EC                 add     ecx, 7Ch ; '|'
.text$mn:000028EF                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000028F4                 mov     eax, [ebp+var_10]
.text$mn:000028F7
.text$mn:000028F7 loc_28F7:                               ; CODE XREF: TiXmlDeclaration::Clone(void)+74j
.text$mn:000028F7                 mov     ecx, [ebp+var_C]
.text$mn:000028FA                 mov     large fs:0, ecx
.text$mn:00002901                 pop     ecx
.text$mn:00002902                 mov     esp, ebp
.text$mn:00002904                 pop     ebp
.text$mn:00002905                 retn
.text$mn:00002905 ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ endp
.text$mn:00002905
.text$mn:00002905 ; ---------------------------------------------------------------------------
.text$mn:00002906                 db 6 dup(0CCh)
.text$mn:0000290C
.text$mn:0000290C ; =============== S U B R O U T I N E =======================================
.text$mn:0000290C
.text$mn:0000290C ; Attributes: bp-based frame
.text$mn:0000290C
.text$mn:0000290C ; void __thiscall TiXmlDeclaration::Print(TiXmlDeclaration *this, FILE *File, int)
.text$mn:0000290C                 public ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z
.text$mn:0000290C ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:0000290C                                         ; DATA XREF: .rdata:0000E518o
.text$mn:0000290C
.text$mn:0000290C var_4           = dword ptr -4
.text$mn:0000290C File            = dword ptr  8
.text$mn:0000290C
.text$mn:0000290C                 push    ebp
.text$mn:0000290D                 mov     ebp, esp
.text$mn:0000290F                 push    ecx
.text$mn:00002910                 mov     [ebp+var_4], ecx
.text$mn:00002913                 push    offset $SG96926 ; "<?xml "
.text$mn:00002918                 mov     eax, [ebp+File]
.text$mn:0000291B                 push    eax             ; File
.text$mn:0000291C                 call    _fwprintf
.text$mn:00002921                 add     esp, 8
.text$mn:00002924                 mov     ecx, [ebp+var_4]
.text$mn:00002927                 add     ecx, 44h ; 'D'
.text$mn:0000292A                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:0000292F                 movzx   ecx, al
.text$mn:00002932                 test    ecx, ecx
.text$mn:00002934                 jnz     short loc_2953
.text$mn:00002936                 mov     ecx, [ebp+var_4]
.text$mn:00002939                 add     ecx, 44h ; 'D'
.text$mn:0000293C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002941                 push    eax
.text$mn:00002942                 push    offset $SG96928 ; "version=\"%s\" "
.text$mn:00002947                 mov     edx, [ebp+File]
.text$mn:0000294A                 push    edx             ; File
.text$mn:0000294B                 call    _fwprintf
.text$mn:00002950                 add     esp, 0Ch
.text$mn:00002953
.text$mn:00002953 loc_2953:                               ; CODE XREF: TiXmlDeclaration::Print(_iobuf *,int)+28j
.text$mn:00002953                 mov     ecx, [ebp+var_4]
.text$mn:00002956                 add     ecx, 60h ; '`'
.text$mn:00002959                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:0000295E                 movzx   eax, al
.text$mn:00002961                 test    eax, eax
.text$mn:00002963                 jnz     short loc_2982
.text$mn:00002965                 mov     ecx, [ebp+var_4]
.text$mn:00002968                 add     ecx, 60h ; '`'
.text$mn:0000296B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002970                 push    eax
.text$mn:00002971                 push    offset $SG96930 ; "encoding=\"%s\" "
.text$mn:00002976                 mov     ecx, [ebp+File]
.text$mn:00002979                 push    ecx             ; File
.text$mn:0000297A                 call    _fwprintf
.text$mn:0000297F                 add     esp, 0Ch
.text$mn:00002982
.text$mn:00002982 loc_2982:                               ; CODE XREF: TiXmlDeclaration::Print(_iobuf *,int)+57j
.text$mn:00002982                 mov     ecx, [ebp+var_4]
.text$mn:00002985                 add     ecx, 7Ch ; '|'
.text$mn:00002988                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:0000298D                 movzx   edx, al
.text$mn:00002990                 test    edx, edx
.text$mn:00002992                 jnz     short loc_29B1
.text$mn:00002994                 mov     ecx, [ebp+var_4]
.text$mn:00002997                 add     ecx, 7Ch ; '|'
.text$mn:0000299A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000299F                 push    eax
.text$mn:000029A0                 push    offset $SG96932 ; "standalone=\"%s\" "
.text$mn:000029A5                 mov     eax, [ebp+File]
.text$mn:000029A8                 push    eax             ; File
.text$mn:000029A9                 call    _fwprintf
.text$mn:000029AE                 add     esp, 0Ch
.text$mn:000029B1
.text$mn:000029B1 loc_29B1:                               ; CODE XREF: TiXmlDeclaration::Print(_iobuf *,int)+86j
.text$mn:000029B1                 push    offset $SG96933 ; "?>"
.text$mn:000029B6                 mov     ecx, [ebp+File]
.text$mn:000029B9                 push    ecx             ; File
.text$mn:000029BA                 call    _fwprintf
.text$mn:000029BF                 add     esp, 8
.text$mn:000029C2                 mov     esp, ebp
.text$mn:000029C4                 pop     ebp
.text$mn:000029C5                 retn    8
.text$mn:000029C5 ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z endp
.text$mn:000029C5
.text$mn:000029C5 ; ---------------------------------------------------------------------------
.text$mn:000029C8                 db 4 dup(0CCh)
.text$mn:000029CC
.text$mn:000029CC ; =============== S U B R O U T I N E =======================================
.text$mn:000029CC
.text$mn:000029CC ; Attributes: bp-based frame
.text$mn:000029CC
.text$mn:000029CC ; protected: virtual void __thiscall TiXmlDeclaration::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:000029CC                 public ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:000029CC ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:000029CC                                         ; DATA XREF: .rdata:0000E51Co
.text$mn:000029CC
.text$mn:000029CC var_4           = dword ptr -4
.text$mn:000029CC arg_0           = dword ptr  8
.text$mn:000029CC
.text$mn:000029CC                 push    ebp
.text$mn:000029CD                 mov     ebp, esp
.text$mn:000029CF                 push    ecx
.text$mn:000029D0                 mov     [ebp+var_4], ecx
.text$mn:000029D3                 push    offset $SG96961 ; "<?xml "
.text$mn:000029D8                 mov     eax, [ebp+arg_0]
.text$mn:000029DB                 push    eax             ; int
.text$mn:000029DC                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:000029E1                 add     esp, 8
.text$mn:000029E4                 mov     ecx, [ebp+var_4]
.text$mn:000029E7                 add     ecx, 44h ; 'D'
.text$mn:000029EA                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:000029EF                 movzx   ecx, al
.text$mn:000029F2                 test    ecx, ecx
.text$mn:000029F4                 jnz     short loc_2A2B
.text$mn:000029F6                 push    offset $SG96982 ; "version=\""
.text$mn:000029FB                 mov     edx, [ebp+arg_0]
.text$mn:000029FE                 push    edx             ; int
.text$mn:000029FF                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002A04                 add     esp, 8
.text$mn:00002A07                 mov     eax, [ebp+arg_0]
.text$mn:00002A0A                 push    eax
.text$mn:00002A0B                 mov     ecx, [ebp+var_4]
.text$mn:00002A0E                 add     ecx, 44h ; 'D'
.text$mn:00002A11                 push    ecx
.text$mn:00002A12                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:00002A17                 add     esp, 8
.text$mn:00002A1A                 push    offset $SG96991 ; "\" "
.text$mn:00002A1F                 mov     edx, [ebp+arg_0]
.text$mn:00002A22                 push    edx             ; int
.text$mn:00002A23                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002A28                 add     esp, 8
.text$mn:00002A2B
.text$mn:00002A2B loc_2A2B:                               ; CODE XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+28j
.text$mn:00002A2B                 mov     ecx, [ebp+var_4]
.text$mn:00002A2E                 add     ecx, 60h ; '`'
.text$mn:00002A31                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:00002A36                 movzx   eax, al
.text$mn:00002A39                 test    eax, eax
.text$mn:00002A3B                 jnz     short loc_2A72
.text$mn:00002A3D                 push    offset $SG97012 ; "encoding=\""
.text$mn:00002A42                 mov     ecx, [ebp+arg_0]
.text$mn:00002A45                 push    ecx             ; int
.text$mn:00002A46                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002A4B                 add     esp, 8
.text$mn:00002A4E                 mov     edx, [ebp+arg_0]
.text$mn:00002A51                 push    edx
.text$mn:00002A52                 mov     eax, [ebp+var_4]
.text$mn:00002A55                 add     eax, 60h ; '`'
.text$mn:00002A58                 push    eax
.text$mn:00002A59                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:00002A5E                 add     esp, 8
.text$mn:00002A61                 push    offset $SG97021 ; "\" "
.text$mn:00002A66                 mov     ecx, [ebp+arg_0]
.text$mn:00002A69                 push    ecx             ; int
.text$mn:00002A6A                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002A6F                 add     esp, 8
.text$mn:00002A72
.text$mn:00002A72 loc_2A72:                               ; CODE XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+6Fj
.text$mn:00002A72                 mov     ecx, [ebp+var_4]
.text$mn:00002A75                 add     ecx, 7Ch ; '|'
.text$mn:00002A78                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:00002A7D                 movzx   edx, al
.text$mn:00002A80                 test    edx, edx
.text$mn:00002A82                 jnz     short loc_2AB9
.text$mn:00002A84                 push    offset $SG97042 ; "standalone=\""
.text$mn:00002A89                 mov     eax, [ebp+arg_0]
.text$mn:00002A8C                 push    eax             ; int
.text$mn:00002A8D                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002A92                 add     esp, 8
.text$mn:00002A95                 mov     ecx, [ebp+arg_0]
.text$mn:00002A98                 push    ecx
.text$mn:00002A99                 mov     edx, [ebp+var_4]
.text$mn:00002A9C                 add     edx, 7Ch ; '|'
.text$mn:00002A9F                 push    edx
.text$mn:00002AA0                 call    ?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.text$mn:00002AA5                 add     esp, 8
.text$mn:00002AA8                 push    offset $SG97051 ; "\" "
.text$mn:00002AAD                 mov     eax, [ebp+arg_0]
.text$mn:00002AB0                 push    eax             ; int
.text$mn:00002AB1                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002AB6                 add     esp, 8
.text$mn:00002AB9
.text$mn:00002AB9 loc_2AB9:                               ; CODE XREF: TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+B6j
.text$mn:00002AB9                 push    offset $SG97060 ; "?>"
.text$mn:00002ABE                 mov     ecx, [ebp+arg_0]
.text$mn:00002AC1                 push    ecx             ; int
.text$mn:00002AC2                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002AC7                 add     esp, 8
.text$mn:00002ACA                 mov     esp, ebp
.text$mn:00002ACC                 pop     ebp
.text$mn:00002ACD                 retn    4
.text$mn:00002ACD ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:00002ACD
.text$mn:00002ACD ; ---------------------------------------------------------------------------
.text$mn:00002AD0                 db 0Ch dup(0CCh)
.text$mn:00002ADC
.text$mn:00002ADC ; =============== S U B R O U T I N E =======================================
.text$mn:00002ADC
.text$mn:00002ADC ; Attributes: bp-based frame
.text$mn:00002ADC
.text$mn:00002ADC ; struct TiXmlNode *__thiscall TiXmlUnknown::Clone(TiXmlUnknown *__hidden this)
.text$mn:00002ADC                 public ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
.text$mn:00002ADC ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ proc near
.text$mn:00002ADC                                         ; DATA XREF: .rdata:0000E548o
.text$mn:00002ADC
.text$mn:00002ADC var_20          = dword ptr -20h
.text$mn:00002ADC var_1C          = dword ptr -1Ch
.text$mn:00002ADC var_18          = dword ptr -18h
.text$mn:00002ADC var_14          = dword ptr -14h
.text$mn:00002ADC var_10          = dword ptr -10h
.text$mn:00002ADC var_C           = dword ptr -0Ch
.text$mn:00002ADC var_4           = dword ptr -4
.text$mn:00002ADC
.text$mn:00002ADC                 push    ebp
.text$mn:00002ADD                 mov     ebp, esp
.text$mn:00002ADF                 push    0FFFFFFFFh
.text$mn:00002AE1                 push    offset __ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
.text$mn:00002AE6                 mov     eax, large fs:0
.text$mn:00002AEC                 push    eax
.text$mn:00002AED                 sub     esp, 14h
.text$mn:00002AF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002AF5                 xor     eax, ebp
.text$mn:00002AF7                 push    eax
.text$mn:00002AF8                 lea     eax, [ebp+var_C]
.text$mn:00002AFB                 mov     large fs:0, eax
.text$mn:00002B01                 mov     [ebp+var_20], ecx
.text$mn:00002B04                 push    44h ; 'D'       ; unsigned int
.text$mn:00002B06                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002B0B                 add     esp, 4
.text$mn:00002B0E                 mov     [ebp+var_14], eax
.text$mn:00002B11                 mov     [ebp+var_4], 0
.text$mn:00002B18                 cmp     [ebp+var_14], 0
.text$mn:00002B1C                 jz      short loc_2B2B
.text$mn:00002B1E                 mov     ecx, [ebp+var_14]
.text$mn:00002B21                 call    ??0TiXmlUnknown@@QAE@XZ ; TiXmlUnknown::TiXmlUnknown(void)
.text$mn:00002B26                 mov     [ebp+var_18], eax
.text$mn:00002B29                 jmp     short loc_2B32
.text$mn:00002B2B ; ---------------------------------------------------------------------------
.text$mn:00002B2B
.text$mn:00002B2B loc_2B2B:                               ; CODE XREF: TiXmlUnknown::Clone(void)+40j
.text$mn:00002B2B                 mov     [ebp+var_18], 0
.text$mn:00002B32
.text$mn:00002B32 loc_2B32:                               ; CODE XREF: TiXmlUnknown::Clone(void)+4Dj
.text$mn:00002B32                 mov     eax, [ebp+var_18]
.text$mn:00002B35                 mov     [ebp+var_1C], eax
.text$mn:00002B38                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B3F                 mov     ecx, [ebp+var_1C]
.text$mn:00002B42                 mov     [ebp+var_10], ecx
.text$mn:00002B45                 cmp     [ebp+var_10], 0
.text$mn:00002B49                 jnz     short loc_2B4F
.text$mn:00002B4B                 xor     eax, eax
.text$mn:00002B4D                 jmp     short loc_2B5E
.text$mn:00002B4F ; ---------------------------------------------------------------------------
.text$mn:00002B4F
.text$mn:00002B4F loc_2B4F:                               ; CODE XREF: TiXmlUnknown::Clone(void)+6Dj
.text$mn:00002B4F                 mov     edx, [ebp+var_10]
.text$mn:00002B52                 push    edx             ; struct TiXmlNode *
.text$mn:00002B53                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002B56                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:00002B5B                 mov     eax, [ebp+var_10]
.text$mn:00002B5E
.text$mn:00002B5E loc_2B5E:                               ; CODE XREF: TiXmlUnknown::Clone(void)+71j
.text$mn:00002B5E                 mov     ecx, [ebp+var_C]
.text$mn:00002B61                 mov     large fs:0, ecx
.text$mn:00002B68                 pop     ecx
.text$mn:00002B69                 mov     esp, ebp
.text$mn:00002B6B                 pop     ebp
.text$mn:00002B6C                 retn
.text$mn:00002B6C ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ endp
.text$mn:00002B6C
.text$mn:00002B6C ; ---------------------------------------------------------------------------
.text$mn:00002B6D                 db 0Fh dup(0CCh)
.text$mn:00002B7C
.text$mn:00002B7C ; =============== S U B R O U T I N E =======================================
.text$mn:00002B7C
.text$mn:00002B7C ; Attributes: bp-based frame
.text$mn:00002B7C
.text$mn:00002B7C ; void __thiscall TiXmlUnknown::Print(TiXmlUnknown *this, FILE *File, int)
.text$mn:00002B7C                 public ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z
.text$mn:00002B7C ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:00002B7C                                         ; DATA XREF: .rdata:0000E538o
.text$mn:00002B7C
.text$mn:00002B7C var_8           = dword ptr -8
.text$mn:00002B7C var_4           = dword ptr -4
.text$mn:00002B7C File            = dword ptr  8
.text$mn:00002B7C arg_4           = dword ptr  0Ch
.text$mn:00002B7C
.text$mn:00002B7C                 push    ebp
.text$mn:00002B7D                 mov     ebp, esp
.text$mn:00002B7F                 sub     esp, 8
.text$mn:00002B82                 mov     [ebp+var_8], ecx
.text$mn:00002B85                 mov     [ebp+var_4], 0
.text$mn:00002B8C                 jmp     short loc_2B97
.text$mn:00002B8E ; ---------------------------------------------------------------------------
.text$mn:00002B8E
.text$mn:00002B8E loc_2B8E:                               ; CODE XREF: TiXmlUnknown::Print(_iobuf *,int)+34j
.text$mn:00002B8E                 mov     eax, [ebp+var_4]
.text$mn:00002B91                 add     eax, 1
.text$mn:00002B94                 mov     [ebp+var_4], eax
.text$mn:00002B97
.text$mn:00002B97 loc_2B97:                               ; CODE XREF: TiXmlUnknown::Print(_iobuf *,int)+10j
.text$mn:00002B97                 mov     ecx, [ebp+var_4]
.text$mn:00002B9A                 cmp     ecx, [ebp+arg_4]
.text$mn:00002B9D                 jge     short loc_2BB2
.text$mn:00002B9F                 push    offset $SG97079 ; "    "
.text$mn:00002BA4                 mov     edx, [ebp+File]
.text$mn:00002BA7                 push    edx             ; File
.text$mn:00002BA8                 call    _fwprintf
.text$mn:00002BAD                 add     esp, 8
.text$mn:00002BB0                 jmp     short loc_2B8E
.text$mn:00002BB2 ; ---------------------------------------------------------------------------
.text$mn:00002BB2
.text$mn:00002BB2 loc_2BB2:                               ; CODE XREF: TiXmlUnknown::Print(_iobuf *,int)+21j
.text$mn:00002BB2                 mov     ecx, [ebp+var_8]
.text$mn:00002BB5                 add     ecx, 1Ch
.text$mn:00002BB8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002BBD                 push    eax
.text$mn:00002BBE                 push    offset $SG97080 ; "%s"
.text$mn:00002BC3                 mov     eax, [ebp+File]
.text$mn:00002BC6                 push    eax             ; File
.text$mn:00002BC7                 call    _fwprintf
.text$mn:00002BCC                 add     esp, 0Ch
.text$mn:00002BCF                 mov     esp, ebp
.text$mn:00002BD1                 pop     ebp
.text$mn:00002BD2                 retn    8
.text$mn:00002BD2 ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00002BD2
.text$mn:00002BD2 ; ---------------------------------------------------------------------------
.text$mn:00002BD5                 db 7 dup(0CCh)
.text$mn:00002BDC
.text$mn:00002BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00002BDC
.text$mn:00002BDC ; Attributes: bp-based frame
.text$mn:00002BDC
.text$mn:00002BDC ; protected: virtual void __thiscall TiXmlUnknown::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:00002BDC                 public ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:00002BDC ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:00002BDC                                         ; DATA XREF: .rdata:0000E53Co
.text$mn:00002BDC
.text$mn:00002BDC var_4           = dword ptr -4
.text$mn:00002BDC arg_0           = dword ptr  8
.text$mn:00002BDC
.text$mn:00002BDC                 push    ebp
.text$mn:00002BDD                 mov     ebp, esp
.text$mn:00002BDF                 push    ecx
.text$mn:00002BE0                 mov     [ebp+var_4], ecx
.text$mn:00002BE3                 push    offset $SG97113 ; Str
.text$mn:00002BE8                 mov     eax, [ebp+var_4]
.text$mn:00002BEB                 add     eax, 1Ch
.text$mn:00002BEE                 push    eax
.text$mn:00002BEF                 push    offset $SG97114 ; Str
.text$mn:00002BF4                 mov     ecx, [ebp+arg_0]
.text$mn:00002BF7                 push    ecx             ; int
.text$mn:00002BF8                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002BFD                 add     esp, 8
.text$mn:00002C00                 push    eax
.text$mn:00002C01                 call    ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002C06                 add     esp, 8
.text$mn:00002C09                 push    eax             ; int
.text$mn:00002C0A                 call    ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)
.text$mn:00002C0F                 add     esp, 8
.text$mn:00002C12                 mov     esp, ebp
.text$mn:00002C14                 pop     ebp
.text$mn:00002C15                 retn    4
.text$mn:00002C15 ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:00002C15
.text$mn:00002C15 ; ---------------------------------------------------------------------------
.text$mn:00002C18                 db 4 dup(0CCh)
.text$mn:00002C1C
.text$mn:00002C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00002C1C
.text$mn:00002C1C ; Attributes: bp-based frame
.text$mn:00002C1C
.text$mn:00002C1C ; public: __thiscall TiXmlDocument::TiXmlDocument(void)
.text$mn:00002C1C                 public ??0TiXmlDocument@@QAE@XZ
.text$mn:00002C1C ??0TiXmlDocument@@QAE@XZ proc near      ; CODE XREF: TiXmlDocument::Clone(void)+45p
.text$mn:00002C1C
.text$mn:00002C1C var_10          = dword ptr -10h
.text$mn:00002C1C var_C           = dword ptr -0Ch
.text$mn:00002C1C var_4           = dword ptr -4
.text$mn:00002C1C
.text$mn:00002C1C                 push    ebp
.text$mn:00002C1D                 mov     ebp, esp
.text$mn:00002C1F                 push    0FFFFFFFFh
.text$mn:00002C21                 push    offset __ehhandler$??0TiXmlDocument@@QAE@XZ
.text$mn:00002C26                 mov     eax, large fs:0
.text$mn:00002C2C                 push    eax
.text$mn:00002C2D                 push    ecx
.text$mn:00002C2E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002C33                 xor     eax, ebp
.text$mn:00002C35                 push    eax
.text$mn:00002C36                 lea     eax, [ebp+var_C]
.text$mn:00002C39                 mov     large fs:0, eax
.text$mn:00002C3F                 mov     [ebp+var_10], ecx
.text$mn:00002C42                 push    0
.text$mn:00002C44                 mov     ecx, [ebp+var_10]
.text$mn:00002C47                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00002C4C                 mov     [ebp+var_4], 0
.text$mn:00002C53                 mov     eax, [ebp+var_10]
.text$mn:00002C56                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:00002C5C                 mov     ecx, [ebp+var_10]
.text$mn:00002C5F                 add     ecx, 4Ch ; 'L'
.text$mn:00002C62                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002C67                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002C6B                 mov     ecx, [ebp+var_10]
.text$mn:00002C6E                 add     ecx, 6Ch ; 'l'
.text$mn:00002C71                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:00002C76                 mov     ecx, [ebp+var_10]
.text$mn:00002C79                 mov     dword ptr [ecx+68h], 4
.text$mn:00002C80                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002C83                 call    ?ClearError@TiXmlDocument@@QAEXXZ ; TiXmlDocument::ClearError(void)
.text$mn:00002C88                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002C8F                 mov     eax, [ebp+var_10]
.text$mn:00002C92                 mov     ecx, [ebp+var_C]
.text$mn:00002C95                 mov     large fs:0, ecx
.text$mn:00002C9C                 pop     ecx
.text$mn:00002C9D                 mov     esp, ebp
.text$mn:00002C9F                 pop     ebp
.text$mn:00002CA0                 retn
.text$mn:00002CA0 ??0TiXmlDocument@@QAE@XZ endp
.text$mn:00002CA0
.text$mn:00002CA0 ; ---------------------------------------------------------------------------
.text$mn:00002CA1                 db 0Bh dup(0CCh)
.text$mn:00002CAC
.text$mn:00002CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00002CAC
.text$mn:00002CAC ; Attributes: bp-based frame
.text$mn:00002CAC
.text$mn:00002CAC ; int __stdcall TiXmlDocument::TiXmlDocument(wchar_t *Str)
.text$mn:00002CAC                 public ??0TiXmlDocument@@QAE@PB_W@Z
.text$mn:00002CAC ??0TiXmlDocument@@QAE@PB_W@Z proc near
.text$mn:00002CAC
.text$mn:00002CAC var_10          = dword ptr -10h
.text$mn:00002CAC var_C           = dword ptr -0Ch
.text$mn:00002CAC var_4           = dword ptr -4
.text$mn:00002CAC Str             = dword ptr  8
.text$mn:00002CAC
.text$mn:00002CAC                 push    ebp
.text$mn:00002CAD                 mov     ebp, esp
.text$mn:00002CAF                 push    0FFFFFFFFh
.text$mn:00002CB1                 push    offset __ehhandler$??0TiXmlDocument@@QAE@PB_W@Z
.text$mn:00002CB6                 mov     eax, large fs:0
.text$mn:00002CBC                 push    eax
.text$mn:00002CBD                 push    ecx
.text$mn:00002CBE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002CC3                 xor     eax, ebp
.text$mn:00002CC5                 push    eax
.text$mn:00002CC6                 lea     eax, [ebp+var_C]
.text$mn:00002CC9                 mov     large fs:0, eax
.text$mn:00002CCF                 mov     [ebp+var_10], ecx
.text$mn:00002CD2                 push    0
.text$mn:00002CD4                 mov     ecx, [ebp+var_10]
.text$mn:00002CD7                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00002CDC                 mov     [ebp+var_4], 0
.text$mn:00002CE3                 mov     eax, [ebp+var_10]
.text$mn:00002CE6                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:00002CEC                 mov     ecx, [ebp+var_10]
.text$mn:00002CEF                 add     ecx, 4Ch ; 'L'
.text$mn:00002CF2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002CF7                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002CFB                 mov     ecx, [ebp+var_10]
.text$mn:00002CFE                 add     ecx, 6Ch ; 'l'
.text$mn:00002D01                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:00002D06                 mov     ecx, [ebp+var_10]
.text$mn:00002D09                 mov     dword ptr [ecx+68h], 4
.text$mn:00002D10                 mov     edx, [ebp+Str]
.text$mn:00002D13                 push    edx             ; Str
.text$mn:00002D14                 mov     ecx, [ebp+var_10]
.text$mn:00002D17                 add     ecx, 1Ch
.text$mn:00002D1A                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002D1F                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002D22                 call    ?ClearError@TiXmlDocument@@QAEXXZ ; TiXmlDocument::ClearError(void)
.text$mn:00002D27                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D2E                 mov     eax, [ebp+var_10]
.text$mn:00002D31                 mov     ecx, [ebp+var_C]
.text$mn:00002D34                 mov     large fs:0, ecx
.text$mn:00002D3B                 pop     ecx
.text$mn:00002D3C                 mov     esp, ebp
.text$mn:00002D3E                 pop     ebp
.text$mn:00002D3F                 retn    4
.text$mn:00002D3F ??0TiXmlDocument@@QAE@PB_W@Z endp
.text$mn:00002D3F
.text$mn:00002D3F ; ---------------------------------------------------------------------------
.text$mn:00002D42                 db 0Ah dup(0CCh)
.text$mn:00002D4C
.text$mn:00002D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00002D4C
.text$mn:00002D4C ; Attributes: bp-based frame
.text$mn:00002D4C
.text$mn:00002D4C ; bool __thiscall TiXmlDocument::LoadFile(TiXmlDocument *__hidden this)
.text$mn:00002D4C                 public ?LoadFile@TiXmlDocument@@QAE_NXZ
.text$mn:00002D4C ?LoadFile@TiXmlDocument@@QAE_NXZ proc near
.text$mn:00002D4C
.text$mn:00002D4C var_18          = dword ptr -18h
.text$mn:00002D4C var_14          = dword ptr -14h
.text$mn:00002D4C var_E           = byte ptr -0Eh
.text$mn:00002D4C var_D           = byte ptr -0Dh
.text$mn:00002D4C var_C           = dword ptr -0Ch
.text$mn:00002D4C var_4           = dword ptr -4
.text$mn:00002D4C
.text$mn:00002D4C                 push    ebp
.text$mn:00002D4D                 mov     ebp, esp
.text$mn:00002D4F                 push    0FFFFFFFFh
.text$mn:00002D51                 push    offset __ehhandler$?LoadFile@TiXmlDocument@@QAE_NXZ
.text$mn:00002D56                 mov     eax, large fs:0
.text$mn:00002D5C                 push    eax
.text$mn:00002D5D                 sub     esp, 0Ch
.text$mn:00002D60                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002D65                 xor     eax, ebp
.text$mn:00002D67                 push    eax
.text$mn:00002D68                 lea     eax, [ebp+var_C]
.text$mn:00002D6B                 mov     large fs:0, eax
.text$mn:00002D71                 mov     [ebp+var_18], ecx
.text$mn:00002D74                 mov     eax, [ebp+var_18]
.text$mn:00002D77                 add     eax, 1Ch
.text$mn:00002D7A                 push    eax
.text$mn:00002D7B                 lea     ecx, [ebp+var_14]
.text$mn:00002D7E                 call    ??0StringToBuffer@TiXmlBase@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002D83                 mov     [ebp+var_4], 0
.text$mn:00002D8A                 cmp     [ebp+var_14], 0
.text$mn:00002D8E                 jz      short loc_2DBB
.text$mn:00002D90                 mov     ecx, [ebp+var_14]
.text$mn:00002D93                 push    ecx             ; wchar_t *
.text$mn:00002D94                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002D97                 call    ?LoadFile@TiXmlDocument@@QAE_NPB_W@Z ; TiXmlDocument::LoadFile(wchar_t const *)
.text$mn:00002D9C                 movzx   edx, al
.text$mn:00002D9F                 test    edx, edx
.text$mn:00002DA1                 jz      short loc_2DBB
.text$mn:00002DA3                 mov     [ebp+var_D], 1
.text$mn:00002DA7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DAE                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002DB1                 call    ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$mn:00002DB6                 mov     al, [ebp+var_D]
.text$mn:00002DB9                 jmp     short loc_2DD1
.text$mn:00002DBB ; ---------------------------------------------------------------------------
.text$mn:00002DBB
.text$mn:00002DBB loc_2DBB:                               ; CODE XREF: TiXmlDocument::LoadFile(void)+42j
.text$mn:00002DBB                                         ; TiXmlDocument::LoadFile(void)+55j
.text$mn:00002DBB                 mov     [ebp+var_E], 0
.text$mn:00002DBF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DC6                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002DC9                 call    ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$mn:00002DCE                 mov     al, [ebp+var_E]
.text$mn:00002DD1
.text$mn:00002DD1 loc_2DD1:                               ; CODE XREF: TiXmlDocument::LoadFile(void)+6Dj
.text$mn:00002DD1                 mov     ecx, [ebp+var_C]
.text$mn:00002DD4                 mov     large fs:0, ecx
.text$mn:00002DDB                 pop     ecx
.text$mn:00002DDC                 mov     esp, ebp
.text$mn:00002DDE                 pop     ebp
.text$mn:00002DDF                 retn
.text$mn:00002DDF ?LoadFile@TiXmlDocument@@QAE_NXZ endp
.text$mn:00002DDF
.text$mn:00002DDF ; ---------------------------------------------------------------------------
.text$mn:00002DE0                 db 0Ch dup(0CCh)
.text$mn:00002DEC
.text$mn:00002DEC ; =============== S U B R O U T I N E =======================================
.text$mn:00002DEC
.text$mn:00002DEC ; Attributes: bp-based frame
.text$mn:00002DEC
.text$mn:00002DEC ; bool __thiscall TiXmlDocument::SaveFile(TiXmlDocument *__hidden this)
.text$mn:00002DEC                 public ?SaveFile@TiXmlDocument@@QBE_NXZ
.text$mn:00002DEC ?SaveFile@TiXmlDocument@@QBE_NXZ proc near
.text$mn:00002DEC
.text$mn:00002DEC var_18          = dword ptr -18h
.text$mn:00002DEC var_14          = dword ptr -14h
.text$mn:00002DEC var_E           = byte ptr -0Eh
.text$mn:00002DEC var_D           = byte ptr -0Dh
.text$mn:00002DEC var_C           = dword ptr -0Ch
.text$mn:00002DEC var_4           = dword ptr -4
.text$mn:00002DEC
.text$mn:00002DEC                 push    ebp
.text$mn:00002DED                 mov     ebp, esp
.text$mn:00002DEF                 push    0FFFFFFFFh
.text$mn:00002DF1                 push    offset __ehhandler$?SaveFile@TiXmlDocument@@QBE_NXZ
.text$mn:00002DF6                 mov     eax, large fs:0
.text$mn:00002DFC                 push    eax
.text$mn:00002DFD                 sub     esp, 0Ch
.text$mn:00002E00                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002E05                 xor     eax, ebp
.text$mn:00002E07                 push    eax
.text$mn:00002E08                 lea     eax, [ebp+var_C]
.text$mn:00002E0B                 mov     large fs:0, eax
.text$mn:00002E11                 mov     [ebp+var_18], ecx
.text$mn:00002E14                 mov     eax, [ebp+var_18]
.text$mn:00002E17                 add     eax, 1Ch
.text$mn:00002E1A                 push    eax
.text$mn:00002E1B                 lea     ecx, [ebp+var_14]
.text$mn:00002E1E                 call    ??0StringToBuffer@TiXmlBase@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002E23                 mov     [ebp+var_4], 0
.text$mn:00002E2A                 cmp     [ebp+var_14], 0
.text$mn:00002E2E                 jz      short loc_2E5B
.text$mn:00002E30                 mov     ecx, [ebp+var_14]
.text$mn:00002E33                 push    ecx             ; wchar_t *
.text$mn:00002E34                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002E37                 call    ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z ; TiXmlDocument::SaveFile(wchar_t const *)
.text$mn:00002E3C                 movzx   edx, al
.text$mn:00002E3F                 test    edx, edx
.text$mn:00002E41                 jz      short loc_2E5B
.text$mn:00002E43                 mov     [ebp+var_D], 1
.text$mn:00002E47                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002E4E                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002E51                 call    ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$mn:00002E56                 mov     al, [ebp+var_D]
.text$mn:00002E59                 jmp     short loc_2E71
.text$mn:00002E5B ; ---------------------------------------------------------------------------
.text$mn:00002E5B
.text$mn:00002E5B loc_2E5B:                               ; CODE XREF: TiXmlDocument::SaveFile(void)+42j
.text$mn:00002E5B                                         ; TiXmlDocument::SaveFile(void)+55j
.text$mn:00002E5B                 mov     [ebp+var_E], 0
.text$mn:00002E5F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002E66                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002E69                 call    ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$mn:00002E6E                 mov     al, [ebp+var_E]
.text$mn:00002E71
.text$mn:00002E71 loc_2E71:                               ; CODE XREF: TiXmlDocument::SaveFile(void)+6Dj
.text$mn:00002E71                 mov     ecx, [ebp+var_C]
.text$mn:00002E74                 mov     large fs:0, ecx
.text$mn:00002E7B                 pop     ecx
.text$mn:00002E7C                 mov     esp, ebp
.text$mn:00002E7E                 pop     ebp
.text$mn:00002E7F                 retn
.text$mn:00002E7F ?SaveFile@TiXmlDocument@@QBE_NXZ endp
.text$mn:00002E7F
.text$mn:00002E7F ; ---------------------------------------------------------------------------
.text$mn:00002E80                 db 0Ch dup(0CCh)
.text$mn:00002E8C
.text$mn:00002E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E8C
.text$mn:00002E8C ; Attributes: bp-based frame
.text$mn:00002E8C
.text$mn:00002E8C ; bool __thiscall TiXmlDocument::LoadFile(TiXmlDocument *this, const wchar_t *)
.text$mn:00002E8C                 public ?LoadFile@TiXmlDocument@@QAE_NPB_W@Z
.text$mn:00002E8C ?LoadFile@TiXmlDocument@@QAE_NPB_W@Z proc near
.text$mn:00002E8C                                         ; CODE XREF: TiXmlDocument::LoadFile(void)+4Bp
.text$mn:00002E8C
.text$mn:00002E8C var_1040        = dword ptr -1040h
.text$mn:00002E8C var_103C        = dword ptr -103Ch
.text$mn:00002E8C var_1036        = byte ptr -1036h
.text$mn:00002E8C var_1035        = byte ptr -1035h
.text$mn:00002E8C File            = dword ptr -1034h
.text$mn:00002E8C var_1030        = dword ptr -1030h
.text$mn:00002E8C var_102C        = byte ptr -102Ch
.text$mn:00002E8C Dst             = word ptr -1010h
.text$mn:00002E8C var_10          = dword ptr -10h
.text$mn:00002E8C var_C           = dword ptr -0Ch
.text$mn:00002E8C var_4           = dword ptr -4
.text$mn:00002E8C Str             = dword ptr  8
.text$mn:00002E8C
.text$mn:00002E8C                 push    ebp
.text$mn:00002E8D                 mov     ebp, esp
.text$mn:00002E8F                 push    0FFFFFFFFh
.text$mn:00002E91                 push    offset __ehhandler$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z
.text$mn:00002E96                 mov     eax, large fs:0
.text$mn:00002E9C                 push    eax
.text$mn:00002E9D                 mov     eax, 1034h
.text$mn:00002EA2                 call    __chkstk
.text$mn:00002EA7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002EAC                 xor     eax, ebp
.text$mn:00002EAE                 mov     [ebp+var_10], eax
.text$mn:00002EB1                 push    eax
.text$mn:00002EB2                 lea     eax, [ebp+var_C]
.text$mn:00002EB5                 mov     large fs:0, eax
.text$mn:00002EBB                 mov     [ebp+var_1030], ecx
.text$mn:00002EC1                 mov     ecx, [ebp+var_1030] ; this
.text$mn:00002EC7                 call    ?Clear@TiXmlNode@@QAEXXZ ; TiXmlNode::Clear(void)
.text$mn:00002ECC                 mov     ecx, [ebp+var_1030]
.text$mn:00002ED2                 add     ecx, 4          ; this
.text$mn:00002ED5                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:00002EDA                 mov     eax, [ebp+Str]
.text$mn:00002EDD                 push    eax             ; Str
.text$mn:00002EDE                 mov     ecx, [ebp+var_1030]
.text$mn:00002EE4                 add     ecx, 1Ch
.text$mn:00002EE7                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002EEC                 push    offset $SG96661 ; Mode
.text$mn:00002EF1                 mov     ecx, [ebp+var_1030]
.text$mn:00002EF7                 add     ecx, 1Ch
.text$mn:00002EFA                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002EFF                 push    eax             ; Filename
.text$mn:00002F00                 call    __wfopen
.text$mn:00002F05                 add     esp, 8
.text$mn:00002F08                 mov     [ebp+File], eax
.text$mn:00002F0E                 cmp     [ebp+File], 0
.text$mn:00002F15                 jz      loc_3078
.text$mn:00002F1B                 mov     [ebp+var_103C], 0
.text$mn:00002F25                 push    2               ; Origin
.text$mn:00002F27                 push    0               ; Offset
.text$mn:00002F29                 mov     ecx, [ebp+File]
.text$mn:00002F2F                 push    ecx             ; File
.text$mn:00002F30                 call    _fseek
.text$mn:00002F35                 add     esp, 0Ch
.text$mn:00002F38                 mov     edx, [ebp+File]
.text$mn:00002F3E                 push    edx             ; File
.text$mn:00002F3F                 call    _ftell
.text$mn:00002F44                 add     esp, 4
.text$mn:00002F47                 mov     [ebp+var_103C], eax
.text$mn:00002F4D                 push    0               ; Origin
.text$mn:00002F4F                 push    0               ; Offset
.text$mn:00002F51                 mov     eax, [ebp+File]
.text$mn:00002F57                 push    eax             ; File
.text$mn:00002F58                 call    _fseek
.text$mn:00002F5D                 add     esp, 0Ch
.text$mn:00002F60                 cmp     [ebp+var_103C], 0
.text$mn:00002F67                 jnz     short loc_2F7F
.text$mn:00002F69                 mov     ecx, [ebp+File]
.text$mn:00002F6F                 push    ecx             ; File
.text$mn:00002F70                 call    _fclose
.text$mn:00002F75                 add     esp, 4
.text$mn:00002F78                 xor     al, al
.text$mn:00002F7A                 jmp     loc_308B
.text$mn:00002F7F ; ---------------------------------------------------------------------------
.text$mn:00002F7F
.text$mn:00002F7F loc_2F7F:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+DBj
.text$mn:00002F7F                 lea     ecx, [ebp+var_102C]
.text$mn:00002F85                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002F8A                 mov     [ebp+var_4], 0
.text$mn:00002F91                 mov     edx, [ebp+var_103C]
.text$mn:00002F97                 push    edx
.text$mn:00002F98                 lea     ecx, [ebp+var_102C]
.text$mn:00002F9E                 call    ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)
.text$mn:00002FA3                 mov     [ebp+var_1040], 800h
.text$mn:00002FAD
.text$mn:00002FAD loc_2FAD:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+152j
.text$mn:00002FAD                 mov     eax, [ebp+File]
.text$mn:00002FB3                 push    eax             ; File
.text$mn:00002FB4                 push    800h            ; SizeInWords
.text$mn:00002FB9                 lea     ecx, [ebp+Dst]
.text$mn:00002FBF                 push    ecx             ; Dst
.text$mn:00002FC0                 call    _fgetws
.text$mn:00002FC5                 add     esp, 0Ch
.text$mn:00002FC8                 test    eax, eax
.text$mn:00002FCA                 jz      short loc_2FE0
.text$mn:00002FCC                 lea     edx, [ebp+Dst]
.text$mn:00002FD2                 push    edx             ; Str
.text$mn:00002FD3                 lea     ecx, [ebp+var_102C]
.text$mn:00002FD9                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002FDE                 jmp     short loc_2FAD
.text$mn:00002FE0 ; ---------------------------------------------------------------------------
.text$mn:00002FE0
.text$mn:00002FE0 loc_2FE0:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+13Ej
.text$mn:00002FE0                 mov     eax, [ebp+File]
.text$mn:00002FE6                 push    eax             ; File
.text$mn:00002FE7                 call    _fclose
.text$mn:00002FEC                 add     esp, 4
.text$mn:00002FEF                 push    0
.text$mn:00002FF1                 lea     ecx, [ebp+var_102C]
.text$mn:00002FF7                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002FFC                 push    eax
.text$mn:00002FFD                 mov     ecx, [ebp+var_1030]
.text$mn:00003003                 mov     edx, [ecx]
.text$mn:00003005                 mov     ecx, [ebp+var_1030]
.text$mn:0000300B                 mov     eax, [edx+0Ch]
.text$mn:0000300E                 call    eax
.text$mn:00003010                 mov     ecx, [ebp+var_1030]
.text$mn:00003016                 call    ?Error@TiXmlDocument@@QBE_NXZ ; TiXmlDocument::Error(void)
.text$mn:0000301B                 movzx   ecx, al
.text$mn:0000301E                 test    ecx, ecx
.text$mn:00003020                 jz      short loc_3045
.text$mn:00003022                 mov     [ebp+var_1036], 0
.text$mn:00003029                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003030                 lea     ecx, [ebp+var_102C]
.text$mn:00003036                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000303B                 mov     al, [ebp+var_1036]
.text$mn:00003041                 jmp     short loc_308B
.text$mn:00003043 ; ---------------------------------------------------------------------------
.text$mn:00003043                 jmp     short loc_3066
.text$mn:00003045 ; ---------------------------------------------------------------------------
.text$mn:00003045
.text$mn:00003045 loc_3045:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+194j
.text$mn:00003045                 mov     [ebp+var_1035], 1
.text$mn:0000304C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003053                 lea     ecx, [ebp+var_102C]
.text$mn:00003059                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000305E                 mov     al, [ebp+var_1035]
.text$mn:00003064                 jmp     short loc_308B
.text$mn:00003066 ; ---------------------------------------------------------------------------
.text$mn:00003066
.text$mn:00003066 loc_3066:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+1B7j
.text$mn:00003066                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000306D                 lea     ecx, [ebp+var_102C]
.text$mn:00003073                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003078
.text$mn:00003078 loc_3078:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+89j
.text$mn:00003078                 push    0               ; struct TiXmlParsingData *
.text$mn:0000307A                 push    0               ; wchar_t *
.text$mn:0000307C                 push    2               ; int
.text$mn:0000307E                 mov     ecx, [ebp+var_1030] ; this
.text$mn:00003084                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00003089                 xor     al, al
.text$mn:0000308B
.text$mn:0000308B loc_308B:                               ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+EEj
.text$mn:0000308B                                         ; TiXmlDocument::LoadFile(wchar_t const *)+1B5j ...
.text$mn:0000308B                 mov     ecx, [ebp+var_C]
.text$mn:0000308E                 mov     large fs:0, ecx
.text$mn:00003095                 pop     ecx
.text$mn:00003096                 mov     ecx, [ebp+var_10]
.text$mn:00003099                 xor     ecx, ebp
.text$mn:0000309B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000030A0                 mov     esp, ebp
.text$mn:000030A2                 pop     ebp
.text$mn:000030A3                 retn    4
.text$mn:000030A3 ?LoadFile@TiXmlDocument@@QAE_NPB_W@Z endp
.text$mn:000030A3
.text$mn:000030A3 ; ---------------------------------------------------------------------------
.text$mn:000030A6                 db 6 dup(0CCh)
.text$mn:000030AC
.text$mn:000030AC ; =============== S U B R O U T I N E =======================================
.text$mn:000030AC
.text$mn:000030AC ; Attributes: bp-based frame
.text$mn:000030AC
.text$mn:000030AC ; bool __thiscall TiXmlDocument::SaveFile(TiXmlDocument *this, const wchar_t *)
.text$mn:000030AC                 public ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z
.text$mn:000030AC ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z proc near
.text$mn:000030AC                                         ; CODE XREF: TiXmlDocument::SaveFile(void)+4Bp
.text$mn:000030AC
.text$mn:000030AC var_8           = dword ptr -8
.text$mn:000030AC File            = dword ptr -4
.text$mn:000030AC Filename        = dword ptr  8
.text$mn:000030AC
.text$mn:000030AC                 push    ebp
.text$mn:000030AD                 mov     ebp, esp
.text$mn:000030AF                 sub     esp, 8
.text$mn:000030B2                 mov     [ebp+var_8], ecx
.text$mn:000030B5                 push    offset $SG96680 ; Mode
.text$mn:000030BA                 mov     eax, [ebp+Filename]
.text$mn:000030BD                 push    eax             ; Filename
.text$mn:000030BE                 call    __wfopen
.text$mn:000030C3                 add     esp, 8
.text$mn:000030C6                 mov     [ebp+File], eax
.text$mn:000030C9                 cmp     [ebp+File], 0
.text$mn:000030CD                 jz      short loc_30F2
.text$mn:000030CF                 push    0
.text$mn:000030D1                 mov     ecx, [ebp+File]
.text$mn:000030D4                 push    ecx
.text$mn:000030D5                 mov     edx, [ebp+var_8]
.text$mn:000030D8                 mov     eax, [edx]
.text$mn:000030DA                 mov     ecx, [ebp+var_8]
.text$mn:000030DD                 mov     edx, [eax+4]
.text$mn:000030E0                 call    edx
.text$mn:000030E2                 mov     eax, [ebp+File]
.text$mn:000030E5                 push    eax             ; File
.text$mn:000030E6                 call    _fclose
.text$mn:000030EB                 add     esp, 4
.text$mn:000030EE                 mov     al, 1
.text$mn:000030F0                 jmp     short loc_30F4
.text$mn:000030F2 ; ---------------------------------------------------------------------------
.text$mn:000030F2
.text$mn:000030F2 loc_30F2:                               ; CODE XREF: TiXmlDocument::SaveFile(wchar_t const *)+21j
.text$mn:000030F2                 xor     al, al
.text$mn:000030F4
.text$mn:000030F4 loc_30F4:                               ; CODE XREF: TiXmlDocument::SaveFile(wchar_t const *)+44j
.text$mn:000030F4                 mov     esp, ebp
.text$mn:000030F6                 pop     ebp
.text$mn:000030F7                 retn    4
.text$mn:000030F7 ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z endp
.text$mn:000030F7
.text$mn:000030F7 ; ---------------------------------------------------------------------------
.text$mn:000030FA                 align 4
.text$mn:000030FC
.text$mn:000030FC ; =============== S U B R O U T I N E =======================================
.text$mn:000030FC
.text$mn:000030FC ; Attributes: bp-based frame
.text$mn:000030FC
.text$mn:000030FC ; void __thiscall TiXmlDocument::Print(TiXmlDocument *this, FILE *File, int)
.text$mn:000030FC                 public ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z
.text$mn:000030FC ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000030FC                                         ; DATA XREF: .rdata:0000E558o
.text$mn:000030FC
.text$mn:000030FC var_8           = dword ptr -8
.text$mn:000030FC var_4           = dword ptr -4
.text$mn:000030FC File            = dword ptr  8
.text$mn:000030FC arg_4           = dword ptr  0Ch
.text$mn:000030FC
.text$mn:000030FC                 push    ebp
.text$mn:000030FD                 mov     ebp, esp
.text$mn:000030FF                 sub     esp, 8
.text$mn:00003102                 mov     [ebp+var_8], ecx
.text$mn:00003105                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003108                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:0000310D                 mov     [ebp+var_4], eax
.text$mn:00003110                 jmp     short loc_311D
.text$mn:00003112 ; ---------------------------------------------------------------------------
.text$mn:00003112
.text$mn:00003112 loc_3112:                               ; CODE XREF: TiXmlDocument::Print(_iobuf *,int)+4Dj
.text$mn:00003112                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003115                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:0000311A                 mov     [ebp+var_4], eax
.text$mn:0000311D
.text$mn:0000311D loc_311D:                               ; CODE XREF: TiXmlDocument::Print(_iobuf *,int)+14j
.text$mn:0000311D                 cmp     [ebp+var_4], 0
.text$mn:00003121                 jz      short loc_314B
.text$mn:00003123                 mov     eax, [ebp+arg_4]
.text$mn:00003126                 push    eax
.text$mn:00003127                 mov     ecx, [ebp+File]
.text$mn:0000312A                 push    ecx
.text$mn:0000312B                 mov     edx, [ebp+var_4]
.text$mn:0000312E                 mov     eax, [edx]
.text$mn:00003130                 mov     ecx, [ebp+var_4]
.text$mn:00003133                 mov     edx, [eax+4]
.text$mn:00003136                 call    edx
.text$mn:00003138                 push    offset $SG96704 ; Format
.text$mn:0000313D                 mov     eax, [ebp+File]
.text$mn:00003140                 push    eax             ; File
.text$mn:00003141                 call    _fwprintf
.text$mn:00003146                 add     esp, 8
.text$mn:00003149                 jmp     short loc_3112
.text$mn:0000314B ; ---------------------------------------------------------------------------
.text$mn:0000314B
.text$mn:0000314B loc_314B:                               ; CODE XREF: TiXmlDocument::Print(_iobuf *,int)+25j
.text$mn:0000314B                 mov     esp, ebp
.text$mn:0000314D                 pop     ebp
.text$mn:0000314E                 retn    8
.text$mn:0000314E ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z endp
.text$mn:0000314E
.text$mn:0000314E ; ---------------------------------------------------------------------------
.text$mn:00003151                 db 0Bh dup(0CCh)
.text$mn:0000315C
.text$mn:0000315C ; =============== S U B R O U T I N E =======================================
.text$mn:0000315C
.text$mn:0000315C ; Attributes: bp-based frame
.text$mn:0000315C
.text$mn:0000315C ; protected: virtual void __thiscall TiXmlDocument::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
.text$mn:0000315C                 public ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z
.text$mn:0000315C ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z proc near
.text$mn:0000315C                                         ; DATA XREF: .rdata:0000E55Co
.text$mn:0000315C
.text$mn:0000315C var_8           = dword ptr -8
.text$mn:0000315C var_4           = dword ptr -4
.text$mn:0000315C arg_0           = dword ptr  8
.text$mn:0000315C
.text$mn:0000315C                 push    ebp
.text$mn:0000315D                 mov     ebp, esp
.text$mn:0000315F                 sub     esp, 8
.text$mn:00003162                 mov     [ebp+var_8], ecx
.text$mn:00003165                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003168                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:0000316D                 mov     [ebp+var_4], eax
.text$mn:00003170                 jmp     short loc_317D
.text$mn:00003172 ; ---------------------------------------------------------------------------
.text$mn:00003172
.text$mn:00003172 loc_3172:                               ; CODE XREF: TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *):loc_31A2j
.text$mn:00003172                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003175                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:0000317A                 mov     [ebp+var_4], eax
.text$mn:0000317D
.text$mn:0000317D loc_317D:                               ; CODE XREF: TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+14j
.text$mn:0000317D                 cmp     [ebp+var_4], 0
.text$mn:00003181                 jz      short loc_31A4
.text$mn:00003183                 mov     eax, [ebp+arg_0]
.text$mn:00003186                 push    eax
.text$mn:00003187                 mov     ecx, [ebp+var_4]
.text$mn:0000318A                 mov     edx, [ecx]
.text$mn:0000318C                 mov     ecx, [ebp+var_4]
.text$mn:0000318F                 mov     eax, [edx+8]
.text$mn:00003192                 call    eax
.text$mn:00003194                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003197                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000319C                 test    eax, eax
.text$mn:0000319E                 jz      short loc_31A2
.text$mn:000031A0                 jmp     short loc_31A4
.text$mn:000031A2 ; ---------------------------------------------------------------------------
.text$mn:000031A2
.text$mn:000031A2 loc_31A2:                               ; CODE XREF: TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+42j
.text$mn:000031A2                 jmp     short loc_3172
.text$mn:000031A4 ; ---------------------------------------------------------------------------
.text$mn:000031A4
.text$mn:000031A4 loc_31A4:                               ; CODE XREF: TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+25j
.text$mn:000031A4                                         ; TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+44j
.text$mn:000031A4                 mov     esp, ebp
.text$mn:000031A6                 pop     ebp
.text$mn:000031A7                 retn    4
.text$mn:000031A7 ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z endp
.text$mn:000031A7
.text$mn:000031A7 ; ---------------------------------------------------------------------------
.text$mn:000031AA                 align 4
.text$mn:000031AC
.text$mn:000031AC ; =============== S U B R O U T I N E =======================================
.text$mn:000031AC
.text$mn:000031AC ; Attributes: bp-based frame
.text$mn:000031AC
.text$mn:000031AC ; struct TiXmlNode *__thiscall TiXmlDocument::Clone(TiXmlDocument *__hidden this)
.text$mn:000031AC                 public ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
.text$mn:000031AC ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ proc near
.text$mn:000031AC                                         ; DATA XREF: .rdata:0000E568o
.text$mn:000031AC
.text$mn:000031AC var_24          = dword ptr -24h
.text$mn:000031AC var_20          = dword ptr -20h
.text$mn:000031AC var_1C          = dword ptr -1Ch
.text$mn:000031AC var_18          = dword ptr -18h
.text$mn:000031AC var_14          = dword ptr -14h
.text$mn:000031AC var_10          = dword ptr -10h
.text$mn:000031AC var_C           = dword ptr -0Ch
.text$mn:000031AC var_4           = dword ptr -4
.text$mn:000031AC
.text$mn:000031AC                 push    ebp
.text$mn:000031AD                 mov     ebp, esp
.text$mn:000031AF                 push    0FFFFFFFFh
.text$mn:000031B1                 push    offset __ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
.text$mn:000031B6                 mov     eax, large fs:0
.text$mn:000031BC                 push    eax
.text$mn:000031BD                 sub     esp, 18h
.text$mn:000031C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000031C5                 xor     eax, ebp
.text$mn:000031C7                 push    eax
.text$mn:000031C8                 lea     eax, [ebp+var_C]
.text$mn:000031CB                 mov     large fs:0, eax
.text$mn:000031D1                 mov     [ebp+var_18], ecx
.text$mn:000031D4                 push    74h ; 't'       ; unsigned int
.text$mn:000031D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000031DB                 add     esp, 4
.text$mn:000031DE                 mov     [ebp+var_1C], eax
.text$mn:000031E1                 mov     [ebp+var_4], 0
.text$mn:000031E8                 cmp     [ebp+var_1C], 0
.text$mn:000031EC                 jz      short loc_31FB
.text$mn:000031EE                 mov     ecx, [ebp+var_1C]
.text$mn:000031F1                 call    ??0TiXmlDocument@@QAE@XZ ; TiXmlDocument::TiXmlDocument(void)
.text$mn:000031F6                 mov     [ebp+var_20], eax
.text$mn:000031F9                 jmp     short loc_3202
.text$mn:000031FB ; ---------------------------------------------------------------------------
.text$mn:000031FB
.text$mn:000031FB loc_31FB:                               ; CODE XREF: TiXmlDocument::Clone(void)+40j
.text$mn:000031FB                 mov     [ebp+var_20], 0
.text$mn:00003202
.text$mn:00003202 loc_3202:                               ; CODE XREF: TiXmlDocument::Clone(void)+4Dj
.text$mn:00003202                 mov     eax, [ebp+var_20]
.text$mn:00003205                 mov     [ebp+var_24], eax
.text$mn:00003208                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000320F                 mov     ecx, [ebp+var_24]
.text$mn:00003212                 mov     [ebp+var_14], ecx
.text$mn:00003215                 cmp     [ebp+var_14], 0
.text$mn:00003219                 jnz     short loc_321F
.text$mn:0000321B                 xor     eax, eax
.text$mn:0000321D                 jmp     short loc_328C
.text$mn:0000321F ; ---------------------------------------------------------------------------
.text$mn:0000321F
.text$mn:0000321F loc_321F:                               ; CODE XREF: TiXmlDocument::Clone(void)+6Dj
.text$mn:0000321F                 mov     edx, [ebp+var_14]
.text$mn:00003222                 push    edx             ; struct TiXmlNode *
.text$mn:00003223                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003226                 call    ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z ; TiXmlNode::CopyToClone(TiXmlNode *)
.text$mn:0000322B                 mov     eax, [ebp+var_14]
.text$mn:0000322E                 mov     ecx, [ebp+var_18]
.text$mn:00003231                 mov     dl, [ecx+44h]
.text$mn:00003234                 mov     [eax+44h], dl
.text$mn:00003237                 mov     ecx, [ebp+var_18]
.text$mn:0000323A                 add     ecx, 4Ch ; 'L'
.text$mn:0000323D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003242                 push    eax             ; Str
.text$mn:00003243                 mov     ecx, [ebp+var_14]
.text$mn:00003246                 add     ecx, 4Ch ; 'L'
.text$mn:00003249                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000324E                 mov     [ebp+var_10], 0
.text$mn:00003255                 mov     eax, [ebp+var_18]
.text$mn:00003258                 mov     ecx, [eax+14h]
.text$mn:0000325B                 mov     [ebp+var_10], ecx
.text$mn:0000325E                 jmp     short loc_326B
.text$mn:00003260 ; ---------------------------------------------------------------------------
.text$mn:00003260
.text$mn:00003260 loc_3260:                               ; CODE XREF: TiXmlDocument::Clone(void)+DBj
.text$mn:00003260                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003263                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:00003268                 mov     [ebp+var_10], eax
.text$mn:0000326B
.text$mn:0000326B loc_326B:                               ; CODE XREF: TiXmlDocument::Clone(void)+B2j
.text$mn:0000326B                 cmp     [ebp+var_10], 0
.text$mn:0000326F                 jz      short loc_3289
.text$mn:00003271                 mov     edx, [ebp+var_10]
.text$mn:00003274                 mov     eax, [edx]
.text$mn:00003276                 mov     ecx, [ebp+var_10]
.text$mn:00003279                 mov     edx, [eax+14h]
.text$mn:0000327C                 call    edx
.text$mn:0000327E                 push    eax             ; struct TiXmlNode *
.text$mn:0000327F                 mov     ecx, [ebp+var_14] ; this
.text$mn:00003282                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:00003287                 jmp     short loc_3260
.text$mn:00003289 ; ---------------------------------------------------------------------------
.text$mn:00003289
.text$mn:00003289 loc_3289:                               ; CODE XREF: TiXmlDocument::Clone(void)+C3j
.text$mn:00003289                 mov     eax, [ebp+var_14]
.text$mn:0000328C
.text$mn:0000328C loc_328C:                               ; CODE XREF: TiXmlDocument::Clone(void)+71j
.text$mn:0000328C                 mov     ecx, [ebp+var_C]
.text$mn:0000328F                 mov     large fs:0, ecx
.text$mn:00003296                 pop     ecx
.text$mn:00003297                 mov     esp, ebp
.text$mn:00003299                 pop     ebp
.text$mn:0000329A                 retn
.text$mn:0000329A ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ endp
.text$mn:0000329A
.text$mn:0000329A ; ---------------------------------------------------------------------------
.text$mn:0000329B                 align 4
.text$mn:0000329C
.text$mn:0000329C ; =============== S U B R O U T I N E =======================================
.text$mn:0000329C
.text$mn:0000329C ; Attributes: bp-based frame
.text$mn:0000329C
.text$mn:0000329C ; public: class TiXmlHandle __thiscall TiXmlHandle::FirstChild(void)const
.text$mn:0000329C                 public ?FirstChild@TiXmlHandle@@QBE?AV1@XZ
.text$mn:0000329C ?FirstChild@TiXmlHandle@@QBE?AV1@XZ proc near
.text$mn:0000329C
.text$mn:0000329C var_8           = dword ptr -8
.text$mn:0000329C var_4           = dword ptr -4
.text$mn:0000329C arg_0           = dword ptr  8
.text$mn:0000329C
.text$mn:0000329C                 push    ebp
.text$mn:0000329D                 mov     ebp, esp
.text$mn:0000329F                 sub     esp, 8
.text$mn:000032A2                 mov     [ebp+var_4], ecx
.text$mn:000032A5                 mov     eax, [ebp+var_4]
.text$mn:000032A8                 cmp     dword ptr [eax], 0
.text$mn:000032AB                 jz      short loc_32D1
.text$mn:000032AD                 mov     ecx, [ebp+var_4]
.text$mn:000032B0                 mov     ecx, [ecx]      ; this
.text$mn:000032B2                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:000032B7                 mov     [ebp+var_8], eax
.text$mn:000032BA                 cmp     [ebp+var_8], 0
.text$mn:000032BE                 jz      short loc_32D1
.text$mn:000032C0                 mov     edx, [ebp+var_8]
.text$mn:000032C3                 push    edx             ; struct TiXmlNode *
.text$mn:000032C4                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000032C7                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000032CC                 mov     eax, [ebp+arg_0]
.text$mn:000032CF                 jmp     short loc_32DE
.text$mn:000032D1 ; ---------------------------------------------------------------------------
.text$mn:000032D1
.text$mn:000032D1 loc_32D1:                               ; CODE XREF: TiXmlHandle::FirstChild(void)+Fj
.text$mn:000032D1                                         ; TiXmlHandle::FirstChild(void)+22j
.text$mn:000032D1                 push    0               ; struct TiXmlNode *
.text$mn:000032D3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000032D6                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000032DB                 mov     eax, [ebp+arg_0]
.text$mn:000032DE
.text$mn:000032DE loc_32DE:                               ; CODE XREF: TiXmlHandle::FirstChild(void)+33j
.text$mn:000032DE                 mov     esp, ebp
.text$mn:000032E0                 pop     ebp
.text$mn:000032E1                 retn    4
.text$mn:000032E1 ?FirstChild@TiXmlHandle@@QBE?AV1@XZ endp
.text$mn:000032E1
.text$mn:000032E1 ; ---------------------------------------------------------------------------
.text$mn:000032E4                 db 8 dup(0CCh)
.text$mn:000032EC
.text$mn:000032EC ; =============== S U B R O U T I N E =======================================
.text$mn:000032EC
.text$mn:000032EC ; Attributes: bp-based frame
.text$mn:000032EC
.text$mn:000032EC ; public: class TiXmlHandle __thiscall TiXmlHandle::FirstChild(wchar_t const *)const
.text$mn:000032EC                 public ?FirstChild@TiXmlHandle@@QBE?AV1@PB_W@Z
.text$mn:000032EC ?FirstChild@TiXmlHandle@@QBE?AV1@PB_W@Z proc near
.text$mn:000032EC
.text$mn:000032EC var_8           = dword ptr -8
.text$mn:000032EC var_4           = dword ptr -4
.text$mn:000032EC arg_0           = dword ptr  8
.text$mn:000032EC arg_4           = dword ptr  0Ch
.text$mn:000032EC
.text$mn:000032EC                 push    ebp
.text$mn:000032ED                 mov     ebp, esp
.text$mn:000032EF                 sub     esp, 8
.text$mn:000032F2                 mov     [ebp+var_4], ecx
.text$mn:000032F5                 mov     eax, [ebp+var_4]
.text$mn:000032F8                 cmp     dword ptr [eax], 0
.text$mn:000032FB                 jz      short loc_3325
.text$mn:000032FD                 mov     ecx, [ebp+arg_4]
.text$mn:00003300                 push    ecx             ; wchar_t *
.text$mn:00003301                 mov     edx, [ebp+var_4]
.text$mn:00003304                 mov     ecx, [edx]      ; this
.text$mn:00003306                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:0000330B                 mov     [ebp+var_8], eax
.text$mn:0000330E                 cmp     [ebp+var_8], 0
.text$mn:00003312                 jz      short loc_3325
.text$mn:00003314                 mov     eax, [ebp+var_8]
.text$mn:00003317                 push    eax             ; struct TiXmlNode *
.text$mn:00003318                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000331B                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:00003320                 mov     eax, [ebp+arg_0]
.text$mn:00003323                 jmp     short loc_3332
.text$mn:00003325 ; ---------------------------------------------------------------------------
.text$mn:00003325
.text$mn:00003325 loc_3325:                               ; CODE XREF: TiXmlHandle::FirstChild(wchar_t const *)+Fj
.text$mn:00003325                                         ; TiXmlHandle::FirstChild(wchar_t const *)+26j
.text$mn:00003325                 push    0               ; struct TiXmlNode *
.text$mn:00003327                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000332A                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:0000332F                 mov     eax, [ebp+arg_0]
.text$mn:00003332
.text$mn:00003332 loc_3332:                               ; CODE XREF: TiXmlHandle::FirstChild(wchar_t const *)+37j
.text$mn:00003332                 mov     esp, ebp
.text$mn:00003334                 pop     ebp
.text$mn:00003335                 retn    8
.text$mn:00003335 ?FirstChild@TiXmlHandle@@QBE?AV1@PB_W@Z endp
.text$mn:00003335
.text$mn:00003335 ; ---------------------------------------------------------------------------
.text$mn:00003338                 db 4 dup(0CCh)
.text$mn:0000333C
.text$mn:0000333C ; =============== S U B R O U T I N E =======================================
.text$mn:0000333C
.text$mn:0000333C ; Attributes: bp-based frame
.text$mn:0000333C
.text$mn:0000333C ; public: class TiXmlHandle __thiscall TiXmlHandle::FirstChildElement(void)const
.text$mn:0000333C                 public ?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ
.text$mn:0000333C ?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ proc near
.text$mn:0000333C
.text$mn:0000333C var_8           = dword ptr -8
.text$mn:0000333C var_4           = dword ptr -4
.text$mn:0000333C arg_0           = dword ptr  8
.text$mn:0000333C
.text$mn:0000333C                 push    ebp
.text$mn:0000333D                 mov     ebp, esp
.text$mn:0000333F                 sub     esp, 8
.text$mn:00003342                 mov     [ebp+var_4], ecx
.text$mn:00003345                 mov     eax, [ebp+var_4]
.text$mn:00003348                 cmp     dword ptr [eax], 0
.text$mn:0000334B                 jz      short loc_3371
.text$mn:0000334D                 mov     ecx, [ebp+var_4]
.text$mn:00003350                 mov     ecx, [ecx]      ; this
.text$mn:00003352                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement(void)
.text$mn:00003357                 mov     [ebp+var_8], eax
.text$mn:0000335A                 cmp     [ebp+var_8], 0
.text$mn:0000335E                 jz      short loc_3371
.text$mn:00003360                 mov     edx, [ebp+var_8]
.text$mn:00003363                 push    edx             ; struct TiXmlNode *
.text$mn:00003364                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003367                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:0000336C                 mov     eax, [ebp+arg_0]
.text$mn:0000336F                 jmp     short loc_337E
.text$mn:00003371 ; ---------------------------------------------------------------------------
.text$mn:00003371
.text$mn:00003371 loc_3371:                               ; CODE XREF: TiXmlHandle::FirstChildElement(void)+Fj
.text$mn:00003371                                         ; TiXmlHandle::FirstChildElement(void)+22j
.text$mn:00003371                 push    0               ; struct TiXmlNode *
.text$mn:00003373                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003376                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:0000337B                 mov     eax, [ebp+arg_0]
.text$mn:0000337E
.text$mn:0000337E loc_337E:                               ; CODE XREF: TiXmlHandle::FirstChildElement(void)+33j
.text$mn:0000337E                 mov     esp, ebp
.text$mn:00003380                 pop     ebp
.text$mn:00003381                 retn    4
.text$mn:00003381 ?FirstChildElement@TiXmlHandle@@QBE?AV1@XZ endp
.text$mn:00003381
.text$mn:00003381 ; ---------------------------------------------------------------------------
.text$mn:00003384                 db 8 dup(0CCh)
.text$mn:0000338C
.text$mn:0000338C ; =============== S U B R O U T I N E =======================================
.text$mn:0000338C
.text$mn:0000338C ; Attributes: bp-based frame
.text$mn:0000338C
.text$mn:0000338C ; public: class TiXmlHandle __thiscall TiXmlHandle::FirstChildElement(wchar_t const *)const
.text$mn:0000338C                 public ?FirstChildElement@TiXmlHandle@@QBE?AV1@PB_W@Z
.text$mn:0000338C ?FirstChildElement@TiXmlHandle@@QBE?AV1@PB_W@Z proc near
.text$mn:0000338C
.text$mn:0000338C var_8           = dword ptr -8
.text$mn:0000338C var_4           = dword ptr -4
.text$mn:0000338C arg_0           = dword ptr  8
.text$mn:0000338C arg_4           = dword ptr  0Ch
.text$mn:0000338C
.text$mn:0000338C                 push    ebp
.text$mn:0000338D                 mov     ebp, esp
.text$mn:0000338F                 sub     esp, 8
.text$mn:00003392                 mov     [ebp+var_4], ecx
.text$mn:00003395                 mov     eax, [ebp+var_4]
.text$mn:00003398                 cmp     dword ptr [eax], 0
.text$mn:0000339B                 jz      short loc_33C5
.text$mn:0000339D                 mov     ecx, [ebp+arg_4]
.text$mn:000033A0                 push    ecx             ; wchar_t *
.text$mn:000033A1                 mov     edx, [ebp+var_4]
.text$mn:000033A4                 mov     ecx, [edx]      ; this
.text$mn:000033A6                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000033AB                 mov     [ebp+var_8], eax
.text$mn:000033AE                 cmp     [ebp+var_8], 0
.text$mn:000033B2                 jz      short loc_33C5
.text$mn:000033B4                 mov     eax, [ebp+var_8]
.text$mn:000033B7                 push    eax             ; struct TiXmlNode *
.text$mn:000033B8                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000033BB                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000033C0                 mov     eax, [ebp+arg_0]
.text$mn:000033C3                 jmp     short loc_33D2
.text$mn:000033C5 ; ---------------------------------------------------------------------------
.text$mn:000033C5
.text$mn:000033C5 loc_33C5:                               ; CODE XREF: TiXmlHandle::FirstChildElement(wchar_t const *)+Fj
.text$mn:000033C5                                         ; TiXmlHandle::FirstChildElement(wchar_t const *)+26j
.text$mn:000033C5                 push    0               ; struct TiXmlNode *
.text$mn:000033C7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000033CA                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000033CF                 mov     eax, [ebp+arg_0]
.text$mn:000033D2
.text$mn:000033D2 loc_33D2:                               ; CODE XREF: TiXmlHandle::FirstChildElement(wchar_t const *)+37j
.text$mn:000033D2                 mov     esp, ebp
.text$mn:000033D4                 pop     ebp
.text$mn:000033D5                 retn    8
.text$mn:000033D5 ?FirstChildElement@TiXmlHandle@@QBE?AV1@PB_W@Z endp
.text$mn:000033D5
.text$mn:000033D5 ; ---------------------------------------------------------------------------
.text$mn:000033D8                 db 4 dup(0CCh)
.text$mn:000033DC
.text$mn:000033DC ; =============== S U B R O U T I N E =======================================
.text$mn:000033DC
.text$mn:000033DC ; Attributes: bp-based frame
.text$mn:000033DC
.text$mn:000033DC ; public: class TiXmlHandle __thiscall TiXmlHandle::Child(wchar_t const *, int)const
.text$mn:000033DC                 public ?Child@TiXmlHandle@@QBE?AV1@PB_WH@Z
.text$mn:000033DC ?Child@TiXmlHandle@@QBE?AV1@PB_WH@Z proc near
.text$mn:000033DC
.text$mn:000033DC var_C           = dword ptr -0Ch
.text$mn:000033DC var_8           = dword ptr -8
.text$mn:000033DC var_4           = dword ptr -4
.text$mn:000033DC arg_0           = dword ptr  8
.text$mn:000033DC arg_4           = dword ptr  0Ch
.text$mn:000033DC arg_8           = dword ptr  10h
.text$mn:000033DC
.text$mn:000033DC                 push    ebp
.text$mn:000033DD                 mov     ebp, esp
.text$mn:000033DF                 sub     esp, 0Ch
.text$mn:000033E2                 mov     [ebp+var_C], ecx
.text$mn:000033E5                 mov     eax, [ebp+var_C]
.text$mn:000033E8                 cmp     dword ptr [eax], 0
.text$mn:000033EB                 jz      short loc_3446
.text$mn:000033ED                 mov     ecx, [ebp+arg_4]
.text$mn:000033F0                 push    ecx             ; wchar_t *
.text$mn:000033F1                 mov     edx, [ebp+var_C]
.text$mn:000033F4                 mov     ecx, [edx]      ; this
.text$mn:000033F6                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000033FB                 mov     [ebp+var_4], eax
.text$mn:000033FE                 mov     [ebp+var_8], 0
.text$mn:00003405                 jmp     short loc_341F
.text$mn:00003407 ; ---------------------------------------------------------------------------
.text$mn:00003407
.text$mn:00003407 loc_3407:                               ; CODE XREF: TiXmlHandle::Child(wchar_t const *,int)+51j
.text$mn:00003407                 mov     eax, [ebp+arg_4]
.text$mn:0000340A                 push    eax             ; wchar_t *
.text$mn:0000340B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000340E                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00003413                 mov     [ebp+var_4], eax
.text$mn:00003416                 mov     ecx, [ebp+var_8]
.text$mn:00003419                 add     ecx, 1
.text$mn:0000341C                 mov     [ebp+var_8], ecx
.text$mn:0000341F
.text$mn:0000341F loc_341F:                               ; CODE XREF: TiXmlHandle::Child(wchar_t const *,int)+29j
.text$mn:0000341F                 cmp     [ebp+var_4], 0
.text$mn:00003423                 jz      short loc_342F
.text$mn:00003425                 mov     edx, [ebp+var_8]
.text$mn:00003428                 cmp     edx, [ebp+arg_8]
.text$mn:0000342B                 jge     short loc_342F
.text$mn:0000342D                 jmp     short loc_3407
.text$mn:0000342F ; ---------------------------------------------------------------------------
.text$mn:0000342F
.text$mn:0000342F loc_342F:                               ; CODE XREF: TiXmlHandle::Child(wchar_t const *,int)+47j
.text$mn:0000342F                                         ; TiXmlHandle::Child(wchar_t const *,int)+4Fj
.text$mn:0000342F                 cmp     [ebp+var_4], 0
.text$mn:00003433                 jz      short loc_3446
.text$mn:00003435                 mov     eax, [ebp+var_4]
.text$mn:00003438                 push    eax             ; struct TiXmlNode *
.text$mn:00003439                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000343C                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:00003441                 mov     eax, [ebp+arg_0]
.text$mn:00003444                 jmp     short loc_3453
.text$mn:00003446 ; ---------------------------------------------------------------------------
.text$mn:00003446
.text$mn:00003446 loc_3446:                               ; CODE XREF: TiXmlHandle::Child(wchar_t const *,int)+Fj
.text$mn:00003446                                         ; TiXmlHandle::Child(wchar_t const *,int)+57j
.text$mn:00003446                 push    0               ; struct TiXmlNode *
.text$mn:00003448                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000344B                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:00003450                 mov     eax, [ebp+arg_0]
.text$mn:00003453
.text$mn:00003453 loc_3453:                               ; CODE XREF: TiXmlHandle::Child(wchar_t const *,int)+68j
.text$mn:00003453                 mov     esp, ebp
.text$mn:00003455                 pop     ebp
.text$mn:00003456                 retn    0Ch
.text$mn:00003456 ?Child@TiXmlHandle@@QBE?AV1@PB_WH@Z endp
.text$mn:00003456
.text$mn:00003456 ; ---------------------------------------------------------------------------
.text$mn:00003459                 align 4
.text$mn:0000345C
.text$mn:0000345C ; =============== S U B R O U T I N E =======================================
.text$mn:0000345C
.text$mn:0000345C ; Attributes: bp-based frame
.text$mn:0000345C
.text$mn:0000345C ; public: class TiXmlHandle __thiscall TiXmlHandle::Child(int)const
.text$mn:0000345C                 public ?Child@TiXmlHandle@@QBE?AV1@H@Z
.text$mn:0000345C ?Child@TiXmlHandle@@QBE?AV1@H@Z proc near
.text$mn:0000345C
.text$mn:0000345C var_C           = dword ptr -0Ch
.text$mn:0000345C var_8           = dword ptr -8
.text$mn:0000345C var_4           = dword ptr -4
.text$mn:0000345C arg_0           = dword ptr  8
.text$mn:0000345C arg_4           = dword ptr  0Ch
.text$mn:0000345C
.text$mn:0000345C                 push    ebp
.text$mn:0000345D                 mov     ebp, esp
.text$mn:0000345F                 sub     esp, 0Ch
.text$mn:00003462                 mov     [ebp+var_C], ecx
.text$mn:00003465                 mov     eax, [ebp+var_C]
.text$mn:00003468                 cmp     dword ptr [eax], 0
.text$mn:0000346B                 jz      short loc_34BE
.text$mn:0000346D                 mov     ecx, [ebp+var_C]
.text$mn:00003470                 mov     ecx, [ecx]      ; this
.text$mn:00003472                 call    ?FirstChild@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::FirstChild(void)
.text$mn:00003477                 mov     [ebp+var_4], eax
.text$mn:0000347A                 mov     [ebp+var_8], 0
.text$mn:00003481                 jmp     short loc_3497
.text$mn:00003483 ; ---------------------------------------------------------------------------
.text$mn:00003483
.text$mn:00003483 loc_3483:                               ; CODE XREF: TiXmlHandle::Child(int)+49j
.text$mn:00003483                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003486                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:0000348B                 mov     [ebp+var_4], eax
.text$mn:0000348E                 mov     edx, [ebp+var_8]
.text$mn:00003491                 add     edx, 1
.text$mn:00003494                 mov     [ebp+var_8], edx
.text$mn:00003497
.text$mn:00003497 loc_3497:                               ; CODE XREF: TiXmlHandle::Child(int)+25j
.text$mn:00003497                 cmp     [ebp+var_4], 0
.text$mn:0000349B                 jz      short loc_34A7
.text$mn:0000349D                 mov     eax, [ebp+var_8]
.text$mn:000034A0                 cmp     eax, [ebp+arg_4]
.text$mn:000034A3                 jge     short loc_34A7
.text$mn:000034A5                 jmp     short loc_3483
.text$mn:000034A7 ; ---------------------------------------------------------------------------
.text$mn:000034A7
.text$mn:000034A7 loc_34A7:                               ; CODE XREF: TiXmlHandle::Child(int)+3Fj
.text$mn:000034A7                                         ; TiXmlHandle::Child(int)+47j
.text$mn:000034A7                 cmp     [ebp+var_4], 0
.text$mn:000034AB                 jz      short loc_34BE
.text$mn:000034AD                 mov     ecx, [ebp+var_4]
.text$mn:000034B0                 push    ecx             ; struct TiXmlNode *
.text$mn:000034B1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000034B4                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000034B9                 mov     eax, [ebp+arg_0]
.text$mn:000034BC                 jmp     short loc_34CB
.text$mn:000034BE ; ---------------------------------------------------------------------------
.text$mn:000034BE
.text$mn:000034BE loc_34BE:                               ; CODE XREF: TiXmlHandle::Child(int)+Fj
.text$mn:000034BE                                         ; TiXmlHandle::Child(int)+4Fj
.text$mn:000034BE                 push    0               ; struct TiXmlNode *
.text$mn:000034C0                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000034C3                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000034C8                 mov     eax, [ebp+arg_0]
.text$mn:000034CB
.text$mn:000034CB loc_34CB:                               ; CODE XREF: TiXmlHandle::Child(int)+60j
.text$mn:000034CB                 mov     esp, ebp
.text$mn:000034CD                 pop     ebp
.text$mn:000034CE                 retn    8
.text$mn:000034CE ?Child@TiXmlHandle@@QBE?AV1@H@Z endp
.text$mn:000034CE
.text$mn:000034CE ; ---------------------------------------------------------------------------
.text$mn:000034D1                 db 0Bh dup(0CCh)
.text$mn:000034DC
.text$mn:000034DC ; =============== S U B R O U T I N E =======================================
.text$mn:000034DC
.text$mn:000034DC ; Attributes: bp-based frame
.text$mn:000034DC
.text$mn:000034DC ; public: class TiXmlHandle __thiscall TiXmlHandle::ChildElement(wchar_t const *, int)const
.text$mn:000034DC                 public ?ChildElement@TiXmlHandle@@QBE?AV1@PB_WH@Z
.text$mn:000034DC ?ChildElement@TiXmlHandle@@QBE?AV1@PB_WH@Z proc near
.text$mn:000034DC
.text$mn:000034DC var_C           = dword ptr -0Ch
.text$mn:000034DC var_8           = dword ptr -8
.text$mn:000034DC var_4           = dword ptr -4
.text$mn:000034DC arg_0           = dword ptr  8
.text$mn:000034DC arg_4           = dword ptr  0Ch
.text$mn:000034DC arg_8           = dword ptr  10h
.text$mn:000034DC
.text$mn:000034DC                 push    ebp
.text$mn:000034DD                 mov     ebp, esp
.text$mn:000034DF                 sub     esp, 0Ch
.text$mn:000034E2                 mov     [ebp+var_C], ecx
.text$mn:000034E5                 mov     eax, [ebp+var_C]
.text$mn:000034E8                 cmp     dword ptr [eax], 0
.text$mn:000034EB                 jz      short loc_3546
.text$mn:000034ED                 mov     ecx, [ebp+arg_4]
.text$mn:000034F0                 push    ecx             ; wchar_t *
.text$mn:000034F1                 mov     edx, [ebp+var_C]
.text$mn:000034F4                 mov     ecx, [edx]      ; this
.text$mn:000034F6                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000034FB                 mov     [ebp+var_4], eax
.text$mn:000034FE                 mov     [ebp+var_8], 0
.text$mn:00003505                 jmp     short loc_351F
.text$mn:00003507 ; ---------------------------------------------------------------------------
.text$mn:00003507
.text$mn:00003507 loc_3507:                               ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+51j
.text$mn:00003507                 mov     eax, [ebp+arg_4]
.text$mn:0000350A                 push    eax             ; wchar_t *
.text$mn:0000350B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000350E                 call    ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::NextSiblingElement(wchar_t const *)
.text$mn:00003513                 mov     [ebp+var_4], eax
.text$mn:00003516                 mov     ecx, [ebp+var_8]
.text$mn:00003519                 add     ecx, 1
.text$mn:0000351C                 mov     [ebp+var_8], ecx
.text$mn:0000351F
.text$mn:0000351F loc_351F:                               ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+29j
.text$mn:0000351F                 cmp     [ebp+var_4], 0
.text$mn:00003523                 jz      short loc_352F
.text$mn:00003525                 mov     edx, [ebp+var_8]
.text$mn:00003528                 cmp     edx, [ebp+arg_8]
.text$mn:0000352B                 jge     short loc_352F
.text$mn:0000352D                 jmp     short loc_3507
.text$mn:0000352F ; ---------------------------------------------------------------------------
.text$mn:0000352F
.text$mn:0000352F loc_352F:                               ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+47j
.text$mn:0000352F                                         ; TiXmlHandle::ChildElement(wchar_t const *,int)+4Fj
.text$mn:0000352F                 cmp     [ebp+var_4], 0
.text$mn:00003533                 jz      short loc_3546
.text$mn:00003535                 mov     eax, [ebp+var_4]
.text$mn:00003538                 push    eax             ; struct TiXmlNode *
.text$mn:00003539                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000353C                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:00003541                 mov     eax, [ebp+arg_0]
.text$mn:00003544                 jmp     short loc_3553
.text$mn:00003546 ; ---------------------------------------------------------------------------
.text$mn:00003546
.text$mn:00003546 loc_3546:                               ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+Fj
.text$mn:00003546                                         ; TiXmlHandle::ChildElement(wchar_t const *,int)+57j
.text$mn:00003546                 push    0               ; struct TiXmlNode *
.text$mn:00003548                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000354B                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:00003550                 mov     eax, [ebp+arg_0]
.text$mn:00003553
.text$mn:00003553 loc_3553:                               ; CODE XREF: TiXmlHandle::ChildElement(wchar_t const *,int)+68j
.text$mn:00003553                 mov     esp, ebp
.text$mn:00003555                 pop     ebp
.text$mn:00003556                 retn    0Ch
.text$mn:00003556 ?ChildElement@TiXmlHandle@@QBE?AV1@PB_WH@Z endp
.text$mn:00003556
.text$mn:00003556 ; ---------------------------------------------------------------------------
.text$mn:00003559                 align 4
.text$mn:0000355C
.text$mn:0000355C ; =============== S U B R O U T I N E =======================================
.text$mn:0000355C
.text$mn:0000355C ; Attributes: bp-based frame
.text$mn:0000355C
.text$mn:0000355C ; public: class TiXmlHandle __thiscall TiXmlHandle::ChildElement(int)const
.text$mn:0000355C                 public ?ChildElement@TiXmlHandle@@QBE?AV1@H@Z
.text$mn:0000355C ?ChildElement@TiXmlHandle@@QBE?AV1@H@Z proc near
.text$mn:0000355C
.text$mn:0000355C var_C           = dword ptr -0Ch
.text$mn:0000355C var_8           = dword ptr -8
.text$mn:0000355C var_4           = dword ptr -4
.text$mn:0000355C arg_0           = dword ptr  8
.text$mn:0000355C arg_4           = dword ptr  0Ch
.text$mn:0000355C
.text$mn:0000355C                 push    ebp
.text$mn:0000355D                 mov     ebp, esp
.text$mn:0000355F                 sub     esp, 0Ch
.text$mn:00003562                 mov     [ebp+var_C], ecx
.text$mn:00003565                 mov     eax, [ebp+var_C]
.text$mn:00003568                 cmp     dword ptr [eax], 0
.text$mn:0000356B                 jz      short loc_35BE
.text$mn:0000356D                 mov     ecx, [ebp+var_C]
.text$mn:00003570                 mov     ecx, [ecx]      ; this
.text$mn:00003572                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement(void)
.text$mn:00003577                 mov     [ebp+var_4], eax
.text$mn:0000357A                 mov     [ebp+var_8], 0
.text$mn:00003581                 jmp     short loc_3597
.text$mn:00003583 ; ---------------------------------------------------------------------------
.text$mn:00003583
.text$mn:00003583 loc_3583:                               ; CODE XREF: TiXmlHandle::ChildElement(int)+49j
.text$mn:00003583                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003586                 call    ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::NextSiblingElement(void)
.text$mn:0000358B                 mov     [ebp+var_4], eax
.text$mn:0000358E                 mov     edx, [ebp+var_8]
.text$mn:00003591                 add     edx, 1
.text$mn:00003594                 mov     [ebp+var_8], edx
.text$mn:00003597
.text$mn:00003597 loc_3597:                               ; CODE XREF: TiXmlHandle::ChildElement(int)+25j
.text$mn:00003597                 cmp     [ebp+var_4], 0
.text$mn:0000359B                 jz      short loc_35A7
.text$mn:0000359D                 mov     eax, [ebp+var_8]
.text$mn:000035A0                 cmp     eax, [ebp+arg_4]
.text$mn:000035A3                 jge     short loc_35A7
.text$mn:000035A5                 jmp     short loc_3583
.text$mn:000035A7 ; ---------------------------------------------------------------------------
.text$mn:000035A7
.text$mn:000035A7 loc_35A7:                               ; CODE XREF: TiXmlHandle::ChildElement(int)+3Fj
.text$mn:000035A7                                         ; TiXmlHandle::ChildElement(int)+47j
.text$mn:000035A7                 cmp     [ebp+var_4], 0
.text$mn:000035AB                 jz      short loc_35BE
.text$mn:000035AD                 mov     ecx, [ebp+var_4]
.text$mn:000035B0                 push    ecx             ; struct TiXmlNode *
.text$mn:000035B1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000035B4                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000035B9                 mov     eax, [ebp+arg_0]
.text$mn:000035BC                 jmp     short loc_35CB
.text$mn:000035BE ; ---------------------------------------------------------------------------
.text$mn:000035BE
.text$mn:000035BE loc_35BE:                               ; CODE XREF: TiXmlHandle::ChildElement(int)+Fj
.text$mn:000035BE                                         ; TiXmlHandle::ChildElement(int)+4Fj
.text$mn:000035BE                 push    0               ; struct TiXmlNode *
.text$mn:000035C0                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000035C3                 call    ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z ; TiXmlHandle::TiXmlHandle(TiXmlNode *)
.text$mn:000035C8                 mov     eax, [ebp+arg_0]
.text$mn:000035CB
.text$mn:000035CB loc_35CB:                               ; CODE XREF: TiXmlHandle::ChildElement(int)+60j
.text$mn:000035CB                 mov     esp, ebp
.text$mn:000035CD                 pop     ebp
.text$mn:000035CE                 retn    8
.text$mn:000035CE ?ChildElement@TiXmlHandle@@QBE?AV1@H@Z endp
.text$mn:000035CE
.text$mn:000035CE ; ---------------------------------------------------------------------------
.text$mn:000035D1                 align 4
.text$mn:000035D1 _text$mn        ends
.text$mn:000035D1
.text$x:000035D4 ; ===========================================================================
.text$x:000035D4
.text$x:000035D4 ; Segment type: Pure code
.text$x:000035D4 ; Segment permissions: Read/Execute
.text$x:000035D4 _text$x         segment para public 'CODE' use32
.text$x:000035D4                 assume cs:_text$x
.text$x:000035D4                 ;org 35D4h
.text$x:000035D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000035D4
.text$x:000035D4 ; =============== S U B R O U T I N E =======================================
.text$x:000035D4
.text$x:000035D4
.text$x:000035D4 __unwindfunclet$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z$0 proc near
.text$x:000035D4                                         ; DATA XREF: .xdata$x:0000D4A4o
.text$x:000035D4                 lea     ecx, [ebp-2Ch]
.text$x:000035D7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000035D7 __unwindfunclet$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z$0 endp
.text$x:000035D7
.text$x:000035DC
.text$x:000035DC ; =============== S U B R O U T I N E =======================================
.text$x:000035DC
.text$x:000035DC
.text$x:000035DC __ehhandler$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z proc near
.text$x:000035DC                                         ; DATA XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+5o
.text$x:000035DC
.text$x:000035DC arg_4           = dword ptr  8
.text$x:000035DC
.text$x:000035DC                 mov     edx, [esp+arg_4]
.text$x:000035E0                 lea     eax, [edx+0Ch]
.text$x:000035E3                 mov     ecx, [edx-24h]
.text$x:000035E6                 xor     ecx, eax
.text$x:000035E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035ED                 mov     ecx, [edx-4]
.text$x:000035F0                 xor     ecx, eax
.text$x:000035F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035F7                 mov     eax, offset __ehfuncinfo$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z
.text$x:000035FC                 jmp     ___CxxFrameHandler3
.text$x:000035FC __ehhandler$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z endp
.text$x:000035FC
.text$x:00003601
.text$x:00003601 ; =============== S U B R O U T I N E =======================================
.text$x:00003601
.text$x:00003601
.text$x:00003601 __unwindfunclet$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z$0 proc near
.text$x:00003601                                         ; DATA XREF: .xdata$x:0000D49Co
.text$x:00003601                 lea     ecx, [ebp-2Ch]
.text$x:00003604                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003604 __unwindfunclet$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z$0 endp
.text$x:00003604
.text$x:00003609
.text$x:00003609 ; =============== S U B R O U T I N E =======================================
.text$x:00003609
.text$x:00003609
.text$x:00003609 __ehhandler$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z proc near
.text$x:00003609                                         ; DATA XREF: operator>>(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,TiXmlNode &)+5o
.text$x:00003609
.text$x:00003609 arg_4           = dword ptr  8
.text$x:00003609
.text$x:00003609                 mov     edx, [esp+arg_4]
.text$x:0000360D                 lea     eax, [edx+0Ch]
.text$x:00003610                 mov     ecx, [edx-28h]
.text$x:00003613                 xor     ecx, eax
.text$x:00003615                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000361A                 mov     ecx, [edx-4]
.text$x:0000361D                 xor     ecx, eax
.text$x:0000361F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003624                 mov     eax, offset __ehfuncinfo$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z
.text$x:00003629                 jmp     ___CxxFrameHandler3
.text$x:00003629 __ehhandler$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z endp
.text$x:00003629
.text$x:0000362E
.text$x:0000362E ; =============== S U B R O U T I N E =======================================
.text$x:0000362E
.text$x:0000362E
.text$x:0000362E __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$0 proc near
.text$x:0000362E                                         ; DATA XREF: .xdata$x:0000D54Co
.text$x:0000362E                 lea     ecx, [ebp-0D0h]
.text$x:00003634                 jmp     ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vbase destructor(void)
.text$x:00003634 __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$0 endp
.text$x:00003634
.text$x:00003639
.text$x:00003639 ; =============== S U B R O U T I N E =======================================
.text$x:00003639
.text$x:00003639
.text$x:00003639 __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$1 proc near
.text$x:00003639                                         ; DATA XREF: .xdata$x:0000D554o
.text$x:00003639                 lea     ecx, [ebp-2Ch]
.text$x:0000363C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000363C __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$1 endp
.text$x:0000363C
.text$x:00003641
.text$x:00003641 ; =============== S U B R O U T I N E =======================================
.text$x:00003641
.text$x:00003641
.text$x:00003641 __ehhandler$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z proc near
.text$x:00003641                                         ; DATA XREF: operator<<(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,TiXmlNode const &)+5o
.text$x:00003641
.text$x:00003641 arg_4           = dword ptr  8
.text$x:00003641
.text$x:00003641                 mov     edx, [esp+arg_4]
.text$x:00003645                 lea     eax, [edx+0Ch]
.text$x:00003648                 mov     ecx, [edx-0C8h]
.text$x:0000364E                 xor     ecx, eax
.text$x:00003650                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003655                 mov     ecx, [edx-4]
.text$x:00003658                 xor     ecx, eax
.text$x:0000365A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000365F                 mov     eax, offset __ehfuncinfo$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z
.text$x:00003664                 jmp     ___CxxFrameHandler3
.text$x:00003664 __ehhandler$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z endp
.text$x:00003664
.text$x:00003669
.text$x:00003669 ; =============== S U B R O U T I N E =======================================
.text$x:00003669
.text$x:00003669
.text$x:00003669 __unwindfunclet$??1TiXmlNode@@UAE@XZ$0 proc near
.text$x:00003669                                         ; DATA XREF: .xdata$x:0000D53Co
.text$x:00003669                 mov     ecx, [ebp-14h]  ; this
.text$x:0000366C                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:0000366C __unwindfunclet$??1TiXmlNode@@UAE@XZ$0 endp
.text$x:0000366C
.text$x:00003671
.text$x:00003671 ; =============== S U B R O U T I N E =======================================
.text$x:00003671
.text$x:00003671
.text$x:00003671 __unwindfunclet$??1TiXmlNode@@UAE@XZ$1 proc near
.text$x:00003671                                         ; DATA XREF: .xdata$x:0000D544o
.text$x:00003671                 mov     ecx, [ebp-14h]
.text$x:00003674                 add     ecx, 1Ch
.text$x:00003677                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003677 __unwindfunclet$??1TiXmlNode@@UAE@XZ$1 endp
.text$x:00003677
.text$x:0000367C
.text$x:0000367C ; =============== S U B R O U T I N E =======================================
.text$x:0000367C
.text$x:0000367C
.text$x:0000367C __ehhandler$??1TiXmlNode@@UAE@XZ proc near
.text$x:0000367C                                         ; DATA XREF: TiXmlNode::~TiXmlNode(void)+5o
.text$x:0000367C
.text$x:0000367C arg_4           = dword ptr  8
.text$x:0000367C
.text$x:0000367C                 mov     edx, [esp+arg_4]
.text$x:00003680                 lea     eax, [edx+0Ch]
.text$x:00003683                 mov     ecx, [edx-1Ch]
.text$x:00003686                 xor     ecx, eax
.text$x:00003688                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000368D                 mov     eax, offset __ehfuncinfo$??1TiXmlNode@@UAE@XZ
.text$x:00003692                 jmp     ___CxxFrameHandler3
.text$x:00003692 __ehhandler$??1TiXmlNode@@UAE@XZ endp
.text$x:00003692
.text$x:00003697
.text$x:00003697 ; =============== S U B R O U T I N E =======================================
.text$x:00003697
.text$x:00003697
.text$x:00003697 __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$0 proc near
.text$x:00003697                                         ; DATA XREF: .xdata$x:0000D52Co
.text$x:00003697                 lea     ecx, [ebp-2Ch]
.text$x:0000369A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000369A __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$0 endp
.text$x:0000369A
.text$x:0000369F
.text$x:0000369F ; =============== S U B R O U T I N E =======================================
.text$x:0000369F
.text$x:0000369F
.text$x:0000369F __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$1 proc near
.text$x:0000369F                                         ; DATA XREF: .xdata$x:0000D534o
.text$x:0000369F                 lea     ecx, [ebp-48h]
.text$x:000036A2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000036A2 __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$1 endp
.text$x:000036A2
.text$x:000036A7
.text$x:000036A7 ; =============== S U B R O U T I N E =======================================
.text$x:000036A7
.text$x:000036A7
.text$x:000036A7 __ehhandler$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$x:000036A7                                         ; DATA XREF: TiXmlNode::FirstChild(wchar_t const *)+5o
.text$x:000036A7
.text$x:000036A7 arg_4           = dword ptr  8
.text$x:000036A7
.text$x:000036A7                 mov     edx, [esp+arg_4]
.text$x:000036AB                 lea     eax, [edx+0Ch]
.text$x:000036AE                 mov     ecx, [edx-5Ch]
.text$x:000036B1                 xor     ecx, eax
.text$x:000036B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036B8                 mov     ecx, [edx-4]
.text$x:000036BB                 xor     ecx, eax
.text$x:000036BD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036C2                 mov     eax, offset __ehfuncinfo$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$x:000036C7                 jmp     ___CxxFrameHandler3
.text$x:000036C7 __ehhandler$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$x:000036C7
.text$x:000036CC
.text$x:000036CC ; =============== S U B R O U T I N E =======================================
.text$x:000036CC
.text$x:000036CC
.text$x:000036CC __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$0 proc near
.text$x:000036CC                                         ; DATA XREF: .xdata$x:0000D51Co
.text$x:000036CC                 lea     ecx, [ebp-2Ch]
.text$x:000036CF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000036CF __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$0 endp
.text$x:000036CF
.text$x:000036D4
.text$x:000036D4 ; =============== S U B R O U T I N E =======================================
.text$x:000036D4
.text$x:000036D4
.text$x:000036D4 __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$1 proc near
.text$x:000036D4                                         ; DATA XREF: .xdata$x:0000D524o
.text$x:000036D4                 lea     ecx, [ebp-48h]
.text$x:000036D7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000036D7 __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$1 endp
.text$x:000036D7
.text$x:000036DC
.text$x:000036DC ; =============== S U B R O U T I N E =======================================
.text$x:000036DC
.text$x:000036DC
.text$x:000036DC __ehhandler$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$x:000036DC                                         ; DATA XREF: TiXmlNode::LastChild(wchar_t const *)+5o
.text$x:000036DC
.text$x:000036DC arg_4           = dword ptr  8
.text$x:000036DC
.text$x:000036DC                 mov     edx, [esp+arg_4]
.text$x:000036E0                 lea     eax, [edx+0Ch]
.text$x:000036E3                 mov     ecx, [edx-5Ch]
.text$x:000036E6                 xor     ecx, eax
.text$x:000036E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036ED                 mov     ecx, [edx-4]
.text$x:000036F0                 xor     ecx, eax
.text$x:000036F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036F7                 mov     eax, offset __ehfuncinfo$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z
.text$x:000036FC                 jmp     ___CxxFrameHandler3
.text$x:000036FC __ehhandler$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$x:000036FC
.text$x:00003701
.text$x:00003701 ; =============== S U B R O U T I N E =======================================
.text$x:00003701
.text$x:00003701
.text$x:00003701 __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0 proc near
.text$x:00003701                                         ; DATA XREF: .xdata$x:0000D50Co
.text$x:00003701                 lea     ecx, [ebp-2Ch]
.text$x:00003704                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003704 __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0 endp
.text$x:00003704
.text$x:00003709
.text$x:00003709 ; =============== S U B R O U T I N E =======================================
.text$x:00003709
.text$x:00003709
.text$x:00003709 __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1 proc near
.text$x:00003709                                         ; DATA XREF: .xdata$x:0000D514o
.text$x:00003709                 lea     ecx, [ebp-48h]
.text$x:0000370C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000370C __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1 endp
.text$x:0000370C
.text$x:00003711
.text$x:00003711 ; =============== S U B R O U T I N E =======================================
.text$x:00003711
.text$x:00003711
.text$x:00003711 __ehhandler$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$x:00003711                                         ; DATA XREF: TiXmlNode::PreviousSibling(wchar_t const *)+5o
.text$x:00003711
.text$x:00003711 arg_4           = dword ptr  8
.text$x:00003711
.text$x:00003711                 mov     edx, [esp+arg_4]
.text$x:00003715                 lea     eax, [edx+0Ch]
.text$x:00003718                 mov     ecx, [edx-5Ch]
.text$x:0000371B                 xor     ecx, eax
.text$x:0000371D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003722                 mov     ecx, [edx-4]
.text$x:00003725                 xor     ecx, eax
.text$x:00003727                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000372C                 mov     eax, offset __ehfuncinfo$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$x:00003731                 jmp     ___CxxFrameHandler3
.text$x:00003731 __ehhandler$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$x:00003731
.text$x:00003736
.text$x:00003736 ; =============== S U B R O U T I N E =======================================
.text$x:00003736
.text$x:00003736
.text$x:00003736 __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0 proc near
.text$x:00003736                                         ; DATA XREF: .xdata$x:0000D4FCo
.text$x:00003736                 lea     ecx, [ebp-2Ch]
.text$x:00003739                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003739 __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0 endp
.text$x:00003739
.text$x:0000373E
.text$x:0000373E ; =============== S U B R O U T I N E =======================================
.text$x:0000373E
.text$x:0000373E
.text$x:0000373E __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1 proc near
.text$x:0000373E                                         ; DATA XREF: .xdata$x:0000D504o
.text$x:0000373E                 lea     ecx, [ebp-48h]
.text$x:00003741                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003741 __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1 endp
.text$x:00003741
.text$x:00003746
.text$x:00003746 ; =============== S U B R O U T I N E =======================================
.text$x:00003746
.text$x:00003746
.text$x:00003746 __ehhandler$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z proc near
.text$x:00003746                                         ; DATA XREF: TiXmlNode::NextSibling(wchar_t const *)+5o
.text$x:00003746
.text$x:00003746 arg_4           = dword ptr  8
.text$x:00003746
.text$x:00003746                 mov     edx, [esp+arg_4]
.text$x:0000374A                 lea     eax, [edx+0Ch]
.text$x:0000374D                 mov     ecx, [edx-5Ch]
.text$x:00003750                 xor     ecx, eax
.text$x:00003752                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003757                 mov     ecx, [edx-4]
.text$x:0000375A                 xor     ecx, eax
.text$x:0000375C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003761                 mov     eax, offset __ehfuncinfo$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.text$x:00003766                 jmp     ___CxxFrameHandler3
.text$x:00003766 __ehhandler$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z endp
.text$x:00003766
.text$x:0000376B
.text$x:0000376B ; =============== S U B R O U T I N E =======================================
.text$x:0000376B
.text$x:0000376B
.text$x:0000376B __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$0 proc near
.text$x:0000376B                                         ; DATA XREF: .xdata$x:0000D4ECo
.text$x:0000376B                 mov     ecx, [ebp-10h]  ; this
.text$x:0000376E                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:0000376E __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$0 endp
.text$x:0000376E
.text$x:00003773
.text$x:00003773 ; =============== S U B R O U T I N E =======================================
.text$x:00003773
.text$x:00003773
.text$x:00003773 __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$1 proc near
.text$x:00003773                                         ; DATA XREF: .xdata$x:0000D4F4o
.text$x:00003773                 mov     ecx, [ebp-10h]
.text$x:00003776                 add     ecx, 1Ch
.text$x:00003779                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003779 __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$1 endp
.text$x:00003779
.text$x:0000377E
.text$x:0000377E ; =============== S U B R O U T I N E =======================================
.text$x:0000377E
.text$x:0000377E
.text$x:0000377E __ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z proc near
.text$x:0000377E                                         ; DATA XREF: TiXmlNode::TiXmlNode(TiXmlNode::NodeType)+5o
.text$x:0000377E
.text$x:0000377E arg_4           = dword ptr  8
.text$x:0000377E
.text$x:0000377E                 mov     edx, [esp+arg_4]
.text$x:00003782                 lea     eax, [edx+0Ch]
.text$x:00003785                 mov     ecx, [edx-8]
.text$x:00003788                 xor     ecx, eax
.text$x:0000378A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000378F                 mov     eax, offset __ehfuncinfo$??0TiXmlNode@@IAE@W4NodeType@0@@Z
.text$x:00003794                 jmp     ___CxxFrameHandler3
.text$x:00003794 __ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z endp
.text$x:00003794
.text$x:00003799
.text$x:00003799 ; =============== S U B R O U T I N E =======================================
.text$x:00003799
.text$x:00003799
.text$x:00003799 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$0 proc near
.text$x:00003799                                         ; DATA XREF: .xdata$x:0000D57Co
.text$x:00003799                 lea     ecx, [ebp-2Ch]
.text$x:0000379C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000379C __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$0 endp
.text$x:0000379C
.text$x:000037A1
.text$x:000037A1 ; =============== S U B R O U T I N E =======================================
.text$x:000037A1
.text$x:000037A1
.text$x:000037A1 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$1 proc near
.text$x:000037A1                                         ; DATA XREF: .xdata$x:0000D584o
.text$x:000037A1                 lea     ecx, [ebp-48h]
.text$x:000037A4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000037A4 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$1 endp
.text$x:000037A4
.text$x:000037A9
.text$x:000037A9 ; =============== S U B R O U T I N E =======================================
.text$x:000037A9
.text$x:000037A9
.text$x:000037A9 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$2 proc near
.text$x:000037A9                                         ; DATA XREF: .xdata$x:0000D58Co
.text$x:000037A9                 lea     ecx, [ebp-80h]
.text$x:000037AC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000037AC __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$2 endp
.text$x:000037AC
.text$x:000037B1
.text$x:000037B1 ; =============== S U B R O U T I N E =======================================
.text$x:000037B1
.text$x:000037B1
.text$x:000037B1 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$3 proc near
.text$x:000037B1                                         ; DATA XREF: .xdata$x:0000D594o
.text$x:000037B1                 lea     ecx, [ebp-64h]
.text$x:000037B4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000037B4 __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$3 endp
.text$x:000037B4
.text$x:000037B9
.text$x:000037B9 ; =============== S U B R O U T I N E =======================================
.text$x:000037B9
.text$x:000037B9
.text$x:000037B9 __ehhandler$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z proc near
.text$x:000037B9                                         ; DATA XREF: TiXmlAttribute::Print(_iobuf *,int)+5o
.text$x:000037B9
.text$x:000037B9 arg_4           = dword ptr  8
.text$x:000037B9
.text$x:000037B9                 mov     edx, [esp+arg_4]
.text$x:000037BD                 lea     eax, [edx+0Ch]
.text$x:000037C0                 mov     ecx, [edx-7Ch]
.text$x:000037C3                 xor     ecx, eax
.text$x:000037C5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037CA                 mov     ecx, [edx-4]
.text$x:000037CD                 xor     ecx, eax
.text$x:000037CF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037D4                 mov     eax, offset __ehfuncinfo$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
.text$x:000037D9                 jmp     ___CxxFrameHandler3
.text$x:000037D9 __ehhandler$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z endp
.text$x:000037D9
.text$x:000037DE
.text$x:000037DE ; =============== S U B R O U T I N E =======================================
.text$x:000037DE
.text$x:000037DE
.text$x:000037DE __unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0 proc near
.text$x:000037DE                                         ; DATA XREF: .xdata$x:0000D494o
.text$x:000037DE                 mov     ecx, [ebp-10h]  ; this
.text$x:000037E1                 jmp     ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$x:000037E1 __unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0 endp
.text$x:000037E1
.text$x:000037E6
.text$x:000037E6 ; =============== S U B R O U T I N E =======================================
.text$x:000037E6
.text$x:000037E6
.text$x:000037E6 __ehhandler$??0TiXmlAttributeSet@@QAE@XZ proc near
.text$x:000037E6                                         ; DATA XREF: TiXmlAttributeSet::TiXmlAttributeSet(void)+5o
.text$x:000037E6
.text$x:000037E6 arg_4           = dword ptr  8
.text$x:000037E6
.text$x:000037E6                 mov     edx, [esp+arg_4]
.text$x:000037EA                 lea     eax, [edx+0Ch]
.text$x:000037ED                 mov     ecx, [edx-8]
.text$x:000037F0                 xor     ecx, eax
.text$x:000037F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037F7                 mov     eax, offset __ehfuncinfo$??0TiXmlAttributeSet@@QAE@XZ
.text$x:000037FC                 jmp     ___CxxFrameHandler3
.text$x:000037FC __ehhandler$??0TiXmlAttributeSet@@QAE@XZ endp
.text$x:000037FC
.text$x:00003801
.text$x:00003801 ; =============== S U B R O U T I N E =======================================
.text$x:00003801
.text$x:00003801
.text$x:00003801 __unwindfunclet$??1TiXmlAttributeSet@@QAE@XZ$0 proc near
.text$x:00003801                                         ; DATA XREF: .xdata$x:0000D48Co
.text$x:00003801                 mov     ecx, [ebp-10h]  ; this
.text$x:00003804                 jmp     ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$x:00003804 __unwindfunclet$??1TiXmlAttributeSet@@QAE@XZ$0 endp
.text$x:00003804
.text$x:00003809
.text$x:00003809 ; =============== S U B R O U T I N E =======================================
.text$x:00003809
.text$x:00003809
.text$x:00003809 __ehhandler$??1TiXmlAttributeSet@@QAE@XZ proc near
.text$x:00003809                                         ; DATA XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+5o
.text$x:00003809
.text$x:00003809 arg_4           = dword ptr  8
.text$x:00003809
.text$x:00003809                 mov     edx, [esp+arg_4]
.text$x:0000380D                 lea     eax, [edx+0Ch]
.text$x:00003810                 mov     ecx, [edx-8]
.text$x:00003813                 xor     ecx, eax
.text$x:00003815                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000381A                 mov     eax, offset __ehfuncinfo$??1TiXmlAttributeSet@@QAE@XZ
.text$x:0000381F                 jmp     ___CxxFrameHandler3
.text$x:0000381F __ehhandler$??1TiXmlAttributeSet@@QAE@XZ endp
.text$x:0000381F
.text$x:00003824
.text$x:00003824 ; =============== S U B R O U T I N E =======================================
.text$x:00003824
.text$x:00003824
.text$x:00003824 __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$0 proc near
.text$x:00003824                                         ; DATA XREF: .xdata$x:0000D4DCo
.text$x:00003824                 mov     ecx, [ebp-10h]  ; this
.text$x:00003827                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00003827 __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$0 endp
.text$x:00003827
.text$x:0000382C
.text$x:0000382C ; =============== S U B R O U T I N E =======================================
.text$x:0000382C
.text$x:0000382C
.text$x:0000382C __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$1 proc near
.text$x:0000382C                                         ; DATA XREF: .xdata$x:0000D4E4o
.text$x:0000382C                 mov     ecx, [ebp-10h]
.text$x:0000382F                 add     ecx, 44h ; 'D'  ; this
.text$x:00003832                 jmp     ??1TiXmlAttributeSet@@QAE@XZ ; TiXmlAttributeSet::~TiXmlAttributeSet(void)
.text$x:00003832 __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$1 endp
.text$x:00003832
.text$x:00003837
.text$x:00003837 ; =============== S U B R O U T I N E =======================================
.text$x:00003837
.text$x:00003837
.text$x:00003837 __ehhandler$??0TiXmlElement@@QAE@PB_W@Z proc near
.text$x:00003837                                         ; DATA XREF: TiXmlElement::TiXmlElement(wchar_t const *)+5o
.text$x:00003837
.text$x:00003837 arg_4           = dword ptr  8
.text$x:00003837
.text$x:00003837                 mov     edx, [esp+arg_4]
.text$x:0000383B                 lea     eax, [edx+0Ch]
.text$x:0000383E                 mov     ecx, [edx-8]
.text$x:00003841                 xor     ecx, eax
.text$x:00003843                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003848                 mov     eax, offset __ehfuncinfo$??0TiXmlElement@@QAE@PB_W@Z
.text$x:0000384D                 jmp     ___CxxFrameHandler3
.text$x:0000384D __ehhandler$??0TiXmlElement@@QAE@PB_W@Z endp
.text$x:0000384D
.text$x:00003852
.text$x:00003852 ; =============== S U B R O U T I N E =======================================
.text$x:00003852
.text$x:00003852
.text$x:00003852 __unwindfunclet$??1TiXmlElement@@UAE@XZ$0 proc near
.text$x:00003852                                         ; DATA XREF: .xdata$x:0000D4CCo
.text$x:00003852                 mov     ecx, [ebp-10h]  ; this
.text$x:00003855                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00003855 __unwindfunclet$??1TiXmlElement@@UAE@XZ$0 endp
.text$x:00003855
.text$x:0000385A
.text$x:0000385A ; =============== S U B R O U T I N E =======================================
.text$x:0000385A
.text$x:0000385A
.text$x:0000385A __unwindfunclet$??1TiXmlElement@@UAE@XZ$1 proc near
.text$x:0000385A                                         ; DATA XREF: .xdata$x:0000D4D4o
.text$x:0000385A                 mov     ecx, [ebp-10h]
.text$x:0000385D                 add     ecx, 44h ; 'D'  ; this
.text$x:00003860                 jmp     ??1TiXmlAttributeSet@@QAE@XZ ; TiXmlAttributeSet::~TiXmlAttributeSet(void)
.text$x:00003860 __unwindfunclet$??1TiXmlElement@@UAE@XZ$1 endp
.text$x:00003860
.text$x:00003865
.text$x:00003865 ; =============== S U B R O U T I N E =======================================
.text$x:00003865
.text$x:00003865
.text$x:00003865 __ehhandler$??1TiXmlElement@@UAE@XZ proc near
.text$x:00003865                                         ; DATA XREF: TiXmlElement::~TiXmlElement(void)+5o
.text$x:00003865
.text$x:00003865 arg_4           = dword ptr  8
.text$x:00003865
.text$x:00003865                 mov     edx, [esp+arg_4]
.text$x:00003869                 lea     eax, [edx+0Ch]
.text$x:0000386C                 mov     ecx, [edx-18h]
.text$x:0000386F                 xor     ecx, eax
.text$x:00003871                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003876                 mov     eax, offset __ehfuncinfo$??1TiXmlElement@@UAE@XZ
.text$x:0000387B                 jmp     ___CxxFrameHandler3
.text$x:0000387B __ehhandler$??1TiXmlElement@@UAE@XZ endp
.text$x:0000387B
.text$x:00003880
.text$x:00003880 ; =============== S U B R O U T I N E =======================================
.text$x:00003880
.text$x:00003880
.text$x:00003880 __unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z$0 proc near
.text$x:00003880                                         ; DATA XREF: .xdata$x:0000D484o
.text$x:00003880                 mov     eax, [ebp-18h]
.text$x:00003883                 push    eax             ; void *
.text$x:00003884                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003889                 pop     ecx
.text$x:0000388A                 retn
.text$x:0000388A __unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z$0 endp
.text$x:0000388A
.text$x:0000388B
.text$x:0000388B ; =============== S U B R O U T I N E =======================================
.text$x:0000388B
.text$x:0000388B
.text$x:0000388B __ehhandler$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z proc near
.text$x:0000388B                                         ; DATA XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+5o
.text$x:0000388B
.text$x:0000388B arg_4           = dword ptr  8
.text$x:0000388B
.text$x:0000388B                 mov     edx, [esp+arg_4]
.text$x:0000388F                 lea     eax, [edx+0Ch]
.text$x:00003892                 mov     ecx, [edx-20h]
.text$x:00003895                 xor     ecx, eax
.text$x:00003897                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000389C                 mov     eax, offset __ehfuncinfo$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z
.text$x:000038A1                 jmp     ___CxxFrameHandler3
.text$x:000038A1 __ehhandler$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z endp
.text$x:000038A1
.text$x:000038A6
.text$x:000038A6 ; =============== S U B R O U T I N E =======================================
.text$x:000038A6
.text$x:000038A6
.text$x:000038A6 __unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0 proc near
.text$x:000038A6                                         ; DATA XREF: .xdata$x:0000D47Co
.text$x:000038A6                 mov     eax, [ebp-20h]
.text$x:000038A9                 push    eax             ; void *
.text$x:000038AA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000038AF                 pop     ecx
.text$x:000038B0                 retn
.text$x:000038B0 __unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0 endp
.text$x:000038B0
.text$x:000038B1
.text$x:000038B1 ; =============== S U B R O U T I N E =======================================
.text$x:000038B1
.text$x:000038B1
.text$x:000038B1 __ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ proc near
.text$x:000038B1                                         ; DATA XREF: TiXmlElement::Clone(void)+5o
.text$x:000038B1
.text$x:000038B1 arg_4           = dword ptr  8
.text$x:000038B1
.text$x:000038B1                 mov     edx, [esp+arg_4]
.text$x:000038B5                 lea     eax, [edx+0Ch]
.text$x:000038B8                 mov     ecx, [edx-20h]
.text$x:000038BB                 xor     ecx, eax
.text$x:000038BD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038C2                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
.text$x:000038C7                 jmp     ___CxxFrameHandler3
.text$x:000038C7 __ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ endp
.text$x:000038C7
.text$x:000038CC
.text$x:000038CC ; =============== S U B R O U T I N E =======================================
.text$x:000038CC
.text$x:000038CC
.text$x:000038CC __unwindfunclet$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ$0 proc near
.text$x:000038CC                                         ; DATA XREF: .xdata$x:0000D474o
.text$x:000038CC                 mov     eax, [ebp-14h]
.text$x:000038CF                 push    eax             ; void *
.text$x:000038D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000038D5                 pop     ecx
.text$x:000038D6                 retn
.text$x:000038D6 __unwindfunclet$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ$0 endp
.text$x:000038D6
.text$x:000038D7
.text$x:000038D7 ; =============== S U B R O U T I N E =======================================
.text$x:000038D7
.text$x:000038D7
.text$x:000038D7 __ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ proc near
.text$x:000038D7                                         ; DATA XREF: TiXmlComment::Clone(void)+5o
.text$x:000038D7
.text$x:000038D7 arg_4           = dword ptr  8
.text$x:000038D7
.text$x:000038D7                 mov     edx, [esp+arg_4]
.text$x:000038DB                 lea     eax, [edx+0Ch]
.text$x:000038DE                 mov     ecx, [edx-18h]
.text$x:000038E1                 xor     ecx, eax
.text$x:000038E3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038E8                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
.text$x:000038ED                 jmp     ___CxxFrameHandler3
.text$x:000038ED __ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ endp
.text$x:000038ED
.text$x:000038F2
.text$x:000038F2 ; =============== S U B R O U T I N E =======================================
.text$x:000038F2
.text$x:000038F2
.text$x:000038F2 __unwindfunclet$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z$0 proc near
.text$x:000038F2                                         ; DATA XREF: .xdata$x:0000D46Co
.text$x:000038F2                 lea     ecx, [ebp-2Ch]
.text$x:000038F5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000038F5 __unwindfunclet$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z$0 endp
.text$x:000038F5
.text$x:000038FA
.text$x:000038FA ; =============== S U B R O U T I N E =======================================
.text$x:000038FA
.text$x:000038FA
.text$x:000038FA __ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z proc near
.text$x:000038FA                                         ; DATA XREF: TiXmlText::Print(_iobuf *,int)+5o
.text$x:000038FA
.text$x:000038FA arg_4           = dword ptr  8
.text$x:000038FA
.text$x:000038FA                 mov     edx, [esp+arg_4]
.text$x:000038FE                 lea     eax, [edx+0Ch]
.text$x:00003901                 mov     ecx, [edx-28h]
.text$x:00003904                 xor     ecx, eax
.text$x:00003906                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000390B                 mov     ecx, [edx-4]
.text$x:0000390E                 xor     ecx, eax
.text$x:00003910                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003915                 mov     eax, offset __ehfuncinfo$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
.text$x:0000391A                 jmp     ___CxxFrameHandler3
.text$x:0000391A __ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z endp
.text$x:0000391A
.text$x:0000391F
.text$x:0000391F ; =============== S U B R O U T I N E =======================================
.text$x:0000391F
.text$x:0000391F
.text$x:0000391F __unwindfunclet$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ$0 proc near
.text$x:0000391F                                         ; DATA XREF: .xdata$x:0000D464o
.text$x:0000391F                 mov     eax, [ebp-14h]
.text$x:00003922                 push    eax             ; void *
.text$x:00003923                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003928                 pop     ecx
.text$x:00003929                 retn
.text$x:00003929 __unwindfunclet$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ$0 endp
.text$x:00003929
.text$x:0000392A
.text$x:0000392A ; =============== S U B R O U T I N E =======================================
.text$x:0000392A
.text$x:0000392A
.text$x:0000392A __ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ proc near
.text$x:0000392A                                         ; DATA XREF: TiXmlText::Clone(void)+5o
.text$x:0000392A
.text$x:0000392A arg_4           = dword ptr  8
.text$x:0000392A
.text$x:0000392A                 mov     edx, [esp+arg_4]
.text$x:0000392E                 lea     eax, [edx+0Ch]
.text$x:00003931                 mov     ecx, [edx-18h]
.text$x:00003934                 xor     ecx, eax
.text$x:00003936                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000393B                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
.text$x:00003940                 jmp     ___CxxFrameHandler3
.text$x:00003940 __ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ endp
.text$x:00003940
.text$x:00003945
.text$x:00003945 ; =============== S U B R O U T I N E =======================================
.text$x:00003945
.text$x:00003945
.text$x:00003945 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$0 proc near
.text$x:00003945                                         ; DATA XREF: .xdata$x:0000D55Co
.text$x:00003945                 mov     ecx, [ebp-10h]  ; this
.text$x:00003948                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00003948 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$0 endp
.text$x:00003948
.text$x:0000394D
.text$x:0000394D ; =============== S U B R O U T I N E =======================================
.text$x:0000394D
.text$x:0000394D
.text$x:0000394D __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$1 proc near
.text$x:0000394D                                         ; DATA XREF: .xdata$x:0000D564o
.text$x:0000394D                 mov     ecx, [ebp-10h]
.text$x:00003950                 add     ecx, 44h ; 'D'
.text$x:00003953                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003953 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$1 endp
.text$x:00003953
.text$x:00003958
.text$x:00003958 ; =============== S U B R O U T I N E =======================================
.text$x:00003958
.text$x:00003958
.text$x:00003958 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$2 proc near
.text$x:00003958                                         ; DATA XREF: .xdata$x:0000D56Co
.text$x:00003958                 mov     ecx, [ebp-10h]
.text$x:0000395B                 add     ecx, 60h ; '`'
.text$x:0000395E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000395E __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$2 endp
.text$x:0000395E
.text$x:00003963
.text$x:00003963 ; =============== S U B R O U T I N E =======================================
.text$x:00003963
.text$x:00003963
.text$x:00003963 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$3 proc near
.text$x:00003963                                         ; DATA XREF: .xdata$x:0000D574o
.text$x:00003963                 mov     ecx, [ebp-10h]
.text$x:00003966                 add     ecx, 7Ch ; '|'
.text$x:00003969                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003969 __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$3 endp
.text$x:00003969
.text$x:0000396E
.text$x:0000396E ; =============== S U B R O U T I N E =======================================
.text$x:0000396E
.text$x:0000396E
.text$x:0000396E __ehhandler$??0TiXmlDeclaration@@QAE@PB_W00@Z proc near
.text$x:0000396E                                         ; DATA XREF: TiXmlDeclaration::TiXmlDeclaration(wchar_t const *,wchar_t const *,wchar_t const *)+5o
.text$x:0000396E
.text$x:0000396E arg_4           = dword ptr  8
.text$x:0000396E
.text$x:0000396E                 mov     edx, [esp+arg_4]
.text$x:00003972                 lea     eax, [edx+0Ch]
.text$x:00003975                 mov     ecx, [edx-8]
.text$x:00003978                 xor     ecx, eax
.text$x:0000397A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000397F                 mov     eax, offset __ehfuncinfo$??0TiXmlDeclaration@@QAE@PB_W00@Z
.text$x:00003984                 jmp     ___CxxFrameHandler3
.text$x:00003984 __ehhandler$??0TiXmlDeclaration@@QAE@PB_W00@Z endp
.text$x:00003984
.text$x:00003989
.text$x:00003989 ; =============== S U B R O U T I N E =======================================
.text$x:00003989
.text$x:00003989
.text$x:00003989 __unwindfunclet$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ$0 proc near
.text$x:00003989                                         ; DATA XREF: .xdata$x:0000D45Co
.text$x:00003989                 mov     eax, [ebp-18h]
.text$x:0000398C                 push    eax             ; void *
.text$x:0000398D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003992                 pop     ecx
.text$x:00003993                 retn
.text$x:00003993 __unwindfunclet$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ$0 endp
.text$x:00003993
.text$x:00003994
.text$x:00003994 ; =============== S U B R O U T I N E =======================================
.text$x:00003994
.text$x:00003994
.text$x:00003994 __ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ proc near
.text$x:00003994                                         ; DATA XREF: TiXmlDeclaration::Clone(void)+5o
.text$x:00003994
.text$x:00003994 arg_4           = dword ptr  8
.text$x:00003994
.text$x:00003994                 mov     edx, [esp+arg_4]
.text$x:00003998                 lea     eax, [edx+0Ch]
.text$x:0000399B                 mov     ecx, [edx-18h]
.text$x:0000399E                 xor     ecx, eax
.text$x:000039A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039A5                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
.text$x:000039AA                 jmp     ___CxxFrameHandler3
.text$x:000039AA __ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ endp
.text$x:000039AA
.text$x:000039AF
.text$x:000039AF ; =============== S U B R O U T I N E =======================================
.text$x:000039AF
.text$x:000039AF
.text$x:000039AF __unwindfunclet$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ$0 proc near
.text$x:000039AF                                         ; DATA XREF: .xdata$x:0000D454o
.text$x:000039AF                 mov     eax, [ebp-14h]
.text$x:000039B2                 push    eax             ; void *
.text$x:000039B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000039B8                 pop     ecx
.text$x:000039B9                 retn
.text$x:000039B9 __unwindfunclet$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ$0 endp
.text$x:000039B9
.text$x:000039BA
.text$x:000039BA ; =============== S U B R O U T I N E =======================================
.text$x:000039BA
.text$x:000039BA
.text$x:000039BA __ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ proc near
.text$x:000039BA                                         ; DATA XREF: TiXmlUnknown::Clone(void)+5o
.text$x:000039BA
.text$x:000039BA arg_4           = dword ptr  8
.text$x:000039BA
.text$x:000039BA                 mov     edx, [esp+arg_4]
.text$x:000039BE                 lea     eax, [edx+0Ch]
.text$x:000039C1                 mov     ecx, [edx-18h]
.text$x:000039C4                 xor     ecx, eax
.text$x:000039C6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039CB                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
.text$x:000039D0                 jmp     ___CxxFrameHandler3
.text$x:000039D0 __ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ endp
.text$x:000039D0
.text$x:000039D5
.text$x:000039D5 ; =============== S U B R O U T I N E =======================================
.text$x:000039D5
.text$x:000039D5
.text$x:000039D5 __unwindfunclet$??0TiXmlDocument@@QAE@XZ$0 proc near
.text$x:000039D5                                         ; DATA XREF: .xdata$x:0000D4BCo
.text$x:000039D5                 mov     ecx, [ebp-10h]  ; this
.text$x:000039D8                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:000039D8 __unwindfunclet$??0TiXmlDocument@@QAE@XZ$0 endp
.text$x:000039D8
.text$x:000039DD
.text$x:000039DD ; =============== S U B R O U T I N E =======================================
.text$x:000039DD
.text$x:000039DD
.text$x:000039DD __unwindfunclet$??0TiXmlDocument@@QAE@XZ$1 proc near
.text$x:000039DD                                         ; DATA XREF: .xdata$x:0000D4C4o
.text$x:000039DD                 mov     ecx, [ebp-10h]
.text$x:000039E0                 add     ecx, 4Ch ; 'L'
.text$x:000039E3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000039E3 __unwindfunclet$??0TiXmlDocument@@QAE@XZ$1 endp
.text$x:000039E3
.text$x:000039E8
.text$x:000039E8 ; =============== S U B R O U T I N E =======================================
.text$x:000039E8
.text$x:000039E8
.text$x:000039E8 __ehhandler$??0TiXmlDocument@@QAE@XZ proc near
.text$x:000039E8                                         ; DATA XREF: TiXmlDocument::TiXmlDocument(void)+5o
.text$x:000039E8
.text$x:000039E8 arg_4           = dword ptr  8
.text$x:000039E8
.text$x:000039E8                 mov     edx, [esp+arg_4]
.text$x:000039EC                 lea     eax, [edx+0Ch]
.text$x:000039EF                 mov     ecx, [edx-8]
.text$x:000039F2                 xor     ecx, eax
.text$x:000039F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039F9                 mov     eax, offset __ehfuncinfo$??0TiXmlDocument@@QAE@XZ
.text$x:000039FE                 jmp     ___CxxFrameHandler3
.text$x:000039FE __ehhandler$??0TiXmlDocument@@QAE@XZ endp
.text$x:000039FE
.text$x:00003A03
.text$x:00003A03 ; =============== S U B R O U T I N E =======================================
.text$x:00003A03
.text$x:00003A03
.text$x:00003A03 __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$0 proc near
.text$x:00003A03                                         ; DATA XREF: .xdata$x:0000D4ACo
.text$x:00003A03                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A06                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00003A06 __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$0 endp
.text$x:00003A06
.text$x:00003A0B
.text$x:00003A0B ; =============== S U B R O U T I N E =======================================
.text$x:00003A0B
.text$x:00003A0B
.text$x:00003A0B __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$1 proc near
.text$x:00003A0B                                         ; DATA XREF: .xdata$x:0000D4B4o
.text$x:00003A0B                 mov     ecx, [ebp-10h]
.text$x:00003A0E                 add     ecx, 4Ch ; 'L'
.text$x:00003A11                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003A11 __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$1 endp
.text$x:00003A11
.text$x:00003A16
.text$x:00003A16 ; =============== S U B R O U T I N E =======================================
.text$x:00003A16
.text$x:00003A16
.text$x:00003A16 __ehhandler$??0TiXmlDocument@@QAE@PB_W@Z proc near
.text$x:00003A16                                         ; DATA XREF: TiXmlDocument::TiXmlDocument(wchar_t const *)+5o
.text$x:00003A16
.text$x:00003A16 arg_4           = dword ptr  8
.text$x:00003A16
.text$x:00003A16                 mov     edx, [esp+arg_4]
.text$x:00003A1A                 lea     eax, [edx+0Ch]
.text$x:00003A1D                 mov     ecx, [edx-8]
.text$x:00003A20                 xor     ecx, eax
.text$x:00003A22                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A27                 mov     eax, offset __ehfuncinfo$??0TiXmlDocument@@QAE@PB_W@Z
.text$x:00003A2C                 jmp     ___CxxFrameHandler3
.text$x:00003A2C __ehhandler$??0TiXmlDocument@@QAE@PB_W@Z endp
.text$x:00003A2C
.text$x:00003A31
.text$x:00003A31 ; =============== S U B R O U T I N E =======================================
.text$x:00003A31
.text$x:00003A31
.text$x:00003A31 __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NXZ$0 proc near
.text$x:00003A31                                         ; DATA XREF: .xdata$x:0000D44Co
.text$x:00003A31                 lea     ecx, [ebp-14h]  ; this
.text$x:00003A34                 jmp     ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$x:00003A34 __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NXZ$0 endp
.text$x:00003A34
.text$x:00003A39
.text$x:00003A39 ; =============== S U B R O U T I N E =======================================
.text$x:00003A39
.text$x:00003A39
.text$x:00003A39 __ehhandler$?LoadFile@TiXmlDocument@@QAE_NXZ proc near
.text$x:00003A39                                         ; DATA XREF: TiXmlDocument::LoadFile(void)+5o
.text$x:00003A39
.text$x:00003A39 arg_4           = dword ptr  8
.text$x:00003A39
.text$x:00003A39                 mov     edx, [esp+arg_4]
.text$x:00003A3D                 lea     eax, [edx+0Ch]
.text$x:00003A40                 mov     ecx, [edx-10h]
.text$x:00003A43                 xor     ecx, eax
.text$x:00003A45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A4A                 mov     eax, offset __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NXZ
.text$x:00003A4F                 jmp     ___CxxFrameHandler3
.text$x:00003A4F __ehhandler$?LoadFile@TiXmlDocument@@QAE_NXZ endp
.text$x:00003A4F
.text$x:00003A54
.text$x:00003A54 ; =============== S U B R O U T I N E =======================================
.text$x:00003A54
.text$x:00003A54
.text$x:00003A54 __unwindfunclet$?SaveFile@TiXmlDocument@@QBE_NXZ$0 proc near
.text$x:00003A54                                         ; DATA XREF: .xdata$x:0000D444o
.text$x:00003A54                 lea     ecx, [ebp-14h]  ; this
.text$x:00003A57                 jmp     ??1StringToBuffer@TiXmlBase@@QAE@XZ ; TiXmlBase::StringToBuffer::~StringToBuffer(void)
.text$x:00003A57 __unwindfunclet$?SaveFile@TiXmlDocument@@QBE_NXZ$0 endp
.text$x:00003A57
.text$x:00003A5C
.text$x:00003A5C ; =============== S U B R O U T I N E =======================================
.text$x:00003A5C
.text$x:00003A5C
.text$x:00003A5C __ehhandler$?SaveFile@TiXmlDocument@@QBE_NXZ proc near
.text$x:00003A5C                                         ; DATA XREF: TiXmlDocument::SaveFile(void)+5o
.text$x:00003A5C
.text$x:00003A5C arg_4           = dword ptr  8
.text$x:00003A5C
.text$x:00003A5C                 mov     edx, [esp+arg_4]
.text$x:00003A60                 lea     eax, [edx+0Ch]
.text$x:00003A63                 mov     ecx, [edx-10h]
.text$x:00003A66                 xor     ecx, eax
.text$x:00003A68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A6D                 mov     eax, offset __ehfuncinfo$?SaveFile@TiXmlDocument@@QBE_NXZ
.text$x:00003A72                 jmp     ___CxxFrameHandler3
.text$x:00003A72 __ehhandler$?SaveFile@TiXmlDocument@@QBE_NXZ endp
.text$x:00003A72
.text$x:00003A77
.text$x:00003A77 ; =============== S U B R O U T I N E =======================================
.text$x:00003A77
.text$x:00003A77
.text$x:00003A77 __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z$0 proc near
.text$x:00003A77                                         ; DATA XREF: .xdata$x:0000D43Co
.text$x:00003A77                 lea     ecx, [ebp-102Ch]
.text$x:00003A7D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003A7D __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z$0 endp
.text$x:00003A7D
.text$x:00003A82
.text$x:00003A82 ; =============== S U B R O U T I N E =======================================
.text$x:00003A82
.text$x:00003A82
.text$x:00003A82 __ehhandler$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z proc near
.text$x:00003A82                                         ; DATA XREF: TiXmlDocument::LoadFile(wchar_t const *)+5o
.text$x:00003A82
.text$x:00003A82 arg_4           = dword ptr  8
.text$x:00003A82
.text$x:00003A82                 mov     edx, [esp+arg_4]
.text$x:00003A86                 lea     eax, [edx+0Ch]
.text$x:00003A89                 mov     ecx, [edx-1038h]
.text$x:00003A8F                 xor     ecx, eax
.text$x:00003A91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A96                 mov     ecx, [edx-4]
.text$x:00003A99                 xor     ecx, eax
.text$x:00003A9B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AA0                 mov     eax, offset __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z
.text$x:00003AA5                 jmp     ___CxxFrameHandler3
.text$x:00003AA5 __ehhandler$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z endp
.text$x:00003AA5
.text$x:00003AAA
.text$x:00003AAA ; =============== S U B R O U T I N E =======================================
.text$x:00003AAA
.text$x:00003AAA
.text$x:00003AAA __unwindfunclet$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ$0 proc near
.text$x:00003AAA                                         ; DATA XREF: .xdata$x:0000D434o
.text$x:00003AAA                 mov     eax, [ebp-1Ch]
.text$x:00003AAD                 push    eax             ; void *
.text$x:00003AAE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003AB3                 pop     ecx
.text$x:00003AB4                 retn
.text$x:00003AB4 __unwindfunclet$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ$0 endp
.text$x:00003AB4
.text$x:00003AB5
.text$x:00003AB5 ; =============== S U B R O U T I N E =======================================
.text$x:00003AB5
.text$x:00003AB5
.text$x:00003AB5 __ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ proc near
.text$x:00003AB5                                         ; DATA XREF: TiXmlDocument::Clone(void)+5o
.text$x:00003AB5
.text$x:00003AB5 arg_4           = dword ptr  8
.text$x:00003AB5
.text$x:00003AB5                 mov     edx, [esp+arg_4]
.text$x:00003AB9                 lea     eax, [edx+0Ch]
.text$x:00003ABC                 mov     ecx, [edx-1Ch]
.text$x:00003ABF                 xor     ecx, eax
.text$x:00003AC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AC6                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
.text$x:00003ACB                 jmp     ___CxxFrameHandler3
.text$x:00003ACB __ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ endp
.text$x:00003ACB
.text$x:00003ACB _text$x         ends
.text$x:00003ACB
.text$mn:00003AD0 ; ===========================================================================
.text$mn:00003AD0
.text$mn:00003AD0 ; Segment type: Pure code
.text$mn:00003AD0 ; Segment permissions: Read/Execute
.text$mn:00003AD0 _text$mn        segment para public 'CODE' use32
.text$mn:00003AD0                 assume cs:_text$mn
.text$mn:00003AD0                 ;org 3AD0h
.text$mn:00003AD0 ; COMDAT (pick any)
.text$mn:00003AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AD0
.text$mn:00003AD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AD0
.text$mn:00003AD0 ; Attributes: bp-based frame
.text$mn:00003AD0
.text$mn:00003AD0 ; int __cdecl std::operator<<<wchar_t,std::char_traits<wchar_t>>(int, wchar_t *Str)
.text$mn:00003AD0                 public ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003AD0 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z proc near
.text$mn:00003AD0                                         ; CODE XREF: TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+3Fp
.text$mn:00003AD0                                         ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+48p ...
.text$mn:00003AD0
.text$mn:00003AD0 var_58          = byte ptr -58h
.text$mn:00003AD0 var_50          = dword ptr -50h
.text$mn:00003AD0 var_4C          = dword ptr -4Ch
.text$mn:00003AD0 var_48          = dword ptr -48h
.text$mn:00003AD0 var_44          = dword ptr -44h
.text$mn:00003AD0 var_40          = dword ptr -40h
.text$mn:00003AD0 var_3C          = dword ptr -3Ch
.text$mn:00003AD0 var_38          = qword ptr -38h
.text$mn:00003AD0 var_30          = dword ptr -30h
.text$mn:00003AD0 var_2C          = dword ptr -2Ch
.text$mn:00003AD0 var_28          = dword ptr -28h
.text$mn:00003AD0 var_24          = dword ptr -24h
.text$mn:00003AD0 var_20          = dword ptr -20h
.text$mn:00003AD0 var_1C          = dword ptr -1Ch
.text$mn:00003AD0 var_18          = word ptr -18h
.text$mn:00003AD0 var_16          = word ptr -16h
.text$mn:00003AD0 var_14          = word ptr -14h
.text$mn:00003AD0 var_12          = word ptr -12h
.text$mn:00003AD0 var_10          = dword ptr -10h
.text$mn:00003AD0 var_C           = dword ptr -0Ch
.text$mn:00003AD0 var_4           = dword ptr -4
.text$mn:00003AD0 arg_0           = dword ptr  8
.text$mn:00003AD0 Str             = dword ptr  0Ch
.text$mn:00003AD0
.text$mn:00003AD0 ; FUNCTION CHUNK AT .text$mn:00003D68 SIZE 00000009 BYTES
.text$mn:00003AD0 ; FUNCTION CHUNK AT .text$mn:00003D78 SIZE 00000040 BYTES
.text$mn:00003AD0
.text$mn:00003AD0                 push    ebp
.text$mn:00003AD1                 mov     ebp, esp
.text$mn:00003AD3                 push    0FFFFFFFFh
.text$mn:00003AD5                 push    offset __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003ADA                 mov     eax, large fs:0
.text$mn:00003AE0                 push    eax
.text$mn:00003AE1                 push    ecx
.text$mn:00003AE2                 sub     esp, 48h
.text$mn:00003AE5                 push    ebx
.text$mn:00003AE6                 push    esi
.text$mn:00003AE7                 push    edi
.text$mn:00003AE8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003AED                 xor     eax, ebp
.text$mn:00003AEF                 push    eax
.text$mn:00003AF0                 lea     eax, [ebp+var_C]
.text$mn:00003AF3                 mov     large fs:0, eax
.text$mn:00003AF9                 mov     [ebp+var_10], esp
.text$mn:00003AFC                 mov     [ebp+var_1C], 0
.text$mn:00003B03                 mov     eax, [ebp+Str]
.text$mn:00003B06                 push    eax             ; Str
.text$mn:00003B07                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00003B0C                 add     esp, 4
.text$mn:00003B0F                 xor     ecx, ecx
.text$mn:00003B11                 mov     [ebp+var_30], eax
.text$mn:00003B14                 mov     [ebp+var_2C], ecx
.text$mn:00003B17                 mov     edx, [ebp+arg_0]
.text$mn:00003B1A                 mov     eax, [edx]
.text$mn:00003B1C                 mov     ecx, [ebp+arg_0]
.text$mn:00003B1F                 add     ecx, [eax+4]    ; this
.text$mn:00003B22                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003B27                 mov     [ebp+var_40], eax
.text$mn:00003B2A                 mov     [ebp+var_3C], edx
.text$mn:00003B2D                 cmp     [ebp+var_3C], 0
.text$mn:00003B31                 jl      short loc_3B81
.text$mn:00003B33                 jg      short loc_3B3B
.text$mn:00003B35                 cmp     [ebp+var_40], 0
.text$mn:00003B39                 jbe     short loc_3B81
.text$mn:00003B3B
.text$mn:00003B3B loc_3B3B:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+63j
.text$mn:00003B3B                 mov     ecx, [ebp+arg_0]
.text$mn:00003B3E                 mov     edx, [ecx]
.text$mn:00003B40                 mov     ecx, [ebp+arg_0]
.text$mn:00003B43                 add     ecx, [edx+4]    ; this
.text$mn:00003B46                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003B4B                 mov     [ebp+var_48], eax
.text$mn:00003B4E                 mov     [ebp+var_44], edx
.text$mn:00003B51                 mov     eax, [ebp+var_44]
.text$mn:00003B54                 cmp     eax, [ebp+var_2C]
.text$mn:00003B57                 jl      short loc_3B81
.text$mn:00003B59                 jg      short loc_3B63
.text$mn:00003B5B                 mov     ecx, [ebp+var_48]
.text$mn:00003B5E                 cmp     ecx, [ebp+var_30]
.text$mn:00003B61                 jbe     short loc_3B81
.text$mn:00003B63
.text$mn:00003B63 loc_3B63:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+89j
.text$mn:00003B63                 mov     edx, [ebp+arg_0]
.text$mn:00003B66                 mov     eax, [edx]
.text$mn:00003B68                 mov     ecx, [ebp+arg_0]
.text$mn:00003B6B                 add     ecx, [eax+4]    ; this
.text$mn:00003B6E                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003B73                 sub     eax, [ebp+var_30]
.text$mn:00003B76                 sbb     edx, [ebp+var_2C]
.text$mn:00003B79                 mov     dword ptr [ebp+var_38], eax
.text$mn:00003B7C                 mov     dword ptr [ebp+var_38+4], edx
.text$mn:00003B7F                 jmp     short loc_3B8A
.text$mn:00003B81 ; ---------------------------------------------------------------------------
.text$mn:00003B81
.text$mn:00003B81 loc_3B81:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+61j
.text$mn:00003B81                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+69j ...
.text$mn:00003B81                 xorpd   xmm0, xmm0
.text$mn:00003B85                 movlpd  [ebp+var_38], xmm0
.text$mn:00003B8A
.text$mn:00003B8A loc_3B8A:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+AFj
.text$mn:00003B8A                 mov     ecx, dword ptr [ebp+var_38]
.text$mn:00003B8D                 mov     [ebp+var_28], ecx
.text$mn:00003B90                 mov     edx, dword ptr [ebp+var_38+4]
.text$mn:00003B93                 mov     [ebp+var_24], edx
.text$mn:00003B96                 mov     eax, [ebp+arg_0]
.text$mn:00003B99                 push    eax
.text$mn:00003B9A                 lea     ecx, [ebp+var_58]
.text$mn:00003B9D                 call    ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:00003BA2                 mov     [ebp+var_4], 0
.text$mn:00003BA9                 lea     ecx, [ebp+var_58]
.text$mn:00003BAC                 call    ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:00003BB1                 movzx   ecx, al
.text$mn:00003BB4                 test    ecx, ecx
.text$mn:00003BB6                 jnz     short loc_3BC6
.text$mn:00003BB8                 mov     edx, [ebp+var_1C]
.text$mn:00003BBB                 or      edx, 4
.text$mn:00003BBE                 mov     [ebp+var_1C], edx
.text$mn:00003BC1                 jmp     loc_3D78
.text$mn:00003BC6 ; ---------------------------------------------------------------------------
.text$mn:00003BC6
.text$mn:00003BC6 loc_3BC6:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+E6j
.text$mn:00003BC6                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003BCA                 mov     eax, [ebp+arg_0]
.text$mn:00003BCD                 mov     ecx, [eax]
.text$mn:00003BCF                 mov     edx, [ebp+arg_0]
.text$mn:00003BD2                 add     edx, [ecx+4]
.text$mn:00003BD5                 mov     ecx, edx        ; this
.text$mn:00003BD7                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00003BDC                 and     eax, 1C0h
.text$mn:00003BE1                 cmp     eax, 40h ; '@'
.text$mn:00003BE4                 jz      short loc_3C64
.text$mn:00003BE6                 jmp     short loc_3BFA
.text$mn:00003BE8 ; ---------------------------------------------------------------------------
.text$mn:00003BE8
.text$mn:00003BE8 loc_3BE8:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *):loc_3C62j
.text$mn:00003BE8                 mov     eax, [ebp+var_28]
.text$mn:00003BEB                 sub     eax, 1
.text$mn:00003BEE                 mov     ecx, [ebp+var_24]
.text$mn:00003BF1                 sbb     ecx, 0
.text$mn:00003BF4                 mov     [ebp+var_28], eax
.text$mn:00003BF7                 mov     [ebp+var_24], ecx
.text$mn:00003BFA
.text$mn:00003BFA loc_3BFA:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+116j
.text$mn:00003BFA                 cmp     [ebp+var_24], 0
.text$mn:00003BFE                 jl      short loc_3C64
.text$mn:00003C00                 jg      short loc_3C08
.text$mn:00003C02                 cmp     [ebp+var_28], 0
.text$mn:00003C06                 jbe     short loc_3C64
.text$mn:00003C08
.text$mn:00003C08 loc_3C08:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+130j
.text$mn:00003C08                 mov     edx, [ebp+arg_0]
.text$mn:00003C0B                 mov     eax, [edx]
.text$mn:00003C0D                 mov     ecx, [ebp+arg_0]
.text$mn:00003C10                 add     ecx, [eax+4]
.text$mn:00003C13                 call    ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::fill(void)
.text$mn:00003C18                 movzx   ecx, ax
.text$mn:00003C1B                 push    ecx
.text$mn:00003C1C                 mov     edx, [ebp+arg_0]
.text$mn:00003C1F                 mov     eax, [edx]
.text$mn:00003C21                 mov     ecx, [ebp+arg_0]
.text$mn:00003C24                 add     ecx, [eax+4]
.text$mn:00003C27                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003C2C                 mov     ecx, eax
.text$mn:00003C2E                 call    ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)
.text$mn:00003C33                 mov     [ebp+var_12], ax
.text$mn:00003C37                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00003C3C                 mov     [ebp+var_14], ax
.text$mn:00003C40                 lea     ecx, [ebp+var_12]
.text$mn:00003C43                 push    ecx
.text$mn:00003C44                 lea     edx, [ebp+var_14]
.text$mn:00003C47                 push    edx
.text$mn:00003C48                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00003C4D                 add     esp, 8
.text$mn:00003C50                 movzx   eax, al
.text$mn:00003C53                 test    eax, eax
.text$mn:00003C55                 jz      short loc_3C62
.text$mn:00003C57                 mov     ecx, [ebp+var_1C]
.text$mn:00003C5A                 or      ecx, 4
.text$mn:00003C5D                 mov     [ebp+var_1C], ecx
.text$mn:00003C60                 jmp     short loc_3C64
.text$mn:00003C62 ; ---------------------------------------------------------------------------
.text$mn:00003C62
.text$mn:00003C62 loc_3C62:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+185j
.text$mn:00003C62                 jmp     short loc_3BE8
.text$mn:00003C64 ; ---------------------------------------------------------------------------
.text$mn:00003C64
.text$mn:00003C64 loc_3C64:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+114j
.text$mn:00003C64                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+12Ej ...
.text$mn:00003C64                 cmp     [ebp+var_1C], 0
.text$mn:00003C68                 jnz     short loc_3CAC
.text$mn:00003C6A                 mov     edx, [ebp+var_2C]
.text$mn:00003C6D                 push    edx
.text$mn:00003C6E                 mov     eax, [ebp+var_30]
.text$mn:00003C71                 push    eax
.text$mn:00003C72                 mov     ecx, [ebp+Str]
.text$mn:00003C75                 push    ecx
.text$mn:00003C76                 mov     edx, [ebp+arg_0]
.text$mn:00003C79                 mov     eax, [edx]
.text$mn:00003C7B                 mov     ecx, [ebp+arg_0]
.text$mn:00003C7E                 add     ecx, [eax+4]
.text$mn:00003C81                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003C86                 mov     ecx, eax
.text$mn:00003C88                 call    ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputn(wchar_t const *,__int64)
.text$mn:00003C8D                 mov     [ebp+var_50], eax
.text$mn:00003C90                 mov     [ebp+var_4C], edx
.text$mn:00003C93                 mov     ecx, [ebp+var_50]
.text$mn:00003C96                 cmp     ecx, [ebp+var_30]
.text$mn:00003C99                 jnz     short loc_3CA3
.text$mn:00003C9B                 mov     edx, [ebp+var_4C]
.text$mn:00003C9E                 cmp     edx, [ebp+var_2C]
.text$mn:00003CA1                 jz      short loc_3CAC
.text$mn:00003CA3
.text$mn:00003CA3 loc_3CA3:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1C9j
.text$mn:00003CA3                 mov     eax, [ebp+var_1C]
.text$mn:00003CA6                 or      eax, 4
.text$mn:00003CA9                 mov     [ebp+var_1C], eax
.text$mn:00003CAC
.text$mn:00003CAC loc_3CAC:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+198j
.text$mn:00003CAC                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1D1j
.text$mn:00003CAC                 cmp     [ebp+var_1C], 0
.text$mn:00003CB0                 jnz     loc_3D36
.text$mn:00003CB6                 jmp     short loc_3CCA
.text$mn:00003CB8 ; ---------------------------------------------------------------------------
.text$mn:00003CB8
.text$mn:00003CB8 loc_3CB8:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *):loc_3D34j
.text$mn:00003CB8                 mov     ecx, [ebp+var_28]
.text$mn:00003CBB                 sub     ecx, 1
.text$mn:00003CBE                 mov     edx, [ebp+var_24]
.text$mn:00003CC1                 sbb     edx, 0
.text$mn:00003CC4                 mov     [ebp+var_28], ecx
.text$mn:00003CC7                 mov     [ebp+var_24], edx
.text$mn:00003CCA
.text$mn:00003CCA loc_3CCA:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1E6j
.text$mn:00003CCA                 cmp     [ebp+var_24], 0
.text$mn:00003CCE                 jl      short loc_3D36
.text$mn:00003CD0                 jg      short loc_3CD8
.text$mn:00003CD2                 cmp     [ebp+var_28], 0
.text$mn:00003CD6                 jbe     short loc_3D36
.text$mn:00003CD8
.text$mn:00003CD8 loc_3CD8:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+200j
.text$mn:00003CD8                 mov     eax, [ebp+arg_0]
.text$mn:00003CDB                 mov     ecx, [eax]
.text$mn:00003CDD                 mov     edx, [ebp+arg_0]
.text$mn:00003CE0                 add     edx, [ecx+4]
.text$mn:00003CE3                 mov     ecx, edx
.text$mn:00003CE5                 call    ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::fill(void)
.text$mn:00003CEA                 movzx   eax, ax
.text$mn:00003CED                 push    eax
.text$mn:00003CEE                 mov     ecx, [ebp+arg_0]
.text$mn:00003CF1                 mov     edx, [ecx]
.text$mn:00003CF3                 mov     ecx, [ebp+arg_0]
.text$mn:00003CF6                 add     ecx, [edx+4]
.text$mn:00003CF9                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003CFE                 mov     ecx, eax
.text$mn:00003D00                 call    ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)
.text$mn:00003D05                 mov     [ebp+var_16], ax
.text$mn:00003D09                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00003D0E                 mov     [ebp+var_18], ax
.text$mn:00003D12                 lea     eax, [ebp+var_16]
.text$mn:00003D15                 push    eax
.text$mn:00003D16                 lea     ecx, [ebp+var_18]
.text$mn:00003D19                 push    ecx
.text$mn:00003D1A                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00003D1F                 add     esp, 8
.text$mn:00003D22                 movzx   edx, al
.text$mn:00003D25                 test    edx, edx
.text$mn:00003D27                 jz      short loc_3D34
.text$mn:00003D29                 mov     eax, [ebp+var_1C]
.text$mn:00003D2C                 or      eax, 4
.text$mn:00003D2F                 mov     [ebp+var_1C], eax
.text$mn:00003D32                 jmp     short loc_3D36
.text$mn:00003D34 ; ---------------------------------------------------------------------------
.text$mn:00003D34
.text$mn:00003D34 loc_3D34:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+257j
.text$mn:00003D34                 jmp     short loc_3CB8
.text$mn:00003D36 ; ---------------------------------------------------------------------------
.text$mn:00003D36
.text$mn:00003D36 loc_3D36:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1E0j
.text$mn:00003D36                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1FEj ...
.text$mn:00003D36                 push    0
.text$mn:00003D38                 push    0               ; __int64
.text$mn:00003D3A                 mov     ecx, [ebp+arg_0]
.text$mn:00003D3D                 mov     edx, [ecx]
.text$mn:00003D3F                 mov     ecx, [ebp+arg_0]
.text$mn:00003D42                 add     ecx, [edx+4]    ; this
.text$mn:00003D45                 call    ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
.text$mn:00003D4A                 jmp     short loc_3D68
.text$mn:00003D4A ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z endp
.text$mn:00003D4A
.text$mn:00003D4C
.text$mn:00003D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00003D4C
.text$mn:00003D4C
.text$mn:00003D4C __catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0 proc near
.text$mn:00003D4C                                         ; DATA XREF: .xdata$x:0000DD48o
.text$mn:00003D4C                 push    1
.text$mn:00003D4E                 push    4
.text$mn:00003D50                 mov     eax, [ebp+8]
.text$mn:00003D53                 mov     ecx, [eax]
.text$mn:00003D55                 mov     edx, [ebp+8]
.text$mn:00003D58                 add     edx, [ecx+4]
.text$mn:00003D5B                 mov     ecx, edx
.text$mn:00003D5D                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00003D62                 mov     eax, offset $LN23_0
.text$mn:00003D67                 retn
.text$mn:00003D67 __catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0 endp
.text$mn:00003D67
.text$mn:00003D68 ; ---------------------------------------------------------------------------
.text$mn:00003D68 ; START OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003D68
.text$mn:00003D68 loc_3D68:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+27Aj
.text$mn:00003D68                 mov     [ebp+var_4], 0
.text$mn:00003D6F                 jmp     short loc_3D78
.text$mn:00003D6F ; END OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003D71
.text$mn:00003D71 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D71
.text$mn:00003D71
.text$mn:00003D71 $LN23_0         proc near               ; DATA XREF: __catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0+16o
.text$mn:00003D71                 mov     dword ptr [ebp-4], 0
.text$mn:00003D71 $LN23_0         endp ; sp-analysis failed
.text$mn:00003D71
.text$mn:00003D78 ; START OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003D78
.text$mn:00003D78 loc_3D78:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+F1j
.text$mn:00003D78                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+29Fj
.text$mn:00003D78                 push    0
.text$mn:00003D7A                 mov     eax, [ebp+var_1C]
.text$mn:00003D7D                 push    eax
.text$mn:00003D7E                 mov     ecx, [ebp+arg_0]
.text$mn:00003D81                 mov     edx, [ecx]
.text$mn:00003D83                 mov     ecx, [ebp+arg_0]
.text$mn:00003D86                 add     ecx, [edx+4]
.text$mn:00003D89                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00003D8E                 mov     eax, [ebp+arg_0]
.text$mn:00003D91                 mov     [ebp+var_20], eax
.text$mn:00003D94                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D9B                 lea     ecx, [ebp+var_58]
.text$mn:00003D9E                 call    ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00003DA3                 mov     eax, [ebp+var_20]
.text$mn:00003DA6                 mov     ecx, [ebp+var_C]
.text$mn:00003DA9                 mov     large fs:0, ecx
.text$mn:00003DB0                 pop     ecx
.text$mn:00003DB1                 pop     edi
.text$mn:00003DB2                 pop     esi
.text$mn:00003DB3                 pop     ebx
.text$mn:00003DB4                 mov     esp, ebp
.text$mn:00003DB6                 pop     ebp
.text$mn:00003DB7                 retn
.text$mn:00003DB7 ; END OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$mn:00003DB7 _text$mn        ends
.text$mn:00003DB7
.text$x:00003DB8 ; ===========================================================================
.text$x:00003DB8
.text$x:00003DB8 ; Segment type: Pure code
.text$x:00003DB8 ; Segment permissions: Read/Execute
.text$x:00003DB8 _text$x         segment para public 'CODE' use32
.text$x:00003DB8                 assume cs:_text$x
.text$x:00003DB8                 ;org 3DB8h
.text$x:00003DB8 ; COMDAT (pick associative to section at 3AD0)
.text$x:00003DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003DB8
.text$x:00003DB8 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB8
.text$x:00003DB8
.text$x:00003DB8 __unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2 proc near
.text$x:00003DB8                                         ; DATA XREF: .xdata$x:0000DD64o
.text$x:00003DB8                 lea     ecx, [ebp-58h]
.text$x:00003DBB                 jmp     ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:00003DBB __unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2 endp
.text$x:00003DBB
.text$x:00003DC0
.text$x:00003DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00003DC0
.text$x:00003DC0
.text$x:00003DC0 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z proc near
.text$x:00003DC0                                         ; DATA XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+5o
.text$x:00003DC0
.text$x:00003DC0 arg_4           = dword ptr  8
.text$x:00003DC0
.text$x:00003DC0                 mov     edx, [esp+arg_4]
.text$x:00003DC4                 lea     eax, [edx+0Ch]
.text$x:00003DC7                 mov     ecx, [edx-5Ch]
.text$x:00003DCA                 xor     ecx, eax
.text$x:00003DCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DD1                 mov     eax, offset __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.text$x:00003DD6                 jmp     ___CxxFrameHandler3
.text$x:00003DD6 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z endp
.text$x:00003DD6
.text$x:00003DD6 ; ---------------------------------------------------------------------------
.text$x:00003DDB                 align 4
.text$x:00003DDB _text$x         ends
.text$x:00003DDB
.text$mn:00003DDC ; ===========================================================================
.text$mn:00003DDC
.text$mn:00003DDC ; Segment type: Pure code
.text$mn:00003DDC ; Segment permissions: Read/Execute
.text$mn:00003DDC _text$mn        segment para public 'CODE' use32
.text$mn:00003DDC                 assume cs:_text$mn
.text$mn:00003DDC                 ;org 3DDCh
.text$mn:00003DDC ; COMDAT (pick any)
.text$mn:00003DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DDC
.text$mn:00003DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DDC
.text$mn:00003DDC ; Attributes: bp-based frame
.text$mn:00003DDC
.text$mn:00003DDC ; class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> & __cdecl std::operator<<<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00003DDC                 public ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00003DDC ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00003DDC                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+4Fp
.text$mn:00003DDC                                         ; TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+22p ...
.text$mn:00003DDC
.text$mn:00003DDC var_4C          = byte ptr -4Ch
.text$mn:00003DDC var_44          = dword ptr -44h
.text$mn:00003DDC var_40          = dword ptr -40h
.text$mn:00003DDC var_3C          = dword ptr -3Ch
.text$mn:00003DDC var_38          = dword ptr -38h
.text$mn:00003DDC var_34          = dword ptr -34h
.text$mn:00003DDC var_30          = dword ptr -30h
.text$mn:00003DDC var_2C          = dword ptr -2Ch
.text$mn:00003DDC var_28          = dword ptr -28h
.text$mn:00003DDC var_24          = dword ptr -24h
.text$mn:00003DDC var_20          = dword ptr -20h
.text$mn:00003DDC var_1C          = dword ptr -1Ch
.text$mn:00003DDC var_18          = word ptr -18h
.text$mn:00003DDC var_16          = word ptr -16h
.text$mn:00003DDC var_14          = word ptr -14h
.text$mn:00003DDC var_12          = word ptr -12h
.text$mn:00003DDC var_10          = dword ptr -10h
.text$mn:00003DDC var_C           = dword ptr -0Ch
.text$mn:00003DDC var_4           = dword ptr -4
.text$mn:00003DDC arg_0           = dword ptr  8
.text$mn:00003DDC arg_4           = dword ptr  0Ch
.text$mn:00003DDC
.text$mn:00003DDC ; FUNCTION CHUNK AT .text$mn:00004035 SIZE 00000009 BYTES
.text$mn:00003DDC ; FUNCTION CHUNK AT .text$mn:00004045 SIZE 00000040 BYTES
.text$mn:00003DDC
.text$mn:00003DDC                 push    ebp
.text$mn:00003DDD                 mov     ebp, esp
.text$mn:00003DDF                 push    0FFFFFFFFh
.text$mn:00003DE1                 push    offset __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00003DE6                 mov     eax, large fs:0
.text$mn:00003DEC                 push    eax
.text$mn:00003DED                 push    ecx
.text$mn:00003DEE                 sub     esp, 3Ch
.text$mn:00003DF1                 push    ebx
.text$mn:00003DF2                 push    esi
.text$mn:00003DF3                 push    edi
.text$mn:00003DF4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003DF9                 xor     eax, ebp
.text$mn:00003DFB                 push    eax
.text$mn:00003DFC                 lea     eax, [ebp+var_C]
.text$mn:00003DFF                 mov     large fs:0, eax
.text$mn:00003E05                 mov     [ebp+var_10], esp
.text$mn:00003E08                 mov     [ebp+var_1C], 0
.text$mn:00003E0F                 mov     ecx, [ebp+arg_4]
.text$mn:00003E12                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00003E17                 mov     [ebp+var_24], eax
.text$mn:00003E1A                 mov     eax, [ebp+arg_0]
.text$mn:00003E1D                 mov     ecx, [eax]
.text$mn:00003E1F                 mov     edx, [ebp+arg_0]
.text$mn:00003E22                 add     edx, [ecx+4]
.text$mn:00003E25                 mov     ecx, edx        ; this
.text$mn:00003E27                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003E2C                 mov     [ebp+var_34], eax
.text$mn:00003E2F                 mov     [ebp+var_30], edx
.text$mn:00003E32                 cmp     [ebp+var_30], 0
.text$mn:00003E36                 jl      short loc_3E71
.text$mn:00003E38                 jg      short loc_3E40
.text$mn:00003E3A                 cmp     [ebp+var_34], 0
.text$mn:00003E3E                 jbe     short loc_3E71
.text$mn:00003E40
.text$mn:00003E40 loc_3E40:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Cj
.text$mn:00003E40                 mov     eax, [ebp+arg_0]
.text$mn:00003E43                 mov     ecx, [eax]
.text$mn:00003E45                 mov     edx, [ebp+arg_0]
.text$mn:00003E48                 add     edx, [ecx+4]
.text$mn:00003E4B                 mov     ecx, edx        ; this
.text$mn:00003E4D                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003E52                 cmp     eax, [ebp+var_24]
.text$mn:00003E55                 jbe     short loc_3E71
.text$mn:00003E57                 mov     eax, [ebp+arg_0]
.text$mn:00003E5A                 mov     ecx, [eax]
.text$mn:00003E5C                 mov     edx, [ebp+arg_0]
.text$mn:00003E5F                 add     edx, [ecx+4]
.text$mn:00003E62                 mov     ecx, edx        ; this
.text$mn:00003E64                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003E69                 sub     eax, [ebp+var_24]
.text$mn:00003E6C                 mov     [ebp+var_28], eax
.text$mn:00003E6F                 jmp     short loc_3E78
.text$mn:00003E71 ; ---------------------------------------------------------------------------
.text$mn:00003E71
.text$mn:00003E71 loc_3E71:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Aj
.text$mn:00003E71                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+62j ...
.text$mn:00003E71                 mov     [ebp+var_28], 0
.text$mn:00003E78
.text$mn:00003E78 loc_3E78:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+93j
.text$mn:00003E78                 mov     eax, [ebp+var_28]
.text$mn:00003E7B                 mov     [ebp+var_20], eax
.text$mn:00003E7E                 mov     ecx, [ebp+arg_0]
.text$mn:00003E81                 push    ecx
.text$mn:00003E82                 lea     ecx, [ebp+var_4C]
.text$mn:00003E85                 call    ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:00003E8A                 mov     [ebp+var_4], 0
.text$mn:00003E91                 lea     ecx, [ebp+var_4C]
.text$mn:00003E94                 call    ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:00003E99                 movzx   edx, al
.text$mn:00003E9C                 test    edx, edx
.text$mn:00003E9E                 jnz     short loc_3EAE
.text$mn:00003EA0                 mov     eax, [ebp+var_1C]
.text$mn:00003EA3                 or      eax, 4
.text$mn:00003EA6                 mov     [ebp+var_1C], eax
.text$mn:00003EA9                 jmp     loc_4045
.text$mn:00003EAE ; ---------------------------------------------------------------------------
.text$mn:00003EAE
.text$mn:00003EAE loc_3EAE:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+C2j
.text$mn:00003EAE                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003EB2                 mov     ecx, [ebp+arg_0]
.text$mn:00003EB5                 mov     edx, [ecx]
.text$mn:00003EB7                 mov     ecx, [ebp+arg_0]
.text$mn:00003EBA                 add     ecx, [edx+4]    ; this
.text$mn:00003EBD                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00003EC2                 and     eax, 1C0h
.text$mn:00003EC7                 cmp     eax, 40h ; '@'
.text$mn:00003ECA                 jz      short loc_3F39
.text$mn:00003ECC                 jmp     short loc_3ED7
.text$mn:00003ECE ; ---------------------------------------------------------------------------
.text$mn:00003ECE
.text$mn:00003ECE loc_3ECE:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &):loc_3F37j
.text$mn:00003ECE                 mov     eax, [ebp+var_20]
.text$mn:00003ED1                 sub     eax, 1
.text$mn:00003ED4                 mov     [ebp+var_20], eax
.text$mn:00003ED7
.text$mn:00003ED7 loc_3ED7:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+F0j
.text$mn:00003ED7                 cmp     [ebp+var_20], 0
.text$mn:00003EDB                 jbe     short loc_3F39
.text$mn:00003EDD                 mov     ecx, [ebp+arg_0]
.text$mn:00003EE0                 mov     edx, [ecx]
.text$mn:00003EE2                 mov     ecx, [ebp+arg_0]
.text$mn:00003EE5                 add     ecx, [edx+4]
.text$mn:00003EE8                 call    ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::fill(void)
.text$mn:00003EED                 movzx   eax, ax
.text$mn:00003EF0                 push    eax
.text$mn:00003EF1                 mov     ecx, [ebp+arg_0]
.text$mn:00003EF4                 mov     edx, [ecx]
.text$mn:00003EF6                 mov     ecx, [ebp+arg_0]
.text$mn:00003EF9                 add     ecx, [edx+4]
.text$mn:00003EFC                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003F01                 mov     ecx, eax
.text$mn:00003F03                 call    ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)
.text$mn:00003F08                 mov     [ebp+var_12], ax
.text$mn:00003F0C                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00003F11                 mov     [ebp+var_14], ax
.text$mn:00003F15                 lea     eax, [ebp+var_12]
.text$mn:00003F18                 push    eax
.text$mn:00003F19                 lea     ecx, [ebp+var_14]
.text$mn:00003F1C                 push    ecx
.text$mn:00003F1D                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00003F22                 add     esp, 8
.text$mn:00003F25                 movzx   edx, al
.text$mn:00003F28                 test    edx, edx
.text$mn:00003F2A                 jz      short loc_3F37
.text$mn:00003F2C                 mov     eax, [ebp+var_1C]
.text$mn:00003F2F                 or      eax, 4
.text$mn:00003F32                 mov     [ebp+var_1C], eax
.text$mn:00003F35                 jmp     short loc_3F39
.text$mn:00003F37 ; ---------------------------------------------------------------------------
.text$mn:00003F37
.text$mn:00003F37 loc_3F37:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+14Ej
.text$mn:00003F37                 jmp     short loc_3ECE
.text$mn:00003F39 ; ---------------------------------------------------------------------------
.text$mn:00003F39
.text$mn:00003F39 loc_3F39:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+EEj
.text$mn:00003F39                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+FFj ...
.text$mn:00003F39                 cmp     [ebp+var_1C], 0
.text$mn:00003F3D                 jnz     short loc_3F94
.text$mn:00003F3F                 mov     ecx, [ebp+var_24]
.text$mn:00003F42                 xor     edx, edx
.text$mn:00003F44                 push    edx
.text$mn:00003F45                 push    ecx
.text$mn:00003F46                 mov     ecx, [ebp+arg_4]
.text$mn:00003F49                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003F4E                 push    eax
.text$mn:00003F4F                 mov     eax, [ebp+arg_0]
.text$mn:00003F52                 mov     ecx, [eax]
.text$mn:00003F54                 mov     edx, [ebp+arg_0]
.text$mn:00003F57                 add     edx, [ecx+4]
.text$mn:00003F5A                 mov     ecx, edx
.text$mn:00003F5C                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003F61                 mov     ecx, eax
.text$mn:00003F63                 call    ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputn(wchar_t const *,__int64)
.text$mn:00003F68                 mov     ecx, [ebp+var_24]
.text$mn:00003F6B                 xor     esi, esi
.text$mn:00003F6D                 mov     [ebp+var_3C], eax
.text$mn:00003F70                 mov     [ebp+var_38], edx
.text$mn:00003F73                 mov     [ebp+var_44], ecx
.text$mn:00003F76                 mov     [ebp+var_40], esi
.text$mn:00003F79                 mov     edx, [ebp+var_3C]
.text$mn:00003F7C                 cmp     edx, [ebp+var_44]
.text$mn:00003F7F                 jnz     short loc_3F89
.text$mn:00003F81                 mov     eax, [ebp+var_38]
.text$mn:00003F84                 cmp     eax, [ebp+var_40]
.text$mn:00003F87                 jz      short loc_3F94
.text$mn:00003F89
.text$mn:00003F89 loc_3F89:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1A3j
.text$mn:00003F89                 mov     ecx, [ebp+var_1C]
.text$mn:00003F8C                 or      ecx, 4
.text$mn:00003F8F                 mov     [ebp+var_1C], ecx
.text$mn:00003F92                 jmp     short loc_4003
.text$mn:00003F94 ; ---------------------------------------------------------------------------
.text$mn:00003F94
.text$mn:00003F94 loc_3F94:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+161j
.text$mn:00003F94                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1ABj
.text$mn:00003F94                 jmp     short loc_3F9F
.text$mn:00003F96 ; ---------------------------------------------------------------------------
.text$mn:00003F96
.text$mn:00003F96 loc_3F96:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &):loc_4001j
.text$mn:00003F96                 mov     edx, [ebp+var_20]
.text$mn:00003F99                 sub     edx, 1
.text$mn:00003F9C                 mov     [ebp+var_20], edx
.text$mn:00003F9F
.text$mn:00003F9F loc_3F9F:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &):loc_3F94j
.text$mn:00003F9F                 cmp     [ebp+var_20], 0
.text$mn:00003FA3                 jbe     short loc_4003
.text$mn:00003FA5                 mov     eax, [ebp+arg_0]
.text$mn:00003FA8                 mov     ecx, [eax]
.text$mn:00003FAA                 mov     edx, [ebp+arg_0]
.text$mn:00003FAD                 add     edx, [ecx+4]
.text$mn:00003FB0                 mov     ecx, edx
.text$mn:00003FB2                 call    ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::fill(void)
.text$mn:00003FB7                 movzx   eax, ax
.text$mn:00003FBA                 push    eax
.text$mn:00003FBB                 mov     ecx, [ebp+arg_0]
.text$mn:00003FBE                 mov     edx, [ecx]
.text$mn:00003FC0                 mov     ecx, [ebp+arg_0]
.text$mn:00003FC3                 add     ecx, [edx+4]
.text$mn:00003FC6                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003FCB                 mov     ecx, eax
.text$mn:00003FCD                 call    ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)
.text$mn:00003FD2                 mov     [ebp+var_16], ax
.text$mn:00003FD6                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00003FDB                 mov     [ebp+var_18], ax
.text$mn:00003FDF                 lea     eax, [ebp+var_16]
.text$mn:00003FE2                 push    eax
.text$mn:00003FE3                 lea     ecx, [ebp+var_18]
.text$mn:00003FE6                 push    ecx
.text$mn:00003FE7                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00003FEC                 add     esp, 8
.text$mn:00003FEF                 movzx   edx, al
.text$mn:00003FF2                 test    edx, edx
.text$mn:00003FF4                 jz      short loc_4001
.text$mn:00003FF6                 mov     eax, [ebp+var_1C]
.text$mn:00003FF9                 or      eax, 4
.text$mn:00003FFC                 mov     [ebp+var_1C], eax
.text$mn:00003FFF                 jmp     short loc_4003
.text$mn:00004001 ; ---------------------------------------------------------------------------
.text$mn:00004001
.text$mn:00004001 loc_4001:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+218j
.text$mn:00004001                 jmp     short loc_3F96
.text$mn:00004003 ; ---------------------------------------------------------------------------
.text$mn:00004003
.text$mn:00004003 loc_4003:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1B6j
.text$mn:00004003                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1C7j ...
.text$mn:00004003                 push    0
.text$mn:00004005                 push    0               ; __int64
.text$mn:00004007                 mov     ecx, [ebp+arg_0]
.text$mn:0000400A                 mov     edx, [ecx]
.text$mn:0000400C                 mov     ecx, [ebp+arg_0]
.text$mn:0000400F                 add     ecx, [edx+4]    ; this
.text$mn:00004012                 call    ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
.text$mn:00004017                 jmp     short loc_4035
.text$mn:00004017 ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00004017
.text$mn:00004019
.text$mn:00004019 ; =============== S U B R O U T I N E =======================================
.text$mn:00004019
.text$mn:00004019
.text$mn:00004019 __catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0 proc near
.text$mn:00004019                                         ; DATA XREF: .xdata$x:0000DCE8o
.text$mn:00004019                 push    1
.text$mn:0000401B                 push    4
.text$mn:0000401D                 mov     eax, [ebp+8]
.text$mn:00004020                 mov     ecx, [eax]
.text$mn:00004022                 mov     edx, [ebp+8]
.text$mn:00004025                 add     edx, [ecx+4]
.text$mn:00004028                 mov     ecx, edx
.text$mn:0000402A                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000402F                 mov     eax, offset $LN23
.text$mn:00004034                 retn
.text$mn:00004034 __catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0 endp
.text$mn:00004034
.text$mn:00004035 ; ---------------------------------------------------------------------------
.text$mn:00004035 ; START OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00004035
.text$mn:00004035 loc_4035:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+23Bj
.text$mn:00004035                 mov     [ebp+var_4], 0
.text$mn:0000403C                 jmp     short loc_4045
.text$mn:0000403C ; END OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:0000403E
.text$mn:0000403E ; =============== S U B R O U T I N E =======================================
.text$mn:0000403E
.text$mn:0000403E
.text$mn:0000403E $LN23           proc near               ; DATA XREF: __catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0+16o
.text$mn:0000403E                 mov     dword ptr [ebp-4], 0
.text$mn:0000403E $LN23           endp ; sp-analysis failed
.text$mn:0000403E
.text$mn:00004045 ; START OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00004045
.text$mn:00004045 loc_4045:                               ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+CDj
.text$mn:00004045                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+260j
.text$mn:00004045                 push    0
.text$mn:00004047                 mov     eax, [ebp+var_1C]
.text$mn:0000404A                 push    eax
.text$mn:0000404B                 mov     ecx, [ebp+arg_0]
.text$mn:0000404E                 mov     edx, [ecx]
.text$mn:00004050                 mov     ecx, [ebp+arg_0]
.text$mn:00004053                 add     ecx, [edx+4]
.text$mn:00004056                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000405B                 mov     eax, [ebp+arg_0]
.text$mn:0000405E                 mov     [ebp+var_2C], eax
.text$mn:00004061                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004068                 lea     ecx, [ebp+var_4C]
.text$mn:0000406B                 call    ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00004070                 mov     eax, [ebp+var_2C]
.text$mn:00004073                 mov     ecx, [ebp+var_C]
.text$mn:00004076                 mov     large fs:0, ecx
.text$mn:0000407D                 pop     ecx
.text$mn:0000407E                 pop     edi
.text$mn:0000407F                 pop     esi
.text$mn:00004080                 pop     ebx
.text$mn:00004081                 mov     esp, ebp
.text$mn:00004083                 pop     ebp
.text$mn:00004084                 retn
.text$mn:00004084 ; END OF FUNCTION CHUNK FOR ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00004084 ; ---------------------------------------------------------------------------
.text$mn:00004085                 align 4
.text$mn:00004085 _text$mn        ends
.text$mn:00004085
.text$x:00004088 ; ===========================================================================
.text$x:00004088
.text$x:00004088 ; Segment type: Pure code
.text$x:00004088 ; Segment permissions: Read/Execute
.text$x:00004088 _text$x         segment para public 'CODE' use32
.text$x:00004088                 assume cs:_text$x
.text$x:00004088                 ;org 4088h
.text$x:00004088 ; COMDAT (pick associative to section at 3DDC)
.text$x:00004088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004088
.text$x:00004088 ; =============== S U B R O U T I N E =======================================
.text$x:00004088
.text$x:00004088
.text$x:00004088 __unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2 proc near
.text$x:00004088                                         ; DATA XREF: .xdata$x:0000DD04o
.text$x:00004088                 lea     ecx, [ebp-4Ch]
.text$x:0000408B                 jmp     ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:0000408B __unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2 endp
.text$x:0000408B
.text$x:00004090
.text$x:00004090 ; =============== S U B R O U T I N E =======================================
.text$x:00004090
.text$x:00004090
.text$x:00004090 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$x:00004090                                         ; DATA XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00004090
.text$x:00004090 arg_4           = dword ptr  8
.text$x:00004090
.text$x:00004090                 mov     edx, [esp+arg_4]
.text$x:00004094                 lea     eax, [edx+0Ch]
.text$x:00004097                 mov     ecx, [edx-50h]
.text$x:0000409A                 xor     ecx, eax
.text$x:0000409C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040A1                 mov     eax, offset __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$x:000040A6                 jmp     ___CxxFrameHandler3
.text$x:000040A6 __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$x:000040A6
.text$x:000040A6 ; ---------------------------------------------------------------------------
.text$x:000040AB                 align 4
.text$x:000040AB _text$x         ends
.text$x:000040AB
.text$mn:000040AC ; ===========================================================================
.text$mn:000040AC
.text$mn:000040AC ; Segment type: Pure code
.text$mn:000040AC ; Segment permissions: Read/Execute
.text$mn:000040AC _text$mn        segment para public 'CODE' use32
.text$mn:000040AC                 assume cs:_text$mn
.text$mn:000040AC                 ;org 40ACh
.text$mn:000040AC ; COMDAT (pick any)
.text$mn:000040AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040AC
.text$mn:000040AC ; =============== S U B R O U T I N E =======================================
.text$mn:000040AC
.text$mn:000040AC ; Attributes: bp-based frame
.text$mn:000040AC
.text$mn:000040AC ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000040AC                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:000040AC ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:000040AC                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:000040AC
.text$mn:000040AC var_2           = byte ptr -2
.text$mn:000040AC var_1           = byte ptr -1
.text$mn:000040AC arg_0           = dword ptr  8
.text$mn:000040AC arg_4           = dword ptr  0Ch
.text$mn:000040AC
.text$mn:000040AC                 push    ebp
.text$mn:000040AD                 mov     ebp, esp
.text$mn:000040AF                 push    ecx
.text$mn:000040B0                 mov     eax, [ebp+arg_4]
.text$mn:000040B3                 push    eax
.text$mn:000040B4                 lea     ecx, [ebp+var_1]
.text$mn:000040B7                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000040BC                 push    eax
.text$mn:000040BD                 mov     ecx, [ebp+arg_0]
.text$mn:000040C0                 push    ecx
.text$mn:000040C1                 lea     ecx, [ebp+var_2]
.text$mn:000040C4                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000040C9                 push    eax
.text$mn:000040CA                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:000040CF                 add     esp, 8
.text$mn:000040D2                 mov     esp, ebp
.text$mn:000040D4                 pop     ebp
.text$mn:000040D5                 retn
.text$mn:000040D5 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:000040D5
.text$mn:000040D5 ; ---------------------------------------------------------------------------
.text$mn:000040D6                 align 4
.text$mn:000040D6 _text$mn        ends
.text$mn:000040D6
.text$mn:000040D8 ; ===========================================================================
.text$mn:000040D8
.text$mn:000040D8 ; Segment type: Pure code
.text$mn:000040D8 ; Segment permissions: Read/Execute
.text$mn:000040D8 _text$mn        segment para public 'CODE' use32
.text$mn:000040D8                 assume cs:_text$mn
.text$mn:000040D8                 ;org 40D8h
.text$mn:000040D8 ; COMDAT (pick any)
.text$mn:000040D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040D8
.text$mn:000040D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000040D8
.text$mn:000040D8 ; Attributes: bp-based frame
.text$mn:000040D8
.text$mn:000040D8 ; bool __cdecl std::operator==<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000040D8                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:000040D8 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:000040D8                                         ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+82p
.text$mn:000040D8                                         ; TiXmlNode::LastChild(wchar_t const *)+82p ...
.text$mn:000040D8
.text$mn:000040D8 var_4           = dword ptr -4
.text$mn:000040D8 arg_0           = dword ptr  8
.text$mn:000040D8 arg_4           = dword ptr  0Ch
.text$mn:000040D8
.text$mn:000040D8                 push    ebp
.text$mn:000040D9                 mov     ebp, esp
.text$mn:000040DB                 push    ecx
.text$mn:000040DC                 mov     eax, [ebp+arg_4]
.text$mn:000040DF                 push    eax
.text$mn:000040E0                 mov     ecx, [ebp+arg_0]
.text$mn:000040E3                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000040E8                 test    eax, eax
.text$mn:000040EA                 jnz     short loc_40F5
.text$mn:000040EC                 mov     [ebp+var_4], 1
.text$mn:000040F3                 jmp     short loc_40FC
.text$mn:000040F5 ; ---------------------------------------------------------------------------
.text$mn:000040F5
.text$mn:000040F5 loc_40F5:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:000040F5                 mov     [ebp+var_4], 0
.text$mn:000040FC
.text$mn:000040FC loc_40FC:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:000040FC                 mov     al, byte ptr [ebp+var_4]
.text$mn:000040FF                 mov     esp, ebp
.text$mn:00004101                 pop     ebp
.text$mn:00004102                 retn
.text$mn:00004102 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00004102
.text$mn:00004102 ; ---------------------------------------------------------------------------
.text$mn:00004103                 align 4
.text$mn:00004103 _text$mn        ends
.text$mn:00004103
.text$mn:00004104 ; ===========================================================================
.text$mn:00004104
.text$mn:00004104 ; Segment type: Pure code
.text$mn:00004104 ; Segment permissions: Read/Execute
.text$mn:00004104 _text$mn        segment para public 'CODE' use32
.text$mn:00004104                 assume cs:_text$mn
.text$mn:00004104                 ;org 4104h
.text$mn:00004104 ; COMDAT (pick any)
.text$mn:00004104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004104
.text$mn:00004104 ; =============== S U B R O U T I N E =======================================
.text$mn:00004104
.text$mn:00004104 ; Attributes: bp-based frame
.text$mn:00004104
.text$mn:00004104 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00004104                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00004104 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00004104                                         ; CODE XREF: TiXmlAttributeSet::Find(wchar_t const *)+30p
.text$mn:00004104
.text$mn:00004104 var_4           = dword ptr -4
.text$mn:00004104 arg_0           = dword ptr  8
.text$mn:00004104 Str             = dword ptr  0Ch
.text$mn:00004104
.text$mn:00004104                 push    ebp
.text$mn:00004105                 mov     ebp, esp
.text$mn:00004107                 push    ecx
.text$mn:00004108                 mov     eax, [ebp+Str]
.text$mn:0000410B                 push    eax             ; Str
.text$mn:0000410C                 mov     ecx, [ebp+arg_0]
.text$mn:0000410F                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00004114                 test    eax, eax
.text$mn:00004116                 jnz     short loc_4121
.text$mn:00004118                 mov     [ebp+var_4], 1
.text$mn:0000411F                 jmp     short loc_4128
.text$mn:00004121 ; ---------------------------------------------------------------------------
.text$mn:00004121
.text$mn:00004121 loc_4121:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00004121                 mov     [ebp+var_4], 0
.text$mn:00004128
.text$mn:00004128 loc_4128:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:00004128                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000412B                 mov     esp, ebp
.text$mn:0000412D                 pop     ebp
.text$mn:0000412E                 retn
.text$mn:0000412E ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:0000412E
.text$mn:0000412E ; ---------------------------------------------------------------------------
.text$mn:0000412F                 align 10h
.text$mn:0000412F _text$mn        ends
.text$mn:0000412F
.text$mn:00004130 ; ===========================================================================
.text$mn:00004130
.text$mn:00004130 ; Segment type: Pure code
.text$mn:00004130 ; Segment permissions: Read/Execute
.text$mn:00004130 _text$mn        segment para public 'CODE' use32
.text$mn:00004130                 assume cs:_text$mn
.text$mn:00004130                 ;org 4130h
.text$mn:00004130 ; COMDAT (pick any)
.text$mn:00004130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004130
.text$mn:00004130 ; =============== S U B R O U T I N E =======================================
.text$mn:00004130
.text$mn:00004130 ; Attributes: bp-based frame
.text$mn:00004130
.text$mn:00004130 ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00004130                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00004130 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00004130                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00004130                 push    ebp
.text$mn:00004131                 mov     ebp, esp
.text$mn:00004133                 mov     al, 1
.text$mn:00004135                 pop     ebp
.text$mn:00004136                 retn
.text$mn:00004136 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:00004136
.text$mn:00004136 ; ---------------------------------------------------------------------------
.text$mn:00004137                 align 4
.text$mn:00004137 _text$mn        ends
.text$mn:00004137
.text$mn:00004138 ; ===========================================================================
.text$mn:00004138
.text$mn:00004138 ; Segment type: Pure code
.text$mn:00004138 ; Segment permissions: Read/Execute
.text$mn:00004138 _text$mn        segment para public 'CODE' use32
.text$mn:00004138                 assume cs:_text$mn
.text$mn:00004138                 ;org 4138h
.text$mn:00004138 ; COMDAT (pick any)
.text$mn:00004138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004138
.text$mn:00004138 ; =============== S U B R O U T I N E =======================================
.text$mn:00004138
.text$mn:00004138 ; Attributes: bp-based frame
.text$mn:00004138
.text$mn:00004138 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00004138                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00004138 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00004138                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:00004138
.text$mn:00004138 var_4           = dword ptr -4
.text$mn:00004138 arg_0           = dword ptr  8
.text$mn:00004138 arg_4           = dword ptr  0Ch
.text$mn:00004138
.text$mn:00004138                 push    ebp
.text$mn:00004139                 mov     ebp, esp
.text$mn:0000413B                 push    ecx
.text$mn:0000413C                 mov     eax, [ebp+arg_4]
.text$mn:0000413F                 push    eax
.text$mn:00004140                 mov     ecx, [ebp+arg_0]
.text$mn:00004143                 push    ecx
.text$mn:00004144                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00004149                 add     esp, 8
.text$mn:0000414C                 movzx   edx, al
.text$mn:0000414F                 test    edx, edx
.text$mn:00004151                 jnz     short loc_415C
.text$mn:00004153                 mov     [ebp+var_4], 1
.text$mn:0000415A                 jmp     short loc_4163
.text$mn:0000415C ; ---------------------------------------------------------------------------
.text$mn:0000415C
.text$mn:0000415C loc_415C:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:0000415C                 mov     [ebp+var_4], 0
.text$mn:00004163
.text$mn:00004163 loc_4163:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00004163                 mov     al, byte ptr [ebp+var_4]
.text$mn:00004166                 mov     esp, ebp
.text$mn:00004168                 pop     ebp
.text$mn:00004169                 retn
.text$mn:00004169 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00004169
.text$mn:00004169 ; ---------------------------------------------------------------------------
.text$mn:0000416A                 align 4
.text$mn:0000416A _text$mn        ends
.text$mn:0000416A
.text$mn:0000416C ; ===========================================================================
.text$mn:0000416C
.text$mn:0000416C ; Segment type: Pure code
.text$mn:0000416C ; Segment permissions: Read/Execute
.text$mn:0000416C _text$mn        segment para public 'CODE' use32
.text$mn:0000416C                 assume cs:_text$mn
.text$mn:0000416C                 ;org 416Ch
.text$mn:0000416C ; COMDAT (pick any)
.text$mn:0000416C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000416C
.text$mn:0000416C ; =============== S U B R O U T I N E =======================================
.text$mn:0000416C
.text$mn:0000416C ; Attributes: bp-based frame
.text$mn:0000416C
.text$mn:0000416C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:0000416C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:0000416C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:0000416C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:0000416C
.text$mn:0000416C var_4           = dword ptr -4
.text$mn:0000416C arg_0           = dword ptr  8
.text$mn:0000416C
.text$mn:0000416C                 push    ebp
.text$mn:0000416D                 mov     ebp, esp
.text$mn:0000416F                 push    ecx
.text$mn:00004170                 mov     [ebp+var_4], 0
.text$mn:00004177                 cmp     [ebp+arg_0], 0
.text$mn:0000417B                 jnz     short loc_417F
.text$mn:0000417D                 jmp     short loc_419F
.text$mn:0000417F ; ---------------------------------------------------------------------------
.text$mn:0000417F
.text$mn:0000417F loc_417F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:0000417F                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00004183                 ja      short loc_419A
.text$mn:00004185                 mov     eax, [ebp+arg_0]
.text$mn:00004188                 push    eax             ; unsigned int
.text$mn:00004189                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000418E                 add     esp, 4
.text$mn:00004191                 mov     [ebp+var_4], eax
.text$mn:00004194                 cmp     [ebp+var_4], 0
.text$mn:00004198                 jnz     short loc_419F
.text$mn:0000419A
.text$mn:0000419A loc_419A:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:0000419A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000419F
.text$mn:0000419F loc_419F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:0000419F                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:0000419F                 mov     eax, [ebp+var_4]
.text$mn:000041A2                 mov     esp, ebp
.text$mn:000041A4                 pop     ebp
.text$mn:000041A5                 retn
.text$mn:000041A5 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000041A5
.text$mn:000041A5 ; ---------------------------------------------------------------------------
.text$mn:000041A6                 align 4
.text$mn:000041A6 _text$mn        ends
.text$mn:000041A6
.text$mn:000041A8 ; ===========================================================================
.text$mn:000041A8
.text$mn:000041A8 ; Segment type: Pure code
.text$mn:000041A8 ; Segment permissions: Read/Execute
.text$mn:000041A8 _text$mn        segment para public 'CODE' use32
.text$mn:000041A8                 assume cs:_text$mn
.text$mn:000041A8                 ;org 41A8h
.text$mn:000041A8 ; COMDAT (pick any)
.text$mn:000041A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041A8
.text$mn:000041A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000041A8
.text$mn:000041A8 ; Attributes: bp-based frame
.text$mn:000041A8
.text$mn:000041A8 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:000041A8                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:000041A8 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:000041A8                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:000041A8
.text$mn:000041A8 var_4           = dword ptr -4
.text$mn:000041A8 arg_0           = dword ptr  8
.text$mn:000041A8
.text$mn:000041A8                 push    ebp
.text$mn:000041A9                 mov     ebp, esp
.text$mn:000041AB                 push    ecx
.text$mn:000041AC                 mov     [ebp+var_4], 0
.text$mn:000041B3                 cmp     [ebp+arg_0], 0
.text$mn:000041B7                 jnz     short loc_41BB
.text$mn:000041B9                 jmp     short loc_41E1
.text$mn:000041BB ; ---------------------------------------------------------------------------
.text$mn:000041BB
.text$mn:000041BB loc_41BB:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:000041BB                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:000041C2                 ja      short loc_41DC
.text$mn:000041C4                 mov     eax, [ebp+arg_0]
.text$mn:000041C7                 shl     eax, 3
.text$mn:000041CA                 push    eax             ; unsigned int
.text$mn:000041CB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000041D0                 add     esp, 4
.text$mn:000041D3                 mov     [ebp+var_4], eax
.text$mn:000041D6                 cmp     [ebp+var_4], 0
.text$mn:000041DA                 jnz     short loc_41E1
.text$mn:000041DC
.text$mn:000041DC loc_41DC:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:000041DC                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000041E1
.text$mn:000041E1 loc_41E1:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:000041E1                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:000041E1                 mov     eax, [ebp+var_4]
.text$mn:000041E4                 mov     esp, ebp
.text$mn:000041E6                 pop     ebp
.text$mn:000041E7                 retn
.text$mn:000041E7 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:000041E7
.text$mn:000041E7 _text$mn        ends
.text$mn:000041E7
.text$mn:000041E8 ; ===========================================================================
.text$mn:000041E8
.text$mn:000041E8 ; Segment type: Pure code
.text$mn:000041E8 ; Segment permissions: Read/Execute
.text$mn:000041E8 _text$mn        segment para public 'CODE' use32
.text$mn:000041E8                 assume cs:_text$mn
.text$mn:000041E8                 ;org 41E8h
.text$mn:000041E8 ; COMDAT (pick any)
.text$mn:000041E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041E8
.text$mn:000041E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000041E8
.text$mn:000041E8 ; Attributes: bp-based frame
.text$mn:000041E8
.text$mn:000041E8 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:000041E8                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:000041E8 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:000041E8                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:000041E8
.text$mn:000041E8 var_4           = dword ptr -4
.text$mn:000041E8 arg_0           = dword ptr  8
.text$mn:000041E8
.text$mn:000041E8                 push    ebp
.text$mn:000041E9                 mov     ebp, esp
.text$mn:000041EB                 push    ecx
.text$mn:000041EC                 mov     [ebp+var_4], 0
.text$mn:000041F3                 cmp     [ebp+arg_0], 0
.text$mn:000041F7                 jnz     short loc_41FB
.text$mn:000041F9                 jmp     short loc_4220
.text$mn:000041FB ; ---------------------------------------------------------------------------
.text$mn:000041FB
.text$mn:000041FB loc_41FB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000041FB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:00004202                 ja      short loc_421B
.text$mn:00004204                 mov     eax, [ebp+arg_0]
.text$mn:00004207                 shl     eax, 1
.text$mn:00004209                 push    eax             ; unsigned int
.text$mn:0000420A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000420F                 add     esp, 4
.text$mn:00004212                 mov     [ebp+var_4], eax
.text$mn:00004215                 cmp     [ebp+var_4], 0
.text$mn:00004219                 jnz     short loc_4220
.text$mn:0000421B
.text$mn:0000421B loc_421B:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:0000421B                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004220
.text$mn:00004220 loc_4220:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00004220                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00004220                 mov     eax, [ebp+var_4]
.text$mn:00004223                 mov     esp, ebp
.text$mn:00004225                 pop     ebp
.text$mn:00004226                 retn
.text$mn:00004226 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00004226
.text$mn:00004226 ; ---------------------------------------------------------------------------
.text$mn:00004227                 align 4
.text$mn:00004227 _text$mn        ends
.text$mn:00004227
.text$mn:00004228 ; ===========================================================================
.text$mn:00004228
.text$mn:00004228 ; Segment type: Pure code
.text$mn:00004228 ; Segment permissions: Read/Execute
.text$mn:00004228 _text$mn        segment para public 'CODE' use32
.text$mn:00004228                 assume cs:_text$mn
.text$mn:00004228                 ;org 4228h
.text$mn:00004228 ; COMDAT (pick any)
.text$mn:00004228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004228
.text$mn:00004228 ; =============== S U B R O U T I N E =======================================
.text$mn:00004228
.text$mn:00004228 ; Attributes: bp-based frame
.text$mn:00004228
.text$mn:00004228 ; int __cdecl std::_DebugHeapDelete<std::_Facet_base>(void *Memory)
.text$mn:00004228                 public ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z
.text$mn:00004228 ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z proc near
.text$mn:00004228                                         ; CODE XREF: std::locale::~locale(void)+21p
.text$mn:00004228
.text$mn:00004228 Memory          = dword ptr  8
.text$mn:00004228
.text$mn:00004228                 push    ebp
.text$mn:00004229                 mov     ebp, esp
.text$mn:0000422B                 cmp     [ebp+Memory], 0
.text$mn:0000422F                 jz      short loc_424B
.text$mn:00004231                 push    0
.text$mn:00004233                 mov     eax, [ebp+Memory]
.text$mn:00004236                 mov     edx, [eax]
.text$mn:00004238                 mov     ecx, [ebp+Memory]
.text$mn:0000423B                 mov     eax, [edx]
.text$mn:0000423D                 call    eax
.text$mn:0000423F                 mov     ecx, [ebp+Memory]
.text$mn:00004242                 push    ecx             ; Memory
.text$mn:00004243                 call    _free
.text$mn:00004248                 add     esp, 4
.text$mn:0000424B
.text$mn:0000424B loc_424B:                               ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+7j
.text$mn:0000424B                 pop     ebp
.text$mn:0000424C                 retn
.text$mn:0000424C ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z endp
.text$mn:0000424C
.text$mn:0000424C ; ---------------------------------------------------------------------------
.text$mn:0000424D                 align 10h
.text$mn:0000424D _text$mn        ends
.text$mn:0000424D
.text$mn:00004250 ; ===========================================================================
.text$mn:00004250
.text$mn:00004250 ; Segment type: Pure code
.text$mn:00004250 ; Segment permissions: Read/Execute
.text$mn:00004250 _text$mn        segment para public 'CODE' use32
.text$mn:00004250                 assume cs:_text$mn
.text$mn:00004250                 ;org 4250h
.text$mn:00004250 ; COMDAT (pick any)
.text$mn:00004250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004250
.text$mn:00004250 ; =============== S U B R O U T I N E =======================================
.text$mn:00004250
.text$mn:00004250 ; Attributes: bp-based frame
.text$mn:00004250
.text$mn:00004250 ; int __cdecl std::_DebugHeapDelete<std::locale::facet>(void *Memory)
.text$mn:00004250                 public ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
.text$mn:00004250 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z proc near
.text$mn:00004250                                         ; CODE XREF: std::locale::facet::operator delete(void *)+7p
.text$mn:00004250
.text$mn:00004250 Memory          = dword ptr  8
.text$mn:00004250
.text$mn:00004250                 push    ebp
.text$mn:00004251                 mov     ebp, esp
.text$mn:00004253                 cmp     [ebp+Memory], 0
.text$mn:00004257                 jz      short loc_4273
.text$mn:00004259                 push    0
.text$mn:0000425B                 mov     eax, [ebp+Memory]
.text$mn:0000425E                 mov     edx, [eax]
.text$mn:00004260                 mov     ecx, [ebp+Memory]
.text$mn:00004263                 mov     eax, [edx]
.text$mn:00004265                 call    eax
.text$mn:00004267                 mov     ecx, [ebp+Memory]
.text$mn:0000426A                 push    ecx             ; Memory
.text$mn:0000426B                 call    _free
.text$mn:00004270                 add     esp, 4
.text$mn:00004273
.text$mn:00004273 loc_4273:                               ; CODE XREF: std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+7j
.text$mn:00004273                 pop     ebp
.text$mn:00004274                 retn
.text$mn:00004274 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z endp
.text$mn:00004274
.text$mn:00004274 ; ---------------------------------------------------------------------------
.text$mn:00004275                 align 4
.text$mn:00004275 _text$mn        ends
.text$mn:00004275
.text$mn:00004278 ; ===========================================================================
.text$mn:00004278
.text$mn:00004278 ; Segment type: Pure code
.text$mn:00004278 ; Segment permissions: Read/Execute
.text$mn:00004278 _text$mn        segment para public 'CODE' use32
.text$mn:00004278                 assume cs:_text$mn
.text$mn:00004278                 ;org 4278h
.text$mn:00004278 ; COMDAT (pick any)
.text$mn:00004278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004278
.text$mn:00004278 ; =============== S U B R O U T I N E =======================================
.text$mn:00004278
.text$mn:00004278 ; Attributes: bp-based frame
.text$mn:00004278
.text$mn:00004278 ; int __cdecl std::_DebugHeapDelete<std::locale>(void *Memory)
.text$mn:00004278                 public ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z
.text$mn:00004278 ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z proc near
.text$mn:00004278                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+17p
.text$mn:00004278
.text$mn:00004278 Memory          = dword ptr  8
.text$mn:00004278
.text$mn:00004278                 push    ebp
.text$mn:00004279                 mov     ebp, esp
.text$mn:0000427B                 cmp     [ebp+Memory], 0
.text$mn:0000427F                 jz      short loc_4297
.text$mn:00004281                 push    0
.text$mn:00004283                 mov     ecx, [ebp+Memory]
.text$mn:00004286                 call    ??_Glocale@std@@QAEPAXI@Z ; std::locale::`scalar deleting destructor'(uint)
.text$mn:0000428B                 mov     eax, [ebp+Memory]
.text$mn:0000428E                 push    eax             ; Memory
.text$mn:0000428F                 call    _free
.text$mn:00004294                 add     esp, 4
.text$mn:00004297
.text$mn:00004297 loc_4297:                               ; CODE XREF: std::_DebugHeapDelete<std::locale>(std::locale *)+7j
.text$mn:00004297                 pop     ebp
.text$mn:00004298                 retn
.text$mn:00004298 ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z endp
.text$mn:00004298
.text$mn:00004298 ; ---------------------------------------------------------------------------
.text$mn:00004299                 align 4
.text$mn:00004299 _text$mn        ends
.text$mn:00004299
.text$mn:0000429C ; ===========================================================================
.text$mn:0000429C
.text$mn:0000429C ; Segment type: Pure code
.text$mn:0000429C ; Segment permissions: Read/Execute
.text$mn:0000429C _text$mn        segment para public 'CODE' use32
.text$mn:0000429C                 assume cs:_text$mn
.text$mn:0000429C                 ;org 429Ch
.text$mn:0000429C ; COMDAT (pick any)
.text$mn:0000429C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000429C
.text$mn:0000429C ; =============== S U B R O U T I N E =======================================
.text$mn:0000429C
.text$mn:0000429C ; Attributes: bp-based frame
.text$mn:0000429C
.text$mn:0000429C ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:0000429C                 public ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z
.text$mn:0000429C ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z proc near
.text$mn:0000429C                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+2Fp
.text$mn:0000429C
.text$mn:0000429C arg_0           = dword ptr  8
.text$mn:0000429C arg_4           = dword ptr  0Ch
.text$mn:0000429C arg_8           = dword ptr  10h
.text$mn:0000429C
.text$mn:0000429C                 push    ebp
.text$mn:0000429D                 mov     ebp, esp
.text$mn:0000429F                 cmp     [ebp+arg_0], 0
.text$mn:000042A3                 jnz     short loc_42BA
.text$mn:000042A5                 mov     eax, [ebp+arg_8]
.text$mn:000042A8                 push    eax             ; unsigned int
.text$mn:000042A9                 mov     ecx, [ebp+arg_4]
.text$mn:000042AC                 push    ecx             ; wchar_t *
.text$mn:000042AD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000042B2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000042B7                 add     esp, 0Ch
.text$mn:000042BA
.text$mn:000042BA loc_42BA:                               ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+7j
.text$mn:000042BA                 pop     ebp
.text$mn:000042BB                 retn
.text$mn:000042BB ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z endp
.text$mn:000042BB
.text$mn:000042BB _text$mn        ends
.text$mn:000042BB
.text$mn:000042BC ; ===========================================================================
.text$mn:000042BC
.text$mn:000042BC ; Segment type: Pure code
.text$mn:000042BC ; Segment permissions: Read/Execute
.text$mn:000042BC _text$mn        segment para public 'CODE' use32
.text$mn:000042BC                 assume cs:_text$mn
.text$mn:000042BC                 ;org 42BCh
.text$mn:000042BC ; COMDAT (pick any)
.text$mn:000042BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042BC
.text$mn:000042BC ; =============== S U B R O U T I N E =======================================
.text$mn:000042BC
.text$mn:000042BC ; Attributes: bp-based frame
.text$mn:000042BC
.text$mn:000042BC ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:000042BC                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:000042BC ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:000042BC                                         ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000042BC                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000042BC
.text$mn:000042BC arg_0           = dword ptr  8
.text$mn:000042BC arg_4           = dword ptr  0Ch
.text$mn:000042BC arg_8           = dword ptr  10h
.text$mn:000042BC
.text$mn:000042BC                 push    ebp
.text$mn:000042BD                 mov     ebp, esp
.text$mn:000042BF                 cmp     [ebp+arg_0], 0
.text$mn:000042C3                 jnz     short loc_42DA
.text$mn:000042C5                 mov     eax, [ebp+arg_8]
.text$mn:000042C8                 push    eax             ; unsigned int
.text$mn:000042C9                 mov     ecx, [ebp+arg_4]
.text$mn:000042CC                 push    ecx             ; wchar_t *
.text$mn:000042CD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000042D2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000042D7                 add     esp, 0Ch
.text$mn:000042DA
.text$mn:000042DA loc_42DA:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000042DA                 pop     ebp
.text$mn:000042DB                 retn
.text$mn:000042DB ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000042DB
.text$mn:000042DB _text$mn        ends
.text$mn:000042DB
.text$mn:000042DC ; ===========================================================================
.text$mn:000042DC
.text$mn:000042DC ; Segment type: Pure code
.text$mn:000042DC ; Segment permissions: Read/Execute
.text$mn:000042DC _text$mn        segment para public 'CODE' use32
.text$mn:000042DC                 assume cs:_text$mn
.text$mn:000042DC                 ;org 42DCh
.text$mn:000042DC ; COMDAT (pick any)
.text$mn:000042DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042DC
.text$mn:000042DC ; =============== S U B R O U T I N E =======================================
.text$mn:000042DC
.text$mn:000042DC ; Attributes: bp-based frame
.text$mn:000042DC
.text$mn:000042DC ; int __cdecl std::_Debug_pointer<short>(int, wchar_t *, unsigned int)
.text$mn:000042DC                 public ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z
.text$mn:000042DC ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z proc near
.text$mn:000042DC                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+2Fp
.text$mn:000042DC
.text$mn:000042DC arg_0           = dword ptr  8
.text$mn:000042DC arg_4           = dword ptr  0Ch
.text$mn:000042DC arg_8           = dword ptr  10h
.text$mn:000042DC
.text$mn:000042DC                 push    ebp
.text$mn:000042DD                 mov     ebp, esp
.text$mn:000042DF                 cmp     [ebp+arg_0], 0
.text$mn:000042E3                 jnz     short loc_42FA
.text$mn:000042E5                 mov     eax, [ebp+arg_8]
.text$mn:000042E8                 push    eax             ; unsigned int
.text$mn:000042E9                 mov     ecx, [ebp+arg_4]
.text$mn:000042EC                 push    ecx             ; wchar_t *
.text$mn:000042ED                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000042F2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000042F7                 add     esp, 0Ch
.text$mn:000042FA
.text$mn:000042FA loc_42FA:                               ; CODE XREF: std::_Debug_pointer<short>(short *,wchar_t const *,uint)+7j
.text$mn:000042FA                 pop     ebp
.text$mn:000042FB                 retn
.text$mn:000042FB ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z endp
.text$mn:000042FB
.text$mn:000042FB _text$mn        ends
.text$mn:000042FB
.text$mn:000042FC ; ===========================================================================
.text$mn:000042FC
.text$mn:000042FC ; Segment type: Pure code
.text$mn:000042FC ; Segment permissions: Read/Execute
.text$mn:000042FC _text$mn        segment para public 'CODE' use32
.text$mn:000042FC                 assume cs:_text$mn
.text$mn:000042FC                 ;org 42FCh
.text$mn:000042FC ; COMDAT (pick any)
.text$mn:000042FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042FC
.text$mn:000042FC ; =============== S U B R O U T I N E =======================================
.text$mn:000042FC
.text$mn:000042FC ; Attributes: bp-based frame
.text$mn:000042FC
.text$mn:000042FC ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000042FC                 public ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z
.text$mn:000042FC ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z proc near
.text$mn:000042FC                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+2Fp
.text$mn:000042FC
.text$mn:000042FC arg_0           = dword ptr  8
.text$mn:000042FC arg_4           = dword ptr  0Ch
.text$mn:000042FC arg_8           = dword ptr  10h
.text$mn:000042FC
.text$mn:000042FC                 push    ebp
.text$mn:000042FD                 mov     ebp, esp
.text$mn:000042FF                 cmp     [ebp+arg_0], 0
.text$mn:00004303                 jnz     short loc_431A
.text$mn:00004305                 mov     eax, [ebp+arg_8]
.text$mn:00004308                 push    eax             ; unsigned int
.text$mn:00004309                 mov     ecx, [ebp+arg_4]
.text$mn:0000430C                 push    ecx             ; wchar_t *
.text$mn:0000430D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004312                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004317                 add     esp, 0Ch
.text$mn:0000431A
.text$mn:0000431A loc_431A:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)+7j
.text$mn:0000431A                 pop     ebp
.text$mn:0000431B                 retn
.text$mn:0000431B ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z endp
.text$mn:0000431B
.text$mn:0000431B _text$mn        ends
.text$mn:0000431B
.text$mn:0000431C ; ===========================================================================
.text$mn:0000431C
.text$mn:0000431C ; Segment type: Pure code
.text$mn:0000431C ; Segment permissions: Read/Execute
.text$mn:0000431C _text$mn        segment para public 'CODE' use32
.text$mn:0000431C                 assume cs:_text$mn
.text$mn:0000431C                 ;org 431Ch
.text$mn:0000431C ; COMDAT (pick any)
.text$mn:0000431C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000431C
.text$mn:0000431C ; =============== S U B R O U T I N E =======================================
.text$mn:0000431C
.text$mn:0000431C ; Attributes: bp-based frame
.text$mn:0000431C
.text$mn:0000431C ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:0000431C                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:0000431C ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:0000431C                                         ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:0000431C                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:0000431C
.text$mn:0000431C arg_0           = dword ptr  8
.text$mn:0000431C arg_4           = dword ptr  0Ch
.text$mn:0000431C arg_8           = dword ptr  10h
.text$mn:0000431C
.text$mn:0000431C                 push    ebp
.text$mn:0000431D                 mov     ebp, esp
.text$mn:0000431F                 cmp     [ebp+arg_0], 0
.text$mn:00004323                 jnz     short loc_433A
.text$mn:00004325                 mov     eax, [ebp+arg_8]
.text$mn:00004328                 push    eax             ; unsigned int
.text$mn:00004329                 mov     ecx, [ebp+arg_4]
.text$mn:0000432C                 push    ecx             ; wchar_t *
.text$mn:0000432D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004332                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004337                 add     esp, 0Ch
.text$mn:0000433A
.text$mn:0000433A loc_433A:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:0000433A                 pop     ebp
.text$mn:0000433B                 retn
.text$mn:0000433B ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:0000433B
.text$mn:0000433B _text$mn        ends
.text$mn:0000433B
.text$mn:0000433C ; ===========================================================================
.text$mn:0000433C
.text$mn:0000433C ; Segment type: Pure code
.text$mn:0000433C ; Segment permissions: Read/Execute
.text$mn:0000433C _text$mn        segment para public 'CODE' use32
.text$mn:0000433C                 assume cs:_text$mn
.text$mn:0000433C                 ;org 433Ch
.text$mn:0000433C ; COMDAT (pick any)
.text$mn:0000433C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000433C
.text$mn:0000433C ; =============== S U B R O U T I N E =======================================
.text$mn:0000433C
.text$mn:0000433C ; Attributes: bp-based frame
.text$mn:0000433C
.text$mn:0000433C ; int __cdecl std::_Debug_range2<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:0000433C                 public ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:0000433C ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:0000433C                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+2Ap
.text$mn:0000433C
.text$mn:0000433C arg_0           = dword ptr  8
.text$mn:0000433C arg_4           = dword ptr  0Ch
.text$mn:0000433C arg_8           = dword ptr  10h
.text$mn:0000433C arg_C           = dword ptr  14h
.text$mn:0000433C
.text$mn:0000433C                 push    ebp
.text$mn:0000433D                 mov     ebp, esp
.text$mn:0000433F                 mov     eax, [ebp+arg_0]
.text$mn:00004342                 cmp     eax, [ebp+arg_4]
.text$mn:00004345                 jz      short loc_438C
.text$mn:00004347                 mov     ecx, [ebp+arg_C]
.text$mn:0000434A                 push    ecx             ; unsigned int
.text$mn:0000434B                 mov     edx, [ebp+arg_8]
.text$mn:0000434E                 push    edx             ; wchar_t *
.text$mn:0000434F                 mov     eax, [ebp+arg_0]
.text$mn:00004352                 push    eax             ; int
.text$mn:00004353                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00004358                 add     esp, 0Ch
.text$mn:0000435B                 mov     ecx, [ebp+arg_C]
.text$mn:0000435E                 push    ecx             ; unsigned int
.text$mn:0000435F                 mov     edx, [ebp+arg_8]
.text$mn:00004362                 push    edx             ; wchar_t *
.text$mn:00004363                 mov     eax, [ebp+arg_4]
.text$mn:00004366                 push    eax             ; int
.text$mn:00004367                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000436C                 add     esp, 0Ch
.text$mn:0000436F                 mov     ecx, [ebp+arg_4]
.text$mn:00004372                 cmp     ecx, [ebp+arg_0]
.text$mn:00004375                 jnb     short loc_438C
.text$mn:00004377                 mov     edx, [ebp+arg_C]
.text$mn:0000437A                 push    edx             ; unsigned int
.text$mn:0000437B                 mov     eax, [ebp+arg_8]
.text$mn:0000437E                 push    eax             ; wchar_t *
.text$mn:0000437F                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004384                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004389                 add     esp, 0Ch
.text$mn:0000438C
.text$mn:0000438C loc_438C:                               ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:0000438C                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:0000438C                 pop     ebp
.text$mn:0000438D                 retn
.text$mn:0000438D ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:0000438D
.text$mn:0000438D ; ---------------------------------------------------------------------------
.text$mn:0000438E                 align 10h
.text$mn:0000438E _text$mn        ends
.text$mn:0000438E
.text$mn:00004390 ; ===========================================================================
.text$mn:00004390
.text$mn:00004390 ; Segment type: Pure code
.text$mn:00004390 ; Segment permissions: Read/Execute
.text$mn:00004390 _text$mn        segment para public 'CODE' use32
.text$mn:00004390                 assume cs:_text$mn
.text$mn:00004390                 ;org 4390h
.text$mn:00004390 ; COMDAT (pick any)
.text$mn:00004390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004390
.text$mn:00004390 ; =============== S U B R O U T I N E =======================================
.text$mn:00004390
.text$mn:00004390 ; Attributes: bp-based frame
.text$mn:00004390
.text$mn:00004390 ; int __cdecl std::_Debug_range2<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004390                 public ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z
.text$mn:00004390 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004390                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+2Ap
.text$mn:00004390
.text$mn:00004390 arg_0           = dword ptr  8
.text$mn:00004390 arg_4           = dword ptr  0Ch
.text$mn:00004390 arg_8           = dword ptr  10h
.text$mn:00004390 arg_C           = dword ptr  14h
.text$mn:00004390
.text$mn:00004390                 push    ebp
.text$mn:00004391                 mov     ebp, esp
.text$mn:00004393                 mov     eax, [ebp+arg_0]
.text$mn:00004396                 cmp     eax, [ebp+arg_4]
.text$mn:00004399                 jz      short loc_43E0
.text$mn:0000439B                 mov     ecx, [ebp+arg_C]
.text$mn:0000439E                 push    ecx             ; unsigned int
.text$mn:0000439F                 mov     edx, [ebp+arg_8]
.text$mn:000043A2                 push    edx             ; wchar_t *
.text$mn:000043A3                 mov     eax, [ebp+arg_0]
.text$mn:000043A6                 push    eax             ; int
.text$mn:000043A7                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000043AC                 add     esp, 0Ch
.text$mn:000043AF                 mov     ecx, [ebp+arg_C]
.text$mn:000043B2                 push    ecx             ; unsigned int
.text$mn:000043B3                 mov     edx, [ebp+arg_8]
.text$mn:000043B6                 push    edx             ; wchar_t *
.text$mn:000043B7                 mov     eax, [ebp+arg_4]
.text$mn:000043BA                 push    eax             ; int
.text$mn:000043BB                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000043C0                 add     esp, 0Ch
.text$mn:000043C3                 mov     ecx, [ebp+arg_4]
.text$mn:000043C6                 cmp     ecx, [ebp+arg_0]
.text$mn:000043C9                 jnb     short loc_43E0
.text$mn:000043CB                 mov     edx, [ebp+arg_C]
.text$mn:000043CE                 push    edx             ; unsigned int
.text$mn:000043CF                 mov     eax, [ebp+arg_8]
.text$mn:000043D2                 push    eax             ; wchar_t *
.text$mn:000043D3                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000043D8                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000043DD                 add     esp, 0Ch
.text$mn:000043E0
.text$mn:000043E0 loc_43E0:                               ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000043E0                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000043E0                 pop     ebp
.text$mn:000043E1                 retn
.text$mn:000043E1 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z endp
.text$mn:000043E1
.text$mn:000043E1 ; ---------------------------------------------------------------------------
.text$mn:000043E2                 align 4
.text$mn:000043E2 _text$mn        ends
.text$mn:000043E2
.text$mn:000043E4 ; ===========================================================================
.text$mn:000043E4
.text$mn:000043E4 ; Segment type: Pure code
.text$mn:000043E4 ; Segment permissions: Read/Execute
.text$mn:000043E4 _text$mn        segment para public 'CODE' use32
.text$mn:000043E4                 assume cs:_text$mn
.text$mn:000043E4                 ;org 43E4h
.text$mn:000043E4 ; COMDAT (pick any)
.text$mn:000043E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043E4
.text$mn:000043E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000043E4
.text$mn:000043E4 ; Attributes: bp-based frame
.text$mn:000043E4
.text$mn:000043E4 ; int __cdecl std::_Debug_range<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:000043E4                 public ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z
.text$mn:000043E4 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z proc near
.text$mn:000043E4                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+19p
.text$mn:000043E4
.text$mn:000043E4 var_1           = byte ptr -1
.text$mn:000043E4 arg_0           = dword ptr  8
.text$mn:000043E4 arg_4           = dword ptr  0Ch
.text$mn:000043E4 arg_8           = dword ptr  10h
.text$mn:000043E4 arg_C           = dword ptr  14h
.text$mn:000043E4
.text$mn:000043E4                 push    ebp
.text$mn:000043E5                 mov     ebp, esp
.text$mn:000043E7                 push    ecx
.text$mn:000043E8                 lea     eax, [ebp+arg_0]
.text$mn:000043EB                 push    eax
.text$mn:000043EC                 lea     ecx, [ebp+var_1]
.text$mn:000043EF                 push    ecx
.text$mn:000043F0                 call    ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ; std::_Iter_cat<char const *>(char const * const &)
.text$mn:000043F5                 add     esp, 8
.text$mn:000043F8                 mov     dl, [eax]
.text$mn:000043FA                 movzx   eax, dl
.text$mn:000043FD                 push    eax
.text$mn:000043FE                 mov     ecx, [ebp+arg_C]
.text$mn:00004401                 push    ecx             ; unsigned int
.text$mn:00004402                 mov     edx, [ebp+arg_8]
.text$mn:00004405                 push    edx             ; wchar_t *
.text$mn:00004406                 mov     eax, [ebp+arg_4]
.text$mn:00004409                 push    eax             ; int
.text$mn:0000440A                 mov     ecx, [ebp+arg_0]
.text$mn:0000440D                 push    ecx             ; int
.text$mn:0000440E                 call    ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004413                 add     esp, 14h
.text$mn:00004416                 mov     esp, ebp
.text$mn:00004418                 pop     ebp
.text$mn:00004419                 retn
.text$mn:00004419 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z endp
.text$mn:00004419
.text$mn:00004419 ; ---------------------------------------------------------------------------
.text$mn:0000441A                 align 4
.text$mn:0000441A _text$mn        ends
.text$mn:0000441A
.text$mn:0000441C ; ===========================================================================
.text$mn:0000441C
.text$mn:0000441C ; Segment type: Pure code
.text$mn:0000441C ; Segment permissions: Read/Execute
.text$mn:0000441C _text$mn        segment para public 'CODE' use32
.text$mn:0000441C                 assume cs:_text$mn
.text$mn:0000441C                 ;org 441Ch
.text$mn:0000441C ; COMDAT (pick any)
.text$mn:0000441C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000441C
.text$mn:0000441C ; =============== S U B R O U T I N E =======================================
.text$mn:0000441C
.text$mn:0000441C ; Attributes: bp-based frame
.text$mn:0000441C
.text$mn:0000441C ; int __cdecl std::_Debug_range<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:0000441C                 public ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z
.text$mn:0000441C ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z proc near
.text$mn:0000441C                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+19p
.text$mn:0000441C                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+19p ...
.text$mn:0000441C
.text$mn:0000441C var_1           = byte ptr -1
.text$mn:0000441C arg_0           = dword ptr  8
.text$mn:0000441C arg_4           = dword ptr  0Ch
.text$mn:0000441C arg_8           = dword ptr  10h
.text$mn:0000441C arg_C           = dword ptr  14h
.text$mn:0000441C
.text$mn:0000441C                 push    ebp
.text$mn:0000441D                 mov     ebp, esp
.text$mn:0000441F                 push    ecx
.text$mn:00004420                 lea     eax, [ebp+arg_0]
.text$mn:00004423                 push    eax
.text$mn:00004424                 lea     ecx, [ebp+var_1]
.text$mn:00004427                 push    ecx
.text$mn:00004428                 call    ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z ; std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:0000442D                 add     esp, 8
.text$mn:00004430                 mov     dl, [eax]
.text$mn:00004432                 movzx   eax, dl
.text$mn:00004435                 push    eax
.text$mn:00004436                 mov     ecx, [ebp+arg_C]
.text$mn:00004439                 push    ecx             ; unsigned int
.text$mn:0000443A                 mov     edx, [ebp+arg_8]
.text$mn:0000443D                 push    edx             ; wchar_t *
.text$mn:0000443E                 mov     eax, [ebp+arg_4]
.text$mn:00004441                 push    eax             ; int
.text$mn:00004442                 mov     ecx, [ebp+arg_0]
.text$mn:00004445                 push    ecx             ; int
.text$mn:00004446                 call    ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000444B                 add     esp, 14h
.text$mn:0000444E                 mov     esp, ebp
.text$mn:00004450                 pop     ebp
.text$mn:00004451                 retn
.text$mn:00004451 ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z endp
.text$mn:00004451
.text$mn:00004451 ; ---------------------------------------------------------------------------
.text$mn:00004452                 align 4
.text$mn:00004452 _text$mn        ends
.text$mn:00004452
.text$mn:00004454 ; ===========================================================================
.text$mn:00004454
.text$mn:00004454 ; Segment type: Pure code
.text$mn:00004454 ; Segment permissions: Read/Execute
.text$mn:00004454 _text$mn        segment para public 'CODE' use32
.text$mn:00004454                 assume cs:_text$mn
.text$mn:00004454                 ;org 4454h
.text$mn:00004454 ; COMDAT (pick any)
.text$mn:00004454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004454
.text$mn:00004454 ; =============== S U B R O U T I N E =======================================
.text$mn:00004454
.text$mn:00004454 ; Attributes: bp-based frame
.text$mn:00004454
.text$mn:00004454 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<char const *>(char const * const &)
.text$mn:00004454                 public ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z
.text$mn:00004454 ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z proc near
.text$mn:00004454                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+Cp
.text$mn:00004454
.text$mn:00004454 var_1           = byte ptr -1
.text$mn:00004454 arg_0           = dword ptr  8
.text$mn:00004454
.text$mn:00004454                 push    ebp
.text$mn:00004455                 mov     ebp, esp
.text$mn:00004457                 push    ecx
.text$mn:00004458                 mov     eax, [ebp+arg_0]
.text$mn:0000445B                 mov     cl, [ebp+var_1]
.text$mn:0000445E                 mov     [eax], cl
.text$mn:00004460                 mov     eax, [ebp+arg_0]
.text$mn:00004463                 mov     esp, ebp
.text$mn:00004465                 pop     ebp
.text$mn:00004466                 retn
.text$mn:00004466 ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z endp
.text$mn:00004466
.text$mn:00004466 ; ---------------------------------------------------------------------------
.text$mn:00004467                 align 4
.text$mn:00004467 _text$mn        ends
.text$mn:00004467
.text$mn:00004468 ; ===========================================================================
.text$mn:00004468
.text$mn:00004468 ; Segment type: Pure code
.text$mn:00004468 ; Segment permissions: Read/Execute
.text$mn:00004468 _text$mn        segment para public 'CODE' use32
.text$mn:00004468                 assume cs:_text$mn
.text$mn:00004468                 ;org 4468h
.text$mn:00004468 ; COMDAT (pick any)
.text$mn:00004468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004468
.text$mn:00004468 ; =============== S U B R O U T I N E =======================================
.text$mn:00004468
.text$mn:00004468 ; Attributes: bp-based frame
.text$mn:00004468
.text$mn:00004468 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:00004468                 public ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z
.text$mn:00004468 ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z proc near
.text$mn:00004468                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+Cp
.text$mn:00004468
.text$mn:00004468 var_1           = byte ptr -1
.text$mn:00004468 arg_0           = dword ptr  8
.text$mn:00004468
.text$mn:00004468                 push    ebp
.text$mn:00004469                 mov     ebp, esp
.text$mn:0000446B                 push    ecx
.text$mn:0000446C                 mov     eax, [ebp+arg_0]
.text$mn:0000446F                 mov     cl, [ebp+var_1]
.text$mn:00004472                 mov     [eax], cl
.text$mn:00004474                 mov     eax, [ebp+arg_0]
.text$mn:00004477                 mov     esp, ebp
.text$mn:00004479                 pop     ebp
.text$mn:0000447A                 retn
.text$mn:0000447A ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z endp
.text$mn:0000447A
.text$mn:0000447A ; ---------------------------------------------------------------------------
.text$mn:0000447B                 align 4
.text$mn:0000447B _text$mn        ends
.text$mn:0000447B
.text$mn:0000447C ; ===========================================================================
.text$mn:0000447C
.text$mn:0000447C ; Segment type: Pure code
.text$mn:0000447C ; Segment permissions: Read/Execute
.text$mn:0000447C _text$mn        segment para public 'CODE' use32
.text$mn:0000447C                 assume cs:_text$mn
.text$mn:0000447C                 ;org 447Ch
.text$mn:0000447C ; COMDAT (pick any)
.text$mn:0000447C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000447C
.text$mn:0000447C ; =============== S U B R O U T I N E =======================================
.text$mn:0000447C
.text$mn:0000447C ; Attributes: bp-based frame
.text$mn:0000447C
.text$mn:0000447C ; char * __cdecl std::addressof<char>(char &)
.text$mn:0000447C                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:0000447C ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:0000447C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:0000447C                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:0000447C
.text$mn:0000447C arg_0           = dword ptr  8
.text$mn:0000447C
.text$mn:0000447C                 push    ebp
.text$mn:0000447D                 mov     ebp, esp
.text$mn:0000447F                 mov     eax, [ebp+arg_0]
.text$mn:00004482                 pop     ebp
.text$mn:00004483                 retn
.text$mn:00004483 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00004483
.text$mn:00004483 _text$mn        ends
.text$mn:00004483
.text$mn:00004484 ; ===========================================================================
.text$mn:00004484
.text$mn:00004484 ; Segment type: Pure code
.text$mn:00004484 ; Segment permissions: Read/Execute
.text$mn:00004484 _text$mn        segment para public 'CODE' use32
.text$mn:00004484                 assume cs:_text$mn
.text$mn:00004484                 ;org 4484h
.text$mn:00004484 ; COMDAT (pick any)
.text$mn:00004484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004484
.text$mn:00004484 ; =============== S U B R O U T I N E =======================================
.text$mn:00004484
.text$mn:00004484 ; Attributes: bp-based frame
.text$mn:00004484
.text$mn:00004484 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00004484                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00004484 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00004484                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00004484                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00004484
.text$mn:00004484 arg_0           = dword ptr  8
.text$mn:00004484
.text$mn:00004484                 push    ebp
.text$mn:00004485                 mov     ebp, esp
.text$mn:00004487                 mov     eax, [ebp+arg_0]
.text$mn:0000448A                 pop     ebp
.text$mn:0000448B                 retn
.text$mn:0000448B ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:0000448B
.text$mn:0000448B _text$mn        ends
.text$mn:0000448B
.text$mn:0000448C ; ===========================================================================
.text$mn:0000448C
.text$mn:0000448C ; Segment type: Pure code
.text$mn:0000448C ; Segment permissions: Read/Execute
.text$mn:0000448C _text$mn        segment para public 'CODE' use32
.text$mn:0000448C                 assume cs:_text$mn
.text$mn:0000448C                 ;org 448Ch
.text$mn:0000448C ; COMDAT (pick any)
.text$mn:0000448C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000448C
.text$mn:0000448C ; =============== S U B R O U T I N E =======================================
.text$mn:0000448C
.text$mn:0000448C ; Attributes: bp-based frame
.text$mn:0000448C
.text$mn:0000448C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:0000448C                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:0000448C ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:0000448C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+50p
.text$mn:0000448C                                         ; $LN19+4Bp
.text$mn:0000448C
.text$mn:0000448C var_4           = dword ptr -4
.text$mn:0000448C arg_0           = dword ptr  8
.text$mn:0000448C arg_4           = dword ptr  0Ch
.text$mn:0000448C
.text$mn:0000448C                 push    ebp
.text$mn:0000448D                 mov     ebp, esp
.text$mn:0000448F                 push    ecx
.text$mn:00004490                 mov     [ebp+var_4], ecx
.text$mn:00004493                 mov     eax, [ebp+arg_4]
.text$mn:00004496                 push    eax
.text$mn:00004497                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000449C                 add     esp, 4
.text$mn:0000449F                 push    eax             ; int
.text$mn:000044A0                 mov     ecx, [ebp+arg_0]
.text$mn:000044A3                 push    ecx             ; void *
.text$mn:000044A4                 mov     edx, [ebp+var_4]
.text$mn:000044A7                 push    edx             ; int
.text$mn:000044A8                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:000044AD                 add     esp, 0Ch
.text$mn:000044B0                 mov     esp, ebp
.text$mn:000044B2                 pop     ebp
.text$mn:000044B3                 retn    8
.text$mn:000044B3 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000044B3
.text$mn:000044B3 ; ---------------------------------------------------------------------------
.text$mn:000044B6                 align 4
.text$mn:000044B6 _text$mn        ends
.text$mn:000044B6
.text$mn:000044B8 ; ===========================================================================
.text$mn:000044B8
.text$mn:000044B8 ; Segment type: Pure code
.text$mn:000044B8 ; Segment permissions: Read/Execute
.text$mn:000044B8 _text$mn        segment para public 'CODE' use32
.text$mn:000044B8                 assume cs:_text$mn
.text$mn:000044B8                 ;org 44B8h
.text$mn:000044B8 ; COMDAT (pick any)
.text$mn:000044B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044B8
.text$mn:000044B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000044B8
.text$mn:000044B8 ; Attributes: bp-based frame
.text$mn:000044B8
.text$mn:000044B8 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:000044B8                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000044B8 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:000044B8                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:000044B8
.text$mn:000044B8 var_1C          = dword ptr -1Ch
.text$mn:000044B8 var_18          = dword ptr -18h
.text$mn:000044B8 var_14          = dword ptr -14h
.text$mn:000044B8 var_10          = dword ptr -10h
.text$mn:000044B8 var_C           = dword ptr -0Ch
.text$mn:000044B8 var_4           = dword ptr -4
.text$mn:000044B8 arg_0           = dword ptr  8
.text$mn:000044B8 arg_4           = dword ptr  0Ch
.text$mn:000044B8
.text$mn:000044B8                 push    ebp
.text$mn:000044B9                 mov     ebp, esp
.text$mn:000044BB                 push    0FFFFFFFFh
.text$mn:000044BD                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000044C2                 mov     eax, large fs:0
.text$mn:000044C8                 push    eax
.text$mn:000044C9                 sub     esp, 10h
.text$mn:000044CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000044D1                 xor     eax, ebp
.text$mn:000044D3                 push    eax
.text$mn:000044D4                 lea     eax, [ebp+var_C]
.text$mn:000044D7                 mov     large fs:0, eax
.text$mn:000044DD                 mov     [ebp+var_18], ecx
.text$mn:000044E0                 mov     eax, [ebp+arg_0]
.text$mn:000044E3                 push    eax             ; void *
.text$mn:000044E4                 push    4               ; unsigned int
.text$mn:000044E6                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000044EB                 add     esp, 8
.text$mn:000044EE                 mov     [ebp+var_10], eax
.text$mn:000044F1                 mov     [ebp+var_4], 0
.text$mn:000044F8                 cmp     [ebp+var_10], 0
.text$mn:000044FC                 jz      short loc_4519
.text$mn:000044FE                 mov     ecx, [ebp+arg_4]
.text$mn:00004501                 push    ecx
.text$mn:00004502                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004507                 add     esp, 4
.text$mn:0000450A                 mov     edx, [ebp+var_10]
.text$mn:0000450D                 mov     eax, [eax]
.text$mn:0000450F                 mov     [edx], eax
.text$mn:00004511                 mov     ecx, [ebp+var_10]
.text$mn:00004514                 mov     [ebp+var_14], ecx
.text$mn:00004517                 jmp     short loc_4520
.text$mn:00004519 ; ---------------------------------------------------------------------------
.text$mn:00004519
.text$mn:00004519 loc_4519:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00004519                 mov     [ebp+var_14], 0
.text$mn:00004520
.text$mn:00004520 loc_4520:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00004520                 mov     edx, [ebp+var_14]
.text$mn:00004523                 mov     [ebp+var_1C], edx
.text$mn:00004526                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000452D                 mov     ecx, [ebp+var_C]
.text$mn:00004530                 mov     large fs:0, ecx
.text$mn:00004537                 pop     ecx
.text$mn:00004538                 mov     esp, ebp
.text$mn:0000453A                 pop     ebp
.text$mn:0000453B                 retn    8
.text$mn:0000453B ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000453B
.text$mn:0000453B ; ---------------------------------------------------------------------------
.text$mn:0000453E                 align 10h
.text$mn:0000453E _text$mn        ends
.text$mn:0000453E
.text$x:00004540 ; ===========================================================================
.text$x:00004540
.text$x:00004540 ; Segment type: Pure code
.text$x:00004540 ; Segment permissions: Read/Execute
.text$x:00004540 _text$x         segment para public 'CODE' use32
.text$x:00004540                 assume cs:_text$x
.text$x:00004540                 ;org 4540h
.text$x:00004540 ; COMDAT (pick associative to section at 44B8)
.text$x:00004540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004540
.text$x:00004540 ; =============== S U B R O U T I N E =======================================
.text$x:00004540
.text$x:00004540
.text$x:00004540 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00004540                                         ; DATA XREF: .xdata$x:0000DF5Co
.text$x:00004540                 mov     eax, [ebp+8]
.text$x:00004543                 push    eax
.text$x:00004544                 mov     eax, [ebp-10h]
.text$x:00004547                 push    eax             ; void *
.text$x:00004548                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000454D                 add     esp, 8
.text$x:00004550                 retn
.text$x:00004550 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00004550
.text$x:00004551
.text$x:00004551 ; =============== S U B R O U T I N E =======================================
.text$x:00004551
.text$x:00004551
.text$x:00004551 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00004551                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00004551
.text$x:00004551 arg_4           = dword ptr  8
.text$x:00004551
.text$x:00004551                 mov     edx, [esp+arg_4]
.text$x:00004555                 lea     eax, [edx+0Ch]
.text$x:00004558                 mov     ecx, [edx-14h]
.text$x:0000455B                 xor     ecx, eax
.text$x:0000455D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004562                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00004567                 jmp     ___CxxFrameHandler3
.text$x:00004567 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00004567
.text$x:00004567 _text$x         ends
.text$x:00004567
.text$mn:0000456C ; ===========================================================================
.text$mn:0000456C
.text$mn:0000456C ; Segment type: Pure code
.text$mn:0000456C ; Segment permissions: Read/Execute
.text$mn:0000456C _text$mn        segment para public 'CODE' use32
.text$mn:0000456C                 assume cs:_text$mn
.text$mn:0000456C                 ;org 456Ch
.text$mn:0000456C ; COMDAT (pick any)
.text$mn:0000456C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000456C
.text$mn:0000456C ; =============== S U B R O U T I N E =======================================
.text$mn:0000456C
.text$mn:0000456C ; Attributes: bp-based frame
.text$mn:0000456C
.text$mn:0000456C ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:0000456C                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:0000456C ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:0000456C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:0000456C
.text$mn:0000456C arg_0           = dword ptr  8
.text$mn:0000456C arg_4           = dword ptr  0Ch
.text$mn:0000456C arg_8           = dword ptr  10h
.text$mn:0000456C
.text$mn:0000456C                 push    ebp
.text$mn:0000456D                 mov     ebp, esp
.text$mn:0000456F                 mov     eax, [ebp+arg_8]
.text$mn:00004572                 push    eax
.text$mn:00004573                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004578                 add     esp, 4
.text$mn:0000457B                 push    eax             ; int
.text$mn:0000457C                 mov     ecx, [ebp+arg_4]
.text$mn:0000457F                 push    ecx             ; void *
.text$mn:00004580                 mov     ecx, [ebp+arg_0]
.text$mn:00004583                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00004588                 pop     ebp
.text$mn:00004589                 retn
.text$mn:00004589 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00004589
.text$mn:00004589 ; ---------------------------------------------------------------------------
.text$mn:0000458A                 align 4
.text$mn:0000458A _text$mn        ends
.text$mn:0000458A
.text$mn:0000458C ; ===========================================================================
.text$mn:0000458C
.text$mn:0000458C ; Segment type: Pure code
.text$mn:0000458C ; Segment permissions: Read/Execute
.text$mn:0000458C _text$mn        segment para public 'CODE' use32
.text$mn:0000458C                 assume cs:_text$mn
.text$mn:0000458C                 ;org 458Ch
.text$mn:0000458C ; COMDAT (pick any)
.text$mn:0000458C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000458C
.text$mn:0000458C ; =============== S U B R O U T I N E =======================================
.text$mn:0000458C
.text$mn:0000458C ; Attributes: bp-based frame
.text$mn:0000458C
.text$mn:0000458C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:0000458C                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000458C ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:0000458C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:0000458C                                         ; $LN19_0+4Bp
.text$mn:0000458C
.text$mn:0000458C var_4           = dword ptr -4
.text$mn:0000458C arg_0           = dword ptr  8
.text$mn:0000458C arg_4           = dword ptr  0Ch
.text$mn:0000458C
.text$mn:0000458C                 push    ebp
.text$mn:0000458D                 mov     ebp, esp
.text$mn:0000458F                 push    ecx
.text$mn:00004590                 mov     [ebp+var_4], ecx
.text$mn:00004593                 mov     eax, [ebp+arg_4]
.text$mn:00004596                 push    eax
.text$mn:00004597                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000459C                 add     esp, 4
.text$mn:0000459F                 push    eax             ; int
.text$mn:000045A0                 mov     ecx, [ebp+arg_0]
.text$mn:000045A3                 push    ecx             ; void *
.text$mn:000045A4                 mov     edx, [ebp+var_4]
.text$mn:000045A7                 push    edx             ; int
.text$mn:000045A8                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:000045AD                 add     esp, 0Ch
.text$mn:000045B0                 mov     esp, ebp
.text$mn:000045B2                 pop     ebp
.text$mn:000045B3                 retn    8
.text$mn:000045B3 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000045B3
.text$mn:000045B3 ; ---------------------------------------------------------------------------
.text$mn:000045B6                 align 4
.text$mn:000045B6 _text$mn        ends
.text$mn:000045B6
.text$mn:000045B8 ; ===========================================================================
.text$mn:000045B8
.text$mn:000045B8 ; Segment type: Pure code
.text$mn:000045B8 ; Segment permissions: Read/Execute
.text$mn:000045B8 _text$mn        segment para public 'CODE' use32
.text$mn:000045B8                 assume cs:_text$mn
.text$mn:000045B8                 ;org 45B8h
.text$mn:000045B8 ; COMDAT (pick any)
.text$mn:000045B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045B8
.text$mn:000045B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000045B8
.text$mn:000045B8 ; Attributes: bp-based frame
.text$mn:000045B8
.text$mn:000045B8 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:000045B8                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:000045B8 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:000045B8                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:000045B8
.text$mn:000045B8 var_1C          = dword ptr -1Ch
.text$mn:000045B8 var_18          = dword ptr -18h
.text$mn:000045B8 var_14          = dword ptr -14h
.text$mn:000045B8 var_10          = dword ptr -10h
.text$mn:000045B8 var_C           = dword ptr -0Ch
.text$mn:000045B8 var_4           = dword ptr -4
.text$mn:000045B8 arg_0           = dword ptr  8
.text$mn:000045B8 arg_4           = dword ptr  0Ch
.text$mn:000045B8
.text$mn:000045B8                 push    ebp
.text$mn:000045B9                 mov     ebp, esp
.text$mn:000045BB                 push    0FFFFFFFFh
.text$mn:000045BD                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:000045C2                 mov     eax, large fs:0
.text$mn:000045C8                 push    eax
.text$mn:000045C9                 sub     esp, 10h
.text$mn:000045CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045D1                 xor     eax, ebp
.text$mn:000045D3                 push    eax
.text$mn:000045D4                 lea     eax, [ebp+var_C]
.text$mn:000045D7                 mov     large fs:0, eax
.text$mn:000045DD                 mov     [ebp+var_18], ecx
.text$mn:000045E0                 mov     eax, [ebp+arg_0]
.text$mn:000045E3                 push    eax             ; void *
.text$mn:000045E4                 push    4               ; unsigned int
.text$mn:000045E6                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000045EB                 add     esp, 8
.text$mn:000045EE                 mov     [ebp+var_10], eax
.text$mn:000045F1                 mov     [ebp+var_4], 0
.text$mn:000045F8                 cmp     [ebp+var_10], 0
.text$mn:000045FC                 jz      short loc_4619
.text$mn:000045FE                 mov     ecx, [ebp+arg_4]
.text$mn:00004601                 push    ecx
.text$mn:00004602                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004607                 add     esp, 4
.text$mn:0000460A                 mov     edx, [ebp+var_10]
.text$mn:0000460D                 mov     eax, [eax]
.text$mn:0000460F                 mov     [edx], eax
.text$mn:00004611                 mov     ecx, [ebp+var_10]
.text$mn:00004614                 mov     [ebp+var_14], ecx
.text$mn:00004617                 jmp     short loc_4620
.text$mn:00004619 ; ---------------------------------------------------------------------------
.text$mn:00004619
.text$mn:00004619 loc_4619:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00004619                 mov     [ebp+var_14], 0
.text$mn:00004620
.text$mn:00004620 loc_4620:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00004620                 mov     edx, [ebp+var_14]
.text$mn:00004623                 mov     [ebp+var_1C], edx
.text$mn:00004626                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000462D                 mov     ecx, [ebp+var_C]
.text$mn:00004630                 mov     large fs:0, ecx
.text$mn:00004637                 pop     ecx
.text$mn:00004638                 mov     esp, ebp
.text$mn:0000463A                 pop     ebp
.text$mn:0000463B                 retn    8
.text$mn:0000463B ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:0000463B
.text$mn:0000463B ; ---------------------------------------------------------------------------
.text$mn:0000463E                 align 10h
.text$mn:0000463E _text$mn        ends
.text$mn:0000463E
.text$x:00004640 ; ===========================================================================
.text$x:00004640
.text$x:00004640 ; Segment type: Pure code
.text$x:00004640 ; Segment permissions: Read/Execute
.text$x:00004640 _text$x         segment para public 'CODE' use32
.text$x:00004640                 assume cs:_text$x
.text$x:00004640                 ;org 4640h
.text$x:00004640 ; COMDAT (pick associative to section at 45B8)
.text$x:00004640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004640
.text$x:00004640 ; =============== S U B R O U T I N E =======================================
.text$x:00004640
.text$x:00004640
.text$x:00004640 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00004640                                         ; DATA XREF: .xdata$x:0000DF88o
.text$x:00004640                 mov     eax, [ebp+8]
.text$x:00004643                 push    eax
.text$x:00004644                 mov     eax, [ebp-10h]
.text$x:00004647                 push    eax             ; void *
.text$x:00004648                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000464D                 add     esp, 8
.text$x:00004650                 retn
.text$x:00004650 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00004650
.text$x:00004651
.text$x:00004651 ; =============== S U B R O U T I N E =======================================
.text$x:00004651
.text$x:00004651
.text$x:00004651 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00004651                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00004651
.text$x:00004651 arg_4           = dword ptr  8
.text$x:00004651
.text$x:00004651                 mov     edx, [esp+arg_4]
.text$x:00004655                 lea     eax, [edx+0Ch]
.text$x:00004658                 mov     ecx, [edx-14h]
.text$x:0000465B                 xor     ecx, eax
.text$x:0000465D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004662                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00004667                 jmp     ___CxxFrameHandler3
.text$x:00004667 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00004667
.text$x:00004667 _text$x         ends
.text$x:00004667
.text$mn:0000466C ; ===========================================================================
.text$mn:0000466C
.text$mn:0000466C ; Segment type: Pure code
.text$mn:0000466C ; Segment permissions: Read/Execute
.text$mn:0000466C _text$mn        segment para public 'CODE' use32
.text$mn:0000466C                 assume cs:_text$mn
.text$mn:0000466C                 ;org 466Ch
.text$mn:0000466C ; COMDAT (pick any)
.text$mn:0000466C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000466C
.text$mn:0000466C ; =============== S U B R O U T I N E =======================================
.text$mn:0000466C
.text$mn:0000466C ; Attributes: bp-based frame
.text$mn:0000466C
.text$mn:0000466C ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:0000466C                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:0000466C ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:0000466C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:0000466C
.text$mn:0000466C arg_0           = dword ptr  8
.text$mn:0000466C arg_4           = dword ptr  0Ch
.text$mn:0000466C arg_8           = dword ptr  10h
.text$mn:0000466C
.text$mn:0000466C                 push    ebp
.text$mn:0000466D                 mov     ebp, esp
.text$mn:0000466F                 mov     eax, [ebp+arg_8]
.text$mn:00004672                 push    eax
.text$mn:00004673                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004678                 add     esp, 4
.text$mn:0000467B                 push    eax             ; int
.text$mn:0000467C                 mov     ecx, [ebp+arg_4]
.text$mn:0000467F                 push    ecx             ; void *
.text$mn:00004680                 mov     ecx, [ebp+arg_0]
.text$mn:00004683                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00004688                 pop     ebp
.text$mn:00004689                 retn
.text$mn:00004689 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00004689
.text$mn:00004689 ; ---------------------------------------------------------------------------
.text$mn:0000468A                 align 4
.text$mn:0000468A _text$mn        ends
.text$mn:0000468A
.text$mn:0000468C ; ===========================================================================
.text$mn:0000468C
.text$mn:0000468C ; Segment type: Pure code
.text$mn:0000468C ; Segment permissions: Read/Execute
.text$mn:0000468C _text$mn        segment para public 'CODE' use32
.text$mn:0000468C                 assume cs:_text$mn
.text$mn:0000468C                 ;org 468Ch
.text$mn:0000468C ; COMDAT (pick any)
.text$mn:0000468C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000468C
.text$mn:0000468C ; =============== S U B R O U T I N E =======================================
.text$mn:0000468C
.text$mn:0000468C ; Attributes: bp-based frame
.text$mn:0000468C
.text$mn:0000468C ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:0000468C                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:0000468C ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:0000468C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:0000468C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:0000468C
.text$mn:0000468C var_1C          = dword ptr -1Ch
.text$mn:0000468C var_18          = dword ptr -18h
.text$mn:0000468C var_14          = dword ptr -14h
.text$mn:0000468C var_10          = dword ptr -10h
.text$mn:0000468C var_C           = dword ptr -0Ch
.text$mn:0000468C var_4           = dword ptr -4
.text$mn:0000468C arg_0           = dword ptr  8
.text$mn:0000468C arg_4           = dword ptr  0Ch
.text$mn:0000468C
.text$mn:0000468C                 push    ebp
.text$mn:0000468D                 mov     ebp, esp
.text$mn:0000468F                 push    0FFFFFFFFh
.text$mn:00004691                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004696                 mov     eax, large fs:0
.text$mn:0000469C                 push    eax
.text$mn:0000469D                 sub     esp, 10h
.text$mn:000046A0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000046A5                 xor     eax, ebp
.text$mn:000046A7                 push    eax
.text$mn:000046A8                 lea     eax, [ebp+var_C]
.text$mn:000046AB                 mov     large fs:0, eax
.text$mn:000046B1                 mov     [ebp+var_18], ecx
.text$mn:000046B4                 mov     eax, [ebp+arg_0]
.text$mn:000046B7                 push    eax             ; void *
.text$mn:000046B8                 push    8               ; unsigned int
.text$mn:000046BA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000046BF                 add     esp, 8
.text$mn:000046C2                 mov     [ebp+var_10], eax
.text$mn:000046C5                 mov     [ebp+var_4], 0
.text$mn:000046CC                 cmp     [ebp+var_10], 0
.text$mn:000046D0                 jz      short loc_46F3
.text$mn:000046D2                 mov     ecx, [ebp+arg_4]
.text$mn:000046D5                 push    ecx
.text$mn:000046D6                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000046DB                 add     esp, 4
.text$mn:000046DE                 mov     edx, [eax]
.text$mn:000046E0                 mov     eax, [eax+4]
.text$mn:000046E3                 mov     ecx, [ebp+var_10]
.text$mn:000046E6                 mov     [ecx], edx
.text$mn:000046E8                 mov     [ecx+4], eax
.text$mn:000046EB                 mov     edx, [ebp+var_10]
.text$mn:000046EE                 mov     [ebp+var_14], edx
.text$mn:000046F1                 jmp     short loc_46FA
.text$mn:000046F3 ; ---------------------------------------------------------------------------
.text$mn:000046F3
.text$mn:000046F3 loc_46F3:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:000046F3                 mov     [ebp+var_14], 0
.text$mn:000046FA
.text$mn:000046FA loc_46FA:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:000046FA                 mov     eax, [ebp+var_14]
.text$mn:000046FD                 mov     [ebp+var_1C], eax
.text$mn:00004700                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004707                 mov     ecx, [ebp+var_C]
.text$mn:0000470A                 mov     large fs:0, ecx
.text$mn:00004711                 pop     ecx
.text$mn:00004712                 mov     esp, ebp
.text$mn:00004714                 pop     ebp
.text$mn:00004715                 retn    8
.text$mn:00004715 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00004715
.text$mn:00004715 _text$mn        ends
.text$mn:00004715
.text$x:00004718 ; ===========================================================================
.text$x:00004718
.text$x:00004718 ; Segment type: Pure code
.text$x:00004718 ; Segment permissions: Read/Execute
.text$x:00004718 _text$x         segment para public 'CODE' use32
.text$x:00004718                 assume cs:_text$x
.text$x:00004718                 ;org 4718h
.text$x:00004718 ; COMDAT (pick associative to section at 468C)
.text$x:00004718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004718
.text$x:00004718 ; =============== S U B R O U T I N E =======================================
.text$x:00004718
.text$x:00004718
.text$x:00004718 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00004718                                         ; DATA XREF: .xdata$x:0000DED8o
.text$x:00004718                 mov     eax, [ebp+8]
.text$x:0000471B                 push    eax
.text$x:0000471C                 mov     eax, [ebp-10h]
.text$x:0000471F                 push    eax             ; void *
.text$x:00004720                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004725                 add     esp, 8
.text$x:00004728                 retn
.text$x:00004728 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00004728
.text$x:00004729
.text$x:00004729 ; =============== S U B R O U T I N E =======================================
.text$x:00004729
.text$x:00004729
.text$x:00004729 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00004729                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00004729
.text$x:00004729 arg_4           = dword ptr  8
.text$x:00004729
.text$x:00004729                 mov     edx, [esp+arg_4]
.text$x:0000472D                 lea     eax, [edx+0Ch]
.text$x:00004730                 mov     ecx, [edx-14h]
.text$x:00004733                 xor     ecx, eax
.text$x:00004735                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000473A                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:0000473F                 jmp     ___CxxFrameHandler3
.text$x:0000473F __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:0000473F
.text$x:0000473F _text$x         ends
.text$x:0000473F
.text$mn:00004744 ; ===========================================================================
.text$mn:00004744
.text$mn:00004744 ; Segment type: Pure code
.text$mn:00004744 ; Segment permissions: Read/Execute
.text$mn:00004744 _text$mn        segment para public 'CODE' use32
.text$mn:00004744                 assume cs:_text$mn
.text$mn:00004744                 ;org 4744h
.text$mn:00004744 ; COMDAT (pick any)
.text$mn:00004744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004744
.text$mn:00004744 ; =============== S U B R O U T I N E =======================================
.text$mn:00004744
.text$mn:00004744 ; Attributes: bp-based frame
.text$mn:00004744
.text$mn:00004744 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00004744                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00004744 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00004744                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00004744
.text$mn:00004744 var_4           = dword ptr -4
.text$mn:00004744 arg_0           = dword ptr  8
.text$mn:00004744
.text$mn:00004744                 push    ebp
.text$mn:00004745                 mov     ebp, esp
.text$mn:00004747                 push    ecx
.text$mn:00004748                 mov     [ebp+var_4], ecx
.text$mn:0000474B                 mov     eax, [ebp+arg_0]
.text$mn:0000474E                 push    eax
.text$mn:0000474F                 mov     ecx, [ebp+var_4]
.text$mn:00004752                 push    ecx
.text$mn:00004753                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00004758                 add     esp, 8
.text$mn:0000475B                 mov     esp, ebp
.text$mn:0000475D                 pop     ebp
.text$mn:0000475E                 retn    4
.text$mn:0000475E ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:0000475E
.text$mn:0000475E ; ---------------------------------------------------------------------------
.text$mn:00004761                 align 4
.text$mn:00004761 _text$mn        ends
.text$mn:00004761
.text$mn:00004764 ; ===========================================================================
.text$mn:00004764
.text$mn:00004764 ; Segment type: Pure code
.text$mn:00004764 ; Segment permissions: Read/Execute
.text$mn:00004764 _text$mn        segment para public 'CODE' use32
.text$mn:00004764                 assume cs:_text$mn
.text$mn:00004764                 ;org 4764h
.text$mn:00004764 ; COMDAT (pick any)
.text$mn:00004764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004764
.text$mn:00004764 ; =============== S U B R O U T I N E =======================================
.text$mn:00004764
.text$mn:00004764 ; Attributes: bp-based frame
.text$mn:00004764
.text$mn:00004764 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00004764                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00004764 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00004764                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00004764
.text$mn:00004764 var_4           = dword ptr -4
.text$mn:00004764
.text$mn:00004764                 push    ebp
.text$mn:00004765                 mov     ebp, esp
.text$mn:00004767                 push    ecx
.text$mn:00004768                 mov     [ebp+var_4], ecx
.text$mn:0000476B                 mov     esp, ebp
.text$mn:0000476D                 pop     ebp
.text$mn:0000476E                 retn    4
.text$mn:0000476E ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:0000476E
.text$mn:0000476E ; ---------------------------------------------------------------------------
.text$mn:00004771                 align 4
.text$mn:00004771 _text$mn        ends
.text$mn:00004771
.text$mn:00004774 ; ===========================================================================
.text$mn:00004774
.text$mn:00004774 ; Segment type: Pure code
.text$mn:00004774 ; Segment permissions: Read/Execute
.text$mn:00004774 _text$mn        segment para public 'CODE' use32
.text$mn:00004774                 assume cs:_text$mn
.text$mn:00004774                 ;org 4774h
.text$mn:00004774 ; COMDAT (pick any)
.text$mn:00004774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004774
.text$mn:00004774 ; =============== S U B R O U T I N E =======================================
.text$mn:00004774
.text$mn:00004774 ; Attributes: bp-based frame
.text$mn:00004774
.text$mn:00004774 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00004774                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00004774 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00004774                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00004774
.text$mn:00004774 arg_0           = dword ptr  8
.text$mn:00004774 arg_4           = dword ptr  0Ch
.text$mn:00004774
.text$mn:00004774                 push    ebp
.text$mn:00004775                 mov     ebp, esp
.text$mn:00004777                 mov     eax, [ebp+arg_4]
.text$mn:0000477A                 push    eax
.text$mn:0000477B                 mov     ecx, [ebp+arg_0]
.text$mn:0000477E                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00004783                 pop     ebp
.text$mn:00004784                 retn
.text$mn:00004784 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00004784
.text$mn:00004784 ; ---------------------------------------------------------------------------
.text$mn:00004785                 align 4
.text$mn:00004785 _text$mn        ends
.text$mn:00004785
.text$mn:00004788 ; ===========================================================================
.text$mn:00004788
.text$mn:00004788 ; Segment type: Pure code
.text$mn:00004788 ; Segment permissions: Read/Execute
.text$mn:00004788 _text$mn        segment para public 'CODE' use32
.text$mn:00004788                 assume cs:_text$mn
.text$mn:00004788                 ;org 4788h
.text$mn:00004788 ; COMDAT (pick any)
.text$mn:00004788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004788
.text$mn:00004788 ; =============== S U B R O U T I N E =======================================
.text$mn:00004788
.text$mn:00004788 ; Attributes: bp-based frame
.text$mn:00004788
.text$mn:00004788 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004788                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00004788 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00004788                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00004788
.text$mn:00004788 var_4           = dword ptr -4
.text$mn:00004788 arg_0           = dword ptr  8
.text$mn:00004788
.text$mn:00004788                 push    ebp
.text$mn:00004789                 mov     ebp, esp
.text$mn:0000478B                 push    ecx
.text$mn:0000478C                 mov     [ebp+var_4], ecx
.text$mn:0000478F                 mov     eax, [ebp+arg_0]
.text$mn:00004792                 push    eax
.text$mn:00004793                 mov     ecx, [ebp+var_4]
.text$mn:00004796                 push    ecx
.text$mn:00004797                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:0000479C                 add     esp, 8
.text$mn:0000479F                 mov     esp, ebp
.text$mn:000047A1                 pop     ebp
.text$mn:000047A2                 retn    4
.text$mn:000047A2 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:000047A2
.text$mn:000047A2 ; ---------------------------------------------------------------------------
.text$mn:000047A5                 align 4
.text$mn:000047A5 _text$mn        ends
.text$mn:000047A5
.text$mn:000047A8 ; ===========================================================================
.text$mn:000047A8
.text$mn:000047A8 ; Segment type: Pure code
.text$mn:000047A8 ; Segment permissions: Read/Execute
.text$mn:000047A8 _text$mn        segment para public 'CODE' use32
.text$mn:000047A8                 assume cs:_text$mn
.text$mn:000047A8                 ;org 47A8h
.text$mn:000047A8 ; COMDAT (pick any)
.text$mn:000047A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047A8
.text$mn:000047A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000047A8
.text$mn:000047A8 ; Attributes: bp-based frame
.text$mn:000047A8
.text$mn:000047A8 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000047A8                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:000047A8 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:000047A8                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:000047A8
.text$mn:000047A8 var_4           = dword ptr -4
.text$mn:000047A8
.text$mn:000047A8                 push    ebp
.text$mn:000047A9                 mov     ebp, esp
.text$mn:000047AB                 push    ecx
.text$mn:000047AC                 mov     [ebp+var_4], ecx
.text$mn:000047AF                 mov     esp, ebp
.text$mn:000047B1                 pop     ebp
.text$mn:000047B2                 retn    4
.text$mn:000047B2 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:000047B2
.text$mn:000047B2 ; ---------------------------------------------------------------------------
.text$mn:000047B5                 align 4
.text$mn:000047B5 _text$mn        ends
.text$mn:000047B5
.text$mn:000047B8 ; ===========================================================================
.text$mn:000047B8
.text$mn:000047B8 ; Segment type: Pure code
.text$mn:000047B8 ; Segment permissions: Read/Execute
.text$mn:000047B8 _text$mn        segment para public 'CODE' use32
.text$mn:000047B8                 assume cs:_text$mn
.text$mn:000047B8                 ;org 47B8h
.text$mn:000047B8 ; COMDAT (pick any)
.text$mn:000047B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047B8
.text$mn:000047B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000047B8
.text$mn:000047B8 ; Attributes: bp-based frame
.text$mn:000047B8
.text$mn:000047B8 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:000047B8                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:000047B8 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:000047B8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:000047B8
.text$mn:000047B8 arg_0           = dword ptr  8
.text$mn:000047B8 arg_4           = dword ptr  0Ch
.text$mn:000047B8
.text$mn:000047B8                 push    ebp
.text$mn:000047B9                 mov     ebp, esp
.text$mn:000047BB                 mov     eax, [ebp+arg_4]
.text$mn:000047BE                 push    eax
.text$mn:000047BF                 mov     ecx, [ebp+arg_0]
.text$mn:000047C2                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000047C7                 pop     ebp
.text$mn:000047C8                 retn
.text$mn:000047C8 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:000047C8
.text$mn:000047C8 ; ---------------------------------------------------------------------------
.text$mn:000047C9                 align 4
.text$mn:000047C9 _text$mn        ends
.text$mn:000047C9
.text$mn:000047CC ; ===========================================================================
.text$mn:000047CC
.text$mn:000047CC ; Segment type: Pure code
.text$mn:000047CC ; Segment permissions: Read/Execute
.text$mn:000047CC _text$mn        segment para public 'CODE' use32
.text$mn:000047CC                 assume cs:_text$mn
.text$mn:000047CC                 ;org 47CCh
.text$mn:000047CC ; COMDAT (pick any)
.text$mn:000047CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047CC
.text$mn:000047CC ; =============== S U B R O U T I N E =======================================
.text$mn:000047CC
.text$mn:000047CC ; Attributes: bp-based frame
.text$mn:000047CC
.text$mn:000047CC ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:000047CC                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:000047CC ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:000047CC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:000047CC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:000047CC
.text$mn:000047CC var_4           = dword ptr -4
.text$mn:000047CC
.text$mn:000047CC                 push    ebp
.text$mn:000047CD                 mov     ebp, esp
.text$mn:000047CF                 push    ecx
.text$mn:000047D0                 mov     [ebp+var_4], ecx
.text$mn:000047D3                 mov     esp, ebp
.text$mn:000047D5                 pop     ebp
.text$mn:000047D6                 retn    4
.text$mn:000047D6 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:000047D6
.text$mn:000047D6 ; ---------------------------------------------------------------------------
.text$mn:000047D9                 align 4
.text$mn:000047D9 _text$mn        ends
.text$mn:000047D9
.text$mn:000047DC ; ===========================================================================
.text$mn:000047DC
.text$mn:000047DC ; Segment type: Pure code
.text$mn:000047DC ; Segment permissions: Read/Execute
.text$mn:000047DC _text$mn        segment para public 'CODE' use32
.text$mn:000047DC                 assume cs:_text$mn
.text$mn:000047DC                 ;org 47DCh
.text$mn:000047DC ; COMDAT (pick any)
.text$mn:000047DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047DC
.text$mn:000047DC ; =============== S U B R O U T I N E =======================================
.text$mn:000047DC
.text$mn:000047DC ; Attributes: bp-based frame
.text$mn:000047DC
.text$mn:000047DC ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:000047DC                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:000047DC ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:000047DC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:000047DC                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:000047DC
.text$mn:000047DC arg_0           = dword ptr  8
.text$mn:000047DC
.text$mn:000047DC                 push    ebp
.text$mn:000047DD                 mov     ebp, esp
.text$mn:000047DF                 mov     eax, [ebp+arg_0]
.text$mn:000047E2                 pop     ebp
.text$mn:000047E3                 retn
.text$mn:000047E3 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:000047E3
.text$mn:000047E3 _text$mn        ends
.text$mn:000047E3
.text$mn:000047E4 ; ===========================================================================
.text$mn:000047E4
.text$mn:000047E4 ; Segment type: Pure code
.text$mn:000047E4 ; Segment permissions: Read/Execute
.text$mn:000047E4 _text$mn        segment para public 'CODE' use32
.text$mn:000047E4                 assume cs:_text$mn
.text$mn:000047E4                 ;org 47E4h
.text$mn:000047E4 ; COMDAT (pick any)
.text$mn:000047E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047E4
.text$mn:000047E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000047E4
.text$mn:000047E4 ; Attributes: bp-based frame
.text$mn:000047E4
.text$mn:000047E4 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000047E4                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:000047E4 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:000047E4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:000047E4                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:000047E4
.text$mn:000047E4 arg_0           = dword ptr  8
.text$mn:000047E4
.text$mn:000047E4                 push    ebp
.text$mn:000047E5                 mov     ebp, esp
.text$mn:000047E7                 mov     eax, [ebp+arg_0]
.text$mn:000047EA                 pop     ebp
.text$mn:000047EB                 retn
.text$mn:000047EB ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:000047EB
.text$mn:000047EB _text$mn        ends
.text$mn:000047EB
.text$mn:000047EC ; ===========================================================================
.text$mn:000047EC
.text$mn:000047EC ; Segment type: Pure code
.text$mn:000047EC ; Segment permissions: Read/Execute
.text$mn:000047EC _text$mn        segment para public 'CODE' use32
.text$mn:000047EC                 assume cs:_text$mn
.text$mn:000047EC                 ;org 47ECh
.text$mn:000047EC ; COMDAT (pick any)
.text$mn:000047EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047EC
.text$mn:000047EC ; =============== S U B R O U T I N E =======================================
.text$mn:000047EC
.text$mn:000047EC ; Attributes: bp-based frame
.text$mn:000047EC
.text$mn:000047EC ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:000047EC                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:000047EC ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:000047EC                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:000047EC
.text$mn:000047EC arg_0           = dword ptr  8
.text$mn:000047EC
.text$mn:000047EC                 push    ebp
.text$mn:000047ED                 mov     ebp, esp
.text$mn:000047EF                 mov     eax, [ebp+arg_0]
.text$mn:000047F2                 pop     ebp
.text$mn:000047F3                 retn
.text$mn:000047F3 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:000047F3
.text$mn:000047F3 _text$mn        ends
.text$mn:000047F3
.text$mn:000047F4 ; ===========================================================================
.text$mn:000047F4
.text$mn:000047F4 ; Segment type: Pure code
.text$mn:000047F4 ; Segment permissions: Read/Execute
.text$mn:000047F4 _text$mn        segment para public 'CODE' use32
.text$mn:000047F4                 assume cs:_text$mn
.text$mn:000047F4                 ;org 47F4h
.text$mn:000047F4 ; COMDAT (pick any)
.text$mn:000047F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047F4
.text$mn:000047F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000047F4
.text$mn:000047F4 ; Attributes: bp-based frame
.text$mn:000047F4
.text$mn:000047F4 ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> && __cdecl std::forward<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
.text$mn:000047F4                 public ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
.text$mn:000047F4 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
.text$mn:000047F4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+54p
.text$mn:000047F4
.text$mn:000047F4 arg_0           = dword ptr  8
.text$mn:000047F4
.text$mn:000047F4                 push    ebp
.text$mn:000047F5                 mov     ebp, esp
.text$mn:000047F7                 mov     eax, [ebp+arg_0]
.text$mn:000047FA                 pop     ebp
.text$mn:000047FB                 retn
.text$mn:000047FB ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z endp
.text$mn:000047FB
.text$mn:000047FB _text$mn        ends
.text$mn:000047FB
.text$mn:000047FC ; ===========================================================================
.text$mn:000047FC
.text$mn:000047FC ; Segment type: Pure code
.text$mn:000047FC ; Segment permissions: Read/Execute
.text$mn:000047FC _text$mn        segment para public 'CODE' use32
.text$mn:000047FC                 assume cs:_text$mn
.text$mn:000047FC                 ;org 47FCh
.text$mn:000047FC ; COMDAT (pick any)
.text$mn:000047FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047FC
.text$mn:000047FC ; =============== S U B R O U T I N E =======================================
.text$mn:000047FC
.text$mn:000047FC ; Attributes: bp-based frame
.text$mn:000047FC
.text$mn:000047FC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:000047FC                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:000047FC ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:000047FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:000047FC
.text$mn:000047FC arg_0           = dword ptr  8
.text$mn:000047FC
.text$mn:000047FC                 push    ebp
.text$mn:000047FD                 mov     ebp, esp
.text$mn:000047FF                 mov     eax, [ebp+arg_0]
.text$mn:00004802                 pop     ebp
.text$mn:00004803                 retn
.text$mn:00004803 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00004803
.text$mn:00004803 _text$mn        ends
.text$mn:00004803
.text$mn:00004804 ; ===========================================================================
.text$mn:00004804
.text$mn:00004804 ; Segment type: Pure code
.text$mn:00004804 ; Segment permissions: Read/Execute
.text$mn:00004804 _text$mn        segment para public 'CODE' use32
.text$mn:00004804                 assume cs:_text$mn
.text$mn:00004804                 ;org 4804h
.text$mn:00004804 ; COMDAT (pick any)
.text$mn:00004804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004804
.text$mn:00004804 ; =============== S U B R O U T I N E =======================================
.text$mn:00004804
.text$mn:00004804 ; Attributes: bp-based frame
.text$mn:00004804
.text$mn:00004804 ; int __cdecl std::use_facet<std::ctype<wchar_t>>(std::locale *)
.text$mn:00004804                 public ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:00004804 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$mn:00004804                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::widen(char)+48p
.text$mn:00004804
.text$mn:00004804 var_30          = byte ptr -30h
.text$mn:00004804 var_24          = dword ptr -24h
.text$mn:00004804 var_20          = byte ptr -20h
.text$mn:00004804 var_1C          = dword ptr -1Ch
.text$mn:00004804 var_18          = dword ptr -18h
.text$mn:00004804 var_14          = dword ptr -14h
.text$mn:00004804 var_10          = dword ptr -10h
.text$mn:00004804 var_C           = dword ptr -0Ch
.text$mn:00004804 var_4           = dword ptr -4
.text$mn:00004804 arg_0           = dword ptr  8
.text$mn:00004804
.text$mn:00004804                 push    ebp
.text$mn:00004805                 mov     ebp, esp
.text$mn:00004807                 push    0FFFFFFFFh
.text$mn:00004809                 push    offset __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:0000480E                 mov     eax, large fs:0
.text$mn:00004814                 push    eax
.text$mn:00004815                 sub     esp, 24h
.text$mn:00004818                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000481D                 xor     eax, ebp
.text$mn:0000481F                 push    eax
.text$mn:00004820                 lea     eax, [ebp+var_C]
.text$mn:00004823                 mov     large fs:0, eax
.text$mn:00004829                 push    0               ; int
.text$mn:0000482B                 lea     ecx, [ebp+var_20] ; this
.text$mn:0000482E                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004833                 mov     [ebp+var_4], 0
.text$mn:0000483A                 mov     eax, ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:0000483F                 mov     [ebp+var_10], eax
.text$mn:00004842                 mov     ecx, offset ?id@?$ctype@_W@std@@2V0locale@2@A ; std::locale::id std::ctype<wchar_t>::id
.text$mn:00004847                 call    ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator uint(void)
.text$mn:0000484C                 mov     [ebp+var_1C], eax
.text$mn:0000484F                 mov     ecx, [ebp+var_1C]
.text$mn:00004852                 push    ecx             ; unsigned int
.text$mn:00004853                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004856                 call    ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet(uint)
.text$mn:0000485B                 mov     [ebp+var_14], eax
.text$mn:0000485E                 cmp     [ebp+var_14], 0
.text$mn:00004862                 jz      short loc_4866
.text$mn:00004864                 jmp     short loc_48D4
.text$mn:00004866 ; ---------------------------------------------------------------------------
.text$mn:00004866
.text$mn:00004866 loc_4866:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5Ej
.text$mn:00004866                 cmp     [ebp+var_10], 0
.text$mn:0000486A                 jz      short loc_4874
.text$mn:0000486C                 mov     edx, [ebp+var_10]
.text$mn:0000486F                 mov     [ebp+var_14], edx
.text$mn:00004872                 jmp     short loc_48D4
.text$mn:00004874 ; ---------------------------------------------------------------------------
.text$mn:00004874
.text$mn:00004874 loc_4874:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+66j
.text$mn:00004874                 mov     eax, [ebp+arg_0]
.text$mn:00004877                 push    eax             ; std::locale *
.text$mn:00004878                 lea     ecx, [ebp+var_10]
.text$mn:0000487B                 push    ecx             ; int
.text$mn:0000487C                 call    ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)
.text$mn:00004881                 add     esp, 8
.text$mn:00004884                 cmp     eax, 0FFFFFFFFh
.text$mn:00004887                 jnz     short loc_48A6
.text$mn:00004889                 push    offset ??_C@_08EPJLHIJG@bad?5cast?$AA@ ; "bad cast"
.text$mn:0000488E                 lea     ecx, [ebp+var_30] ; this
.text$mn:00004891                 call    ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast(char const *)
.text$mn:00004896                 push    offset __TI2?AVbad_cast@std@@
.text$mn:0000489B                 lea     edx, [ebp+var_30]
.text$mn:0000489E                 push    edx
.text$mn:0000489F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000048A4 ; ---------------------------------------------------------------------------
.text$mn:000048A4                 jmp     short loc_48D4
.text$mn:000048A6 ; ---------------------------------------------------------------------------
.text$mn:000048A6
.text$mn:000048A6 loc_48A6:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+83j
.text$mn:000048A6                 mov     eax, [ebp+var_10]
.text$mn:000048A9                 mov     [ebp+var_14], eax
.text$mn:000048AC                 mov     ecx, [ebp+var_10]
.text$mn:000048AF                 mov     ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:000048B5                 mov     edx, [ebp+var_10]
.text$mn:000048B8                 mov     [ebp+var_18], edx
.text$mn:000048BB                 mov     eax, [ebp+var_18]
.text$mn:000048BE                 mov     edx, [eax]
.text$mn:000048C0                 mov     ecx, [ebp+var_18]
.text$mn:000048C3                 mov     eax, [edx+4]
.text$mn:000048C6                 call    eax
.text$mn:000048C8                 mov     ecx, [ebp+var_18]
.text$mn:000048CB                 push    ecx             ; struct std::_Facet_base *
.text$mn:000048CC                 call    ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register(std::_Facet_base *)
.text$mn:000048D1                 add     esp, 4
.text$mn:000048D4
.text$mn:000048D4 loc_48D4:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+60j
.text$mn:000048D4                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+6Ej ...
.text$mn:000048D4                 mov     edx, [ebp+var_14]
.text$mn:000048D7                 mov     [ebp+var_24], edx
.text$mn:000048DA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048E1                 lea     ecx, [ebp+var_20] ; this
.text$mn:000048E4                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000048E9                 mov     eax, [ebp+var_24]
.text$mn:000048EC                 mov     ecx, [ebp+var_C]
.text$mn:000048EF                 mov     large fs:0, ecx
.text$mn:000048F6                 pop     ecx
.text$mn:000048F7                 mov     esp, ebp
.text$mn:000048F9                 pop     ebp
.text$mn:000048FA                 retn
.text$mn:000048FA ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$mn:000048FA
.text$mn:000048FA ; ---------------------------------------------------------------------------
.text$mn:000048FB                 align 4
.text$mn:000048FB _text$mn        ends
.text$mn:000048FB
.text$x:000048FC ; ===========================================================================
.text$x:000048FC
.text$x:000048FC ; Segment type: Pure code
.text$x:000048FC ; Segment permissions: Read/Execute
.text$x:000048FC _text$x         segment para public 'CODE' use32
.text$x:000048FC                 assume cs:_text$x
.text$x:000048FC                 ;org 48FCh
.text$x:000048FC ; COMDAT (pick associative to section at 4804)
.text$x:000048FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048FC
.text$x:000048FC ; =============== S U B R O U T I N E =======================================
.text$x:000048FC
.text$x:000048FC
.text$x:000048FC __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 proc near
.text$x:000048FC                                         ; DATA XREF: .xdata$x:0000D1C4o
.text$x:000048FC                 lea     ecx, [ebp-20h]  ; this
.text$x:000048FF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000048FF __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 endp
.text$x:000048FF
.text$x:00004904
.text$x:00004904 ; =============== S U B R O U T I N E =======================================
.text$x:00004904
.text$x:00004904
.text$x:00004904 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$x:00004904                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5o
.text$x:00004904
.text$x:00004904 arg_4           = dword ptr  8
.text$x:00004904
.text$x:00004904                 mov     edx, [esp+arg_4]
.text$x:00004908                 lea     eax, [edx+0Ch]
.text$x:0000490B                 mov     ecx, [edx-28h]
.text$x:0000490E                 xor     ecx, eax
.text$x:00004910                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004915                 mov     eax, offset __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$x:0000491A                 jmp     ___CxxFrameHandler3
.text$x:0000491A __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$x:0000491A
.text$x:0000491A ; ---------------------------------------------------------------------------
.text$x:0000491F                 align 10h
.text$x:0000491F _text$x         ends
.text$x:0000491F
.text$mn:00004920 ; ===========================================================================
.text$mn:00004920
.text$mn:00004920 ; Segment type: Pure code
.text$mn:00004920 ; Segment permissions: Read/Execute
.text$mn:00004920 _text$mn        segment para public 'CODE' use32
.text$mn:00004920                 assume cs:_text$mn
.text$mn:00004920                 ;org 4920h
.text$mn:00004920 ; COMDAT (pick any)
.text$mn:00004920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004920
.text$mn:00004920 ; =============== S U B R O U T I N E =======================================
.text$mn:00004920
.text$mn:00004920 ; Attributes: bp-based frame
.text$mn:00004920
.text$mn:00004920 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00004920                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00004920 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00004920                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+38p
.text$mn:00004920                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+43p ...
.text$mn:00004920
.text$mn:00004920 var_10          = dword ptr -10h
.text$mn:00004920 var_C           = dword ptr -0Ch
.text$mn:00004920 var_4           = dword ptr -4
.text$mn:00004920
.text$mn:00004920                 push    ebp
.text$mn:00004921                 mov     ebp, esp
.text$mn:00004923                 push    0FFFFFFFFh
.text$mn:00004925                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000492A                 mov     eax, large fs:0
.text$mn:00004930                 push    eax
.text$mn:00004931                 push    ecx
.text$mn:00004932                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004937                 xor     eax, ebp
.text$mn:00004939                 push    eax
.text$mn:0000493A                 lea     eax, [ebp+var_C]
.text$mn:0000493D                 mov     large fs:0, eax
.text$mn:00004943                 mov     [ebp+var_10], ecx
.text$mn:00004946                 mov     ecx, [ebp+var_10]
.text$mn:00004949                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:0000494E                 mov     [ebp+var_4], 0
.text$mn:00004955                 mov     ecx, [ebp+var_10]
.text$mn:00004958                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000495D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004964                 mov     eax, [ebp+var_10]
.text$mn:00004967                 mov     ecx, [ebp+var_C]
.text$mn:0000496A                 mov     large fs:0, ecx
.text$mn:00004971                 pop     ecx
.text$mn:00004972                 mov     esp, ebp
.text$mn:00004974                 pop     ebp
.text$mn:00004975                 retn    4
.text$mn:00004975 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00004975
.text$mn:00004975 _text$mn        ends
.text$mn:00004975
.text$x:00004978 ; ===========================================================================
.text$x:00004978
.text$x:00004978 ; Segment type: Pure code
.text$x:00004978 ; Segment permissions: Read/Execute
.text$x:00004978 _text$x         segment para public 'CODE' use32
.text$x:00004978                 assume cs:_text$x
.text$x:00004978                 ;org 4978h
.text$x:00004978 ; COMDAT (pick associative to section at 4920)
.text$x:00004978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004978
.text$x:00004978 ; =============== S U B R O U T I N E =======================================
.text$x:00004978
.text$x:00004978
.text$x:00004978 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00004978                                         ; DATA XREF: .xdata$x:0000C900o
.text$x:00004978                 mov     ecx, [ebp-10h]
.text$x:0000497B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000497B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:0000497B
.text$x:00004980
.text$x:00004980 ; =============== S U B R O U T I N E =======================================
.text$x:00004980
.text$x:00004980
.text$x:00004980 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00004980                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00004980
.text$x:00004980 arg_4           = dword ptr  8
.text$x:00004980
.text$x:00004980                 mov     edx, [esp+arg_4]
.text$x:00004984                 lea     eax, [edx+0Ch]
.text$x:00004987                 mov     ecx, [edx-8]
.text$x:0000498A                 xor     ecx, eax
.text$x:0000498C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004991                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00004996                 jmp     ___CxxFrameHandler3
.text$x:00004996 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00004996
.text$x:00004996 ; ---------------------------------------------------------------------------
.text$x:0000499B                 align 4
.text$x:0000499B _text$x         ends
.text$x:0000499B
.text$mn:0000499C ; ===========================================================================
.text$mn:0000499C
.text$mn:0000499C ; Segment type: Pure code
.text$mn:0000499C ; Segment permissions: Read/Execute
.text$mn:0000499C _text$mn        segment para public 'CODE' use32
.text$mn:0000499C                 assume cs:_text$mn
.text$mn:0000499C                 ;org 499Ch
.text$mn:0000499C ; COMDAT (pick any)
.text$mn:0000499C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000499C
.text$mn:0000499C ; =============== S U B R O U T I N E =======================================
.text$mn:0000499C
.text$mn:0000499C ; Attributes: bp-based frame
.text$mn:0000499C
.text$mn:0000499C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:0000499C                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:0000499C ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:0000499C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:0000499C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:0000499C
.text$mn:0000499C var_10          = dword ptr -10h
.text$mn:0000499C var_C           = dword ptr -0Ch
.text$mn:0000499C var_4           = dword ptr -4
.text$mn:0000499C
.text$mn:0000499C                 push    ebp
.text$mn:0000499D                 mov     ebp, esp
.text$mn:0000499F                 push    0FFFFFFFFh
.text$mn:000049A1                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000049A6                 mov     eax, large fs:0
.text$mn:000049AC                 push    eax
.text$mn:000049AD                 push    ecx
.text$mn:000049AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000049B3                 xor     eax, ebp
.text$mn:000049B5                 push    eax
.text$mn:000049B6                 lea     eax, [ebp+var_C]
.text$mn:000049B9                 mov     large fs:0, eax
.text$mn:000049BF                 mov     [ebp+var_10], ecx
.text$mn:000049C2                 mov     ecx, [ebp+var_10]
.text$mn:000049C5                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000049CA                 mov     [ebp+var_4], 0
.text$mn:000049D1                 mov     ecx, [ebp+var_10]
.text$mn:000049D4                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000049D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000049E0                 mov     eax, [ebp+var_10]
.text$mn:000049E3                 mov     ecx, [ebp+var_C]
.text$mn:000049E6                 mov     large fs:0, ecx
.text$mn:000049ED                 pop     ecx
.text$mn:000049EE                 mov     esp, ebp
.text$mn:000049F0                 pop     ebp
.text$mn:000049F1                 retn    4
.text$mn:000049F1 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000049F1
.text$mn:000049F1 _text$mn        ends
.text$mn:000049F1
.text$x:000049F4 ; ===========================================================================
.text$x:000049F4
.text$x:000049F4 ; Segment type: Pure code
.text$x:000049F4 ; Segment permissions: Read/Execute
.text$x:000049F4 _text$x         segment para public 'CODE' use32
.text$x:000049F4                 assume cs:_text$x
.text$x:000049F4                 ;org 49F4h
.text$x:000049F4 ; COMDAT (pick associative to section at 499C)
.text$x:000049F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000049F4
.text$x:000049F4 ; =============== S U B R O U T I N E =======================================
.text$x:000049F4
.text$x:000049F4
.text$x:000049F4 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:000049F4                                         ; DATA XREF: .xdata$x:0000D248o
.text$x:000049F4                 mov     ecx, [ebp-10h]
.text$x:000049F7                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000049F7 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:000049F7
.text$x:000049FC
.text$x:000049FC ; =============== S U B R O U T I N E =======================================
.text$x:000049FC
.text$x:000049FC
.text$x:000049FC __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:000049FC                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:000049FC
.text$x:000049FC arg_4           = dword ptr  8
.text$x:000049FC
.text$x:000049FC                 mov     edx, [esp+arg_4]
.text$x:00004A00                 lea     eax, [edx+0Ch]
.text$x:00004A03                 mov     ecx, [edx-8]
.text$x:00004A06                 xor     ecx, eax
.text$x:00004A08                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A0D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00004A12                 jmp     ___CxxFrameHandler3
.text$x:00004A12 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00004A12
.text$x:00004A12 ; ---------------------------------------------------------------------------
.text$x:00004A17                 align 4
.text$x:00004A17 _text$x         ends
.text$x:00004A17
.text$mn:00004A18 ; ===========================================================================
.text$mn:00004A18
.text$mn:00004A18 ; Segment type: Pure code
.text$mn:00004A18 ; Segment permissions: Read/Execute
.text$mn:00004A18 _text$mn        segment para public 'CODE' use32
.text$mn:00004A18                 assume cs:_text$mn
.text$mn:00004A18                 ;org 4A18h
.text$mn:00004A18 ; COMDAT (pick any)
.text$mn:00004A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A18
.text$mn:00004A18 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A18
.text$mn:00004A18 ; Attributes: bp-based frame
.text$mn:00004A18
.text$mn:00004A18 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00004A18                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004A18 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00004A18                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00004A18
.text$mn:00004A18 var_10          = dword ptr -10h
.text$mn:00004A18 var_C           = dword ptr -0Ch
.text$mn:00004A18 var_4           = dword ptr -4
.text$mn:00004A18
.text$mn:00004A18                 push    ebp
.text$mn:00004A19                 mov     ebp, esp
.text$mn:00004A1B                 push    0FFFFFFFFh
.text$mn:00004A1D                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004A22                 mov     eax, large fs:0
.text$mn:00004A28                 push    eax
.text$mn:00004A29                 push    ecx
.text$mn:00004A2A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A2F                 xor     eax, ebp
.text$mn:00004A31                 push    eax
.text$mn:00004A32                 lea     eax, [ebp+var_C]
.text$mn:00004A35                 mov     large fs:0, eax
.text$mn:00004A3B                 mov     [ebp+var_10], ecx
.text$mn:00004A3E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004A41                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00004A46                 mov     [ebp+var_4], 0
.text$mn:00004A4D                 mov     eax, [ebp+var_10]
.text$mn:00004A50                 mov     dword ptr [eax+14h], 0
.text$mn:00004A57                 mov     ecx, [ebp+var_10]
.text$mn:00004A5A                 mov     dword ptr [ecx+18h], 0
.text$mn:00004A61                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A68                 mov     eax, [ebp+var_10]
.text$mn:00004A6B                 mov     ecx, [ebp+var_C]
.text$mn:00004A6E                 mov     large fs:0, ecx
.text$mn:00004A75                 pop     ecx
.text$mn:00004A76                 mov     esp, ebp
.text$mn:00004A78                 pop     ebp
.text$mn:00004A79                 retn
.text$mn:00004A79 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00004A79
.text$mn:00004A79 ; ---------------------------------------------------------------------------
.text$mn:00004A7A                 align 4
.text$mn:00004A7A _text$mn        ends
.text$mn:00004A7A
.text$x:00004A7C ; ===========================================================================
.text$x:00004A7C
.text$x:00004A7C ; Segment type: Pure code
.text$x:00004A7C ; Segment permissions: Read/Execute
.text$x:00004A7C _text$x         segment para public 'CODE' use32
.text$x:00004A7C                 assume cs:_text$x
.text$x:00004A7C                 ;org 4A7Ch
.text$x:00004A7C ; COMDAT (pick associative to section at 4A18)
.text$x:00004A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A7C
.text$x:00004A7C ; =============== S U B R O U T I N E =======================================
.text$x:00004A7C
.text$x:00004A7C
.text$x:00004A7C __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00004A7C                                         ; DATA XREF: .xdata$x:0000C8A8o
.text$x:00004A7C                 mov     ecx, [ebp-10h]  ; this
.text$x:00004A7F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004A7F __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00004A7F
.text$x:00004A84
.text$x:00004A84 ; =============== S U B R O U T I N E =======================================
.text$x:00004A84
.text$x:00004A84
.text$x:00004A84 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004A84                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004A84
.text$x:00004A84 arg_4           = dword ptr  8
.text$x:00004A84
.text$x:00004A84                 mov     edx, [esp+arg_4]
.text$x:00004A88                 lea     eax, [edx+0Ch]
.text$x:00004A8B                 mov     ecx, [edx-8]
.text$x:00004A8E                 xor     ecx, eax
.text$x:00004A90                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A95                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00004A9A                 jmp     ___CxxFrameHandler3
.text$x:00004A9A __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00004A9A
.text$x:00004A9A ; ---------------------------------------------------------------------------
.text$x:00004A9F                 align 10h
.text$x:00004A9F _text$x         ends
.text$x:00004A9F
.text$mn:00004AA0 ; ===========================================================================
.text$mn:00004AA0
.text$mn:00004AA0 ; Segment type: Pure code
.text$mn:00004AA0 ; Segment permissions: Read/Execute
.text$mn:00004AA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AA0                 assume cs:_text$mn
.text$mn:00004AA0                 ;org 4AA0h
.text$mn:00004AA0 ; COMDAT (pick any)
.text$mn:00004AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AA0
.text$mn:00004AA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AA0
.text$mn:00004AA0 ; Attributes: bp-based frame
.text$mn:00004AA0
.text$mn:00004AA0 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00004AA0                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004AA0 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004AA0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00004AA0
.text$mn:00004AA0 var_10          = dword ptr -10h
.text$mn:00004AA0 var_C           = dword ptr -0Ch
.text$mn:00004AA0 var_4           = dword ptr -4
.text$mn:00004AA0
.text$mn:00004AA0                 push    ebp
.text$mn:00004AA1                 mov     ebp, esp
.text$mn:00004AA3                 push    0FFFFFFFFh
.text$mn:00004AA5                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004AAA                 mov     eax, large fs:0
.text$mn:00004AB0                 push    eax
.text$mn:00004AB1                 push    ecx
.text$mn:00004AB2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004AB7                 xor     eax, ebp
.text$mn:00004AB9                 push    eax
.text$mn:00004ABA                 lea     eax, [ebp+var_C]
.text$mn:00004ABD                 mov     large fs:0, eax
.text$mn:00004AC3                 mov     [ebp+var_10], ecx
.text$mn:00004AC6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004AC9                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00004ACE                 mov     [ebp+var_4], 0
.text$mn:00004AD5                 mov     eax, [ebp+var_10]
.text$mn:00004AD8                 mov     dword ptr [eax+14h], 0
.text$mn:00004ADF                 mov     ecx, [ebp+var_10]
.text$mn:00004AE2                 mov     dword ptr [ecx+18h], 0
.text$mn:00004AE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004AF0                 mov     eax, [ebp+var_10]
.text$mn:00004AF3                 mov     ecx, [ebp+var_C]
.text$mn:00004AF6                 mov     large fs:0, ecx
.text$mn:00004AFD                 pop     ecx
.text$mn:00004AFE                 mov     esp, ebp
.text$mn:00004B00                 pop     ebp
.text$mn:00004B01                 retn
.text$mn:00004B01 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00004B01
.text$mn:00004B01 ; ---------------------------------------------------------------------------
.text$mn:00004B02                 align 4
.text$mn:00004B02 _text$mn        ends
.text$mn:00004B02
.text$x:00004B04 ; ===========================================================================
.text$x:00004B04
.text$x:00004B04 ; Segment type: Pure code
.text$x:00004B04 ; Segment permissions: Read/Execute
.text$x:00004B04 _text$x         segment para public 'CODE' use32
.text$x:00004B04                 assume cs:_text$x
.text$x:00004B04                 ;org 4B04h
.text$x:00004B04 ; COMDAT (pick associative to section at 4AA0)
.text$x:00004B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B04
.text$x:00004B04 ; =============== S U B R O U T I N E =======================================
.text$x:00004B04
.text$x:00004B04
.text$x:00004B04 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004B04                                         ; DATA XREF: .xdata$x:0000D1F0o
.text$x:00004B04                 mov     ecx, [ebp-10h]  ; this
.text$x:00004B07                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004B07 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00004B07
.text$x:00004B0C
.text$x:00004B0C ; =============== S U B R O U T I N E =======================================
.text$x:00004B0C
.text$x:00004B0C
.text$x:00004B0C __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004B0C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004B0C
.text$x:00004B0C arg_4           = dword ptr  8
.text$x:00004B0C
.text$x:00004B0C                 mov     edx, [esp+arg_4]
.text$x:00004B10                 lea     eax, [edx+0Ch]
.text$x:00004B13                 mov     ecx, [edx-8]
.text$x:00004B16                 xor     ecx, eax
.text$x:00004B18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B1D                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00004B22                 jmp     ___CxxFrameHandler3
.text$x:00004B22 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00004B22
.text$x:00004B22 ; ---------------------------------------------------------------------------
.text$x:00004B27                 align 4
.text$x:00004B27 _text$x         ends
.text$x:00004B27
.text$mn:00004B28 ; ===========================================================================
.text$mn:00004B28
.text$mn:00004B28 ; Segment type: Pure code
.text$mn:00004B28 ; Segment permissions: Read/Execute
.text$mn:00004B28 _text$mn        segment para public 'CODE' use32
.text$mn:00004B28                 assume cs:_text$mn
.text$mn:00004B28                 ;org 4B28h
.text$mn:00004B28 ; COMDAT (pick any)
.text$mn:00004B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B28
.text$mn:00004B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B28
.text$mn:00004B28 ; Attributes: bp-based frame
.text$mn:00004B28
.text$mn:00004B28 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(class std::allocator<char> const &)
.text$mn:00004B28                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00004B28 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00004B28                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00004B28
.text$mn:00004B28 var_4           = dword ptr -4
.text$mn:00004B28 arg_0           = dword ptr  8
.text$mn:00004B28
.text$mn:00004B28                 push    ebp
.text$mn:00004B29                 mov     ebp, esp
.text$mn:00004B2B                 push    ecx
.text$mn:00004B2C                 mov     [ebp+var_4], ecx
.text$mn:00004B2F                 mov     eax, [ebp+arg_0]
.text$mn:00004B32                 push    eax
.text$mn:00004B33                 mov     ecx, [ebp+var_4]
.text$mn:00004B36                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:00004B3B                 mov     eax, [ebp+var_4]
.text$mn:00004B3E                 mov     esp, ebp
.text$mn:00004B40                 pop     ebp
.text$mn:00004B41                 retn    4
.text$mn:00004B41 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00004B41
.text$mn:00004B41 _text$mn        ends
.text$mn:00004B41
.text$mn:00004B44 ; ===========================================================================
.text$mn:00004B44
.text$mn:00004B44 ; Segment type: Pure code
.text$mn:00004B44 ; Segment permissions: Read/Execute
.text$mn:00004B44 _text$mn        segment para public 'CODE' use32
.text$mn:00004B44                 assume cs:_text$mn
.text$mn:00004B44                 ;org 4B44h
.text$mn:00004B44 ; COMDAT (pick any)
.text$mn:00004B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B44
.text$mn:00004B44 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B44
.text$mn:00004B44 ; Attributes: bp-based frame
.text$mn:00004B44
.text$mn:00004B44 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00004B44                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00004B44 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00004B44                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00004B44
.text$mn:00004B44 var_4           = dword ptr -4
.text$mn:00004B44
.text$mn:00004B44                 push    ebp
.text$mn:00004B45                 mov     ebp, esp
.text$mn:00004B47                 push    ecx
.text$mn:00004B48                 mov     [ebp+var_4], ecx
.text$mn:00004B4B                 mov     ecx, [ebp+var_4]
.text$mn:00004B4E                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004B53                 mov     eax, [ebp+var_4]
.text$mn:00004B56                 mov     esp, ebp
.text$mn:00004B58                 pop     ebp
.text$mn:00004B59                 retn
.text$mn:00004B59 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00004B59
.text$mn:00004B59 ; ---------------------------------------------------------------------------
.text$mn:00004B5A                 align 4
.text$mn:00004B5A _text$mn        ends
.text$mn:00004B5A
.text$mn:00004B5C ; ===========================================================================
.text$mn:00004B5C
.text$mn:00004B5C ; Segment type: Pure code
.text$mn:00004B5C ; Segment permissions: Read/Execute
.text$mn:00004B5C _text$mn        segment para public 'CODE' use32
.text$mn:00004B5C                 assume cs:_text$mn
.text$mn:00004B5C                 ;org 4B5Ch
.text$mn:00004B5C ; COMDAT (pick any)
.text$mn:00004B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B5C
.text$mn:00004B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B5C
.text$mn:00004B5C ; Attributes: bp-based frame
.text$mn:00004B5C
.text$mn:00004B5C ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00004B5C                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004B5C ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00004B5C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00004B5C
.text$mn:00004B5C var_4           = dword ptr -4
.text$mn:00004B5C arg_0           = dword ptr  8
.text$mn:00004B5C
.text$mn:00004B5C                 push    ebp
.text$mn:00004B5D                 mov     ebp, esp
.text$mn:00004B5F                 push    ecx
.text$mn:00004B60                 mov     [ebp+var_4], ecx
.text$mn:00004B63                 mov     eax, [ebp+arg_0]
.text$mn:00004B66                 push    eax
.text$mn:00004B67                 mov     ecx, [ebp+var_4]
.text$mn:00004B6A                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004B6F                 mov     eax, [ebp+var_4]
.text$mn:00004B72                 mov     esp, ebp
.text$mn:00004B74                 pop     ebp
.text$mn:00004B75                 retn    4
.text$mn:00004B75 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00004B75
.text$mn:00004B75 _text$mn        ends
.text$mn:00004B75
.text$mn:00004B78 ; ===========================================================================
.text$mn:00004B78
.text$mn:00004B78 ; Segment type: Pure code
.text$mn:00004B78 ; Segment permissions: Read/Execute
.text$mn:00004B78 _text$mn        segment para public 'CODE' use32
.text$mn:00004B78                 assume cs:_text$mn
.text$mn:00004B78                 ;org 4B78h
.text$mn:00004B78 ; COMDAT (pick any)
.text$mn:00004B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B78
.text$mn:00004B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B78
.text$mn:00004B78 ; Attributes: bp-based frame
.text$mn:00004B78
.text$mn:00004B78 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00004B78                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00004B78 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004B78                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00004B78
.text$mn:00004B78 var_4           = dword ptr -4
.text$mn:00004B78
.text$mn:00004B78                 push    ebp
.text$mn:00004B79                 mov     ebp, esp
.text$mn:00004B7B                 push    ecx
.text$mn:00004B7C                 mov     [ebp+var_4], ecx
.text$mn:00004B7F                 mov     ecx, [ebp+var_4]
.text$mn:00004B82                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004B87                 mov     eax, [ebp+var_4]
.text$mn:00004B8A                 mov     esp, ebp
.text$mn:00004B8C                 pop     ebp
.text$mn:00004B8D                 retn
.text$mn:00004B8D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00004B8D
.text$mn:00004B8D ; ---------------------------------------------------------------------------
.text$mn:00004B8E                 align 10h
.text$mn:00004B8E _text$mn        ends
.text$mn:00004B8E
.text$mn:00004B90 ; ===========================================================================
.text$mn:00004B90
.text$mn:00004B90 ; Segment type: Pure code
.text$mn:00004B90 ; Segment permissions: Read/Execute
.text$mn:00004B90 _text$mn        segment para public 'CODE' use32
.text$mn:00004B90                 assume cs:_text$mn
.text$mn:00004B90                 ;org 4B90h
.text$mn:00004B90 ; COMDAT (pick any)
.text$mn:00004B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B90
.text$mn:00004B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B90
.text$mn:00004B90 ; Attributes: bp-based frame
.text$mn:00004B90
.text$mn:00004B90 ; public: __thiscall std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00004B90                 public ??0?$_Yarn@D@std@@QAE@XZ
.text$mn:00004B90 ??0?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+3Fp
.text$mn:00004B90                                         ; std::_Locinfo::_Locinfo(char const *)+4Ep ...
.text$mn:00004B90
.text$mn:00004B90 var_4           = dword ptr -4
.text$mn:00004B90
.text$mn:00004B90                 push    ebp
.text$mn:00004B91                 mov     ebp, esp
.text$mn:00004B93                 push    ecx
.text$mn:00004B94                 mov     [ebp+var_4], ecx
.text$mn:00004B97                 mov     eax, [ebp+var_4]
.text$mn:00004B9A                 mov     dword ptr [eax], 0
.text$mn:00004BA0                 mov     ecx, [ebp+var_4]
.text$mn:00004BA3                 mov     byte ptr [ecx+4], 0
.text$mn:00004BA7                 mov     eax, [ebp+var_4]
.text$mn:00004BAA                 mov     esp, ebp
.text$mn:00004BAC                 pop     ebp
.text$mn:00004BAD                 retn
.text$mn:00004BAD ??0?$_Yarn@D@std@@QAE@XZ endp
.text$mn:00004BAD
.text$mn:00004BAD ; ---------------------------------------------------------------------------
.text$mn:00004BAE                 align 10h
.text$mn:00004BAE _text$mn        ends
.text$mn:00004BAE
.text$mn:00004BB0 ; ===========================================================================
.text$mn:00004BB0
.text$mn:00004BB0 ; Segment type: Pure code
.text$mn:00004BB0 ; Segment permissions: Read/Execute
.text$mn:00004BB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004BB0                 assume cs:_text$mn
.text$mn:00004BB0                 ;org 4BB0h
.text$mn:00004BB0 ; COMDAT (pick any)
.text$mn:00004BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BB0
.text$mn:00004BB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BB0
.text$mn:00004BB0 ; Attributes: bp-based frame
.text$mn:00004BB0
.text$mn:00004BB0 ; public: __thiscall std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00004BB0                 public ??0?$_Yarn@_W@std@@QAE@XZ
.text$mn:00004BB0 ??0?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+5Dp
.text$mn:00004BB0                                         ; std::_Locinfo::_Locinfo(char const *)+6Cp
.text$mn:00004BB0
.text$mn:00004BB0 var_4           = dword ptr -4
.text$mn:00004BB0
.text$mn:00004BB0                 push    ebp
.text$mn:00004BB1                 mov     ebp, esp
.text$mn:00004BB3                 push    ecx
.text$mn:00004BB4                 mov     [ebp+var_4], ecx
.text$mn:00004BB7                 mov     eax, [ebp+var_4]
.text$mn:00004BBA                 mov     dword ptr [eax], 0
.text$mn:00004BC0                 xor     ecx, ecx
.text$mn:00004BC2                 mov     edx, [ebp+var_4]
.text$mn:00004BC5                 mov     [edx+4], cx
.text$mn:00004BC9                 mov     eax, [ebp+var_4]
.text$mn:00004BCC                 mov     esp, ebp
.text$mn:00004BCE                 pop     ebp
.text$mn:00004BCF                 retn
.text$mn:00004BCF ??0?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:00004BCF
.text$mn:00004BCF _text$mn        ends
.text$mn:00004BCF
.text$mn:00004BD0 ; ===========================================================================
.text$mn:00004BD0
.text$mn:00004BD0 ; Segment type: Pure code
.text$mn:00004BD0 ; Segment permissions: Read/Execute
.text$mn:00004BD0 _text$mn        segment para public 'CODE' use32
.text$mn:00004BD0                 assume cs:_text$mn
.text$mn:00004BD0                 ;org 4BD0h
.text$mn:00004BD0 ; COMDAT (pick any)
.text$mn:00004BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BD0
.text$mn:00004BD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BD0
.text$mn:00004BD0 ; Attributes: bp-based frame
.text$mn:00004BD0
.text$mn:00004BD0 ; public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)
.text$mn:00004BD0                 public ??0?$allocator@D@std@@QAE@ABV01@@Z
.text$mn:00004BD0 ??0?$allocator@D@std@@QAE@ABV01@@Z proc near
.text$mn:00004BD0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(std::allocator<char> const &)+Ep
.text$mn:00004BD0                                         ; std::allocator<char>::select_on_container_copy_construction(void)+Ep
.text$mn:00004BD0
.text$mn:00004BD0 var_4           = dword ptr -4
.text$mn:00004BD0
.text$mn:00004BD0                 push    ebp
.text$mn:00004BD1                 mov     ebp, esp
.text$mn:00004BD3                 push    ecx
.text$mn:00004BD4                 mov     [ebp+var_4], ecx
.text$mn:00004BD7                 mov     eax, [ebp+var_4]
.text$mn:00004BDA                 mov     esp, ebp
.text$mn:00004BDC                 pop     ebp
.text$mn:00004BDD                 retn    4
.text$mn:00004BDD ??0?$allocator@D@std@@QAE@ABV01@@Z endp
.text$mn:00004BDD
.text$mn:00004BDD _text$mn        ends
.text$mn:00004BDD
.text$mn:00004BE0 ; ===========================================================================
.text$mn:00004BE0
.text$mn:00004BE0 ; Segment type: Pure code
.text$mn:00004BE0 ; Segment permissions: Read/Execute
.text$mn:00004BE0 _text$mn        segment para public 'CODE' use32
.text$mn:00004BE0                 assume cs:_text$mn
.text$mn:00004BE0                 ;org 4BE0h
.text$mn:00004BE0 ; COMDAT (pick any)
.text$mn:00004BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BE0
.text$mn:00004BE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BE0
.text$mn:00004BE0 ; Attributes: bp-based frame
.text$mn:00004BE0
.text$mn:00004BE0 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00004BE0                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00004BE0 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00004BE0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00004BE0
.text$mn:00004BE0 var_4           = dword ptr -4
.text$mn:00004BE0
.text$mn:00004BE0                 push    ebp
.text$mn:00004BE1                 mov     ebp, esp
.text$mn:00004BE3                 push    ecx
.text$mn:00004BE4                 mov     [ebp+var_4], ecx
.text$mn:00004BE7                 mov     eax, [ebp+var_4]
.text$mn:00004BEA                 mov     esp, ebp
.text$mn:00004BEC                 pop     ebp
.text$mn:00004BED                 retn
.text$mn:00004BED ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00004BED
.text$mn:00004BED ; ---------------------------------------------------------------------------
.text$mn:00004BEE                 align 10h
.text$mn:00004BEE _text$mn        ends
.text$mn:00004BEE
.text$mn:00004BF0 ; ===========================================================================
.text$mn:00004BF0
.text$mn:00004BF0 ; Segment type: Pure code
.text$mn:00004BF0 ; Segment permissions: Read/Execute
.text$mn:00004BF0 _text$mn        segment para public 'CODE' use32
.text$mn:00004BF0                 assume cs:_text$mn
.text$mn:00004BF0                 ;org 4BF0h
.text$mn:00004BF0 ; COMDAT (pick any)
.text$mn:00004BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BF0
.text$mn:00004BF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BF0
.text$mn:00004BF0 ; Attributes: bp-based frame
.text$mn:00004BF0
.text$mn:00004BF0 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00004BF0                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00004BF0 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00004BF0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:00004BF0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00004BF0
.text$mn:00004BF0 var_4           = dword ptr -4
.text$mn:00004BF0
.text$mn:00004BF0                 push    ebp
.text$mn:00004BF1                 mov     ebp, esp
.text$mn:00004BF3                 push    ecx
.text$mn:00004BF4                 mov     [ebp+var_4], ecx
.text$mn:00004BF7                 mov     eax, [ebp+var_4]
.text$mn:00004BFA                 mov     esp, ebp
.text$mn:00004BFC                 pop     ebp
.text$mn:00004BFD                 retn
.text$mn:00004BFD ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00004BFD
.text$mn:00004BFD ; ---------------------------------------------------------------------------
.text$mn:00004BFE                 align 10h
.text$mn:00004BFE _text$mn        ends
.text$mn:00004BFE
.text$mn:00004C00 ; ===========================================================================
.text$mn:00004C00
.text$mn:00004C00 ; Segment type: Pure code
.text$mn:00004C00 ; Segment permissions: Read/Execute
.text$mn:00004C00 _text$mn        segment para public 'CODE' use32
.text$mn:00004C00                 assume cs:_text$mn
.text$mn:00004C00                 ;org 4C00h
.text$mn:00004C00 ; COMDAT (pick any)
.text$mn:00004C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C00
.text$mn:00004C00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C00
.text$mn:00004C00 ; Attributes: bp-based frame
.text$mn:00004C00
.text$mn:00004C00 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00004C00                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00004C00 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00004C00                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:00004C00                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:00004C00
.text$mn:00004C00 var_4           = dword ptr -4
.text$mn:00004C00
.text$mn:00004C00                 push    ebp
.text$mn:00004C01                 mov     ebp, esp
.text$mn:00004C03                 push    ecx
.text$mn:00004C04                 mov     [ebp+var_4], ecx
.text$mn:00004C07                 mov     eax, [ebp+var_4]
.text$mn:00004C0A                 mov     esp, ebp
.text$mn:00004C0C                 pop     ebp
.text$mn:00004C0D                 retn    4
.text$mn:00004C0D ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00004C0D
.text$mn:00004C0D _text$mn        ends
.text$mn:00004C0D
.text$mn:00004C10 ; ===========================================================================
.text$mn:00004C10
.text$mn:00004C10 ; Segment type: Pure code
.text$mn:00004C10 ; Segment permissions: Read/Execute
.text$mn:00004C10 _text$mn        segment para public 'CODE' use32
.text$mn:00004C10                 assume cs:_text$mn
.text$mn:00004C10                 ;org 4C10h
.text$mn:00004C10 ; COMDAT (pick any)
.text$mn:00004C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C10
.text$mn:00004C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C10
.text$mn:00004C10 ; Attributes: bp-based frame
.text$mn:00004C10
.text$mn:00004C10 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004C10                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00004C10 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00004C10                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00004C10
.text$mn:00004C10 var_4           = dword ptr -4
.text$mn:00004C10
.text$mn:00004C10                 push    ebp
.text$mn:00004C11                 mov     ebp, esp
.text$mn:00004C13                 push    ecx
.text$mn:00004C14                 mov     [ebp+var_4], ecx
.text$mn:00004C17                 mov     eax, [ebp+var_4]
.text$mn:00004C1A                 mov     esp, ebp
.text$mn:00004C1C                 pop     ebp
.text$mn:00004C1D                 retn
.text$mn:00004C1D ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00004C1D
.text$mn:00004C1D ; ---------------------------------------------------------------------------
.text$mn:00004C1E                 align 10h
.text$mn:00004C1E _text$mn        ends
.text$mn:00004C1E
.text$mn:00004C20 ; ===========================================================================
.text$mn:00004C20
.text$mn:00004C20 ; Segment type: Pure code
.text$mn:00004C20 ; Segment permissions: Read/Execute
.text$mn:00004C20 _text$mn        segment para public 'CODE' use32
.text$mn:00004C20                 assume cs:_text$mn
.text$mn:00004C20                 ;org 4C20h
.text$mn:00004C20 ; COMDAT (pick any)
.text$mn:00004C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C20
.text$mn:00004C20 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C20
.text$mn:00004C20 ; Attributes: bp-based frame
.text$mn:00004C20
.text$mn:00004C20 ; protected: __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::basic_ios<wchar_t, struct std::char_traits<wchar_t>>(void)
.text$mn:00004C20                 public ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
.text$mn:00004C20 ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ proc near
.text$mn:00004C20                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+44p
.text$mn:00004C20                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+44p
.text$mn:00004C20
.text$mn:00004C20 var_10          = dword ptr -10h
.text$mn:00004C20 var_C           = dword ptr -0Ch
.text$mn:00004C20 var_4           = dword ptr -4
.text$mn:00004C20
.text$mn:00004C20                 push    ebp
.text$mn:00004C21                 mov     ebp, esp
.text$mn:00004C23                 push    0FFFFFFFFh
.text$mn:00004C25                 push    offset __ehhandler$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
.text$mn:00004C2A                 mov     eax, large fs:0
.text$mn:00004C30                 push    eax
.text$mn:00004C31                 push    ecx
.text$mn:00004C32                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C37                 xor     eax, ebp
.text$mn:00004C39                 push    eax
.text$mn:00004C3A                 lea     eax, [ebp+var_C]
.text$mn:00004C3D                 mov     large fs:0, eax
.text$mn:00004C43                 mov     [ebp+var_10], ecx
.text$mn:00004C46                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C49                 call    ??0ios_base@std@@IAE@XZ ; std::ios_base::ios_base(void)
.text$mn:00004C4E                 mov     [ebp+var_4], 0
.text$mn:00004C55                 mov     eax, [ebp+var_10]
.text$mn:00004C58                 mov     dword ptr [eax], offset ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:00004C5E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C65                 mov     eax, [ebp+var_10]
.text$mn:00004C68                 mov     ecx, [ebp+var_C]
.text$mn:00004C6B                 mov     large fs:0, ecx
.text$mn:00004C72                 pop     ecx
.text$mn:00004C73                 mov     esp, ebp
.text$mn:00004C75                 pop     ebp
.text$mn:00004C76                 retn
.text$mn:00004C76 ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ endp
.text$mn:00004C76
.text$mn:00004C76 ; ---------------------------------------------------------------------------
.text$mn:00004C77                 align 4
.text$mn:00004C77 _text$mn        ends
.text$mn:00004C77
.text$x:00004C78 ; ===========================================================================
.text$x:00004C78
.text$x:00004C78 ; Segment type: Pure code
.text$x:00004C78 ; Segment permissions: Read/Execute
.text$x:00004C78 _text$x         segment para public 'CODE' use32
.text$x:00004C78                 assume cs:_text$x
.text$x:00004C78                 ;org 4C78h
.text$x:00004C78 ; COMDAT (pick associative to section at 4C20)
.text$x:00004C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C78
.text$x:00004C78 ; =============== S U B R O U T I N E =======================================
.text$x:00004C78
.text$x:00004C78
.text$x:00004C78 __unwindfunclet$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0 proc near
.text$x:00004C78                                         ; DATA XREF: .xdata$x:0000D198o
.text$x:00004C78                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C7B                 jmp     ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$x:00004C7B __unwindfunclet$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0 endp
.text$x:00004C7B
.text$x:00004C80
.text$x:00004C80 ; =============== S U B R O U T I N E =======================================
.text$x:00004C80
.text$x:00004C80
.text$x:00004C80 __ehhandler$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ proc near
.text$x:00004C80                                         ; DATA XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+5o
.text$x:00004C80
.text$x:00004C80 arg_4           = dword ptr  8
.text$x:00004C80
.text$x:00004C80                 mov     edx, [esp+arg_4]
.text$x:00004C84                 lea     eax, [edx+0Ch]
.text$x:00004C87                 mov     ecx, [edx-8]
.text$x:00004C8A                 xor     ecx, eax
.text$x:00004C8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C91                 mov     eax, offset __ehfuncinfo$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
.text$x:00004C96                 jmp     ___CxxFrameHandler3
.text$x:00004C96 __ehhandler$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ endp
.text$x:00004C96
.text$x:00004C96 ; ---------------------------------------------------------------------------
.text$x:00004C9B                 align 4
.text$x:00004C9B _text$x         ends
.text$x:00004C9B
.text$mn:00004C9C ; ===========================================================================
.text$mn:00004C9C
.text$mn:00004C9C ; Segment type: Pure code
.text$mn:00004C9C ; Segment permissions: Read/Execute
.text$mn:00004C9C _text$mn        segment para public 'CODE' use32
.text$mn:00004C9C                 assume cs:_text$mn
.text$mn:00004C9C                 ;org 4C9Ch
.text$mn:00004C9C ; COMDAT (pick any)
.text$mn:00004C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C9C
.text$mn:00004C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C9C
.text$mn:00004C9C ; Attributes: bp-based frame
.text$mn:00004C9C
.text$mn:00004C9C ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>(class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> *, bool)
.text$mn:00004C9C                 public ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
.text$mn:00004C9C ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z proc near
.text$mn:00004C9C                                         ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+67p
.text$mn:00004C9C
.text$mn:00004C9C var_14          = dword ptr -14h
.text$mn:00004C9C var_10          = dword ptr -10h
.text$mn:00004C9C var_C           = dword ptr -0Ch
.text$mn:00004C9C var_4           = dword ptr -4
.text$mn:00004C9C arg_0           = dword ptr  8
.text$mn:00004C9C arg_4           = byte ptr  0Ch
.text$mn:00004C9C arg_8           = dword ptr  10h
.text$mn:00004C9C
.text$mn:00004C9C                 push    ebp
.text$mn:00004C9D                 mov     ebp, esp
.text$mn:00004C9F                 push    0FFFFFFFFh
.text$mn:00004CA1                 push    offset __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
.text$mn:00004CA6                 mov     eax, large fs:0
.text$mn:00004CAC                 push    eax
.text$mn:00004CAD                 sub     esp, 8
.text$mn:00004CB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004CB5                 xor     eax, ebp
.text$mn:00004CB7                 push    eax
.text$mn:00004CB8                 lea     eax, [ebp+var_C]
.text$mn:00004CBB                 mov     large fs:0, eax
.text$mn:00004CC1                 mov     [ebp+var_10], ecx
.text$mn:00004CC4                 mov     [ebp+var_14], 0
.text$mn:00004CCB                 cmp     [ebp+arg_8], 0
.text$mn:00004CCF                 jz      short loc_4CF5
.text$mn:00004CD1                 mov     eax, [ebp+var_10]
.text$mn:00004CD4                 mov     dword ptr [eax], offset ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; const std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vbtable'
.text$mn:00004CDA                 mov     ecx, [ebp+var_10]
.text$mn:00004CDD                 add     ecx, 8
.text$mn:00004CE0                 call    ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:00004CE5                 mov     [ebp+var_4], 0
.text$mn:00004CEC                 mov     ecx, [ebp+var_14]
.text$mn:00004CEF                 or      ecx, 1
.text$mn:00004CF2                 mov     [ebp+var_14], ecx
.text$mn:00004CF5
.text$mn:00004CF5 loc_4CF5:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+33j
.text$mn:00004CF5                 mov     edx, [ebp+var_10]
.text$mn:00004CF8                 mov     eax, [edx]
.text$mn:00004CFA                 mov     ecx, [eax+4]
.text$mn:00004CFD                 mov     edx, [ebp+var_10]
.text$mn:00004D00                 mov     dword ptr [edx+ecx], offset ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:00004D07                 mov     eax, [ebp+var_10]
.text$mn:00004D0A                 mov     ecx, [eax]
.text$mn:00004D0C                 mov     edx, [ecx+4]
.text$mn:00004D0F                 sub     edx, 8
.text$mn:00004D12                 mov     eax, [ebp+var_10]
.text$mn:00004D15                 mov     ecx, [eax]
.text$mn:00004D17                 mov     eax, [ecx+4]
.text$mn:00004D1A                 mov     ecx, [ebp+var_10]
.text$mn:00004D1D                 mov     [ecx+eax-4], edx
.text$mn:00004D21                 movzx   edx, [ebp+arg_4]
.text$mn:00004D25                 push    edx
.text$mn:00004D26                 mov     eax, [ebp+arg_0]
.text$mn:00004D29                 push    eax
.text$mn:00004D2A                 mov     ecx, [ebp+var_10]
.text$mn:00004D2D                 mov     edx, [ecx]
.text$mn:00004D2F                 mov     ecx, [ebp+var_10]
.text$mn:00004D32                 add     ecx, [edx+4]
.text$mn:00004D35                 call    ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)
.text$mn:00004D3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D41                 mov     eax, [ebp+var_10]
.text$mn:00004D44                 mov     ecx, [ebp+var_C]
.text$mn:00004D47                 mov     large fs:0, ecx
.text$mn:00004D4E                 pop     ecx
.text$mn:00004D4F                 mov     esp, ebp
.text$mn:00004D51                 pop     ebp
.text$mn:00004D52                 retn    0Ch
.text$mn:00004D52 ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z endp
.text$mn:00004D52
.text$mn:00004D52 ; ---------------------------------------------------------------------------
.text$mn:00004D55                 align 4
.text$mn:00004D55 _text$mn        ends
.text$mn:00004D55
.text$x:00004D58 ; ===========================================================================
.text$x:00004D58
.text$x:00004D58 ; Segment type: Pure code
.text$x:00004D58 ; Segment permissions: Read/Execute
.text$x:00004D58 _text$x         segment para public 'CODE' use32
.text$x:00004D58                 assume cs:_text$x
.text$x:00004D58                 ;org 4D58h
.text$x:00004D58 ; COMDAT (pick associative to section at 4C9C)
.text$x:00004D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D58
.text$x:00004D58 ; =============== S U B R O U T I N E =======================================
.text$x:00004D58
.text$x:00004D58
.text$x:00004D58 __unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0 proc near
.text$x:00004D58                                         ; DATA XREF: .xdata$x:0000DC30o
.text$x:00004D58                 mov     eax, [ebp-14h]
.text$x:00004D5B                 and     eax, 1
.text$x:00004D5E                 jz      $LN5
.text$x:00004D64                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00004D68                 mov     ecx, [ebp-10h]
.text$x:00004D6B                 add     ecx, 8
.text$x:00004D6E                 jmp     ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:00004D73 ; ---------------------------------------------------------------------------
.text$x:00004D73
.text$x:00004D73 $LN5:                                   ; CODE XREF: __unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0+6j
.text$x:00004D73                 retn
.text$x:00004D73 __unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0 endp
.text$x:00004D73
.text$x:00004D74
.text$x:00004D74 ; =============== S U B R O U T I N E =======================================
.text$x:00004D74
.text$x:00004D74
.text$x:00004D74 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z proc near
.text$x:00004D74                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+5o
.text$x:00004D74
.text$x:00004D74 arg_4           = dword ptr  8
.text$x:00004D74
.text$x:00004D74                 mov     edx, [esp+arg_4]
.text$x:00004D78                 lea     eax, [edx+0Ch]
.text$x:00004D7B                 mov     ecx, [edx-0Ch]
.text$x:00004D7E                 xor     ecx, eax
.text$x:00004D80                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D85                 mov     eax, offset __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
.text$x:00004D8A                 jmp     ___CxxFrameHandler3
.text$x:00004D8A __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z endp
.text$x:00004D8A
.text$x:00004D8A ; ---------------------------------------------------------------------------
.text$x:00004D8F                 align 10h
.text$x:00004D8F _text$x         ends
.text$x:00004D8F
.text$mn:00004D90 ; ===========================================================================
.text$mn:00004D90
.text$mn:00004D90 ; Segment type: Pure code
.text$mn:00004D90 ; Segment permissions: Read/Execute
.text$mn:00004D90 _text$mn        segment para public 'CODE' use32
.text$mn:00004D90                 assume cs:_text$mn
.text$mn:00004D90                 ;org 4D90h
.text$mn:00004D90 ; COMDAT (pick any)
.text$mn:00004D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D90
.text$mn:00004D90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D90
.text$mn:00004D90 ; Attributes: bp-based frame
.text$mn:00004D90
.text$mn:00004D90 ; public: __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(int)
.text$mn:00004D90                 public ??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$mn:00004D90 ??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z proc near
.text$mn:00004D90                                         ; CODE XREF: operator<<(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,TiXmlNode const &)+35p
.text$mn:00004D90
.text$mn:00004D90 var_14          = dword ptr -14h
.text$mn:00004D90 var_10          = dword ptr -10h
.text$mn:00004D90 var_C           = dword ptr -0Ch
.text$mn:00004D90 var_4           = dword ptr -4
.text$mn:00004D90 arg_0           = dword ptr  8
.text$mn:00004D90 arg_4           = dword ptr  0Ch
.text$mn:00004D90
.text$mn:00004D90                 push    ebp
.text$mn:00004D91                 mov     ebp, esp
.text$mn:00004D93                 push    0FFFFFFFFh
.text$mn:00004D95                 push    offset __ehhandler$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$mn:00004D9A                 mov     eax, large fs:0
.text$mn:00004DA0                 push    eax
.text$mn:00004DA1                 sub     esp, 8
.text$mn:00004DA4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DA9                 xor     eax, ebp
.text$mn:00004DAB                 push    eax
.text$mn:00004DAC                 lea     eax, [ebp+var_C]
.text$mn:00004DAF                 mov     large fs:0, eax
.text$mn:00004DB5                 mov     [ebp+var_10], ecx
.text$mn:00004DB8                 mov     [ebp+var_14], 0
.text$mn:00004DBF                 cmp     [ebp+arg_4], 0
.text$mn:00004DC3                 jz      short loc_4DE9
.text$mn:00004DC5                 mov     eax, [ebp+var_10]
.text$mn:00004DC8                 mov     dword ptr [eax], offset ??_8?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B@ ; const std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vbtable'
.text$mn:00004DCE                 mov     ecx, [ebp+var_10]
.text$mn:00004DD1                 add     ecx, 50h ; 'P'
.text$mn:00004DD4                 call    ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:00004DD9                 mov     [ebp+var_4], 0
.text$mn:00004DE0                 mov     ecx, [ebp+var_14]
.text$mn:00004DE3                 or      ecx, 1
.text$mn:00004DE6                 mov     [ebp+var_14], ecx
.text$mn:00004DE9
.text$mn:00004DE9 loc_4DE9:                               ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+33j
.text$mn:00004DE9                 push    0
.text$mn:00004DEB                 push    0
.text$mn:00004DED                 mov     edx, [ebp+var_10]
.text$mn:00004DF0                 add     edx, 4
.text$mn:00004DF3                 push    edx
.text$mn:00004DF4                 mov     ecx, [ebp+var_10]
.text$mn:00004DF7                 call    ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)
.text$mn:00004DFC                 mov     [ebp+var_4], 1
.text$mn:00004E03                 mov     eax, [ebp+var_10]
.text$mn:00004E06                 mov     ecx, [eax]
.text$mn:00004E08                 mov     edx, [ecx+4]
.text$mn:00004E0B                 mov     eax, [ebp+var_10]
.text$mn:00004E0E                 mov     dword ptr [eax+edx], offset ??_7?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'
.text$mn:00004E15                 mov     ecx, [ebp+var_10]
.text$mn:00004E18                 mov     edx, [ecx]
.text$mn:00004E1A                 mov     eax, [edx+4]
.text$mn:00004E1D                 sub     eax, 50h ; 'P'
.text$mn:00004E20                 mov     ecx, [ebp+var_10]
.text$mn:00004E23                 mov     edx, [ecx]
.text$mn:00004E25                 mov     ecx, [edx+4]
.text$mn:00004E28                 mov     edx, [ebp+var_10]
.text$mn:00004E2B                 mov     [edx+ecx-4], eax
.text$mn:00004E2F                 mov     eax, [ebp+arg_0]
.text$mn:00004E32                 or      eax, 2
.text$mn:00004E35                 push    eax
.text$mn:00004E36                 mov     ecx, [ebp+var_10]
.text$mn:00004E39                 add     ecx, 4
.text$mn:00004E3C                 call    ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)
.text$mn:00004E41                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004E45                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E4C                 mov     eax, [ebp+var_10]
.text$mn:00004E4F                 mov     ecx, [ebp+var_C]
.text$mn:00004E52                 mov     large fs:0, ecx
.text$mn:00004E59                 pop     ecx
.text$mn:00004E5A                 mov     esp, ebp
.text$mn:00004E5C                 pop     ebp
.text$mn:00004E5D                 retn    8
.text$mn:00004E5D ??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z endp
.text$mn:00004E5D
.text$mn:00004E5D _text$mn        ends
.text$mn:00004E5D
.text$x:00004E60 ; ===========================================================================
.text$x:00004E60
.text$x:00004E60 ; Segment type: Pure code
.text$x:00004E60 ; Segment permissions: Read/Execute
.text$x:00004E60 _text$x         segment para public 'CODE' use32
.text$x:00004E60                 assume cs:_text$x
.text$x:00004E60                 ;org 4E60h
.text$x:00004E60 ; COMDAT (pick associative to section at 4D90)
.text$x:00004E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E60
.text$x:00004E60 ; =============== S U B R O U T I N E =======================================
.text$x:00004E60
.text$x:00004E60
.text$x:00004E60 __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0 proc near
.text$x:00004E60                                         ; DATA XREF: .xdata$x:0000DDA0o
.text$x:00004E60                 mov     eax, [ebp-14h]
.text$x:00004E63                 and     eax, 1
.text$x:00004E66                 jz      $LN5_0
.text$x:00004E6C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00004E70                 mov     ecx, [ebp-10h]
.text$x:00004E73                 add     ecx, 50h ; 'P'
.text$x:00004E76                 jmp     ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:00004E7B ; ---------------------------------------------------------------------------
.text$x:00004E7B
.text$x:00004E7B $LN5_0:                                 ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0+6j
.text$x:00004E7B                 retn
.text$x:00004E7B __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0 endp
.text$x:00004E7B
.text$x:00004E7C
.text$x:00004E7C ; =============== S U B R O U T I N E =======================================
.text$x:00004E7C
.text$x:00004E7C
.text$x:00004E7C __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1 proc near
.text$x:00004E7C                                         ; DATA XREF: .xdata$x:0000DDA8o
.text$x:00004E7C                 mov     ecx, [ebp-10h]
.text$x:00004E7F                 add     ecx, 8
.text$x:00004E82                 jmp     ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::~basic_ostream<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:00004E82 __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1 endp
.text$x:00004E82
.text$x:00004E87
.text$x:00004E87 ; =============== S U B R O U T I N E =======================================
.text$x:00004E87
.text$x:00004E87
.text$x:00004E87 __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$2 proc near
.text$x:00004E87                                         ; DATA XREF: .xdata$x:0000DDB0o
.text$x:00004E87                 mov     ecx, [ebp-10h]
.text$x:00004E8A                 add     ecx, 4
.text$x:00004E8D                 jmp     ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E8D __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$2 endp
.text$x:00004E8D
.text$x:00004E92
.text$x:00004E92 ; =============== S U B R O U T I N E =======================================
.text$x:00004E92
.text$x:00004E92
.text$x:00004E92 __ehhandler$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z proc near
.text$x:00004E92                                         ; DATA XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+5o
.text$x:00004E92
.text$x:00004E92 arg_4           = dword ptr  8
.text$x:00004E92
.text$x:00004E92                 mov     edx, [esp+arg_4]
.text$x:00004E96                 lea     eax, [edx+0Ch]
.text$x:00004E99                 mov     ecx, [edx-0Ch]
.text$x:00004E9C                 xor     ecx, eax
.text$x:00004E9E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EA3                 mov     eax, offset __ehfuncinfo$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$x:00004EA8                 jmp     ___CxxFrameHandler3
.text$x:00004EA8 __ehhandler$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z endp
.text$x:00004EA8
.text$x:00004EA8 ; ---------------------------------------------------------------------------
.text$x:00004EAD                 align 10h
.text$x:00004EAD _text$x         ends
.text$x:00004EAD
.text$mn:00004EB0 ; ===========================================================================
.text$mn:00004EB0
.text$mn:00004EB0 ; Segment type: Pure code
.text$mn:00004EB0 ; Segment permissions: Read/Execute
.text$mn:00004EB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004EB0                 assume cs:_text$mn
.text$mn:00004EB0                 ;org 4EB0h
.text$mn:00004EB0 ; COMDAT (pick any)
.text$mn:00004EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EB0
.text$mn:00004EB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EB0
.text$mn:00004EB0 ; Attributes: bp-based frame
.text$mn:00004EB0
.text$mn:00004EB0 ; protected: __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>(void)
.text$mn:00004EB0                 public ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
.text$mn:00004EB0 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ proc near
.text$mn:00004EB0                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+29p
.text$mn:00004EB0
.text$mn:00004EB0 var_C           = dword ptr -0Ch
.text$mn:00004EB0 var_8           = dword ptr -8
.text$mn:00004EB0 var_4           = dword ptr -4
.text$mn:00004EB0
.text$mn:00004EB0                 push    ebp
.text$mn:00004EB1                 mov     ebp, esp
.text$mn:00004EB3                 sub     esp, 0Ch
.text$mn:00004EB6                 mov     [ebp+var_4], ecx
.text$mn:00004EB9                 mov     eax, [ebp+var_4]
.text$mn:00004EBC                 mov     dword ptr [eax], offset ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:00004EC2                 push    19h             ; int
.text$mn:00004EC4                 push    offset ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004EC9                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00004ECE                 push    eax             ; struct std::_DebugHeapTag_t *
.text$mn:00004ECF                 push    4               ; unsigned int
.text$mn:00004ED1                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00004ED6                 add     esp, 10h
.text$mn:00004ED9                 mov     [ebp+var_8], eax
.text$mn:00004EDC                 cmp     [ebp+var_8], 0
.text$mn:00004EE0                 jz      short loc_4EEF
.text$mn:00004EE2                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004EE5                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00004EEA                 mov     [ebp+var_C], eax
.text$mn:00004EED                 jmp     short loc_4EF6
.text$mn:00004EEF ; ---------------------------------------------------------------------------
.text$mn:00004EEF
.text$mn:00004EEF loc_4EEF:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+30j
.text$mn:00004EEF                 mov     [ebp+var_C], 0
.text$mn:00004EF6
.text$mn:00004EF6 loc_4EF6:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+3Dj
.text$mn:00004EF6                 mov     ecx, [ebp+var_4]
.text$mn:00004EF9                 mov     edx, [ebp+var_C]
.text$mn:00004EFC                 mov     [ecx+34h], edx
.text$mn:00004EFF                 mov     ecx, [ebp+var_4]
.text$mn:00004F02                 call    ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Init(void)
.text$mn:00004F07                 mov     eax, [ebp+var_4]
.text$mn:00004F0A                 mov     esp, ebp
.text$mn:00004F0C                 pop     ebp
.text$mn:00004F0D                 retn
.text$mn:00004F0D ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ endp
.text$mn:00004F0D
.text$mn:00004F0D ; ---------------------------------------------------------------------------
.text$mn:00004F0E                 align 10h
.text$mn:00004F0E _text$mn        ends
.text$mn:00004F0E
.text$mn:00004F10 ; ===========================================================================
.text$mn:00004F10
.text$mn:00004F10 ; Segment type: Pure code
.text$mn:00004F10 ; Segment permissions: Read/Execute
.text$mn:00004F10 _text$mn        segment para public 'CODE' use32
.text$mn:00004F10                 assume cs:_text$mn
.text$mn:00004F10                 ;org 4F10h
.text$mn:00004F10 ; COMDAT (pick any)
.text$mn:00004F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F10
.text$mn:00004F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F10
.text$mn:00004F10 ; Attributes: bp-based frame
.text$mn:00004F10
.text$mn:00004F10 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00004F10                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:00004F10 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00004F10                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+8Ap
.text$mn:00004F10
.text$mn:00004F10 var_14          = dword ptr -14h
.text$mn:00004F10 var_D           = byte ptr -0Dh
.text$mn:00004F10 var_C           = dword ptr -0Ch
.text$mn:00004F10 var_4           = dword ptr -4
.text$mn:00004F10 arg_0           = dword ptr  8
.text$mn:00004F10
.text$mn:00004F10                 push    ebp
.text$mn:00004F11                 mov     ebp, esp
.text$mn:00004F13                 push    0FFFFFFFFh
.text$mn:00004F15                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:00004F1A                 mov     eax, large fs:0
.text$mn:00004F20                 push    eax
.text$mn:00004F21                 sub     esp, 8
.text$mn:00004F24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F29                 xor     eax, ebp
.text$mn:00004F2B                 push    eax
.text$mn:00004F2C                 lea     eax, [ebp+var_C]
.text$mn:00004F2F                 mov     large fs:0, eax
.text$mn:00004F35                 mov     [ebp+var_14], ecx
.text$mn:00004F38                 lea     eax, [ebp+var_D]
.text$mn:00004F3B                 push    eax
.text$mn:00004F3C                 mov     ecx, [ebp+arg_0]
.text$mn:00004F3F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004F44                 push    eax
.text$mn:00004F45                 mov     ecx, [ebp+var_14]
.text$mn:00004F48                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004F4D                 mov     [ebp+var_4], 0
.text$mn:00004F54                 push    0               ; Size
.text$mn:00004F56                 push    0               ; char
.text$mn:00004F58                 mov     ecx, [ebp+var_14]
.text$mn:00004F5B                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004F60                 mov     ecx, [ebp+arg_0]
.text$mn:00004F63                 push    ecx
.text$mn:00004F64                 call    ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)
.text$mn:00004F69                 add     esp, 4
.text$mn:00004F6C                 push    eax
.text$mn:00004F6D                 mov     ecx, [ebp+var_14]
.text$mn:00004F70                 call    ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00004F75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F7C                 mov     eax, [ebp+var_14]
.text$mn:00004F7F                 mov     ecx, [ebp+var_C]
.text$mn:00004F82                 mov     large fs:0, ecx
.text$mn:00004F89                 pop     ecx
.text$mn:00004F8A                 mov     esp, ebp
.text$mn:00004F8C                 pop     ebp
.text$mn:00004F8D                 retn    4
.text$mn:00004F8D ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00004F8D
.text$mn:00004F8D _text$mn        ends
.text$mn:00004F8D
.text$x:00004F90 ; ===========================================================================
.text$x:00004F90
.text$x:00004F90 ; Segment type: Pure code
.text$x:00004F90 ; Segment permissions: Read/Execute
.text$x:00004F90 _text$x         segment para public 'CODE' use32
.text$x:00004F90                 assume cs:_text$x
.text$x:00004F90                 ;org 4F90h
.text$x:00004F90 ; COMDAT (pick associative to section at 4F10)
.text$x:00004F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F90
.text$x:00004F90 ; =============== S U B R O U T I N E =======================================
.text$x:00004F90
.text$x:00004F90
.text$x:00004F90 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00004F90                                         ; DATA XREF: .xdata$x:0000C9B0o
.text$x:00004F90                 mov     ecx, [ebp-14h]
.text$x:00004F93                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004F93 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00004F93
.text$x:00004F98
.text$x:00004F98 ; =============== S U B R O U T I N E =======================================
.text$x:00004F98
.text$x:00004F98
.text$x:00004F98 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:00004F98                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+5o
.text$x:00004F98
.text$x:00004F98 arg_4           = dword ptr  8
.text$x:00004F98
.text$x:00004F98                 mov     edx, [esp+arg_4]
.text$x:00004F9C                 lea     eax, [edx+0Ch]
.text$x:00004F9F                 mov     ecx, [edx-0Ch]
.text$x:00004FA2                 xor     ecx, eax
.text$x:00004FA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FA9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$x:00004FAE                 jmp     ___CxxFrameHandler3
.text$x:00004FAE __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$x:00004FAE
.text$x:00004FAE ; ---------------------------------------------------------------------------
.text$x:00004FB3                 align 4
.text$x:00004FB3 _text$x         ends
.text$x:00004FB3
.text$mn:00004FB4 ; ===========================================================================
.text$mn:00004FB4
.text$mn:00004FB4 ; Segment type: Pure code
.text$mn:00004FB4 ; Segment permissions: Read/Execute
.text$mn:00004FB4 _text$mn        segment para public 'CODE' use32
.text$mn:00004FB4                 assume cs:_text$mn
.text$mn:00004FB4                 ;org 4FB4h
.text$mn:00004FB4 ; COMDAT (pick any)
.text$mn:00004FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FB4
.text$mn:00004FB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FB4
.text$mn:00004FB4 ; Attributes: bp-based frame
.text$mn:00004FB4
.text$mn:00004FB4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00004FB4                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00004FB4 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00004FB4                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+37p
.text$mn:00004FB4
.text$mn:00004FB4 var_14          = dword ptr -14h
.text$mn:00004FB4 var_E           = byte ptr -0Eh
.text$mn:00004FB4 var_D           = byte ptr -0Dh
.text$mn:00004FB4 var_C           = dword ptr -0Ch
.text$mn:00004FB4 var_4           = dword ptr -4
.text$mn:00004FB4 arg_0           = dword ptr  8
.text$mn:00004FB4
.text$mn:00004FB4                 push    ebp
.text$mn:00004FB5                 mov     ebp, esp
.text$mn:00004FB7                 push    0FFFFFFFFh
.text$mn:00004FB9                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00004FBE                 mov     eax, large fs:0
.text$mn:00004FC4                 push    eax
.text$mn:00004FC5                 sub     esp, 8
.text$mn:00004FC8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FCD                 xor     eax, ebp
.text$mn:00004FCF                 push    eax
.text$mn:00004FD0                 lea     eax, [ebp+var_C]
.text$mn:00004FD3                 mov     large fs:0, eax
.text$mn:00004FD9                 mov     [ebp+var_14], ecx
.text$mn:00004FDC                 lea     eax, [ebp+var_D]
.text$mn:00004FDF                 push    eax
.text$mn:00004FE0                 lea     ecx, [ebp+var_E]
.text$mn:00004FE3                 push    ecx
.text$mn:00004FE4                 mov     ecx, [ebp+arg_0]
.text$mn:00004FE7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004FEC                 mov     ecx, eax
.text$mn:00004FEE                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)
.text$mn:00004FF3                 push    eax
.text$mn:00004FF4                 mov     ecx, [ebp+var_14]
.text$mn:00004FF7                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004FFC                 mov     [ebp+var_4], 0
.text$mn:00005003                 push    0               ; Size
.text$mn:00005005                 push    0               ; char
.text$mn:00005007                 mov     ecx, [ebp+var_14]
.text$mn:0000500A                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000500F                 mov     edx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00005015                 push    edx
.text$mn:00005016                 push    0
.text$mn:00005018                 mov     eax, [ebp+arg_0]
.text$mn:0000501B                 push    eax
.text$mn:0000501C                 mov     ecx, [ebp+var_14]
.text$mn:0000501F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00005024                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000502B                 mov     eax, [ebp+var_14]
.text$mn:0000502E                 mov     ecx, [ebp+var_C]
.text$mn:00005031                 mov     large fs:0, ecx
.text$mn:00005038                 pop     ecx
.text$mn:00005039                 mov     esp, ebp
.text$mn:0000503B                 pop     ebp
.text$mn:0000503C                 retn    4
.text$mn:0000503C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$mn:0000503C
.text$mn:0000503C ; ---------------------------------------------------------------------------
.text$mn:0000503F                 align 10h
.text$mn:0000503F _text$mn        ends
.text$mn:0000503F
.text$x:00005040 ; ===========================================================================
.text$x:00005040
.text$x:00005040 ; Segment type: Pure code
.text$x:00005040 ; Segment permissions: Read/Execute
.text$x:00005040 _text$x         segment para public 'CODE' use32
.text$x:00005040                 assume cs:_text$x
.text$x:00005040                 ;org 5040h
.text$x:00005040 ; COMDAT (pick associative to section at 4FB4)
.text$x:00005040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005040
.text$x:00005040 ; =============== S U B R O U T I N E =======================================
.text$x:00005040
.text$x:00005040
.text$x:00005040 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005040                                         ; DATA XREF: .xdata$x:0000C958o
.text$x:00005040                 mov     ecx, [ebp-14h]
.text$x:00005043                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00005043 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005043
.text$x:00005048
.text$x:00005048 ; =============== S U B R O U T I N E =======================================
.text$x:00005048
.text$x:00005048
.text$x:00005048 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$x:00005048                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00005048
.text$x:00005048 arg_4           = dword ptr  8
.text$x:00005048
.text$x:00005048                 mov     edx, [esp+arg_4]
.text$x:0000504C                 lea     eax, [edx+0Ch]
.text$x:0000504F                 mov     ecx, [edx-0Ch]
.text$x:00005052                 xor     ecx, eax
.text$x:00005054                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005059                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$x:0000505E                 jmp     ___CxxFrameHandler3
.text$x:0000505E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$x:0000505E
.text$x:0000505E ; ---------------------------------------------------------------------------
.text$x:00005063                 align 4
.text$x:00005063 _text$x         ends
.text$x:00005063
.text$mn:00005064 ; ===========================================================================
.text$mn:00005064
.text$mn:00005064 ; Segment type: Pure code
.text$mn:00005064 ; Segment permissions: Read/Execute
.text$mn:00005064 _text$mn        segment para public 'CODE' use32
.text$mn:00005064                 assume cs:_text$mn
.text$mn:00005064                 ;org 5064h
.text$mn:00005064 ; COMDAT (pick any)
.text$mn:00005064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005064
.text$mn:00005064 ; =============== S U B R O U T I N E =======================================
.text$mn:00005064
.text$mn:00005064 ; Attributes: bp-based frame
.text$mn:00005064
.text$mn:00005064 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00005064                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00005064 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00005064                                         ; CODE XREF: std::system_error::system_error(std::error_code,char const *)+32p
.text$mn:00005064                                         ; std::_Generic_error_category::message(int)+5Ap ...
.text$mn:00005064
.text$mn:00005064 var_14          = dword ptr -14h
.text$mn:00005064 var_D           = byte ptr -0Dh
.text$mn:00005064 var_C           = dword ptr -0Ch
.text$mn:00005064 var_4           = dword ptr -4
.text$mn:00005064 Str             = dword ptr  8
.text$mn:00005064
.text$mn:00005064                 push    ebp
.text$mn:00005065                 mov     ebp, esp
.text$mn:00005067                 push    0FFFFFFFFh
.text$mn:00005069                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:0000506E                 mov     eax, large fs:0
.text$mn:00005074                 push    eax
.text$mn:00005075                 sub     esp, 8
.text$mn:00005078                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000507D                 xor     eax, ebp
.text$mn:0000507F                 push    eax
.text$mn:00005080                 lea     eax, [ebp+var_C]
.text$mn:00005083                 mov     large fs:0, eax
.text$mn:00005089                 mov     [ebp+var_14], ecx
.text$mn:0000508C                 lea     ecx, [ebp+var_D]
.text$mn:0000508F                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00005094                 push    eax
.text$mn:00005095                 mov     ecx, [ebp+var_14]
.text$mn:00005098                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:0000509D                 mov     [ebp+var_4], 0
.text$mn:000050A4                 push    0               ; Size
.text$mn:000050A6                 push    0               ; char
.text$mn:000050A8                 mov     ecx, [ebp+var_14]
.text$mn:000050AB                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000050B0                 mov     eax, [ebp+Str]
.text$mn:000050B3                 push    eax             ; Str
.text$mn:000050B4                 mov     ecx, [ebp+var_14]
.text$mn:000050B7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:000050BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000050C3                 mov     eax, [ebp+var_14]
.text$mn:000050C6                 mov     ecx, [ebp+var_C]
.text$mn:000050C9                 mov     large fs:0, ecx
.text$mn:000050D0                 pop     ecx
.text$mn:000050D1                 mov     esp, ebp
.text$mn:000050D3                 pop     ebp
.text$mn:000050D4                 retn    4
.text$mn:000050D4 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:000050D4
.text$mn:000050D4 ; ---------------------------------------------------------------------------
.text$mn:000050D7                 align 4
.text$mn:000050D7 _text$mn        ends
.text$mn:000050D7
.text$x:000050D8 ; ===========================================================================
.text$x:000050D8
.text$x:000050D8 ; Segment type: Pure code
.text$x:000050D8 ; Segment permissions: Read/Execute
.text$x:000050D8 _text$x         segment para public 'CODE' use32
.text$x:000050D8                 assume cs:_text$x
.text$x:000050D8                 ;org 50D8h
.text$x:000050D8 ; COMDAT (pick associative to section at 5064)
.text$x:000050D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000050D8
.text$x:000050D8 ; =============== S U B R O U T I N E =======================================
.text$x:000050D8
.text$x:000050D8
.text$x:000050D8 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:000050D8                                         ; DATA XREF: .xdata$x:0000C984o
.text$x:000050D8                 mov     ecx, [ebp-14h]
.text$x:000050DB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000050DB __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:000050DB
.text$x:000050E0
.text$x:000050E0 ; =============== S U B R O U T I N E =======================================
.text$x:000050E0
.text$x:000050E0
.text$x:000050E0 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:000050E0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:000050E0
.text$x:000050E0 arg_4           = dword ptr  8
.text$x:000050E0
.text$x:000050E0                 mov     edx, [esp+arg_4]
.text$x:000050E4                 lea     eax, [edx+0Ch]
.text$x:000050E7                 mov     ecx, [edx-0Ch]
.text$x:000050EA                 xor     ecx, eax
.text$x:000050EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050F1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:000050F6                 jmp     ___CxxFrameHandler3
.text$x:000050F6 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:000050F6
.text$x:000050F6 ; ---------------------------------------------------------------------------
.text$x:000050FB                 align 4
.text$x:000050FB _text$x         ends
.text$x:000050FB
.text$mn:000050FC ; ===========================================================================
.text$mn:000050FC
.text$mn:000050FC ; Segment type: Pure code
.text$mn:000050FC ; Segment permissions: Read/Execute
.text$mn:000050FC _text$mn        segment para public 'CODE' use32
.text$mn:000050FC                 assume cs:_text$mn
.text$mn:000050FC                 ;org 50FCh
.text$mn:000050FC ; COMDAT (pick any)
.text$mn:000050FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050FC
.text$mn:000050FC ; =============== S U B R O U T I N E =======================================
.text$mn:000050FC
.text$mn:000050FC ; Attributes: bp-based frame
.text$mn:000050FC
.text$mn:000050FC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:000050FC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:000050FC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:000050FC                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+A3p
.text$mn:000050FC                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+117p ...
.text$mn:000050FC
.text$mn:000050FC var_14          = dword ptr -14h
.text$mn:000050FC var_D           = byte ptr -0Dh
.text$mn:000050FC var_C           = dword ptr -0Ch
.text$mn:000050FC var_4           = dword ptr -4
.text$mn:000050FC arg_0           = dword ptr  8
.text$mn:000050FC
.text$mn:000050FC                 push    ebp
.text$mn:000050FD                 mov     ebp, esp
.text$mn:000050FF                 push    0FFFFFFFFh
.text$mn:00005101                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00005106                 mov     eax, large fs:0
.text$mn:0000510C                 push    eax
.text$mn:0000510D                 sub     esp, 8
.text$mn:00005110                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005115                 xor     eax, ebp
.text$mn:00005117                 push    eax
.text$mn:00005118                 lea     eax, [ebp+var_C]
.text$mn:0000511B                 mov     large fs:0, eax
.text$mn:00005121                 mov     [ebp+var_14], ecx
.text$mn:00005124                 lea     eax, [ebp+var_D]
.text$mn:00005127                 push    eax
.text$mn:00005128                 mov     ecx, [ebp+arg_0]
.text$mn:0000512B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005130                 push    eax
.text$mn:00005131                 mov     ecx, [ebp+var_14]
.text$mn:00005134                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005139                 mov     [ebp+var_4], 0
.text$mn:00005140                 push    0
.text$mn:00005142                 push    0
.text$mn:00005144                 mov     ecx, [ebp+var_14]
.text$mn:00005147                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000514C                 mov     ecx, [ebp+arg_0]
.text$mn:0000514F                 push    ecx
.text$mn:00005150                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005155                 add     esp, 4
.text$mn:00005158                 push    eax
.text$mn:00005159                 mov     ecx, [ebp+var_14]
.text$mn:0000515C                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005161                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005168                 mov     eax, [ebp+var_14]
.text$mn:0000516B                 mov     ecx, [ebp+var_C]
.text$mn:0000516E                 mov     large fs:0, ecx
.text$mn:00005175                 pop     ecx
.text$mn:00005176                 mov     esp, ebp
.text$mn:00005178                 pop     ebp
.text$mn:00005179                 retn    4
.text$mn:00005179 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00005179
.text$mn:00005179 _text$mn        ends
.text$mn:00005179
.text$x:0000517C ; ===========================================================================
.text$x:0000517C
.text$x:0000517C ; Segment type: Pure code
.text$x:0000517C ; Segment permissions: Read/Execute
.text$x:0000517C _text$x         segment para public 'CODE' use32
.text$x:0000517C                 assume cs:_text$x
.text$x:0000517C                 ;org 517Ch
.text$x:0000517C ; COMDAT (pick associative to section at 50FC)
.text$x:0000517C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000517C
.text$x:0000517C ; =============== S U B R O U T I N E =======================================
.text$x:0000517C
.text$x:0000517C
.text$x:0000517C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:0000517C                                         ; DATA XREF: .xdata$x:0000D350o
.text$x:0000517C                 mov     ecx, [ebp-14h]
.text$x:0000517F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000517F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:0000517F
.text$x:00005184
.text$x:00005184 ; =============== S U B R O U T I N E =======================================
.text$x:00005184
.text$x:00005184
.text$x:00005184 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:00005184                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00005184
.text$x:00005184 arg_4           = dword ptr  8
.text$x:00005184
.text$x:00005184                 mov     edx, [esp+arg_4]
.text$x:00005188                 lea     eax, [edx+0Ch]
.text$x:0000518B                 mov     ecx, [edx-0Ch]
.text$x:0000518E                 xor     ecx, eax
.text$x:00005190                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005195                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:0000519A                 jmp     ___CxxFrameHandler3
.text$x:0000519A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:0000519A
.text$x:0000519A ; ---------------------------------------------------------------------------
.text$x:0000519F                 align 10h
.text$x:0000519F _text$x         ends
.text$x:0000519F
.text$mn:000051A0 ; ===========================================================================
.text$mn:000051A0
.text$mn:000051A0 ; Segment type: Pure code
.text$mn:000051A0 ; Segment permissions: Read/Execute
.text$mn:000051A0 _text$mn        segment para public 'CODE' use32
.text$mn:000051A0                 assume cs:_text$mn
.text$mn:000051A0                 ;org 51A0h
.text$mn:000051A0 ; COMDAT (pick any)
.text$mn:000051A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051A0
.text$mn:000051A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000051A0
.text$mn:000051A0 ; Attributes: bp-based frame
.text$mn:000051A0
.text$mn:000051A0 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000051A0                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000051A0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:000051A0                                         ; CODE XREF: TiXmlNode::SValue(void)+39p
.text$mn:000051A0
.text$mn:000051A0 var_14          = dword ptr -14h
.text$mn:000051A0 var_E           = byte ptr -0Eh
.text$mn:000051A0 var_D           = byte ptr -0Dh
.text$mn:000051A0 var_C           = dword ptr -0Ch
.text$mn:000051A0 var_4           = dword ptr -4
.text$mn:000051A0 arg_0           = dword ptr  8
.text$mn:000051A0
.text$mn:000051A0                 push    ebp
.text$mn:000051A1                 mov     ebp, esp
.text$mn:000051A3                 push    0FFFFFFFFh
.text$mn:000051A5                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000051AA                 mov     eax, large fs:0
.text$mn:000051B0                 push    eax
.text$mn:000051B1                 sub     esp, 8
.text$mn:000051B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000051B9                 xor     eax, ebp
.text$mn:000051BB                 push    eax
.text$mn:000051BC                 lea     eax, [ebp+var_C]
.text$mn:000051BF                 mov     large fs:0, eax
.text$mn:000051C5                 mov     [ebp+var_14], ecx
.text$mn:000051C8                 lea     eax, [ebp+var_D]
.text$mn:000051CB                 push    eax
.text$mn:000051CC                 lea     ecx, [ebp+var_E]
.text$mn:000051CF                 push    ecx
.text$mn:000051D0                 mov     ecx, [ebp+arg_0]
.text$mn:000051D3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000051D8                 mov     ecx, eax
.text$mn:000051DA                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:000051DF                 push    eax
.text$mn:000051E0                 mov     ecx, [ebp+var_14]
.text$mn:000051E3                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000051E8                 mov     [ebp+var_4], 0
.text$mn:000051EF                 push    0
.text$mn:000051F1                 push    0
.text$mn:000051F3                 mov     ecx, [ebp+var_14]
.text$mn:000051F6                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000051FB                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00005201                 push    edx
.text$mn:00005202                 push    0
.text$mn:00005204                 mov     eax, [ebp+arg_0]
.text$mn:00005207                 push    eax
.text$mn:00005208                 mov     ecx, [ebp+var_14]
.text$mn:0000520B                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00005210                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005217                 mov     eax, [ebp+var_14]
.text$mn:0000521A                 mov     ecx, [ebp+var_C]
.text$mn:0000521D                 mov     large fs:0, ecx
.text$mn:00005224                 pop     ecx
.text$mn:00005225                 mov     esp, ebp
.text$mn:00005227                 pop     ebp
.text$mn:00005228                 retn    4
.text$mn:00005228 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00005228
.text$mn:00005228 ; ---------------------------------------------------------------------------
.text$mn:0000522B                 align 4
.text$mn:0000522B _text$mn        ends
.text$mn:0000522B
.text$x:0000522C ; ===========================================================================
.text$x:0000522C
.text$x:0000522C ; Segment type: Pure code
.text$x:0000522C ; Segment permissions: Read/Execute
.text$x:0000522C _text$x         segment para public 'CODE' use32
.text$x:0000522C                 assume cs:_text$x
.text$x:0000522C                 ;org 522Ch
.text$x:0000522C ; COMDAT (pick associative to section at 51A0)
.text$x:0000522C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000522C
.text$x:0000522C ; =============== S U B R O U T I N E =======================================
.text$x:0000522C
.text$x:0000522C
.text$x:0000522C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000522C                                         ; DATA XREF: .xdata$x:0000D2A0o
.text$x:0000522C                 mov     ecx, [ebp-14h]
.text$x:0000522F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000522F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000522F
.text$x:00005234
.text$x:00005234 ; =============== S U B R O U T I N E =======================================
.text$x:00005234
.text$x:00005234
.text$x:00005234 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00005234                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00005234
.text$x:00005234 arg_4           = dword ptr  8
.text$x:00005234
.text$x:00005234                 mov     edx, [esp+arg_4]
.text$x:00005238                 lea     eax, [edx+0Ch]
.text$x:0000523B                 mov     ecx, [edx-0Ch]
.text$x:0000523E                 xor     ecx, eax
.text$x:00005240                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005245                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:0000524A                 jmp     ___CxxFrameHandler3
.text$x:0000524A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:0000524A
.text$x:0000524A ; ---------------------------------------------------------------------------
.text$x:0000524F                 align 10h
.text$x:0000524F _text$x         ends
.text$x:0000524F
.text$mn:00005250 ; ===========================================================================
.text$mn:00005250
.text$mn:00005250 ; Segment type: Pure code
.text$mn:00005250 ; Segment permissions: Read/Execute
.text$mn:00005250 _text$mn        segment para public 'CODE' use32
.text$mn:00005250                 assume cs:_text$mn
.text$mn:00005250                 ;org 5250h
.text$mn:00005250 ; COMDAT (pick any)
.text$mn:00005250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005250
.text$mn:00005250 ; =============== S U B R O U T I N E =======================================
.text$mn:00005250
.text$mn:00005250 ; Attributes: bp-based frame
.text$mn:00005250
.text$mn:00005250 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00005250                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00005250 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00005250                                         ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+4Cp
.text$mn:00005250                                         ; TiXmlNode::LastChild(wchar_t const *)+4Cp ...
.text$mn:00005250
.text$mn:00005250 var_14          = dword ptr -14h
.text$mn:00005250 var_D           = byte ptr -0Dh
.text$mn:00005250 var_C           = dword ptr -0Ch
.text$mn:00005250 var_4           = dword ptr -4
.text$mn:00005250 Str             = dword ptr  8
.text$mn:00005250
.text$mn:00005250                 push    ebp
.text$mn:00005251                 mov     ebp, esp
.text$mn:00005253                 push    0FFFFFFFFh
.text$mn:00005255                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000525A                 mov     eax, large fs:0
.text$mn:00005260                 push    eax
.text$mn:00005261                 sub     esp, 8
.text$mn:00005264                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005269                 xor     eax, ebp
.text$mn:0000526B                 push    eax
.text$mn:0000526C                 lea     eax, [ebp+var_C]
.text$mn:0000526F                 mov     large fs:0, eax
.text$mn:00005275                 mov     [ebp+var_14], ecx
.text$mn:00005278                 lea     ecx, [ebp+var_D]
.text$mn:0000527B                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005280                 push    eax
.text$mn:00005281                 mov     ecx, [ebp+var_14]
.text$mn:00005284                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005289                 mov     [ebp+var_4], 0
.text$mn:00005290                 push    0
.text$mn:00005292                 push    0
.text$mn:00005294                 mov     ecx, [ebp+var_14]
.text$mn:00005297                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000529C                 mov     eax, [ebp+Str]
.text$mn:0000529F                 push    eax             ; Str
.text$mn:000052A0                 mov     ecx, [ebp+var_14]
.text$mn:000052A3                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000052A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000052AF                 mov     eax, [ebp+var_14]
.text$mn:000052B2                 mov     ecx, [ebp+var_C]
.text$mn:000052B5                 mov     large fs:0, ecx
.text$mn:000052BC                 pop     ecx
.text$mn:000052BD                 mov     esp, ebp
.text$mn:000052BF                 pop     ebp
.text$mn:000052C0                 retn    4
.text$mn:000052C0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000052C0
.text$mn:000052C0 ; ---------------------------------------------------------------------------
.text$mn:000052C3                 align 4
.text$mn:000052C3 _text$mn        ends
.text$mn:000052C3
.text$x:000052C4 ; ===========================================================================
.text$x:000052C4
.text$x:000052C4 ; Segment type: Pure code
.text$x:000052C4 ; Segment permissions: Read/Execute
.text$x:000052C4 _text$x         segment para public 'CODE' use32
.text$x:000052C4                 assume cs:_text$x
.text$x:000052C4                 ;org 52C4h
.text$x:000052C4 ; COMDAT (pick associative to section at 5250)
.text$x:000052C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000052C4
.text$x:000052C4 ; =============== S U B R O U T I N E =======================================
.text$x:000052C4
.text$x:000052C4
.text$x:000052C4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000052C4                                         ; DATA XREF: .xdata$x:0000D324o
.text$x:000052C4                 mov     ecx, [ebp-14h]
.text$x:000052C7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000052C7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000052C7
.text$x:000052CC
.text$x:000052CC ; =============== S U B R O U T I N E =======================================
.text$x:000052CC
.text$x:000052CC
.text$x:000052CC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000052CC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000052CC
.text$x:000052CC arg_4           = dword ptr  8
.text$x:000052CC
.text$x:000052CC                 mov     edx, [esp+arg_4]
.text$x:000052D0                 lea     eax, [edx+0Ch]
.text$x:000052D3                 mov     ecx, [edx-0Ch]
.text$x:000052D6                 xor     ecx, eax
.text$x:000052D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000052DD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000052E2                 jmp     ___CxxFrameHandler3
.text$x:000052E2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000052E2
.text$x:000052E2 ; ---------------------------------------------------------------------------
.text$x:000052E7                 align 4
.text$x:000052E7 _text$x         ends
.text$x:000052E7
.text$mn:000052E8 ; ===========================================================================
.text$mn:000052E8
.text$mn:000052E8 ; Segment type: Pure code
.text$mn:000052E8 ; Segment permissions: Read/Execute
.text$mn:000052E8 _text$mn        segment para public 'CODE' use32
.text$mn:000052E8                 assume cs:_text$mn
.text$mn:000052E8                 ;org 52E8h
.text$mn:000052E8 ; COMDAT (pick any)
.text$mn:000052E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052E8
.text$mn:000052E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000052E8
.text$mn:000052E8 ; Attributes: bp-based frame
.text$mn:000052E8
.text$mn:000052E8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void *Src, int)
.text$mn:000052E8                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
.text$mn:000052E8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z proc near
.text$mn:000052E8                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+90p
.text$mn:000052E8                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+104p
.text$mn:000052E8
.text$mn:000052E8 var_14          = dword ptr -14h
.text$mn:000052E8 var_D           = byte ptr -0Dh
.text$mn:000052E8 var_C           = dword ptr -0Ch
.text$mn:000052E8 var_4           = dword ptr -4
.text$mn:000052E8 Src             = dword ptr  8
.text$mn:000052E8 arg_4           = dword ptr  0Ch
.text$mn:000052E8
.text$mn:000052E8                 push    ebp
.text$mn:000052E9                 mov     ebp, esp
.text$mn:000052EB                 push    0FFFFFFFFh
.text$mn:000052ED                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
.text$mn:000052F2                 mov     eax, large fs:0
.text$mn:000052F8                 push    eax
.text$mn:000052F9                 sub     esp, 8
.text$mn:000052FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005301                 xor     eax, ebp
.text$mn:00005303                 push    eax
.text$mn:00005304                 lea     eax, [ebp+var_C]
.text$mn:00005307                 mov     large fs:0, eax
.text$mn:0000530D                 mov     [ebp+var_14], ecx
.text$mn:00005310                 lea     ecx, [ebp+var_D]
.text$mn:00005313                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005318                 push    eax
.text$mn:00005319                 mov     ecx, [ebp+var_14]
.text$mn:0000531C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005321                 mov     [ebp+var_4], 0
.text$mn:00005328                 push    0
.text$mn:0000532A                 push    0
.text$mn:0000532C                 mov     ecx, [ebp+var_14]
.text$mn:0000532F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005334                 mov     eax, [ebp+arg_4]
.text$mn:00005337                 push    eax             ; int
.text$mn:00005338                 mov     ecx, [ebp+Src]
.text$mn:0000533B                 push    ecx             ; Src
.text$mn:0000533C                 mov     ecx, [ebp+var_14]
.text$mn:0000533F                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00005344                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000534B                 mov     eax, [ebp+var_14]
.text$mn:0000534E                 mov     ecx, [ebp+var_C]
.text$mn:00005351                 mov     large fs:0, ecx
.text$mn:00005358                 pop     ecx
.text$mn:00005359                 mov     esp, ebp
.text$mn:0000535B                 pop     ebp
.text$mn:0000535C                 retn    8
.text$mn:0000535C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z endp
.text$mn:0000535C
.text$mn:0000535C ; ---------------------------------------------------------------------------
.text$mn:0000535F                 align 10h
.text$mn:0000535F _text$mn        ends
.text$mn:0000535F
.text$x:00005360 ; ===========================================================================
.text$x:00005360
.text$x:00005360 ; Segment type: Pure code
.text$x:00005360 ; Segment permissions: Read/Execute
.text$x:00005360 _text$x         segment para public 'CODE' use32
.text$x:00005360                 assume cs:_text$x
.text$x:00005360                 ;org 5360h
.text$x:00005360 ; COMDAT (pick associative to section at 52E8)
.text$x:00005360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005360
.text$x:00005360 ; =============== S U B R O U T I N E =======================================
.text$x:00005360
.text$x:00005360
.text$x:00005360 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z$0 proc near
.text$x:00005360                                         ; DATA XREF: .xdata$x:0000D2F8o
.text$x:00005360                 mov     ecx, [ebp-14h]
.text$x:00005363                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00005363 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z$0 endp
.text$x:00005363
.text$x:00005368
.text$x:00005368 ; =============== S U B R O U T I N E =======================================
.text$x:00005368
.text$x:00005368
.text$x:00005368 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z proc near
.text$x:00005368                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *,uint)+5o
.text$x:00005368
.text$x:00005368 arg_4           = dword ptr  8
.text$x:00005368
.text$x:00005368                 mov     edx, [esp+arg_4]
.text$x:0000536C                 lea     eax, [edx+0Ch]
.text$x:0000536F                 mov     ecx, [edx-0Ch]
.text$x:00005372                 xor     ecx, eax
.text$x:00005374                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005379                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
.text$x:0000537E                 jmp     ___CxxFrameHandler3
.text$x:0000537E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z endp
.text$x:0000537E
.text$x:0000537E ; ---------------------------------------------------------------------------
.text$x:00005383                 align 4
.text$x:00005383 _text$x         ends
.text$x:00005383
.text$mn:00005384 ; ===========================================================================
.text$mn:00005384
.text$mn:00005384 ; Segment type: Pure code
.text$mn:00005384 ; Segment permissions: Read/Execute
.text$mn:00005384 _text$mn        segment para public 'CODE' use32
.text$mn:00005384                 assume cs:_text$mn
.text$mn:00005384                 ;org 5384h
.text$mn:00005384 ; COMDAT (pick any)
.text$mn:00005384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005384
.text$mn:00005384 ; =============== S U B R O U T I N E =======================================
.text$mn:00005384
.text$mn:00005384 ; Attributes: bp-based frame
.text$mn:00005384
.text$mn:00005384 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00005384                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00005384 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00005384                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+2Bp
.text$mn:00005384                                         ; operator>>(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,TiXmlNode &)+2Bp ...
.text$mn:00005384
.text$mn:00005384 var_14          = dword ptr -14h
.text$mn:00005384 var_D           = byte ptr -0Dh
.text$mn:00005384 var_C           = dword ptr -0Ch
.text$mn:00005384 var_4           = dword ptr -4
.text$mn:00005384
.text$mn:00005384                 push    ebp
.text$mn:00005385                 mov     ebp, esp
.text$mn:00005387                 push    0FFFFFFFFh
.text$mn:00005389                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000538E                 mov     eax, large fs:0
.text$mn:00005394                 push    eax
.text$mn:00005395                 sub     esp, 8
.text$mn:00005398                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000539D                 xor     eax, ebp
.text$mn:0000539F                 push    eax
.text$mn:000053A0                 lea     eax, [ebp+var_C]
.text$mn:000053A3                 mov     large fs:0, eax
.text$mn:000053A9                 mov     [ebp+var_14], ecx
.text$mn:000053AC                 lea     ecx, [ebp+var_D]
.text$mn:000053AF                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000053B4                 push    eax
.text$mn:000053B5                 mov     ecx, [ebp+var_14]
.text$mn:000053B8                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000053BD                 mov     [ebp+var_4], 0
.text$mn:000053C4                 push    0
.text$mn:000053C6                 push    0
.text$mn:000053C8                 mov     ecx, [ebp+var_14]
.text$mn:000053CB                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000053D0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000053D7                 mov     eax, [ebp+var_14]
.text$mn:000053DA                 mov     ecx, [ebp+var_C]
.text$mn:000053DD                 mov     large fs:0, ecx
.text$mn:000053E4                 pop     ecx
.text$mn:000053E5                 mov     esp, ebp
.text$mn:000053E7                 pop     ebp
.text$mn:000053E8                 retn
.text$mn:000053E8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000053E8
.text$mn:000053E8 ; ---------------------------------------------------------------------------
.text$mn:000053E9                 align 4
.text$mn:000053E9 _text$mn        ends
.text$mn:000053E9
.text$x:000053EC ; ===========================================================================
.text$x:000053EC
.text$x:000053EC ; Segment type: Pure code
.text$x:000053EC ; Segment permissions: Read/Execute
.text$x:000053EC _text$x         segment para public 'CODE' use32
.text$x:000053EC                 assume cs:_text$x
.text$x:000053EC                 ;org 53ECh
.text$x:000053EC ; COMDAT (pick associative to section at 5384)
.text$x:000053EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000053EC
.text$x:000053EC ; =============== S U B R O U T I N E =======================================
.text$x:000053EC
.text$x:000053EC
.text$x:000053EC __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000053EC                                         ; DATA XREF: .xdata$x:0000D2CCo
.text$x:000053EC                 mov     ecx, [ebp-14h]
.text$x:000053EF                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000053EF __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000053EF
.text$x:000053F4
.text$x:000053F4 ; =============== S U B R O U T I N E =======================================
.text$x:000053F4
.text$x:000053F4
.text$x:000053F4 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000053F4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000053F4
.text$x:000053F4 arg_4           = dword ptr  8
.text$x:000053F4
.text$x:000053F4                 mov     edx, [esp+arg_4]
.text$x:000053F8                 lea     eax, [edx+0Ch]
.text$x:000053FB                 mov     ecx, [edx-0Ch]
.text$x:000053FE                 xor     ecx, eax
.text$x:00005400                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005405                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:0000540A                 jmp     ___CxxFrameHandler3
.text$x:0000540A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:0000540A
.text$x:0000540A ; ---------------------------------------------------------------------------
.text$x:0000540F                 align 10h
.text$x:0000540F _text$x         ends
.text$x:0000540F
.text$mn:00005410 ; ===========================================================================
.text$mn:00005410
.text$mn:00005410 ; Segment type: Pure code
.text$mn:00005410 ; Segment permissions: Read/Execute
.text$mn:00005410 _text$mn        segment para public 'CODE' use32
.text$mn:00005410                 assume cs:_text$mn
.text$mn:00005410                 ;org 5410h
.text$mn:00005410 ; COMDAT (pick any)
.text$mn:00005410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005410
.text$mn:00005410 ; =============== S U B R O U T I N E =======================================
.text$mn:00005410
.text$mn:00005410 ; Attributes: bp-based frame
.text$mn:00005410
.text$mn:00005410 ; public: __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(int)
.text$mn:00005410                 public ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$mn:00005410 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z proc near
.text$mn:00005410                                         ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+ACp
.text$mn:00005410
.text$mn:00005410 var_10          = dword ptr -10h
.text$mn:00005410 var_C           = dword ptr -0Ch
.text$mn:00005410 var_4           = dword ptr -4
.text$mn:00005410 arg_0           = dword ptr  8
.text$mn:00005410
.text$mn:00005410                 push    ebp
.text$mn:00005411                 mov     ebp, esp
.text$mn:00005413                 push    0FFFFFFFFh
.text$mn:00005415                 push    offset __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$mn:0000541A                 mov     eax, large fs:0
.text$mn:00005420                 push    eax
.text$mn:00005421                 push    ecx
.text$mn:00005422                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005427                 xor     eax, ebp
.text$mn:00005429                 push    eax
.text$mn:0000542A                 lea     eax, [ebp+var_C]
.text$mn:0000542D                 mov     large fs:0, eax
.text$mn:00005433                 mov     [ebp+var_10], ecx
.text$mn:00005436                 mov     ecx, [ebp+var_10]
.text$mn:00005439                 call    ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:0000543E                 mov     [ebp+var_4], 0
.text$mn:00005445                 mov     eax, [ebp+var_10]
.text$mn:00005448                 mov     dword ptr [eax], offset ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'
.text$mn:0000544E                 mov     ecx, [ebp+var_10]
.text$mn:00005451                 add     ecx, 40h ; '@'
.text$mn:00005454                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005459                 mov     ecx, [ebp+arg_0]
.text$mn:0000545C                 push    ecx
.text$mn:0000545D                 mov     ecx, [ebp+var_10]
.text$mn:00005460                 call    ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Getstate(int)
.text$mn:00005465                 push    eax             ; int
.text$mn:00005466                 push    0               ; int
.text$mn:00005468                 push    0               ; Src
.text$mn:0000546A                 mov     ecx, [ebp+var_10]
.text$mn:0000546D                 call    ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)
.text$mn:00005472                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005479                 mov     eax, [ebp+var_10]
.text$mn:0000547C                 mov     ecx, [ebp+var_C]
.text$mn:0000547F                 mov     large fs:0, ecx
.text$mn:00005486                 pop     ecx
.text$mn:00005487                 mov     esp, ebp
.text$mn:00005489                 pop     ebp
.text$mn:0000548A                 retn    4
.text$mn:0000548A ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z endp
.text$mn:0000548A
.text$mn:0000548A ; ---------------------------------------------------------------------------
.text$mn:0000548D                 align 10h
.text$mn:0000548D _text$mn        ends
.text$mn:0000548D
.text$x:00005490 ; ===========================================================================
.text$x:00005490
.text$x:00005490 ; Segment type: Pure code
.text$x:00005490 ; Segment permissions: Read/Execute
.text$x:00005490 _text$x         segment para public 'CODE' use32
.text$x:00005490                 assume cs:_text$x
.text$x:00005490                 ;org 5490h
.text$x:00005490 ; COMDAT (pick associative to section at 5410)
.text$x:00005490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005490
.text$x:00005490 ; =============== S U B R O U T I N E =======================================
.text$x:00005490
.text$x:00005490
.text$x:00005490 __unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0 proc near
.text$x:00005490                                         ; DATA XREF: .xdata$x:0000DE3Co
.text$x:00005490                 mov     ecx, [ebp-10h]
.text$x:00005493                 jmp     ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:00005493 __unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0 endp
.text$x:00005493
.text$x:00005498
.text$x:00005498 ; =============== S U B R O U T I N E =======================================
.text$x:00005498
.text$x:00005498
.text$x:00005498 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z proc near
.text$x:00005498                                         ; DATA XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+5o
.text$x:00005498
.text$x:00005498 arg_4           = dword ptr  8
.text$x:00005498
.text$x:00005498                 mov     edx, [esp+arg_4]
.text$x:0000549C                 lea     eax, [edx+0Ch]
.text$x:0000549F                 mov     ecx, [edx-8]
.text$x:000054A2                 xor     ecx, eax
.text$x:000054A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054A9                 mov     eax, offset __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.text$x:000054AE                 jmp     ___CxxFrameHandler3
.text$x:000054AE __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z endp
.text$x:000054AE
.text$x:000054AE ; ---------------------------------------------------------------------------
.text$x:000054B3                 align 4
.text$x:000054B3 _text$x         ends
.text$x:000054B3
.text$mn:000054B4 ; ===========================================================================
.text$mn:000054B4
.text$mn:000054B4 ; Segment type: Pure code
.text$mn:000054B4 ; Segment permissions: Read/Execute
.text$mn:000054B4 _text$mn        segment para public 'CODE' use32
.text$mn:000054B4                 assume cs:_text$mn
.text$mn:000054B4                 ;org 54B4h
.text$mn:000054B4 ; COMDAT (pick any)
.text$mn:000054B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054B4
.text$mn:000054B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000054B4
.text$mn:000054B4 ; Attributes: bp-based frame
.text$mn:000054B4
.text$mn:000054B4 ; public: __thiscall std::ctype<wchar_t>::ctype<wchar_t>(class std::_Locinfo const &, unsigned int)
.text$mn:000054B4                 public ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:000054B4 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$mn:000054B4                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+A2p
.text$mn:000054B4
.text$mn:000054B4 var_10          = dword ptr -10h
.text$mn:000054B4 var_C           = dword ptr -0Ch
.text$mn:000054B4 var_4           = dword ptr -4
.text$mn:000054B4 arg_0           = dword ptr  8
.text$mn:000054B4 arg_4           = dword ptr  0Ch
.text$mn:000054B4
.text$mn:000054B4                 push    ebp
.text$mn:000054B5                 mov     ebp, esp
.text$mn:000054B7                 push    0FFFFFFFFh
.text$mn:000054B9                 push    offset __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:000054BE                 mov     eax, large fs:0
.text$mn:000054C4                 push    eax
.text$mn:000054C5                 push    ecx
.text$mn:000054C6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000054CB                 xor     eax, ebp
.text$mn:000054CD                 push    eax
.text$mn:000054CE                 lea     eax, [ebp+var_C]
.text$mn:000054D1                 mov     large fs:0, eax
.text$mn:000054D7                 mov     [ebp+var_10], ecx
.text$mn:000054DA                 mov     eax, [ebp+arg_4]
.text$mn:000054DD                 push    eax             ; unsigned int
.text$mn:000054DE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000054E1                 call    ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base(uint)
.text$mn:000054E6                 mov     [ebp+var_4], 0
.text$mn:000054ED                 mov     ecx, [ebp+var_10]
.text$mn:000054F0                 mov     dword ptr [ecx], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:000054F6                 mov     edx, [ebp+arg_0]
.text$mn:000054F9                 push    edx
.text$mn:000054FA                 mov     ecx, [ebp+var_10]
.text$mn:000054FD                 call    ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<wchar_t>::_Init(std::_Locinfo const &)
.text$mn:00005502                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005509                 mov     eax, [ebp+var_10]
.text$mn:0000550C                 mov     ecx, [ebp+var_C]
.text$mn:0000550F                 mov     large fs:0, ecx
.text$mn:00005516                 pop     ecx
.text$mn:00005517                 mov     esp, ebp
.text$mn:00005519                 pop     ebp
.text$mn:0000551A                 retn    8
.text$mn:0000551A ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$mn:0000551A
.text$mn:0000551A ; ---------------------------------------------------------------------------
.text$mn:0000551D                 align 10h
.text$mn:0000551D _text$mn        ends
.text$mn:0000551D
.text$x:00005520 ; ===========================================================================
.text$x:00005520
.text$x:00005520 ; Segment type: Pure code
.text$x:00005520 ; Segment permissions: Read/Execute
.text$x:00005520 _text$x         segment para public 'CODE' use32
.text$x:00005520                 assume cs:_text$x
.text$x:00005520                 ;org 5520h
.text$x:00005520 ; COMDAT (pick associative to section at 54B4)
.text$x:00005520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005520
.text$x:00005520 ; =============== S U B R O U T I N E =======================================
.text$x:00005520
.text$x:00005520
.text$x:00005520 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 proc near
.text$x:00005520                                         ; DATA XREF: .xdata$x:0000CCD8o
.text$x:00005520                 mov     ecx, [ebp-10h]  ; this
.text$x:00005523                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:00005523 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 endp
.text$x:00005523
.text$x:00005528
.text$x:00005528 ; =============== S U B R O U T I N E =======================================
.text$x:00005528
.text$x:00005528
.text$x:00005528 __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$x:00005528                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+5o
.text$x:00005528
.text$x:00005528 arg_4           = dword ptr  8
.text$x:00005528
.text$x:00005528                 mov     edx, [esp+arg_4]
.text$x:0000552C                 lea     eax, [edx+0Ch]
.text$x:0000552F                 mov     ecx, [edx-8]
.text$x:00005532                 xor     ecx, eax
.text$x:00005534                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005539                 mov     eax, offset __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$x:0000553E                 jmp     ___CxxFrameHandler3
.text$x:0000553E __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$x:0000553E
.text$x:0000553E ; ---------------------------------------------------------------------------
.text$x:00005543                 align 4
.text$x:00005543 _text$x         ends
.text$x:00005543
.text$mn:00005544 ; ===========================================================================
.text$mn:00005544
.text$mn:00005544 ; Segment type: Pure code
.text$mn:00005544 ; Segment permissions: Read/Execute
.text$mn:00005544 _text$mn        segment para public 'CODE' use32
.text$mn:00005544                 assume cs:_text$mn
.text$mn:00005544                 ;org 5544h
.text$mn:00005544 ; COMDAT (pick any)
.text$mn:00005544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005544
.text$mn:00005544 ; =============== S U B R O U T I N E =======================================
.text$mn:00005544
.text$mn:00005544 ; Attributes: bp-based frame
.text$mn:00005544
.text$mn:00005544 ; public: __thiscall std::fpos<int>::fpos<int>(__int64)
.text$mn:00005544                 public ??0?$fpos@H@std@@QAE@_J@Z
.text$mn:00005544 ??0?$fpos@H@std@@QAE@_J@Z proc near     ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::seekoff(__int64,int,int)+17p
.text$mn:00005544                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+2A7p ...
.text$mn:00005544
.text$mn:00005544 var_4           = dword ptr -4
.text$mn:00005544 arg_0           = dword ptr  8
.text$mn:00005544 arg_4           = dword ptr  0Ch
.text$mn:00005544
.text$mn:00005544                 push    ebp
.text$mn:00005545                 mov     ebp, esp
.text$mn:00005547                 push    ecx
.text$mn:00005548                 mov     [ebp+var_4], ecx
.text$mn:0000554B                 mov     eax, [ebp+var_4]
.text$mn:0000554E                 mov     ecx, [ebp+arg_0]
.text$mn:00005551                 mov     [eax], ecx
.text$mn:00005553                 mov     edx, [ebp+arg_4]
.text$mn:00005556                 mov     [eax+4], edx
.text$mn:00005559                 mov     eax, [ebp+var_4]
.text$mn:0000555C                 mov     dword ptr [eax+8], 0
.text$mn:00005563                 mov     dword ptr [eax+0Ch], 0
.text$mn:0000556A                 mov     ecx, [ebp+var_4]
.text$mn:0000556D                 mov     dword ptr [ecx+10h], 0
.text$mn:00005574                 mov     eax, [ebp+var_4]
.text$mn:00005577                 mov     esp, ebp
.text$mn:00005579                 pop     ebp
.text$mn:0000557A                 retn    8
.text$mn:0000557A ??0?$fpos@H@std@@QAE@_J@Z endp
.text$mn:0000557A
.text$mn:0000557A ; ---------------------------------------------------------------------------
.text$mn:0000557D                 align 10h
.text$mn:0000557D _text$mn        ends
.text$mn:0000557D
.text$mn:00005580 ; ===========================================================================
.text$mn:00005580
.text$mn:00005580 ; Segment type: Pure code
.text$mn:00005580 ; Segment permissions: Read/Execute
.text$mn:00005580 _text$mn        segment para public 'CODE' use32
.text$mn:00005580                 assume cs:_text$mn
.text$mn:00005580                 ;org 5580h
.text$mn:00005580 ; COMDAT (pick any)
.text$mn:00005580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005580
.text$mn:00005580 ; =============== S U B R O U T I N E =======================================
.text$mn:00005580
.text$mn:00005580 ; Attributes: bp-based frame
.text$mn:00005580
.text$mn:00005580 ; int __stdcall TiXmlAttribute::TiXmlAttribute(wchar_t *Str, wchar_t *)
.text$mn:00005580                 public ??0TiXmlAttribute@@QAE@PB_W0@Z
.text$mn:00005580 ??0TiXmlAttribute@@QAE@PB_W0@Z proc near
.text$mn:00005580                                         ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+73p
.text$mn:00005580
.text$mn:00005580 var_10          = dword ptr -10h
.text$mn:00005580 var_C           = dword ptr -0Ch
.text$mn:00005580 var_4           = dword ptr -4
.text$mn:00005580 Str             = dword ptr  8
.text$mn:00005580 arg_4           = dword ptr  0Ch
.text$mn:00005580
.text$mn:00005580                 push    ebp
.text$mn:00005581                 mov     ebp, esp
.text$mn:00005583                 push    0FFFFFFFFh
.text$mn:00005585                 push    offset __ehhandler$??0TiXmlAttribute@@QAE@PB_W0@Z
.text$mn:0000558A                 mov     eax, large fs:0
.text$mn:00005590                 push    eax
.text$mn:00005591                 push    ecx
.text$mn:00005592                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005597                 xor     eax, ebp
.text$mn:00005599                 push    eax
.text$mn:0000559A                 lea     eax, [ebp+var_C]
.text$mn:0000559D                 mov     large fs:0, eax
.text$mn:000055A3                 mov     [ebp+var_10], ecx
.text$mn:000055A6                 mov     ecx, [ebp+var_10]
.text$mn:000055A9                 call    ??0TiXmlBase@@QAE@XZ ; TiXmlBase::TiXmlBase(void)
.text$mn:000055AE                 mov     [ebp+var_4], 0
.text$mn:000055B5                 mov     eax, [ebp+var_10]
.text$mn:000055B8                 mov     dword ptr [eax], offset ??_7TiXmlAttribute@@6B@ ; const TiXmlAttribute::`vftable'
.text$mn:000055BE                 mov     ecx, [ebp+var_10]
.text$mn:000055C1                 add     ecx, 10h
.text$mn:000055C4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000055C9                 mov     byte ptr [ebp+var_4], 1
.text$mn:000055CD                 mov     ecx, [ebp+var_10]
.text$mn:000055D0                 add     ecx, 2Ch ; ','
.text$mn:000055D3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000055D8                 mov     byte ptr [ebp+var_4], 2
.text$mn:000055DC                 mov     ecx, [ebp+Str]
.text$mn:000055DF                 push    ecx             ; Str
.text$mn:000055E0                 mov     ecx, [ebp+var_10]
.text$mn:000055E3                 add     ecx, 10h
.text$mn:000055E6                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000055EB                 mov     edx, [ebp+arg_4]
.text$mn:000055EE                 push    edx             ; Str
.text$mn:000055EF                 mov     ecx, [ebp+var_10]
.text$mn:000055F2                 add     ecx, 2Ch ; ','
.text$mn:000055F5                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000055FA                 mov     eax, [ebp+var_10]
.text$mn:000055FD                 mov     dword ptr [eax+0Ch], 0
.text$mn:00005604                 mov     ecx, [ebp+var_10]
.text$mn:00005607                 mov     dword ptr [ecx+4Ch], 0
.text$mn:0000560E                 mov     edx, [ebp+var_10]
.text$mn:00005611                 mov     dword ptr [edx+48h], 0
.text$mn:00005618                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000561F                 mov     eax, [ebp+var_10]
.text$mn:00005622                 mov     ecx, [ebp+var_C]
.text$mn:00005625                 mov     large fs:0, ecx
.text$mn:0000562C                 pop     ecx
.text$mn:0000562D                 mov     esp, ebp
.text$mn:0000562F                 pop     ebp
.text$mn:00005630                 retn    8
.text$mn:00005630 ??0TiXmlAttribute@@QAE@PB_W0@Z endp
.text$mn:00005630
.text$mn:00005630 ; ---------------------------------------------------------------------------
.text$mn:00005633                 align 4
.text$mn:00005633 _text$mn        ends
.text$mn:00005633
.text$x:00005634 ; ===========================================================================
.text$x:00005634
.text$x:00005634 ; Segment type: Pure code
.text$x:00005634 ; Segment permissions: Read/Execute
.text$x:00005634 _text$x         segment para public 'CODE' use32
.text$x:00005634                 assume cs:_text$x
.text$x:00005634                 ;org 5634h
.text$x:00005634 ; COMDAT (pick associative to section at 5580)
.text$x:00005634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005634
.text$x:00005634 ; =============== S U B R O U T I N E =======================================
.text$x:00005634
.text$x:00005634
.text$x:00005634 __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$0 proc near
.text$x:00005634                                         ; DATA XREF: .xdata$x:0000D9F4o
.text$x:00005634                 mov     ecx, [ebp-10h]  ; this
.text$x:00005637                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:00005637 __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$0 endp
.text$x:00005637
.text$x:0000563C
.text$x:0000563C ; =============== S U B R O U T I N E =======================================
.text$x:0000563C
.text$x:0000563C
.text$x:0000563C __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$1 proc near
.text$x:0000563C                                         ; DATA XREF: .xdata$x:0000D9FCo
.text$x:0000563C                 mov     ecx, [ebp-10h]
.text$x:0000563F                 add     ecx, 10h
.text$x:00005642                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005642 __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$1 endp
.text$x:00005642
.text$x:00005647
.text$x:00005647 ; =============== S U B R O U T I N E =======================================
.text$x:00005647
.text$x:00005647
.text$x:00005647 __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$2 proc near
.text$x:00005647                                         ; DATA XREF: .xdata$x:0000DA04o
.text$x:00005647                 mov     ecx, [ebp-10h]
.text$x:0000564A                 add     ecx, 2Ch ; ','
.text$x:0000564D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000564D __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$2 endp
.text$x:0000564D
.text$x:00005652
.text$x:00005652 ; =============== S U B R O U T I N E =======================================
.text$x:00005652
.text$x:00005652
.text$x:00005652 __ehhandler$??0TiXmlAttribute@@QAE@PB_W0@Z proc near
.text$x:00005652                                         ; DATA XREF: TiXmlAttribute::TiXmlAttribute(wchar_t const *,wchar_t const *)+5o
.text$x:00005652
.text$x:00005652 arg_4           = dword ptr  8
.text$x:00005652
.text$x:00005652                 mov     edx, [esp+arg_4]
.text$x:00005656                 lea     eax, [edx+0Ch]
.text$x:00005659                 mov     ecx, [edx-8]
.text$x:0000565C                 xor     ecx, eax
.text$x:0000565E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005663                 mov     eax, offset __ehfuncinfo$??0TiXmlAttribute@@QAE@PB_W0@Z
.text$x:00005668                 jmp     ___CxxFrameHandler3
.text$x:00005668 __ehhandler$??0TiXmlAttribute@@QAE@PB_W0@Z endp
.text$x:00005668
.text$x:00005668 ; ---------------------------------------------------------------------------
.text$x:0000566D                 align 10h
.text$x:0000566D _text$x         ends
.text$x:0000566D
.text$mn:00005670 ; ===========================================================================
.text$mn:00005670
.text$mn:00005670 ; Segment type: Pure code
.text$mn:00005670 ; Segment permissions: Read/Execute
.text$mn:00005670 _text$mn        segment para public 'CODE' use32
.text$mn:00005670                 assume cs:_text$mn
.text$mn:00005670                 ;org 5670h
.text$mn:00005670 ; COMDAT (pick any)
.text$mn:00005670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005670
.text$mn:00005670 ; =============== S U B R O U T I N E =======================================
.text$mn:00005670
.text$mn:00005670 ; Attributes: bp-based frame
.text$mn:00005670
.text$mn:00005670 ; public: __thiscall TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00005670                 public ??0TiXmlAttribute@@QAE@XZ
.text$mn:00005670 ??0TiXmlAttribute@@QAE@XZ proc near     ; CODE XREF: TiXmlAttributeSet::TiXmlAttributeSet(void)+29p
.text$mn:00005670
.text$mn:00005670 var_10          = dword ptr -10h
.text$mn:00005670 var_C           = dword ptr -0Ch
.text$mn:00005670 var_4           = dword ptr -4
.text$mn:00005670
.text$mn:00005670                 push    ebp
.text$mn:00005671                 mov     ebp, esp
.text$mn:00005673                 push    0FFFFFFFFh
.text$mn:00005675                 push    offset __ehhandler$??0TiXmlAttribute@@QAE@XZ
.text$mn:0000567A                 mov     eax, large fs:0
.text$mn:00005680                 push    eax
.text$mn:00005681                 push    ecx
.text$mn:00005682                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005687                 xor     eax, ebp
.text$mn:00005689                 push    eax
.text$mn:0000568A                 lea     eax, [ebp+var_C]
.text$mn:0000568D                 mov     large fs:0, eax
.text$mn:00005693                 mov     [ebp+var_10], ecx
.text$mn:00005696                 mov     ecx, [ebp+var_10]
.text$mn:00005699                 call    ??0TiXmlBase@@QAE@XZ ; TiXmlBase::TiXmlBase(void)
.text$mn:0000569E                 mov     [ebp+var_4], 0
.text$mn:000056A5                 mov     eax, [ebp+var_10]
.text$mn:000056A8                 mov     dword ptr [eax], offset ??_7TiXmlAttribute@@6B@ ; const TiXmlAttribute::`vftable'
.text$mn:000056AE                 mov     ecx, [ebp+var_10]
.text$mn:000056B1                 add     ecx, 10h
.text$mn:000056B4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000056B9                 mov     byte ptr [ebp+var_4], 1
.text$mn:000056BD                 mov     ecx, [ebp+var_10]
.text$mn:000056C0                 add     ecx, 2Ch ; ','
.text$mn:000056C3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000056C8                 mov     byte ptr [ebp+var_4], 2
.text$mn:000056CC                 mov     ecx, [ebp+var_10]
.text$mn:000056CF                 mov     dword ptr [ecx+0Ch], 0
.text$mn:000056D6                 mov     edx, [ebp+var_10]
.text$mn:000056D9                 mov     dword ptr [edx+4Ch], 0
.text$mn:000056E0                 mov     eax, [ebp+var_10]
.text$mn:000056E3                 mov     dword ptr [eax+48h], 0
.text$mn:000056EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000056F1                 mov     eax, [ebp+var_10]
.text$mn:000056F4                 mov     ecx, [ebp+var_C]
.text$mn:000056F7                 mov     large fs:0, ecx
.text$mn:000056FE                 pop     ecx
.text$mn:000056FF                 mov     esp, ebp
.text$mn:00005701                 pop     ebp
.text$mn:00005702                 retn
.text$mn:00005702 ??0TiXmlAttribute@@QAE@XZ endp
.text$mn:00005702
.text$mn:00005702 ; ---------------------------------------------------------------------------
.text$mn:00005703                 align 4
.text$mn:00005703 _text$mn        ends
.text$mn:00005703
.text$x:00005704 ; ===========================================================================
.text$x:00005704
.text$x:00005704 ; Segment type: Pure code
.text$x:00005704 ; Segment permissions: Read/Execute
.text$x:00005704 _text$x         segment para public 'CODE' use32
.text$x:00005704                 assume cs:_text$x
.text$x:00005704                 ;org 5704h
.text$x:00005704 ; COMDAT (pick associative to section at 5670)
.text$x:00005704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005704
.text$x:00005704 ; =============== S U B R O U T I N E =======================================
.text$x:00005704
.text$x:00005704
.text$x:00005704 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0 proc near
.text$x:00005704                                         ; DATA XREF: .xdata$x:0000D9B8o
.text$x:00005704                 mov     ecx, [ebp-10h]  ; this
.text$x:00005707                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:00005707 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0 endp
.text$x:00005707
.text$x:0000570C
.text$x:0000570C ; =============== S U B R O U T I N E =======================================
.text$x:0000570C
.text$x:0000570C
.text$x:0000570C __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1 proc near
.text$x:0000570C                                         ; DATA XREF: .xdata$x:0000D9C0o
.text$x:0000570C                 mov     ecx, [ebp-10h]
.text$x:0000570F                 add     ecx, 10h
.text$x:00005712                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005712 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1 endp
.text$x:00005712
.text$x:00005717
.text$x:00005717 ; =============== S U B R O U T I N E =======================================
.text$x:00005717
.text$x:00005717
.text$x:00005717 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2 proc near
.text$x:00005717                                         ; DATA XREF: .xdata$x:0000D9C8o
.text$x:00005717                 mov     ecx, [ebp-10h]
.text$x:0000571A                 add     ecx, 2Ch ; ','
.text$x:0000571D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000571D __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2 endp
.text$x:0000571D
.text$x:00005722
.text$x:00005722 ; =============== S U B R O U T I N E =======================================
.text$x:00005722
.text$x:00005722
.text$x:00005722 __ehhandler$??0TiXmlAttribute@@QAE@XZ proc near
.text$x:00005722                                         ; DATA XREF: TiXmlAttribute::TiXmlAttribute(void)+5o
.text$x:00005722
.text$x:00005722 arg_4           = dword ptr  8
.text$x:00005722
.text$x:00005722                 mov     edx, [esp+arg_4]
.text$x:00005726                 lea     eax, [edx+0Ch]
.text$x:00005729                 mov     ecx, [edx-8]
.text$x:0000572C                 xor     ecx, eax
.text$x:0000572E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005733                 mov     eax, offset __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ
.text$x:00005738                 jmp     ___CxxFrameHandler3
.text$x:00005738 __ehhandler$??0TiXmlAttribute@@QAE@XZ endp
.text$x:00005738
.text$x:00005738 ; ---------------------------------------------------------------------------
.text$x:0000573D                 align 10h
.text$x:0000573D _text$x         ends
.text$x:0000573D
.text$mn:00005740 ; ===========================================================================
.text$mn:00005740
.text$mn:00005740 ; Segment type: Pure code
.text$mn:00005740 ; Segment permissions: Read/Execute
.text$mn:00005740 _text$mn        segment para public 'CODE' use32
.text$mn:00005740                 assume cs:_text$mn
.text$mn:00005740                 ;org 5740h
.text$mn:00005740 ; COMDAT (pick any)
.text$mn:00005740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005740
.text$mn:00005740 ; =============== S U B R O U T I N E =======================================
.text$mn:00005740
.text$mn:00005740 ; Attributes: bp-based frame
.text$mn:00005740
.text$mn:00005740 ; public: __thiscall TiXmlBase::TiXmlBase(void)
.text$mn:00005740                 public ??0TiXmlBase@@QAE@XZ
.text$mn:00005740 ??0TiXmlBase@@QAE@XZ proc near          ; CODE XREF: TiXmlNode::TiXmlNode(TiXmlNode::NodeType)+29p
.text$mn:00005740                                         ; TiXmlAttribute::TiXmlAttribute(wchar_t const *,wchar_t const *)+29p ...
.text$mn:00005740
.text$mn:00005740 var_4           = dword ptr -4
.text$mn:00005740
.text$mn:00005740                 push    ebp
.text$mn:00005741                 mov     ebp, esp
.text$mn:00005743                 push    ecx
.text$mn:00005744                 mov     [ebp+var_4], ecx
.text$mn:00005747                 mov     eax, [ebp+var_4]
.text$mn:0000574A                 mov     dword ptr [eax], offset ??_7TiXmlBase@@6B@ ; const TiXmlBase::`vftable'
.text$mn:00005750                 mov     ecx, [ebp+var_4]
.text$mn:00005753                 add     ecx, 4
.text$mn:00005756                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:0000575B                 mov     eax, [ebp+var_4]
.text$mn:0000575E                 mov     esp, ebp
.text$mn:00005760                 pop     ebp
.text$mn:00005761                 retn
.text$mn:00005761 ??0TiXmlBase@@QAE@XZ endp
.text$mn:00005761
.text$mn:00005761 ; ---------------------------------------------------------------------------
.text$mn:00005762                 align 4
.text$mn:00005762 _text$mn        ends
.text$mn:00005762
.text$mn:00005764 ; ===========================================================================
.text$mn:00005764
.text$mn:00005764 ; Segment type: Pure code
.text$mn:00005764 ; Segment permissions: Read/Execute
.text$mn:00005764 _text$mn        segment para public 'CODE' use32
.text$mn:00005764                 assume cs:_text$mn
.text$mn:00005764                 ;org 5764h
.text$mn:00005764 ; COMDAT (pick any)
.text$mn:00005764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005764
.text$mn:00005764 ; =============== S U B R O U T I N E =======================================
.text$mn:00005764
.text$mn:00005764 ; Attributes: bp-based frame
.text$mn:00005764
.text$mn:00005764 ; public: __thiscall TiXmlComment::TiXmlComment(void)
.text$mn:00005764                 public ??0TiXmlComment@@QAE@XZ
.text$mn:00005764 ??0TiXmlComment@@QAE@XZ proc near       ; CODE XREF: TiXmlComment::Clone(void)+45p
.text$mn:00005764
.text$mn:00005764 var_10          = dword ptr -10h
.text$mn:00005764 var_C           = dword ptr -0Ch
.text$mn:00005764 var_4           = dword ptr -4
.text$mn:00005764
.text$mn:00005764                 push    ebp
.text$mn:00005765                 mov     ebp, esp
.text$mn:00005767                 push    0FFFFFFFFh
.text$mn:00005769                 push    offset __ehhandler$??0TiXmlComment@@QAE@XZ
.text$mn:0000576E                 mov     eax, large fs:0
.text$mn:00005774                 push    eax
.text$mn:00005775                 push    ecx
.text$mn:00005776                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000577B                 xor     eax, ebp
.text$mn:0000577D                 push    eax
.text$mn:0000577E                 lea     eax, [ebp+var_C]
.text$mn:00005781                 mov     large fs:0, eax
.text$mn:00005787                 mov     [ebp+var_10], ecx
.text$mn:0000578A                 push    2
.text$mn:0000578C                 mov     ecx, [ebp+var_10]
.text$mn:0000578F                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00005794                 mov     [ebp+var_4], 0
.text$mn:0000579B                 mov     eax, [ebp+var_10]
.text$mn:0000579E                 mov     dword ptr [eax], offset ??_7TiXmlComment@@6B@ ; const TiXmlComment::`vftable'
.text$mn:000057A4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000057AB                 mov     eax, [ebp+var_10]
.text$mn:000057AE                 mov     ecx, [ebp+var_C]
.text$mn:000057B1                 mov     large fs:0, ecx
.text$mn:000057B8                 pop     ecx
.text$mn:000057B9                 mov     esp, ebp
.text$mn:000057BB                 pop     ebp
.text$mn:000057BC                 retn
.text$mn:000057BC ??0TiXmlComment@@QAE@XZ endp
.text$mn:000057BC
.text$mn:000057BC ; ---------------------------------------------------------------------------
.text$mn:000057BD                 align 10h
.text$mn:000057BD _text$mn        ends
.text$mn:000057BD
.text$x:000057C0 ; ===========================================================================
.text$x:000057C0
.text$x:000057C0 ; Segment type: Pure code
.text$x:000057C0 ; Segment permissions: Read/Execute
.text$x:000057C0 _text$x         segment para public 'CODE' use32
.text$x:000057C0                 assume cs:_text$x
.text$x:000057C0                 ;org 57C0h
.text$x:000057C0 ; COMDAT (pick associative to section at 5764)
.text$x:000057C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000057C0
.text$x:000057C0 ; =============== S U B R O U T I N E =======================================
.text$x:000057C0
.text$x:000057C0
.text$x:000057C0 __unwindfunclet$??0TiXmlComment@@QAE@XZ$0 proc near
.text$x:000057C0                                         ; DATA XREF: .xdata$x:0000DA6Co
.text$x:000057C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000057C3                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:000057C3 __unwindfunclet$??0TiXmlComment@@QAE@XZ$0 endp
.text$x:000057C3
.text$x:000057C8
.text$x:000057C8 ; =============== S U B R O U T I N E =======================================
.text$x:000057C8
.text$x:000057C8
.text$x:000057C8 __ehhandler$??0TiXmlComment@@QAE@XZ proc near
.text$x:000057C8                                         ; DATA XREF: TiXmlComment::TiXmlComment(void)+5o
.text$x:000057C8
.text$x:000057C8 arg_4           = dword ptr  8
.text$x:000057C8
.text$x:000057C8                 mov     edx, [esp+arg_4]
.text$x:000057CC                 lea     eax, [edx+0Ch]
.text$x:000057CF                 mov     ecx, [edx-8]
.text$x:000057D2                 xor     ecx, eax
.text$x:000057D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000057D9                 mov     eax, offset __ehfuncinfo$??0TiXmlComment@@QAE@XZ
.text$x:000057DE                 jmp     ___CxxFrameHandler3
.text$x:000057DE __ehhandler$??0TiXmlComment@@QAE@XZ endp
.text$x:000057DE
.text$x:000057DE ; ---------------------------------------------------------------------------
.text$x:000057E3                 align 4
.text$x:000057E3 _text$x         ends
.text$x:000057E3
.text$mn:000057E4 ; ===========================================================================
.text$mn:000057E4
.text$mn:000057E4 ; Segment type: Pure code
.text$mn:000057E4 ; Segment permissions: Read/Execute
.text$mn:000057E4 _text$mn        segment para public 'CODE' use32
.text$mn:000057E4                 assume cs:_text$mn
.text$mn:000057E4                 ;org 57E4h
.text$mn:000057E4 ; COMDAT (pick any)
.text$mn:000057E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057E4
.text$mn:000057E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057E4
.text$mn:000057E4 ; Attributes: bp-based frame
.text$mn:000057E4
.text$mn:000057E4 ; public: __thiscall TiXmlCursor::TiXmlCursor(void)
.text$mn:000057E4                 public ??0TiXmlCursor@@QAE@XZ
.text$mn:000057E4 ??0TiXmlCursor@@QAE@XZ proc near        ; CODE XREF: TiXmlDocument::TiXmlDocument(void)+55p
.text$mn:000057E4                                         ; TiXmlDocument::TiXmlDocument(wchar_t const *)+55p ...
.text$mn:000057E4
.text$mn:000057E4 var_4           = dword ptr -4
.text$mn:000057E4
.text$mn:000057E4                 push    ebp
.text$mn:000057E5                 mov     ebp, esp
.text$mn:000057E7                 push    ecx
.text$mn:000057E8                 mov     [ebp+var_4], ecx
.text$mn:000057EB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000057EE                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:000057F3                 mov     eax, [ebp+var_4]
.text$mn:000057F6                 mov     esp, ebp
.text$mn:000057F8                 pop     ebp
.text$mn:000057F9                 retn
.text$mn:000057F9 ??0TiXmlCursor@@QAE@XZ endp
.text$mn:000057F9
.text$mn:000057F9 ; ---------------------------------------------------------------------------
.text$mn:000057FA                 align 4
.text$mn:000057FA _text$mn        ends
.text$mn:000057FA
.text$mn:000057FC ; ===========================================================================
.text$mn:000057FC
.text$mn:000057FC ; Segment type: Pure code
.text$mn:000057FC ; Segment permissions: Read/Execute
.text$mn:000057FC _text$mn        segment para public 'CODE' use32
.text$mn:000057FC                 assume cs:_text$mn
.text$mn:000057FC                 ;org 57FCh
.text$mn:000057FC ; COMDAT (pick any)
.text$mn:000057FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057FC
.text$mn:000057FC ; =============== S U B R O U T I N E =======================================
.text$mn:000057FC
.text$mn:000057FC ; Attributes: bp-based frame
.text$mn:000057FC
.text$mn:000057FC ; public: __thiscall TiXmlDeclaration::TiXmlDeclaration(void)
.text$mn:000057FC                 public ??0TiXmlDeclaration@@QAE@XZ
.text$mn:000057FC ??0TiXmlDeclaration@@QAE@XZ proc near   ; CODE XREF: TiXmlDeclaration::Clone(void)+48p
.text$mn:000057FC
.text$mn:000057FC var_10          = dword ptr -10h
.text$mn:000057FC var_C           = dword ptr -0Ch
.text$mn:000057FC var_4           = dword ptr -4
.text$mn:000057FC
.text$mn:000057FC                 push    ebp
.text$mn:000057FD                 mov     ebp, esp
.text$mn:000057FF                 push    0FFFFFFFFh
.text$mn:00005801                 push    offset __ehhandler$??0TiXmlDeclaration@@QAE@XZ
.text$mn:00005806                 mov     eax, large fs:0
.text$mn:0000580C                 push    eax
.text$mn:0000580D                 push    ecx
.text$mn:0000580E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005813                 xor     eax, ebp
.text$mn:00005815                 push    eax
.text$mn:00005816                 lea     eax, [ebp+var_C]
.text$mn:00005819                 mov     large fs:0, eax
.text$mn:0000581F                 mov     [ebp+var_10], ecx
.text$mn:00005822                 push    5
.text$mn:00005824                 mov     ecx, [ebp+var_10]
.text$mn:00005827                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:0000582C                 mov     [ebp+var_4], 0
.text$mn:00005833                 mov     eax, [ebp+var_10]
.text$mn:00005836                 mov     dword ptr [eax], offset ??_7TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`vftable'
.text$mn:0000583C                 mov     ecx, [ebp+var_10]
.text$mn:0000583F                 add     ecx, 44h ; 'D'
.text$mn:00005842                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005847                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000584B                 mov     ecx, [ebp+var_10]
.text$mn:0000584E                 add     ecx, 60h ; '`'
.text$mn:00005851                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005856                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000585A                 mov     ecx, [ebp+var_10]
.text$mn:0000585D                 add     ecx, 7Ch ; '|'
.text$mn:00005860                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005865                 mov     byte ptr [ebp+var_4], 3
.text$mn:00005869                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005870                 mov     eax, [ebp+var_10]
.text$mn:00005873                 mov     ecx, [ebp+var_C]
.text$mn:00005876                 mov     large fs:0, ecx
.text$mn:0000587D                 pop     ecx
.text$mn:0000587E                 mov     esp, ebp
.text$mn:00005880                 pop     ebp
.text$mn:00005881                 retn
.text$mn:00005881 ??0TiXmlDeclaration@@QAE@XZ endp
.text$mn:00005881
.text$mn:00005881 ; ---------------------------------------------------------------------------
.text$mn:00005882                 align 4
.text$mn:00005882 _text$mn        ends
.text$mn:00005882
.text$x:00005884 ; ===========================================================================
.text$x:00005884
.text$x:00005884 ; Segment type: Pure code
.text$x:00005884 ; Segment permissions: Read/Execute
.text$x:00005884 _text$x         segment para public 'CODE' use32
.text$x:00005884                 assume cs:_text$x
.text$x:00005884                 ;org 5884h
.text$x:00005884 ; COMDAT (pick associative to section at 57FC)
.text$x:00005884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005884
.text$x:00005884 ; =============== S U B R O U T I N E =======================================
.text$x:00005884
.text$x:00005884
.text$x:00005884 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0 proc near
.text$x:00005884                                         ; DATA XREF: .xdata$x:0000DB1Co
.text$x:00005884                 mov     ecx, [ebp-10h]  ; this
.text$x:00005887                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00005887 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0 endp
.text$x:00005887
.text$x:0000588C
.text$x:0000588C ; =============== S U B R O U T I N E =======================================
.text$x:0000588C
.text$x:0000588C
.text$x:0000588C __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1 proc near
.text$x:0000588C                                         ; DATA XREF: .xdata$x:0000DB24o
.text$x:0000588C                 mov     ecx, [ebp-10h]
.text$x:0000588F                 add     ecx, 44h ; 'D'
.text$x:00005892                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005892 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1 endp
.text$x:00005892
.text$x:00005897
.text$x:00005897 ; =============== S U B R O U T I N E =======================================
.text$x:00005897
.text$x:00005897
.text$x:00005897 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2 proc near
.text$x:00005897                                         ; DATA XREF: .xdata$x:0000DB2Co
.text$x:00005897                 mov     ecx, [ebp-10h]
.text$x:0000589A                 add     ecx, 60h ; '`'
.text$x:0000589D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000589D __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2 endp
.text$x:0000589D
.text$x:000058A2
.text$x:000058A2 ; =============== S U B R O U T I N E =======================================
.text$x:000058A2
.text$x:000058A2
.text$x:000058A2 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3 proc near
.text$x:000058A2                                         ; DATA XREF: .xdata$x:0000DB34o
.text$x:000058A2                 mov     ecx, [ebp-10h]
.text$x:000058A5                 add     ecx, 7Ch ; '|'
.text$x:000058A8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000058A8 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3 endp
.text$x:000058A8
.text$x:000058AD
.text$x:000058AD ; =============== S U B R O U T I N E =======================================
.text$x:000058AD
.text$x:000058AD
.text$x:000058AD __ehhandler$??0TiXmlDeclaration@@QAE@XZ proc near
.text$x:000058AD                                         ; DATA XREF: TiXmlDeclaration::TiXmlDeclaration(void)+5o
.text$x:000058AD
.text$x:000058AD arg_4           = dword ptr  8
.text$x:000058AD
.text$x:000058AD                 mov     edx, [esp+arg_4]
.text$x:000058B1                 lea     eax, [edx+0Ch]
.text$x:000058B4                 mov     ecx, [edx-8]
.text$x:000058B7                 xor     ecx, eax
.text$x:000058B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000058BE                 mov     eax, offset __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ
.text$x:000058C3                 jmp     ___CxxFrameHandler3
.text$x:000058C3 __ehhandler$??0TiXmlDeclaration@@QAE@XZ endp
.text$x:000058C3
.text$x:000058C3 _text$x         ends
.text$x:000058C3
.text$mn:000058C8 ; ===========================================================================
.text$mn:000058C8
.text$mn:000058C8 ; Segment type: Pure code
.text$mn:000058C8 ; Segment permissions: Read/Execute
.text$mn:000058C8 _text$mn        segment para public 'CODE' use32
.text$mn:000058C8                 assume cs:_text$mn
.text$mn:000058C8                 ;org 58C8h
.text$mn:000058C8 ; COMDAT (pick any)
.text$mn:000058C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058C8
.text$mn:000058C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058C8
.text$mn:000058C8 ; Attributes: bp-based frame
.text$mn:000058C8
.text$mn:000058C8 ; _DWORD __thiscall TiXmlHandle::TiXmlHandle(TiXmlHandle *this, struct TiXmlNode *)
.text$mn:000058C8                 public ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z
.text$mn:000058C8 ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z proc near
.text$mn:000058C8                                         ; CODE XREF: TiXmlHandle::FirstChild(void)+2Bp
.text$mn:000058C8                                         ; TiXmlHandle::FirstChild(void)+3Ap ...
.text$mn:000058C8
.text$mn:000058C8 var_4           = dword ptr -4
.text$mn:000058C8 arg_0           = dword ptr  8
.text$mn:000058C8
.text$mn:000058C8                 push    ebp
.text$mn:000058C9                 mov     ebp, esp
.text$mn:000058CB                 push    ecx
.text$mn:000058CC                 mov     [ebp+var_4], ecx
.text$mn:000058CF                 mov     eax, [ebp+var_4]
.text$mn:000058D2                 mov     ecx, [ebp+arg_0]
.text$mn:000058D5                 mov     [eax], ecx
.text$mn:000058D7                 mov     eax, [ebp+var_4]
.text$mn:000058DA                 mov     esp, ebp
.text$mn:000058DC                 pop     ebp
.text$mn:000058DD                 retn    4
.text$mn:000058DD ??0TiXmlHandle@@QAE@PAVTiXmlNode@@@Z endp
.text$mn:000058DD
.text$mn:000058DD _text$mn        ends
.text$mn:000058DD
.text$mn:000058E0 ; ===========================================================================
.text$mn:000058E0
.text$mn:000058E0 ; Segment type: Pure code
.text$mn:000058E0 ; Segment permissions: Read/Execute
.text$mn:000058E0 _text$mn        segment para public 'CODE' use32
.text$mn:000058E0                 assume cs:_text$mn
.text$mn:000058E0                 ;org 58E0h
.text$mn:000058E0 ; COMDAT (pick any)
.text$mn:000058E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058E0
.text$mn:000058E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000058E0
.text$mn:000058E0 ; Attributes: bp-based frame
.text$mn:000058E0
.text$mn:000058E0 ; int __stdcall TiXmlText::TiXmlText(wchar_t *)
.text$mn:000058E0                 public ??0TiXmlText@@QAE@PB_W@Z
.text$mn:000058E0 ??0TiXmlText@@QAE@PB_W@Z proc near      ; CODE XREF: TiXmlText::Clone(void)+51p
.text$mn:000058E0
.text$mn:000058E0 var_10          = dword ptr -10h
.text$mn:000058E0 var_C           = dword ptr -0Ch
.text$mn:000058E0 var_4           = dword ptr -4
.text$mn:000058E0 arg_0           = dword ptr  8
.text$mn:000058E0
.text$mn:000058E0                 push    ebp
.text$mn:000058E1                 mov     ebp, esp
.text$mn:000058E3                 push    0FFFFFFFFh
.text$mn:000058E5                 push    offset __ehhandler$??0TiXmlText@@QAE@PB_W@Z
.text$mn:000058EA                 mov     eax, large fs:0
.text$mn:000058F0                 push    eax
.text$mn:000058F1                 push    ecx
.text$mn:000058F2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000058F7                 xor     eax, ebp
.text$mn:000058F9                 push    eax
.text$mn:000058FA                 lea     eax, [ebp+var_C]
.text$mn:000058FD                 mov     large fs:0, eax
.text$mn:00005903                 mov     [ebp+var_10], ecx
.text$mn:00005906                 push    4
.text$mn:00005908                 mov     ecx, [ebp+var_10]
.text$mn:0000590B                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00005910                 mov     [ebp+var_4], 0
.text$mn:00005917                 mov     eax, [ebp+var_10]
.text$mn:0000591A                 mov     dword ptr [eax], offset ??_7TiXmlText@@6B@ ; const TiXmlText::`vftable'
.text$mn:00005920                 mov     ecx, [ebp+arg_0]
.text$mn:00005923                 push    ecx             ; wchar_t *
.text$mn:00005924                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005927                 call    ?SetValue@TiXmlNode@@QAEXPB_W@Z ; TiXmlNode::SetValue(wchar_t const *)
.text$mn:0000592C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005933                 mov     eax, [ebp+var_10]
.text$mn:00005936                 mov     ecx, [ebp+var_C]
.text$mn:00005939                 mov     large fs:0, ecx
.text$mn:00005940                 pop     ecx
.text$mn:00005941                 mov     esp, ebp
.text$mn:00005943                 pop     ebp
.text$mn:00005944                 retn    4
.text$mn:00005944 ??0TiXmlText@@QAE@PB_W@Z endp
.text$mn:00005944
.text$mn:00005944 ; ---------------------------------------------------------------------------
.text$mn:00005947                 align 4
.text$mn:00005947 _text$mn        ends
.text$mn:00005947
.text$x:00005948 ; ===========================================================================
.text$x:00005948
.text$x:00005948 ; Segment type: Pure code
.text$x:00005948 ; Segment permissions: Read/Execute
.text$x:00005948 _text$x         segment para public 'CODE' use32
.text$x:00005948                 assume cs:_text$x
.text$x:00005948                 ;org 5948h
.text$x:00005948 ; COMDAT (pick associative to section at 58E0)
.text$x:00005948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005948
.text$x:00005948 ; =============== S U B R O U T I N E =======================================
.text$x:00005948
.text$x:00005948
.text$x:00005948 __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0 proc near
.text$x:00005948                                         ; DATA XREF: .xdata$x:0000DAC4o
.text$x:00005948                 mov     ecx, [ebp-10h]  ; this
.text$x:0000594B                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:0000594B __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0 endp
.text$x:0000594B
.text$x:00005950
.text$x:00005950 ; =============== S U B R O U T I N E =======================================
.text$x:00005950
.text$x:00005950
.text$x:00005950 __ehhandler$??0TiXmlText@@QAE@PB_W@Z proc near
.text$x:00005950                                         ; DATA XREF: TiXmlText::TiXmlText(wchar_t const *)+5o
.text$x:00005950
.text$x:00005950 arg_4           = dword ptr  8
.text$x:00005950
.text$x:00005950                 mov     edx, [esp+arg_4]
.text$x:00005954                 lea     eax, [edx+0Ch]
.text$x:00005957                 mov     ecx, [edx-8]
.text$x:0000595A                 xor     ecx, eax
.text$x:0000595C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005961                 mov     eax, offset __ehfuncinfo$??0TiXmlText@@QAE@PB_W@Z
.text$x:00005966                 jmp     ___CxxFrameHandler3
.text$x:00005966 __ehhandler$??0TiXmlText@@QAE@PB_W@Z endp
.text$x:00005966
.text$x:00005966 ; ---------------------------------------------------------------------------
.text$x:0000596B                 align 4
.text$x:0000596B _text$x         ends
.text$x:0000596B
.text$mn:0000596C ; ===========================================================================
.text$mn:0000596C
.text$mn:0000596C ; Segment type: Pure code
.text$mn:0000596C ; Segment permissions: Read/Execute
.text$mn:0000596C _text$mn        segment para public 'CODE' use32
.text$mn:0000596C                 assume cs:_text$mn
.text$mn:0000596C                 ;org 596Ch
.text$mn:0000596C ; COMDAT (pick any)
.text$mn:0000596C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000596C
.text$mn:0000596C ; =============== S U B R O U T I N E =======================================
.text$mn:0000596C
.text$mn:0000596C ; Attributes: bp-based frame
.text$mn:0000596C
.text$mn:0000596C ; public: __thiscall TiXmlUnknown::TiXmlUnknown(void)
.text$mn:0000596C                 public ??0TiXmlUnknown@@QAE@XZ
.text$mn:0000596C ??0TiXmlUnknown@@QAE@XZ proc near       ; CODE XREF: TiXmlUnknown::Clone(void)+45p
.text$mn:0000596C
.text$mn:0000596C var_10          = dword ptr -10h
.text$mn:0000596C var_C           = dword ptr -0Ch
.text$mn:0000596C var_4           = dword ptr -4
.text$mn:0000596C
.text$mn:0000596C                 push    ebp
.text$mn:0000596D                 mov     ebp, esp
.text$mn:0000596F                 push    0FFFFFFFFh
.text$mn:00005971                 push    offset __ehhandler$??0TiXmlUnknown@@QAE@XZ
.text$mn:00005976                 mov     eax, large fs:0
.text$mn:0000597C                 push    eax
.text$mn:0000597D                 push    ecx
.text$mn:0000597E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005983                 xor     eax, ebp
.text$mn:00005985                 push    eax
.text$mn:00005986                 lea     eax, [ebp+var_C]
.text$mn:00005989                 mov     large fs:0, eax
.text$mn:0000598F                 mov     [ebp+var_10], ecx
.text$mn:00005992                 push    3
.text$mn:00005994                 mov     ecx, [ebp+var_10]
.text$mn:00005997                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:0000599C                 mov     [ebp+var_4], 0
.text$mn:000059A3                 mov     eax, [ebp+var_10]
.text$mn:000059A6                 mov     dword ptr [eax], offset ??_7TiXmlUnknown@@6B@ ; const TiXmlUnknown::`vftable'
.text$mn:000059AC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000059B3                 mov     eax, [ebp+var_10]
.text$mn:000059B6                 mov     ecx, [ebp+var_C]
.text$mn:000059B9                 mov     large fs:0, ecx
.text$mn:000059C0                 pop     ecx
.text$mn:000059C1                 mov     esp, ebp
.text$mn:000059C3                 pop     ebp
.text$mn:000059C4                 retn
.text$mn:000059C4 ??0TiXmlUnknown@@QAE@XZ endp
.text$mn:000059C4
.text$mn:000059C4 ; ---------------------------------------------------------------------------
.text$mn:000059C5                 align 4
.text$mn:000059C5 _text$mn        ends
.text$mn:000059C5
.text$x:000059C8 ; ===========================================================================
.text$x:000059C8
.text$x:000059C8 ; Segment type: Pure code
.text$x:000059C8 ; Segment permissions: Read/Execute
.text$x:000059C8 _text$x         segment para public 'CODE' use32
.text$x:000059C8                 assume cs:_text$x
.text$x:000059C8                 ;org 59C8h
.text$x:000059C8 ; COMDAT (pick associative to section at 596C)
.text$x:000059C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000059C8
.text$x:000059C8 ; =============== S U B R O U T I N E =======================================
.text$x:000059C8
.text$x:000059C8
.text$x:000059C8 __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0 proc near
.text$x:000059C8                                         ; DATA XREF: .xdata$x:0000DBA4o
.text$x:000059C8                 mov     ecx, [ebp-10h]  ; this
.text$x:000059CB                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:000059CB __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0 endp
.text$x:000059CB
.text$x:000059D0
.text$x:000059D0 ; =============== S U B R O U T I N E =======================================
.text$x:000059D0
.text$x:000059D0
.text$x:000059D0 __ehhandler$??0TiXmlUnknown@@QAE@XZ proc near
.text$x:000059D0                                         ; DATA XREF: TiXmlUnknown::TiXmlUnknown(void)+5o
.text$x:000059D0
.text$x:000059D0 arg_4           = dword ptr  8
.text$x:000059D0
.text$x:000059D0                 mov     edx, [esp+arg_4]
.text$x:000059D4                 lea     eax, [edx+0Ch]
.text$x:000059D7                 mov     ecx, [edx-8]
.text$x:000059DA                 xor     ecx, eax
.text$x:000059DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000059E1                 mov     eax, offset __ehfuncinfo$??0TiXmlUnknown@@QAE@XZ
.text$x:000059E6                 jmp     ___CxxFrameHandler3
.text$x:000059E6 __ehhandler$??0TiXmlUnknown@@QAE@XZ endp
.text$x:000059E6
.text$x:000059E6 ; ---------------------------------------------------------------------------
.text$x:000059EB                 align 4
.text$x:000059EB _text$x         ends
.text$x:000059EB
.text$mn:000059EC ; ===========================================================================
.text$mn:000059EC
.text$mn:000059EC ; Segment type: Pure code
.text$mn:000059EC ; Segment permissions: Read/Execute
.text$mn:000059EC _text$mn        segment para public 'CODE' use32
.text$mn:000059EC                 assume cs:_text$mn
.text$mn:000059EC                 ;org 59ECh
.text$mn:000059EC ; COMDAT (pick any)
.text$mn:000059EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059EC
.text$mn:000059EC ; =============== S U B R O U T I N E =======================================
.text$mn:000059EC
.text$mn:000059EC ; Attributes: bp-based frame
.text$mn:000059EC
.text$mn:000059EC ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000059EC                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000059EC ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000059EC                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000059EC                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:000059EC
.text$mn:000059EC var_4           = dword ptr -4
.text$mn:000059EC
.text$mn:000059EC                 push    ebp
.text$mn:000059ED                 mov     ebp, esp
.text$mn:000059EF                 push    ecx
.text$mn:000059F0                 mov     [ebp+var_4], ecx
.text$mn:000059F3                 mov     eax, [ebp+var_4]
.text$mn:000059F6                 mov     dword ptr [eax], 0
.text$mn:000059FC                 mov     eax, [ebp+var_4]
.text$mn:000059FF                 mov     esp, ebp
.text$mn:00005A01                 pop     ebp
.text$mn:00005A02                 retn
.text$mn:00005A02 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00005A02
.text$mn:00005A02 ; ---------------------------------------------------------------------------
.text$mn:00005A03                 align 4
.text$mn:00005A03 _text$mn        ends
.text$mn:00005A03
.text$mn:00005A04 ; ===========================================================================
.text$mn:00005A04
.text$mn:00005A04 ; Segment type: Pure code
.text$mn:00005A04 ; Segment permissions: Read/Execute
.text$mn:00005A04 _text$mn        segment para public 'CODE' use32
.text$mn:00005A04                 assume cs:_text$mn
.text$mn:00005A04                 ;org 5A04h
.text$mn:00005A04 ; COMDAT (pick any)
.text$mn:00005A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A04
.text$mn:00005A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A04
.text$mn:00005A04 ; Attributes: bp-based frame
.text$mn:00005A04
.text$mn:00005A04 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00005A04                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00005A04 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00005A04                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00005A04                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:00005A04
.text$mn:00005A04 var_4           = dword ptr -4
.text$mn:00005A04
.text$mn:00005A04                 push    ebp
.text$mn:00005A05                 mov     ebp, esp
.text$mn:00005A07                 push    ecx
.text$mn:00005A08                 mov     [ebp+var_4], ecx
.text$mn:00005A0B                 mov     eax, [ebp+var_4]
.text$mn:00005A0E                 mov     dword ptr [eax], 0
.text$mn:00005A14                 mov     ecx, [ebp+var_4]
.text$mn:00005A17                 mov     dword ptr [ecx+4], 0
.text$mn:00005A1E                 mov     eax, [ebp+var_4]
.text$mn:00005A21                 mov     esp, ebp
.text$mn:00005A23                 pop     ebp
.text$mn:00005A24                 retn
.text$mn:00005A24 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00005A24
.text$mn:00005A24 ; ---------------------------------------------------------------------------
.text$mn:00005A25                 align 4
.text$mn:00005A25 _text$mn        ends
.text$mn:00005A25
.text$mn:00005A28 ; ===========================================================================
.text$mn:00005A28
.text$mn:00005A28 ; Segment type: Pure code
.text$mn:00005A28 ; Segment permissions: Read/Execute
.text$mn:00005A28 _text$mn        segment para public 'CODE' use32
.text$mn:00005A28                 assume cs:_text$mn
.text$mn:00005A28                 ;org 5A28h
.text$mn:00005A28 ; COMDAT (pick any)
.text$mn:00005A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A28
.text$mn:00005A28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A28
.text$mn:00005A28 ; Attributes: bp-based frame
.text$mn:00005A28
.text$mn:00005A28 ; _DWORD __thiscall std::_Facet_base::_Facet_base(std::_Facet_base *__hidden this)
.text$mn:00005A28                 public ??0_Facet_base@std@@QAE@XZ
.text$mn:00005A28 ??0_Facet_base@std@@QAE@XZ proc near    ; CODE XREF: std::locale::facet::facet(uint)+29p
.text$mn:00005A28
.text$mn:00005A28 var_4           = dword ptr -4
.text$mn:00005A28
.text$mn:00005A28                 push    ebp
.text$mn:00005A29                 mov     ebp, esp
.text$mn:00005A2B                 push    ecx
.text$mn:00005A2C                 mov     [ebp+var_4], ecx
.text$mn:00005A2F                 mov     eax, [ebp+var_4]
.text$mn:00005A32                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:00005A38                 mov     eax, [ebp+var_4]
.text$mn:00005A3B                 mov     esp, ebp
.text$mn:00005A3D                 pop     ebp
.text$mn:00005A3E                 retn
.text$mn:00005A3E ??0_Facet_base@std@@QAE@XZ endp
.text$mn:00005A3E
.text$mn:00005A3E ; ---------------------------------------------------------------------------
.text$mn:00005A3F                 align 10h
.text$mn:00005A3F _text$mn        ends
.text$mn:00005A3F
.text$mn:00005A40 ; ===========================================================================
.text$mn:00005A40
.text$mn:00005A40 ; Segment type: Pure code
.text$mn:00005A40 ; Segment permissions: Read/Execute
.text$mn:00005A40 _text$mn        segment para public 'CODE' use32
.text$mn:00005A40                 assume cs:_text$mn
.text$mn:00005A40                 ;org 5A40h
.text$mn:00005A40 ; COMDAT (pick any)
.text$mn:00005A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A40
.text$mn:00005A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A40
.text$mn:00005A40 ; Attributes: bp-based frame
.text$mn:00005A40
.text$mn:00005A40 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00005A40                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00005A40 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00005A40                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00005A40                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00005A40
.text$mn:00005A40 var_10          = dword ptr -10h
.text$mn:00005A40 var_C           = dword ptr -0Ch
.text$mn:00005A40 var_4           = dword ptr -4
.text$mn:00005A40
.text$mn:00005A40                 push    ebp
.text$mn:00005A41                 mov     ebp, esp
.text$mn:00005A43                 push    0FFFFFFFFh
.text$mn:00005A45                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00005A4A                 mov     eax, large fs:0
.text$mn:00005A50                 push    eax
.text$mn:00005A51                 push    ecx
.text$mn:00005A52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A57                 xor     eax, ebp
.text$mn:00005A59                 push    eax
.text$mn:00005A5A                 lea     eax, [ebp+var_C]
.text$mn:00005A5D                 mov     large fs:0, eax
.text$mn:00005A63                 mov     [ebp+var_10], ecx
.text$mn:00005A66                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005A69                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00005A6E                 mov     [ebp+var_4], 0
.text$mn:00005A75                 mov     eax, [ebp+var_10]
.text$mn:00005A78                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00005A7E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005A85                 mov     eax, [ebp+var_10]
.text$mn:00005A88                 mov     ecx, [ebp+var_C]
.text$mn:00005A8B                 mov     large fs:0, ecx
.text$mn:00005A92                 pop     ecx
.text$mn:00005A93                 mov     esp, ebp
.text$mn:00005A95                 pop     ebp
.text$mn:00005A96                 retn
.text$mn:00005A96 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00005A96
.text$mn:00005A96 ; ---------------------------------------------------------------------------
.text$mn:00005A97                 align 4
.text$mn:00005A97 _text$mn        ends
.text$mn:00005A97
.text$x:00005A98 ; ===========================================================================
.text$x:00005A98
.text$x:00005A98 ; Segment type: Pure code
.text$x:00005A98 ; Segment permissions: Read/Execute
.text$x:00005A98 _text$x         segment para public 'CODE' use32
.text$x:00005A98                 assume cs:_text$x
.text$x:00005A98                 ;org 5A98h
.text$x:00005A98 ; COMDAT (pick associative to section at 5A40)
.text$x:00005A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A98
.text$x:00005A98 ; =============== S U B R O U T I N E =======================================
.text$x:00005A98
.text$x:00005A98
.text$x:00005A98 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00005A98                                         ; DATA XREF: .xdata$x:0000CF04o
.text$x:00005A98                 mov     ecx, [ebp-10h]  ; this
.text$x:00005A9B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00005A9B __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00005A9B
.text$x:00005AA0
.text$x:00005AA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AA0
.text$x:00005AA0
.text$x:00005AA0 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00005AA0                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00005AA0
.text$x:00005AA0 arg_4           = dword ptr  8
.text$x:00005AA0
.text$x:00005AA0                 mov     edx, [esp+arg_4]
.text$x:00005AA4                 lea     eax, [edx+0Ch]
.text$x:00005AA7                 mov     ecx, [edx-8]
.text$x:00005AAA                 xor     ecx, eax
.text$x:00005AAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AB1                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00005AB6                 jmp     ___CxxFrameHandler3
.text$x:00005AB6 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00005AB6
.text$x:00005AB6 ; ---------------------------------------------------------------------------
.text$x:00005ABB                 align 4
.text$x:00005ABB _text$x         ends
.text$x:00005ABB
.text$mn:00005ABC ; ===========================================================================
.text$mn:00005ABC
.text$mn:00005ABC ; Segment type: Pure code
.text$mn:00005ABC ; Segment permissions: Read/Execute
.text$mn:00005ABC _text$mn        segment para public 'CODE' use32
.text$mn:00005ABC                 assume cs:_text$mn
.text$mn:00005ABC                 ;org 5ABCh
.text$mn:00005ABC ; COMDAT (pick any)
.text$mn:00005ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005ABC
.text$mn:00005ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00005ABC
.text$mn:00005ABC ; Attributes: bp-based frame
.text$mn:00005ABC
.text$mn:00005ABC ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00005ABC                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00005ABC ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00005ABC                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00005ABC
.text$mn:00005ABC var_10          = dword ptr -10h
.text$mn:00005ABC var_C           = dword ptr -0Ch
.text$mn:00005ABC var_4           = dword ptr -4
.text$mn:00005ABC
.text$mn:00005ABC                 push    ebp
.text$mn:00005ABD                 mov     ebp, esp
.text$mn:00005ABF                 push    0FFFFFFFFh
.text$mn:00005AC1                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00005AC6                 mov     eax, large fs:0
.text$mn:00005ACC                 push    eax
.text$mn:00005ACD                 push    ecx
.text$mn:00005ACE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005AD3                 xor     eax, ebp
.text$mn:00005AD5                 push    eax
.text$mn:00005AD6                 lea     eax, [ebp+var_C]
.text$mn:00005AD9                 mov     large fs:0, eax
.text$mn:00005ADF                 mov     [ebp+var_10], ecx
.text$mn:00005AE2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005AE5                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00005AEA                 mov     [ebp+var_4], 0
.text$mn:00005AF1                 mov     eax, [ebp+var_10]
.text$mn:00005AF4                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00005AFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B01                 mov     eax, [ebp+var_10]
.text$mn:00005B04                 mov     ecx, [ebp+var_C]
.text$mn:00005B07                 mov     large fs:0, ecx
.text$mn:00005B0E                 pop     ecx
.text$mn:00005B0F                 mov     esp, ebp
.text$mn:00005B11                 pop     ebp
.text$mn:00005B12                 retn
.text$mn:00005B12 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00005B12
.text$mn:00005B12 ; ---------------------------------------------------------------------------
.text$mn:00005B13                 align 4
.text$mn:00005B13 _text$mn        ends
.text$mn:00005B13
.text$x:00005B14 ; ===========================================================================
.text$x:00005B14
.text$x:00005B14 ; Segment type: Pure code
.text$x:00005B14 ; Segment permissions: Read/Execute
.text$x:00005B14 _text$x         segment para public 'CODE' use32
.text$x:00005B14                 assume cs:_text$x
.text$x:00005B14                 ;org 5B14h
.text$x:00005B14 ; COMDAT (pick associative to section at 5ABC)
.text$x:00005B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B14
.text$x:00005B14 ; =============== S U B R O U T I N E =======================================
.text$x:00005B14
.text$x:00005B14
.text$x:00005B14 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00005B14                                         ; DATA XREF: .xdata$x:0000CF88o
.text$x:00005B14                 mov     ecx, [ebp-10h]  ; this
.text$x:00005B17                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005B17 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00005B17
.text$x:00005B1C
.text$x:00005B1C ; =============== S U B R O U T I N E =======================================
.text$x:00005B1C
.text$x:00005B1C
.text$x:00005B1C __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00005B1C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00005B1C
.text$x:00005B1C arg_4           = dword ptr  8
.text$x:00005B1C
.text$x:00005B1C                 mov     edx, [esp+arg_4]
.text$x:00005B20                 lea     eax, [edx+0Ch]
.text$x:00005B23                 mov     ecx, [edx-8]
.text$x:00005B26                 xor     ecx, eax
.text$x:00005B28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B2D                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00005B32                 jmp     ___CxxFrameHandler3
.text$x:00005B32 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00005B32
.text$x:00005B32 ; ---------------------------------------------------------------------------
.text$x:00005B37                 align 4
.text$x:00005B37 _text$x         ends
.text$x:00005B37
.text$mn:00005B38 ; ===========================================================================
.text$mn:00005B38
.text$mn:00005B38 ; Segment type: Pure code
.text$mn:00005B38 ; Segment permissions: Read/Execute
.text$mn:00005B38 _text$mn        segment para public 'CODE' use32
.text$mn:00005B38                 assume cs:_text$mn
.text$mn:00005B38                 ;org 5B38h
.text$mn:00005B38 ; COMDAT (pick any)
.text$mn:00005B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B38
.text$mn:00005B38 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B38
.text$mn:00005B38 ; Attributes: bp-based frame
.text$mn:00005B38
.text$mn:00005B38 ; _DWORD __thiscall std::_Locinfo::_Locinfo(std::_Locinfo *this, const char *)
.text$mn:00005B38                 public ??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00005B38 ??0_Locinfo@std@@QAE@PBD@Z proc near    ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+80p
.text$mn:00005B38
.text$mn:00005B38 var_1C          = byte ptr -1Ch
.text$mn:00005B38 var_10          = dword ptr -10h
.text$mn:00005B38 var_C           = dword ptr -0Ch
.text$mn:00005B38 var_4           = dword ptr -4
.text$mn:00005B38 arg_0           = dword ptr  8
.text$mn:00005B38
.text$mn:00005B38                 push    ebp
.text$mn:00005B39                 mov     ebp, esp
.text$mn:00005B3B                 push    0FFFFFFFFh
.text$mn:00005B3D                 push    offset __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00005B42                 mov     eax, large fs:0
.text$mn:00005B48                 push    eax
.text$mn:00005B49                 sub     esp, 10h
.text$mn:00005B4C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B51                 xor     eax, ebp
.text$mn:00005B53                 push    eax
.text$mn:00005B54                 lea     eax, [ebp+var_C]
.text$mn:00005B57                 mov     large fs:0, eax
.text$mn:00005B5D                 mov     [ebp+var_10], ecx
.text$mn:00005B60                 push    0               ; int
.text$mn:00005B62                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005B65                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005B6A                 mov     [ebp+var_4], 0
.text$mn:00005B71                 mov     ecx, [ebp+var_10]
.text$mn:00005B74                 add     ecx, 4
.text$mn:00005B77                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00005B7C                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005B80                 mov     ecx, [ebp+var_10]
.text$mn:00005B83                 add     ecx, 0Ch
.text$mn:00005B86                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00005B8B                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005B8F                 mov     ecx, [ebp+var_10]
.text$mn:00005B92                 add     ecx, 14h
.text$mn:00005B95                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00005B9A                 mov     byte ptr [ebp+var_4], 3
.text$mn:00005B9E                 mov     ecx, [ebp+var_10]
.text$mn:00005BA1                 add     ecx, 1Ch
.text$mn:00005BA4                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00005BA9                 mov     byte ptr [ebp+var_4], 4
.text$mn:00005BAD                 mov     ecx, [ebp+var_10]
.text$mn:00005BB0                 add     ecx, 24h ; '$'
.text$mn:00005BB3                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00005BB8                 mov     byte ptr [ebp+var_4], 5
.text$mn:00005BBC                 mov     ecx, [ebp+var_10]
.text$mn:00005BBF                 add     ecx, 2Ch ; ','
.text$mn:00005BC2                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00005BC7                 mov     byte ptr [ebp+var_4], 6
.text$mn:00005BCB                 cmp     [ebp+arg_0], 0
.text$mn:00005BCF                 jnz     short loc_5BEC
.text$mn:00005BD1                 push    offset ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ ; "bad locale name"
.text$mn:00005BD6                 lea     ecx, [ebp+var_1C] ; this
.text$mn:00005BD9                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00005BDE                 push    offset __TI2?AVruntime_error@std@@
.text$mn:00005BE3                 lea     eax, [ebp+var_1C]
.text$mn:00005BE6                 push    eax
.text$mn:00005BE7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005BEC ; ---------------------------------------------------------------------------
.text$mn:00005BEC
.text$mn:00005BEC loc_5BEC:                               ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+97j
.text$mn:00005BEC                 mov     ecx, [ebp+arg_0]
.text$mn:00005BEF                 push    ecx             ; char *
.text$mn:00005BF0                 mov     edx, [ebp+var_10]
.text$mn:00005BF3                 push    edx             ; struct std::_Locinfo *
.text$mn:00005BF4                 call    ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor(std::_Locinfo *,char const *)
.text$mn:00005BF9                 add     esp, 8
.text$mn:00005BFC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C03                 mov     eax, [ebp+var_10]
.text$mn:00005C06                 mov     ecx, [ebp+var_C]
.text$mn:00005C09                 mov     large fs:0, ecx
.text$mn:00005C10                 pop     ecx
.text$mn:00005C11                 mov     esp, ebp
.text$mn:00005C13                 pop     ebp
.text$mn:00005C14                 retn    4
.text$mn:00005C14 ??0_Locinfo@std@@QAE@PBD@Z endp
.text$mn:00005C14
.text$mn:00005C14 ; ---------------------------------------------------------------------------
.text$mn:00005C17                 align 4
.text$mn:00005C17 _text$mn        ends
.text$mn:00005C17
.text$x:00005C18 ; ===========================================================================
.text$x:00005C18
.text$x:00005C18 ; Segment type: Pure code
.text$x:00005C18 ; Segment permissions: Read/Execute
.text$x:00005C18 _text$x         segment para public 'CODE' use32
.text$x:00005C18                 assume cs:_text$x
.text$x:00005C18                 ;org 5C18h
.text$x:00005C18 ; COMDAT (pick associative to section at 5B38)
.text$x:00005C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C18
.text$x:00005C18 ; =============== S U B R O U T I N E =======================================
.text$x:00005C18
.text$x:00005C18
.text$x:00005C18 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 proc near
.text$x:00005C18                                         ; DATA XREF: .xdata$x:0000CB68o
.text$x:00005C18                 mov     ecx, [ebp-10h]  ; this
.text$x:00005C1B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00005C1B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 endp
.text$x:00005C1B
.text$x:00005C20
.text$x:00005C20 ; =============== S U B R O U T I N E =======================================
.text$x:00005C20
.text$x:00005C20
.text$x:00005C20 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 proc near
.text$x:00005C20                                         ; DATA XREF: .xdata$x:0000CB70o
.text$x:00005C20                 mov     ecx, [ebp-10h]
.text$x:00005C23                 add     ecx, 4
.text$x:00005C26                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005C26 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 endp
.text$x:00005C26
.text$x:00005C2B
.text$x:00005C2B ; =============== S U B R O U T I N E =======================================
.text$x:00005C2B
.text$x:00005C2B
.text$x:00005C2B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 proc near
.text$x:00005C2B                                         ; DATA XREF: .xdata$x:0000CB78o
.text$x:00005C2B                 mov     ecx, [ebp-10h]
.text$x:00005C2E                 add     ecx, 0Ch
.text$x:00005C31                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005C31 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 endp
.text$x:00005C31
.text$x:00005C36
.text$x:00005C36 ; =============== S U B R O U T I N E =======================================
.text$x:00005C36
.text$x:00005C36
.text$x:00005C36 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 proc near
.text$x:00005C36                                         ; DATA XREF: .xdata$x:0000CB80o
.text$x:00005C36                 mov     ecx, [ebp-10h]
.text$x:00005C39                 add     ecx, 14h
.text$x:00005C3C                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00005C3C __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 endp
.text$x:00005C3C
.text$x:00005C41
.text$x:00005C41 ; =============== S U B R O U T I N E =======================================
.text$x:00005C41
.text$x:00005C41
.text$x:00005C41 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 proc near
.text$x:00005C41                                         ; DATA XREF: .xdata$x:0000CB88o
.text$x:00005C41                 mov     ecx, [ebp-10h]
.text$x:00005C44                 add     ecx, 1Ch
.text$x:00005C47                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00005C47 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 endp
.text$x:00005C47
.text$x:00005C4C
.text$x:00005C4C ; =============== S U B R O U T I N E =======================================
.text$x:00005C4C
.text$x:00005C4C
.text$x:00005C4C __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 proc near
.text$x:00005C4C                                         ; DATA XREF: .xdata$x:0000CB90o
.text$x:00005C4C                 mov     ecx, [ebp-10h]
.text$x:00005C4F                 add     ecx, 24h ; '$'
.text$x:00005C52                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005C52 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 endp
.text$x:00005C52
.text$x:00005C57
.text$x:00005C57 ; =============== S U B R O U T I N E =======================================
.text$x:00005C57
.text$x:00005C57
.text$x:00005C57 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 proc near
.text$x:00005C57                                         ; DATA XREF: .xdata$x:0000CB98o
.text$x:00005C57                 mov     ecx, [ebp-10h]
.text$x:00005C5A                 add     ecx, 2Ch ; ','
.text$x:00005C5D                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005C5D __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 endp
.text$x:00005C5D
.text$x:00005C62
.text$x:00005C62 ; =============== S U B R O U T I N E =======================================
.text$x:00005C62
.text$x:00005C62
.text$x:00005C62 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z proc near
.text$x:00005C62                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+5o
.text$x:00005C62
.text$x:00005C62 arg_4           = dword ptr  8
.text$x:00005C62
.text$x:00005C62                 mov     edx, [esp+arg_4]
.text$x:00005C66                 lea     eax, [edx+0Ch]
.text$x:00005C69                 mov     ecx, [edx-14h]
.text$x:00005C6C                 xor     ecx, eax
.text$x:00005C6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005C73                 mov     eax, offset __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
.text$x:00005C78                 jmp     ___CxxFrameHandler3
.text$x:00005C78 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z endp
.text$x:00005C78
.text$x:00005C78 ; ---------------------------------------------------------------------------
.text$x:00005C7D                 align 10h
.text$x:00005C7D _text$x         ends
.text$x:00005C7D
.text$mn:00005C80 ; ===========================================================================
.text$mn:00005C80
.text$mn:00005C80 ; Segment type: Pure code
.text$mn:00005C80 ; Segment permissions: Read/Execute
.text$mn:00005C80 _text$mn        segment para public 'CODE' use32
.text$mn:00005C80                 assume cs:_text$mn
.text$mn:00005C80                 ;org 5C80h
.text$mn:00005C80 ; COMDAT (pick any)
.text$mn:00005C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C80
.text$mn:00005C80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C80
.text$mn:00005C80 ; Attributes: bp-based frame
.text$mn:00005C80
.text$mn:00005C80 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &)
.text$mn:00005C80                 public ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:00005C80 ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00005C80                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+2Dp
.text$mn:00005C80
.text$mn:00005C80 var_10          = dword ptr -10h
.text$mn:00005C80 var_C           = dword ptr -0Ch
.text$mn:00005C80 var_8           = dword ptr -8
.text$mn:00005C80 var_4           = dword ptr -4
.text$mn:00005C80 arg_0           = dword ptr  8
.text$mn:00005C80
.text$mn:00005C80                 push    ebp
.text$mn:00005C81                 mov     ebp, esp
.text$mn:00005C83                 sub     esp, 10h
.text$mn:00005C86                 mov     [ebp+var_4], ecx
.text$mn:00005C89                 mov     eax, [ebp+var_4]
.text$mn:00005C8C                 mov     ecx, [ebp+arg_0]
.text$mn:00005C8F                 mov     [eax], ecx
.text$mn:00005C91                 mov     edx, [ebp+var_4]
.text$mn:00005C94                 mov     eax, [edx]
.text$mn:00005C96                 mov     [ebp+var_8], eax
.text$mn:00005C99                 mov     ecx, [ebp+var_8]
.text$mn:00005C9C                 mov     edx, [ecx]
.text$mn:00005C9E                 mov     ecx, [ebp+var_8]
.text$mn:00005CA1                 add     ecx, [edx+4]
.text$mn:00005CA4                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00005CA9                 test    eax, eax
.text$mn:00005CAB                 jz      short loc_5CD5
.text$mn:00005CAD                 mov     eax, [ebp+var_4]
.text$mn:00005CB0                 mov     ecx, [eax]
.text$mn:00005CB2                 mov     [ebp+var_C], ecx
.text$mn:00005CB5                 mov     edx, [ebp+var_C]
.text$mn:00005CB8                 mov     eax, [edx]
.text$mn:00005CBA                 mov     ecx, [ebp+var_C]
.text$mn:00005CBD                 add     ecx, [eax+4]
.text$mn:00005CC0                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00005CC5                 mov     [ebp+var_10], eax
.text$mn:00005CC8                 mov     ecx, [ebp+var_10]
.text$mn:00005CCB                 mov     edx, [ecx]
.text$mn:00005CCD                 mov     ecx, [ebp+var_10]
.text$mn:00005CD0                 mov     eax, [edx+4]
.text$mn:00005CD3                 call    eax
.text$mn:00005CD5
.text$mn:00005CD5 loc_5CD5:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+2Bj
.text$mn:00005CD5                 mov     eax, [ebp+var_4]
.text$mn:00005CD8                 mov     esp, ebp
.text$mn:00005CDA                 pop     ebp
.text$mn:00005CDB                 retn    4
.text$mn:00005CDB ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$mn:00005CDB
.text$mn:00005CDB ; ---------------------------------------------------------------------------
.text$mn:00005CDE                 align 10h
.text$mn:00005CDE _text$mn        ends
.text$mn:00005CDE
.text$mn:00005CE0 ; ===========================================================================
.text$mn:00005CE0
.text$mn:00005CE0 ; Segment type: Pure code
.text$mn:00005CE0 ; Segment permissions: Read/Execute
.text$mn:00005CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CE0                 assume cs:_text$mn
.text$mn:00005CE0                 ;org 5CE0h
.text$mn:00005CE0 ; COMDAT (pick any)
.text$mn:00005CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CE0
.text$mn:00005CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CE0
.text$mn:00005CE0 ; Attributes: bp-based frame
.text$mn:00005CE0
.text$mn:00005CE0 ; protected: __thiscall std::_System_error::_System_error(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00005CE0                 public ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00005CE0 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:00005CE0                                         ; CODE XREF: std::system_error::system_error(std::error_code,char const *)+4Dp
.text$mn:00005CE0
.text$mn:00005CE0 var_44          = dword ptr -44h
.text$mn:00005CE0 var_40          = dword ptr -40h
.text$mn:00005CE0 var_3C          = dword ptr -3Ch
.text$mn:00005CE0 var_38          = dword ptr -38h
.text$mn:00005CE0 var_34          = dword ptr -34h
.text$mn:00005CE0 var_30          = dword ptr -30h
.text$mn:00005CE0 var_2C          = byte ptr -2Ch
.text$mn:00005CE0 var_10          = dword ptr -10h
.text$mn:00005CE0 var_C           = dword ptr -0Ch
.text$mn:00005CE0 var_4           = dword ptr -4
.text$mn:00005CE0 arg_0           = dword ptr  8
.text$mn:00005CE0 arg_4           = dword ptr  0Ch
.text$mn:00005CE0 arg_8           = dword ptr  10h
.text$mn:00005CE0
.text$mn:00005CE0                 push    ebp
.text$mn:00005CE1                 mov     ebp, esp
.text$mn:00005CE3                 push    0FFFFFFFFh
.text$mn:00005CE5                 push    offset __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00005CEA                 mov     eax, large fs:0
.text$mn:00005CF0                 push    eax
.text$mn:00005CF1                 sub     esp, 38h
.text$mn:00005CF4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CF9                 xor     eax, ebp
.text$mn:00005CFB                 mov     [ebp+var_10], eax
.text$mn:00005CFE                 push    eax
.text$mn:00005CFF                 lea     eax, [ebp+var_C]
.text$mn:00005D02                 mov     large fs:0, eax
.text$mn:00005D08                 mov     [ebp+var_30], ecx
.text$mn:00005D0B                 sub     esp, 1Ch
.text$mn:00005D0E                 mov     ecx, esp
.text$mn:00005D10                 mov     [ebp+var_40], esp
.text$mn:00005D13                 mov     eax, [ebp+arg_8]
.text$mn:00005D16                 push    eax
.text$mn:00005D17                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00005D1C                 mov     [ebp+var_3C], eax
.text$mn:00005D1F                 mov     ecx, [ebp+var_3C]
.text$mn:00005D22                 mov     [ebp+var_44], ecx
.text$mn:00005D25                 mov     [ebp+var_4], 0
.text$mn:00005D2C                 mov     edx, [ebp+arg_4]
.text$mn:00005D2F                 push    edx
.text$mn:00005D30                 mov     eax, [ebp+arg_0]
.text$mn:00005D33                 push    eax
.text$mn:00005D34                 lea     ecx, [ebp+var_2C]
.text$mn:00005D37                 push    ecx
.text$mn:00005D38                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D3F                 call    ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)
.text$mn:00005D44                 add     esp, 28h
.text$mn:00005D47                 mov     [ebp+var_38], eax
.text$mn:00005D4A                 mov     edx, [ebp+var_38]
.text$mn:00005D4D                 mov     [ebp+var_34], edx
.text$mn:00005D50                 mov     [ebp+var_4], 1
.text$mn:00005D57                 mov     eax, [ebp+var_34]
.text$mn:00005D5A                 push    eax
.text$mn:00005D5B                 mov     ecx, [ebp+var_30]
.text$mn:00005D5E                 call    ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00005D63                 mov     byte ptr [ebp+var_4], 3
.text$mn:00005D67                 lea     ecx, [ebp+var_2C]
.text$mn:00005D6A                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00005D6F                 mov     ecx, [ebp+var_30]
.text$mn:00005D72                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:00005D78                 mov     edx, [ebp+var_30]
.text$mn:00005D7B                 mov     eax, [ebp+arg_0]
.text$mn:00005D7E                 mov     [edx+0Ch], eax
.text$mn:00005D81                 mov     ecx, [ebp+arg_4]
.text$mn:00005D84                 mov     [edx+10h], ecx
.text$mn:00005D87                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D8E                 mov     eax, [ebp+var_30]
.text$mn:00005D91                 mov     ecx, [ebp+var_C]
.text$mn:00005D94                 mov     large fs:0, ecx
.text$mn:00005D9B                 pop     ecx
.text$mn:00005D9C                 mov     ecx, [ebp+var_10]
.text$mn:00005D9F                 xor     ecx, ebp
.text$mn:00005DA1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00005DA6                 mov     esp, ebp
.text$mn:00005DA8                 pop     ebp
.text$mn:00005DA9                 retn    0Ch
.text$mn:00005DA9 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:00005DA9
.text$mn:00005DA9 _text$mn        ends
.text$mn:00005DA9
.text$x:00005DAC ; ===========================================================================
.text$x:00005DAC
.text$x:00005DAC ; Segment type: Pure code
.text$x:00005DAC ; Segment permissions: Read/Execute
.text$x:00005DAC _text$x         segment para public 'CODE' use32
.text$x:00005DAC                 assume cs:_text$x
.text$x:00005DAC                 ;org 5DACh
.text$x:00005DAC ; COMDAT (pick associative to section at 5CE0)
.text$x:00005DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DAC
.text$x:00005DAC ; =============== S U B R O U T I N E =======================================
.text$x:00005DAC
.text$x:00005DAC
.text$x:00005DAC __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:00005DAC                                         ; DATA XREF: .xdata$x:0000CDD4o
.text$x:00005DAC                 mov     ecx, [ebp-40h]
.text$x:00005DAF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005DAF __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:00005DAF
.text$x:00005DB4
.text$x:00005DB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005DB4
.text$x:00005DB4
.text$x:00005DB4 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 proc near
.text$x:00005DB4                                         ; DATA XREF: .xdata$x:0000CDDCo
.text$x:00005DB4                 lea     ecx, [ebp-2Ch]
.text$x:00005DB7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005DB7 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 endp
.text$x:00005DB7
.text$x:00005DBC
.text$x:00005DBC ; =============== S U B R O U T I N E =======================================
.text$x:00005DBC
.text$x:00005DBC
.text$x:00005DBC __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 proc near
.text$x:00005DBC                                         ; DATA XREF: .xdata$x:0000CDE4o
.text$x:00005DBC                                         ; .xdata$x:0000CDECo
.text$x:00005DBC                 mov     ecx, [ebp-30h]  ; this
.text$x:00005DBF                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00005DBF __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 endp
.text$x:00005DBF
.text$x:00005DC4
.text$x:00005DC4 ; =============== S U B R O U T I N E =======================================
.text$x:00005DC4
.text$x:00005DC4
.text$x:00005DC4 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:00005DC4                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00005DC4
.text$x:00005DC4 arg_4           = dword ptr  8
.text$x:00005DC4
.text$x:00005DC4                 mov     edx, [esp+arg_4]
.text$x:00005DC8                 lea     eax, [edx+0Ch]
.text$x:00005DCB                 mov     ecx, [edx-3Ch]
.text$x:00005DCE                 xor     ecx, eax
.text$x:00005DD0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DD5                 mov     ecx, [edx-4]
.text$x:00005DD8                 xor     ecx, eax
.text$x:00005DDA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DDF                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:00005DE4                 jmp     ___CxxFrameHandler3
.text$x:00005DE4 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:00005DE4
.text$x:00005DE4 ; ---------------------------------------------------------------------------
.text$x:00005DE9                 align 4
.text$x:00005DE9 _text$x         ends
.text$x:00005DE9
.text$mn:00005DEC ; ===========================================================================
.text$mn:00005DEC
.text$mn:00005DEC ; Segment type: Pure code
.text$mn:00005DEC ; Segment permissions: Read/Execute
.text$mn:00005DEC _text$mn        segment para public 'CODE' use32
.text$mn:00005DEC                 assume cs:_text$mn
.text$mn:00005DEC                 ;org 5DECh
.text$mn:00005DEC ; COMDAT (pick any)
.text$mn:00005DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DEC
.text$mn:00005DEC ; =============== S U B R O U T I N E =======================================
.text$mn:00005DEC
.text$mn:00005DEC ; Attributes: bp-based frame
.text$mn:00005DEC
.text$mn:00005DEC ; _DWORD __thiscall std::_System_error::_System_error(std::_System_error *this, const struct std::_System_error *)
.text$mn:00005DEC                 public ??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00005DEC ??0_System_error@std@@QAE@ABV01@@Z proc near
.text$mn:00005DEC                                         ; CODE XREF: std::system_error::system_error(std::system_error const &)+2Dp
.text$mn:00005DEC                                         ; DATA XREF: .xdata$x:0000E37Co
.text$mn:00005DEC
.text$mn:00005DEC var_10          = dword ptr -10h
.text$mn:00005DEC var_C           = dword ptr -0Ch
.text$mn:00005DEC var_4           = dword ptr -4
.text$mn:00005DEC arg_0           = dword ptr  8
.text$mn:00005DEC
.text$mn:00005DEC                 push    ebp
.text$mn:00005DED                 mov     ebp, esp
.text$mn:00005DEF                 push    0FFFFFFFFh
.text$mn:00005DF1                 push    offset __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00005DF6                 mov     eax, large fs:0
.text$mn:00005DFC                 push    eax
.text$mn:00005DFD                 push    ecx
.text$mn:00005DFE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E03                 xor     eax, ebp
.text$mn:00005E05                 push    eax
.text$mn:00005E06                 lea     eax, [ebp+var_C]
.text$mn:00005E09                 mov     large fs:0, eax
.text$mn:00005E0F                 mov     [ebp+var_10], ecx
.text$mn:00005E12                 mov     eax, [ebp+arg_0]
.text$mn:00005E15                 push    eax             ; struct std::runtime_error *
.text$mn:00005E16                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005E19                 call    ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.text$mn:00005E1E                 mov     [ebp+var_4], 0
.text$mn:00005E25                 mov     ecx, [ebp+var_10]
.text$mn:00005E28                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:00005E2E                 mov     edx, [ebp+arg_0]
.text$mn:00005E31                 mov     eax, [edx+0Ch]
.text$mn:00005E34                 mov     ecx, [edx+10h]
.text$mn:00005E37                 mov     edx, [ebp+var_10]
.text$mn:00005E3A                 mov     [edx+0Ch], eax
.text$mn:00005E3D                 mov     [edx+10h], ecx
.text$mn:00005E40                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E47                 mov     eax, [ebp+var_10]
.text$mn:00005E4A                 mov     ecx, [ebp+var_C]
.text$mn:00005E4D                 mov     large fs:0, ecx
.text$mn:00005E54                 pop     ecx
.text$mn:00005E55                 mov     esp, ebp
.text$mn:00005E57                 pop     ebp
.text$mn:00005E58                 retn    4
.text$mn:00005E58 ??0_System_error@std@@QAE@ABV01@@Z endp
.text$mn:00005E58
.text$mn:00005E58 ; ---------------------------------------------------------------------------
.text$mn:00005E5B                 align 4
.text$mn:00005E5B _text$mn        ends
.text$mn:00005E5B
.text$x:00005E5C ; ===========================================================================
.text$x:00005E5C
.text$x:00005E5C ; Segment type: Pure code
.text$x:00005E5C ; Segment permissions: Read/Execute
.text$x:00005E5C _text$x         segment para public 'CODE' use32
.text$x:00005E5C                 assume cs:_text$x
.text$x:00005E5C                 ;org 5E5Ch
.text$x:00005E5C ; COMDAT (pick associative to section at 5DEC)
.text$x:00005E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E5C
.text$x:00005E5C ; =============== S U B R O U T I N E =======================================
.text$x:00005E5C
.text$x:00005E5C
.text$x:00005E5C __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005E5C                                         ; DATA XREF: .xdata$x:0000CE44o
.text$x:00005E5C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005E5F                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00005E5F __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00005E5F
.text$x:00005E64
.text$x:00005E64 ; =============== S U B R O U T I N E =======================================
.text$x:00005E64
.text$x:00005E64
.text$x:00005E64 __ehhandler$??0_System_error@std@@QAE@ABV01@@Z proc near
.text$x:00005E64                                         ; DATA XREF: std::_System_error::_System_error(std::_System_error const &)+5o
.text$x:00005E64
.text$x:00005E64 arg_4           = dword ptr  8
.text$x:00005E64
.text$x:00005E64                 mov     edx, [esp+arg_4]
.text$x:00005E68                 lea     eax, [edx+0Ch]
.text$x:00005E6B                 mov     ecx, [edx-8]
.text$x:00005E6E                 xor     ecx, eax
.text$x:00005E70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E75                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z
.text$x:00005E7A                 jmp     ___CxxFrameHandler3
.text$x:00005E7A __ehhandler$??0_System_error@std@@QAE@ABV01@@Z endp
.text$x:00005E7A
.text$x:00005E7A ; ---------------------------------------------------------------------------
.text$x:00005E7F                 align 10h
.text$x:00005E7F _text$x         ends
.text$x:00005E7F
.text$mn:00005E80 ; ===========================================================================
.text$mn:00005E80
.text$mn:00005E80 ; Segment type: Pure code
.text$mn:00005E80 ; Segment permissions: Read/Execute
.text$mn:00005E80 _text$mn        segment para public 'CODE' use32
.text$mn:00005E80                 assume cs:_text$mn
.text$mn:00005E80                 ;org 5E80h
.text$mn:00005E80 ; COMDAT (pick any)
.text$mn:00005E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E80
.text$mn:00005E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E80
.text$mn:00005E80 ; Attributes: bp-based frame
.text$mn:00005E80
.text$mn:00005E80 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00005E80                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00005E80 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00005E80                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00005E80
.text$mn:00005E80 var_10          = dword ptr -10h
.text$mn:00005E80 var_C           = dword ptr -0Ch
.text$mn:00005E80 var_4           = dword ptr -4
.text$mn:00005E80
.text$mn:00005E80                 push    ebp
.text$mn:00005E81                 mov     ebp, esp
.text$mn:00005E83                 push    0FFFFFFFFh
.text$mn:00005E85                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00005E8A                 mov     eax, large fs:0
.text$mn:00005E90                 push    eax
.text$mn:00005E91                 push    ecx
.text$mn:00005E92                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E97                 xor     eax, ebp
.text$mn:00005E99                 push    eax
.text$mn:00005E9A                 lea     eax, [ebp+var_C]
.text$mn:00005E9D                 mov     large fs:0, eax
.text$mn:00005EA3                 mov     [ebp+var_10], ecx
.text$mn:00005EA6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005EA9                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00005EAE                 mov     [ebp+var_4], 0
.text$mn:00005EB5                 mov     eax, [ebp+var_10]
.text$mn:00005EB8                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00005EBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005EC5                 mov     eax, [ebp+var_10]
.text$mn:00005EC8                 mov     ecx, [ebp+var_C]
.text$mn:00005ECB                 mov     large fs:0, ecx
.text$mn:00005ED2                 pop     ecx
.text$mn:00005ED3                 mov     esp, ebp
.text$mn:00005ED5                 pop     ebp
.text$mn:00005ED6                 retn
.text$mn:00005ED6 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00005ED6
.text$mn:00005ED6 ; ---------------------------------------------------------------------------
.text$mn:00005ED7                 align 4
.text$mn:00005ED7 _text$mn        ends
.text$mn:00005ED7
.text$x:00005ED8 ; ===========================================================================
.text$x:00005ED8
.text$x:00005ED8 ; Segment type: Pure code
.text$x:00005ED8 ; Segment permissions: Read/Execute
.text$x:00005ED8 _text$x         segment para public 'CODE' use32
.text$x:00005ED8                 assume cs:_text$x
.text$x:00005ED8                 ;org 5ED8h
.text$x:00005ED8 ; COMDAT (pick associative to section at 5E80)
.text$x:00005ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ED8
.text$x:00005ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED8
.text$x:00005ED8
.text$x:00005ED8 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00005ED8                                         ; DATA XREF: .xdata$x:0000D00Co
.text$x:00005ED8                 mov     ecx, [ebp-10h]  ; this
.text$x:00005EDB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005EDB __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00005EDB
.text$x:00005EE0
.text$x:00005EE0 ; =============== S U B R O U T I N E =======================================
.text$x:00005EE0
.text$x:00005EE0
.text$x:00005EE0 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00005EE0                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00005EE0
.text$x:00005EE0 arg_4           = dword ptr  8
.text$x:00005EE0
.text$x:00005EE0                 mov     edx, [esp+arg_4]
.text$x:00005EE4                 lea     eax, [edx+0Ch]
.text$x:00005EE7                 mov     ecx, [edx-8]
.text$x:00005EEA                 xor     ecx, eax
.text$x:00005EEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EF1                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00005EF6                 jmp     ___CxxFrameHandler3
.text$x:00005EF6 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00005EF6
.text$x:00005EF6 ; ---------------------------------------------------------------------------
.text$x:00005EFB                 align 4
.text$x:00005EFB _text$x         ends
.text$x:00005EFB
.text$mn:00005EFC ; ===========================================================================
.text$mn:00005EFC
.text$mn:00005EFC ; Segment type: Pure code
.text$mn:00005EFC ; Segment permissions: Read/Execute
.text$mn:00005EFC _text$mn        segment para public 'CODE' use32
.text$mn:00005EFC                 assume cs:_text$mn
.text$mn:00005EFC                 ;org 5EFCh
.text$mn:00005EFC ; COMDAT (pick any)
.text$mn:00005EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EFC
.text$mn:00005EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00005EFC
.text$mn:00005EFC ; Attributes: bp-based frame
.text$mn:00005EFC
.text$mn:00005EFC ; _DWORD __thiscall std::ctype_base::ctype_base(std::ctype_base *this, unsigned int)
.text$mn:00005EFC                 public ??0ctype_base@std@@QAE@I@Z
.text$mn:00005EFC ??0ctype_base@std@@QAE@I@Z proc near    ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+2Dp
.text$mn:00005EFC
.text$mn:00005EFC var_10          = dword ptr -10h
.text$mn:00005EFC var_C           = dword ptr -0Ch
.text$mn:00005EFC var_4           = dword ptr -4
.text$mn:00005EFC arg_0           = dword ptr  8
.text$mn:00005EFC
.text$mn:00005EFC                 push    ebp
.text$mn:00005EFD                 mov     ebp, esp
.text$mn:00005EFF                 push    0FFFFFFFFh
.text$mn:00005F01                 push    offset __ehhandler$??0ctype_base@std@@QAE@I@Z
.text$mn:00005F06                 mov     eax, large fs:0
.text$mn:00005F0C                 push    eax
.text$mn:00005F0D                 push    ecx
.text$mn:00005F0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F13                 xor     eax, ebp
.text$mn:00005F15                 push    eax
.text$mn:00005F16                 lea     eax, [ebp+var_C]
.text$mn:00005F19                 mov     large fs:0, eax
.text$mn:00005F1F                 mov     [ebp+var_10], ecx
.text$mn:00005F22                 mov     eax, [ebp+arg_0]
.text$mn:00005F25                 push    eax             ; unsigned int
.text$mn:00005F26                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005F29                 call    ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet(uint)
.text$mn:00005F2E                 mov     [ebp+var_4], 0
.text$mn:00005F35                 mov     ecx, [ebp+var_10]
.text$mn:00005F38                 mov     dword ptr [ecx], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:00005F3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F45                 mov     eax, [ebp+var_10]
.text$mn:00005F48                 mov     ecx, [ebp+var_C]
.text$mn:00005F4B                 mov     large fs:0, ecx
.text$mn:00005F52                 pop     ecx
.text$mn:00005F53                 mov     esp, ebp
.text$mn:00005F55                 pop     ebp
.text$mn:00005F56                 retn    4
.text$mn:00005F56 ??0ctype_base@std@@QAE@I@Z endp
.text$mn:00005F56
.text$mn:00005F56 ; ---------------------------------------------------------------------------
.text$mn:00005F59                 align 4
.text$mn:00005F59 _text$mn        ends
.text$mn:00005F59
.text$x:00005F5C ; ===========================================================================
.text$x:00005F5C
.text$x:00005F5C ; Segment type: Pure code
.text$x:00005F5C ; Segment permissions: Read/Execute
.text$x:00005F5C _text$x         segment para public 'CODE' use32
.text$x:00005F5C                 assume cs:_text$x
.text$x:00005F5C                 ;org 5F5Ch
.text$x:00005F5C ; COMDAT (pick associative to section at 5EFC)
.text$x:00005F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F5C
.text$x:00005F5C ; =============== S U B R O U T I N E =======================================
.text$x:00005F5C
.text$x:00005F5C
.text$x:00005F5C __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 proc near
.text$x:00005F5C                                         ; DATA XREF: .xdata$x:0000CC80o
.text$x:00005F5C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005F5F                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00005F5F __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 endp
.text$x:00005F5F
.text$x:00005F64
.text$x:00005F64 ; =============== S U B R O U T I N E =======================================
.text$x:00005F64
.text$x:00005F64
.text$x:00005F64 __ehhandler$??0ctype_base@std@@QAE@I@Z proc near
.text$x:00005F64                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+5o
.text$x:00005F64
.text$x:00005F64 arg_4           = dword ptr  8
.text$x:00005F64
.text$x:00005F64                 mov     edx, [esp+arg_4]
.text$x:00005F68                 lea     eax, [edx+0Ch]
.text$x:00005F6B                 mov     ecx, [edx-8]
.text$x:00005F6E                 xor     ecx, eax
.text$x:00005F70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F75                 mov     eax, offset __ehfuncinfo$??0ctype_base@std@@QAE@I@Z
.text$x:00005F7A                 jmp     ___CxxFrameHandler3
.text$x:00005F7A __ehhandler$??0ctype_base@std@@QAE@I@Z endp
.text$x:00005F7A
.text$x:00005F7A ; ---------------------------------------------------------------------------
.text$x:00005F7F                 align 10h
.text$x:00005F7F _text$x         ends
.text$x:00005F7F
.text$mn:00005F80 ; ===========================================================================
.text$mn:00005F80
.text$mn:00005F80 ; Segment type: Pure code
.text$mn:00005F80 ; Segment permissions: Read/Execute
.text$mn:00005F80 _text$mn        segment para public 'CODE' use32
.text$mn:00005F80                 assume cs:_text$mn
.text$mn:00005F80                 ;org 5F80h
.text$mn:00005F80 ; COMDAT (pick any)
.text$mn:00005F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F80
.text$mn:00005F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F80
.text$mn:00005F80 ; Attributes: bp-based frame
.text$mn:00005F80
.text$mn:00005F80 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00005F80                 public ??0error_category@std@@QAE@XZ
.text$mn:00005F80 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00005F80
.text$mn:00005F80 var_4           = dword ptr -4
.text$mn:00005F80
.text$mn:00005F80                 push    ebp
.text$mn:00005F81                 mov     ebp, esp
.text$mn:00005F83                 push    ecx
.text$mn:00005F84                 mov     [ebp+var_4], ecx
.text$mn:00005F87                 mov     eax, [ebp+var_4]
.text$mn:00005F8A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00005F90                 mov     eax, [ebp+var_4]
.text$mn:00005F93                 mov     esp, ebp
.text$mn:00005F95                 pop     ebp
.text$mn:00005F96                 retn
.text$mn:00005F96 ??0error_category@std@@QAE@XZ endp
.text$mn:00005F96
.text$mn:00005F96 ; ---------------------------------------------------------------------------
.text$mn:00005F97                 align 4
.text$mn:00005F97 _text$mn        ends
.text$mn:00005F97
.text$mn:00005F98 ; ===========================================================================
.text$mn:00005F98
.text$mn:00005F98 ; Segment type: Pure code
.text$mn:00005F98 ; Segment permissions: Read/Execute
.text$mn:00005F98 _text$mn        segment para public 'CODE' use32
.text$mn:00005F98                 assume cs:_text$mn
.text$mn:00005F98                 ;org 5F98h
.text$mn:00005F98 ; COMDAT (pick any)
.text$mn:00005F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F98
.text$mn:00005F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F98
.text$mn:00005F98 ; Attributes: bp-based frame
.text$mn:00005F98
.text$mn:00005F98 ; _DWORD __thiscall std::error_code::error_code(std::error_code *this, int, const struct std::error_category *)
.text$mn:00005F98                 public ??0error_code@std@@QAE@HABVerror_category@1@@Z
.text$mn:00005F98 ??0error_code@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00005F98                                         ; CODE XREF: std::make_error_code(std::io_errc)+10p
.text$mn:00005F98
.text$mn:00005F98 var_4           = dword ptr -4
.text$mn:00005F98 arg_0           = dword ptr  8
.text$mn:00005F98 arg_4           = dword ptr  0Ch
.text$mn:00005F98
.text$mn:00005F98                 push    ebp
.text$mn:00005F99                 mov     ebp, esp
.text$mn:00005F9B                 push    ecx
.text$mn:00005F9C                 mov     [ebp+var_4], ecx
.text$mn:00005F9F                 mov     eax, [ebp+var_4]
.text$mn:00005FA2                 mov     ecx, [ebp+arg_0]
.text$mn:00005FA5                 mov     [eax], ecx
.text$mn:00005FA7                 mov     edx, [ebp+var_4]
.text$mn:00005FAA                 mov     eax, [ebp+arg_4]
.text$mn:00005FAD                 mov     [edx+4], eax
.text$mn:00005FB0                 mov     eax, [ebp+var_4]
.text$mn:00005FB3                 mov     esp, ebp
.text$mn:00005FB5                 pop     ebp
.text$mn:00005FB6                 retn    8
.text$mn:00005FB6 ??0error_code@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00005FB6
.text$mn:00005FB6 ; ---------------------------------------------------------------------------
.text$mn:00005FB9                 align 4
.text$mn:00005FB9 _text$mn        ends
.text$mn:00005FB9
.text$mn:00005FBC ; ===========================================================================
.text$mn:00005FBC
.text$mn:00005FBC ; Segment type: Pure code
.text$mn:00005FBC ; Segment permissions: Read/Execute
.text$mn:00005FBC _text$mn        segment para public 'CODE' use32
.text$mn:00005FBC                 assume cs:_text$mn
.text$mn:00005FBC                 ;org 5FBCh
.text$mn:00005FBC ; COMDAT (pick any)
.text$mn:00005FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FBC
.text$mn:00005FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FBC
.text$mn:00005FBC ; Attributes: bp-based frame
.text$mn:00005FBC
.text$mn:00005FBC ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00005FBC                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00005FBC ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00005FBC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00005FBC                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00005FBC
.text$mn:00005FBC var_4           = dword ptr -4
.text$mn:00005FBC arg_0           = dword ptr  8
.text$mn:00005FBC arg_4           = dword ptr  0Ch
.text$mn:00005FBC
.text$mn:00005FBC                 push    ebp
.text$mn:00005FBD                 mov     ebp, esp
.text$mn:00005FBF                 push    ecx
.text$mn:00005FC0                 mov     [ebp+var_4], ecx
.text$mn:00005FC3                 mov     eax, [ebp+var_4]
.text$mn:00005FC6                 mov     ecx, [ebp+arg_0]
.text$mn:00005FC9                 mov     [eax], ecx
.text$mn:00005FCB                 mov     edx, [ebp+var_4]
.text$mn:00005FCE                 mov     eax, [ebp+arg_4]
.text$mn:00005FD1                 mov     [edx+4], eax
.text$mn:00005FD4                 mov     eax, [ebp+var_4]
.text$mn:00005FD7                 mov     esp, ebp
.text$mn:00005FD9                 pop     ebp
.text$mn:00005FDA                 retn    8
.text$mn:00005FDA ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00005FDA
.text$mn:00005FDA ; ---------------------------------------------------------------------------
.text$mn:00005FDD                 align 10h
.text$mn:00005FDD _text$mn        ends
.text$mn:00005FDD
.text$mn:00005FE0 ; ===========================================================================
.text$mn:00005FE0
.text$mn:00005FE0 ; Segment type: Pure code
.text$mn:00005FE0 ; Segment permissions: Read/Execute
.text$mn:00005FE0 _text$mn        segment para public 'CODE' use32
.text$mn:00005FE0                 assume cs:_text$mn
.text$mn:00005FE0                 ;org 5FE0h
.text$mn:00005FE0 ; COMDAT (pick any)
.text$mn:00005FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FE0
.text$mn:00005FE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FE0
.text$mn:00005FE0 ; Attributes: bp-based frame
.text$mn:00005FE0
.text$mn:00005FE0 ; _DWORD __thiscall std::locale::facet::facet(std::locale::facet *this, unsigned int)
.text$mn:00005FE0                 public ??0facet@locale@std@@IAE@I@Z
.text$mn:00005FE0 ??0facet@locale@std@@IAE@I@Z proc near  ; CODE XREF: std::ctype_base::ctype_base(uint)+2Dp
.text$mn:00005FE0
.text$mn:00005FE0 var_10          = dword ptr -10h
.text$mn:00005FE0 var_C           = dword ptr -0Ch
.text$mn:00005FE0 var_4           = dword ptr -4
.text$mn:00005FE0 arg_0           = dword ptr  8
.text$mn:00005FE0
.text$mn:00005FE0                 push    ebp
.text$mn:00005FE1                 mov     ebp, esp
.text$mn:00005FE3                 push    0FFFFFFFFh
.text$mn:00005FE5                 push    offset __ehhandler$??0facet@locale@std@@IAE@I@Z
.text$mn:00005FEA                 mov     eax, large fs:0
.text$mn:00005FF0                 push    eax
.text$mn:00005FF1                 push    ecx
.text$mn:00005FF2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FF7                 xor     eax, ebp
.text$mn:00005FF9                 push    eax
.text$mn:00005FFA                 lea     eax, [ebp+var_C]
.text$mn:00005FFD                 mov     large fs:0, eax
.text$mn:00006003                 mov     [ebp+var_10], ecx
.text$mn:00006006                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006009                 call    ??0_Facet_base@std@@QAE@XZ ; std::_Facet_base::_Facet_base(void)
.text$mn:0000600E                 mov     [ebp+var_4], 0
.text$mn:00006015                 mov     eax, [ebp+var_10]
.text$mn:00006018                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:0000601E                 mov     ecx, [ebp+arg_0]
.text$mn:00006021                 push    ecx             ; unsigned __int32
.text$mn:00006022                 mov     edx, [ebp+var_10]
.text$mn:00006025                 add     edx, 4
.text$mn:00006028                 push    edx             ; unsigned __int32 *
.text$mn:00006029                 call    ?_Init_atomic_counter@std@@YAXAAKK@Z ; std::_Init_atomic_counter(ulong &,ulong)
.text$mn:0000602E                 add     esp, 8
.text$mn:00006031                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006038                 mov     eax, [ebp+var_10]
.text$mn:0000603B                 mov     ecx, [ebp+var_C]
.text$mn:0000603E                 mov     large fs:0, ecx
.text$mn:00006045                 pop     ecx
.text$mn:00006046                 mov     esp, ebp
.text$mn:00006048                 pop     ebp
.text$mn:00006049                 retn    4
.text$mn:00006049 ??0facet@locale@std@@IAE@I@Z endp
.text$mn:00006049
.text$mn:00006049 _text$mn        ends
.text$mn:00006049
.text$x:0000604C ; ===========================================================================
.text$x:0000604C
.text$x:0000604C ; Segment type: Pure code
.text$x:0000604C ; Segment permissions: Read/Execute
.text$x:0000604C _text$x         segment para public 'CODE' use32
.text$x:0000604C                 assume cs:_text$x
.text$x:0000604C                 ;org 604Ch
.text$x:0000604C ; COMDAT (pick associative to section at 5FE0)
.text$x:0000604C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000604C
.text$x:0000604C ; =============== S U B R O U T I N E =======================================
.text$x:0000604C
.text$x:0000604C
.text$x:0000604C __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 proc near
.text$x:0000604C                                         ; DATA XREF: .xdata$x:0000CC28o
.text$x:0000604C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000604F                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:0000604F __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 endp
.text$x:0000604F
.text$x:00006054
.text$x:00006054 ; =============== S U B R O U T I N E =======================================
.text$x:00006054
.text$x:00006054
.text$x:00006054 __ehhandler$??0facet@locale@std@@IAE@I@Z proc near
.text$x:00006054                                         ; DATA XREF: std::locale::facet::facet(uint)+5o
.text$x:00006054
.text$x:00006054 arg_4           = dword ptr  8
.text$x:00006054
.text$x:00006054                 mov     edx, [esp+arg_4]
.text$x:00006058                 lea     eax, [edx+0Ch]
.text$x:0000605B                 mov     ecx, [edx-8]
.text$x:0000605E                 xor     ecx, eax
.text$x:00006060                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006065                 mov     eax, offset __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
.text$x:0000606A                 jmp     ___CxxFrameHandler3
.text$x:0000606A __ehhandler$??0facet@locale@std@@IAE@I@Z endp
.text$x:0000606A
.text$x:0000606A ; ---------------------------------------------------------------------------
.text$x:0000606F                 align 10h
.text$x:0000606F _text$x         ends
.text$x:0000606F
.text$mn:00006070 ; ===========================================================================
.text$mn:00006070
.text$mn:00006070 ; Segment type: Pure code
.text$mn:00006070 ; Segment permissions: Read/Execute
.text$mn:00006070 _text$mn        segment para public 'CODE' use32
.text$mn:00006070                 assume cs:_text$mn
.text$mn:00006070                 ;org 6070h
.text$mn:00006070 ; COMDAT (pick any)
.text$mn:00006070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006070
.text$mn:00006070 ; =============== S U B R O U T I N E =======================================
.text$mn:00006070
.text$mn:00006070 ; Attributes: bp-based frame
.text$mn:00006070
.text$mn:00006070 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const struct std::ios_base::failure *)
.text$mn:00006070                 public ??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:00006070 ??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$mn:00006070                                         ; DATA XREF: .xdata$x:0000E304o
.text$mn:00006070
.text$mn:00006070 var_10          = dword ptr -10h
.text$mn:00006070 var_C           = dword ptr -0Ch
.text$mn:00006070 var_4           = dword ptr -4
.text$mn:00006070 arg_0           = dword ptr  8
.text$mn:00006070
.text$mn:00006070                 push    ebp
.text$mn:00006071                 mov     ebp, esp
.text$mn:00006073                 push    0FFFFFFFFh
.text$mn:00006075                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:0000607A                 mov     eax, large fs:0
.text$mn:00006080                 push    eax
.text$mn:00006081                 push    ecx
.text$mn:00006082                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006087                 xor     eax, ebp
.text$mn:00006089                 push    eax
.text$mn:0000608A                 lea     eax, [ebp+var_C]
.text$mn:0000608D                 mov     large fs:0, eax
.text$mn:00006093                 mov     [ebp+var_10], ecx
.text$mn:00006096                 mov     eax, [ebp+arg_0]
.text$mn:00006099                 push    eax             ; struct std::system_error *
.text$mn:0000609A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000609D                 call    ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.text$mn:000060A2                 mov     [ebp+var_4], 0
.text$mn:000060A9                 mov     ecx, [ebp+var_10]
.text$mn:000060AC                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:000060B2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060B9                 mov     eax, [ebp+var_10]
.text$mn:000060BC                 mov     ecx, [ebp+var_C]
.text$mn:000060BF                 mov     large fs:0, ecx
.text$mn:000060C6                 pop     ecx
.text$mn:000060C7                 mov     esp, ebp
.text$mn:000060C9                 pop     ebp
.text$mn:000060CA                 retn    4
.text$mn:000060CA ??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$mn:000060CA
.text$mn:000060CA ; ---------------------------------------------------------------------------
.text$mn:000060CD                 align 10h
.text$mn:000060CD _text$mn        ends
.text$mn:000060CD
.text$x:000060D0 ; ===========================================================================
.text$x:000060D0
.text$x:000060D0 ; Segment type: Pure code
.text$x:000060D0 ; Segment permissions: Read/Execute
.text$x:000060D0 _text$x         segment para public 'CODE' use32
.text$x:000060D0                 assume cs:_text$x
.text$x:000060D0                 ;org 60D0h
.text$x:000060D0 ; COMDAT (pick associative to section at 6070)
.text$x:000060D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000060D0
.text$x:000060D0 ; =============== S U B R O U T I N E =======================================
.text$x:000060D0
.text$x:000060D0
.text$x:000060D0 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 proc near
.text$x:000060D0                                         ; DATA XREF: .xdata$x:0000D0E8o
.text$x:000060D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000060D3                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:000060D3 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 endp
.text$x:000060D3
.text$x:000060D8
.text$x:000060D8 ; =============== S U B R O U T I N E =======================================
.text$x:000060D8
.text$x:000060D8
.text$x:000060D8 __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$x:000060D8                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+5o
.text$x:000060D8
.text$x:000060D8 arg_4           = dword ptr  8
.text$x:000060D8
.text$x:000060D8                 mov     edx, [esp+arg_4]
.text$x:000060DC                 lea     eax, [edx+0Ch]
.text$x:000060DF                 mov     ecx, [edx-8]
.text$x:000060E2                 xor     ecx, eax
.text$x:000060E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060E9                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$x:000060EE                 jmp     ___CxxFrameHandler3
.text$x:000060EE __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$x:000060EE
.text$x:000060EE ; ---------------------------------------------------------------------------
.text$x:000060F3                 align 4
.text$x:000060F3 _text$x         ends
.text$x:000060F3
.text$mn:000060F4 ; ===========================================================================
.text$mn:000060F4
.text$mn:000060F4 ; Segment type: Pure code
.text$mn:000060F4 ; Segment permissions: Read/Execute
.text$mn:000060F4 _text$mn        segment para public 'CODE' use32
.text$mn:000060F4                 assume cs:_text$mn
.text$mn:000060F4                 ;org 60F4h
.text$mn:000060F4 ; COMDAT (pick any)
.text$mn:000060F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060F4
.text$mn:000060F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000060F4
.text$mn:000060F4 ; Attributes: bp-based frame
.text$mn:000060F4
.text$mn:000060F4 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const char *, const struct std::error_code *)
.text$mn:000060F4                 public ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:000060F4 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$mn:000060F4                                         ; CODE XREF: std::ios_base::clear(int,bool)+66p
.text$mn:000060F4                                         ; std::ios_base::clear(int,bool)+A3p ...
.text$mn:000060F4
.text$mn:000060F4 var_10          = dword ptr -10h
.text$mn:000060F4 var_C           = dword ptr -0Ch
.text$mn:000060F4 var_4           = dword ptr -4
.text$mn:000060F4 arg_0           = dword ptr  8
.text$mn:000060F4 arg_4           = dword ptr  0Ch
.text$mn:000060F4
.text$mn:000060F4                 push    ebp
.text$mn:000060F5                 mov     ebp, esp
.text$mn:000060F7                 push    0FFFFFFFFh
.text$mn:000060F9                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:000060FE                 mov     eax, large fs:0
.text$mn:00006104                 push    eax
.text$mn:00006105                 push    ecx
.text$mn:00006106                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000610B                 xor     eax, ebp
.text$mn:0000610D                 push    eax
.text$mn:0000610E                 lea     eax, [ebp+var_C]
.text$mn:00006111                 mov     large fs:0, eax
.text$mn:00006117                 mov     [ebp+var_10], ecx
.text$mn:0000611A                 mov     eax, [ebp+arg_0]
.text$mn:0000611D                 push    eax
.text$mn:0000611E                 mov     ecx, [ebp+arg_4]
.text$mn:00006121                 mov     edx, [ecx+4]
.text$mn:00006124                 push    edx
.text$mn:00006125                 mov     eax, [ecx]
.text$mn:00006127                 push    eax
.text$mn:00006128                 mov     ecx, [ebp+var_10]
.text$mn:0000612B                 call    ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error(std::error_code,char const *)
.text$mn:00006130                 mov     [ebp+var_4], 0
.text$mn:00006137                 mov     ecx, [ebp+var_10]
.text$mn:0000613A                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:00006140                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006147                 mov     eax, [ebp+var_10]
.text$mn:0000614A                 mov     ecx, [ebp+var_C]
.text$mn:0000614D                 mov     large fs:0, ecx
.text$mn:00006154                 pop     ecx
.text$mn:00006155                 mov     esp, ebp
.text$mn:00006157                 pop     ebp
.text$mn:00006158                 retn    8
.text$mn:00006158 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$mn:00006158
.text$mn:00006158 ; ---------------------------------------------------------------------------
.text$mn:0000615B                 align 4
.text$mn:0000615B _text$mn        ends
.text$mn:0000615B
.text$x:0000615C ; ===========================================================================
.text$x:0000615C
.text$x:0000615C ; Segment type: Pure code
.text$x:0000615C ; Segment permissions: Read/Execute
.text$x:0000615C _text$x         segment para public 'CODE' use32
.text$x:0000615C                 assume cs:_text$x
.text$x:0000615C                 ;org 615Ch
.text$x:0000615C ; COMDAT (pick associative to section at 60F4)
.text$x:0000615C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000615C
.text$x:0000615C ; =============== S U B R O U T I N E =======================================
.text$x:0000615C
.text$x:0000615C
.text$x:0000615C __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 proc near
.text$x:0000615C                                         ; DATA XREF: .xdata$x:0000D090o
.text$x:0000615C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000615F                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:0000615F __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 endp
.text$x:0000615F
.text$x:00006164
.text$x:00006164 ; =============== S U B R O U T I N E =======================================
.text$x:00006164
.text$x:00006164
.text$x:00006164 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$x:00006164                                         ; DATA XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+5o
.text$x:00006164
.text$x:00006164 arg_4           = dword ptr  8
.text$x:00006164
.text$x:00006164                 mov     edx, [esp+arg_4]
.text$x:00006168                 lea     eax, [edx+0Ch]
.text$x:0000616B                 mov     ecx, [edx-8]
.text$x:0000616E                 xor     ecx, eax
.text$x:00006170                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006175                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$x:0000617A                 jmp     ___CxxFrameHandler3
.text$x:0000617A __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$x:0000617A
.text$x:0000617A ; ---------------------------------------------------------------------------
.text$x:0000617F                 align 10h
.text$x:0000617F _text$x         ends
.text$x:0000617F
.text$mn:00006180 ; ===========================================================================
.text$mn:00006180
.text$mn:00006180 ; Segment type: Pure code
.text$mn:00006180 ; Segment permissions: Read/Execute
.text$mn:00006180 _text$mn        segment para public 'CODE' use32
.text$mn:00006180                 assume cs:_text$mn
.text$mn:00006180                 ;org 6180h
.text$mn:00006180 ; COMDAT (pick any)
.text$mn:00006180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006180
.text$mn:00006180 ; =============== S U B R O U T I N E =======================================
.text$mn:00006180
.text$mn:00006180 ; Attributes: bp-based frame
.text$mn:00006180
.text$mn:00006180 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00006180                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00006180 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00006180                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00006180
.text$mn:00006180 var_4           = dword ptr -4
.text$mn:00006180 arg_0           = dword ptr  8
.text$mn:00006180
.text$mn:00006180                 push    ebp
.text$mn:00006181                 mov     ebp, esp
.text$mn:00006183                 push    ecx
.text$mn:00006184                 mov     [ebp+var_4], ecx
.text$mn:00006187                 mov     eax, [ebp+var_4]
.text$mn:0000618A                 mov     ecx, [ebp+arg_0]
.text$mn:0000618D                 mov     [eax], ecx
.text$mn:0000618F                 mov     eax, [ebp+var_4]
.text$mn:00006192                 mov     esp, ebp
.text$mn:00006194                 pop     ebp
.text$mn:00006195                 retn    4
.text$mn:00006195 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00006195
.text$mn:00006195 _text$mn        ends
.text$mn:00006195
.text$mn:00006198 ; ===========================================================================
.text$mn:00006198
.text$mn:00006198 ; Segment type: Pure code
.text$mn:00006198 ; Segment permissions: Read/Execute
.text$mn:00006198 _text$mn        segment para public 'CODE' use32
.text$mn:00006198                 assume cs:_text$mn
.text$mn:00006198                 ;org 6198h
.text$mn:00006198 ; COMDAT (pick any)
.text$mn:00006198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006198
.text$mn:00006198 ; =============== S U B R O U T I N E =======================================
.text$mn:00006198
.text$mn:00006198 ; Attributes: bp-based frame
.text$mn:00006198
.text$mn:00006198 ; _DWORD __thiscall std::ios_base::ios_base(std::ios_base *__hidden this)
.text$mn:00006198                 public ??0ios_base@std@@IAE@XZ
.text$mn:00006198 ??0ios_base@std@@IAE@XZ proc near       ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+29p
.text$mn:00006198
.text$mn:00006198 var_4           = dword ptr -4
.text$mn:00006198
.text$mn:00006198                 push    ebp
.text$mn:00006199                 mov     ebp, esp
.text$mn:0000619B                 push    ecx
.text$mn:0000619C                 mov     [ebp+var_4], ecx
.text$mn:0000619F                 mov     eax, [ebp+var_4]
.text$mn:000061A2                 mov     dword ptr [eax], offset ??_7ios_base@std@@6B@ ; const std::ios_base::`vftable'
.text$mn:000061A8                 mov     eax, [ebp+var_4]
.text$mn:000061AB                 mov     esp, ebp
.text$mn:000061AD                 pop     ebp
.text$mn:000061AE                 retn
.text$mn:000061AE ??0ios_base@std@@IAE@XZ endp
.text$mn:000061AE
.text$mn:000061AE ; ---------------------------------------------------------------------------
.text$mn:000061AF                 align 10h
.text$mn:000061AF _text$mn        ends
.text$mn:000061AF
.text$mn:000061B0 ; ===========================================================================
.text$mn:000061B0
.text$mn:000061B0 ; Segment type: Pure code
.text$mn:000061B0 ; Segment permissions: Read/Execute
.text$mn:000061B0 _text$mn        segment para public 'CODE' use32
.text$mn:000061B0                 assume cs:_text$mn
.text$mn:000061B0                 ;org 61B0h
.text$mn:000061B0 ; COMDAT (pick any)
.text$mn:000061B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061B0
.text$mn:000061B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000061B0
.text$mn:000061B0 ; Attributes: bp-based frame
.text$mn:000061B0
.text$mn:000061B0 ; _DWORD __thiscall std::locale::locale(std::locale *this, const struct std::locale *)
.text$mn:000061B0                 public ??0locale@std@@QAE@ABV01@@Z
.text$mn:000061B0 ??0locale@std@@QAE@ABV01@@Z proc near   ; CODE XREF: std::ios_base::getloc(void)+39p
.text$mn:000061B0
.text$mn:000061B0 var_4           = dword ptr -4
.text$mn:000061B0 arg_0           = dword ptr  8
.text$mn:000061B0
.text$mn:000061B0                 push    ebp
.text$mn:000061B1                 mov     ebp, esp
.text$mn:000061B3                 push    ecx
.text$mn:000061B4                 mov     [ebp+var_4], ecx
.text$mn:000061B7                 mov     eax, [ebp+var_4]
.text$mn:000061BA                 mov     ecx, [ebp+arg_0]
.text$mn:000061BD                 mov     edx, [ecx]
.text$mn:000061BF                 mov     [eax], edx
.text$mn:000061C1                 mov     eax, [ebp+var_4]
.text$mn:000061C4                 mov     ecx, [eax]
.text$mn:000061C6                 mov     edx, [ebp+var_4]
.text$mn:000061C9                 mov     eax, [ecx]
.text$mn:000061CB                 mov     ecx, [edx]
.text$mn:000061CD                 mov     edx, [eax+4]
.text$mn:000061D0                 call    edx
.text$mn:000061D2                 mov     eax, [ebp+var_4]
.text$mn:000061D5                 mov     esp, ebp
.text$mn:000061D7                 pop     ebp
.text$mn:000061D8                 retn    4
.text$mn:000061D8 ??0locale@std@@QAE@ABV01@@Z endp
.text$mn:000061D8
.text$mn:000061D8 ; ---------------------------------------------------------------------------
.text$mn:000061DB                 align 4
.text$mn:000061DB _text$mn        ends
.text$mn:000061DB
.text$mn:000061DC ; ===========================================================================
.text$mn:000061DC
.text$mn:000061DC ; Segment type: Pure code
.text$mn:000061DC ; Segment permissions: Read/Execute
.text$mn:000061DC _text$mn        segment para public 'CODE' use32
.text$mn:000061DC                 assume cs:_text$mn
.text$mn:000061DC                 ;org 61DCh
.text$mn:000061DC ; COMDAT (pick any)
.text$mn:000061DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061DC
.text$mn:000061DC ; =============== S U B R O U T I N E =======================================
.text$mn:000061DC
.text$mn:000061DC ; Attributes: bp-based frame
.text$mn:000061DC
.text$mn:000061DC ; _DWORD __thiscall std::locale::locale(std::locale *__hidden this)
.text$mn:000061DC                 public ??0locale@std@@QAE@XZ
.text$mn:000061DC ??0locale@std@@QAE@XZ proc near         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+35p
.text$mn:000061DC                                         ; std::ios_base::_Init(void)+97p
.text$mn:000061DC
.text$mn:000061DC var_4           = dword ptr -4
.text$mn:000061DC
.text$mn:000061DC                 push    ebp
.text$mn:000061DD                 mov     ebp, esp
.text$mn:000061DF                 push    ecx
.text$mn:000061E0                 mov     [ebp+var_4], ecx
.text$mn:000061E3                 push    1               ; bool
.text$mn:000061E5                 call    ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init(bool)
.text$mn:000061EA                 add     esp, 4
.text$mn:000061ED                 mov     ecx, [ebp+var_4]
.text$mn:000061F0                 mov     [ecx], eax
.text$mn:000061F2                 mov     eax, [ebp+var_4]
.text$mn:000061F5                 mov     esp, ebp
.text$mn:000061F7                 pop     ebp
.text$mn:000061F8                 retn
.text$mn:000061F8 ??0locale@std@@QAE@XZ endp
.text$mn:000061F8
.text$mn:000061F8 ; ---------------------------------------------------------------------------
.text$mn:000061F9                 align 4
.text$mn:000061F9 _text$mn        ends
.text$mn:000061F9
.text$mn:000061FC ; ===========================================================================
.text$mn:000061FC
.text$mn:000061FC ; Segment type: Pure code
.text$mn:000061FC ; Segment permissions: Read/Execute
.text$mn:000061FC _text$mn        segment para public 'CODE' use32
.text$mn:000061FC                 assume cs:_text$mn
.text$mn:000061FC                 ;org 61FCh
.text$mn:000061FC ; COMDAT (pick any)
.text$mn:000061FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061FC
.text$mn:000061FC ; =============== S U B R O U T I N E =======================================
.text$mn:000061FC
.text$mn:000061FC ; Attributes: bp-based frame
.text$mn:000061FC
.text$mn:000061FC ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:000061FC                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:000061FC ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:000061FC                                         ; CODE XREF: std::_System_error::_System_error(std::_System_error const &)+2Dp
.text$mn:000061FC                                         ; DATA XREF: .xdata$x:0000E018o
.text$mn:000061FC
.text$mn:000061FC var_10          = dword ptr -10h
.text$mn:000061FC var_C           = dword ptr -0Ch
.text$mn:000061FC var_4           = dword ptr -4
.text$mn:000061FC arg_0           = dword ptr  8
.text$mn:000061FC
.text$mn:000061FC                 push    ebp
.text$mn:000061FD                 mov     ebp, esp
.text$mn:000061FF                 push    0FFFFFFFFh
.text$mn:00006201                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00006206                 mov     eax, large fs:0
.text$mn:0000620C                 push    eax
.text$mn:0000620D                 push    ecx
.text$mn:0000620E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006213                 xor     eax, ebp
.text$mn:00006215                 push    eax
.text$mn:00006216                 lea     eax, [ebp+var_C]
.text$mn:00006219                 mov     large fs:0, eax
.text$mn:0000621F                 mov     [ebp+var_10], ecx
.text$mn:00006222                 mov     eax, [ebp+arg_0]
.text$mn:00006225                 push    eax             ; struct std::exception *
.text$mn:00006226                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006229                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:0000622E                 mov     [ebp+var_4], 0
.text$mn:00006235                 mov     ecx, [ebp+var_10]
.text$mn:00006238                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:0000623E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006245                 mov     eax, [ebp+var_10]
.text$mn:00006248                 mov     ecx, [ebp+var_C]
.text$mn:0000624B                 mov     large fs:0, ecx
.text$mn:00006252                 pop     ecx
.text$mn:00006253                 mov     esp, ebp
.text$mn:00006255                 pop     ebp
.text$mn:00006256                 retn    4
.text$mn:00006256 ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:00006256
.text$mn:00006256 ; ---------------------------------------------------------------------------
.text$mn:00006259                 align 4
.text$mn:00006259 _text$mn        ends
.text$mn:00006259
.text$x:0000625C ; ===========================================================================
.text$x:0000625C
.text$x:0000625C ; Segment type: Pure code
.text$x:0000625C ; Segment permissions: Read/Execute
.text$x:0000625C _text$x         segment para public 'CODE' use32
.text$x:0000625C                 assume cs:_text$x
.text$x:0000625C                 ;org 625Ch
.text$x:0000625C ; COMDAT (pick associative to section at 61FC)
.text$x:0000625C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000625C
.text$x:0000625C ; =============== S U B R O U T I N E =======================================
.text$x:0000625C
.text$x:0000625C
.text$x:0000625C __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000625C                                         ; DATA XREF: .xdata$x:0000CB18o
.text$x:0000625C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000625F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000625F __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:0000625F
.text$x:00006264
.text$x:00006264 ; =============== S U B R O U T I N E =======================================
.text$x:00006264
.text$x:00006264
.text$x:00006264 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:00006264                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:00006264
.text$x:00006264 arg_4           = dword ptr  8
.text$x:00006264
.text$x:00006264                 mov     edx, [esp+arg_4]
.text$x:00006268                 lea     eax, [edx+0Ch]
.text$x:0000626B                 mov     ecx, [edx-8]
.text$x:0000626E                 xor     ecx, eax
.text$x:00006270                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006275                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:0000627A                 jmp     ___CxxFrameHandler3
.text$x:0000627A __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:0000627A
.text$x:0000627A ; ---------------------------------------------------------------------------
.text$x:0000627F                 align 10h
.text$x:0000627F _text$x         ends
.text$x:0000627F
.text$mn:00006280 ; ===========================================================================
.text$mn:00006280
.text$mn:00006280 ; Segment type: Pure code
.text$mn:00006280 ; Segment permissions: Read/Execute
.text$mn:00006280 _text$mn        segment para public 'CODE' use32
.text$mn:00006280                 assume cs:_text$mn
.text$mn:00006280                 ;org 6280h
.text$mn:00006280 ; COMDAT (pick any)
.text$mn:00006280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006280
.text$mn:00006280 ; =============== S U B R O U T I N E =======================================
.text$mn:00006280
.text$mn:00006280 ; Attributes: bp-based frame
.text$mn:00006280
.text$mn:00006280 ; public: __thiscall std::runtime_error::runtime_error(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00006280                 public ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00006280 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:00006280                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+7Ep
.text$mn:00006280
.text$mn:00006280 var_14          = dword ptr -14h
.text$mn:00006280 var_10          = dword ptr -10h
.text$mn:00006280 var_C           = dword ptr -0Ch
.text$mn:00006280 var_4           = dword ptr -4
.text$mn:00006280 arg_0           = dword ptr  8
.text$mn:00006280
.text$mn:00006280                 push    ebp
.text$mn:00006281                 mov     ebp, esp
.text$mn:00006283                 push    0FFFFFFFFh
.text$mn:00006285                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:0000628A                 mov     eax, large fs:0
.text$mn:00006290                 push    eax
.text$mn:00006291                 sub     esp, 8
.text$mn:00006294                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006299                 xor     eax, ebp
.text$mn:0000629B                 push    eax
.text$mn:0000629C                 lea     eax, [ebp+var_C]
.text$mn:0000629F                 mov     large fs:0, eax
.text$mn:000062A5                 mov     [ebp+var_10], ecx
.text$mn:000062A8                 mov     ecx, [ebp+arg_0]
.text$mn:000062AB                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000062B0                 mov     [ebp+var_14], eax
.text$mn:000062B3                 lea     eax, [ebp+var_14]
.text$mn:000062B6                 push    eax             ; char **
.text$mn:000062B7                 mov     ecx, [ebp+var_10] ; this
.text$mn:000062BA                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:000062BF                 mov     [ebp+var_4], 0
.text$mn:000062C6                 mov     ecx, [ebp+var_10]
.text$mn:000062C9                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:000062CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062D6                 mov     eax, [ebp+var_10]
.text$mn:000062D9                 mov     ecx, [ebp+var_C]
.text$mn:000062DC                 mov     large fs:0, ecx
.text$mn:000062E3                 pop     ecx
.text$mn:000062E4                 mov     esp, ebp
.text$mn:000062E6                 pop     ebp
.text$mn:000062E7                 retn    4
.text$mn:000062E7 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:000062E7
.text$mn:000062E7 ; ---------------------------------------------------------------------------
.text$mn:000062EA                 align 4
.text$mn:000062EA _text$mn        ends
.text$mn:000062EA
.text$x:000062EC ; ===========================================================================
.text$x:000062EC
.text$x:000062EC ; Segment type: Pure code
.text$x:000062EC ; Segment permissions: Read/Execute
.text$x:000062EC _text$x         segment para public 'CODE' use32
.text$x:000062EC                 assume cs:_text$x
.text$x:000062EC                 ;org 62ECh
.text$x:000062EC ; COMDAT (pick associative to section at 6280)
.text$x:000062EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062EC
.text$x:000062EC ; =============== S U B R O U T I N E =======================================
.text$x:000062EC
.text$x:000062EC
.text$x:000062EC __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:000062EC                                         ; DATA XREF: .xdata$x:0000CA94o
.text$x:000062EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000062EF                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:000062EF __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:000062EF
.text$x:000062F4
.text$x:000062F4 ; =============== S U B R O U T I N E =======================================
.text$x:000062F4
.text$x:000062F4
.text$x:000062F4 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:000062F4                                         ; DATA XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:000062F4
.text$x:000062F4 arg_4           = dword ptr  8
.text$x:000062F4
.text$x:000062F4                 mov     edx, [esp+arg_4]
.text$x:000062F8                 lea     eax, [edx+0Ch]
.text$x:000062FB                 mov     ecx, [edx-0Ch]
.text$x:000062FE                 xor     ecx, eax
.text$x:00006300                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006305                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:0000630A                 jmp     ___CxxFrameHandler3
.text$x:0000630A __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:0000630A
.text$x:0000630A ; ---------------------------------------------------------------------------
.text$x:0000630F                 align 10h
.text$x:0000630F _text$x         ends
.text$x:0000630F
.text$mn:00006310 ; ===========================================================================
.text$mn:00006310
.text$mn:00006310 ; Segment type: Pure code
.text$mn:00006310 ; Segment permissions: Read/Execute
.text$mn:00006310 _text$mn        segment para public 'CODE' use32
.text$mn:00006310                 assume cs:_text$mn
.text$mn:00006310                 ;org 6310h
.text$mn:00006310 ; COMDAT (pick any)
.text$mn:00006310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006310
.text$mn:00006310 ; =============== S U B R O U T I N E =======================================
.text$mn:00006310
.text$mn:00006310 ; Attributes: bp-based frame
.text$mn:00006310
.text$mn:00006310 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:00006310                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:00006310 ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:00006310                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+A1p
.text$mn:00006310
.text$mn:00006310 var_10          = dword ptr -10h
.text$mn:00006310 var_C           = dword ptr -0Ch
.text$mn:00006310 var_4           = dword ptr -4
.text$mn:00006310 arg_0           = dword ptr  8
.text$mn:00006310
.text$mn:00006310                 push    ebp
.text$mn:00006311                 mov     ebp, esp
.text$mn:00006313                 push    0FFFFFFFFh
.text$mn:00006315                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:0000631A                 mov     eax, large fs:0
.text$mn:00006320                 push    eax
.text$mn:00006321                 push    ecx
.text$mn:00006322                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006327                 xor     eax, ebp
.text$mn:00006329                 push    eax
.text$mn:0000632A                 lea     eax, [ebp+var_C]
.text$mn:0000632D                 mov     large fs:0, eax
.text$mn:00006333                 mov     [ebp+var_10], ecx
.text$mn:00006336                 lea     eax, [ebp+arg_0]
.text$mn:00006339                 push    eax             ; char **
.text$mn:0000633A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000633D                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:00006342                 mov     [ebp+var_4], 0
.text$mn:00006349                 mov     ecx, [ebp+var_10]
.text$mn:0000634C                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00006352                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006359                 mov     eax, [ebp+var_10]
.text$mn:0000635C                 mov     ecx, [ebp+var_C]
.text$mn:0000635F                 mov     large fs:0, ecx
.text$mn:00006366                 pop     ecx
.text$mn:00006367                 mov     esp, ebp
.text$mn:00006369                 pop     ebp
.text$mn:0000636A                 retn    4
.text$mn:0000636A ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:0000636A
.text$mn:0000636A ; ---------------------------------------------------------------------------
.text$mn:0000636D                 align 10h
.text$mn:0000636D _text$mn        ends
.text$mn:0000636D
.text$x:00006370 ; ===========================================================================
.text$x:00006370
.text$x:00006370 ; Segment type: Pure code
.text$x:00006370 ; Segment permissions: Read/Execute
.text$x:00006370 _text$x         segment para public 'CODE' use32
.text$x:00006370                 assume cs:_text$x
.text$x:00006370                 ;org 6370h
.text$x:00006370 ; COMDAT (pick associative to section at 6310)
.text$x:00006370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006370
.text$x:00006370 ; =============== S U B R O U T I N E =======================================
.text$x:00006370
.text$x:00006370
.text$x:00006370 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:00006370                                         ; DATA XREF: .xdata$x:0000CAC0o
.text$x:00006370                 mov     ecx, [ebp-10h]  ; this
.text$x:00006373                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00006373 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:00006373
.text$x:00006378
.text$x:00006378 ; =============== S U B R O U T I N E =======================================
.text$x:00006378
.text$x:00006378
.text$x:00006378 __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:00006378                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:00006378
.text$x:00006378 arg_4           = dword ptr  8
.text$x:00006378
.text$x:00006378                 mov     edx, [esp+arg_4]
.text$x:0000637C                 lea     eax, [edx+0Ch]
.text$x:0000637F                 mov     ecx, [edx-8]
.text$x:00006382                 xor     ecx, eax
.text$x:00006384                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006389                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:0000638E                 jmp     ___CxxFrameHandler3
.text$x:0000638E __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:0000638E
.text$x:0000638E ; ---------------------------------------------------------------------------
.text$x:00006393                 align 4
.text$x:00006393 _text$x         ends
.text$x:00006393
.text$mn:00006394 ; ===========================================================================
.text$mn:00006394
.text$mn:00006394 ; Segment type: Pure code
.text$mn:00006394 ; Segment permissions: Read/Execute
.text$mn:00006394 _text$mn        segment para public 'CODE' use32
.text$mn:00006394                 assume cs:_text$mn
.text$mn:00006394                 ;org 6394h
.text$mn:00006394 ; COMDAT (pick any)
.text$mn:00006394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006394
.text$mn:00006394 ; =============== S U B R O U T I N E =======================================
.text$mn:00006394
.text$mn:00006394 ; Attributes: bp-based frame
.text$mn:00006394
.text$mn:00006394 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::sentry(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &)
.text$mn:00006394                 public ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:00006394 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00006394                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+CDp
.text$mn:00006394                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+A9p ...
.text$mn:00006394
.text$mn:00006394 var_10          = dword ptr -10h
.text$mn:00006394 var_C           = dword ptr -0Ch
.text$mn:00006394 var_4           = dword ptr -4
.text$mn:00006394 arg_0           = dword ptr  8
.text$mn:00006394
.text$mn:00006394                 push    ebp
.text$mn:00006395                 mov     ebp, esp
.text$mn:00006397                 push    0FFFFFFFFh
.text$mn:00006399                 push    offset __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:0000639E                 mov     eax, large fs:0
.text$mn:000063A4                 push    eax
.text$mn:000063A5                 push    ecx
.text$mn:000063A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063AB                 xor     eax, ebp
.text$mn:000063AD                 push    eax
.text$mn:000063AE                 lea     eax, [ebp+var_C]
.text$mn:000063B1                 mov     large fs:0, eax
.text$mn:000063B7                 mov     [ebp+var_10], ecx
.text$mn:000063BA                 mov     eax, [ebp+arg_0]
.text$mn:000063BD                 push    eax
.text$mn:000063BE                 mov     ecx, [ebp+var_10]
.text$mn:000063C1                 call    ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:000063C6                 mov     [ebp+var_4], 0
.text$mn:000063CD                 mov     ecx, [ebp+arg_0]
.text$mn:000063D0                 mov     edx, [ecx]
.text$mn:000063D2                 mov     ecx, [ebp+arg_0]
.text$mn:000063D5                 add     ecx, [edx+4]    ; this
.text$mn:000063D8                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:000063DD                 movzx   eax, al
.text$mn:000063E0                 test    eax, eax
.text$mn:000063E2                 jz      short loc_6428
.text$mn:000063E4                 mov     ecx, [ebp+arg_0]
.text$mn:000063E7                 mov     edx, [ecx]
.text$mn:000063E9                 mov     ecx, [ebp+arg_0]
.text$mn:000063EC                 add     ecx, [edx+4]
.text$mn:000063EF                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:000063F4                 test    eax, eax
.text$mn:000063F6                 jz      short loc_6428
.text$mn:000063F8                 mov     eax, [ebp+arg_0]
.text$mn:000063FB                 mov     ecx, [eax]
.text$mn:000063FD                 mov     edx, [ebp+arg_0]
.text$mn:00006400                 add     edx, [ecx+4]
.text$mn:00006403                 mov     ecx, edx
.text$mn:00006405                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:0000640A                 cmp     eax, [ebp+arg_0]
.text$mn:0000640D                 jz      short loc_6428
.text$mn:0000640F                 mov     eax, [ebp+arg_0]
.text$mn:00006412                 mov     ecx, [eax]
.text$mn:00006414                 mov     edx, [ebp+arg_0]
.text$mn:00006417                 add     edx, [ecx+4]
.text$mn:0000641A                 mov     ecx, edx
.text$mn:0000641C                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:00006421                 mov     ecx, eax
.text$mn:00006423                 call    ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)
.text$mn:00006428
.text$mn:00006428 loc_6428:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+4Ej
.text$mn:00006428                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+62j ...
.text$mn:00006428                 mov     eax, [ebp+arg_0]
.text$mn:0000642B                 mov     ecx, [eax]
.text$mn:0000642D                 mov     edx, [ebp+arg_0]
.text$mn:00006430                 add     edx, [ecx+4]
.text$mn:00006433                 mov     ecx, edx        ; this
.text$mn:00006435                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000643A                 mov     ecx, [ebp+var_10]
.text$mn:0000643D                 mov     [ecx+4], al
.text$mn:00006440                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006447                 mov     eax, [ebp+var_10]
.text$mn:0000644A                 mov     ecx, [ebp+var_C]
.text$mn:0000644D                 mov     large fs:0, ecx
.text$mn:00006454                 pop     ecx
.text$mn:00006455                 mov     esp, ebp
.text$mn:00006457                 pop     ebp
.text$mn:00006458                 retn    4
.text$mn:00006458 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$mn:00006458
.text$mn:00006458 ; ---------------------------------------------------------------------------
.text$mn:0000645B                 align 4
.text$mn:0000645B _text$mn        ends
.text$mn:0000645B
.text$x:0000645C ; ===========================================================================
.text$x:0000645C
.text$x:0000645C ; Segment type: Pure code
.text$x:0000645C ; Segment permissions: Read/Execute
.text$x:0000645C _text$x         segment para public 'CODE' use32
.text$x:0000645C                 assume cs:_text$x
.text$x:0000645C                 ;org 645Ch
.text$x:0000645C ; COMDAT (pick associative to section at 6394)
.text$x:0000645C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000645C
.text$x:0000645C ; =============== S U B R O U T I N E =======================================
.text$x:0000645C
.text$x:0000645C
.text$x:0000645C __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0 proc near
.text$x:0000645C                                         ; DATA XREF: .xdata$x:0000DF04o
.text$x:0000645C                 mov     ecx, [ebp-10h]
.text$x:0000645F                 jmp     ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:0000645F __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0 endp
.text$x:0000645F
.text$x:00006464
.text$x:00006464 ; =============== S U B R O U T I N E =======================================
.text$x:00006464
.text$x:00006464
.text$x:00006464 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$x:00006464                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+5o
.text$x:00006464
.text$x:00006464 arg_4           = dword ptr  8
.text$x:00006464
.text$x:00006464                 mov     edx, [esp+arg_4]
.text$x:00006468                 lea     eax, [edx+0Ch]
.text$x:0000646B                 mov     ecx, [edx-8]
.text$x:0000646E                 xor     ecx, eax
.text$x:00006470                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006475                 mov     eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$x:0000647A                 jmp     ___CxxFrameHandler3
.text$x:0000647A __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$x:0000647A
.text$x:0000647A ; ---------------------------------------------------------------------------
.text$x:0000647F                 align 10h
.text$x:0000647F _text$x         ends
.text$x:0000647F
.text$mn:00006480 ; ===========================================================================
.text$mn:00006480
.text$mn:00006480 ; Segment type: Pure code
.text$mn:00006480 ; Segment permissions: Read/Execute
.text$mn:00006480 _text$mn        segment para public 'CODE' use32
.text$mn:00006480                 assume cs:_text$mn
.text$mn:00006480                 ;org 6480h
.text$mn:00006480 ; COMDAT (pick any)
.text$mn:00006480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006480
.text$mn:00006480 ; =============== S U B R O U T I N E =======================================
.text$mn:00006480
.text$mn:00006480 ; Attributes: bp-based frame
.text$mn:00006480
.text$mn:00006480 ; _DWORD __thiscall std::system_error::system_error(std::system_error *this, const struct std::system_error *)
.text$mn:00006480                 public ??0system_error@std@@QAE@ABV01@@Z
.text$mn:00006480 ??0system_error@std@@QAE@ABV01@@Z proc near
.text$mn:00006480                                         ; CODE XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+2Dp
.text$mn:00006480                                         ; DATA XREF: .xdata$x:0000E340o
.text$mn:00006480
.text$mn:00006480 var_10          = dword ptr -10h
.text$mn:00006480 var_C           = dword ptr -0Ch
.text$mn:00006480 var_4           = dword ptr -4
.text$mn:00006480 arg_0           = dword ptr  8
.text$mn:00006480
.text$mn:00006480                 push    ebp
.text$mn:00006481                 mov     ebp, esp
.text$mn:00006483                 push    0FFFFFFFFh
.text$mn:00006485                 push    offset __ehhandler$??0system_error@std@@QAE@ABV01@@Z
.text$mn:0000648A                 mov     eax, large fs:0
.text$mn:00006490                 push    eax
.text$mn:00006491                 push    ecx
.text$mn:00006492                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006497                 xor     eax, ebp
.text$mn:00006499                 push    eax
.text$mn:0000649A                 lea     eax, [ebp+var_C]
.text$mn:0000649D                 mov     large fs:0, eax
.text$mn:000064A3                 mov     [ebp+var_10], ecx
.text$mn:000064A6                 mov     eax, [ebp+arg_0]
.text$mn:000064A9                 push    eax             ; struct std::_System_error *
.text$mn:000064AA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000064AD                 call    ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.text$mn:000064B2                 mov     [ebp+var_4], 0
.text$mn:000064B9                 mov     ecx, [ebp+var_10]
.text$mn:000064BC                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:000064C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000064C9                 mov     eax, [ebp+var_10]
.text$mn:000064CC                 mov     ecx, [ebp+var_C]
.text$mn:000064CF                 mov     large fs:0, ecx
.text$mn:000064D6                 pop     ecx
.text$mn:000064D7                 mov     esp, ebp
.text$mn:000064D9                 pop     ebp
.text$mn:000064DA                 retn    4
.text$mn:000064DA ??0system_error@std@@QAE@ABV01@@Z endp
.text$mn:000064DA
.text$mn:000064DA ; ---------------------------------------------------------------------------
.text$mn:000064DD                 align 10h
.text$mn:000064DD _text$mn        ends
.text$mn:000064DD
.text$x:000064E0 ; ===========================================================================
.text$x:000064E0
.text$x:000064E0 ; Segment type: Pure code
.text$x:000064E0 ; Segment permissions: Read/Execute
.text$x:000064E0 _text$x         segment para public 'CODE' use32
.text$x:000064E0                 assume cs:_text$x
.text$x:000064E0                 ;org 64E0h
.text$x:000064E0 ; COMDAT (pick associative to section at 6480)
.text$x:000064E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000064E0
.text$x:000064E0 ; =============== S U B R O U T I N E =======================================
.text$x:000064E0
.text$x:000064E0
.text$x:000064E0 __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:000064E0                                         ; DATA XREF: .xdata$x:0000CED8o
.text$x:000064E0                 mov     ecx, [ebp-10h]  ; this
.text$x:000064E3                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:000064E3 __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 endp
.text$x:000064E3
.text$x:000064E8
.text$x:000064E8 ; =============== S U B R O U T I N E =======================================
.text$x:000064E8
.text$x:000064E8
.text$x:000064E8 __ehhandler$??0system_error@std@@QAE@ABV01@@Z proc near
.text$x:000064E8                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+5o
.text$x:000064E8
.text$x:000064E8 arg_4           = dword ptr  8
.text$x:000064E8
.text$x:000064E8                 mov     edx, [esp+arg_4]
.text$x:000064EC                 lea     eax, [edx+0Ch]
.text$x:000064EF                 mov     ecx, [edx-8]
.text$x:000064F2                 xor     ecx, eax
.text$x:000064F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064F9                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z
.text$x:000064FE                 jmp     ___CxxFrameHandler3
.text$x:000064FE __ehhandler$??0system_error@std@@QAE@ABV01@@Z endp
.text$x:000064FE
.text$x:000064FE ; ---------------------------------------------------------------------------
.text$x:00006503                 align 4
.text$x:00006503 _text$x         ends
.text$x:00006503
.text$mn:00006504 ; ===========================================================================
.text$mn:00006504
.text$mn:00006504 ; Segment type: Pure code
.text$mn:00006504 ; Segment permissions: Read/Execute
.text$mn:00006504 _text$mn        segment para public 'CODE' use32
.text$mn:00006504                 assume cs:_text$mn
.text$mn:00006504                 ;org 6504h
.text$mn:00006504 ; COMDAT (pick any)
.text$mn:00006504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006504
.text$mn:00006504 ; =============== S U B R O U T I N E =======================================
.text$mn:00006504
.text$mn:00006504 ; Attributes: bp-based frame
.text$mn:00006504
.text$mn:00006504 ; public: __thiscall std::system_error::system_error(class std::error_code, char const *)
.text$mn:00006504                 public ??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:00006504 ??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$mn:00006504                                         ; CODE XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+37p
.text$mn:00006504
.text$mn:00006504 var_30          = dword ptr -30h
.text$mn:00006504 var_2C          = byte ptr -2Ch
.text$mn:00006504 var_10          = dword ptr -10h
.text$mn:00006504 var_C           = dword ptr -0Ch
.text$mn:00006504 var_4           = dword ptr -4
.text$mn:00006504 arg_0           = dword ptr  8
.text$mn:00006504 arg_4           = dword ptr  0Ch
.text$mn:00006504 Str             = dword ptr  10h
.text$mn:00006504
.text$mn:00006504                 push    ebp
.text$mn:00006505                 mov     ebp, esp
.text$mn:00006507                 push    0FFFFFFFFh
.text$mn:00006509                 push    offset __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:0000650E                 mov     eax, large fs:0
.text$mn:00006514                 push    eax
.text$mn:00006515                 sub     esp, 24h
.text$mn:00006518                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000651D                 xor     eax, ebp
.text$mn:0000651F                 mov     [ebp+var_10], eax
.text$mn:00006522                 push    eax
.text$mn:00006523                 lea     eax, [ebp+var_C]
.text$mn:00006526                 mov     large fs:0, eax
.text$mn:0000652C                 mov     [ebp+var_30], ecx
.text$mn:0000652F                 mov     eax, [ebp+Str]
.text$mn:00006532                 push    eax             ; Str
.text$mn:00006533                 lea     ecx, [ebp+var_2C]
.text$mn:00006536                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000653B                 mov     [ebp+var_4], 0
.text$mn:00006542                 lea     ecx, [ebp+var_2C]
.text$mn:00006545                 push    ecx
.text$mn:00006546                 mov     edx, [ebp+arg_4]
.text$mn:00006549                 push    edx
.text$mn:0000654A                 mov     eax, [ebp+arg_0]
.text$mn:0000654D                 push    eax
.text$mn:0000654E                 mov     ecx, [ebp+var_30]
.text$mn:00006551                 call    ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00006556                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000655A                 lea     ecx, [ebp+var_2C]
.text$mn:0000655D                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00006562                 mov     ecx, [ebp+var_30]
.text$mn:00006565                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:0000656B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006572                 mov     eax, [ebp+var_30]
.text$mn:00006575                 mov     ecx, [ebp+var_C]
.text$mn:00006578                 mov     large fs:0, ecx
.text$mn:0000657F                 pop     ecx
.text$mn:00006580                 mov     ecx, [ebp+var_10]
.text$mn:00006583                 xor     ecx, ebp
.text$mn:00006585                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000658A                 mov     esp, ebp
.text$mn:0000658C                 pop     ebp
.text$mn:0000658D                 retn    0Ch
.text$mn:0000658D ??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$mn:0000658D
.text$mn:0000658D _text$mn        ends
.text$mn:0000658D
.text$x:00006590 ; ===========================================================================
.text$x:00006590
.text$x:00006590 ; Segment type: Pure code
.text$x:00006590 ; Segment permissions: Read/Execute
.text$x:00006590 _text$x         segment para public 'CODE' use32
.text$x:00006590                 assume cs:_text$x
.text$x:00006590                 ;org 6590h
.text$x:00006590 ; COMDAT (pick associative to section at 6504)
.text$x:00006590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006590
.text$x:00006590 ; =============== S U B R O U T I N E =======================================
.text$x:00006590
.text$x:00006590
.text$x:00006590 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 proc near
.text$x:00006590                                         ; DATA XREF: .xdata$x:0000CE70o
.text$x:00006590                 lea     ecx, [ebp-2Ch]
.text$x:00006593                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006593 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 endp
.text$x:00006593
.text$x:00006598
.text$x:00006598 ; =============== S U B R O U T I N E =======================================
.text$x:00006598
.text$x:00006598
.text$x:00006598 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 proc near
.text$x:00006598                                         ; DATA XREF: .xdata$x:0000CE78o
.text$x:00006598                                         ; .xdata$x:0000CE80o
.text$x:00006598                 mov     ecx, [ebp-30h]  ; this
.text$x:0000659B                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:0000659B __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 endp
.text$x:0000659B
.text$x:000065A0
.text$x:000065A0 ; =============== S U B R O U T I N E =======================================
.text$x:000065A0
.text$x:000065A0
.text$x:000065A0 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$x:000065A0                                         ; DATA XREF: std::system_error::system_error(std::error_code,char const *)+5o
.text$x:000065A0
.text$x:000065A0 arg_4           = dword ptr  8
.text$x:000065A0
.text$x:000065A0                 mov     edx, [esp+arg_4]
.text$x:000065A4                 lea     eax, [edx+0Ch]
.text$x:000065A7                 mov     ecx, [edx-28h]
.text$x:000065AA                 xor     ecx, eax
.text$x:000065AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065B1                 mov     ecx, [edx-4]
.text$x:000065B4                 xor     ecx, eax
.text$x:000065B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065BB                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$x:000065C0                 jmp     ___CxxFrameHandler3
.text$x:000065C0 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$x:000065C0
.text$x:000065C0 ; ---------------------------------------------------------------------------
.text$x:000065C5                 align 4
.text$x:000065C5 _text$x         ends
.text$x:000065C5
.text$mn:000065C8 ; ===========================================================================
.text$mn:000065C8
.text$mn:000065C8 ; Segment type: Pure code
.text$mn:000065C8 ; Segment permissions: Read/Execute
.text$mn:000065C8 _text$mn        segment para public 'CODE' use32
.text$mn:000065C8                 assume cs:_text$mn
.text$mn:000065C8                 ;org 65C8h
.text$mn:000065C8 ; COMDAT (pick any)
.text$mn:000065C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065C8
.text$mn:000065C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065C8
.text$mn:000065C8 ; Attributes: bp-based frame
.text$mn:000065C8
.text$mn:000065C8 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:000065C8                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:000065C8 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000065C8                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:000065C8                                         ; __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:000065C8
.text$mn:000065C8 var_10          = dword ptr -10h
.text$mn:000065C8 var_C           = dword ptr -0Ch
.text$mn:000065C8 var_4           = dword ptr -4
.text$mn:000065C8
.text$mn:000065C8                 push    ebp
.text$mn:000065C9                 mov     ebp, esp
.text$mn:000065CB                 push    0FFFFFFFFh
.text$mn:000065CD                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:000065D2                 mov     eax, large fs:0
.text$mn:000065D8                 push    eax
.text$mn:000065D9                 push    ecx
.text$mn:000065DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000065DF                 xor     eax, ebp
.text$mn:000065E1                 push    eax
.text$mn:000065E2                 lea     eax, [ebp+var_C]
.text$mn:000065E5                 mov     large fs:0, eax
.text$mn:000065EB                 mov     [ebp+var_10], ecx
.text$mn:000065EE                 mov     [ebp+var_4], 0
.text$mn:000065F5                 mov     ecx, [ebp+var_10]
.text$mn:000065F8                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000065FD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006604                 mov     ecx, [ebp+var_10]
.text$mn:00006607                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:0000660C                 mov     ecx, [ebp+var_C]
.text$mn:0000660F                 mov     large fs:0, ecx
.text$mn:00006616                 pop     ecx
.text$mn:00006617                 mov     esp, ebp
.text$mn:00006619                 pop     ebp
.text$mn:0000661A                 retn
.text$mn:0000661A ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000661A
.text$mn:0000661A ; ---------------------------------------------------------------------------
.text$mn:0000661B                 align 4
.text$mn:0000661B _text$mn        ends
.text$mn:0000661B
.text$x:0000661C ; ===========================================================================
.text$x:0000661C
.text$x:0000661C ; Segment type: Pure code
.text$x:0000661C ; Segment permissions: Read/Execute
.text$x:0000661C _text$x         segment para public 'CODE' use32
.text$x:0000661C                 assume cs:_text$x
.text$x:0000661C                 ;org 661Ch
.text$x:0000661C ; COMDAT (pick associative to section at 65C8)
.text$x:0000661C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000661C
.text$x:0000661C ; =============== S U B R O U T I N E =======================================
.text$x:0000661C
.text$x:0000661C
.text$x:0000661C __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:0000661C                                         ; DATA XREF: .xdata$x:0000C92Co
.text$x:0000661C                 mov     ecx, [ebp-10h]
.text$x:0000661F                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000661F __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000661F
.text$x:00006624
.text$x:00006624 ; =============== S U B R O U T I N E =======================================
.text$x:00006624
.text$x:00006624
.text$x:00006624 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006624                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00006624
.text$x:00006624 arg_4           = dword ptr  8
.text$x:00006624
.text$x:00006624                 mov     edx, [esp+arg_4]
.text$x:00006628                 lea     eax, [edx+0Ch]
.text$x:0000662B                 mov     ecx, [edx-8]
.text$x:0000662E                 xor     ecx, eax
.text$x:00006630                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006635                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:0000663A                 jmp     ___CxxFrameHandler3
.text$x:0000663A __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:0000663A
.text$x:0000663A ; ---------------------------------------------------------------------------
.text$x:0000663F                 align 10h
.text$x:0000663F _text$x         ends
.text$x:0000663F
.text$mn:00006640 ; ===========================================================================
.text$mn:00006640
.text$mn:00006640 ; Segment type: Pure code
.text$mn:00006640 ; Segment permissions: Read/Execute
.text$mn:00006640 _text$mn        segment para public 'CODE' use32
.text$mn:00006640                 assume cs:_text$mn
.text$mn:00006640                 ;org 6640h
.text$mn:00006640 ; COMDAT (pick any)
.text$mn:00006640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006640
.text$mn:00006640 ; =============== S U B R O U T I N E =======================================
.text$mn:00006640
.text$mn:00006640 ; Attributes: bp-based frame
.text$mn:00006640
.text$mn:00006640 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00006640                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006640 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006640                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00006640                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00006640
.text$mn:00006640 var_10          = dword ptr -10h
.text$mn:00006640 var_C           = dword ptr -0Ch
.text$mn:00006640 var_4           = dword ptr -4
.text$mn:00006640
.text$mn:00006640                 push    ebp
.text$mn:00006641                 mov     ebp, esp
.text$mn:00006643                 push    0FFFFFFFFh
.text$mn:00006645                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000664A                 mov     eax, large fs:0
.text$mn:00006650                 push    eax
.text$mn:00006651                 push    ecx
.text$mn:00006652                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006657                 xor     eax, ebp
.text$mn:00006659                 push    eax
.text$mn:0000665A                 lea     eax, [ebp+var_C]
.text$mn:0000665D                 mov     large fs:0, eax
.text$mn:00006663                 mov     [ebp+var_10], ecx
.text$mn:00006666                 mov     [ebp+var_4], 0
.text$mn:0000666D                 mov     ecx, [ebp+var_10]
.text$mn:00006670                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00006675                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000667C                 mov     ecx, [ebp+var_10]
.text$mn:0000667F                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00006684                 mov     ecx, [ebp+var_C]
.text$mn:00006687                 mov     large fs:0, ecx
.text$mn:0000668E                 pop     ecx
.text$mn:0000668F                 mov     esp, ebp
.text$mn:00006691                 pop     ebp
.text$mn:00006692                 retn
.text$mn:00006692 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006692
.text$mn:00006692 ; ---------------------------------------------------------------------------
.text$mn:00006693                 align 4
.text$mn:00006693 _text$mn        ends
.text$mn:00006693
.text$x:00006694 ; ===========================================================================
.text$x:00006694
.text$x:00006694 ; Segment type: Pure code
.text$x:00006694 ; Segment permissions: Read/Execute
.text$x:00006694 _text$x         segment para public 'CODE' use32
.text$x:00006694                 assume cs:_text$x
.text$x:00006694                 ;org 6694h
.text$x:00006694 ; COMDAT (pick associative to section at 6640)
.text$x:00006694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006694
.text$x:00006694 ; =============== S U B R O U T I N E =======================================
.text$x:00006694
.text$x:00006694
.text$x:00006694 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006694                                         ; DATA XREF: .xdata$x:0000D274o
.text$x:00006694                 mov     ecx, [ebp-10h]
.text$x:00006697                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00006697 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006697
.text$x:0000669C
.text$x:0000669C ; =============== S U B R O U T I N E =======================================
.text$x:0000669C
.text$x:0000669C
.text$x:0000669C __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000669C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:0000669C
.text$x:0000669C arg_4           = dword ptr  8
.text$x:0000669C
.text$x:0000669C                 mov     edx, [esp+arg_4]
.text$x:000066A0                 lea     eax, [edx+0Ch]
.text$x:000066A3                 mov     ecx, [edx-8]
.text$x:000066A6                 xor     ecx, eax
.text$x:000066A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000066AD                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:000066B2                 jmp     ___CxxFrameHandler3
.text$x:000066B2 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000066B2
.text$x:000066B2 ; ---------------------------------------------------------------------------
.text$x:000066B7                 align 4
.text$x:000066B7 _text$x         ends
.text$x:000066B7
.text$mn:000066B8 ; ===========================================================================
.text$mn:000066B8
.text$mn:000066B8 ; Segment type: Pure code
.text$mn:000066B8 ; Segment permissions: Read/Execute
.text$mn:000066B8 _text$mn        segment para public 'CODE' use32
.text$mn:000066B8                 assume cs:_text$mn
.text$mn:000066B8                 ;org 66B8h
.text$mn:000066B8 ; COMDAT (pick any)
.text$mn:000066B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066B8
.text$mn:000066B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066B8
.text$mn:000066B8 ; Attributes: bp-based frame
.text$mn:000066B8
.text$mn:000066B8 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000066B8                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000066B8 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000066B8                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:000066B8                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:000066B8
.text$mn:000066B8 var_10          = dword ptr -10h
.text$mn:000066B8 var_C           = dword ptr -0Ch
.text$mn:000066B8 var_4           = dword ptr -4
.text$mn:000066B8
.text$mn:000066B8                 push    ebp
.text$mn:000066B9                 mov     ebp, esp
.text$mn:000066BB                 push    0FFFFFFFFh
.text$mn:000066BD                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000066C2                 mov     eax, large fs:0
.text$mn:000066C8                 push    eax
.text$mn:000066C9                 push    ecx
.text$mn:000066CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000066CF                 xor     eax, ebp
.text$mn:000066D1                 push    eax
.text$mn:000066D2                 lea     eax, [ebp+var_C]
.text$mn:000066D5                 mov     large fs:0, eax
.text$mn:000066DB                 mov     [ebp+var_10], ecx
.text$mn:000066DE                 mov     [ebp+var_4], 0
.text$mn:000066E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000066EC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000066EF                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000066F4                 mov     ecx, [ebp+var_C]
.text$mn:000066F7                 mov     large fs:0, ecx
.text$mn:000066FE                 pop     ecx
.text$mn:000066FF                 mov     esp, ebp
.text$mn:00006701                 pop     ebp
.text$mn:00006702                 retn
.text$mn:00006702 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00006702
.text$mn:00006702 ; ---------------------------------------------------------------------------
.text$mn:00006703                 align 4
.text$mn:00006703 _text$mn        ends
.text$mn:00006703
.text$x:00006704 ; ===========================================================================
.text$x:00006704
.text$x:00006704 ; Segment type: Pure code
.text$x:00006704 ; Segment permissions: Read/Execute
.text$x:00006704 _text$x         segment para public 'CODE' use32
.text$x:00006704                 assume cs:_text$x
.text$x:00006704                 ;org 6704h
.text$x:00006704 ; COMDAT (pick associative to section at 66B8)
.text$x:00006704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006704
.text$x:00006704 ; =============== S U B R O U T I N E =======================================
.text$x:00006704
.text$x:00006704
.text$x:00006704 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00006704                                         ; DATA XREF: .xdata$x:0000C8D4o
.text$x:00006704                 mov     ecx, [ebp-10h]  ; this
.text$x:00006707                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006707 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00006707
.text$x:0000670C
.text$x:0000670C ; =============== S U B R O U T I N E =======================================
.text$x:0000670C
.text$x:0000670C
.text$x:0000670C __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:0000670C                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:0000670C
.text$x:0000670C arg_4           = dword ptr  8
.text$x:0000670C
.text$x:0000670C                 mov     edx, [esp+arg_4]
.text$x:00006710                 lea     eax, [edx+0Ch]
.text$x:00006713                 mov     ecx, [edx-8]
.text$x:00006716                 xor     ecx, eax
.text$x:00006718                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000671D                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00006722                 jmp     ___CxxFrameHandler3
.text$x:00006722 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00006722
.text$x:00006722 ; ---------------------------------------------------------------------------
.text$x:00006727                 align 4
.text$x:00006727 _text$x         ends
.text$x:00006727
.text$mn:00006728 ; ===========================================================================
.text$mn:00006728
.text$mn:00006728 ; Segment type: Pure code
.text$mn:00006728 ; Segment permissions: Read/Execute
.text$mn:00006728 _text$mn        segment para public 'CODE' use32
.text$mn:00006728                 assume cs:_text$mn
.text$mn:00006728                 ;org 6728h
.text$mn:00006728 ; COMDAT (pick any)
.text$mn:00006728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006728
.text$mn:00006728 ; =============== S U B R O U T I N E =======================================
.text$mn:00006728
.text$mn:00006728 ; Attributes: bp-based frame
.text$mn:00006728
.text$mn:00006728 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00006728                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006728 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00006728                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00006728                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00006728
.text$mn:00006728 var_10          = dword ptr -10h
.text$mn:00006728 var_C           = dword ptr -0Ch
.text$mn:00006728 var_4           = dword ptr -4
.text$mn:00006728
.text$mn:00006728                 push    ebp
.text$mn:00006729                 mov     ebp, esp
.text$mn:0000672B                 push    0FFFFFFFFh
.text$mn:0000672D                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006732                 mov     eax, large fs:0
.text$mn:00006738                 push    eax
.text$mn:00006739                 push    ecx
.text$mn:0000673A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000673F                 xor     eax, ebp
.text$mn:00006741                 push    eax
.text$mn:00006742                 lea     eax, [ebp+var_C]
.text$mn:00006745                 mov     large fs:0, eax
.text$mn:0000674B                 mov     [ebp+var_10], ecx
.text$mn:0000674E                 mov     [ebp+var_4], 0
.text$mn:00006755                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000675C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000675F                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00006764                 mov     ecx, [ebp+var_C]
.text$mn:00006767                 mov     large fs:0, ecx
.text$mn:0000676E                 pop     ecx
.text$mn:0000676F                 mov     esp, ebp
.text$mn:00006771                 pop     ebp
.text$mn:00006772                 retn
.text$mn:00006772 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00006772
.text$mn:00006772 ; ---------------------------------------------------------------------------
.text$mn:00006773                 align 4
.text$mn:00006773 _text$mn        ends
.text$mn:00006773
.text$x:00006774 ; ===========================================================================
.text$x:00006774
.text$x:00006774 ; Segment type: Pure code
.text$x:00006774 ; Segment permissions: Read/Execute
.text$x:00006774 _text$x         segment para public 'CODE' use32
.text$x:00006774                 assume cs:_text$x
.text$x:00006774                 ;org 6774h
.text$x:00006774 ; COMDAT (pick associative to section at 6728)
.text$x:00006774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006774
.text$x:00006774 ; =============== S U B R O U T I N E =======================================
.text$x:00006774
.text$x:00006774
.text$x:00006774 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006774                                         ; DATA XREF: .xdata$x:0000D21Co
.text$x:00006774                 mov     ecx, [ebp-10h]  ; this
.text$x:00006777                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006777 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00006777
.text$x:0000677C
.text$x:0000677C ; =============== S U B R O U T I N E =======================================
.text$x:0000677C
.text$x:0000677C
.text$x:0000677C __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:0000677C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:0000677C
.text$x:0000677C arg_4           = dword ptr  8
.text$x:0000677C
.text$x:0000677C                 mov     edx, [esp+arg_4]
.text$x:00006780                 lea     eax, [edx+0Ch]
.text$x:00006783                 mov     ecx, [edx-8]
.text$x:00006786                 xor     ecx, eax
.text$x:00006788                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000678D                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00006792                 jmp     ___CxxFrameHandler3
.text$x:00006792 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00006792
.text$x:00006792 ; ---------------------------------------------------------------------------
.text$x:00006797                 align 4
.text$x:00006797 _text$x         ends
.text$x:00006797
.text$mn:00006798 ; ===========================================================================
.text$mn:00006798
.text$mn:00006798 ; Segment type: Pure code
.text$mn:00006798 ; Segment permissions: Read/Execute
.text$mn:00006798 _text$mn        segment para public 'CODE' use32
.text$mn:00006798                 assume cs:_text$mn
.text$mn:00006798                 ;org 6798h
.text$mn:00006798 ; COMDAT (pick any)
.text$mn:00006798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006798
.text$mn:00006798 ; =============== S U B R O U T I N E =======================================
.text$mn:00006798
.text$mn:00006798 ; Attributes: bp-based frame
.text$mn:00006798
.text$mn:00006798 ; public: __thiscall std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00006798                 public ??1?$_Yarn@D@std@@QAE@XZ
.text$mn:00006798 ??1?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1+6j
.text$mn:00006798                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2+6j ...
.text$mn:00006798
.text$mn:00006798 var_4           = dword ptr -4
.text$mn:00006798
.text$mn:00006798                 push    ebp
.text$mn:00006799                 mov     ebp, esp
.text$mn:0000679B                 push    ecx
.text$mn:0000679C                 mov     [ebp+var_4], ecx
.text$mn:0000679F                 mov     ecx, [ebp+var_4]
.text$mn:000067A2                 call    ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy(void)
.text$mn:000067A7                 mov     esp, ebp
.text$mn:000067A9                 pop     ebp
.text$mn:000067AA                 retn
.text$mn:000067AA ??1?$_Yarn@D@std@@QAE@XZ endp
.text$mn:000067AA
.text$mn:000067AA ; ---------------------------------------------------------------------------
.text$mn:000067AB                 align 4
.text$mn:000067AB _text$mn        ends
.text$mn:000067AB
.text$mn:000067AC ; ===========================================================================
.text$mn:000067AC
.text$mn:000067AC ; Segment type: Pure code
.text$mn:000067AC ; Segment permissions: Read/Execute
.text$mn:000067AC _text$mn        segment para public 'CODE' use32
.text$mn:000067AC                 assume cs:_text$mn
.text$mn:000067AC                 ;org 67ACh
.text$mn:000067AC ; COMDAT (pick any)
.text$mn:000067AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067AC
.text$mn:000067AC ; =============== S U B R O U T I N E =======================================
.text$mn:000067AC
.text$mn:000067AC ; Attributes: bp-based frame
.text$mn:000067AC
.text$mn:000067AC ; public: __thiscall std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:000067AC                 public ??1?$_Yarn@_W@std@@QAE@XZ
.text$mn:000067AC ??1?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3+6j
.text$mn:000067AC                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4+6j ...
.text$mn:000067AC
.text$mn:000067AC var_4           = dword ptr -4
.text$mn:000067AC
.text$mn:000067AC                 push    ebp
.text$mn:000067AD                 mov     ebp, esp
.text$mn:000067AF                 push    ecx
.text$mn:000067B0                 mov     [ebp+var_4], ecx
.text$mn:000067B3                 mov     ecx, [ebp+var_4]
.text$mn:000067B6                 call    ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:000067BB                 mov     esp, ebp
.text$mn:000067BD                 pop     ebp
.text$mn:000067BE                 retn
.text$mn:000067BE ??1?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:000067BE
.text$mn:000067BE ; ---------------------------------------------------------------------------
.text$mn:000067BF                 align 10h
.text$mn:000067BF _text$mn        ends
.text$mn:000067BF
.text$mn:000067C0 ; ===========================================================================
.text$mn:000067C0
.text$mn:000067C0 ; Segment type: Pure code
.text$mn:000067C0 ; Segment permissions: Read/Execute
.text$mn:000067C0 _text$mn        segment para public 'CODE' use32
.text$mn:000067C0                 assume cs:_text$mn
.text$mn:000067C0                 ;org 67C0h
.text$mn:000067C0 ; COMDAT (pick any)
.text$mn:000067C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067C0
.text$mn:000067C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000067C0
.text$mn:000067C0 ; Attributes: bp-based frame
.text$mn:000067C0
.text$mn:000067C0 ; public: virtual __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::~basic_ios<wchar_t, struct std::char_traits<wchar_t>>(void)
.text$mn:000067C0                 public ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.text$mn:000067C0 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ proc near
.text$mn:000067C0                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0+16j
.text$mn:000067C0                                         ; __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0+16j ...
.text$mn:000067C0
.text$mn:000067C0 var_10          = dword ptr -10h
.text$mn:000067C0 var_C           = dword ptr -0Ch
.text$mn:000067C0 var_4           = dword ptr -4
.text$mn:000067C0
.text$mn:000067C0                 push    ebp
.text$mn:000067C1                 mov     ebp, esp
.text$mn:000067C3                 push    0FFFFFFFFh
.text$mn:000067C5                 push    offset __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.text$mn:000067CA                 mov     eax, large fs:0
.text$mn:000067D0                 push    eax
.text$mn:000067D1                 push    ecx
.text$mn:000067D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067D7                 xor     eax, ebp
.text$mn:000067D9                 push    eax
.text$mn:000067DA                 lea     eax, [ebp+var_C]
.text$mn:000067DD                 mov     large fs:0, eax
.text$mn:000067E3                 mov     [ebp+var_10], ecx
.text$mn:000067E6                 mov     eax, [ebp+var_10]
.text$mn:000067E9                 mov     dword ptr [eax], offset ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:000067EF                 mov     [ebp+var_4], 0
.text$mn:000067F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067FD                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006800                 call    ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$mn:00006805                 mov     ecx, [ebp+var_C]
.text$mn:00006808                 mov     large fs:0, ecx
.text$mn:0000680F                 pop     ecx
.text$mn:00006810                 mov     esp, ebp
.text$mn:00006812                 pop     ebp
.text$mn:00006813                 retn
.text$mn:00006813 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ endp
.text$mn:00006813
.text$mn:00006813 _text$mn        ends
.text$mn:00006813
.text$x:00006814 ; ===========================================================================
.text$x:00006814
.text$x:00006814 ; Segment type: Pure code
.text$x:00006814 ; Segment permissions: Read/Execute
.text$x:00006814 _text$x         segment para public 'CODE' use32
.text$x:00006814                 assume cs:_text$x
.text$x:00006814                 ;org 6814h
.text$x:00006814 ; COMDAT (pick associative to section at 67C0)
.text$x:00006814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006814
.text$x:00006814 ; =============== S U B R O U T I N E =======================================
.text$x:00006814
.text$x:00006814
.text$x:00006814 __unwindfunclet$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ$0 proc near
.text$x:00006814                                         ; DATA XREF: .xdata$x:0000D140o
.text$x:00006814                 mov     ecx, [ebp-10h]  ; this
.text$x:00006817                 jmp     ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$x:00006817 __unwindfunclet$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ$0 endp
.text$x:00006817
.text$x:0000681C
.text$x:0000681C ; =============== S U B R O U T I N E =======================================
.text$x:0000681C
.text$x:0000681C
.text$x:0000681C __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ proc near
.text$x:0000681C                                         ; DATA XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+5o
.text$x:0000681C
.text$x:0000681C arg_4           = dword ptr  8
.text$x:0000681C
.text$x:0000681C                 mov     edx, [esp+arg_4]
.text$x:00006820                 lea     eax, [edx+0Ch]
.text$x:00006823                 mov     ecx, [edx-8]
.text$x:00006826                 xor     ecx, eax
.text$x:00006828                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000682D                 mov     eax, offset __ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.text$x:00006832                 jmp     ___CxxFrameHandler3
.text$x:00006832 __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ endp
.text$x:00006832
.text$x:00006832 ; ---------------------------------------------------------------------------
.text$x:00006837                 align 4
.text$x:00006837 _text$x         ends
.text$x:00006837
.text$mn:00006838 ; ===========================================================================
.text$mn:00006838
.text$mn:00006838 ; Segment type: Pure code
.text$mn:00006838 ; Segment permissions: Read/Execute
.text$mn:00006838 _text$mn        segment para public 'CODE' use32
.text$mn:00006838                 assume cs:_text$mn
.text$mn:00006838                 ;org 6838h
.text$mn:00006838 ; COMDAT (pick any)
.text$mn:00006838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006838
.text$mn:00006838 ; =============== S U B R O U T I N E =======================================
.text$mn:00006838
.text$mn:00006838 ; Attributes: bp-based frame
.text$mn:00006838
.text$mn:00006838 ; public: virtual __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::~basic_ostream<wchar_t, struct std::char_traits<wchar_t>>(void)
.text$mn:00006838                 public ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.text$mn:00006838 ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ proc near
.text$mn:00006838                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1+6j
.text$mn:00006838                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+79p ...
.text$mn:00006838
.text$mn:00006838 var_4           = dword ptr -4
.text$mn:00006838
.text$mn:00006838                 push    ebp
.text$mn:00006839                 mov     ebp, esp
.text$mn:0000683B                 push    ecx
.text$mn:0000683C                 mov     [ebp+var_4], ecx
.text$mn:0000683F                 mov     eax, [ebp+var_4]
.text$mn:00006842                 mov     ecx, [eax-8]
.text$mn:00006845                 mov     edx, [ecx+4]
.text$mn:00006848                 mov     eax, [ebp+var_4]
.text$mn:0000684B                 mov     dword ptr [eax+edx-8], offset ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:00006853                 mov     ecx, [ebp+var_4]
.text$mn:00006856                 mov     edx, [ecx-8]
.text$mn:00006859                 mov     eax, [edx+4]
.text$mn:0000685C                 sub     eax, 8
.text$mn:0000685F                 mov     ecx, [ebp+var_4]
.text$mn:00006862                 mov     edx, [ecx-8]
.text$mn:00006865                 mov     ecx, [edx+4]
.text$mn:00006868                 mov     edx, [ebp+var_4]
.text$mn:0000686B                 mov     [edx+ecx-0Ch], eax
.text$mn:0000686F                 mov     esp, ebp
.text$mn:00006871                 pop     ebp
.text$mn:00006872                 retn
.text$mn:00006872 ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ endp
.text$mn:00006872
.text$mn:00006872 ; ---------------------------------------------------------------------------
.text$mn:00006873                 align 4
.text$mn:00006873 _text$mn        ends
.text$mn:00006873
.text$mn:00006874 ; ===========================================================================
.text$mn:00006874
.text$mn:00006874 ; Segment type: Pure code
.text$mn:00006874 ; Segment permissions: Read/Execute
.text$mn:00006874 _text$mn        segment para public 'CODE' use32
.text$mn:00006874                 assume cs:_text$mn
.text$mn:00006874                 ;org 6874h
.text$mn:00006874 ; COMDAT (pick any)
.text$mn:00006874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006874
.text$mn:00006874 ; =============== S U B R O U T I N E =======================================
.text$mn:00006874
.text$mn:00006874 ; Attributes: bp-based frame
.text$mn:00006874
.text$mn:00006874 ; public: virtual __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006874                 public ??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$mn:00006874 ??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ proc near
.text$mn:00006874                                         ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vbase destructor(void)+Dp
.text$mn:00006874
.text$mn:00006874 var_10          = dword ptr -10h
.text$mn:00006874 var_C           = dword ptr -0Ch
.text$mn:00006874 var_4           = dword ptr -4
.text$mn:00006874
.text$mn:00006874                 push    ebp
.text$mn:00006875                 mov     ebp, esp
.text$mn:00006877                 push    0FFFFFFFFh
.text$mn:00006879                 push    offset __ehhandler$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$mn:0000687E                 mov     eax, large fs:0
.text$mn:00006884                 push    eax
.text$mn:00006885                 push    ecx
.text$mn:00006886                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000688B                 xor     eax, ebp
.text$mn:0000688D                 push    eax
.text$mn:0000688E                 lea     eax, [ebp+var_C]
.text$mn:00006891                 mov     large fs:0, eax
.text$mn:00006897                 mov     [ebp+var_10], ecx
.text$mn:0000689A                 mov     eax, [ebp+var_10]
.text$mn:0000689D                 mov     ecx, [eax-50h]
.text$mn:000068A0                 mov     edx, [ecx+4]
.text$mn:000068A3                 mov     eax, [ebp+var_10]
.text$mn:000068A6                 mov     dword ptr [eax+edx-50h], offset ??_7?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'
.text$mn:000068AE                 mov     ecx, [ebp+var_10]
.text$mn:000068B1                 mov     edx, [ecx-50h]
.text$mn:000068B4                 mov     eax, [edx+4]
.text$mn:000068B7                 sub     eax, 50h ; 'P'
.text$mn:000068BA                 mov     ecx, [ebp+var_10]
.text$mn:000068BD                 mov     edx, [ecx-50h]
.text$mn:000068C0                 mov     ecx, [edx+4]
.text$mn:000068C3                 mov     edx, [ebp+var_10]
.text$mn:000068C6                 mov     [edx+ecx-54h], eax
.text$mn:000068CA                 mov     [ebp+var_4], 1
.text$mn:000068D1                 mov     byte ptr [ebp+var_4], 0
.text$mn:000068D5                 mov     ecx, [ebp+var_10]
.text$mn:000068D8                 sub     ecx, 4Ch ; 'L'
.text$mn:000068DB                 call    ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000068E0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000068E7                 mov     ecx, [ebp+var_10]
.text$mn:000068EA                 sub     ecx, 48h ; 'H'
.text$mn:000068ED                 call    ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::~basic_ostream<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:000068F2                 mov     ecx, [ebp+var_C]
.text$mn:000068F5                 mov     large fs:0, ecx
.text$mn:000068FC                 pop     ecx
.text$mn:000068FD                 mov     esp, ebp
.text$mn:000068FF                 pop     ebp
.text$mn:00006900                 retn
.text$mn:00006900 ??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ endp
.text$mn:00006900
.text$mn:00006900 ; ---------------------------------------------------------------------------
.text$mn:00006901                 align 4
.text$mn:00006901 _text$mn        ends
.text$mn:00006901
.text$x:00006904 ; ===========================================================================
.text$x:00006904
.text$x:00006904 ; Segment type: Pure code
.text$x:00006904 ; Segment permissions: Read/Execute
.text$x:00006904 _text$x         segment para public 'CODE' use32
.text$x:00006904                 assume cs:_text$x
.text$x:00006904                 ;org 6904h
.text$x:00006904 ; COMDAT (pick associative to section at 6874)
.text$x:00006904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006904
.text$x:00006904 ; =============== S U B R O U T I N E =======================================
.text$x:00006904
.text$x:00006904
.text$x:00006904 __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0 proc near
.text$x:00006904                                         ; DATA XREF: .xdata$x:0000DDDCo
.text$x:00006904                 mov     ecx, [ebp-10h]
.text$x:00006907                 sub     ecx, 48h ; 'H'
.text$x:0000690A                 jmp     ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::~basic_ostream<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:0000690A __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0 endp
.text$x:0000690A
.text$x:0000690F
.text$x:0000690F ; =============== S U B R O U T I N E =======================================
.text$x:0000690F
.text$x:0000690F
.text$x:0000690F __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$1 proc near
.text$x:0000690F                                         ; DATA XREF: .xdata$x:0000DDE4o
.text$x:0000690F                 mov     ecx, [ebp-10h]
.text$x:00006912                 sub     ecx, 4Ch ; 'L'
.text$x:00006915                 jmp     ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006915 __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$1 endp
.text$x:00006915
.text$x:0000691A
.text$x:0000691A ; =============== S U B R O U T I N E =======================================
.text$x:0000691A
.text$x:0000691A
.text$x:0000691A __ehhandler$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ proc near
.text$x:0000691A                                         ; DATA XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:0000691A
.text$x:0000691A arg_4           = dword ptr  8
.text$x:0000691A
.text$x:0000691A                 mov     edx, [esp+arg_4]
.text$x:0000691E                 lea     eax, [edx+0Ch]
.text$x:00006921                 mov     ecx, [edx-8]
.text$x:00006924                 xor     ecx, eax
.text$x:00006926                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000692B                 mov     eax, offset __ehfuncinfo$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$x:00006930                 jmp     ___CxxFrameHandler3
.text$x:00006930 __ehhandler$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ endp
.text$x:00006930
.text$x:00006930 ; ---------------------------------------------------------------------------
.text$x:00006935                 align 4
.text$x:00006935 _text$x         ends
.text$x:00006935
.text$mn:00006938 ; ===========================================================================
.text$mn:00006938
.text$mn:00006938 ; Segment type: Pure code
.text$mn:00006938 ; Segment permissions: Read/Execute
.text$mn:00006938 _text$mn        segment para public 'CODE' use32
.text$mn:00006938                 assume cs:_text$mn
.text$mn:00006938                 ;org 6938h
.text$mn:00006938 ; COMDAT (pick any)
.text$mn:00006938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006938
.text$mn:00006938 ; =============== S U B R O U T I N E =======================================
.text$mn:00006938
.text$mn:00006938 ; Attributes: bp-based frame
.text$mn:00006938
.text$mn:00006938 ; public: virtual __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::~basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>(void)
.text$mn:00006938                 public ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.text$mn:00006938 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ proc near
.text$mn:00006938                                         ; CODE XREF: __unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0+3j
.text$mn:00006938                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+48p ...
.text$mn:00006938
.text$mn:00006938 var_4           = dword ptr -4
.text$mn:00006938
.text$mn:00006938                 push    ebp
.text$mn:00006939                 mov     ebp, esp
.text$mn:0000693B                 push    ecx
.text$mn:0000693C                 mov     [ebp+var_4], ecx
.text$mn:0000693F                 mov     eax, [ebp+var_4]
.text$mn:00006942                 mov     dword ptr [eax], offset ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`vftable'
.text$mn:00006948                 mov     ecx, [ebp+var_4]
.text$mn:0000694B                 mov     edx, [ecx+34h]
.text$mn:0000694E                 push    edx             ; Memory
.text$mn:0000694F                 call    ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z ; std::_DebugHeapDelete<std::locale>(std::locale *)
.text$mn:00006954                 add     esp, 4
.text$mn:00006957                 mov     esp, ebp
.text$mn:00006959                 pop     ebp
.text$mn:0000695A                 retn
.text$mn:0000695A ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ endp
.text$mn:0000695A
.text$mn:0000695A ; ---------------------------------------------------------------------------
.text$mn:0000695B                 align 4
.text$mn:0000695B _text$mn        ends
.text$mn:0000695B
.text$mn:0000695C ; ===========================================================================
.text$mn:0000695C
.text$mn:0000695C ; Segment type: Pure code
.text$mn:0000695C ; Segment permissions: Read/Execute
.text$mn:0000695C _text$mn        segment para public 'CODE' use32
.text$mn:0000695C                 assume cs:_text$mn
.text$mn:0000695C                 ;org 695Ch
.text$mn:0000695C ; COMDAT (pick any)
.text$mn:0000695C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000695C
.text$mn:0000695C ; =============== S U B R O U T I N E =======================================
.text$mn:0000695C
.text$mn:0000695C ; Attributes: bp-based frame
.text$mn:0000695C
.text$mn:0000695C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:0000695C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000695C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:0000695C                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+8Ap
.text$mn:0000695C                                         ; __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0+3j ...
.text$mn:0000695C
.text$mn:0000695C var_10          = dword ptr -10h
.text$mn:0000695C var_C           = dword ptr -0Ch
.text$mn:0000695C var_4           = dword ptr -4
.text$mn:0000695C
.text$mn:0000695C                 push    ebp
.text$mn:0000695D                 mov     ebp, esp
.text$mn:0000695F                 push    0FFFFFFFFh
.text$mn:00006961                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00006966                 mov     eax, large fs:0
.text$mn:0000696C                 push    eax
.text$mn:0000696D                 push    ecx
.text$mn:0000696E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006973                 xor     eax, ebp
.text$mn:00006975                 push    eax
.text$mn:00006976                 lea     eax, [ebp+var_C]
.text$mn:00006979                 mov     large fs:0, eax
.text$mn:0000697F                 mov     [ebp+var_10], ecx
.text$mn:00006982                 mov     [ebp+var_4], 0
.text$mn:00006989                 push    0               ; Size
.text$mn:0000698B                 push    1               ; char
.text$mn:0000698D                 mov     ecx, [ebp+var_10]
.text$mn:00006990                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006995                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000699C                 mov     ecx, [ebp+var_10]
.text$mn:0000699F                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000069A4                 mov     ecx, [ebp+var_C]
.text$mn:000069A7                 mov     large fs:0, ecx
.text$mn:000069AE                 pop     ecx
.text$mn:000069AF                 mov     esp, ebp
.text$mn:000069B1                 pop     ebp
.text$mn:000069B2                 retn
.text$mn:000069B2 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000069B2
.text$mn:000069B2 ; ---------------------------------------------------------------------------
.text$mn:000069B3                 align 4
.text$mn:000069B3 _text$mn        ends
.text$mn:000069B3
.text$x:000069B4 ; ===========================================================================
.text$x:000069B4
.text$x:000069B4 ; Segment type: Pure code
.text$x:000069B4 ; Segment permissions: Read/Execute
.text$x:000069B4 _text$x         segment para public 'CODE' use32
.text$x:000069B4                 assume cs:_text$x
.text$x:000069B4                 ;org 69B4h
.text$x:000069B4 ; COMDAT (pick associative to section at 695C)
.text$x:000069B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000069B4
.text$x:000069B4 ; =============== S U B R O U T I N E =======================================
.text$x:000069B4
.text$x:000069B4
.text$x:000069B4 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000069B4                                         ; DATA XREF: .xdata$x:0000C9DCo
.text$x:000069B4                 mov     ecx, [ebp-10h]
.text$x:000069B7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000069B7 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000069B7
.text$x:000069BC
.text$x:000069BC ; =============== S U B R O U T I N E =======================================
.text$x:000069BC
.text$x:000069BC
.text$x:000069BC __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:000069BC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:000069BC
.text$x:000069BC arg_4           = dword ptr  8
.text$x:000069BC
.text$x:000069BC                 mov     edx, [esp+arg_4]
.text$x:000069C0                 lea     eax, [edx+0Ch]
.text$x:000069C3                 mov     ecx, [edx-8]
.text$x:000069C6                 xor     ecx, eax
.text$x:000069C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069CD                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:000069D2                 jmp     ___CxxFrameHandler3
.text$x:000069D2 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:000069D2
.text$x:000069D2 ; ---------------------------------------------------------------------------
.text$x:000069D7                 align 4
.text$x:000069D7 _text$x         ends
.text$x:000069D7
.text$mn:000069D8 ; ===========================================================================
.text$mn:000069D8
.text$mn:000069D8 ; Segment type: Pure code
.text$mn:000069D8 ; Segment permissions: Read/Execute
.text$mn:000069D8 _text$mn        segment para public 'CODE' use32
.text$mn:000069D8                 assume cs:_text$mn
.text$mn:000069D8                 ;org 69D8h
.text$mn:000069D8 ; COMDAT (pick any)
.text$mn:000069D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069D8
.text$mn:000069D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000069D8
.text$mn:000069D8 ; Attributes: bp-based frame
.text$mn:000069D8
.text$mn:000069D8 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000069D8                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000069D8 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000069D8                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+61p
.text$mn:000069D8                                         ; operator>>(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,TiXmlNode &)+81p ...
.text$mn:000069D8
.text$mn:000069D8 var_10          = dword ptr -10h
.text$mn:000069D8 var_C           = dword ptr -0Ch
.text$mn:000069D8 var_4           = dword ptr -4
.text$mn:000069D8
.text$mn:000069D8                 push    ebp
.text$mn:000069D9                 mov     ebp, esp
.text$mn:000069DB                 push    0FFFFFFFFh
.text$mn:000069DD                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000069E2                 mov     eax, large fs:0
.text$mn:000069E8                 push    eax
.text$mn:000069E9                 push    ecx
.text$mn:000069EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069EF                 xor     eax, ebp
.text$mn:000069F1                 push    eax
.text$mn:000069F2                 lea     eax, [ebp+var_C]
.text$mn:000069F5                 mov     large fs:0, eax
.text$mn:000069FB                 mov     [ebp+var_10], ecx
.text$mn:000069FE                 mov     [ebp+var_4], 0
.text$mn:00006A05                 push    0
.text$mn:00006A07                 push    1
.text$mn:00006A09                 mov     ecx, [ebp+var_10]
.text$mn:00006A0C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006A11                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A18                 mov     ecx, [ebp+var_10]
.text$mn:00006A1B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00006A20                 mov     ecx, [ebp+var_C]
.text$mn:00006A23                 mov     large fs:0, ecx
.text$mn:00006A2A                 pop     ecx
.text$mn:00006A2B                 mov     esp, ebp
.text$mn:00006A2D                 pop     ebp
.text$mn:00006A2E                 retn
.text$mn:00006A2E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00006A2E
.text$mn:00006A2E ; ---------------------------------------------------------------------------
.text$mn:00006A2F                 align 10h
.text$mn:00006A2F _text$mn        ends
.text$mn:00006A2F
.text$x:00006A30 ; ===========================================================================
.text$x:00006A30
.text$x:00006A30 ; Segment type: Pure code
.text$x:00006A30 ; Segment permissions: Read/Execute
.text$x:00006A30 _text$x         segment para public 'CODE' use32
.text$x:00006A30                 assume cs:_text$x
.text$x:00006A30                 ;org 6A30h
.text$x:00006A30 ; COMDAT (pick associative to section at 69D8)
.text$x:00006A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A30
.text$x:00006A30 ; =============== S U B R O U T I N E =======================================
.text$x:00006A30
.text$x:00006A30
.text$x:00006A30 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00006A30                                         ; DATA XREF: .xdata$x:0000D37Co
.text$x:00006A30                 mov     ecx, [ebp-10h]
.text$x:00006A33                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006A33 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00006A33
.text$x:00006A38
.text$x:00006A38 ; =============== S U B R O U T I N E =======================================
.text$x:00006A38
.text$x:00006A38
.text$x:00006A38 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00006A38                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00006A38
.text$x:00006A38 arg_4           = dword ptr  8
.text$x:00006A38
.text$x:00006A38                 mov     edx, [esp+arg_4]
.text$x:00006A3C                 lea     eax, [edx+0Ch]
.text$x:00006A3F                 mov     ecx, [edx-8]
.text$x:00006A42                 xor     ecx, eax
.text$x:00006A44                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A49                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00006A4E                 jmp     ___CxxFrameHandler3
.text$x:00006A4E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00006A4E
.text$x:00006A4E ; ---------------------------------------------------------------------------
.text$x:00006A53                 align 4
.text$x:00006A53 _text$x         ends
.text$x:00006A53
.text$mn:00006A54 ; ===========================================================================
.text$mn:00006A54
.text$mn:00006A54 ; Segment type: Pure code
.text$mn:00006A54 ; Segment permissions: Read/Execute
.text$mn:00006A54 _text$mn        segment para public 'CODE' use32
.text$mn:00006A54                 assume cs:_text$mn
.text$mn:00006A54                 ;org 6A54h
.text$mn:00006A54 ; COMDAT (pick any)
.text$mn:00006A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A54
.text$mn:00006A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A54
.text$mn:00006A54 ; Attributes: bp-based frame
.text$mn:00006A54
.text$mn:00006A54 ; public: virtual __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006A54                 public ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$mn:00006A54 ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ proc near
.text$mn:00006A54                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$2+6j
.text$mn:00006A54                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+67p ...
.text$mn:00006A54
.text$mn:00006A54 var_10          = dword ptr -10h
.text$mn:00006A54 var_C           = dword ptr -0Ch
.text$mn:00006A54 var_4           = dword ptr -4
.text$mn:00006A54
.text$mn:00006A54                 push    ebp
.text$mn:00006A55                 mov     ebp, esp
.text$mn:00006A57                 push    0FFFFFFFFh
.text$mn:00006A59                 push    offset __ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$mn:00006A5E                 mov     eax, large fs:0
.text$mn:00006A64                 push    eax
.text$mn:00006A65                 push    ecx
.text$mn:00006A66                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A6B                 xor     eax, ebp
.text$mn:00006A6D                 push    eax
.text$mn:00006A6E                 lea     eax, [ebp+var_C]
.text$mn:00006A71                 mov     large fs:0, eax
.text$mn:00006A77                 mov     [ebp+var_10], ecx
.text$mn:00006A7A                 mov     eax, [ebp+var_10]
.text$mn:00006A7D                 mov     dword ptr [eax], offset ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'
.text$mn:00006A83                 mov     [ebp+var_4], 0
.text$mn:00006A8A                 mov     ecx, [ebp+var_10]
.text$mn:00006A8D                 call    ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)
.text$mn:00006A92                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A99                 mov     ecx, [ebp+var_10]
.text$mn:00006A9C                 call    ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:00006AA1                 mov     ecx, [ebp+var_C]
.text$mn:00006AA4                 mov     large fs:0, ecx
.text$mn:00006AAB                 pop     ecx
.text$mn:00006AAC                 mov     esp, ebp
.text$mn:00006AAE                 pop     ebp
.text$mn:00006AAF                 retn
.text$mn:00006AAF ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ endp
.text$mn:00006AAF
.text$mn:00006AAF _text$mn        ends
.text$mn:00006AAF
.text$x:00006AB0 ; ===========================================================================
.text$x:00006AB0
.text$x:00006AB0 ; Segment type: Pure code
.text$x:00006AB0 ; Segment permissions: Read/Execute
.text$x:00006AB0 _text$x         segment para public 'CODE' use32
.text$x:00006AB0                 assume cs:_text$x
.text$x:00006AB0                 ;org 6AB0h
.text$x:00006AB0 ; COMDAT (pick associative to section at 6A54)
.text$x:00006AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AB0
.text$x:00006AB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006AB0
.text$x:00006AB0
.text$x:00006AB0 __unwindfunclet$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0 proc near
.text$x:00006AB0                                         ; DATA XREF: .xdata$x:0000DE68o
.text$x:00006AB0                 mov     ecx, [ebp-10h]
.text$x:00006AB3                 jmp     ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)
.text$x:00006AB3 __unwindfunclet$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0 endp
.text$x:00006AB3
.text$x:00006AB8
.text$x:00006AB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006AB8
.text$x:00006AB8
.text$x:00006AB8 __ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ proc near
.text$x:00006AB8                                         ; DATA XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00006AB8
.text$x:00006AB8 arg_4           = dword ptr  8
.text$x:00006AB8
.text$x:00006AB8                 mov     edx, [esp+arg_4]
.text$x:00006ABC                 lea     eax, [edx+0Ch]
.text$x:00006ABF                 mov     ecx, [edx-8]
.text$x:00006AC2                 xor     ecx, eax
.text$x:00006AC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AC9                 mov     eax, offset __ehfuncinfo$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.text$x:00006ACE                 jmp     ___CxxFrameHandler3
.text$x:00006ACE __ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ endp
.text$x:00006ACE
.text$x:00006ACE ; ---------------------------------------------------------------------------
.text$x:00006AD3                 align 4
.text$x:00006AD3 _text$x         ends
.text$x:00006AD3
.text$mn:00006AD4 ; ===========================================================================
.text$mn:00006AD4
.text$mn:00006AD4 ; Segment type: Pure code
.text$mn:00006AD4 ; Segment permissions: Read/Execute
.text$mn:00006AD4 _text$mn        segment para public 'CODE' use32
.text$mn:00006AD4                 assume cs:_text$mn
.text$mn:00006AD4                 ;org 6AD4h
.text$mn:00006AD4 ; COMDAT (pick any)
.text$mn:00006AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AD4
.text$mn:00006AD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AD4
.text$mn:00006AD4 ; Attributes: bp-based frame
.text$mn:00006AD4
.text$mn:00006AD4 ; protected: virtual __thiscall std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:00006AD4                 public ??1?$ctype@_W@std@@MAE@XZ
.text$mn:00006AD4 ??1?$ctype@_W@std@@MAE@XZ proc near     ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+Ap
.text$mn:00006AD4
.text$mn:00006AD4 var_10          = dword ptr -10h
.text$mn:00006AD4 var_C           = dword ptr -0Ch
.text$mn:00006AD4 var_4           = dword ptr -4
.text$mn:00006AD4
.text$mn:00006AD4                 push    ebp
.text$mn:00006AD5                 mov     ebp, esp
.text$mn:00006AD7                 push    0FFFFFFFFh
.text$mn:00006AD9                 push    offset __ehhandler$??1?$ctype@_W@std@@MAE@XZ
.text$mn:00006ADE                 mov     eax, large fs:0
.text$mn:00006AE4                 push    eax
.text$mn:00006AE5                 push    ecx
.text$mn:00006AE6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006AEB                 xor     eax, ebp
.text$mn:00006AED                 push    eax
.text$mn:00006AEE                 lea     eax, [ebp+var_C]
.text$mn:00006AF1                 mov     large fs:0, eax
.text$mn:00006AF7                 mov     [ebp+var_10], ecx
.text$mn:00006AFA                 mov     eax, [ebp+var_10]
.text$mn:00006AFD                 mov     dword ptr [eax], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:00006B03                 mov     [ebp+var_4], 0
.text$mn:00006B0A                 mov     ecx, [ebp+var_10]
.text$mn:00006B0D                 cmp     dword ptr [ecx+10h], 0
.text$mn:00006B11                 jz      short loc_6B22
.text$mn:00006B13                 mov     edx, [ebp+var_10]
.text$mn:00006B16                 mov     eax, [edx+0Ch]
.text$mn:00006B19                 push    eax             ; Memory
.text$mn:00006B1A                 call    _free
.text$mn:00006B1F                 add     esp, 4
.text$mn:00006B22
.text$mn:00006B22 loc_6B22:                               ; CODE XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+3Dj
.text$mn:00006B22                 mov     ecx, [ebp+var_10]
.text$mn:00006B25                 mov     edx, [ecx+14h]
.text$mn:00006B28                 push    edx             ; Memory
.text$mn:00006B29                 call    _free
.text$mn:00006B2E                 add     esp, 4
.text$mn:00006B31                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B38                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B3B                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:00006B40                 mov     ecx, [ebp+var_C]
.text$mn:00006B43                 mov     large fs:0, ecx
.text$mn:00006B4A                 pop     ecx
.text$mn:00006B4B                 mov     esp, ebp
.text$mn:00006B4D                 pop     ebp
.text$mn:00006B4E                 retn
.text$mn:00006B4E ??1?$ctype@_W@std@@MAE@XZ endp
.text$mn:00006B4E
.text$mn:00006B4E ; ---------------------------------------------------------------------------
.text$mn:00006B4F                 align 10h
.text$mn:00006B4F _text$mn        ends
.text$mn:00006B4F
.text$x:00006B50 ; ===========================================================================
.text$x:00006B50
.text$x:00006B50 ; Segment type: Pure code
.text$x:00006B50 ; Segment permissions: Read/Execute
.text$x:00006B50 _text$x         segment para public 'CODE' use32
.text$x:00006B50                 assume cs:_text$x
.text$x:00006B50                 ;org 6B50h
.text$x:00006B50 ; COMDAT (pick associative to section at 6AD4)
.text$x:00006B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B50
.text$x:00006B50 ; =============== S U B R O U T I N E =======================================
.text$x:00006B50
.text$x:00006B50
.text$x:00006B50 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 proc near
.text$x:00006B50                                         ; DATA XREF: .xdata$x:0000CD40o
.text$x:00006B50                 mov     ecx, [ebp-10h]  ; this
.text$x:00006B53                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:00006B53 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 endp
.text$x:00006B53
.text$x:00006B58
.text$x:00006B58 ; =============== S U B R O U T I N E =======================================
.text$x:00006B58
.text$x:00006B58
.text$x:00006B58 __ehhandler$??1?$ctype@_W@std@@MAE@XZ proc near
.text$x:00006B58                                         ; DATA XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+5o
.text$x:00006B58
.text$x:00006B58 arg_4           = dword ptr  8
.text$x:00006B58
.text$x:00006B58                 mov     edx, [esp+arg_4]
.text$x:00006B5C                 lea     eax, [edx+0Ch]
.text$x:00006B5F                 mov     ecx, [edx-8]
.text$x:00006B62                 xor     ecx, eax
.text$x:00006B64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B69                 mov     eax, offset __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ
.text$x:00006B6E                 jmp     ___CxxFrameHandler3
.text$x:00006B6E __ehhandler$??1?$ctype@_W@std@@MAE@XZ endp
.text$x:00006B6E
.text$x:00006B6E ; ---------------------------------------------------------------------------
.text$x:00006B73                 align 4
.text$x:00006B73 _text$x         ends
.text$x:00006B73
.text$mn:00006B74 ; ===========================================================================
.text$mn:00006B74
.text$mn:00006B74 ; Segment type: Pure code
.text$mn:00006B74 ; Segment permissions: Read/Execute
.text$mn:00006B74 _text$mn        segment para public 'CODE' use32
.text$mn:00006B74                 assume cs:_text$mn
.text$mn:00006B74                 ;org 6B74h
.text$mn:00006B74 ; COMDAT (pick any)
.text$mn:00006B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B74
.text$mn:00006B74 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B74
.text$mn:00006B74 ; Attributes: bp-based frame
.text$mn:00006B74
.text$mn:00006B74 ; _DWORD __thiscall TiXmlAttribute::~TiXmlAttribute(TiXmlAttribute *__hidden this)
.text$mn:00006B74                 public ??1TiXmlAttribute@@UAE@XZ
.text$mn:00006B74 ??1TiXmlAttribute@@UAE@XZ proc near     ; CODE XREF: TiXmlAttributeSet::~TiXmlAttributeSet(void)+7Bp
.text$mn:00006B74                                         ; __unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0+3j ...
.text$mn:00006B74
.text$mn:00006B74 var_10          = dword ptr -10h
.text$mn:00006B74 var_C           = dword ptr -0Ch
.text$mn:00006B74 var_4           = dword ptr -4
.text$mn:00006B74
.text$mn:00006B74                 push    ebp
.text$mn:00006B75                 mov     ebp, esp
.text$mn:00006B77                 push    0FFFFFFFFh
.text$mn:00006B79                 push    offset __ehhandler$??1TiXmlAttribute@@UAE@XZ
.text$mn:00006B7E                 mov     eax, large fs:0
.text$mn:00006B84                 push    eax
.text$mn:00006B85                 push    ecx
.text$mn:00006B86                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B8B                 xor     eax, ebp
.text$mn:00006B8D                 push    eax
.text$mn:00006B8E                 lea     eax, [ebp+var_C]
.text$mn:00006B91                 mov     large fs:0, eax
.text$mn:00006B97                 mov     [ebp+var_10], ecx
.text$mn:00006B9A                 mov     [ebp+var_4], 2
.text$mn:00006BA1                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006BA5                 mov     ecx, [ebp+var_10]
.text$mn:00006BA8                 add     ecx, 2Ch ; ','
.text$mn:00006BAB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006BB0                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006BB4                 mov     ecx, [ebp+var_10]
.text$mn:00006BB7                 add     ecx, 10h
.text$mn:00006BBA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006BBF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006BC6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006BC9                 call    ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$mn:00006BCE                 mov     ecx, [ebp+var_C]
.text$mn:00006BD1                 mov     large fs:0, ecx
.text$mn:00006BD8                 pop     ecx
.text$mn:00006BD9                 mov     esp, ebp
.text$mn:00006BDB                 pop     ebp
.text$mn:00006BDC                 retn
.text$mn:00006BDC ??1TiXmlAttribute@@UAE@XZ endp
.text$mn:00006BDC
.text$mn:00006BDC ; ---------------------------------------------------------------------------
.text$mn:00006BDD                 align 10h
.text$mn:00006BDD _text$mn        ends
.text$mn:00006BDD
.text$x:00006BE0 ; ===========================================================================
.text$x:00006BE0
.text$x:00006BE0 ; Segment type: Pure code
.text$x:00006BE0 ; Segment permissions: Read/Execute
.text$x:00006BE0 _text$x         segment para public 'CODE' use32
.text$x:00006BE0                 assume cs:_text$x
.text$x:00006BE0                 ;org 6BE0h
.text$x:00006BE0 ; COMDAT (pick associative to section at 6B74)
.text$x:00006BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006BE0
.text$x:00006BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00006BE0
.text$x:00006BE0
.text$x:00006BE0 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0 proc near
.text$x:00006BE0                                         ; DATA XREF: .xdata$x:0000DA30o
.text$x:00006BE0                 mov     ecx, [ebp-10h]  ; this
.text$x:00006BE3                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:00006BE3 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0 endp
.text$x:00006BE3
.text$x:00006BE8
.text$x:00006BE8 ; =============== S U B R O U T I N E =======================================
.text$x:00006BE8
.text$x:00006BE8
.text$x:00006BE8 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1 proc near
.text$x:00006BE8                                         ; DATA XREF: .xdata$x:0000DA38o
.text$x:00006BE8                 mov     ecx, [ebp-10h]
.text$x:00006BEB                 add     ecx, 10h
.text$x:00006BEE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006BEE __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1 endp
.text$x:00006BEE
.text$x:00006BF3
.text$x:00006BF3 ; =============== S U B R O U T I N E =======================================
.text$x:00006BF3
.text$x:00006BF3
.text$x:00006BF3 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2 proc near
.text$x:00006BF3                                         ; DATA XREF: .xdata$x:0000DA40o
.text$x:00006BF3                 mov     ecx, [ebp-10h]
.text$x:00006BF6                 add     ecx, 2Ch ; ','
.text$x:00006BF9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006BF9 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2 endp
.text$x:00006BF9
.text$x:00006BFE
.text$x:00006BFE ; =============== S U B R O U T I N E =======================================
.text$x:00006BFE
.text$x:00006BFE
.text$x:00006BFE __ehhandler$??1TiXmlAttribute@@UAE@XZ proc near
.text$x:00006BFE                                         ; DATA XREF: TiXmlAttribute::~TiXmlAttribute(void)+5o
.text$x:00006BFE
.text$x:00006BFE arg_4           = dword ptr  8
.text$x:00006BFE
.text$x:00006BFE                 mov     edx, [esp+arg_4]
.text$x:00006C02                 lea     eax, [edx+0Ch]
.text$x:00006C05                 mov     ecx, [edx-8]
.text$x:00006C08                 xor     ecx, eax
.text$x:00006C0A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C0F                 mov     eax, offset __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ
.text$x:00006C14                 jmp     ___CxxFrameHandler3
.text$x:00006C14 __ehhandler$??1TiXmlAttribute@@UAE@XZ endp
.text$x:00006C14
.text$x:00006C14 ; ---------------------------------------------------------------------------
.text$x:00006C19                 align 4
.text$x:00006C19 _text$x         ends
.text$x:00006C19
.text$mn:00006C1C ; ===========================================================================
.text$mn:00006C1C
.text$mn:00006C1C ; Segment type: Pure code
.text$mn:00006C1C ; Segment permissions: Read/Execute
.text$mn:00006C1C _text$mn        segment para public 'CODE' use32
.text$mn:00006C1C                 assume cs:_text$mn
.text$mn:00006C1C                 ;org 6C1Ch
.text$mn:00006C1C ; COMDAT (pick any)
.text$mn:00006C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C1C
.text$mn:00006C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C1C
.text$mn:00006C1C ; Attributes: bp-based frame
.text$mn:00006C1C
.text$mn:00006C1C ; _DWORD __thiscall TiXmlBase::~TiXmlBase(TiXmlBase *__hidden this)
.text$mn:00006C1C                 public ??1TiXmlBase@@UAE@XZ
.text$mn:00006C1C ??1TiXmlBase@@UAE@XZ proc near          ; CODE XREF: TiXmlNode::~TiXmlNode(void)+A4p
.text$mn:00006C1C                                         ; __unwindfunclet$??1TiXmlNode@@UAE@XZ$0+3j ...
.text$mn:00006C1C
.text$mn:00006C1C var_4           = dword ptr -4
.text$mn:00006C1C
.text$mn:00006C1C                 push    ebp
.text$mn:00006C1D                 mov     ebp, esp
.text$mn:00006C1F                 push    ecx
.text$mn:00006C20                 mov     [ebp+var_4], ecx
.text$mn:00006C23                 mov     eax, [ebp+var_4]
.text$mn:00006C26                 mov     dword ptr [eax], offset ??_7TiXmlBase@@6B@ ; const TiXmlBase::`vftable'
.text$mn:00006C2C                 mov     esp, ebp
.text$mn:00006C2E                 pop     ebp
.text$mn:00006C2F                 retn
.text$mn:00006C2F ??1TiXmlBase@@UAE@XZ endp
.text$mn:00006C2F
.text$mn:00006C2F _text$mn        ends
.text$mn:00006C2F
.text$mn:00006C30 ; ===========================================================================
.text$mn:00006C30
.text$mn:00006C30 ; Segment type: Pure code
.text$mn:00006C30 ; Segment permissions: Read/Execute
.text$mn:00006C30 _text$mn        segment para public 'CODE' use32
.text$mn:00006C30                 assume cs:_text$mn
.text$mn:00006C30                 ;org 6C30h
.text$mn:00006C30 ; COMDAT (pick any)
.text$mn:00006C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C30
.text$mn:00006C30 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C30
.text$mn:00006C30 ; Attributes: bp-based frame
.text$mn:00006C30
.text$mn:00006C30 ; _DWORD __thiscall TiXmlComment::~TiXmlComment(TiXmlComment *__hidden this)
.text$mn:00006C30                 public ??1TiXmlComment@@UAE@XZ
.text$mn:00006C30 ??1TiXmlComment@@UAE@XZ proc near       ; CODE XREF: TiXmlComment::`scalar deleting destructor'(uint)+Ap
.text$mn:00006C30
.text$mn:00006C30 var_10          = dword ptr -10h
.text$mn:00006C30 var_C           = dword ptr -0Ch
.text$mn:00006C30 var_4           = dword ptr -4
.text$mn:00006C30
.text$mn:00006C30                 push    ebp
.text$mn:00006C31                 mov     ebp, esp
.text$mn:00006C33                 push    0FFFFFFFFh
.text$mn:00006C35                 push    offset __ehhandler$??1TiXmlComment@@UAE@XZ
.text$mn:00006C3A                 mov     eax, large fs:0
.text$mn:00006C40                 push    eax
.text$mn:00006C41                 push    ecx
.text$mn:00006C42                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C47                 xor     eax, ebp
.text$mn:00006C49                 push    eax
.text$mn:00006C4A                 lea     eax, [ebp+var_C]
.text$mn:00006C4D                 mov     large fs:0, eax
.text$mn:00006C53                 mov     [ebp+var_10], ecx
.text$mn:00006C56                 mov     eax, [ebp+var_10]
.text$mn:00006C59                 mov     dword ptr [eax], offset ??_7TiXmlComment@@6B@ ; const TiXmlComment::`vftable'
.text$mn:00006C5F                 mov     [ebp+var_4], 0
.text$mn:00006C66                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C6D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C70                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00006C75                 mov     ecx, [ebp+var_C]
.text$mn:00006C78                 mov     large fs:0, ecx
.text$mn:00006C7F                 pop     ecx
.text$mn:00006C80                 mov     esp, ebp
.text$mn:00006C82                 pop     ebp
.text$mn:00006C83                 retn
.text$mn:00006C83 ??1TiXmlComment@@UAE@XZ endp
.text$mn:00006C83
.text$mn:00006C83 _text$mn        ends
.text$mn:00006C83
.text$x:00006C84 ; ===========================================================================
.text$x:00006C84
.text$x:00006C84 ; Segment type: Pure code
.text$x:00006C84 ; Segment permissions: Read/Execute
.text$x:00006C84 _text$x         segment para public 'CODE' use32
.text$x:00006C84                 assume cs:_text$x
.text$x:00006C84                 ;org 6C84h
.text$x:00006C84 ; COMDAT (pick associative to section at 6C30)
.text$x:00006C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C84
.text$x:00006C84 ; =============== S U B R O U T I N E =======================================
.text$x:00006C84
.text$x:00006C84
.text$x:00006C84 __unwindfunclet$??1TiXmlComment@@UAE@XZ$0 proc near
.text$x:00006C84                                         ; DATA XREF: .xdata$x:0000DA98o
.text$x:00006C84                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C87                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00006C87 __unwindfunclet$??1TiXmlComment@@UAE@XZ$0 endp
.text$x:00006C87
.text$x:00006C8C
.text$x:00006C8C ; =============== S U B R O U T I N E =======================================
.text$x:00006C8C
.text$x:00006C8C
.text$x:00006C8C __ehhandler$??1TiXmlComment@@UAE@XZ proc near
.text$x:00006C8C                                         ; DATA XREF: TiXmlComment::~TiXmlComment(void)+5o
.text$x:00006C8C
.text$x:00006C8C arg_4           = dword ptr  8
.text$x:00006C8C
.text$x:00006C8C                 mov     edx, [esp+arg_4]
.text$x:00006C90                 lea     eax, [edx+0Ch]
.text$x:00006C93                 mov     ecx, [edx-8]
.text$x:00006C96                 xor     ecx, eax
.text$x:00006C98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C9D                 mov     eax, offset __ehfuncinfo$??1TiXmlComment@@UAE@XZ
.text$x:00006CA2                 jmp     ___CxxFrameHandler3
.text$x:00006CA2 __ehhandler$??1TiXmlComment@@UAE@XZ endp
.text$x:00006CA2
.text$x:00006CA2 ; ---------------------------------------------------------------------------
.text$x:00006CA7                 align 4
.text$x:00006CA7 _text$x         ends
.text$x:00006CA7
.text$mn:00006CA8 ; ===========================================================================
.text$mn:00006CA8
.text$mn:00006CA8 ; Segment type: Pure code
.text$mn:00006CA8 ; Segment permissions: Read/Execute
.text$mn:00006CA8 _text$mn        segment para public 'CODE' use32
.text$mn:00006CA8                 assume cs:_text$mn
.text$mn:00006CA8                 ;org 6CA8h
.text$mn:00006CA8 ; COMDAT (pick any)
.text$mn:00006CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CA8
.text$mn:00006CA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CA8
.text$mn:00006CA8 ; Attributes: bp-based frame
.text$mn:00006CA8
.text$mn:00006CA8 ; _DWORD __thiscall TiXmlDeclaration::~TiXmlDeclaration(TiXmlDeclaration *__hidden this)
.text$mn:00006CA8                 public ??1TiXmlDeclaration@@UAE@XZ
.text$mn:00006CA8 ??1TiXmlDeclaration@@UAE@XZ proc near   ; CODE XREF: TiXmlDeclaration::`scalar deleting destructor'(uint)+Ap
.text$mn:00006CA8
.text$mn:00006CA8 var_10          = dword ptr -10h
.text$mn:00006CA8 var_C           = dword ptr -0Ch
.text$mn:00006CA8 var_4           = dword ptr -4
.text$mn:00006CA8
.text$mn:00006CA8                 push    ebp
.text$mn:00006CA9                 mov     ebp, esp
.text$mn:00006CAB                 push    0FFFFFFFFh
.text$mn:00006CAD                 push    offset __ehhandler$??1TiXmlDeclaration@@UAE@XZ
.text$mn:00006CB2                 mov     eax, large fs:0
.text$mn:00006CB8                 push    eax
.text$mn:00006CB9                 push    ecx
.text$mn:00006CBA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CBF                 xor     eax, ebp
.text$mn:00006CC1                 push    eax
.text$mn:00006CC2                 lea     eax, [ebp+var_C]
.text$mn:00006CC5                 mov     large fs:0, eax
.text$mn:00006CCB                 mov     [ebp+var_10], ecx
.text$mn:00006CCE                 mov     eax, [ebp+var_10]
.text$mn:00006CD1                 mov     dword ptr [eax], offset ??_7TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`vftable'
.text$mn:00006CD7                 mov     [ebp+var_4], 3
.text$mn:00006CDE                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006CE2                 mov     ecx, [ebp+var_10]
.text$mn:00006CE5                 add     ecx, 7Ch ; '|'
.text$mn:00006CE8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006CED                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006CF1                 mov     ecx, [ebp+var_10]
.text$mn:00006CF4                 add     ecx, 60h ; '`'
.text$mn:00006CF7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006CFC                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006D00                 mov     ecx, [ebp+var_10]
.text$mn:00006D03                 add     ecx, 44h ; 'D'
.text$mn:00006D06                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006D0B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D12                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006D15                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00006D1A                 mov     ecx, [ebp+var_C]
.text$mn:00006D1D                 mov     large fs:0, ecx
.text$mn:00006D24                 pop     ecx
.text$mn:00006D25                 mov     esp, ebp
.text$mn:00006D27                 pop     ebp
.text$mn:00006D28                 retn
.text$mn:00006D28 ??1TiXmlDeclaration@@UAE@XZ endp
.text$mn:00006D28
.text$mn:00006D28 ; ---------------------------------------------------------------------------
.text$mn:00006D29                 align 4
.text$mn:00006D29 _text$mn        ends
.text$mn:00006D29
.text$x:00006D2C ; ===========================================================================
.text$x:00006D2C
.text$x:00006D2C ; Segment type: Pure code
.text$x:00006D2C ; Segment permissions: Read/Execute
.text$x:00006D2C _text$x         segment para public 'CODE' use32
.text$x:00006D2C                 assume cs:_text$x
.text$x:00006D2C                 ;org 6D2Ch
.text$x:00006D2C ; COMDAT (pick associative to section at 6CA8)
.text$x:00006D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D2C
.text$x:00006D2C ; =============== S U B R O U T I N E =======================================
.text$x:00006D2C
.text$x:00006D2C
.text$x:00006D2C __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0 proc near
.text$x:00006D2C                                         ; DATA XREF: .xdata$x:0000DB60o
.text$x:00006D2C                 mov     ecx, [ebp-10h]  ; this
.text$x:00006D2F                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00006D2F __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0 endp
.text$x:00006D2F
.text$x:00006D34
.text$x:00006D34 ; =============== S U B R O U T I N E =======================================
.text$x:00006D34
.text$x:00006D34
.text$x:00006D34 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1 proc near
.text$x:00006D34                                         ; DATA XREF: .xdata$x:0000DB68o
.text$x:00006D34                 mov     ecx, [ebp-10h]
.text$x:00006D37                 add     ecx, 44h ; 'D'
.text$x:00006D3A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006D3A __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1 endp
.text$x:00006D3A
.text$x:00006D3F
.text$x:00006D3F ; =============== S U B R O U T I N E =======================================
.text$x:00006D3F
.text$x:00006D3F
.text$x:00006D3F __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2 proc near
.text$x:00006D3F                                         ; DATA XREF: .xdata$x:0000DB70o
.text$x:00006D3F                 mov     ecx, [ebp-10h]
.text$x:00006D42                 add     ecx, 60h ; '`'
.text$x:00006D45                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006D45 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2 endp
.text$x:00006D45
.text$x:00006D4A
.text$x:00006D4A ; =============== S U B R O U T I N E =======================================
.text$x:00006D4A
.text$x:00006D4A
.text$x:00006D4A __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3 proc near
.text$x:00006D4A                                         ; DATA XREF: .xdata$x:0000DB78o
.text$x:00006D4A                 mov     ecx, [ebp-10h]
.text$x:00006D4D                 add     ecx, 7Ch ; '|'
.text$x:00006D50                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006D50 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3 endp
.text$x:00006D50
.text$x:00006D55
.text$x:00006D55 ; =============== S U B R O U T I N E =======================================
.text$x:00006D55
.text$x:00006D55
.text$x:00006D55 __ehhandler$??1TiXmlDeclaration@@UAE@XZ proc near
.text$x:00006D55                                         ; DATA XREF: TiXmlDeclaration::~TiXmlDeclaration(void)+5o
.text$x:00006D55
.text$x:00006D55 arg_4           = dword ptr  8
.text$x:00006D55
.text$x:00006D55                 mov     edx, [esp+arg_4]
.text$x:00006D59                 lea     eax, [edx+0Ch]
.text$x:00006D5C                 mov     ecx, [edx-8]
.text$x:00006D5F                 xor     ecx, eax
.text$x:00006D61                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D66                 mov     eax, offset __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ
.text$x:00006D6B                 jmp     ___CxxFrameHandler3
.text$x:00006D6B __ehhandler$??1TiXmlDeclaration@@UAE@XZ endp
.text$x:00006D6B
.text$x:00006D6B _text$x         ends
.text$x:00006D6B
.text$mn:00006D70 ; ===========================================================================
.text$mn:00006D70
.text$mn:00006D70 ; Segment type: Pure code
.text$mn:00006D70 ; Segment permissions: Read/Execute
.text$mn:00006D70 _text$mn        segment para public 'CODE' use32
.text$mn:00006D70                 assume cs:_text$mn
.text$mn:00006D70                 ;org 6D70h
.text$mn:00006D70 ; COMDAT (pick any)
.text$mn:00006D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D70
.text$mn:00006D70 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D70
.text$mn:00006D70 ; Attributes: bp-based frame
.text$mn:00006D70
.text$mn:00006D70 ; _DWORD __thiscall TiXmlDocument::~TiXmlDocument(TiXmlDocument *__hidden this)
.text$mn:00006D70                 public ??1TiXmlDocument@@UAE@XZ
.text$mn:00006D70 ??1TiXmlDocument@@UAE@XZ proc near      ; CODE XREF: TiXmlDocument::`scalar deleting destructor'(uint)+Ap
.text$mn:00006D70
.text$mn:00006D70 var_10          = dword ptr -10h
.text$mn:00006D70 var_C           = dword ptr -0Ch
.text$mn:00006D70 var_4           = dword ptr -4
.text$mn:00006D70
.text$mn:00006D70                 push    ebp
.text$mn:00006D71                 mov     ebp, esp
.text$mn:00006D73                 push    0FFFFFFFFh
.text$mn:00006D75                 push    offset __ehhandler$??1TiXmlDocument@@UAE@XZ
.text$mn:00006D7A                 mov     eax, large fs:0
.text$mn:00006D80                 push    eax
.text$mn:00006D81                 push    ecx
.text$mn:00006D82                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D87                 xor     eax, ebp
.text$mn:00006D89                 push    eax
.text$mn:00006D8A                 lea     eax, [ebp+var_C]
.text$mn:00006D8D                 mov     large fs:0, eax
.text$mn:00006D93                 mov     [ebp+var_10], ecx
.text$mn:00006D96                 mov     eax, [ebp+var_10]
.text$mn:00006D99                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:00006D9F                 mov     [ebp+var_4], 1
.text$mn:00006DA6                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006DAA                 mov     ecx, [ebp+var_10]
.text$mn:00006DAD                 add     ecx, 4Ch ; 'L'
.text$mn:00006DB0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006DB5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006DBC                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006DBF                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00006DC4                 mov     ecx, [ebp+var_C]
.text$mn:00006DC7                 mov     large fs:0, ecx
.text$mn:00006DCE                 pop     ecx
.text$mn:00006DCF                 mov     esp, ebp
.text$mn:00006DD1                 pop     ebp
.text$mn:00006DD2                 retn
.text$mn:00006DD2 ??1TiXmlDocument@@UAE@XZ endp
.text$mn:00006DD2
.text$mn:00006DD2 ; ---------------------------------------------------------------------------
.text$mn:00006DD3                 align 4
.text$mn:00006DD3 _text$mn        ends
.text$mn:00006DD3
.text$x:00006DD4 ; ===========================================================================
.text$x:00006DD4
.text$x:00006DD4 ; Segment type: Pure code
.text$x:00006DD4 ; Segment permissions: Read/Execute
.text$x:00006DD4 _text$x         segment para public 'CODE' use32
.text$x:00006DD4                 assume cs:_text$x
.text$x:00006DD4                 ;org 6DD4h
.text$x:00006DD4 ; COMDAT (pick associative to section at 6D70)
.text$x:00006DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DD4
.text$x:00006DD4 ; =============== S U B R O U T I N E =======================================
.text$x:00006DD4
.text$x:00006DD4
.text$x:00006DD4 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 proc near
.text$x:00006DD4                                         ; DATA XREF: .xdata$x:0000DBFCo
.text$x:00006DD4                 mov     ecx, [ebp-10h]  ; this
.text$x:00006DD7                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00006DD7 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 endp
.text$x:00006DD7
.text$x:00006DDC
.text$x:00006DDC ; =============== S U B R O U T I N E =======================================
.text$x:00006DDC
.text$x:00006DDC
.text$x:00006DDC __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 proc near
.text$x:00006DDC                                         ; DATA XREF: .xdata$x:0000DC04o
.text$x:00006DDC                 mov     ecx, [ebp-10h]
.text$x:00006DDF                 add     ecx, 4Ch ; 'L'
.text$x:00006DE2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006DE2 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 endp
.text$x:00006DE2
.text$x:00006DE7
.text$x:00006DE7 ; =============== S U B R O U T I N E =======================================
.text$x:00006DE7
.text$x:00006DE7
.text$x:00006DE7 __ehhandler$??1TiXmlDocument@@UAE@XZ proc near
.text$x:00006DE7                                         ; DATA XREF: TiXmlDocument::~TiXmlDocument(void)+5o
.text$x:00006DE7
.text$x:00006DE7 arg_4           = dword ptr  8
.text$x:00006DE7
.text$x:00006DE7                 mov     edx, [esp+arg_4]
.text$x:00006DEB                 lea     eax, [edx+0Ch]
.text$x:00006DEE                 mov     ecx, [edx-8]
.text$x:00006DF1                 xor     ecx, eax
.text$x:00006DF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006DF8                 mov     eax, offset __ehfuncinfo$??1TiXmlDocument@@UAE@XZ
.text$x:00006DFD                 jmp     ___CxxFrameHandler3
.text$x:00006DFD __ehhandler$??1TiXmlDocument@@UAE@XZ endp
.text$x:00006DFD
.text$x:00006DFD ; ---------------------------------------------------------------------------
.text$x:00006E02                 align 4
.text$x:00006E02 _text$x         ends
.text$x:00006E02
.text$mn:00006E04 ; ===========================================================================
.text$mn:00006E04
.text$mn:00006E04 ; Segment type: Pure code
.text$mn:00006E04 ; Segment permissions: Read/Execute
.text$mn:00006E04 _text$mn        segment para public 'CODE' use32
.text$mn:00006E04                 assume cs:_text$mn
.text$mn:00006E04                 ;org 6E04h
.text$mn:00006E04 ; COMDAT (pick any)
.text$mn:00006E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E04
.text$mn:00006E04 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E04
.text$mn:00006E04 ; Attributes: bp-based frame
.text$mn:00006E04
.text$mn:00006E04 ; _DWORD __thiscall TiXmlText::~TiXmlText(TiXmlText *__hidden this)
.text$mn:00006E04                 public ??1TiXmlText@@UAE@XZ
.text$mn:00006E04 ??1TiXmlText@@UAE@XZ proc near          ; CODE XREF: TiXmlText::`scalar deleting destructor'(uint)+Ap
.text$mn:00006E04
.text$mn:00006E04 var_10          = dword ptr -10h
.text$mn:00006E04 var_C           = dword ptr -0Ch
.text$mn:00006E04 var_4           = dword ptr -4
.text$mn:00006E04
.text$mn:00006E04                 push    ebp
.text$mn:00006E05                 mov     ebp, esp
.text$mn:00006E07                 push    0FFFFFFFFh
.text$mn:00006E09                 push    offset __ehhandler$??1TiXmlText@@UAE@XZ
.text$mn:00006E0E                 mov     eax, large fs:0
.text$mn:00006E14                 push    eax
.text$mn:00006E15                 push    ecx
.text$mn:00006E16                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E1B                 xor     eax, ebp
.text$mn:00006E1D                 push    eax
.text$mn:00006E1E                 lea     eax, [ebp+var_C]
.text$mn:00006E21                 mov     large fs:0, eax
.text$mn:00006E27                 mov     [ebp+var_10], ecx
.text$mn:00006E2A                 mov     eax, [ebp+var_10]
.text$mn:00006E2D                 mov     dword ptr [eax], offset ??_7TiXmlText@@6B@ ; const TiXmlText::`vftable'
.text$mn:00006E33                 mov     [ebp+var_4], 0
.text$mn:00006E3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E41                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006E44                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00006E49                 mov     ecx, [ebp+var_C]
.text$mn:00006E4C                 mov     large fs:0, ecx
.text$mn:00006E53                 pop     ecx
.text$mn:00006E54                 mov     esp, ebp
.text$mn:00006E56                 pop     ebp
.text$mn:00006E57                 retn
.text$mn:00006E57 ??1TiXmlText@@UAE@XZ endp
.text$mn:00006E57
.text$mn:00006E57 _text$mn        ends
.text$mn:00006E57
.text$x:00006E58 ; ===========================================================================
.text$x:00006E58
.text$x:00006E58 ; Segment type: Pure code
.text$x:00006E58 ; Segment permissions: Read/Execute
.text$x:00006E58 _text$x         segment para public 'CODE' use32
.text$x:00006E58                 assume cs:_text$x
.text$x:00006E58                 ;org 6E58h
.text$x:00006E58 ; COMDAT (pick associative to section at 6E04)
.text$x:00006E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E58
.text$x:00006E58 ; =============== S U B R O U T I N E =======================================
.text$x:00006E58
.text$x:00006E58
.text$x:00006E58 __unwindfunclet$??1TiXmlText@@UAE@XZ$0 proc near
.text$x:00006E58                                         ; DATA XREF: .xdata$x:0000DAF0o
.text$x:00006E58                 mov     ecx, [ebp-10h]  ; this
.text$x:00006E5B                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00006E5B __unwindfunclet$??1TiXmlText@@UAE@XZ$0 endp
.text$x:00006E5B
.text$x:00006E60
.text$x:00006E60 ; =============== S U B R O U T I N E =======================================
.text$x:00006E60
.text$x:00006E60
.text$x:00006E60 __ehhandler$??1TiXmlText@@UAE@XZ proc near
.text$x:00006E60                                         ; DATA XREF: TiXmlText::~TiXmlText(void)+5o
.text$x:00006E60
.text$x:00006E60 arg_4           = dword ptr  8
.text$x:00006E60
.text$x:00006E60                 mov     edx, [esp+arg_4]
.text$x:00006E64                 lea     eax, [edx+0Ch]
.text$x:00006E67                 mov     ecx, [edx-8]
.text$x:00006E6A                 xor     ecx, eax
.text$x:00006E6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E71                 mov     eax, offset __ehfuncinfo$??1TiXmlText@@UAE@XZ
.text$x:00006E76                 jmp     ___CxxFrameHandler3
.text$x:00006E76 __ehhandler$??1TiXmlText@@UAE@XZ endp
.text$x:00006E76
.text$x:00006E76 ; ---------------------------------------------------------------------------
.text$x:00006E7B                 align 4
.text$x:00006E7B _text$x         ends
.text$x:00006E7B
.text$mn:00006E7C ; ===========================================================================
.text$mn:00006E7C
.text$mn:00006E7C ; Segment type: Pure code
.text$mn:00006E7C ; Segment permissions: Read/Execute
.text$mn:00006E7C _text$mn        segment para public 'CODE' use32
.text$mn:00006E7C                 assume cs:_text$mn
.text$mn:00006E7C                 ;org 6E7Ch
.text$mn:00006E7C ; COMDAT (pick any)
.text$mn:00006E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E7C
.text$mn:00006E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E7C
.text$mn:00006E7C ; Attributes: bp-based frame
.text$mn:00006E7C
.text$mn:00006E7C ; _DWORD __thiscall TiXmlUnknown::~TiXmlUnknown(TiXmlUnknown *__hidden this)
.text$mn:00006E7C                 public ??1TiXmlUnknown@@UAE@XZ
.text$mn:00006E7C ??1TiXmlUnknown@@UAE@XZ proc near       ; CODE XREF: TiXmlUnknown::`scalar deleting destructor'(uint)+Ap
.text$mn:00006E7C
.text$mn:00006E7C var_10          = dword ptr -10h
.text$mn:00006E7C var_C           = dword ptr -0Ch
.text$mn:00006E7C var_4           = dword ptr -4
.text$mn:00006E7C
.text$mn:00006E7C                 push    ebp
.text$mn:00006E7D                 mov     ebp, esp
.text$mn:00006E7F                 push    0FFFFFFFFh
.text$mn:00006E81                 push    offset __ehhandler$??1TiXmlUnknown@@UAE@XZ
.text$mn:00006E86                 mov     eax, large fs:0
.text$mn:00006E8C                 push    eax
.text$mn:00006E8D                 push    ecx
.text$mn:00006E8E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E93                 xor     eax, ebp
.text$mn:00006E95                 push    eax
.text$mn:00006E96                 lea     eax, [ebp+var_C]
.text$mn:00006E99                 mov     large fs:0, eax
.text$mn:00006E9F                 mov     [ebp+var_10], ecx
.text$mn:00006EA2                 mov     eax, [ebp+var_10]
.text$mn:00006EA5                 mov     dword ptr [eax], offset ??_7TiXmlUnknown@@6B@ ; const TiXmlUnknown::`vftable'
.text$mn:00006EAB                 mov     [ebp+var_4], 0
.text$mn:00006EB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006EB9                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006EBC                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00006EC1                 mov     ecx, [ebp+var_C]
.text$mn:00006EC4                 mov     large fs:0, ecx
.text$mn:00006ECB                 pop     ecx
.text$mn:00006ECC                 mov     esp, ebp
.text$mn:00006ECE                 pop     ebp
.text$mn:00006ECF                 retn
.text$mn:00006ECF ??1TiXmlUnknown@@UAE@XZ endp
.text$mn:00006ECF
.text$mn:00006ECF _text$mn        ends
.text$mn:00006ECF
.text$x:00006ED0 ; ===========================================================================
.text$x:00006ED0
.text$x:00006ED0 ; Segment type: Pure code
.text$x:00006ED0 ; Segment permissions: Read/Execute
.text$x:00006ED0 _text$x         segment para public 'CODE' use32
.text$x:00006ED0                 assume cs:_text$x
.text$x:00006ED0                 ;org 6ED0h
.text$x:00006ED0 ; COMDAT (pick associative to section at 6E7C)
.text$x:00006ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006ED0
.text$x:00006ED0 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED0
.text$x:00006ED0
.text$x:00006ED0 __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0 proc near
.text$x:00006ED0                                         ; DATA XREF: .xdata$x:0000DBD0o
.text$x:00006ED0                 mov     ecx, [ebp-10h]  ; this
.text$x:00006ED3                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00006ED3 __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0 endp
.text$x:00006ED3
.text$x:00006ED8
.text$x:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED8
.text$x:00006ED8
.text$x:00006ED8 __ehhandler$??1TiXmlUnknown@@UAE@XZ proc near
.text$x:00006ED8                                         ; DATA XREF: TiXmlUnknown::~TiXmlUnknown(void)+5o
.text$x:00006ED8
.text$x:00006ED8 arg_4           = dword ptr  8
.text$x:00006ED8
.text$x:00006ED8                 mov     edx, [esp+arg_4]
.text$x:00006EDC                 lea     eax, [edx+0Ch]
.text$x:00006EDF                 mov     ecx, [edx-8]
.text$x:00006EE2                 xor     ecx, eax
.text$x:00006EE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006EE9                 mov     eax, offset __ehfuncinfo$??1TiXmlUnknown@@UAE@XZ
.text$x:00006EEE                 jmp     ___CxxFrameHandler3
.text$x:00006EEE __ehhandler$??1TiXmlUnknown@@UAE@XZ endp
.text$x:00006EEE
.text$x:00006EEE ; ---------------------------------------------------------------------------
.text$x:00006EF3                 align 4
.text$x:00006EF3 _text$x         ends
.text$x:00006EF3
.text$mn:00006EF4 ; ===========================================================================
.text$mn:00006EF4
.text$mn:00006EF4 ; Segment type: Pure code
.text$mn:00006EF4 ; Segment permissions: Read/Execute
.text$mn:00006EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00006EF4                 assume cs:_text$mn
.text$mn:00006EF4                 ;org 6EF4h
.text$mn:00006EF4 ; COMDAT (pick any)
.text$mn:00006EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EF4
.text$mn:00006EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006EF4
.text$mn:00006EF4 ; Attributes: bp-based frame
.text$mn:00006EF4
.text$mn:00006EF4 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00006EF4                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00006EF4 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00006EF4                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00006EF4                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00006EF4
.text$mn:00006EF4 var_4           = dword ptr -4
.text$mn:00006EF4
.text$mn:00006EF4                 push    ebp
.text$mn:00006EF5                 mov     ebp, esp
.text$mn:00006EF7                 push    ecx
.text$mn:00006EF8                 mov     [ebp+var_4], ecx
.text$mn:00006EFB                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006EFE                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006F03                 mov     esp, ebp
.text$mn:00006F05                 pop     ebp
.text$mn:00006F06                 retn
.text$mn:00006F06 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00006F06
.text$mn:00006F06 ; ---------------------------------------------------------------------------
.text$mn:00006F07                 align 4
.text$mn:00006F07 _text$mn        ends
.text$mn:00006F07
.text$mn:00006F08 ; ===========================================================================
.text$mn:00006F08
.text$mn:00006F08 ; Segment type: Pure code
.text$mn:00006F08 ; Segment permissions: Read/Execute
.text$mn:00006F08 _text$mn        segment para public 'CODE' use32
.text$mn:00006F08                 assume cs:_text$mn
.text$mn:00006F08                 ;org 6F08h
.text$mn:00006F08 ; COMDAT (pick any)
.text$mn:00006F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F08
.text$mn:00006F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F08
.text$mn:00006F08 ; Attributes: bp-based frame
.text$mn:00006F08
.text$mn:00006F08 ; _DWORD __thiscall std::_Facet_base::~_Facet_base(std::_Facet_base *__hidden this)
.text$mn:00006F08                 public ??1_Facet_base@std@@UAE@XZ
.text$mn:00006F08 ??1_Facet_base@std@@UAE@XZ proc near    ; CODE XREF: __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0+3j
.text$mn:00006F08                                         ; std::locale::facet::~facet(void)+40p ...
.text$mn:00006F08
.text$mn:00006F08 var_4           = dword ptr -4
.text$mn:00006F08
.text$mn:00006F08                 push    ebp
.text$mn:00006F09                 mov     ebp, esp
.text$mn:00006F0B                 push    ecx
.text$mn:00006F0C                 mov     [ebp+var_4], ecx
.text$mn:00006F0F                 mov     eax, [ebp+var_4]
.text$mn:00006F12                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:00006F18                 mov     esp, ebp
.text$mn:00006F1A                 pop     ebp
.text$mn:00006F1B                 retn
.text$mn:00006F1B ??1_Facet_base@std@@UAE@XZ endp
.text$mn:00006F1B
.text$mn:00006F1B _text$mn        ends
.text$mn:00006F1B
.text$mn:00006F1C ; ===========================================================================
.text$mn:00006F1C
.text$mn:00006F1C ; Segment type: Pure code
.text$mn:00006F1C ; Segment permissions: Read/Execute
.text$mn:00006F1C _text$mn        segment para public 'CODE' use32
.text$mn:00006F1C                 assume cs:_text$mn
.text$mn:00006F1C                 ;org 6F1Ch
.text$mn:00006F1C ; COMDAT (pick any)
.text$mn:00006F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F1C
.text$mn:00006F1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F1C
.text$mn:00006F1C ; Attributes: bp-based frame
.text$mn:00006F1C
.text$mn:00006F1C ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00006F1C                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006F1C ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00006F1C                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00006F1C                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00006F1C
.text$mn:00006F1C var_10          = dword ptr -10h
.text$mn:00006F1C var_C           = dword ptr -0Ch
.text$mn:00006F1C var_4           = dword ptr -4
.text$mn:00006F1C
.text$mn:00006F1C                 push    ebp
.text$mn:00006F1D                 mov     ebp, esp
.text$mn:00006F1F                 push    0FFFFFFFFh
.text$mn:00006F21                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006F26                 mov     eax, large fs:0
.text$mn:00006F2C                 push    eax
.text$mn:00006F2D                 push    ecx
.text$mn:00006F2E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F33                 xor     eax, ebp
.text$mn:00006F35                 push    eax
.text$mn:00006F36                 lea     eax, [ebp+var_C]
.text$mn:00006F39                 mov     large fs:0, eax
.text$mn:00006F3F                 mov     [ebp+var_10], ecx
.text$mn:00006F42                 mov     [ebp+var_4], 0
.text$mn:00006F49                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F50                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F53                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00006F58                 mov     ecx, [ebp+var_C]
.text$mn:00006F5B                 mov     large fs:0, ecx
.text$mn:00006F62                 pop     ecx
.text$mn:00006F63                 mov     esp, ebp
.text$mn:00006F65                 pop     ebp
.text$mn:00006F66                 retn
.text$mn:00006F66 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00006F66
.text$mn:00006F66 ; ---------------------------------------------------------------------------
.text$mn:00006F67                 align 4
.text$mn:00006F67 _text$mn        ends
.text$mn:00006F67
.text$x:00006F68 ; ===========================================================================
.text$x:00006F68
.text$x:00006F68 ; Segment type: Pure code
.text$x:00006F68 ; Segment permissions: Read/Execute
.text$x:00006F68 _text$x         segment para public 'CODE' use32
.text$x:00006F68                 assume cs:_text$x
.text$x:00006F68                 ;org 6F68h
.text$x:00006F68 ; COMDAT (pick associative to section at 6F1C)
.text$x:00006F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F68
.text$x:00006F68 ; =============== S U B R O U T I N E =======================================
.text$x:00006F68
.text$x:00006F68
.text$x:00006F68 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00006F68                                         ; DATA XREF: .xdata$x:0000CF5Co
.text$x:00006F68                 mov     ecx, [ebp-10h]  ; this
.text$x:00006F6B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00006F6B __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00006F6B
.text$x:00006F70
.text$x:00006F70 ; =============== S U B R O U T I N E =======================================
.text$x:00006F70
.text$x:00006F70
.text$x:00006F70 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00006F70                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00006F70
.text$x:00006F70 arg_4           = dword ptr  8
.text$x:00006F70
.text$x:00006F70                 mov     edx, [esp+arg_4]
.text$x:00006F74                 lea     eax, [edx+0Ch]
.text$x:00006F77                 mov     ecx, [edx-8]
.text$x:00006F7A                 xor     ecx, eax
.text$x:00006F7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F81                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00006F86                 jmp     ___CxxFrameHandler3
.text$x:00006F86 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00006F86
.text$x:00006F86 ; ---------------------------------------------------------------------------
.text$x:00006F8B                 align 4
.text$x:00006F8B _text$x         ends
.text$x:00006F8B
.text$mn:00006F8C ; ===========================================================================
.text$mn:00006F8C
.text$mn:00006F8C ; Segment type: Pure code
.text$mn:00006F8C ; Segment permissions: Read/Execute
.text$mn:00006F8C _text$mn        segment para public 'CODE' use32
.text$mn:00006F8C                 assume cs:_text$mn
.text$mn:00006F8C                 ;org 6F8Ch
.text$mn:00006F8C ; COMDAT (pick any)
.text$mn:00006F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F8C
.text$mn:00006F8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F8C
.text$mn:00006F8C ; Attributes: bp-based frame
.text$mn:00006F8C
.text$mn:00006F8C ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00006F8C                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006F8C ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00006F8C                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00006F8C                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00006F8C
.text$mn:00006F8C var_10          = dword ptr -10h
.text$mn:00006F8C var_C           = dword ptr -0Ch
.text$mn:00006F8C var_4           = dword ptr -4
.text$mn:00006F8C
.text$mn:00006F8C                 push    ebp
.text$mn:00006F8D                 mov     ebp, esp
.text$mn:00006F8F                 push    0FFFFFFFFh
.text$mn:00006F91                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006F96                 mov     eax, large fs:0
.text$mn:00006F9C                 push    eax
.text$mn:00006F9D                 push    ecx
.text$mn:00006F9E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006FA3                 xor     eax, ebp
.text$mn:00006FA5                 push    eax
.text$mn:00006FA6                 lea     eax, [ebp+var_C]
.text$mn:00006FA9                 mov     large fs:0, eax
.text$mn:00006FAF                 mov     [ebp+var_10], ecx
.text$mn:00006FB2                 mov     [ebp+var_4], 0
.text$mn:00006FB9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006FC0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006FC3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006FC8                 mov     ecx, [ebp+var_C]
.text$mn:00006FCB                 mov     large fs:0, ecx
.text$mn:00006FD2                 pop     ecx
.text$mn:00006FD3                 mov     esp, ebp
.text$mn:00006FD5                 pop     ebp
.text$mn:00006FD6                 retn
.text$mn:00006FD6 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00006FD6
.text$mn:00006FD6 ; ---------------------------------------------------------------------------
.text$mn:00006FD7                 align 4
.text$mn:00006FD7 _text$mn        ends
.text$mn:00006FD7
.text$x:00006FD8 ; ===========================================================================
.text$x:00006FD8
.text$x:00006FD8 ; Segment type: Pure code
.text$x:00006FD8 ; Segment permissions: Read/Execute
.text$x:00006FD8 _text$x         segment para public 'CODE' use32
.text$x:00006FD8                 assume cs:_text$x
.text$x:00006FD8                 ;org 6FD8h
.text$x:00006FD8 ; COMDAT (pick associative to section at 6F8C)
.text$x:00006FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FD8
.text$x:00006FD8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD8
.text$x:00006FD8
.text$x:00006FD8 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00006FD8                                         ; DATA XREF: .xdata$x:0000CFE0o
.text$x:00006FD8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006FDB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006FDB __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00006FDB
.text$x:00006FE0
.text$x:00006FE0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE0
.text$x:00006FE0
.text$x:00006FE0 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00006FE0                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00006FE0
.text$x:00006FE0 arg_4           = dword ptr  8
.text$x:00006FE0
.text$x:00006FE0                 mov     edx, [esp+arg_4]
.text$x:00006FE4                 lea     eax, [edx+0Ch]
.text$x:00006FE7                 mov     ecx, [edx-8]
.text$x:00006FEA                 xor     ecx, eax
.text$x:00006FEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FF1                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00006FF6                 jmp     ___CxxFrameHandler3
.text$x:00006FF6 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00006FF6
.text$x:00006FF6 ; ---------------------------------------------------------------------------
.text$x:00006FFB                 align 4
.text$x:00006FFB _text$x         ends
.text$x:00006FFB
.text$mn:00006FFC ; ===========================================================================
.text$mn:00006FFC
.text$mn:00006FFC ; Segment type: Pure code
.text$mn:00006FFC ; Segment permissions: Read/Execute
.text$mn:00006FFC _text$mn        segment para public 'CODE' use32
.text$mn:00006FFC                 assume cs:_text$mn
.text$mn:00006FFC                 ;org 6FFCh
.text$mn:00006FFC ; COMDAT (pick any)
.text$mn:00006FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FFC
.text$mn:00006FFC ; =============== S U B R O U T I N E =======================================
.text$mn:00006FFC
.text$mn:00006FFC ; Attributes: bp-based frame
.text$mn:00006FFC
.text$mn:00006FFC ; _DWORD __thiscall std::_Locinfo::~_Locinfo(std::_Locinfo *__hidden this)
.text$mn:00006FFC                 public ??1_Locinfo@std@@QAE@XZ
.text$mn:00006FFC ??1_Locinfo@std@@QAE@XZ proc near       ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+DEp
.text$mn:00006FFC                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+13j
.text$mn:00006FFC
.text$mn:00006FFC var_10          = dword ptr -10h
.text$mn:00006FFC var_C           = dword ptr -0Ch
.text$mn:00006FFC var_4           = dword ptr -4
.text$mn:00006FFC
.text$mn:00006FFC                 push    ebp
.text$mn:00006FFD                 mov     ebp, esp
.text$mn:00006FFF                 push    0FFFFFFFFh
.text$mn:00007001                 push    offset __ehhandler$??1_Locinfo@std@@QAE@XZ
.text$mn:00007006                 mov     eax, large fs:0
.text$mn:0000700C                 push    eax
.text$mn:0000700D                 push    ecx
.text$mn:0000700E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007013                 xor     eax, ebp
.text$mn:00007015                 push    eax
.text$mn:00007016                 lea     eax, [ebp+var_C]
.text$mn:00007019                 mov     large fs:0, eax
.text$mn:0000701F                 mov     [ebp+var_10], ecx
.text$mn:00007022                 mov     [ebp+var_4], 6
.text$mn:00007029                 mov     eax, [ebp+var_10]
.text$mn:0000702C                 push    eax             ; struct std::_Locinfo *
.text$mn:0000702D                 call    ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor(std::_Locinfo *)
.text$mn:00007032                 add     esp, 4
.text$mn:00007035                 mov     byte ptr [ebp+var_4], 5
.text$mn:00007039                 mov     ecx, [ebp+var_10]
.text$mn:0000703C                 add     ecx, 2Ch ; ','
.text$mn:0000703F                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00007044                 mov     byte ptr [ebp+var_4], 4
.text$mn:00007048                 mov     ecx, [ebp+var_10]
.text$mn:0000704B                 add     ecx, 24h ; '$'
.text$mn:0000704E                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00007053                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007057                 mov     ecx, [ebp+var_10]
.text$mn:0000705A                 add     ecx, 1Ch
.text$mn:0000705D                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00007062                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007066                 mov     ecx, [ebp+var_10]
.text$mn:00007069                 add     ecx, 14h
.text$mn:0000706C                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00007071                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007075                 mov     ecx, [ebp+var_10]
.text$mn:00007078                 add     ecx, 0Ch
.text$mn:0000707B                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00007080                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007084                 mov     ecx, [ebp+var_10]
.text$mn:00007087                 add     ecx, 4
.text$mn:0000708A                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:0000708F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007096                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007099                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000709E                 mov     ecx, [ebp+var_C]
.text$mn:000070A1                 mov     large fs:0, ecx
.text$mn:000070A8                 pop     ecx
.text$mn:000070A9                 mov     esp, ebp
.text$mn:000070AB                 pop     ebp
.text$mn:000070AC                 retn
.text$mn:000070AC ??1_Locinfo@std@@QAE@XZ endp
.text$mn:000070AC
.text$mn:000070AC ; ---------------------------------------------------------------------------
.text$mn:000070AD                 align 10h
.text$mn:000070AD _text$mn        ends
.text$mn:000070AD
.text$x:000070B0 ; ===========================================================================
.text$x:000070B0
.text$x:000070B0 ; Segment type: Pure code
.text$x:000070B0 ; Segment permissions: Read/Execute
.text$x:000070B0 _text$x         segment para public 'CODE' use32
.text$x:000070B0                 assume cs:_text$x
.text$x:000070B0                 ;org 70B0h
.text$x:000070B0 ; COMDAT (pick associative to section at 6FFC)
.text$x:000070B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000070B0
.text$x:000070B0 ; =============== S U B R O U T I N E =======================================
.text$x:000070B0
.text$x:000070B0
.text$x:000070B0 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 proc near
.text$x:000070B0                                         ; DATA XREF: .xdata$x:0000CBC4o
.text$x:000070B0                 mov     ecx, [ebp-10h]  ; this
.text$x:000070B3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000070B3 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 endp
.text$x:000070B3
.text$x:000070B8
.text$x:000070B8 ; =============== S U B R O U T I N E =======================================
.text$x:000070B8
.text$x:000070B8
.text$x:000070B8 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 proc near
.text$x:000070B8                                         ; DATA XREF: .xdata$x:0000CBCCo
.text$x:000070B8                 mov     ecx, [ebp-10h]
.text$x:000070BB                 add     ecx, 4
.text$x:000070BE                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000070BE __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 endp
.text$x:000070BE
.text$x:000070C3
.text$x:000070C3 ; =============== S U B R O U T I N E =======================================
.text$x:000070C3
.text$x:000070C3
.text$x:000070C3 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 proc near
.text$x:000070C3                                         ; DATA XREF: .xdata$x:0000CBD4o
.text$x:000070C3                 mov     ecx, [ebp-10h]
.text$x:000070C6                 add     ecx, 0Ch
.text$x:000070C9                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000070C9 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 endp
.text$x:000070C9
.text$x:000070CE
.text$x:000070CE ; =============== S U B R O U T I N E =======================================
.text$x:000070CE
.text$x:000070CE
.text$x:000070CE __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 proc near
.text$x:000070CE                                         ; DATA XREF: .xdata$x:0000CBDCo
.text$x:000070CE                 mov     ecx, [ebp-10h]
.text$x:000070D1                 add     ecx, 14h
.text$x:000070D4                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:000070D4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 endp
.text$x:000070D4
.text$x:000070D9
.text$x:000070D9 ; =============== S U B R O U T I N E =======================================
.text$x:000070D9
.text$x:000070D9
.text$x:000070D9 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 proc near
.text$x:000070D9                                         ; DATA XREF: .xdata$x:0000CBE4o
.text$x:000070D9                 mov     ecx, [ebp-10h]
.text$x:000070DC                 add     ecx, 1Ch
.text$x:000070DF                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:000070DF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 endp
.text$x:000070DF
.text$x:000070E4
.text$x:000070E4 ; =============== S U B R O U T I N E =======================================
.text$x:000070E4
.text$x:000070E4
.text$x:000070E4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 proc near
.text$x:000070E4                                         ; DATA XREF: .xdata$x:0000CBECo
.text$x:000070E4                 mov     ecx, [ebp-10h]
.text$x:000070E7                 add     ecx, 24h ; '$'
.text$x:000070EA                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000070EA __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 endp
.text$x:000070EA
.text$x:000070EF
.text$x:000070EF ; =============== S U B R O U T I N E =======================================
.text$x:000070EF
.text$x:000070EF
.text$x:000070EF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 proc near
.text$x:000070EF                                         ; DATA XREF: .xdata$x:0000CBF4o
.text$x:000070EF                 mov     ecx, [ebp-10h]
.text$x:000070F2                 add     ecx, 2Ch ; ','
.text$x:000070F5                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000070F5 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 endp
.text$x:000070F5
.text$x:000070FA
.text$x:000070FA ; =============== S U B R O U T I N E =======================================
.text$x:000070FA
.text$x:000070FA
.text$x:000070FA __ehhandler$??1_Locinfo@std@@QAE@XZ proc near
.text$x:000070FA                                         ; DATA XREF: std::_Locinfo::~_Locinfo(void)+5o
.text$x:000070FA
.text$x:000070FA arg_4           = dword ptr  8
.text$x:000070FA
.text$x:000070FA                 mov     edx, [esp+arg_4]
.text$x:000070FE                 lea     eax, [edx+0Ch]
.text$x:00007101                 mov     ecx, [edx-8]
.text$x:00007104                 xor     ecx, eax
.text$x:00007106                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000710B                 mov     eax, offset __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
.text$x:00007110                 jmp     ___CxxFrameHandler3
.text$x:00007110 __ehhandler$??1_Locinfo@std@@QAE@XZ endp
.text$x:00007110
.text$x:00007110 ; ---------------------------------------------------------------------------
.text$x:00007115                 align 4
.text$x:00007115 _text$x         ends
.text$x:00007115
.text$mn:00007118 ; ===========================================================================
.text$mn:00007118
.text$mn:00007118 ; Segment type: Pure code
.text$mn:00007118 ; Segment permissions: Read/Execute
.text$mn:00007118 _text$mn        segment para public 'CODE' use32
.text$mn:00007118                 assume cs:_text$mn
.text$mn:00007118                 ;org 7118h
.text$mn:00007118 ; COMDAT (pick any)
.text$mn:00007118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007118
.text$mn:00007118 ; =============== S U B R O U T I N E =======================================
.text$mn:00007118
.text$mn:00007118 ; Attributes: bp-based frame
.text$mn:00007118
.text$mn:00007118 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00007118                 public ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:00007118 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:00007118                                         ; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0+3j
.text$mn:00007118                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+4Dp ...
.text$mn:00007118
.text$mn:00007118 var_10          = dword ptr -10h
.text$mn:00007118 var_C           = dword ptr -0Ch
.text$mn:00007118 var_8           = dword ptr -8
.text$mn:00007118 var_4           = dword ptr -4
.text$mn:00007118
.text$mn:00007118                 push    ebp
.text$mn:00007119                 mov     ebp, esp
.text$mn:0000711B                 sub     esp, 10h
.text$mn:0000711E                 mov     [ebp+var_8], ecx
.text$mn:00007121                 mov     eax, [ebp+var_8]
.text$mn:00007124                 mov     ecx, [eax]
.text$mn:00007126                 mov     [ebp+var_4], ecx
.text$mn:00007129                 mov     edx, [ebp+var_4]
.text$mn:0000712C                 mov     eax, [edx]
.text$mn:0000712E                 mov     ecx, [ebp+var_4]
.text$mn:00007131                 add     ecx, [eax+4]
.text$mn:00007134                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00007139                 test    eax, eax
.text$mn:0000713B                 jz      short loc_7167
.text$mn:0000713D                 mov     ecx, [ebp+var_8]
.text$mn:00007140                 mov     edx, [ecx]
.text$mn:00007142                 mov     [ebp+var_C], edx
.text$mn:00007145                 mov     eax, [ebp+var_C]
.text$mn:00007148                 mov     ecx, [eax]
.text$mn:0000714A                 mov     edx, [ebp+var_C]
.text$mn:0000714D                 add     edx, [ecx+4]
.text$mn:00007150                 mov     ecx, edx
.text$mn:00007152                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00007157                 mov     [ebp+var_10], eax
.text$mn:0000715A                 mov     eax, [ebp+var_10]
.text$mn:0000715D                 mov     edx, [eax]
.text$mn:0000715F                 mov     ecx, [ebp+var_10]
.text$mn:00007162                 mov     eax, [edx+8]
.text$mn:00007165                 call    eax
.text$mn:00007167
.text$mn:00007167 loc_7167:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)+23j
.text$mn:00007167                 mov     esp, ebp
.text$mn:00007169                 pop     ebp
.text$mn:0000716A                 retn
.text$mn:0000716A ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:0000716A
.text$mn:0000716A ; ---------------------------------------------------------------------------
.text$mn:0000716B                 align 4
.text$mn:0000716B _text$mn        ends
.text$mn:0000716B
.text$mn:0000716C ; ===========================================================================
.text$mn:0000716C
.text$mn:0000716C ; Segment type: Pure code
.text$mn:0000716C ; Segment permissions: Read/Execute
.text$mn:0000716C _text$mn        segment para public 'CODE' use32
.text$mn:0000716C                 assume cs:_text$mn
.text$mn:0000716C                 ;org 716Ch
.text$mn:0000716C ; COMDAT (pick any)
.text$mn:0000716C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000716C
.text$mn:0000716C ; =============== S U B R O U T I N E =======================================
.text$mn:0000716C
.text$mn:0000716C ; Attributes: bp-based frame
.text$mn:0000716C
.text$mn:0000716C ; _DWORD __thiscall std::_System_error::~_System_error(std::_System_error *__hidden this)
.text$mn:0000716C                 public ??1_System_error@std@@UAE@XZ
.text$mn:0000716C ??1_System_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0+3j
.text$mn:0000716C                                         ; __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1+3j ...
.text$mn:0000716C
.text$mn:0000716C var_10          = dword ptr -10h
.text$mn:0000716C var_C           = dword ptr -0Ch
.text$mn:0000716C var_4           = dword ptr -4
.text$mn:0000716C
.text$mn:0000716C                 push    ebp
.text$mn:0000716D                 mov     ebp, esp
.text$mn:0000716F                 push    0FFFFFFFFh
.text$mn:00007171                 push    offset __ehhandler$??1_System_error@std@@UAE@XZ
.text$mn:00007176                 mov     eax, large fs:0
.text$mn:0000717C                 push    eax
.text$mn:0000717D                 push    ecx
.text$mn:0000717E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007183                 xor     eax, ebp
.text$mn:00007185                 push    eax
.text$mn:00007186                 lea     eax, [ebp+var_C]
.text$mn:00007189                 mov     large fs:0, eax
.text$mn:0000718F                 mov     [ebp+var_10], ecx
.text$mn:00007192                 mov     [ebp+var_4], 0
.text$mn:00007199                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000071A0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000071A3                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:000071A8                 mov     ecx, [ebp+var_C]
.text$mn:000071AB                 mov     large fs:0, ecx
.text$mn:000071B2                 pop     ecx
.text$mn:000071B3                 mov     esp, ebp
.text$mn:000071B5                 pop     ebp
.text$mn:000071B6                 retn
.text$mn:000071B6 ??1_System_error@std@@UAE@XZ endp
.text$mn:000071B6
.text$mn:000071B6 ; ---------------------------------------------------------------------------
.text$mn:000071B7                 align 4
.text$mn:000071B7 _text$mn        ends
.text$mn:000071B7
.text$x:000071B8 ; ===========================================================================
.text$x:000071B8
.text$x:000071B8 ; Segment type: Pure code
.text$x:000071B8 ; Segment permissions: Read/Execute
.text$x:000071B8 _text$x         segment para public 'CODE' use32
.text$x:000071B8                 assume cs:_text$x
.text$x:000071B8                 ;org 71B8h
.text$x:000071B8 ; COMDAT (pick associative to section at 716C)
.text$x:000071B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000071B8
.text$x:000071B8 ; =============== S U B R O U T I N E =======================================
.text$x:000071B8
.text$x:000071B8
.text$x:000071B8 __unwindfunclet$??1_System_error@std@@UAE@XZ$0 proc near
.text$x:000071B8                                         ; DATA XREF: .xdata$x:0000CE18o
.text$x:000071B8                 mov     ecx, [ebp-10h]  ; this
.text$x:000071BB                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:000071BB __unwindfunclet$??1_System_error@std@@UAE@XZ$0 endp
.text$x:000071BB
.text$x:000071C0
.text$x:000071C0 ; =============== S U B R O U T I N E =======================================
.text$x:000071C0
.text$x:000071C0
.text$x:000071C0 __ehhandler$??1_System_error@std@@UAE@XZ proc near
.text$x:000071C0                                         ; DATA XREF: std::_System_error::~_System_error(void)+5o
.text$x:000071C0
.text$x:000071C0 arg_4           = dword ptr  8
.text$x:000071C0
.text$x:000071C0                 mov     edx, [esp+arg_4]
.text$x:000071C4                 lea     eax, [edx+0Ch]
.text$x:000071C7                 mov     ecx, [edx-8]
.text$x:000071CA                 xor     ecx, eax
.text$x:000071CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000071D1                 mov     eax, offset __ehfuncinfo$??1_System_error@std@@UAE@XZ
.text$x:000071D6                 jmp     ___CxxFrameHandler3
.text$x:000071D6 __ehhandler$??1_System_error@std@@UAE@XZ endp
.text$x:000071D6
.text$x:000071D6 ; ---------------------------------------------------------------------------
.text$x:000071DB                 align 4
.text$x:000071DB _text$x         ends
.text$x:000071DB
.text$mn:000071DC ; ===========================================================================
.text$mn:000071DC
.text$mn:000071DC ; Segment type: Pure code
.text$mn:000071DC ; Segment permissions: Read/Execute
.text$mn:000071DC _text$mn        segment para public 'CODE' use32
.text$mn:000071DC                 assume cs:_text$mn
.text$mn:000071DC                 ;org 71DCh
.text$mn:000071DC ; COMDAT (pick any)
.text$mn:000071DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071DC
.text$mn:000071DC ; =============== S U B R O U T I N E =======================================
.text$mn:000071DC
.text$mn:000071DC ; Attributes: bp-based frame
.text$mn:000071DC
.text$mn:000071DC ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:000071DC                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:000071DC ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:000071DC                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:000071DC                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:000071DC
.text$mn:000071DC var_10          = dword ptr -10h
.text$mn:000071DC var_C           = dword ptr -0Ch
.text$mn:000071DC var_4           = dword ptr -4
.text$mn:000071DC
.text$mn:000071DC                 push    ebp
.text$mn:000071DD                 mov     ebp, esp
.text$mn:000071DF                 push    0FFFFFFFFh
.text$mn:000071E1                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:000071E6                 mov     eax, large fs:0
.text$mn:000071EC                 push    eax
.text$mn:000071ED                 push    ecx
.text$mn:000071EE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000071F3                 xor     eax, ebp
.text$mn:000071F5                 push    eax
.text$mn:000071F6                 lea     eax, [ebp+var_C]
.text$mn:000071F9                 mov     large fs:0, eax
.text$mn:000071FF                 mov     [ebp+var_10], ecx
.text$mn:00007202                 mov     [ebp+var_4], 0
.text$mn:00007209                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007210                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007213                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007218                 mov     ecx, [ebp+var_C]
.text$mn:0000721B                 mov     large fs:0, ecx
.text$mn:00007222                 pop     ecx
.text$mn:00007223                 mov     esp, ebp
.text$mn:00007225                 pop     ebp
.text$mn:00007226                 retn
.text$mn:00007226 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00007226
.text$mn:00007226 ; ---------------------------------------------------------------------------
.text$mn:00007227                 align 4
.text$mn:00007227 _text$mn        ends
.text$mn:00007227
.text$x:00007228 ; ===========================================================================
.text$x:00007228
.text$x:00007228 ; Segment type: Pure code
.text$x:00007228 ; Segment permissions: Read/Execute
.text$x:00007228 _text$x         segment para public 'CODE' use32
.text$x:00007228                 assume cs:_text$x
.text$x:00007228                 ;org 7228h
.text$x:00007228 ; COMDAT (pick associative to section at 71DC)
.text$x:00007228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007228
.text$x:00007228 ; =============== S U B R O U T I N E =======================================
.text$x:00007228
.text$x:00007228
.text$x:00007228 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00007228                                         ; DATA XREF: .xdata$x:0000D064o
.text$x:00007228                 mov     ecx, [ebp-10h]  ; this
.text$x:0000722B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000722B __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:0000722B
.text$x:00007230
.text$x:00007230 ; =============== S U B R O U T I N E =======================================
.text$x:00007230
.text$x:00007230
.text$x:00007230 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00007230                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00007230
.text$x:00007230 arg_4           = dword ptr  8
.text$x:00007230
.text$x:00007230                 mov     edx, [esp+arg_4]
.text$x:00007234                 lea     eax, [edx+0Ch]
.text$x:00007237                 mov     ecx, [edx-8]
.text$x:0000723A                 xor     ecx, eax
.text$x:0000723C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007241                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00007246                 jmp     ___CxxFrameHandler3
.text$x:00007246 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00007246
.text$x:00007246 ; ---------------------------------------------------------------------------
.text$x:0000724B                 align 4
.text$x:0000724B _text$x         ends
.text$x:0000724B
.text$mn:0000724C ; ===========================================================================
.text$mn:0000724C
.text$mn:0000724C ; Segment type: Pure code
.text$mn:0000724C ; Segment permissions: Read/Execute
.text$mn:0000724C _text$mn        segment para public 'CODE' use32
.text$mn:0000724C                 assume cs:_text$mn
.text$mn:0000724C                 ;org 724Ch
.text$mn:0000724C ; COMDAT (pick any)
.text$mn:0000724C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000724C
.text$mn:0000724C ; =============== S U B R O U T I N E =======================================
.text$mn:0000724C
.text$mn:0000724C ; Attributes: bp-based frame
.text$mn:0000724C
.text$mn:0000724C ; _DWORD __thiscall std::ctype_base::~ctype_base(std::ctype_base *__hidden this)
.text$mn:0000724C                 public ??1ctype_base@std@@UAE@XZ
.text$mn:0000724C ??1ctype_base@std@@UAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0+3j
.text$mn:0000724C                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+67p ...
.text$mn:0000724C
.text$mn:0000724C var_10          = dword ptr -10h
.text$mn:0000724C var_C           = dword ptr -0Ch
.text$mn:0000724C var_4           = dword ptr -4
.text$mn:0000724C
.text$mn:0000724C                 push    ebp
.text$mn:0000724D                 mov     ebp, esp
.text$mn:0000724F                 push    0FFFFFFFFh
.text$mn:00007251                 push    offset __ehhandler$??1ctype_base@std@@UAE@XZ
.text$mn:00007256                 mov     eax, large fs:0
.text$mn:0000725C                 push    eax
.text$mn:0000725D                 push    ecx
.text$mn:0000725E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007263                 xor     eax, ebp
.text$mn:00007265                 push    eax
.text$mn:00007266                 lea     eax, [ebp+var_C]
.text$mn:00007269                 mov     large fs:0, eax
.text$mn:0000726F                 mov     [ebp+var_10], ecx
.text$mn:00007272                 mov     eax, [ebp+var_10]
.text$mn:00007275                 mov     dword ptr [eax], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:0000727B                 mov     [ebp+var_4], 0
.text$mn:00007282                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007289                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000728C                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:00007291                 mov     ecx, [ebp+var_C]
.text$mn:00007294                 mov     large fs:0, ecx
.text$mn:0000729B                 pop     ecx
.text$mn:0000729C                 mov     esp, ebp
.text$mn:0000729E                 pop     ebp
.text$mn:0000729F                 retn
.text$mn:0000729F ??1ctype_base@std@@UAE@XZ endp
.text$mn:0000729F
.text$mn:0000729F _text$mn        ends
.text$mn:0000729F
.text$x:000072A0 ; ===========================================================================
.text$x:000072A0
.text$x:000072A0 ; Segment type: Pure code
.text$x:000072A0 ; Segment permissions: Read/Execute
.text$x:000072A0 _text$x         segment para public 'CODE' use32
.text$x:000072A0                 assume cs:_text$x
.text$x:000072A0                 ;org 72A0h
.text$x:000072A0 ; COMDAT (pick associative to section at 724C)
.text$x:000072A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000072A0
.text$x:000072A0 ; =============== S U B R O U T I N E =======================================
.text$x:000072A0
.text$x:000072A0
.text$x:000072A0 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 proc near
.text$x:000072A0                                         ; DATA XREF: .xdata$x:0000CCACo
.text$x:000072A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000072A3                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:000072A3 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 endp
.text$x:000072A3
.text$x:000072A8
.text$x:000072A8 ; =============== S U B R O U T I N E =======================================
.text$x:000072A8
.text$x:000072A8
.text$x:000072A8 __ehhandler$??1ctype_base@std@@UAE@XZ proc near
.text$x:000072A8                                         ; DATA XREF: std::ctype_base::~ctype_base(void)+5o
.text$x:000072A8
.text$x:000072A8 arg_4           = dword ptr  8
.text$x:000072A8
.text$x:000072A8                 mov     edx, [esp+arg_4]
.text$x:000072AC                 lea     eax, [edx+0Ch]
.text$x:000072AF                 mov     ecx, [edx-8]
.text$x:000072B2                 xor     ecx, eax
.text$x:000072B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072B9                 mov     eax, offset __ehfuncinfo$??1ctype_base@std@@UAE@XZ
.text$x:000072BE                 jmp     ___CxxFrameHandler3
.text$x:000072BE __ehhandler$??1ctype_base@std@@UAE@XZ endp
.text$x:000072BE
.text$x:000072BE ; ---------------------------------------------------------------------------
.text$x:000072C3                 align 4
.text$x:000072C3 _text$x         ends
.text$x:000072C3
.text$mn:000072C4 ; ===========================================================================
.text$mn:000072C4
.text$mn:000072C4 ; Segment type: Pure code
.text$mn:000072C4 ; Segment permissions: Read/Execute
.text$mn:000072C4 _text$mn        segment para public 'CODE' use32
.text$mn:000072C4                 assume cs:_text$mn
.text$mn:000072C4                 ;org 72C4h
.text$mn:000072C4 ; COMDAT (pick any)
.text$mn:000072C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072C4
.text$mn:000072C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072C4
.text$mn:000072C4 ; Attributes: bp-based frame
.text$mn:000072C4
.text$mn:000072C4 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:000072C4                 public ??1error_category@std@@UAE@XZ
.text$mn:000072C4 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:000072C4                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:000072C4
.text$mn:000072C4 var_4           = dword ptr -4
.text$mn:000072C4
.text$mn:000072C4                 push    ebp
.text$mn:000072C5                 mov     ebp, esp
.text$mn:000072C7                 push    ecx
.text$mn:000072C8                 mov     [ebp+var_4], ecx
.text$mn:000072CB                 mov     eax, [ebp+var_4]
.text$mn:000072CE                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000072D4                 mov     esp, ebp
.text$mn:000072D6                 pop     ebp
.text$mn:000072D7                 retn
.text$mn:000072D7 ??1error_category@std@@UAE@XZ endp
.text$mn:000072D7
.text$mn:000072D7 _text$mn        ends
.text$mn:000072D7
.text$mn:000072D8 ; ===========================================================================
.text$mn:000072D8
.text$mn:000072D8 ; Segment type: Pure code
.text$mn:000072D8 ; Segment permissions: Read/Execute
.text$mn:000072D8 _text$mn        segment para public 'CODE' use32
.text$mn:000072D8                 assume cs:_text$mn
.text$mn:000072D8                 ;org 72D8h
.text$mn:000072D8 ; COMDAT (pick any)
.text$mn:000072D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072D8
.text$mn:000072D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000072D8
.text$mn:000072D8 ; Attributes: bp-based frame
.text$mn:000072D8
.text$mn:000072D8 ; _DWORD __thiscall std::locale::facet::~facet(std::locale::facet *__hidden this)
.text$mn:000072D8                 public ??1facet@locale@std@@MAE@XZ
.text$mn:000072D8 ??1facet@locale@std@@MAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0+3j
.text$mn:000072D8                                         ; std::ctype_base::~ctype_base(void)+40p ...
.text$mn:000072D8
.text$mn:000072D8 var_10          = dword ptr -10h
.text$mn:000072D8 var_C           = dword ptr -0Ch
.text$mn:000072D8 var_4           = dword ptr -4
.text$mn:000072D8
.text$mn:000072D8                 push    ebp
.text$mn:000072D9                 mov     ebp, esp
.text$mn:000072DB                 push    0FFFFFFFFh
.text$mn:000072DD                 push    offset __ehhandler$??1facet@locale@std@@MAE@XZ
.text$mn:000072E2                 mov     eax, large fs:0
.text$mn:000072E8                 push    eax
.text$mn:000072E9                 push    ecx
.text$mn:000072EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072EF                 xor     eax, ebp
.text$mn:000072F1                 push    eax
.text$mn:000072F2                 lea     eax, [ebp+var_C]
.text$mn:000072F5                 mov     large fs:0, eax
.text$mn:000072FB                 mov     [ebp+var_10], ecx
.text$mn:000072FE                 mov     eax, [ebp+var_10]
.text$mn:00007301                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00007307                 mov     [ebp+var_4], 0
.text$mn:0000730E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007315                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007318                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:0000731D                 mov     ecx, [ebp+var_C]
.text$mn:00007320                 mov     large fs:0, ecx
.text$mn:00007327                 pop     ecx
.text$mn:00007328                 mov     esp, ebp
.text$mn:0000732A                 pop     ebp
.text$mn:0000732B                 retn
.text$mn:0000732B ??1facet@locale@std@@MAE@XZ endp
.text$mn:0000732B
.text$mn:0000732B _text$mn        ends
.text$mn:0000732B
.text$x:0000732C ; ===========================================================================
.text$x:0000732C
.text$x:0000732C ; Segment type: Pure code
.text$x:0000732C ; Segment permissions: Read/Execute
.text$x:0000732C _text$x         segment para public 'CODE' use32
.text$x:0000732C                 assume cs:_text$x
.text$x:0000732C                 ;org 732Ch
.text$x:0000732C ; COMDAT (pick associative to section at 72D8)
.text$x:0000732C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000732C
.text$x:0000732C ; =============== S U B R O U T I N E =======================================
.text$x:0000732C
.text$x:0000732C
.text$x:0000732C __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 proc near
.text$x:0000732C                                         ; DATA XREF: .xdata$x:0000CC54o
.text$x:0000732C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000732F                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:0000732F __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 endp
.text$x:0000732F
.text$x:00007334
.text$x:00007334 ; =============== S U B R O U T I N E =======================================
.text$x:00007334
.text$x:00007334
.text$x:00007334 __ehhandler$??1facet@locale@std@@MAE@XZ proc near
.text$x:00007334                                         ; DATA XREF: std::locale::facet::~facet(void)+5o
.text$x:00007334
.text$x:00007334 arg_4           = dword ptr  8
.text$x:00007334
.text$x:00007334                 mov     edx, [esp+arg_4]
.text$x:00007338                 lea     eax, [edx+0Ch]
.text$x:0000733B                 mov     ecx, [edx-8]
.text$x:0000733E                 xor     ecx, eax
.text$x:00007340                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007345                 mov     eax, offset __ehfuncinfo$??1facet@locale@std@@MAE@XZ
.text$x:0000734A                 jmp     ___CxxFrameHandler3
.text$x:0000734A __ehhandler$??1facet@locale@std@@MAE@XZ endp
.text$x:0000734A
.text$x:0000734A ; ---------------------------------------------------------------------------
.text$x:0000734F                 align 10h
.text$x:0000734F _text$x         ends
.text$x:0000734F
.text$mn:00007350 ; ===========================================================================
.text$mn:00007350
.text$mn:00007350 ; Segment type: Pure code
.text$mn:00007350 ; Segment permissions: Read/Execute
.text$mn:00007350 _text$mn        segment para public 'CODE' use32
.text$mn:00007350                 assume cs:_text$mn
.text$mn:00007350                 ;org 7350h
.text$mn:00007350 ; COMDAT (pick any)
.text$mn:00007350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007350
.text$mn:00007350 ; =============== S U B R O U T I N E =======================================
.text$mn:00007350
.text$mn:00007350 ; Attributes: bp-based frame
.text$mn:00007350
.text$mn:00007350 ; _DWORD __thiscall std::ios_base::failure::~failure(std::ios_base::failure *__hidden this)
.text$mn:00007350                 public ??1failure@ios_base@std@@UAE@XZ
.text$mn:00007350 ??1failure@ios_base@std@@UAE@XZ proc near
.text$mn:00007350                                         ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+Ap
.text$mn:00007350                                         ; DATA XREF: .xdata$x:0000E2A4o
.text$mn:00007350
.text$mn:00007350 var_10          = dword ptr -10h
.text$mn:00007350 var_C           = dword ptr -0Ch
.text$mn:00007350 var_4           = dword ptr -4
.text$mn:00007350
.text$mn:00007350                 push    ebp
.text$mn:00007351                 mov     ebp, esp
.text$mn:00007353                 push    0FFFFFFFFh
.text$mn:00007355                 push    offset __ehhandler$??1failure@ios_base@std@@UAE@XZ
.text$mn:0000735A                 mov     eax, large fs:0
.text$mn:00007360                 push    eax
.text$mn:00007361                 push    ecx
.text$mn:00007362                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007367                 xor     eax, ebp
.text$mn:00007369                 push    eax
.text$mn:0000736A                 lea     eax, [ebp+var_C]
.text$mn:0000736D                 mov     large fs:0, eax
.text$mn:00007373                 mov     [ebp+var_10], ecx
.text$mn:00007376                 mov     [ebp+var_4], 0
.text$mn:0000737D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007384                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007387                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:0000738C                 mov     ecx, [ebp+var_C]
.text$mn:0000738F                 mov     large fs:0, ecx
.text$mn:00007396                 pop     ecx
.text$mn:00007397                 mov     esp, ebp
.text$mn:00007399                 pop     ebp
.text$mn:0000739A                 retn
.text$mn:0000739A ??1failure@ios_base@std@@UAE@XZ endp
.text$mn:0000739A
.text$mn:0000739A ; ---------------------------------------------------------------------------
.text$mn:0000739B                 align 4
.text$mn:0000739B _text$mn        ends
.text$mn:0000739B
.text$x:0000739C ; ===========================================================================
.text$x:0000739C
.text$x:0000739C ; Segment type: Pure code
.text$x:0000739C ; Segment permissions: Read/Execute
.text$x:0000739C _text$x         segment para public 'CODE' use32
.text$x:0000739C                 assume cs:_text$x
.text$x:0000739C                 ;org 739Ch
.text$x:0000739C ; COMDAT (pick associative to section at 7350)
.text$x:0000739C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000739C
.text$x:0000739C ; =============== S U B R O U T I N E =======================================
.text$x:0000739C
.text$x:0000739C
.text$x:0000739C __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 proc near
.text$x:0000739C                                         ; DATA XREF: .xdata$x:0000D0BCo
.text$x:0000739C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000739F                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:0000739F __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 endp
.text$x:0000739F
.text$x:000073A4
.text$x:000073A4 ; =============== S U B R O U T I N E =======================================
.text$x:000073A4
.text$x:000073A4
.text$x:000073A4 __ehhandler$??1failure@ios_base@std@@UAE@XZ proc near
.text$x:000073A4                                         ; DATA XREF: std::ios_base::failure::~failure(void)+5o
.text$x:000073A4
.text$x:000073A4 arg_4           = dword ptr  8
.text$x:000073A4
.text$x:000073A4                 mov     edx, [esp+arg_4]
.text$x:000073A8                 lea     eax, [edx+0Ch]
.text$x:000073AB                 mov     ecx, [edx-8]
.text$x:000073AE                 xor     ecx, eax
.text$x:000073B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073B5                 mov     eax, offset __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ
.text$x:000073BA                 jmp     ___CxxFrameHandler3
.text$x:000073BA __ehhandler$??1failure@ios_base@std@@UAE@XZ endp
.text$x:000073BA
.text$x:000073BA ; ---------------------------------------------------------------------------
.text$x:000073BF                 align 10h
.text$x:000073BF _text$x         ends
.text$x:000073BF
.text$mn:000073C0 ; ===========================================================================
.text$mn:000073C0
.text$mn:000073C0 ; Segment type: Pure code
.text$mn:000073C0 ; Segment permissions: Read/Execute
.text$mn:000073C0 _text$mn        segment para public 'CODE' use32
.text$mn:000073C0                 assume cs:_text$mn
.text$mn:000073C0                 ;org 73C0h
.text$mn:000073C0 ; COMDAT (pick any)
.text$mn:000073C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073C0
.text$mn:000073C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000073C0
.text$mn:000073C0 ; Attributes: bp-based frame
.text$mn:000073C0
.text$mn:000073C0 ; _DWORD __thiscall std::ios_base::~ios_base(std::ios_base *__hidden this)
.text$mn:000073C0                 public ??1ios_base@std@@UAE@XZ
.text$mn:000073C0 ??1ios_base@std@@UAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0+3j
.text$mn:000073C0                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+40p ...
.text$mn:000073C0
.text$mn:000073C0 var_4           = dword ptr -4
.text$mn:000073C0
.text$mn:000073C0                 push    ebp
.text$mn:000073C1                 mov     ebp, esp
.text$mn:000073C3                 push    ecx
.text$mn:000073C4                 mov     [ebp+var_4], ecx
.text$mn:000073C7                 mov     eax, [ebp+var_4]
.text$mn:000073CA                 mov     dword ptr [eax], offset ??_7ios_base@std@@6B@ ; const std::ios_base::`vftable'
.text$mn:000073D0                 mov     ecx, [ebp+var_4]
.text$mn:000073D3                 push    ecx             ; struct std::ios_base *
.text$mn:000073D4                 call    ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor(std::ios_base *)
.text$mn:000073D9                 add     esp, 4
.text$mn:000073DC                 mov     esp, ebp
.text$mn:000073DE                 pop     ebp
.text$mn:000073DF                 retn
.text$mn:000073DF ??1ios_base@std@@UAE@XZ endp
.text$mn:000073DF
.text$mn:000073DF _text$mn        ends
.text$mn:000073DF
.text$mn:000073E0 ; ===========================================================================
.text$mn:000073E0
.text$mn:000073E0 ; Segment type: Pure code
.text$mn:000073E0 ; Segment permissions: Read/Execute
.text$mn:000073E0 _text$mn        segment para public 'CODE' use32
.text$mn:000073E0                 assume cs:_text$mn
.text$mn:000073E0                 ;org 73E0h
.text$mn:000073E0 ; COMDAT (pick any)
.text$mn:000073E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073E0
.text$mn:000073E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000073E0
.text$mn:000073E0 ; Attributes: bp-based frame
.text$mn:000073E0
.text$mn:000073E0 ; _DWORD __thiscall std::locale::~locale(std::locale *__hidden this)
.text$mn:000073E0                 public ??1locale@std@@QAE@XZ
.text$mn:000073E0 ??1locale@std@@QAE@XZ proc near         ; CODE XREF: std::locale::`scalar deleting destructor'(uint)+Ap
.text$mn:000073E0                                         ; __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0+13j ...
.text$mn:000073E0
.text$mn:000073E0 var_4           = dword ptr -4
.text$mn:000073E0
.text$mn:000073E0                 push    ebp
.text$mn:000073E1                 mov     ebp, esp
.text$mn:000073E3                 push    ecx
.text$mn:000073E4                 mov     [ebp+var_4], ecx
.text$mn:000073E7                 mov     eax, [ebp+var_4]
.text$mn:000073EA                 cmp     dword ptr [eax], 0
.text$mn:000073ED                 jz      short loc_7409
.text$mn:000073EF                 mov     ecx, [ebp+var_4]
.text$mn:000073F2                 mov     edx, [ecx]
.text$mn:000073F4                 mov     eax, [ebp+var_4]
.text$mn:000073F7                 mov     edx, [edx]
.text$mn:000073F9                 mov     ecx, [eax]
.text$mn:000073FB                 mov     eax, [edx+8]
.text$mn:000073FE                 call    eax
.text$mn:00007400                 push    eax             ; Memory
.text$mn:00007401                 call    ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z ; std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)
.text$mn:00007406                 add     esp, 4
.text$mn:00007409
.text$mn:00007409 loc_7409:                               ; CODE XREF: std::locale::~locale(void)+Dj
.text$mn:00007409                 mov     esp, ebp
.text$mn:0000740B                 pop     ebp
.text$mn:0000740C                 retn
.text$mn:0000740C ??1locale@std@@QAE@XZ endp
.text$mn:0000740C
.text$mn:0000740C ; ---------------------------------------------------------------------------
.text$mn:0000740D                 align 10h
.text$mn:0000740D _text$mn        ends
.text$mn:0000740D
.text$mn:00007410 ; ===========================================================================
.text$mn:00007410
.text$mn:00007410 ; Segment type: Pure code
.text$mn:00007410 ; Segment permissions: Read/Execute
.text$mn:00007410 _text$mn        segment para public 'CODE' use32
.text$mn:00007410                 assume cs:_text$mn
.text$mn:00007410                 ;org 7410h
.text$mn:00007410 ; COMDAT (pick any)
.text$mn:00007410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007410
.text$mn:00007410 ; =============== S U B R O U T I N E =======================================
.text$mn:00007410
.text$mn:00007410 ; Attributes: bp-based frame
.text$mn:00007410
.text$mn:00007410 ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:00007410                 public ??1runtime_error@std@@UAE@XZ
.text$mn:00007410 ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2+3j
.text$mn:00007410                                         ; __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00007410
.text$mn:00007410 var_10          = dword ptr -10h
.text$mn:00007410 var_C           = dword ptr -0Ch
.text$mn:00007410 var_4           = dword ptr -4
.text$mn:00007410
.text$mn:00007410                 push    ebp
.text$mn:00007411                 mov     ebp, esp
.text$mn:00007413                 push    0FFFFFFFFh
.text$mn:00007415                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:0000741A                 mov     eax, large fs:0
.text$mn:00007420                 push    eax
.text$mn:00007421                 push    ecx
.text$mn:00007422                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007427                 xor     eax, ebp
.text$mn:00007429                 push    eax
.text$mn:0000742A                 lea     eax, [ebp+var_C]
.text$mn:0000742D                 mov     large fs:0, eax
.text$mn:00007433                 mov     [ebp+var_10], ecx
.text$mn:00007436                 mov     [ebp+var_4], 0
.text$mn:0000743D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007444                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007447                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:0000744C                 mov     ecx, [ebp+var_C]
.text$mn:0000744F                 mov     large fs:0, ecx
.text$mn:00007456                 pop     ecx
.text$mn:00007457                 mov     esp, ebp
.text$mn:00007459                 pop     ebp
.text$mn:0000745A                 retn
.text$mn:0000745A ??1runtime_error@std@@UAE@XZ endp
.text$mn:0000745A
.text$mn:0000745A ; ---------------------------------------------------------------------------
.text$mn:0000745B                 align 4
.text$mn:0000745B _text$mn        ends
.text$mn:0000745B
.text$x:0000745C ; ===========================================================================
.text$x:0000745C
.text$x:0000745C ; Segment type: Pure code
.text$x:0000745C ; Segment permissions: Read/Execute
.text$x:0000745C _text$x         segment para public 'CODE' use32
.text$x:0000745C                 assume cs:_text$x
.text$x:0000745C                 ;org 745Ch
.text$x:0000745C ; COMDAT (pick associative to section at 7410)
.text$x:0000745C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000745C
.text$x:0000745C ; =============== S U B R O U T I N E =======================================
.text$x:0000745C
.text$x:0000745C
.text$x:0000745C __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:0000745C                                         ; DATA XREF: .xdata$x:0000CAECo
.text$x:0000745C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000745F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000745F __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:0000745F
.text$x:00007464
.text$x:00007464 ; =============== S U B R O U T I N E =======================================
.text$x:00007464
.text$x:00007464
.text$x:00007464 __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:00007464                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:00007464
.text$x:00007464 arg_4           = dword ptr  8
.text$x:00007464
.text$x:00007464                 mov     edx, [esp+arg_4]
.text$x:00007468                 lea     eax, [edx+0Ch]
.text$x:0000746B                 mov     ecx, [edx-8]
.text$x:0000746E                 xor     ecx, eax
.text$x:00007470                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007475                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:0000747A                 jmp     ___CxxFrameHandler3
.text$x:0000747A __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:0000747A
.text$x:0000747A ; ---------------------------------------------------------------------------
.text$x:0000747F                 align 10h
.text$x:0000747F _text$x         ends
.text$x:0000747F
.text$mn:00007480 ; ===========================================================================
.text$mn:00007480
.text$mn:00007480 ; Segment type: Pure code
.text$mn:00007480 ; Segment permissions: Read/Execute
.text$mn:00007480 _text$mn        segment para public 'CODE' use32
.text$mn:00007480                 assume cs:_text$mn
.text$mn:00007480                 ;org 7480h
.text$mn:00007480 ; COMDAT (pick any)
.text$mn:00007480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007480
.text$mn:00007480 ; =============== S U B R O U T I N E =======================================
.text$mn:00007480
.text$mn:00007480 ; Attributes: bp-based frame
.text$mn:00007480
.text$mn:00007480 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00007480                 public ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:00007480 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:00007480                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+2CEp
.text$mn:00007480                                         ; __unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2+3j ...
.text$mn:00007480
.text$mn:00007480 var_10          = dword ptr -10h
.text$mn:00007480 var_C           = dword ptr -0Ch
.text$mn:00007480 var_4           = dword ptr -4
.text$mn:00007480
.text$mn:00007480                 push    ebp
.text$mn:00007481                 mov     ebp, esp
.text$mn:00007483                 push    0FFFFFFFFh
.text$mn:00007485                 push    offset __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:0000748A                 mov     eax, large fs:0
.text$mn:00007490                 push    eax
.text$mn:00007491                 push    ecx
.text$mn:00007492                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007497                 xor     eax, ebp
.text$mn:00007499                 push    eax
.text$mn:0000749A                 lea     eax, [ebp+var_C]
.text$mn:0000749D                 mov     large fs:0, eax
.text$mn:000074A3                 mov     [ebp+var_10], ecx
.text$mn:000074A6                 mov     [ebp+var_4], 0
.text$mn:000074AD                 call    ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text$mn:000074B2                 movzx   eax, al
.text$mn:000074B5                 test    eax, eax
.text$mn:000074B7                 jnz     short loc_74C3
.text$mn:000074B9                 mov     ecx, [ebp+var_10]
.text$mn:000074BC                 mov     ecx, [ecx]
.text$mn:000074BE                 call    ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)
.text$mn:000074C3
.text$mn:000074C3 loc_74C3:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+37j
.text$mn:000074C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000074CA                 mov     ecx, [ebp+var_10]
.text$mn:000074CD                 call    ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:000074D2                 mov     ecx, [ebp+var_C]
.text$mn:000074D5                 mov     large fs:0, ecx
.text$mn:000074DC                 pop     ecx
.text$mn:000074DD                 mov     esp, ebp
.text$mn:000074DF                 pop     ebp
.text$mn:000074E0                 retn
.text$mn:000074E0 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:000074E0
.text$mn:000074E0 ; ---------------------------------------------------------------------------
.text$mn:000074E1                 align 4
.text$mn:000074E1 _text$mn        ends
.text$mn:000074E1
.text$x:000074E4 ; ===========================================================================
.text$x:000074E4
.text$x:000074E4 ; Segment type: Pure code
.text$x:000074E4 ; Segment permissions: Read/Execute
.text$x:000074E4 _text$x         segment para public 'CODE' use32
.text$x:000074E4                 assume cs:_text$x
.text$x:000074E4                 ;org 74E4h
.text$x:000074E4 ; COMDAT (pick associative to section at 7480)
.text$x:000074E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000074E4
.text$x:000074E4 ; =============== S U B R O U T I N E =======================================
.text$x:000074E4
.text$x:000074E4
.text$x:000074E4 __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000074E4                                         ; DATA XREF: .xdata$x:0000DF30o
.text$x:000074E4                 mov     ecx, [ebp-10h]
.text$x:000074E7                 jmp     ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:000074E7 __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000074E7
.text$x:000074EC
.text$x:000074EC ; =============== S U B R O U T I N E =======================================
.text$x:000074EC
.text$x:000074EC
.text$x:000074EC __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$x:000074EC                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+5o
.text$x:000074EC
.text$x:000074EC arg_4           = dword ptr  8
.text$x:000074EC
.text$x:000074EC                 mov     edx, [esp+arg_4]
.text$x:000074F0                 lea     eax, [edx+0Ch]
.text$x:000074F3                 mov     ecx, [edx-8]
.text$x:000074F6                 xor     ecx, eax
.text$x:000074F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000074FD                 mov     eax, offset __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$x:00007502                 jmp     ___CxxFrameHandler3
.text$x:00007502 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$x:00007502
.text$x:00007502 ; ---------------------------------------------------------------------------
.text$x:00007507                 align 4
.text$x:00007507 _text$x         ends
.text$x:00007507
.text$mn:00007508 ; ===========================================================================
.text$mn:00007508
.text$mn:00007508 ; Segment type: Pure code
.text$mn:00007508 ; Segment permissions: Read/Execute
.text$mn:00007508 _text$mn        segment para public 'CODE' use32
.text$mn:00007508                 assume cs:_text$mn
.text$mn:00007508                 ;org 7508h
.text$mn:00007508 ; COMDAT (pick any)
.text$mn:00007508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007508
.text$mn:00007508 ; =============== S U B R O U T I N E =======================================
.text$mn:00007508
.text$mn:00007508 ; Attributes: bp-based frame
.text$mn:00007508
.text$mn:00007508 ; _DWORD __thiscall std::system_error::~system_error(std::system_error *__hidden this)
.text$mn:00007508                 public ??1system_error@std@@UAE@XZ
.text$mn:00007508 ??1system_error@std@@UAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0+3j
.text$mn:00007508                                         ; __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0+3j ...
.text$mn:00007508
.text$mn:00007508 var_10          = dword ptr -10h
.text$mn:00007508 var_C           = dword ptr -0Ch
.text$mn:00007508 var_4           = dword ptr -4
.text$mn:00007508
.text$mn:00007508                 push    ebp
.text$mn:00007509                 mov     ebp, esp
.text$mn:0000750B                 push    0FFFFFFFFh
.text$mn:0000750D                 push    offset __ehhandler$??1system_error@std@@UAE@XZ
.text$mn:00007512                 mov     eax, large fs:0
.text$mn:00007518                 push    eax
.text$mn:00007519                 push    ecx
.text$mn:0000751A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000751F                 xor     eax, ebp
.text$mn:00007521                 push    eax
.text$mn:00007522                 lea     eax, [ebp+var_C]
.text$mn:00007525                 mov     large fs:0, eax
.text$mn:0000752B                 mov     [ebp+var_10], ecx
.text$mn:0000752E                 mov     [ebp+var_4], 0
.text$mn:00007535                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000753C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000753F                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:00007544                 mov     ecx, [ebp+var_C]
.text$mn:00007547                 mov     large fs:0, ecx
.text$mn:0000754E                 pop     ecx
.text$mn:0000754F                 mov     esp, ebp
.text$mn:00007551                 pop     ebp
.text$mn:00007552                 retn
.text$mn:00007552 ??1system_error@std@@UAE@XZ endp
.text$mn:00007552
.text$mn:00007552 ; ---------------------------------------------------------------------------
.text$mn:00007553                 align 4
.text$mn:00007553 _text$mn        ends
.text$mn:00007553
.text$x:00007554 ; ===========================================================================
.text$x:00007554
.text$x:00007554 ; Segment type: Pure code
.text$x:00007554 ; Segment permissions: Read/Execute
.text$x:00007554 _text$x         segment para public 'CODE' use32
.text$x:00007554                 assume cs:_text$x
.text$x:00007554                 ;org 7554h
.text$x:00007554 ; COMDAT (pick associative to section at 7508)
.text$x:00007554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007554
.text$x:00007554 ; =============== S U B R O U T I N E =======================================
.text$x:00007554
.text$x:00007554
.text$x:00007554 __unwindfunclet$??1system_error@std@@UAE@XZ$0 proc near
.text$x:00007554                                         ; DATA XREF: .xdata$x:0000CEACo
.text$x:00007554                 mov     ecx, [ebp-10h]  ; this
.text$x:00007557                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:00007557 __unwindfunclet$??1system_error@std@@UAE@XZ$0 endp
.text$x:00007557
.text$x:0000755C
.text$x:0000755C ; =============== S U B R O U T I N E =======================================
.text$x:0000755C
.text$x:0000755C
.text$x:0000755C __ehhandler$??1system_error@std@@UAE@XZ proc near
.text$x:0000755C                                         ; DATA XREF: std::system_error::~system_error(void)+5o
.text$x:0000755C
.text$x:0000755C arg_4           = dword ptr  8
.text$x:0000755C
.text$x:0000755C                 mov     edx, [esp+arg_4]
.text$x:00007560                 lea     eax, [edx+0Ch]
.text$x:00007563                 mov     ecx, [edx-8]
.text$x:00007566                 xor     ecx, eax
.text$x:00007568                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000756D                 mov     eax, offset __ehfuncinfo$??1system_error@std@@UAE@XZ
.text$x:00007572                 jmp     ___CxxFrameHandler3
.text$x:00007572 __ehhandler$??1system_error@std@@UAE@XZ endp
.text$x:00007572
.text$x:00007572 ; ---------------------------------------------------------------------------
.text$x:00007577                 align 4
.text$x:00007577 _text$x         ends
.text$x:00007577
.text$mn:00007578 ; ===========================================================================
.text$mn:00007578
.text$mn:00007578 ; Segment type: Pure code
.text$mn:00007578 ; Segment permissions: Read/Execute
.text$mn:00007578 _text$mn        segment para public 'CODE' use32
.text$mn:00007578                 assume cs:_text$mn
.text$mn:00007578                 ;org 7578h
.text$mn:00007578 ; COMDAT (pick any)
.text$mn:00007578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007578
.text$mn:00007578 ; =============== S U B R O U T I N E =======================================
.text$mn:00007578
.text$mn:00007578 ; Attributes: bp-based frame
.text$mn:00007578
.text$mn:00007578 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00007578                 public ??2@YAPAXIPAX@Z
.text$mn:00007578 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00007578                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00007578
.text$mn:00007578 arg_4           = dword ptr  0Ch
.text$mn:00007578
.text$mn:00007578                 push    ebp
.text$mn:00007579                 mov     ebp, esp
.text$mn:0000757B                 mov     eax, [ebp+arg_4]
.text$mn:0000757E                 pop     ebp
.text$mn:0000757F                 retn
.text$mn:0000757F ??2@YAPAXIPAX@Z endp
.text$mn:0000757F
.text$mn:0000757F _text$mn        ends
.text$mn:0000757F
.text$mn:00007580 ; ===========================================================================
.text$mn:00007580
.text$mn:00007580 ; Segment type: Pure code
.text$mn:00007580 ; Segment permissions: Read/Execute
.text$mn:00007580 _text$mn        segment para public 'CODE' use32
.text$mn:00007580                 assume cs:_text$mn
.text$mn:00007580                 ;org 7580h
.text$mn:00007580 ; COMDAT (pick any)
.text$mn:00007580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007580
.text$mn:00007580 ; =============== S U B R O U T I N E =======================================
.text$mn:00007580
.text$mn:00007580 ; Attributes: bp-based frame
.text$mn:00007580
.text$mn:00007580 ; void *__cdecl std::locale::facet::operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
.text$mn:00007580                 public ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z
.text$mn:00007580 ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:00007580                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5Ap
.text$mn:00007580
.text$mn:00007580 arg_0           = dword ptr  8
.text$mn:00007580 arg_4           = dword ptr  0Ch
.text$mn:00007580 arg_8           = dword ptr  10h
.text$mn:00007580 arg_C           = dword ptr  14h
.text$mn:00007580
.text$mn:00007580                 push    ebp
.text$mn:00007581                 mov     ebp, esp
.text$mn:00007583                 mov     eax, [ebp+arg_C]
.text$mn:00007586                 push    eax             ; int
.text$mn:00007587                 mov     ecx, [ebp+arg_8]
.text$mn:0000758A                 push    ecx             ; char *
.text$mn:0000758B                 mov     edx, [ebp+arg_4]
.text$mn:0000758E                 push    edx             ; struct std::_DebugHeapTag_t *
.text$mn:0000758F                 mov     eax, [ebp+arg_0]
.text$mn:00007592                 push    eax             ; unsigned int
.text$mn:00007593                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00007598                 add     esp, 10h
.text$mn:0000759B                 pop     ebp
.text$mn:0000759C                 retn
.text$mn:0000759C ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:0000759C
.text$mn:0000759C ; ---------------------------------------------------------------------------
.text$mn:0000759D                 align 10h
.text$mn:0000759D _text$mn        ends
.text$mn:0000759D
.text$mn:000075A0 ; ===========================================================================
.text$mn:000075A0
.text$mn:000075A0 ; Segment type: Pure code
.text$mn:000075A0 ; Segment permissions: Read/Execute
.text$mn:000075A0 _text$mn        segment para public 'CODE' use32
.text$mn:000075A0                 assume cs:_text$mn
.text$mn:000075A0                 ;org 75A0h
.text$mn:000075A0 ; COMDAT (pick any)
.text$mn:000075A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075A0
.text$mn:000075A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075A0
.text$mn:000075A0 ; Attributes: bp-based frame
.text$mn:000075A0
.text$mn:000075A0 ; void __cdecl operator delete(void *)
.text$mn:000075A0                 public ??3@YAXPAX0@Z
.text$mn:000075A0 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:000075A0                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:000075A0                 push    ebp
.text$mn:000075A1                 mov     ebp, esp
.text$mn:000075A3                 pop     ebp
.text$mn:000075A4                 retn
.text$mn:000075A4 ??3@YAXPAX0@Z   endp
.text$mn:000075A4
.text$mn:000075A4 ; ---------------------------------------------------------------------------
.text$mn:000075A5                 align 4
.text$mn:000075A5 _text$mn        ends
.text$mn:000075A5
.text$mn:000075A8 ; ===========================================================================
.text$mn:000075A8
.text$mn:000075A8 ; Segment type: Pure code
.text$mn:000075A8 ; Segment permissions: Read/Execute
.text$mn:000075A8 _text$mn        segment para public 'CODE' use32
.text$mn:000075A8                 assume cs:_text$mn
.text$mn:000075A8                 ;org 75A8h
.text$mn:000075A8 ; COMDAT (pick any)
.text$mn:000075A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075A8
.text$mn:000075A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000075A8
.text$mn:000075A8 ; Attributes: bp-based frame
.text$mn:000075A8
.text$mn:000075A8 ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:000075A8                 public ??3facet@locale@std@@SAXPAX@Z
.text$mn:000075A8 ??3facet@locale@std@@SAXPAX@Z proc near ; CODE XREF: std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)+7p
.text$mn:000075A8                                         ; std::ctype<wchar_t>::`scalar deleting destructor'(uint)+1Bp ...
.text$mn:000075A8
.text$mn:000075A8 Memory          = dword ptr  8
.text$mn:000075A8
.text$mn:000075A8                 push    ebp
.text$mn:000075A9                 mov     ebp, esp
.text$mn:000075AB                 mov     eax, [ebp+Memory]
.text$mn:000075AE                 push    eax             ; Memory
.text$mn:000075AF                 call    ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)
.text$mn:000075B4                 add     esp, 4
.text$mn:000075B7                 pop     ebp
.text$mn:000075B8                 retn
.text$mn:000075B8 ??3facet@locale@std@@SAXPAX@Z endp
.text$mn:000075B8
.text$mn:000075B8 ; ---------------------------------------------------------------------------
.text$mn:000075B9                 align 4
.text$mn:000075B9 _text$mn        ends
.text$mn:000075B9
.text$mn:000075BC ; ===========================================================================
.text$mn:000075BC
.text$mn:000075BC ; Segment type: Pure code
.text$mn:000075BC ; Segment permissions: Read/Execute
.text$mn:000075BC _text$mn        segment para public 'CODE' use32
.text$mn:000075BC                 assume cs:_text$mn
.text$mn:000075BC                 ;org 75BCh
.text$mn:000075BC ; COMDAT (pick any)
.text$mn:000075BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075BC
.text$mn:000075BC ; =============== S U B R O U T I N E =======================================
.text$mn:000075BC
.text$mn:000075BC ; Attributes: bp-based frame
.text$mn:000075BC
.text$mn:000075BC ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:000075BC                 public ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z
.text$mn:000075BC ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:000075BC                                         ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+12p
.text$mn:000075BC
.text$mn:000075BC Memory          = dword ptr  8
.text$mn:000075BC
.text$mn:000075BC                 push    ebp
.text$mn:000075BD                 mov     ebp, esp
.text$mn:000075BF                 mov     eax, [ebp+Memory]
.text$mn:000075C2                 push    eax             ; Memory
.text$mn:000075C3                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:000075C8                 add     esp, 4
.text$mn:000075CB                 pop     ebp
.text$mn:000075CC                 retn
.text$mn:000075CC ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:000075CC
.text$mn:000075CC ; ---------------------------------------------------------------------------
.text$mn:000075CD                 align 10h
.text$mn:000075CD _text$mn        ends
.text$mn:000075CD
.text$mn:000075D0 ; ===========================================================================
.text$mn:000075D0
.text$mn:000075D0 ; Segment type: Pure code
.text$mn:000075D0 ; Segment permissions: Read/Execute
.text$mn:000075D0 _text$mn        segment para public 'CODE' use32
.text$mn:000075D0                 assume cs:_text$mn
.text$mn:000075D0                 ;org 75D0h
.text$mn:000075D0 ; COMDAT (pick any)
.text$mn:000075D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075D0
.text$mn:000075D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075D0
.text$mn:000075D0 ; Attributes: bp-based frame
.text$mn:000075D0
.text$mn:000075D0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000075D0                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:000075D0 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:000075D0                                         ; CODE XREF: TiXmlDeclaration::Clone(void)+8Fp
.text$mn:000075D0                                         ; TiXmlDeclaration::Clone(void)+A1p ...
.text$mn:000075D0
.text$mn:000075D0 var_8           = dword ptr -8
.text$mn:000075D0 var_3           = byte ptr -3
.text$mn:000075D0 var_2           = byte ptr -2
.text$mn:000075D0 var_1           = byte ptr -1
.text$mn:000075D0 arg_0           = dword ptr  8
.text$mn:000075D0
.text$mn:000075D0                 push    ebp
.text$mn:000075D1                 mov     ebp, esp
.text$mn:000075D3                 sub     esp, 8
.text$mn:000075D6                 mov     [ebp+var_8], ecx
.text$mn:000075D9                 mov     eax, [ebp+var_8]
.text$mn:000075DC                 cmp     eax, [ebp+arg_0]
.text$mn:000075DF                 jz      short loc_763B
.text$mn:000075E1                 lea     ecx, [ebp+var_1]
.text$mn:000075E4                 push    ecx
.text$mn:000075E5                 mov     ecx, [ebp+arg_0]
.text$mn:000075E8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000075ED                 push    eax
.text$mn:000075EE                 lea     edx, [ebp+var_2]
.text$mn:000075F1                 push    edx
.text$mn:000075F2                 mov     ecx, [ebp+var_8]
.text$mn:000075F5                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000075FA                 push    eax
.text$mn:000075FB                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00007600                 add     esp, 8
.text$mn:00007603                 movzx   eax, al
.text$mn:00007606                 test    eax, eax
.text$mn:00007608                 jz      short loc_762F
.text$mn:0000760A                 xor     ecx, ecx
.text$mn:0000760C                 jz      short loc_762F
.text$mn:0000760E                 push    0
.text$mn:00007610                 push    1
.text$mn:00007612                 mov     ecx, [ebp+var_8]
.text$mn:00007615                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000761A                 lea     edx, [ebp+var_3]
.text$mn:0000761D                 push    edx
.text$mn:0000761E                 mov     ecx, [ebp+arg_0]
.text$mn:00007621                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007626                 push    eax
.text$mn:00007627                 mov     ecx, [ebp+var_8]
.text$mn:0000762A                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:0000762F
.text$mn:0000762F loc_762F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:0000762F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:0000762F                 mov     eax, [ebp+arg_0]
.text$mn:00007632                 push    eax
.text$mn:00007633                 mov     ecx, [ebp+var_8]
.text$mn:00007636                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000763B
.text$mn:0000763B loc_763B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:0000763B                 mov     eax, [ebp+var_8]
.text$mn:0000763E                 mov     esp, ebp
.text$mn:00007640                 pop     ebp
.text$mn:00007641                 retn    4
.text$mn:00007641 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00007641
.text$mn:00007641 _text$mn        ends
.text$mn:00007641
.text$mn:00007644 ; ===========================================================================
.text$mn:00007644
.text$mn:00007644 ; Segment type: Pure code
.text$mn:00007644 ; Segment permissions: Read/Execute
.text$mn:00007644 _text$mn        segment para public 'CODE' use32
.text$mn:00007644                 assume cs:_text$mn
.text$mn:00007644                 ;org 7644h
.text$mn:00007644 ; COMDAT (pick any)
.text$mn:00007644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007644
.text$mn:00007644 ; =============== S U B R O U T I N E =======================================
.text$mn:00007644
.text$mn:00007644 ; Attributes: bp-based frame
.text$mn:00007644
.text$mn:00007644 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00007644                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00007644 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00007644                                         ; CODE XREF: TiXmlElement::TiXmlElement(wchar_t const *)+6Dp
.text$mn:00007644                                         ; TiXmlDeclaration::TiXmlDeclaration(wchar_t const *,wchar_t const *,wchar_t const *)+77p ...
.text$mn:00007644
.text$mn:00007644 var_4           = dword ptr -4
.text$mn:00007644 Str             = dword ptr  8
.text$mn:00007644
.text$mn:00007644                 push    ebp
.text$mn:00007645                 mov     ebp, esp
.text$mn:00007647                 push    ecx
.text$mn:00007648                 mov     [ebp+var_4], ecx
.text$mn:0000764B                 mov     eax, [ebp+Str]
.text$mn:0000764E                 push    eax             ; Str
.text$mn:0000764F                 mov     ecx, [ebp+var_4]
.text$mn:00007652                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00007657                 mov     esp, ebp
.text$mn:00007659                 pop     ebp
.text$mn:0000765A                 retn    4
.text$mn:0000765A ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:0000765A
.text$mn:0000765A ; ---------------------------------------------------------------------------
.text$mn:0000765D                 align 10h
.text$mn:0000765D _text$mn        ends
.text$mn:0000765D
.text$mn:00007660 ; ===========================================================================
.text$mn:00007660
.text$mn:00007660 ; Segment type: Pure code
.text$mn:00007660 ; Segment permissions: Read/Execute
.text$mn:00007660 _text$mn        segment para public 'CODE' use32
.text$mn:00007660                 assume cs:_text$mn
.text$mn:00007660                 ;org 7660h
.text$mn:00007660 ; COMDAT (pick any)
.text$mn:00007660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007660
.text$mn:00007660 ; =============== S U B R O U T I N E =======================================
.text$mn:00007660
.text$mn:00007660 ; Attributes: bp-based frame
.text$mn:00007660
.text$mn:00007660 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00007660                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00007660 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00007660                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00007660                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00007660
.text$mn:00007660 var_8           = dword ptr -8
.text$mn:00007660 var_4           = dword ptr -4
.text$mn:00007660 arg_0           = dword ptr  8
.text$mn:00007660
.text$mn:00007660                 push    ebp
.text$mn:00007661                 mov     ebp, esp
.text$mn:00007663                 sub     esp, 8
.text$mn:00007666                 mov     [ebp+var_8], ecx
.text$mn:00007669                 mov     eax, [ebp+var_8]
.text$mn:0000766C                 cmp     eax, [ebp+arg_0]
.text$mn:0000766F                 jnz     short loc_767A
.text$mn:00007671                 mov     [ebp+var_4], 1
.text$mn:00007678                 jmp     short loc_7681
.text$mn:0000767A ; ---------------------------------------------------------------------------
.text$mn:0000767A
.text$mn:0000767A loc_767A:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000767A                 mov     [ebp+var_4], 0
.text$mn:00007681
.text$mn:00007681 loc_7681:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00007681                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007684                 mov     esp, ebp
.text$mn:00007686                 pop     ebp
.text$mn:00007687                 retn    4
.text$mn:00007687 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00007687
.text$mn:00007687 ; ---------------------------------------------------------------------------
.text$mn:0000768A                 align 4
.text$mn:0000768A _text$mn        ends
.text$mn:0000768A
.text$mn:0000768C ; ===========================================================================
.text$mn:0000768C
.text$mn:0000768C ; Segment type: Pure code
.text$mn:0000768C ; Segment permissions: Read/Execute
.text$mn:0000768C _text$mn        segment para public 'CODE' use32
.text$mn:0000768C                 assume cs:_text$mn
.text$mn:0000768C                 ;org 768Ch
.text$mn:0000768C ; COMDAT (pick any)
.text$mn:0000768C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000768C
.text$mn:0000768C ; =============== S U B R O U T I N E =======================================
.text$mn:0000768C
.text$mn:0000768C ; Attributes: bp-based frame
.text$mn:0000768C
.text$mn:0000768C ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:0000768C                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:0000768C ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:0000768C                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:0000768C
.text$mn:0000768C var_8           = dword ptr -8
.text$mn:0000768C var_4           = dword ptr -4
.text$mn:0000768C arg_0           = dword ptr  8
.text$mn:0000768C
.text$mn:0000768C                 push    ebp
.text$mn:0000768D                 mov     ebp, esp
.text$mn:0000768F                 sub     esp, 8
.text$mn:00007692                 push    esi
.text$mn:00007693                 mov     [ebp+var_4], ecx
.text$mn:00007696                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007699                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000769E                 push    eax
.text$mn:0000769F                 mov     ecx, [ebp+var_4] ; this
.text$mn:000076A2                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:000076A7                 mov     ecx, eax
.text$mn:000076A9                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:000076AE                 movzx   eax, al
.text$mn:000076B1                 test    eax, eax
.text$mn:000076B3                 jz      short loc_76D4
.text$mn:000076B5                 mov     ecx, [ebp+var_4] ; this
.text$mn:000076B8                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:000076BD                 mov     esi, eax
.text$mn:000076BF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000076C2                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:000076C7                 cmp     esi, eax
.text$mn:000076C9                 jnz     short loc_76D4
.text$mn:000076CB                 mov     [ebp+var_8], 1
.text$mn:000076D2                 jmp     short loc_76DB
.text$mn:000076D4 ; ---------------------------------------------------------------------------
.text$mn:000076D4
.text$mn:000076D4 loc_76D4:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:000076D4                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:000076D4                 mov     [ebp+var_8], 0
.text$mn:000076DB
.text$mn:000076DB loc_76DB:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:000076DB                 mov     al, byte ptr [ebp+var_8]
.text$mn:000076DE                 pop     esi
.text$mn:000076DF                 mov     esp, ebp
.text$mn:000076E1                 pop     ebp
.text$mn:000076E2                 retn    4
.text$mn:000076E2 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:000076E2
.text$mn:000076E2 ; ---------------------------------------------------------------------------
.text$mn:000076E5                 align 4
.text$mn:000076E5 _text$mn        ends
.text$mn:000076E5
.text$mn:000076E8 ; ===========================================================================
.text$mn:000076E8
.text$mn:000076E8 ; Segment type: Pure code
.text$mn:000076E8 ; Segment permissions: Read/Execute
.text$mn:000076E8 _text$mn        segment para public 'CODE' use32
.text$mn:000076E8                 assume cs:_text$mn
.text$mn:000076E8                 ;org 76E8h
.text$mn:000076E8 ; COMDAT (pick any)
.text$mn:000076E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076E8
.text$mn:000076E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000076E8
.text$mn:000076E8 ; Attributes: bp-based frame
.text$mn:000076E8
.text$mn:000076E8 ; public: wchar_t const & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator[](unsigned int)const
.text$mn:000076E8                 public ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
.text$mn:000076E8 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z proc near
.text$mn:000076E8                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+2Fp
.text$mn:000076E8                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Ep ...
.text$mn:000076E8
.text$mn:000076E8 var_4           = dword ptr -4
.text$mn:000076E8 arg_0           = dword ptr  8
.text$mn:000076E8
.text$mn:000076E8                 push    ebp
.text$mn:000076E9                 mov     ebp, esp
.text$mn:000076EB                 push    ecx
.text$mn:000076EC                 mov     [ebp+var_4], ecx
.text$mn:000076EF                 mov     eax, [ebp+var_4]
.text$mn:000076F2                 mov     ecx, [eax+14h]
.text$mn:000076F5                 cmp     ecx, [ebp+arg_0]
.text$mn:000076F8                 jnb     short loc_7711
.text$mn:000076FA                 push    6A2h            ; unsigned int
.text$mn:000076FF                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007704                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:00007709                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000770E                 add     esp, 0Ch
.text$mn:00007711
.text$mn:00007711 loc_7711:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+10j
.text$mn:00007711                 mov     ecx, [ebp+var_4]
.text$mn:00007714                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007719                 mov     edx, [ebp+arg_0]
.text$mn:0000771C                 lea     eax, [eax+edx*2]
.text$mn:0000771F                 mov     esp, ebp
.text$mn:00007721                 pop     ebp
.text$mn:00007722                 retn    4
.text$mn:00007722 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z endp
.text$mn:00007722
.text$mn:00007722 ; ---------------------------------------------------------------------------
.text$mn:00007725                 align 4
.text$mn:00007725 _text$mn        ends
.text$mn:00007725
.text$mn:00007728 ; ===========================================================================
.text$mn:00007728
.text$mn:00007728 ; Segment type: Pure code
.text$mn:00007728 ; Segment permissions: Read/Execute
.text$mn:00007728 _text$mn        segment para public 'CODE' use32
.text$mn:00007728                 assume cs:_text$mn
.text$mn:00007728                 ;org 7728h
.text$mn:00007728 ; COMDAT (pick any)
.text$mn:00007728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007728
.text$mn:00007728 ; =============== S U B R O U T I N E =======================================
.text$mn:00007728
.text$mn:00007728 ; Attributes: bp-based frame
.text$mn:00007728
.text$mn:00007728 ; public: __thiscall std::fpos<int>::operator __int64(void)const
.text$mn:00007728                 public ??B?$fpos@H@std@@QBE_JXZ
.text$mn:00007728 ??B?$fpos@H@std@@QBE_JXZ proc near      ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+Dp
.text$mn:00007728
.text$mn:00007728 var_4           = dword ptr -4
.text$mn:00007728
.text$mn:00007728                 push    ebp
.text$mn:00007729                 mov     ebp, esp
.text$mn:0000772B                 push    ecx
.text$mn:0000772C                 push    esi
.text$mn:0000772D                 mov     [ebp+var_4], ecx
.text$mn:00007730                 mov     eax, [ebp+var_4]
.text$mn:00007733                 mov     ecx, [ebp+var_4]
.text$mn:00007736                 mov     edx, [eax]
.text$mn:00007738                 add     edx, [ecx+8]
.text$mn:0000773B                 mov     esi, [eax+4]
.text$mn:0000773E                 adc     esi, [ecx+0Ch]
.text$mn:00007741                 mov     eax, edx
.text$mn:00007743                 mov     edx, esi
.text$mn:00007745                 pop     esi
.text$mn:00007746                 mov     esp, ebp
.text$mn:00007748                 pop     ebp
.text$mn:00007749                 retn
.text$mn:00007749 ??B?$fpos@H@std@@QBE_JXZ endp
.text$mn:00007749
.text$mn:00007749 ; ---------------------------------------------------------------------------
.text$mn:0000774A                 align 4
.text$mn:0000774A _text$mn        ends
.text$mn:0000774A
.text$mn:0000774C ; ===========================================================================
.text$mn:0000774C
.text$mn:0000774C ; Segment type: Pure code
.text$mn:0000774C ; Segment permissions: Read/Execute
.text$mn:0000774C _text$mn        segment para public 'CODE' use32
.text$mn:0000774C                 assume cs:_text$mn
.text$mn:0000774C                 ;org 774Ch
.text$mn:0000774C ; COMDAT (pick any)
.text$mn:0000774C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000774C
.text$mn:0000774C ; =============== S U B R O U T I N E =======================================
.text$mn:0000774C
.text$mn:0000774C ; Attributes: bp-based frame
.text$mn:0000774C
.text$mn:0000774C ; public: __thiscall std::locale::id::operator unsigned int(void)
.text$mn:0000774C                 public ??Bid@locale@std@@QAEIXZ
.text$mn:0000774C ??Bid@locale@std@@QAEIXZ proc near      ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+43p
.text$mn:0000774C
.text$mn:0000774C var_14          = byte ptr -14h
.text$mn:0000774C var_10          = dword ptr -10h
.text$mn:0000774C var_C           = dword ptr -0Ch
.text$mn:0000774C var_4           = dword ptr -4
.text$mn:0000774C
.text$mn:0000774C                 push    ebp
.text$mn:0000774D                 mov     ebp, esp
.text$mn:0000774F                 push    0FFFFFFFFh
.text$mn:00007751                 push    offset __ehhandler$??Bid@locale@std@@QAEIXZ
.text$mn:00007756                 mov     eax, large fs:0
.text$mn:0000775C                 push    eax
.text$mn:0000775D                 sub     esp, 8
.text$mn:00007760                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007765                 xor     eax, ebp
.text$mn:00007767                 push    eax
.text$mn:00007768                 lea     eax, [ebp+var_C]
.text$mn:0000776B                 mov     large fs:0, eax
.text$mn:00007771                 mov     [ebp+var_10], ecx
.text$mn:00007774                 mov     eax, [ebp+var_10]
.text$mn:00007777                 cmp     dword ptr [eax], 0
.text$mn:0000777A                 jnz     short loc_77BE
.text$mn:0000777C                 push    0               ; int
.text$mn:0000777E                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007781                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007786                 mov     [ebp+var_4], 0
.text$mn:0000778D                 mov     ecx, [ebp+var_10]
.text$mn:00007790                 cmp     dword ptr [ecx], 0
.text$mn:00007793                 jnz     short loc_77AF
.text$mn:00007795                 mov     edx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:0000779B                 add     edx, 1
.text$mn:0000779E                 mov     dword ptr ds:?_Id_cnt@id@locale@std@@0HA, edx ; int std::locale::id::_Id_cnt
.text$mn:000077A4                 mov     eax, [ebp+var_10]
.text$mn:000077A7                 mov     ecx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:000077AD                 mov     [eax], ecx
.text$mn:000077AF
.text$mn:000077AF loc_77AF:                               ; CODE XREF: std::locale::id::operator uint(void)+47j
.text$mn:000077AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000077B6                 lea     ecx, [ebp+var_14] ; this
.text$mn:000077B9                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000077BE
.text$mn:000077BE loc_77BE:                               ; CODE XREF: std::locale::id::operator uint(void)+2Ej
.text$mn:000077BE                 mov     edx, [ebp+var_10]
.text$mn:000077C1                 mov     eax, [edx]
.text$mn:000077C3                 mov     ecx, [ebp+var_C]
.text$mn:000077C6                 mov     large fs:0, ecx
.text$mn:000077CD                 pop     ecx
.text$mn:000077CE                 mov     esp, ebp
.text$mn:000077D0                 pop     ebp
.text$mn:000077D1                 retn
.text$mn:000077D1 ??Bid@locale@std@@QAEIXZ endp
.text$mn:000077D1
.text$mn:000077D1 ; ---------------------------------------------------------------------------
.text$mn:000077D2                 align 4
.text$mn:000077D2 _text$mn        ends
.text$mn:000077D2
.text$x:000077D4 ; ===========================================================================
.text$x:000077D4
.text$x:000077D4 ; Segment type: Pure code
.text$x:000077D4 ; Segment permissions: Read/Execute
.text$x:000077D4 _text$x         segment para public 'CODE' use32
.text$x:000077D4                 assume cs:_text$x
.text$x:000077D4                 ;org 77D4h
.text$x:000077D4 ; COMDAT (pick associative to section at 774C)
.text$x:000077D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000077D4
.text$x:000077D4 ; =============== S U B R O U T I N E =======================================
.text$x:000077D4
.text$x:000077D4
.text$x:000077D4 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 proc near
.text$x:000077D4                                         ; DATA XREF: .xdata$x:0000CBFCo
.text$x:000077D4                 lea     ecx, [ebp-14h]  ; this
.text$x:000077D7                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000077D7 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 endp
.text$x:000077D7
.text$x:000077DC
.text$x:000077DC ; =============== S U B R O U T I N E =======================================
.text$x:000077DC
.text$x:000077DC
.text$x:000077DC __ehhandler$??Bid@locale@std@@QAEIXZ proc near
.text$x:000077DC                                         ; DATA XREF: std::locale::id::operator uint(void)+5o
.text$x:000077DC
.text$x:000077DC arg_4           = dword ptr  8
.text$x:000077DC
.text$x:000077DC                 mov     edx, [esp+arg_4]
.text$x:000077E0                 lea     eax, [edx+0Ch]
.text$x:000077E3                 mov     ecx, [edx-0Ch]
.text$x:000077E6                 xor     ecx, eax
.text$x:000077E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000077ED                 mov     eax, offset __ehfuncinfo$??Bid@locale@std@@QAEIXZ
.text$x:000077F2                 jmp     ___CxxFrameHandler3
.text$x:000077F2 __ehhandler$??Bid@locale@std@@QAEIXZ endp
.text$x:000077F2
.text$x:000077F2 ; ---------------------------------------------------------------------------
.text$x:000077F7                 align 4
.text$x:000077F7 _text$x         ends
.text$x:000077F7
.text$mn:000077F8 ; ===========================================================================
.text$mn:000077F8
.text$mn:000077F8 ; Segment type: Pure code
.text$mn:000077F8 ; Segment permissions: Read/Execute
.text$mn:000077F8 _text$mn        segment para public 'CODE' use32
.text$mn:000077F8                 assume cs:_text$mn
.text$mn:000077F8                 ;org 77F8h
.text$mn:000077F8 ; COMDAT (pick any)
.text$mn:000077F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077F8
.text$mn:000077F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000077F8
.text$mn:000077F8 ; Attributes: bp-based frame
.text$mn:000077F8
.text$mn:000077F8 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::operator bool(void)const
.text$mn:000077F8                 public ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
.text$mn:000077F8 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ proc near
.text$mn:000077F8                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+DCp
.text$mn:000077F8                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+B8p ...
.text$mn:000077F8
.text$mn:000077F8 var_4           = dword ptr -4
.text$mn:000077F8
.text$mn:000077F8                 push    ebp
.text$mn:000077F9                 mov     ebp, esp
.text$mn:000077FB                 push    ecx
.text$mn:000077FC                 mov     [ebp+var_4], ecx
.text$mn:000077FF                 mov     eax, [ebp+var_4]
.text$mn:00007802                 mov     al, [eax+4]
.text$mn:00007805                 mov     esp, ebp
.text$mn:00007807                 pop     ebp
.text$mn:00007808                 retn
.text$mn:00007808 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ endp
.text$mn:00007808
.text$mn:00007808 ; ---------------------------------------------------------------------------
.text$mn:00007809                 align 4
.text$mn:00007809 _text$mn        ends
.text$mn:00007809
.text$mn:0000780C ; ===========================================================================
.text$mn:0000780C
.text$mn:0000780C ; Segment type: Pure code
.text$mn:0000780C ; Segment permissions: Read/Execute
.text$mn:0000780C _text$mn        segment para public 'CODE' use32
.text$mn:0000780C                 assume cs:_text$mn
.text$mn:0000780C                 ;org 780Ch
.text$mn:0000780C ; COMDAT (pick any)
.text$mn:0000780C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000780C
.text$mn:0000780C ; =============== S U B R O U T I N E =======================================
.text$mn:0000780C
.text$mn:0000780C ; Attributes: bp-based frame
.text$mn:0000780C
.text$mn:0000780C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:0000780C                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:0000780C ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:0000780C                                         ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+14Dp
.text$mn:0000780C
.text$mn:0000780C var_4           = dword ptr -4
.text$mn:0000780C Str             = dword ptr  8
.text$mn:0000780C
.text$mn:0000780C                 push    ebp
.text$mn:0000780D                 mov     ebp, esp
.text$mn:0000780F                 push    ecx
.text$mn:00007810                 mov     [ebp+var_4], ecx
.text$mn:00007813                 mov     eax, [ebp+Str]
.text$mn:00007816                 push    eax             ; Str
.text$mn:00007817                 mov     ecx, [ebp+var_4]
.text$mn:0000781A                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:0000781F                 mov     esp, ebp
.text$mn:00007821                 pop     ebp
.text$mn:00007822                 retn    4
.text$mn:00007822 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00007822
.text$mn:00007822 ; ---------------------------------------------------------------------------
.text$mn:00007825                 align 4
.text$mn:00007825 _text$mn        ends
.text$mn:00007825
.text$mn:00007828 ; ===========================================================================
.text$mn:00007828
.text$mn:00007828 ; Segment type: Pure code
.text$mn:00007828 ; Segment permissions: Read/Execute
.text$mn:00007828 _text$mn        segment para public 'CODE' use32
.text$mn:00007828                 assume cs:_text$mn
.text$mn:00007828                 ;org 7828h
.text$mn:00007828 ; COMDAT (pick any)
.text$mn:00007828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007828
.text$mn:00007828 ; =============== S U B R O U T I N E =======================================
.text$mn:00007828
.text$mn:00007828 ; Attributes: bp-based frame
.text$mn:00007828
.text$mn:00007828 ; public: void __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`vbase destructor(void)
.text$mn:00007828                 public ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00007828 ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ proc near
.text$mn:00007828                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`scalar deleting destructor'(uint)+Dp
.text$mn:00007828
.text$mn:00007828 var_4           = dword ptr -4
.text$mn:00007828
.text$mn:00007828                 push    ebp
.text$mn:00007829                 mov     ebp, esp
.text$mn:0000782B                 push    ecx
.text$mn:0000782C                 mov     [ebp+var_4], ecx
.text$mn:0000782F                 mov     ecx, [ebp+var_4]
.text$mn:00007832                 add     ecx, 8
.text$mn:00007835                 call    ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::~basic_ostream<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:0000783A                 mov     ecx, [ebp+var_4]
.text$mn:0000783D                 add     ecx, 8
.text$mn:00007840                 call    ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:00007845                 mov     esp, ebp
.text$mn:00007847                 pop     ebp
.text$mn:00007848                 retn
.text$mn:00007848 ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ endp
.text$mn:00007848
.text$mn:00007848 ; ---------------------------------------------------------------------------
.text$mn:00007849                 align 4
.text$mn:00007849 _text$mn        ends
.text$mn:00007849
.text$mn:0000784C ; ===========================================================================
.text$mn:0000784C
.text$mn:0000784C ; Segment type: Pure code
.text$mn:0000784C ; Segment permissions: Read/Execute
.text$mn:0000784C _text$mn        segment para public 'CODE' use32
.text$mn:0000784C                 assume cs:_text$mn
.text$mn:0000784C                 ;org 784Ch
.text$mn:0000784C ; COMDAT (pick any)
.text$mn:0000784C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000784C
.text$mn:0000784C ; =============== S U B R O U T I N E =======================================
.text$mn:0000784C
.text$mn:0000784C ; Attributes: bp-based frame
.text$mn:0000784C
.text$mn:0000784C ; public: void __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vbase destructor(void)
.text$mn:0000784C                 public ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
.text$mn:0000784C ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ proc near
.text$mn:0000784C                                         ; CODE XREF: operator<<(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,TiXmlNode const &)+9Cp
.text$mn:0000784C                                         ; __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$0+6j ...
.text$mn:0000784C
.text$mn:0000784C var_4           = dword ptr -4
.text$mn:0000784C
.text$mn:0000784C                 push    ebp
.text$mn:0000784D                 mov     ebp, esp
.text$mn:0000784F                 push    ecx
.text$mn:00007850                 mov     [ebp+var_4], ecx
.text$mn:00007853                 mov     ecx, [ebp+var_4]
.text$mn:00007856                 add     ecx, 50h ; 'P'
.text$mn:00007859                 call    ??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000785E                 mov     ecx, [ebp+var_4]
.text$mn:00007861                 add     ecx, 50h ; 'P'
.text$mn:00007864                 call    ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:00007869                 mov     esp, ebp
.text$mn:0000786B                 pop     ebp
.text$mn:0000786C                 retn
.text$mn:0000786C ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ endp
.text$mn:0000786C
.text$mn:0000786C ; ---------------------------------------------------------------------------
.text$mn:0000786D                 align 10h
.text$mn:0000786D _text$mn        ends
.text$mn:0000786D
.text$mn:00007870 ; ===========================================================================
.text$mn:00007870
.text$mn:00007870 ; Segment type: Pure code
.text$mn:00007870 ; Segment permissions: Read/Execute
.text$mn:00007870 _text$mn        segment byte public 'CODE' use32
.text$mn:00007870                 assume cs:_text$mn
.text$mn:00007870                 ;org 7870h
.text$mn:00007870 ; COMDAT (pick any)
.text$mn:00007870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007870
.text$mn:00007870 ; =============== S U B R O U T I N E =======================================
.text$mn:00007870
.text$mn:00007870
.text$mn:00007870 ; [thunk]:public: virtual void * __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292, 0}' (unsigned int)
.text$mn:00007870                 public ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
.text$mn:00007870 ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
.text$mn:00007870                                         ; DATA XREF: .rdata:const std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vftable'o
.text$mn:00007870                 sub     ecx, [ecx-4]
.text$mn:00007873                 jmp     ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vector deleting destructor'(uint)
.text$mn:00007873 ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z endp
.text$mn:00007873
.text$mn:00007873 _text$mn        ends
.text$mn:00007873
.text$mn:00007878 ; ===========================================================================
.text$mn:00007878
.text$mn:00007878 ; Segment type: Pure code
.text$mn:00007878 ; Segment permissions: Read/Execute
.text$mn:00007878 _text$mn        segment byte public 'CODE' use32
.text$mn:00007878                 assume cs:_text$mn
.text$mn:00007878                 ;org 7878h
.text$mn:00007878 ; COMDAT (pick any)
.text$mn:00007878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007878
.text$mn:00007878 ; =============== S U B R O U T I N E =======================================
.text$mn:00007878
.text$mn:00007878
.text$mn:00007878 ; [thunk]:public: virtual void * __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292, 0}' (unsigned int)
.text$mn:00007878                 public ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
.text$mn:00007878 ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
.text$mn:00007878                                         ; DATA XREF: .rdata:const std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'o
.text$mn:00007878                 sub     ecx, [ecx-4]
.text$mn:0000787B                 jmp     ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vector deleting destructor'(uint)
.text$mn:0000787B ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z endp
.text$mn:0000787B
.text$mn:0000787B _text$mn        ends
.text$mn:0000787B
.text$mn:00007880 ; ===========================================================================
.text$mn:00007880
.text$mn:00007880 ; Segment type: Pure code
.text$mn:00007880 ; Segment permissions: Read/Execute
.text$mn:00007880 _text$mn        segment para public 'CODE' use32
.text$mn:00007880                 assume cs:_text$mn
.text$mn:00007880                 ;org 7880h
.text$mn:00007880 ; COMDAT (pick any)
.text$mn:00007880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007880
.text$mn:00007880 ; =============== S U B R O U T I N E =======================================
.text$mn:00007880
.text$mn:00007880 ; Attributes: bp-based frame
.text$mn:00007880
.text$mn:00007880 ; public: virtual void * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00007880                 public ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
.text$mn:00007880 ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z proc near
.text$mn:00007880
.text$mn:00007880 var_4           = dword ptr -4
.text$mn:00007880 arg_0           = dword ptr  8
.text$mn:00007880
.text$mn:00007880                 push    ebp
.text$mn:00007881                 mov     ebp, esp
.text$mn:00007883                 push    ecx
.text$mn:00007884                 mov     [ebp+var_4], ecx
.text$mn:00007887                 mov     ecx, [ebp+var_4]
.text$mn:0000788A                 call    ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:0000788F                 mov     eax, [ebp+arg_0]
.text$mn:00007892                 and     eax, 1
.text$mn:00007895                 jz      short loc_78A3
.text$mn:00007897                 mov     ecx, [ebp+var_4]
.text$mn:0000789A                 push    ecx             ; void *
.text$mn:0000789B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000078A0                 add     esp, 4
.text$mn:000078A3
.text$mn:000078A3 loc_78A3:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:000078A3                 mov     eax, [ebp+var_4]
.text$mn:000078A6                 mov     esp, ebp
.text$mn:000078A8                 pop     ebp
.text$mn:000078A9                 retn    4
.text$mn:000078A9 ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z endp
.text$mn:000078A9
.text$mn:000078A9 _text$mn        ends
.text$mn:000078A9
.text$mn:000078AC ; ===========================================================================
.text$mn:000078AC
.text$mn:000078AC ; Segment type: Pure code
.text$mn:000078AC ; Segment permissions: Read/Execute
.text$mn:000078AC _text$mn        segment para public 'CODE' use32
.text$mn:000078AC                 assume cs:_text$mn
.text$mn:000078AC                 ;org 78ACh
.text$mn:000078AC ; COMDAT (pick any)
.text$mn:000078AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078AC
.text$mn:000078AC ; =============== S U B R O U T I N E =======================================
.text$mn:000078AC
.text$mn:000078AC ; Attributes: bp-based frame
.text$mn:000078AC
.text$mn:000078AC ; public: virtual void * __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:000078AC                 public ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
.text$mn:000078AC ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z proc near
.text$mn:000078AC
.text$mn:000078AC var_4           = dword ptr -4
.text$mn:000078AC arg_0           = dword ptr  8
.text$mn:000078AC
.text$mn:000078AC                 push    ebp
.text$mn:000078AD                 mov     ebp, esp
.text$mn:000078AF                 push    ecx
.text$mn:000078B0                 mov     [ebp+var_4], ecx
.text$mn:000078B3                 mov     ecx, [ebp+var_4]
.text$mn:000078B6                 sub     ecx, 8
.text$mn:000078B9                 call    ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vbase destructor(void)
.text$mn:000078BE                 mov     eax, [ebp+arg_0]
.text$mn:000078C1                 and     eax, 1
.text$mn:000078C4                 jz      short loc_78D5
.text$mn:000078C6                 mov     ecx, [ebp+var_4]
.text$mn:000078C9                 sub     ecx, 8
.text$mn:000078CC                 push    ecx             ; void *
.text$mn:000078CD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000078D2                 add     esp, 4
.text$mn:000078D5
.text$mn:000078D5 loc_78D5:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`scalar deleting destructor'(uint)+18j
.text$mn:000078D5                 mov     eax, [ebp+var_4]
.text$mn:000078D8                 sub     eax, 8
.text$mn:000078DB                 mov     esp, ebp
.text$mn:000078DD                 pop     ebp
.text$mn:000078DE                 retn    4
.text$mn:000078DE ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z endp
.text$mn:000078DE
.text$mn:000078DE ; ---------------------------------------------------------------------------
.text$mn:000078E1                 align 4
.text$mn:000078E1 _text$mn        ends
.text$mn:000078E1
.text$mn:000078E4 ; ===========================================================================
.text$mn:000078E4
.text$mn:000078E4 ; Segment type: Pure code
.text$mn:000078E4 ; Segment permissions: Read/Execute
.text$mn:000078E4 _text$mn        segment para public 'CODE' use32
.text$mn:000078E4                 assume cs:_text$mn
.text$mn:000078E4                 ;org 78E4h
.text$mn:000078E4 ; COMDAT (pick any)
.text$mn:000078E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078E4
.text$mn:000078E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000078E4
.text$mn:000078E4 ; Attributes: bp-based frame
.text$mn:000078E4
.text$mn:000078E4 ; public: virtual void * __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:000078E4                 public ??_G?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
.text$mn:000078E4 ??_G?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z proc near
.text$mn:000078E4
.text$mn:000078E4 var_4           = dword ptr -4
.text$mn:000078E4 arg_0           = dword ptr  8
.text$mn:000078E4
.text$mn:000078E4                 push    ebp
.text$mn:000078E5                 mov     ebp, esp
.text$mn:000078E7                 push    ecx
.text$mn:000078E8                 mov     [ebp+var_4], ecx
.text$mn:000078EB                 mov     ecx, [ebp+var_4]
.text$mn:000078EE                 sub     ecx, 50h ; 'P'
.text$mn:000078F1                 call    ??_D?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vbase destructor(void)
.text$mn:000078F6                 mov     eax, [ebp+arg_0]
.text$mn:000078F9                 and     eax, 1
.text$mn:000078FC                 jz      short loc_790D
.text$mn:000078FE                 mov     ecx, [ebp+var_4]
.text$mn:00007901                 sub     ecx, 50h ; 'P'
.text$mn:00007904                 push    ecx             ; void *
.text$mn:00007905                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000790A                 add     esp, 4
.text$mn:0000790D
.text$mn:0000790D loc_790D:                               ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+18j
.text$mn:0000790D                 mov     eax, [ebp+var_4]
.text$mn:00007910                 sub     eax, 50h ; 'P'
.text$mn:00007913                 mov     esp, ebp
.text$mn:00007915                 pop     ebp
.text$mn:00007916                 retn    4
.text$mn:00007916 ??_G?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z endp
.text$mn:00007916
.text$mn:00007916 ; ---------------------------------------------------------------------------
.text$mn:00007919                 align 4
.text$mn:00007919 _text$mn        ends
.text$mn:00007919
.text$mn:0000791C ; ===========================================================================
.text$mn:0000791C
.text$mn:0000791C ; Segment type: Pure code
.text$mn:0000791C ; Segment permissions: Read/Execute
.text$mn:0000791C _text$mn        segment para public 'CODE' use32
.text$mn:0000791C                 assume cs:_text$mn
.text$mn:0000791C                 ;org 791Ch
.text$mn:0000791C ; COMDAT (pick any)
.text$mn:0000791C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000791C
.text$mn:0000791C ; =============== S U B R O U T I N E =======================================
.text$mn:0000791C
.text$mn:0000791C ; Attributes: bp-based frame
.text$mn:0000791C
.text$mn:0000791C ; public: virtual void * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:0000791C                 public ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
.text$mn:0000791C ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z proc near
.text$mn:0000791C
.text$mn:0000791C var_4           = dword ptr -4
.text$mn:0000791C arg_0           = dword ptr  8
.text$mn:0000791C
.text$mn:0000791C                 push    ebp
.text$mn:0000791D                 mov     ebp, esp
.text$mn:0000791F                 push    ecx
.text$mn:00007920                 mov     [ebp+var_4], ecx
.text$mn:00007923                 mov     ecx, [ebp+var_4]
.text$mn:00007926                 call    ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)
.text$mn:0000792B                 mov     eax, [ebp+arg_0]
.text$mn:0000792E                 and     eax, 1
.text$mn:00007931                 jz      short loc_793F
.text$mn:00007933                 mov     ecx, [ebp+var_4]
.text$mn:00007936                 push    ecx             ; void *
.text$mn:00007937                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000793C                 add     esp, 4
.text$mn:0000793F
.text$mn:0000793F loc_793F:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:0000793F                 mov     eax, [ebp+var_4]
.text$mn:00007942                 mov     esp, ebp
.text$mn:00007944                 pop     ebp
.text$mn:00007945                 retn    4
.text$mn:00007945 ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z endp
.text$mn:00007945
.text$mn:00007945 _text$mn        ends
.text$mn:00007945
.text$mn:00007948 ; ===========================================================================
.text$mn:00007948
.text$mn:00007948 ; Segment type: Pure code
.text$mn:00007948 ; Segment permissions: Read/Execute
.text$mn:00007948 _text$mn        segment para public 'CODE' use32
.text$mn:00007948                 assume cs:_text$mn
.text$mn:00007948                 ;org 7948h
.text$mn:00007948 ; COMDAT (pick any)
.text$mn:00007948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007948
.text$mn:00007948 ; =============== S U B R O U T I N E =======================================
.text$mn:00007948
.text$mn:00007948 ; Attributes: bp-based frame
.text$mn:00007948
.text$mn:00007948 ; public: virtual void * __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00007948                 public ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
.text$mn:00007948 ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z proc near
.text$mn:00007948
.text$mn:00007948 var_4           = dword ptr -4
.text$mn:00007948 arg_0           = dword ptr  8
.text$mn:00007948
.text$mn:00007948                 push    ebp
.text$mn:00007949                 mov     ebp, esp
.text$mn:0000794B                 push    ecx
.text$mn:0000794C                 mov     [ebp+var_4], ecx
.text$mn:0000794F                 mov     ecx, [ebp+var_4]
.text$mn:00007952                 call    ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007957                 mov     eax, [ebp+arg_0]
.text$mn:0000795A                 and     eax, 1
.text$mn:0000795D                 jz      short loc_796B
.text$mn:0000795F                 mov     ecx, [ebp+var_4]
.text$mn:00007962                 push    ecx             ; void *
.text$mn:00007963                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007968                 add     esp, 4
.text$mn:0000796B
.text$mn:0000796B loc_796B:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:0000796B                 mov     eax, [ebp+var_4]
.text$mn:0000796E                 mov     esp, ebp
.text$mn:00007970                 pop     ebp
.text$mn:00007971                 retn    4
.text$mn:00007971 ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z endp
.text$mn:00007971
.text$mn:00007971 _text$mn        ends
.text$mn:00007971
.text$mn:00007974 ; ===========================================================================
.text$mn:00007974
.text$mn:00007974 ; Segment type: Pure code
.text$mn:00007974 ; Segment permissions: Read/Execute
.text$mn:00007974 _text$mn        segment para public 'CODE' use32
.text$mn:00007974                 assume cs:_text$mn
.text$mn:00007974                 ;org 7974h
.text$mn:00007974 ; COMDAT (pick any)
.text$mn:00007974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007974
.text$mn:00007974 ; =============== S U B R O U T I N E =======================================
.text$mn:00007974
.text$mn:00007974 ; Attributes: bp-based frame
.text$mn:00007974
.text$mn:00007974 ; protected: virtual void * __thiscall std::ctype<wchar_t>::`scalar deleting destructor'(unsigned int)
.text$mn:00007974                 public ??_G?$ctype@_W@std@@MAEPAXI@Z
.text$mn:00007974 ??_G?$ctype@_W@std@@MAEPAXI@Z proc near
.text$mn:00007974
.text$mn:00007974 Memory          = dword ptr -4
.text$mn:00007974 arg_0           = dword ptr  8
.text$mn:00007974
.text$mn:00007974                 push    ebp
.text$mn:00007975                 mov     ebp, esp
.text$mn:00007977                 push    ecx
.text$mn:00007978                 mov     [ebp+Memory], ecx
.text$mn:0000797B                 mov     ecx, [ebp+Memory]
.text$mn:0000797E                 call    ??1?$ctype@_W@std@@MAE@XZ ; std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:00007983                 mov     eax, [ebp+arg_0]
.text$mn:00007986                 and     eax, 1
.text$mn:00007989                 jz      short loc_7997
.text$mn:0000798B                 mov     ecx, [ebp+Memory]
.text$mn:0000798E                 push    ecx             ; Memory
.text$mn:0000798F                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00007994                 add     esp, 4
.text$mn:00007997
.text$mn:00007997 loc_7997:                               ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+15j
.text$mn:00007997                 mov     eax, [ebp+Memory]
.text$mn:0000799A                 mov     esp, ebp
.text$mn:0000799C                 pop     ebp
.text$mn:0000799D                 retn    4
.text$mn:0000799D ??_G?$ctype@_W@std@@MAEPAXI@Z endp
.text$mn:0000799D
.text$mn:0000799D _text$mn        ends
.text$mn:0000799D
.text$mn:000079A0 ; ===========================================================================
.text$mn:000079A0
.text$mn:000079A0 ; Segment type: Pure code
.text$mn:000079A0 ; Segment permissions: Read/Execute
.text$mn:000079A0 _text$mn        segment para public 'CODE' use32
.text$mn:000079A0                 assume cs:_text$mn
.text$mn:000079A0                 ;org 79A0h
.text$mn:000079A0 ; COMDAT (pick any)
.text$mn:000079A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079A0
.text$mn:000079A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000079A0
.text$mn:000079A0 ; Attributes: bp-based frame
.text$mn:000079A0
.text$mn:000079A0 ; public: virtual void * __thiscall TiXmlAttribute::`scalar deleting destructor'(unsigned int)
.text$mn:000079A0                 public ??_GTiXmlAttribute@@UAEPAXI@Z
.text$mn:000079A0 ??_GTiXmlAttribute@@UAEPAXI@Z proc near
.text$mn:000079A0
.text$mn:000079A0 var_4           = dword ptr -4
.text$mn:000079A0 arg_0           = dword ptr  8
.text$mn:000079A0
.text$mn:000079A0                 push    ebp
.text$mn:000079A1                 mov     ebp, esp
.text$mn:000079A3                 push    ecx
.text$mn:000079A4                 mov     [ebp+var_4], ecx
.text$mn:000079A7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000079AA                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:000079AF                 mov     eax, [ebp+arg_0]
.text$mn:000079B2                 and     eax, 1
.text$mn:000079B5                 jz      short loc_79C3
.text$mn:000079B7                 mov     ecx, [ebp+var_4]
.text$mn:000079BA                 push    ecx             ; void *
.text$mn:000079BB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000079C0                 add     esp, 4
.text$mn:000079C3
.text$mn:000079C3 loc_79C3:                               ; CODE XREF: TiXmlAttribute::`scalar deleting destructor'(uint)+15j
.text$mn:000079C3                 mov     eax, [ebp+var_4]
.text$mn:000079C6                 mov     esp, ebp
.text$mn:000079C8                 pop     ebp
.text$mn:000079C9                 retn    4
.text$mn:000079C9 ??_GTiXmlAttribute@@UAEPAXI@Z endp
.text$mn:000079C9
.text$mn:000079C9 _text$mn        ends
.text$mn:000079C9
.text$mn:000079CC ; ===========================================================================
.text$mn:000079CC
.text$mn:000079CC ; Segment type: Pure code
.text$mn:000079CC ; Segment permissions: Read/Execute
.text$mn:000079CC _text$mn        segment para public 'CODE' use32
.text$mn:000079CC                 assume cs:_text$mn
.text$mn:000079CC                 ;org 79CCh
.text$mn:000079CC ; COMDAT (pick any)
.text$mn:000079CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079CC
.text$mn:000079CC ; =============== S U B R O U T I N E =======================================
.text$mn:000079CC
.text$mn:000079CC ; Attributes: bp-based frame
.text$mn:000079CC
.text$mn:000079CC ; public: virtual void * __thiscall TiXmlBase::`scalar deleting destructor'(unsigned int)
.text$mn:000079CC                 public ??_GTiXmlBase@@UAEPAXI@Z
.text$mn:000079CC ??_GTiXmlBase@@UAEPAXI@Z proc near
.text$mn:000079CC
.text$mn:000079CC var_4           = dword ptr -4
.text$mn:000079CC arg_0           = dword ptr  8
.text$mn:000079CC
.text$mn:000079CC                 push    ebp
.text$mn:000079CD                 mov     ebp, esp
.text$mn:000079CF                 push    ecx
.text$mn:000079D0                 mov     [ebp+var_4], ecx
.text$mn:000079D3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000079D6                 call    ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$mn:000079DB                 mov     eax, [ebp+arg_0]
.text$mn:000079DE                 and     eax, 1
.text$mn:000079E1                 jz      short loc_79EF
.text$mn:000079E3                 mov     ecx, [ebp+var_4]
.text$mn:000079E6                 push    ecx             ; void *
.text$mn:000079E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000079EC                 add     esp, 4
.text$mn:000079EF
.text$mn:000079EF loc_79EF:                               ; CODE XREF: TiXmlBase::`scalar deleting destructor'(uint)+15j
.text$mn:000079EF                 mov     eax, [ebp+var_4]
.text$mn:000079F2                 mov     esp, ebp
.text$mn:000079F4                 pop     ebp
.text$mn:000079F5                 retn    4
.text$mn:000079F5 ??_GTiXmlBase@@UAEPAXI@Z endp
.text$mn:000079F5
.text$mn:000079F5 _text$mn        ends
.text$mn:000079F5
.text$mn:000079F8 ; ===========================================================================
.text$mn:000079F8
.text$mn:000079F8 ; Segment type: Pure code
.text$mn:000079F8 ; Segment permissions: Read/Execute
.text$mn:000079F8 _text$mn        segment para public 'CODE' use32
.text$mn:000079F8                 assume cs:_text$mn
.text$mn:000079F8                 ;org 79F8h
.text$mn:000079F8 ; COMDAT (pick any)
.text$mn:000079F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079F8
.text$mn:000079F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000079F8
.text$mn:000079F8 ; Attributes: bp-based frame
.text$mn:000079F8
.text$mn:000079F8 ; public: virtual void * __thiscall TiXmlComment::`scalar deleting destructor'(unsigned int)
.text$mn:000079F8                 public ??_GTiXmlComment@@UAEPAXI@Z
.text$mn:000079F8 ??_GTiXmlComment@@UAEPAXI@Z proc near
.text$mn:000079F8
.text$mn:000079F8 var_4           = dword ptr -4
.text$mn:000079F8 arg_0           = dword ptr  8
.text$mn:000079F8
.text$mn:000079F8                 push    ebp
.text$mn:000079F9                 mov     ebp, esp
.text$mn:000079FB                 push    ecx
.text$mn:000079FC                 mov     [ebp+var_4], ecx
.text$mn:000079FF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007A02                 call    ??1TiXmlComment@@UAE@XZ ; TiXmlComment::~TiXmlComment(void)
.text$mn:00007A07                 mov     eax, [ebp+arg_0]
.text$mn:00007A0A                 and     eax, 1
.text$mn:00007A0D                 jz      short loc_7A1B
.text$mn:00007A0F                 mov     ecx, [ebp+var_4]
.text$mn:00007A12                 push    ecx             ; void *
.text$mn:00007A13                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007A18                 add     esp, 4
.text$mn:00007A1B
.text$mn:00007A1B loc_7A1B:                               ; CODE XREF: TiXmlComment::`scalar deleting destructor'(uint)+15j
.text$mn:00007A1B                 mov     eax, [ebp+var_4]
.text$mn:00007A1E                 mov     esp, ebp
.text$mn:00007A20                 pop     ebp
.text$mn:00007A21                 retn    4
.text$mn:00007A21 ??_GTiXmlComment@@UAEPAXI@Z endp
.text$mn:00007A21
.text$mn:00007A21 _text$mn        ends
.text$mn:00007A21
.text$mn:00007A24 ; ===========================================================================
.text$mn:00007A24
.text$mn:00007A24 ; Segment type: Pure code
.text$mn:00007A24 ; Segment permissions: Read/Execute
.text$mn:00007A24 _text$mn        segment para public 'CODE' use32
.text$mn:00007A24                 assume cs:_text$mn
.text$mn:00007A24                 ;org 7A24h
.text$mn:00007A24 ; COMDAT (pick any)
.text$mn:00007A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A24
.text$mn:00007A24 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A24
.text$mn:00007A24 ; Attributes: bp-based frame
.text$mn:00007A24
.text$mn:00007A24 ; public: virtual void * __thiscall TiXmlDeclaration::`scalar deleting destructor'(unsigned int)
.text$mn:00007A24                 public ??_GTiXmlDeclaration@@UAEPAXI@Z
.text$mn:00007A24 ??_GTiXmlDeclaration@@UAEPAXI@Z proc near
.text$mn:00007A24
.text$mn:00007A24 var_4           = dword ptr -4
.text$mn:00007A24 arg_0           = dword ptr  8
.text$mn:00007A24
.text$mn:00007A24                 push    ebp
.text$mn:00007A25                 mov     ebp, esp
.text$mn:00007A27                 push    ecx
.text$mn:00007A28                 mov     [ebp+var_4], ecx
.text$mn:00007A2B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007A2E                 call    ??1TiXmlDeclaration@@UAE@XZ ; TiXmlDeclaration::~TiXmlDeclaration(void)
.text$mn:00007A33                 mov     eax, [ebp+arg_0]
.text$mn:00007A36                 and     eax, 1
.text$mn:00007A39                 jz      short loc_7A47
.text$mn:00007A3B                 mov     ecx, [ebp+var_4]
.text$mn:00007A3E                 push    ecx             ; void *
.text$mn:00007A3F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007A44                 add     esp, 4
.text$mn:00007A47
.text$mn:00007A47 loc_7A47:                               ; CODE XREF: TiXmlDeclaration::`scalar deleting destructor'(uint)+15j
.text$mn:00007A47                 mov     eax, [ebp+var_4]
.text$mn:00007A4A                 mov     esp, ebp
.text$mn:00007A4C                 pop     ebp
.text$mn:00007A4D                 retn    4
.text$mn:00007A4D ??_GTiXmlDeclaration@@UAEPAXI@Z endp
.text$mn:00007A4D
.text$mn:00007A4D _text$mn        ends
.text$mn:00007A4D
.text$mn:00007A50 ; ===========================================================================
.text$mn:00007A50
.text$mn:00007A50 ; Segment type: Pure code
.text$mn:00007A50 ; Segment permissions: Read/Execute
.text$mn:00007A50 _text$mn        segment para public 'CODE' use32
.text$mn:00007A50                 assume cs:_text$mn
.text$mn:00007A50                 ;org 7A50h
.text$mn:00007A50 ; COMDAT (pick any)
.text$mn:00007A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A50
.text$mn:00007A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A50
.text$mn:00007A50 ; Attributes: bp-based frame
.text$mn:00007A50
.text$mn:00007A50 ; public: virtual void * __thiscall TiXmlDocument::`scalar deleting destructor'(unsigned int)
.text$mn:00007A50                 public ??_GTiXmlDocument@@UAEPAXI@Z
.text$mn:00007A50 ??_GTiXmlDocument@@UAEPAXI@Z proc near
.text$mn:00007A50
.text$mn:00007A50 var_4           = dword ptr -4
.text$mn:00007A50 arg_0           = dword ptr  8
.text$mn:00007A50
.text$mn:00007A50                 push    ebp
.text$mn:00007A51                 mov     ebp, esp
.text$mn:00007A53                 push    ecx
.text$mn:00007A54                 mov     [ebp+var_4], ecx
.text$mn:00007A57                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007A5A                 call    ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$mn:00007A5F                 mov     eax, [ebp+arg_0]
.text$mn:00007A62                 and     eax, 1
.text$mn:00007A65                 jz      short loc_7A73
.text$mn:00007A67                 mov     ecx, [ebp+var_4]
.text$mn:00007A6A                 push    ecx             ; void *
.text$mn:00007A6B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007A70                 add     esp, 4
.text$mn:00007A73
.text$mn:00007A73 loc_7A73:                               ; CODE XREF: TiXmlDocument::`scalar deleting destructor'(uint)+15j
.text$mn:00007A73                 mov     eax, [ebp+var_4]
.text$mn:00007A76                 mov     esp, ebp
.text$mn:00007A78                 pop     ebp
.text$mn:00007A79                 retn    4
.text$mn:00007A79 ??_GTiXmlDocument@@UAEPAXI@Z endp
.text$mn:00007A79
.text$mn:00007A79 _text$mn        ends
.text$mn:00007A79
.text$mn:00007A7C ; ===========================================================================
.text$mn:00007A7C
.text$mn:00007A7C ; Segment type: Pure code
.text$mn:00007A7C ; Segment permissions: Read/Execute
.text$mn:00007A7C _text$mn        segment para public 'CODE' use32
.text$mn:00007A7C                 assume cs:_text$mn
.text$mn:00007A7C                 ;org 7A7Ch
.text$mn:00007A7C ; COMDAT (pick any)
.text$mn:00007A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A7C
.text$mn:00007A7C ; =============== S U B R O U T I N E =======================================
.text$mn:00007A7C
.text$mn:00007A7C ; Attributes: bp-based frame
.text$mn:00007A7C
.text$mn:00007A7C ; public: virtual void * __thiscall TiXmlElement::`scalar deleting destructor'(unsigned int)
.text$mn:00007A7C                 public ??_GTiXmlElement@@UAEPAXI@Z
.text$mn:00007A7C ??_GTiXmlElement@@UAEPAXI@Z proc near
.text$mn:00007A7C
.text$mn:00007A7C var_4           = dword ptr -4
.text$mn:00007A7C arg_0           = dword ptr  8
.text$mn:00007A7C
.text$mn:00007A7C                 push    ebp
.text$mn:00007A7D                 mov     ebp, esp
.text$mn:00007A7F                 push    ecx
.text$mn:00007A80                 mov     [ebp+var_4], ecx
.text$mn:00007A83                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007A86                 call    ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$mn:00007A8B                 mov     eax, [ebp+arg_0]
.text$mn:00007A8E                 and     eax, 1
.text$mn:00007A91                 jz      short loc_7A9F
.text$mn:00007A93                 mov     ecx, [ebp+var_4]
.text$mn:00007A96                 push    ecx             ; void *
.text$mn:00007A97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007A9C                 add     esp, 4
.text$mn:00007A9F
.text$mn:00007A9F loc_7A9F:                               ; CODE XREF: TiXmlElement::`scalar deleting destructor'(uint)+15j
.text$mn:00007A9F                 mov     eax, [ebp+var_4]
.text$mn:00007AA2                 mov     esp, ebp
.text$mn:00007AA4                 pop     ebp
.text$mn:00007AA5                 retn    4
.text$mn:00007AA5 ??_GTiXmlElement@@UAEPAXI@Z endp
.text$mn:00007AA5
.text$mn:00007AA5 _text$mn        ends
.text$mn:00007AA5
.text$mn:00007AA8 ; ===========================================================================
.text$mn:00007AA8
.text$mn:00007AA8 ; Segment type: Pure code
.text$mn:00007AA8 ; Segment permissions: Read/Execute
.text$mn:00007AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00007AA8                 assume cs:_text$mn
.text$mn:00007AA8                 ;org 7AA8h
.text$mn:00007AA8 ; COMDAT (pick any)
.text$mn:00007AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AA8
.text$mn:00007AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AA8
.text$mn:00007AA8 ; Attributes: bp-based frame
.text$mn:00007AA8
.text$mn:00007AA8 ; public: virtual void * __thiscall TiXmlNode::`scalar deleting destructor'(unsigned int)
.text$mn:00007AA8                 public ??_GTiXmlNode@@UAEPAXI@Z
.text$mn:00007AA8 ??_GTiXmlNode@@UAEPAXI@Z proc near
.text$mn:00007AA8
.text$mn:00007AA8 var_4           = dword ptr -4
.text$mn:00007AA8 arg_0           = dword ptr  8
.text$mn:00007AA8
.text$mn:00007AA8                 push    ebp
.text$mn:00007AA9                 mov     ebp, esp
.text$mn:00007AAB                 push    ecx
.text$mn:00007AAC                 mov     [ebp+var_4], ecx
.text$mn:00007AAF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007AB2                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00007AB7                 mov     eax, [ebp+arg_0]
.text$mn:00007ABA                 and     eax, 1
.text$mn:00007ABD                 jz      short loc_7ACB
.text$mn:00007ABF                 mov     ecx, [ebp+var_4]
.text$mn:00007AC2                 push    ecx             ; void *
.text$mn:00007AC3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007AC8                 add     esp, 4
.text$mn:00007ACB
.text$mn:00007ACB loc_7ACB:                               ; CODE XREF: TiXmlNode::`scalar deleting destructor'(uint)+15j
.text$mn:00007ACB                 mov     eax, [ebp+var_4]
.text$mn:00007ACE                 mov     esp, ebp
.text$mn:00007AD0                 pop     ebp
.text$mn:00007AD1                 retn    4
.text$mn:00007AD1 ??_GTiXmlNode@@UAEPAXI@Z endp
.text$mn:00007AD1
.text$mn:00007AD1 _text$mn        ends
.text$mn:00007AD1
.text$mn:00007AD4 ; ===========================================================================
.text$mn:00007AD4
.text$mn:00007AD4 ; Segment type: Pure code
.text$mn:00007AD4 ; Segment permissions: Read/Execute
.text$mn:00007AD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007AD4                 assume cs:_text$mn
.text$mn:00007AD4                 ;org 7AD4h
.text$mn:00007AD4 ; COMDAT (pick any)
.text$mn:00007AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AD4
.text$mn:00007AD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AD4
.text$mn:00007AD4 ; Attributes: bp-based frame
.text$mn:00007AD4
.text$mn:00007AD4 ; public: virtual void * __thiscall TiXmlText::`scalar deleting destructor'(unsigned int)
.text$mn:00007AD4                 public ??_GTiXmlText@@UAEPAXI@Z
.text$mn:00007AD4 ??_GTiXmlText@@UAEPAXI@Z proc near
.text$mn:00007AD4
.text$mn:00007AD4 var_4           = dword ptr -4
.text$mn:00007AD4 arg_0           = dword ptr  8
.text$mn:00007AD4
.text$mn:00007AD4                 push    ebp
.text$mn:00007AD5                 mov     ebp, esp
.text$mn:00007AD7                 push    ecx
.text$mn:00007AD8                 mov     [ebp+var_4], ecx
.text$mn:00007ADB                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007ADE                 call    ??1TiXmlText@@UAE@XZ ; TiXmlText::~TiXmlText(void)
.text$mn:00007AE3                 mov     eax, [ebp+arg_0]
.text$mn:00007AE6                 and     eax, 1
.text$mn:00007AE9                 jz      short loc_7AF7
.text$mn:00007AEB                 mov     ecx, [ebp+var_4]
.text$mn:00007AEE                 push    ecx             ; void *
.text$mn:00007AEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007AF4                 add     esp, 4
.text$mn:00007AF7
.text$mn:00007AF7 loc_7AF7:                               ; CODE XREF: TiXmlText::`scalar deleting destructor'(uint)+15j
.text$mn:00007AF7                 mov     eax, [ebp+var_4]
.text$mn:00007AFA                 mov     esp, ebp
.text$mn:00007AFC                 pop     ebp
.text$mn:00007AFD                 retn    4
.text$mn:00007AFD ??_GTiXmlText@@UAEPAXI@Z endp
.text$mn:00007AFD
.text$mn:00007AFD _text$mn        ends
.text$mn:00007AFD
.text$mn:00007B00 ; ===========================================================================
.text$mn:00007B00
.text$mn:00007B00 ; Segment type: Pure code
.text$mn:00007B00 ; Segment permissions: Read/Execute
.text$mn:00007B00 _text$mn        segment para public 'CODE' use32
.text$mn:00007B00                 assume cs:_text$mn
.text$mn:00007B00                 ;org 7B00h
.text$mn:00007B00 ; COMDAT (pick any)
.text$mn:00007B00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B00
.text$mn:00007B00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B00
.text$mn:00007B00 ; Attributes: bp-based frame
.text$mn:00007B00
.text$mn:00007B00 ; public: virtual void * __thiscall TiXmlUnknown::`scalar deleting destructor'(unsigned int)
.text$mn:00007B00                 public ??_GTiXmlUnknown@@UAEPAXI@Z
.text$mn:00007B00 ??_GTiXmlUnknown@@UAEPAXI@Z proc near
.text$mn:00007B00
.text$mn:00007B00 var_4           = dword ptr -4
.text$mn:00007B00 arg_0           = dword ptr  8
.text$mn:00007B00
.text$mn:00007B00                 push    ebp
.text$mn:00007B01                 mov     ebp, esp
.text$mn:00007B03                 push    ecx
.text$mn:00007B04                 mov     [ebp+var_4], ecx
.text$mn:00007B07                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B0A                 call    ??1TiXmlUnknown@@UAE@XZ ; TiXmlUnknown::~TiXmlUnknown(void)
.text$mn:00007B0F                 mov     eax, [ebp+arg_0]
.text$mn:00007B12                 and     eax, 1
.text$mn:00007B15                 jz      short loc_7B23
.text$mn:00007B17                 mov     ecx, [ebp+var_4]
.text$mn:00007B1A                 push    ecx             ; void *
.text$mn:00007B1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B20                 add     esp, 4
.text$mn:00007B23
.text$mn:00007B23 loc_7B23:                               ; CODE XREF: TiXmlUnknown::`scalar deleting destructor'(uint)+15j
.text$mn:00007B23                 mov     eax, [ebp+var_4]
.text$mn:00007B26                 mov     esp, ebp
.text$mn:00007B28                 pop     ebp
.text$mn:00007B29                 retn    4
.text$mn:00007B29 ??_GTiXmlUnknown@@UAEPAXI@Z endp
.text$mn:00007B29
.text$mn:00007B29 _text$mn        ends
.text$mn:00007B29
.text$mn:00007B2C ; ===========================================================================
.text$mn:00007B2C
.text$mn:00007B2C ; Segment type: Pure code
.text$mn:00007B2C ; Segment permissions: Read/Execute
.text$mn:00007B2C _text$mn        segment para public 'CODE' use32
.text$mn:00007B2C                 assume cs:_text$mn
.text$mn:00007B2C                 ;org 7B2Ch
.text$mn:00007B2C ; COMDAT (pick any)
.text$mn:00007B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B2C
.text$mn:00007B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B2C
.text$mn:00007B2C ; Attributes: bp-based frame
.text$mn:00007B2C
.text$mn:00007B2C ; public: virtual void * __thiscall std::_Facet_base::`scalar deleting destructor'(unsigned int)
.text$mn:00007B2C                 public ??_G_Facet_base@std@@UAEPAXI@Z
.text$mn:00007B2C ??_G_Facet_base@std@@UAEPAXI@Z proc near
.text$mn:00007B2C
.text$mn:00007B2C var_4           = dword ptr -4
.text$mn:00007B2C arg_0           = dword ptr  8
.text$mn:00007B2C
.text$mn:00007B2C                 push    ebp
.text$mn:00007B2D                 mov     ebp, esp
.text$mn:00007B2F                 push    ecx
.text$mn:00007B30                 mov     [ebp+var_4], ecx
.text$mn:00007B33                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B36                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:00007B3B                 mov     eax, [ebp+arg_0]
.text$mn:00007B3E                 and     eax, 1
.text$mn:00007B41                 jz      short loc_7B4F
.text$mn:00007B43                 mov     ecx, [ebp+var_4]
.text$mn:00007B46                 push    ecx             ; void *
.text$mn:00007B47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B4C                 add     esp, 4
.text$mn:00007B4F
.text$mn:00007B4F loc_7B4F:                               ; CODE XREF: std::_Facet_base::`scalar deleting destructor'(uint)+15j
.text$mn:00007B4F                 mov     eax, [ebp+var_4]
.text$mn:00007B52                 mov     esp, ebp
.text$mn:00007B54                 pop     ebp
.text$mn:00007B55                 retn    4
.text$mn:00007B55 ??_G_Facet_base@std@@UAEPAXI@Z endp
.text$mn:00007B55
.text$mn:00007B55 _text$mn        ends
.text$mn:00007B55
.text$mn:00007B58 ; ===========================================================================
.text$mn:00007B58
.text$mn:00007B58 ; Segment type: Pure code
.text$mn:00007B58 ; Segment permissions: Read/Execute
.text$mn:00007B58 _text$mn        segment para public 'CODE' use32
.text$mn:00007B58                 assume cs:_text$mn
.text$mn:00007B58                 ;org 7B58h
.text$mn:00007B58 ; COMDAT (pick any)
.text$mn:00007B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B58
.text$mn:00007B58 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B58
.text$mn:00007B58 ; Attributes: bp-based frame
.text$mn:00007B58
.text$mn:00007B58 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007B58                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00007B58 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007B58
.text$mn:00007B58 var_4           = dword ptr -4
.text$mn:00007B58 arg_0           = dword ptr  8
.text$mn:00007B58
.text$mn:00007B58                 push    ebp
.text$mn:00007B59                 mov     ebp, esp
.text$mn:00007B5B                 push    ecx
.text$mn:00007B5C                 mov     [ebp+var_4], ecx
.text$mn:00007B5F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B62                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007B67                 mov     eax, [ebp+arg_0]
.text$mn:00007B6A                 and     eax, 1
.text$mn:00007B6D                 jz      short loc_7B7B
.text$mn:00007B6F                 mov     ecx, [ebp+var_4]
.text$mn:00007B72                 push    ecx             ; void *
.text$mn:00007B73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B78                 add     esp, 4
.text$mn:00007B7B
.text$mn:00007B7B loc_7B7B:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007B7B                 mov     eax, [ebp+var_4]
.text$mn:00007B7E                 mov     esp, ebp
.text$mn:00007B80                 pop     ebp
.text$mn:00007B81                 retn    4
.text$mn:00007B81 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00007B81
.text$mn:00007B81 _text$mn        ends
.text$mn:00007B81
.text$mn:00007B84 ; ===========================================================================
.text$mn:00007B84
.text$mn:00007B84 ; Segment type: Pure code
.text$mn:00007B84 ; Segment permissions: Read/Execute
.text$mn:00007B84 _text$mn        segment para public 'CODE' use32
.text$mn:00007B84                 assume cs:_text$mn
.text$mn:00007B84                 ;org 7B84h
.text$mn:00007B84 ; COMDAT (pick any)
.text$mn:00007B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B84
.text$mn:00007B84 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B84
.text$mn:00007B84 ; Attributes: bp-based frame
.text$mn:00007B84
.text$mn:00007B84 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007B84                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00007B84 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007B84
.text$mn:00007B84 var_4           = dword ptr -4
.text$mn:00007B84 arg_0           = dword ptr  8
.text$mn:00007B84
.text$mn:00007B84                 push    ebp
.text$mn:00007B85                 mov     ebp, esp
.text$mn:00007B87                 push    ecx
.text$mn:00007B88                 mov     [ebp+var_4], ecx
.text$mn:00007B8B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B8E                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00007B93                 mov     eax, [ebp+arg_0]
.text$mn:00007B96                 and     eax, 1
.text$mn:00007B99                 jz      short loc_7BA7
.text$mn:00007B9B                 mov     ecx, [ebp+var_4]
.text$mn:00007B9E                 push    ecx             ; void *
.text$mn:00007B9F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007BA4                 add     esp, 4
.text$mn:00007BA7
.text$mn:00007BA7 loc_7BA7:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007BA7                 mov     eax, [ebp+var_4]
.text$mn:00007BAA                 mov     esp, ebp
.text$mn:00007BAC                 pop     ebp
.text$mn:00007BAD                 retn    4
.text$mn:00007BAD ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00007BAD
.text$mn:00007BAD _text$mn        ends
.text$mn:00007BAD
.text$mn:00007BB0 ; ===========================================================================
.text$mn:00007BB0
.text$mn:00007BB0 ; Segment type: Pure code
.text$mn:00007BB0 ; Segment permissions: Read/Execute
.text$mn:00007BB0 _text$mn        segment para public 'CODE' use32
.text$mn:00007BB0                 assume cs:_text$mn
.text$mn:00007BB0                 ;org 7BB0h
.text$mn:00007BB0 ; COMDAT (pick any)
.text$mn:00007BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BB0
.text$mn:00007BB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BB0
.text$mn:00007BB0 ; Attributes: bp-based frame
.text$mn:00007BB0
.text$mn:00007BB0 ; public: virtual void * __thiscall std::_System_error::`scalar deleting destructor'(unsigned int)
.text$mn:00007BB0                 public ??_G_System_error@std@@UAEPAXI@Z
.text$mn:00007BB0 ??_G_System_error@std@@UAEPAXI@Z proc near
.text$mn:00007BB0
.text$mn:00007BB0 var_4           = dword ptr -4
.text$mn:00007BB0 arg_0           = dword ptr  8
.text$mn:00007BB0
.text$mn:00007BB0                 push    ebp
.text$mn:00007BB1                 mov     ebp, esp
.text$mn:00007BB3                 push    ecx
.text$mn:00007BB4                 mov     [ebp+var_4], ecx
.text$mn:00007BB7                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007BBA                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:00007BBF                 mov     eax, [ebp+arg_0]
.text$mn:00007BC2                 and     eax, 1
.text$mn:00007BC5                 jz      short loc_7BD3
.text$mn:00007BC7                 mov     ecx, [ebp+var_4]
.text$mn:00007BCA                 push    ecx             ; void *
.text$mn:00007BCB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007BD0                 add     esp, 4
.text$mn:00007BD3
.text$mn:00007BD3 loc_7BD3:                               ; CODE XREF: std::_System_error::`scalar deleting destructor'(uint)+15j
.text$mn:00007BD3                 mov     eax, [ebp+var_4]
.text$mn:00007BD6                 mov     esp, ebp
.text$mn:00007BD8                 pop     ebp
.text$mn:00007BD9                 retn    4
.text$mn:00007BD9 ??_G_System_error@std@@UAEPAXI@Z endp
.text$mn:00007BD9
.text$mn:00007BD9 _text$mn        ends
.text$mn:00007BD9
.text$mn:00007BDC ; ===========================================================================
.text$mn:00007BDC
.text$mn:00007BDC ; Segment type: Pure code
.text$mn:00007BDC ; Segment permissions: Read/Execute
.text$mn:00007BDC _text$mn        segment para public 'CODE' use32
.text$mn:00007BDC                 assume cs:_text$mn
.text$mn:00007BDC                 ;org 7BDCh
.text$mn:00007BDC ; COMDAT (pick any)
.text$mn:00007BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BDC
.text$mn:00007BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00007BDC
.text$mn:00007BDC ; Attributes: bp-based frame
.text$mn:00007BDC
.text$mn:00007BDC ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007BDC                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00007BDC ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007BDC
.text$mn:00007BDC var_4           = dword ptr -4
.text$mn:00007BDC arg_0           = dword ptr  8
.text$mn:00007BDC
.text$mn:00007BDC                 push    ebp
.text$mn:00007BDD                 mov     ebp, esp
.text$mn:00007BDF                 push    ecx
.text$mn:00007BE0                 mov     [ebp+var_4], ecx
.text$mn:00007BE3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007BE6                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00007BEB                 mov     eax, [ebp+arg_0]
.text$mn:00007BEE                 and     eax, 1
.text$mn:00007BF1                 jz      short loc_7BFF
.text$mn:00007BF3                 mov     ecx, [ebp+var_4]
.text$mn:00007BF6                 push    ecx             ; void *
.text$mn:00007BF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007BFC                 add     esp, 4
.text$mn:00007BFF
.text$mn:00007BFF loc_7BFF:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007BFF                 mov     eax, [ebp+var_4]
.text$mn:00007C02                 mov     esp, ebp
.text$mn:00007C04                 pop     ebp
.text$mn:00007C05                 retn    4
.text$mn:00007C05 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00007C05
.text$mn:00007C05 _text$mn        ends
.text$mn:00007C05
.text$mn:00007C08 ; ===========================================================================
.text$mn:00007C08
.text$mn:00007C08 ; Segment type: Pure code
.text$mn:00007C08 ; Segment permissions: Read/Execute
.text$mn:00007C08 _text$mn        segment para public 'CODE' use32
.text$mn:00007C08                 assume cs:_text$mn
.text$mn:00007C08                 ;org 7C08h
.text$mn:00007C08 ; COMDAT (pick any)
.text$mn:00007C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C08
.text$mn:00007C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C08
.text$mn:00007C08 ; Attributes: bp-based frame
.text$mn:00007C08
.text$mn:00007C08 ; public: virtual void * __thiscall std::ctype_base::`scalar deleting destructor'(unsigned int)
.text$mn:00007C08                 public ??_Gctype_base@std@@UAEPAXI@Z
.text$mn:00007C08 ??_Gctype_base@std@@UAEPAXI@Z proc near
.text$mn:00007C08
.text$mn:00007C08 Memory          = dword ptr -4
.text$mn:00007C08 arg_0           = dword ptr  8
.text$mn:00007C08
.text$mn:00007C08                 push    ebp
.text$mn:00007C09                 mov     ebp, esp
.text$mn:00007C0B                 push    ecx
.text$mn:00007C0C                 mov     [ebp+Memory], ecx
.text$mn:00007C0F                 mov     ecx, [ebp+Memory] ; this
.text$mn:00007C12                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:00007C17                 mov     eax, [ebp+arg_0]
.text$mn:00007C1A                 and     eax, 1
.text$mn:00007C1D                 jz      short loc_7C2B
.text$mn:00007C1F                 mov     ecx, [ebp+Memory]
.text$mn:00007C22                 push    ecx             ; Memory
.text$mn:00007C23                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00007C28                 add     esp, 4
.text$mn:00007C2B
.text$mn:00007C2B loc_7C2B:                               ; CODE XREF: std::ctype_base::`scalar deleting destructor'(uint)+15j
.text$mn:00007C2B                 mov     eax, [ebp+Memory]
.text$mn:00007C2E                 mov     esp, ebp
.text$mn:00007C30                 pop     ebp
.text$mn:00007C31                 retn    4
.text$mn:00007C31 ??_Gctype_base@std@@UAEPAXI@Z endp
.text$mn:00007C31
.text$mn:00007C31 _text$mn        ends
.text$mn:00007C31
.text$mn:00007C34 ; ===========================================================================
.text$mn:00007C34
.text$mn:00007C34 ; Segment type: Pure code
.text$mn:00007C34 ; Segment permissions: Read/Execute
.text$mn:00007C34 _text$mn        segment para public 'CODE' use32
.text$mn:00007C34                 assume cs:_text$mn
.text$mn:00007C34                 ;org 7C34h
.text$mn:00007C34 ; COMDAT (pick any)
.text$mn:00007C34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C34
.text$mn:00007C34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C34
.text$mn:00007C34 ; Attributes: bp-based frame
.text$mn:00007C34
.text$mn:00007C34 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007C34                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00007C34 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00007C34
.text$mn:00007C34 var_4           = dword ptr -4
.text$mn:00007C34 arg_0           = dword ptr  8
.text$mn:00007C34
.text$mn:00007C34                 push    ebp
.text$mn:00007C35                 mov     ebp, esp
.text$mn:00007C37                 push    ecx
.text$mn:00007C38                 mov     [ebp+var_4], ecx
.text$mn:00007C3B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C3E                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00007C43                 mov     eax, [ebp+arg_0]
.text$mn:00007C46                 and     eax, 1
.text$mn:00007C49                 jz      short loc_7C57
.text$mn:00007C4B                 mov     ecx, [ebp+var_4]
.text$mn:00007C4E                 push    ecx             ; void *
.text$mn:00007C4F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007C54                 add     esp, 4
.text$mn:00007C57
.text$mn:00007C57 loc_7C57:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007C57                 mov     eax, [ebp+var_4]
.text$mn:00007C5A                 mov     esp, ebp
.text$mn:00007C5C                 pop     ebp
.text$mn:00007C5D                 retn    4
.text$mn:00007C5D ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00007C5D
.text$mn:00007C5D _text$mn        ends
.text$mn:00007C5D
.text$mn:00007C60 ; ===========================================================================
.text$mn:00007C60
.text$mn:00007C60 ; Segment type: Pure code
.text$mn:00007C60 ; Segment permissions: Read/Execute
.text$mn:00007C60 _text$mn        segment para public 'CODE' use32
.text$mn:00007C60                 assume cs:_text$mn
.text$mn:00007C60                 ;org 7C60h
.text$mn:00007C60 ; COMDAT (pick any)
.text$mn:00007C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C60
.text$mn:00007C60 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C60
.text$mn:00007C60 ; Attributes: bp-based frame
.text$mn:00007C60
.text$mn:00007C60 ; protected: virtual void * __thiscall std::locale::facet::`scalar deleting destructor'(unsigned int)
.text$mn:00007C60                 public ??_Gfacet@locale@std@@MAEPAXI@Z
.text$mn:00007C60 ??_Gfacet@locale@std@@MAEPAXI@Z proc near
.text$mn:00007C60
.text$mn:00007C60 var_4           = dword ptr -4
.text$mn:00007C60 arg_0           = dword ptr  8
.text$mn:00007C60
.text$mn:00007C60                 push    ebp
.text$mn:00007C61                 mov     ebp, esp
.text$mn:00007C63                 push    ecx
.text$mn:00007C64                 mov     [ebp+var_4], ecx
.text$mn:00007C67                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C6A                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:00007C6F                 mov     eax, [ebp+arg_0]
.text$mn:00007C72                 and     eax, 1
.text$mn:00007C75                 jz      short loc_7C83
.text$mn:00007C77                 mov     ecx, [ebp+var_4]
.text$mn:00007C7A                 push    ecx             ; Memory
.text$mn:00007C7B                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00007C80                 add     esp, 4
.text$mn:00007C83
.text$mn:00007C83 loc_7C83:                               ; CODE XREF: std::locale::facet::`scalar deleting destructor'(uint)+15j
.text$mn:00007C83                 mov     eax, [ebp+var_4]
.text$mn:00007C86                 mov     esp, ebp
.text$mn:00007C88                 pop     ebp
.text$mn:00007C89                 retn    4
.text$mn:00007C89 ??_Gfacet@locale@std@@MAEPAXI@Z endp
.text$mn:00007C89
.text$mn:00007C89 _text$mn        ends
.text$mn:00007C89
.text$mn:00007C8C ; ===========================================================================
.text$mn:00007C8C
.text$mn:00007C8C ; Segment type: Pure code
.text$mn:00007C8C ; Segment permissions: Read/Execute
.text$mn:00007C8C _text$mn        segment para public 'CODE' use32
.text$mn:00007C8C                 assume cs:_text$mn
.text$mn:00007C8C                 ;org 7C8Ch
.text$mn:00007C8C ; COMDAT (pick any)
.text$mn:00007C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C8C
.text$mn:00007C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C8C
.text$mn:00007C8C ; Attributes: bp-based frame
.text$mn:00007C8C
.text$mn:00007C8C ; public: virtual void * __thiscall std::ios_base::failure::`scalar deleting destructor'(unsigned int)
.text$mn:00007C8C                 public ??_Gfailure@ios_base@std@@UAEPAXI@Z
.text$mn:00007C8C ??_Gfailure@ios_base@std@@UAEPAXI@Z proc near
.text$mn:00007C8C
.text$mn:00007C8C var_4           = dword ptr -4
.text$mn:00007C8C arg_0           = dword ptr  8
.text$mn:00007C8C
.text$mn:00007C8C                 push    ebp
.text$mn:00007C8D                 mov     ebp, esp
.text$mn:00007C8F                 push    ecx
.text$mn:00007C90                 mov     [ebp+var_4], ecx
.text$mn:00007C93                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C96                 call    ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.text$mn:00007C9B                 mov     eax, [ebp+arg_0]
.text$mn:00007C9E                 and     eax, 1
.text$mn:00007CA1                 jz      short loc_7CAF
.text$mn:00007CA3                 mov     ecx, [ebp+var_4]
.text$mn:00007CA6                 push    ecx             ; void *
.text$mn:00007CA7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007CAC                 add     esp, 4
.text$mn:00007CAF
.text$mn:00007CAF loc_7CAF:                               ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+15j
.text$mn:00007CAF                 mov     eax, [ebp+var_4]
.text$mn:00007CB2                 mov     esp, ebp
.text$mn:00007CB4                 pop     ebp
.text$mn:00007CB5                 retn    4
.text$mn:00007CB5 ??_Gfailure@ios_base@std@@UAEPAXI@Z endp
.text$mn:00007CB5
.text$mn:00007CB5 _text$mn        ends
.text$mn:00007CB5
.text$mn:00007CB8 ; ===========================================================================
.text$mn:00007CB8
.text$mn:00007CB8 ; Segment type: Pure code
.text$mn:00007CB8 ; Segment permissions: Read/Execute
.text$mn:00007CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00007CB8                 assume cs:_text$mn
.text$mn:00007CB8                 ;org 7CB8h
.text$mn:00007CB8 ; COMDAT (pick any)
.text$mn:00007CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CB8
.text$mn:00007CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CB8
.text$mn:00007CB8 ; Attributes: bp-based frame
.text$mn:00007CB8
.text$mn:00007CB8 ; public: virtual void * __thiscall std::ios_base::`scalar deleting destructor'(unsigned int)
.text$mn:00007CB8                 public ??_Gios_base@std@@UAEPAXI@Z
.text$mn:00007CB8 ??_Gios_base@std@@UAEPAXI@Z proc near
.text$mn:00007CB8
.text$mn:00007CB8 var_4           = dword ptr -4
.text$mn:00007CB8 arg_0           = dword ptr  8
.text$mn:00007CB8
.text$mn:00007CB8                 push    ebp
.text$mn:00007CB9                 mov     ebp, esp
.text$mn:00007CBB                 push    ecx
.text$mn:00007CBC                 mov     [ebp+var_4], ecx
.text$mn:00007CBF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007CC2                 call    ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$mn:00007CC7                 mov     eax, [ebp+arg_0]
.text$mn:00007CCA                 and     eax, 1
.text$mn:00007CCD                 jz      short loc_7CDB
.text$mn:00007CCF                 mov     ecx, [ebp+var_4]
.text$mn:00007CD2                 push    ecx             ; void *
.text$mn:00007CD3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007CD8                 add     esp, 4
.text$mn:00007CDB
.text$mn:00007CDB loc_7CDB:                               ; CODE XREF: std::ios_base::`scalar deleting destructor'(uint)+15j
.text$mn:00007CDB                 mov     eax, [ebp+var_4]
.text$mn:00007CDE                 mov     esp, ebp
.text$mn:00007CE0                 pop     ebp
.text$mn:00007CE1                 retn    4
.text$mn:00007CE1 ??_Gios_base@std@@UAEPAXI@Z endp
.text$mn:00007CE1
.text$mn:00007CE1 _text$mn        ends
.text$mn:00007CE1
.text$mn:00007CE4 ; ===========================================================================
.text$mn:00007CE4
.text$mn:00007CE4 ; Segment type: Pure code
.text$mn:00007CE4 ; Segment permissions: Read/Execute
.text$mn:00007CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CE4                 assume cs:_text$mn
.text$mn:00007CE4                 ;org 7CE4h
.text$mn:00007CE4 ; COMDAT (pick any)
.text$mn:00007CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CE4
.text$mn:00007CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CE4
.text$mn:00007CE4 ; Attributes: bp-based frame
.text$mn:00007CE4
.text$mn:00007CE4 ; public: void * __thiscall std::locale::`scalar deleting destructor'(unsigned int)
.text$mn:00007CE4                 public ??_Glocale@std@@QAEPAXI@Z
.text$mn:00007CE4 ??_Glocale@std@@QAEPAXI@Z proc near     ; CODE XREF: std::_DebugHeapDelete<std::locale>(std::locale *)+Ep
.text$mn:00007CE4
.text$mn:00007CE4 var_4           = dword ptr -4
.text$mn:00007CE4 arg_0           = dword ptr  8
.text$mn:00007CE4
.text$mn:00007CE4                 push    ebp
.text$mn:00007CE5                 mov     ebp, esp
.text$mn:00007CE7                 push    ecx
.text$mn:00007CE8                 mov     [ebp+var_4], ecx
.text$mn:00007CEB                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007CEE                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00007CF3                 mov     eax, [ebp+arg_0]
.text$mn:00007CF6                 and     eax, 1
.text$mn:00007CF9                 jz      short loc_7D07
.text$mn:00007CFB                 mov     ecx, [ebp+var_4]
.text$mn:00007CFE                 push    ecx             ; void *
.text$mn:00007CFF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007D04                 add     esp, 4
.text$mn:00007D07
.text$mn:00007D07 loc_7D07:                               ; CODE XREF: std::locale::`scalar deleting destructor'(uint)+15j
.text$mn:00007D07                 mov     eax, [ebp+var_4]
.text$mn:00007D0A                 mov     esp, ebp
.text$mn:00007D0C                 pop     ebp
.text$mn:00007D0D                 retn    4
.text$mn:00007D0D ??_Glocale@std@@QAEPAXI@Z endp
.text$mn:00007D0D
.text$mn:00007D0D _text$mn        ends
.text$mn:00007D0D
.text$mn:00007D10 ; ===========================================================================
.text$mn:00007D10
.text$mn:00007D10 ; Segment type: Pure code
.text$mn:00007D10 ; Segment permissions: Read/Execute
.text$mn:00007D10 _text$mn        segment para public 'CODE' use32
.text$mn:00007D10                 assume cs:_text$mn
.text$mn:00007D10                 ;org 7D10h
.text$mn:00007D10 ; COMDAT (pick any)
.text$mn:00007D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D10
.text$mn:00007D10 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D10
.text$mn:00007D10 ; Attributes: bp-based frame
.text$mn:00007D10
.text$mn:00007D10 ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:00007D10                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:00007D10 ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:00007D10
.text$mn:00007D10 var_4           = dword ptr -4
.text$mn:00007D10 arg_0           = dword ptr  8
.text$mn:00007D10
.text$mn:00007D10                 push    ebp
.text$mn:00007D11                 mov     ebp, esp
.text$mn:00007D13                 push    ecx
.text$mn:00007D14                 mov     [ebp+var_4], ecx
.text$mn:00007D17                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007D1A                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:00007D1F                 mov     eax, [ebp+arg_0]
.text$mn:00007D22                 and     eax, 1
.text$mn:00007D25                 jz      short loc_7D33
.text$mn:00007D27                 mov     ecx, [ebp+var_4]
.text$mn:00007D2A                 push    ecx             ; void *
.text$mn:00007D2B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007D30                 add     esp, 4
.text$mn:00007D33
.text$mn:00007D33 loc_7D33:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:00007D33                 mov     eax, [ebp+var_4]
.text$mn:00007D36                 mov     esp, ebp
.text$mn:00007D38                 pop     ebp
.text$mn:00007D39                 retn    4
.text$mn:00007D39 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:00007D39
.text$mn:00007D39 _text$mn        ends
.text$mn:00007D39
.text$mn:00007D3C ; ===========================================================================
.text$mn:00007D3C
.text$mn:00007D3C ; Segment type: Pure code
.text$mn:00007D3C ; Segment permissions: Read/Execute
.text$mn:00007D3C _text$mn        segment para public 'CODE' use32
.text$mn:00007D3C                 assume cs:_text$mn
.text$mn:00007D3C                 ;org 7D3Ch
.text$mn:00007D3C ; COMDAT (pick any)
.text$mn:00007D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D3C
.text$mn:00007D3C ; =============== S U B R O U T I N E =======================================
.text$mn:00007D3C
.text$mn:00007D3C ; Attributes: bp-based frame
.text$mn:00007D3C
.text$mn:00007D3C ; public: virtual void * __thiscall std::system_error::`scalar deleting destructor'(unsigned int)
.text$mn:00007D3C                 public ??_Gsystem_error@std@@UAEPAXI@Z
.text$mn:00007D3C ??_Gsystem_error@std@@UAEPAXI@Z proc near
.text$mn:00007D3C
.text$mn:00007D3C var_4           = dword ptr -4
.text$mn:00007D3C arg_0           = dword ptr  8
.text$mn:00007D3C
.text$mn:00007D3C                 push    ebp
.text$mn:00007D3D                 mov     ebp, esp
.text$mn:00007D3F                 push    ecx
.text$mn:00007D40                 mov     [ebp+var_4], ecx
.text$mn:00007D43                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007D46                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:00007D4B                 mov     eax, [ebp+arg_0]
.text$mn:00007D4E                 and     eax, 1
.text$mn:00007D51                 jz      short loc_7D5F
.text$mn:00007D53                 mov     ecx, [ebp+var_4]
.text$mn:00007D56                 push    ecx             ; void *
.text$mn:00007D57                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007D5C                 add     esp, 4
.text$mn:00007D5F
.text$mn:00007D5F loc_7D5F:                               ; CODE XREF: std::system_error::`scalar deleting destructor'(uint)+15j
.text$mn:00007D5F                 mov     eax, [ebp+var_4]
.text$mn:00007D62                 mov     esp, ebp
.text$mn:00007D64                 pop     ebp
.text$mn:00007D65                 retn    4
.text$mn:00007D65 ??_Gsystem_error@std@@UAEPAXI@Z endp
.text$mn:00007D65
.text$mn:00007D65 _text$mn        ends
.text$mn:00007D65
.text$di:00007D68 ; ===========================================================================
.text$di:00007D68
.text$di:00007D68 ; Segment type: Pure code
.text$di:00007D68 ; Segment permissions: Read/Execute
.text$di:00007D68 _text$di        segment para public 'CODE' use32
.text$di:00007D68                 assume cs:_text$di
.text$di:00007D68                 ;org 7D68h
.text$di:00007D68 ; COMDAT (pick any)
.text$di:00007D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007D68
.text$di:00007D68 ; =============== S U B R O U T I N E =======================================
.text$di:00007D68
.text$di:00007D68 ; Attributes: bp-based frame
.text$di:00007D68
.text$di:00007D68 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00007D68 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00007D68                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00007D68                 push    ebp
.text$di:00007D69                 mov     ebp, esp
.text$di:00007D6B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00007D70                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00007D75                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007D7A                 call    _atexit
.text$di:00007D7F                 add     esp, 4
.text$di:00007D82                 pop     ebp
.text$di:00007D83                 retn
.text$di:00007D83 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00007D83
.text$di:00007D83 _text$di        ends
.text$di:00007D83
.text$di:00007D84 ; ===========================================================================
.text$di:00007D84
.text$di:00007D84 ; Segment type: Pure code
.text$di:00007D84 ; Segment permissions: Read/Execute
.text$di:00007D84 _text$di        segment para public 'CODE' use32
.text$di:00007D84                 assume cs:_text$di
.text$di:00007D84                 ;org 7D84h
.text$di:00007D84 ; COMDAT (pick any)
.text$di:00007D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007D84
.text$di:00007D84 ; =============== S U B R O U T I N E =======================================
.text$di:00007D84
.text$di:00007D84 ; Attributes: bp-based frame
.text$di:00007D84
.text$di:00007D84 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00007D84 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00007D84                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00007D84                 push    ebp
.text$di:00007D85                 mov     ebp, esp
.text$di:00007D87                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00007D8C                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00007D91                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007D96                 call    _atexit
.text$di:00007D9B                 add     esp, 4
.text$di:00007D9E                 pop     ebp
.text$di:00007D9F                 retn
.text$di:00007D9F ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:00007D9F
.text$di:00007D9F _text$di        ends
.text$di:00007D9F
.text$di:00007DA0 ; ===========================================================================
.text$di:00007DA0
.text$di:00007DA0 ; Segment type: Pure code
.text$di:00007DA0 ; Segment permissions: Read/Execute
.text$di:00007DA0 _text$di        segment para public 'CODE' use32
.text$di:00007DA0                 assume cs:_text$di
.text$di:00007DA0                 ;org 7DA0h
.text$di:00007DA0 ; COMDAT (pick any)
.text$di:00007DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007DA0
.text$di:00007DA0 ; =============== S U B R O U T I N E =======================================
.text$di:00007DA0
.text$di:00007DA0 ; Attributes: bp-based frame
.text$di:00007DA0
.text$di:00007DA0 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00007DA0 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00007DA0                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00007DA0                 push    ebp
.text$di:00007DA1                 mov     ebp, esp
.text$di:00007DA3                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00007DA8                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00007DAD                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007DB2                 call    _atexit
.text$di:00007DB7                 add     esp, 4
.text$di:00007DBA                 pop     ebp
.text$di:00007DBB                 retn
.text$di:00007DBB ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00007DBB
.text$di:00007DBB _text$di        ends
.text$di:00007DBB
.text$di:00007DBC ; ===========================================================================
.text$di:00007DBC
.text$di:00007DBC ; Segment type: Pure code
.text$di:00007DBC ; Segment permissions: Read/Execute
.text$di:00007DBC _text$di        segment para public 'CODE' use32
.text$di:00007DBC                 assume cs:_text$di
.text$di:00007DBC                 ;org 7DBCh
.text$di:00007DBC ; COMDAT (pick any)
.text$di:00007DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007DBC
.text$di:00007DBC ; =============== S U B R O U T I N E =======================================
.text$di:00007DBC
.text$di:00007DBC ; Attributes: bp-based frame
.text$di:00007DBC
.text$di:00007DBC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00007DBC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007DBC                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00007DBC                 push    ebp
.text$di:00007DBD                 mov     ebp, esp
.text$di:00007DBF                 push    0               ; unsigned int
.text$di:00007DC1                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007DC6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007DCB                 pop     ebp
.text$di:00007DCC                 retn
.text$di:00007DCC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007DCC
.text$di:00007DCC ; ---------------------------------------------------------------------------
.text$di:00007DCD                 align 10h
.text$di:00007DCD _text$di        ends
.text$di:00007DCD
.text$di:00007DD0 ; ===========================================================================
.text$di:00007DD0
.text$di:00007DD0 ; Segment type: Pure code
.text$di:00007DD0 ; Segment permissions: Read/Execute
.text$di:00007DD0 _text$di        segment para public 'CODE' use32
.text$di:00007DD0                 assume cs:_text$di
.text$di:00007DD0                 ;org 7DD0h
.text$di:00007DD0 ; COMDAT (pick any)
.text$di:00007DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007DD0
.text$di:00007DD0 ; =============== S U B R O U T I N E =======================================
.text$di:00007DD0
.text$di:00007DD0 ; Attributes: bp-based frame
.text$di:00007DD0
.text$di:00007DD0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00007DD0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007DD0                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00007DD0                 push    ebp
.text$di:00007DD1                 mov     ebp, esp
.text$di:00007DD3                 push    0               ; unsigned int
.text$di:00007DD5                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007DDA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007DDF                 pop     ebp
.text$di:00007DE0                 retn
.text$di:00007DE0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007DE0
.text$di:00007DE0 ; ---------------------------------------------------------------------------
.text$di:00007DE1                 align 4
.text$di:00007DE1 _text$di        ends
.text$di:00007DE1
.text$di:00007DE4 ; ===========================================================================
.text$di:00007DE4
.text$di:00007DE4 ; Segment type: Pure code
.text$di:00007DE4 ; Segment permissions: Read/Execute
.text$di:00007DE4 _text$di        segment para public 'CODE' use32
.text$di:00007DE4                 assume cs:_text$di
.text$di:00007DE4                 ;org 7DE4h
.text$di:00007DE4 ; COMDAT (pick any)
.text$di:00007DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007DE4
.text$di:00007DE4 ; =============== S U B R O U T I N E =======================================
.text$di:00007DE4
.text$di:00007DE4 ; Attributes: bp-based frame
.text$di:00007DE4
.text$di:00007DE4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00007DE4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007DE4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00007DE4                 push    ebp
.text$di:00007DE5                 mov     ebp, esp
.text$di:00007DE7                 push    0               ; unsigned int
.text$di:00007DE9                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00007DEE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007DF3                 pop     ebp
.text$di:00007DF4                 retn
.text$di:00007DF4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007DF4
.text$di:00007DF4 ; ---------------------------------------------------------------------------
.text$di:00007DF5                 align 4
.text$di:00007DF5 _text$di        ends
.text$di:00007DF5
.text$di:00007DF8 ; ===========================================================================
.text$di:00007DF8
.text$di:00007DF8 ; Segment type: Pure code
.text$di:00007DF8 ; Segment permissions: Read/Execute
.text$di:00007DF8 _text$di        segment para public 'CODE' use32
.text$di:00007DF8                 assume cs:_text$di
.text$di:00007DF8                 ;org 7DF8h
.text$di:00007DF8 ; COMDAT (pick any)
.text$di:00007DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007DF8
.text$di:00007DF8 ; =============== S U B R O U T I N E =======================================
.text$di:00007DF8
.text$di:00007DF8 ; Attributes: bp-based frame
.text$di:00007DF8
.text$di:00007DF8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00007DF8 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007DF8                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00007DF8                 push    ebp
.text$di:00007DF9                 mov     ebp, esp
.text$di:00007DFB                 push    0               ; unsigned int
.text$di:00007DFD                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00007E02                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007E07                 pop     ebp
.text$di:00007E08                 retn
.text$di:00007E08 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007E08
.text$di:00007E08 ; ---------------------------------------------------------------------------
.text$di:00007E09                 align 4
.text$di:00007E09 _text$di        ends
.text$di:00007E09
.text$di:00007E0C ; ===========================================================================
.text$di:00007E0C
.text$di:00007E0C ; Segment type: Pure code
.text$di:00007E0C ; Segment permissions: Read/Execute
.text$di:00007E0C _text$di        segment para public 'CODE' use32
.text$di:00007E0C                 assume cs:_text$di
.text$di:00007E0C                 ;org 7E0Ch
.text$di:00007E0C ; COMDAT (pick any)
.text$di:00007E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007E0C
.text$di:00007E0C ; =============== S U B R O U T I N E =======================================
.text$di:00007E0C
.text$di:00007E0C ; Attributes: bp-based frame
.text$di:00007E0C
.text$di:00007E0C ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00007E0C ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00007E0C
.text$di:00007E0C var_1           = byte ptr -1
.text$di:00007E0C
.text$di:00007E0C                 push    ebp
.text$di:00007E0D                 mov     ebp, esp
.text$di:00007E0F                 push    ecx
.text$di:00007E10                 xor     eax, eax
.text$di:00007E12                 mov     [ebp+var_1], al
.text$di:00007E15                 mov     esp, ebp
.text$di:00007E17                 pop     ebp
.text$di:00007E18                 retn
.text$di:00007E18 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00007E18
.text$di:00007E18 ; ---------------------------------------------------------------------------
.text$di:00007E19                 align 4
.text$di:00007E19 _text$di        ends
.text$di:00007E19
.text$di:00007E1C ; ===========================================================================
.text$di:00007E1C
.text$di:00007E1C ; Segment type: Pure code
.text$di:00007E1C ; Segment permissions: Read/Execute
.text$di:00007E1C _text$di        segment para public 'CODE' use32
.text$di:00007E1C                 assume cs:_text$di
.text$di:00007E1C                 ;org 7E1Ch
.text$di:00007E1C ; COMDAT (pick any)
.text$di:00007E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007E1C
.text$di:00007E1C ; =============== S U B R O U T I N E =======================================
.text$di:00007E1C
.text$di:00007E1C ; Attributes: bp-based frame
.text$di:00007E1C
.text$di:00007E1C ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00007E1C ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00007E1C                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00007E1C
.text$di:00007E1C var_1           = byte ptr -1
.text$di:00007E1C
.text$di:00007E1C                 push    ebp
.text$di:00007E1D                 mov     ebp, esp
.text$di:00007E1F                 push    ecx
.text$di:00007E20                 xor     eax, eax
.text$di:00007E22                 mov     [ebp+var_1], al
.text$di:00007E25                 mov     esp, ebp
.text$di:00007E27                 pop     ebp
.text$di:00007E28                 retn
.text$di:00007E28 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00007E28
.text$di:00007E28 ; ---------------------------------------------------------------------------
.text$di:00007E29                 align 4
.text$di:00007E29 _text$di        ends
.text$di:00007E29
.text$yd:00007E2C ; ===========================================================================
.text$yd:00007E2C
.text$yd:00007E2C ; Segment type: Pure code
.text$yd:00007E2C ; Segment permissions: Read/Execute
.text$yd:00007E2C _text$yd        segment para public 'CODE' use32
.text$yd:00007E2C                 assume cs:_text$yd
.text$yd:00007E2C                 ;org 7E2Ch
.text$yd:00007E2C ; COMDAT (pick any)
.text$yd:00007E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00007E2C
.text$yd:00007E2C ; =============== S U B R O U T I N E =======================================
.text$yd:00007E2C
.text$yd:00007E2C ; Attributes: bp-based frame
.text$yd:00007E2C
.text$yd:00007E2C ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00007E2C ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00007E2C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00007E2C                 push    ebp
.text$yd:00007E2D                 mov     ebp, esp
.text$yd:00007E2F                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00007E34                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00007E39                 pop     ebp
.text$yd:00007E3A                 retn
.text$yd:00007E3A ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00007E3A
.text$yd:00007E3A ; ---------------------------------------------------------------------------
.text$yd:00007E3B                 align 4
.text$yd:00007E3B _text$yd        ends
.text$yd:00007E3B
.text$yd:00007E3C ; ===========================================================================
.text$yd:00007E3C
.text$yd:00007E3C ; Segment type: Pure code
.text$yd:00007E3C ; Segment permissions: Read/Execute
.text$yd:00007E3C _text$yd        segment para public 'CODE' use32
.text$yd:00007E3C                 assume cs:_text$yd
.text$yd:00007E3C                 ;org 7E3Ch
.text$yd:00007E3C ; COMDAT (pick any)
.text$yd:00007E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00007E3C
.text$yd:00007E3C ; =============== S U B R O U T I N E =======================================
.text$yd:00007E3C
.text$yd:00007E3C ; Attributes: bp-based frame
.text$yd:00007E3C
.text$yd:00007E3C ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00007E3C ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00007E3C                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00007E3C                 push    ebp
.text$yd:00007E3D                 mov     ebp, esp
.text$yd:00007E3F                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00007E44                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00007E49                 pop     ebp
.text$yd:00007E4A                 retn
.text$yd:00007E4A ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00007E4A
.text$yd:00007E4A ; ---------------------------------------------------------------------------
.text$yd:00007E4B                 align 4
.text$yd:00007E4B _text$yd        ends
.text$yd:00007E4B
.text$yd:00007E4C ; ===========================================================================
.text$yd:00007E4C
.text$yd:00007E4C ; Segment type: Pure code
.text$yd:00007E4C ; Segment permissions: Read/Execute
.text$yd:00007E4C _text$yd        segment para public 'CODE' use32
.text$yd:00007E4C                 assume cs:_text$yd
.text$yd:00007E4C                 ;org 7E4Ch
.text$yd:00007E4C ; COMDAT (pick any)
.text$yd:00007E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00007E4C
.text$yd:00007E4C ; =============== S U B R O U T I N E =======================================
.text$yd:00007E4C
.text$yd:00007E4C ; Attributes: bp-based frame
.text$yd:00007E4C
.text$yd:00007E4C ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00007E4C ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00007E4C                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00007E4C                 push    ebp
.text$yd:00007E4D                 mov     ebp, esp
.text$yd:00007E4F                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00007E54                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00007E59                 pop     ebp
.text$yd:00007E5A                 retn
.text$yd:00007E5A ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00007E5A
.text$yd:00007E5A ; ---------------------------------------------------------------------------
.text$yd:00007E5B                 align 4
.text$yd:00007E5B _text$yd        ends
.text$yd:00007E5B
.text$mn:00007E5C ; ===========================================================================
.text$mn:00007E5C
.text$mn:00007E5C ; Segment type: Pure code
.text$mn:00007E5C ; Segment permissions: Read/Execute
.text$mn:00007E5C _text$mn        segment para public 'CODE' use32
.text$mn:00007E5C                 assume cs:_text$mn
.text$mn:00007E5C                 ;org 7E5Ch
.text$mn:00007E5C ; COMDAT (pick any)
.text$mn:00007E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E5C
.text$mn:00007E5C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E5C
.text$mn:00007E5C ; Attributes: bp-based frame
.text$mn:00007E5C
.text$mn:00007E5C ; void __thiscall TiXmlCursor::Clear(TiXmlCursor *__hidden this)
.text$mn:00007E5C                 public ?Clear@TiXmlCursor@@QAEXXZ
.text$mn:00007E5C ?Clear@TiXmlCursor@@QAEXXZ proc near    ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+49p
.text$mn:00007E5C                                         ; TiXmlCursor::TiXmlCursor(void)+Ap
.text$mn:00007E5C
.text$mn:00007E5C var_4           = dword ptr -4
.text$mn:00007E5C
.text$mn:00007E5C                 push    ebp
.text$mn:00007E5D                 mov     ebp, esp
.text$mn:00007E5F                 push    ecx
.text$mn:00007E60                 mov     [ebp+var_4], ecx
.text$mn:00007E63                 mov     eax, [ebp+var_4]
.text$mn:00007E66                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:00007E6D                 mov     ecx, [ebp+var_4]
.text$mn:00007E70                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:00007E76                 mov     esp, ebp
.text$mn:00007E78                 pop     ebp
.text$mn:00007E79                 retn
.text$mn:00007E79 ?Clear@TiXmlCursor@@QAEXXZ endp
.text$mn:00007E79
.text$mn:00007E79 ; ---------------------------------------------------------------------------
.text$mn:00007E7A                 align 4
.text$mn:00007E7A _text$mn        ends
.text$mn:00007E7A
.text$mn:00007E7C ; ===========================================================================
.text$mn:00007E7C
.text$mn:00007E7C ; Segment type: Pure code
.text$mn:00007E7C ; Segment permissions: Read/Execute
.text$mn:00007E7C _text$mn        segment para public 'CODE' use32
.text$mn:00007E7C                 assume cs:_text$mn
.text$mn:00007E7C                 ;org 7E7Ch
.text$mn:00007E7C ; COMDAT (pick any)
.text$mn:00007E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E7C
.text$mn:00007E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E7C
.text$mn:00007E7C ; Attributes: bp-based frame
.text$mn:00007E7C
.text$mn:00007E7C ; void __thiscall TiXmlDocument::ClearError(TiXmlDocument *__hidden this)
.text$mn:00007E7C                 public ?ClearError@TiXmlDocument@@QAEXXZ
.text$mn:00007E7C ?ClearError@TiXmlDocument@@QAEXXZ proc near
.text$mn:00007E7C                                         ; CODE XREF: TiXmlDocument::TiXmlDocument(void)+67p
.text$mn:00007E7C                                         ; TiXmlDocument::TiXmlDocument(wchar_t const *)+76p
.text$mn:00007E7C
.text$mn:00007E7C var_4           = dword ptr -4
.text$mn:00007E7C
.text$mn:00007E7C                 push    ebp
.text$mn:00007E7D                 mov     ebp, esp
.text$mn:00007E7F                 push    ecx
.text$mn:00007E80                 mov     [ebp+var_4], ecx
.text$mn:00007E83                 mov     eax, [ebp+var_4]
.text$mn:00007E86                 mov     byte ptr [eax+44h], 0
.text$mn:00007E8A                 mov     ecx, [ebp+var_4]
.text$mn:00007E8D                 mov     dword ptr [ecx+48h], 0
.text$mn:00007E94                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00007E99                 mov     ecx, [ebp+var_4]
.text$mn:00007E9C                 add     ecx, 4Ch ; 'L'
.text$mn:00007E9F                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00007EA4                 mov     edx, [ebp+var_4]
.text$mn:00007EA7                 mov     dword ptr [edx+70h], 0
.text$mn:00007EAE                 mov     eax, [ebp+var_4]
.text$mn:00007EB1                 mov     dword ptr [eax+6Ch], 0
.text$mn:00007EB8                 mov     esp, ebp
.text$mn:00007EBA                 pop     ebp
.text$mn:00007EBB                 retn
.text$mn:00007EBB ?ClearError@TiXmlDocument@@QAEXXZ endp
.text$mn:00007EBB
.text$mn:00007EBB _text$mn        ends
.text$mn:00007EBB
.text$mn:00007EBC ; ===========================================================================
.text$mn:00007EBC
.text$mn:00007EBC ; Segment type: Pure code
.text$mn:00007EBC ; Segment permissions: Read/Execute
.text$mn:00007EBC _text$mn        segment para public 'CODE' use32
.text$mn:00007EBC                 assume cs:_text$mn
.text$mn:00007EBC                 ;org 7EBCh
.text$mn:00007EBC ; COMDAT (pick any)
.text$mn:00007EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EBC
.text$mn:00007EBC ; =============== S U B R O U T I N E =======================================
.text$mn:00007EBC
.text$mn:00007EBC ; Attributes: bp-based frame
.text$mn:00007EBC
.text$mn:00007EBC ; void __thiscall TiXmlNode::CopyToClone(TiXmlNode *this, struct TiXmlNode *)
.text$mn:00007EBC                 public ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z
.text$mn:00007EBC ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z proc near
.text$mn:00007EBC                                         ; CODE XREF: TiXmlElement::Clone(void)+89p
.text$mn:00007EBC                                         ; TiXmlComment::Clone(void)+7Ap ...
.text$mn:00007EBC
.text$mn:00007EBC var_4           = dword ptr -4
.text$mn:00007EBC arg_0           = dword ptr  8
.text$mn:00007EBC
.text$mn:00007EBC                 push    ebp
.text$mn:00007EBD                 mov     ebp, esp
.text$mn:00007EBF                 push    ecx
.text$mn:00007EC0                 mov     [ebp+var_4], ecx
.text$mn:00007EC3                 mov     ecx, [ebp+var_4]
.text$mn:00007EC6                 add     ecx, 1Ch
.text$mn:00007EC9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00007ECE                 push    eax             ; wchar_t *
.text$mn:00007ECF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007ED2                 call    ?SetValue@TiXmlNode@@QAEXPB_W@Z ; TiXmlNode::SetValue(wchar_t const *)
.text$mn:00007ED7                 mov     eax, [ebp+arg_0]
.text$mn:00007EDA                 mov     ecx, [ebp+var_4]
.text$mn:00007EDD                 mov     edx, [ecx+40h]
.text$mn:00007EE0                 mov     [eax+40h], edx
.text$mn:00007EE3                 mov     esp, ebp
.text$mn:00007EE5                 pop     ebp
.text$mn:00007EE6                 retn    4
.text$mn:00007EE6 ?CopyToClone@TiXmlNode@@IBEXPAV1@@Z endp
.text$mn:00007EE6
.text$mn:00007EE6 ; ---------------------------------------------------------------------------
.text$mn:00007EE9                 align 4
.text$mn:00007EE9 _text$mn        ends
.text$mn:00007EE9
.text$mn:00007EEC ; ===========================================================================
.text$mn:00007EEC
.text$mn:00007EEC ; Segment type: Pure code
.text$mn:00007EEC ; Segment permissions: Read/Execute
.text$mn:00007EEC _text$mn        segment para public 'CODE' use32
.text$mn:00007EEC                 assume cs:_text$mn
.text$mn:00007EEC                 ;org 7EECh
.text$mn:00007EEC ; COMDAT (pick any)
.text$mn:00007EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EEC
.text$mn:00007EEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007EEC
.text$mn:00007EEC ; Attributes: bp-based frame
.text$mn:00007EEC
.text$mn:00007EEC ; public: bool __thiscall TiXmlDocument::Error(void)const
.text$mn:00007EEC                 public ?Error@TiXmlDocument@@QBE_NXZ
.text$mn:00007EEC ?Error@TiXmlDocument@@QBE_NXZ proc near ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+18Ap
.text$mn:00007EEC
.text$mn:00007EEC var_4           = dword ptr -4
.text$mn:00007EEC
.text$mn:00007EEC                 push    ebp
.text$mn:00007EED                 mov     ebp, esp
.text$mn:00007EEF                 push    ecx
.text$mn:00007EF0                 mov     [ebp+var_4], ecx
.text$mn:00007EF3                 mov     eax, [ebp+var_4]
.text$mn:00007EF6                 mov     al, [eax+44h]
.text$mn:00007EF9                 mov     esp, ebp
.text$mn:00007EFB                 pop     ebp
.text$mn:00007EFC                 retn
.text$mn:00007EFC ?Error@TiXmlDocument@@QBE_NXZ endp
.text$mn:00007EFC
.text$mn:00007EFC ; ---------------------------------------------------------------------------
.text$mn:00007EFD                 align 10h
.text$mn:00007EFD _text$mn        ends
.text$mn:00007EFD
.text$mn:00007F00 ; ===========================================================================
.text$mn:00007F00
.text$mn:00007F00 ; Segment type: Pure code
.text$mn:00007F00 ; Segment permissions: Read/Execute
.text$mn:00007F00 _text$mn        segment para public 'CODE' use32
.text$mn:00007F00                 assume cs:_text$mn
.text$mn:00007F00                 ;org 7F00h
.text$mn:00007F00 ; COMDAT (pick any)
.text$mn:00007F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F00
.text$mn:00007F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F00
.text$mn:00007F00 ; Attributes: bp-based frame
.text$mn:00007F00
.text$mn:00007F00 ; struct TiXmlAttribute *__thiscall TiXmlAttributeSet::First(TiXmlAttributeSet *__hidden this)
.text$mn:00007F00                 public ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ
.text$mn:00007F00 ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ proc near
.text$mn:00007F00                                         ; CODE XREF: TiXmlElement::~TiXmlElement(void)+3Ep
.text$mn:00007F00                                         ; TiXmlElement::~TiXmlElement(void)+4Dp ...
.text$mn:00007F00
.text$mn:00007F00 var_8           = dword ptr -8
.text$mn:00007F00 var_4           = dword ptr -4
.text$mn:00007F00
.text$mn:00007F00                 push    ebp
.text$mn:00007F01                 mov     ebp, esp
.text$mn:00007F03                 sub     esp, 8
.text$mn:00007F06                 mov     [ebp+var_4], ecx
.text$mn:00007F09                 mov     eax, [ebp+var_4]
.text$mn:00007F0C                 mov     ecx, [ebp+var_4]
.text$mn:00007F0F                 cmp     [ecx+4Ch], eax
.text$mn:00007F12                 jnz     short loc_7F1D
.text$mn:00007F14                 mov     [ebp+var_8], 0
.text$mn:00007F1B                 jmp     short loc_7F26
.text$mn:00007F1D ; ---------------------------------------------------------------------------
.text$mn:00007F1D
.text$mn:00007F1D loc_7F1D:                               ; CODE XREF: TiXmlAttributeSet::First(void)+12j
.text$mn:00007F1D                 mov     edx, [ebp+var_4]
.text$mn:00007F20                 mov     eax, [edx+4Ch]
.text$mn:00007F23                 mov     [ebp+var_8], eax
.text$mn:00007F26
.text$mn:00007F26 loc_7F26:                               ; CODE XREF: TiXmlAttributeSet::First(void)+1Bj
.text$mn:00007F26                 mov     eax, [ebp+var_8]
.text$mn:00007F29                 mov     esp, ebp
.text$mn:00007F2B                 pop     ebp
.text$mn:00007F2C                 retn
.text$mn:00007F2C ?First@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@XZ endp
.text$mn:00007F2C
.text$mn:00007F2C ; ---------------------------------------------------------------------------
.text$mn:00007F2D                 align 10h
.text$mn:00007F2D _text$mn        ends
.text$mn:00007F2D
.text$mn:00007F30 ; ===========================================================================
.text$mn:00007F30
.text$mn:00007F30 ; Segment type: Pure code
.text$mn:00007F30 ; Segment permissions: Read/Execute
.text$mn:00007F30 _text$mn        segment para public 'CODE' use32
.text$mn:00007F30                 assume cs:_text$mn
.text$mn:00007F30                 ;org 7F30h
.text$mn:00007F30 ; COMDAT (pick any)
.text$mn:00007F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F30
.text$mn:00007F30 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F30
.text$mn:00007F30 ; Attributes: bp-based frame
.text$mn:00007F30
.text$mn:00007F30 ; struct TiXmlNode *__thiscall TiXmlNode::FirstChild(TiXmlNode *__hidden this)
.text$mn:00007F30                 public ?FirstChild@TiXmlNode@@QBEPAV1@XZ
.text$mn:00007F30 ?FirstChild@TiXmlNode@@QBEPAV1@XZ proc near
.text$mn:00007F30                                         ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+10p
.text$mn:00007F30                                         ; TiXmlNode::FirstChildElement(void)+Cp ...
.text$mn:00007F30
.text$mn:00007F30 var_4           = dword ptr -4
.text$mn:00007F30
.text$mn:00007F30                 push    ebp
.text$mn:00007F31                 mov     ebp, esp
.text$mn:00007F33                 push    ecx
.text$mn:00007F34                 mov     [ebp+var_4], ecx
.text$mn:00007F37                 mov     eax, [ebp+var_4]
.text$mn:00007F3A                 mov     eax, [eax+14h]
.text$mn:00007F3D                 mov     esp, ebp
.text$mn:00007F3F                 pop     ebp
.text$mn:00007F40                 retn
.text$mn:00007F40 ?FirstChild@TiXmlNode@@QBEPAV1@XZ endp
.text$mn:00007F40
.text$mn:00007F40 ; ---------------------------------------------------------------------------
.text$mn:00007F41                 align 4
.text$mn:00007F41 _text$mn        ends
.text$mn:00007F41
.text$mn:00007F44 ; ===========================================================================
.text$mn:00007F44
.text$mn:00007F44 ; Segment type: Pure code
.text$mn:00007F44 ; Segment permissions: Read/Execute
.text$mn:00007F44 _text$mn        segment para public 'CODE' use32
.text$mn:00007F44                 assume cs:_text$mn
.text$mn:00007F44                 ;org 7F44h
.text$mn:00007F44 ; COMDAT (pick any)
.text$mn:00007F44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F44
.text$mn:00007F44 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F44
.text$mn:00007F44 ; Attributes: bp-based frame
.text$mn:00007F44
.text$mn:00007F44 ; const wchar_t *__thiscall TiXmlAttribute::Name(TiXmlAttribute *__hidden this)
.text$mn:00007F44                 public ?Name@TiXmlAttribute@@QBEPB_WXZ
.text$mn:00007F44 ?Name@TiXmlAttribute@@QBEPB_WXZ proc near
.text$mn:00007F44                                         ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+4Fp
.text$mn:00007F44                                         ; TiXmlAttributeSet::Add(TiXmlAttribute *)+Ap ...
.text$mn:00007F44
.text$mn:00007F44 var_4           = dword ptr -4
.text$mn:00007F44
.text$mn:00007F44                 push    ebp
.text$mn:00007F45                 mov     ebp, esp
.text$mn:00007F47                 push    ecx
.text$mn:00007F48                 mov     [ebp+var_4], ecx
.text$mn:00007F4B                 mov     ecx, [ebp+var_4]
.text$mn:00007F4E                 add     ecx, 10h
.text$mn:00007F51                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00007F56                 mov     esp, ebp
.text$mn:00007F58                 pop     ebp
.text$mn:00007F59                 retn
.text$mn:00007F59 ?Name@TiXmlAttribute@@QBEPB_WXZ endp
.text$mn:00007F59
.text$mn:00007F59 ; ---------------------------------------------------------------------------
.text$mn:00007F5A                 align 4
.text$mn:00007F5A _text$mn        ends
.text$mn:00007F5A
.text$mn:00007F5C ; ===========================================================================
.text$mn:00007F5C
.text$mn:00007F5C ; Segment type: Pure code
.text$mn:00007F5C ; Segment permissions: Read/Execute
.text$mn:00007F5C _text$mn        segment para public 'CODE' use32
.text$mn:00007F5C                 assume cs:_text$mn
.text$mn:00007F5C                 ;org 7F5Ch
.text$mn:00007F5C ; COMDAT (pick any)
.text$mn:00007F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F5C
.text$mn:00007F5C ; =============== S U B R O U T I N E =======================================
.text$mn:00007F5C
.text$mn:00007F5C ; Attributes: bp-based frame
.text$mn:00007F5C
.text$mn:00007F5C ; struct TiXmlNode *__thiscall TiXmlNode::NextSibling(TiXmlNode *__hidden this)
.text$mn:00007F5C                 public ?NextSibling@TiXmlNode@@QBEPAV1@XZ
.text$mn:00007F5C ?NextSibling@TiXmlNode@@QBEPAV1@XZ proc near
.text$mn:00007F5C                                         ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+3Ep
.text$mn:00007F5C                                         ; TiXmlNode::NextSiblingElement(void)+Cp ...
.text$mn:00007F5C
.text$mn:00007F5C var_4           = dword ptr -4
.text$mn:00007F5C
.text$mn:00007F5C                 push    ebp
.text$mn:00007F5D                 mov     ebp, esp
.text$mn:00007F5F                 push    ecx
.text$mn:00007F60                 mov     [ebp+var_4], ecx
.text$mn:00007F63                 mov     eax, [ebp+var_4]
.text$mn:00007F66                 mov     eax, [eax+3Ch]
.text$mn:00007F69                 mov     esp, ebp
.text$mn:00007F6B                 pop     ebp
.text$mn:00007F6C                 retn
.text$mn:00007F6C ?NextSibling@TiXmlNode@@QBEPAV1@XZ endp
.text$mn:00007F6C
.text$mn:00007F6C ; ---------------------------------------------------------------------------
.text$mn:00007F6D                 align 10h
.text$mn:00007F6D _text$mn        ends
.text$mn:00007F6D
.text$mn:00007F70 ; ===========================================================================
.text$mn:00007F70
.text$mn:00007F70 ; Segment type: Pure code
.text$mn:00007F70 ; Segment permissions: Read/Execute
.text$mn:00007F70 _text$mn        segment para public 'CODE' use32
.text$mn:00007F70                 assume cs:_text$mn
.text$mn:00007F70                 ;org 7F70h
.text$mn:00007F70 ; COMDAT (pick any)
.text$mn:00007F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F70
.text$mn:00007F70 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F70
.text$mn:00007F70 ; Attributes: bp-based frame
.text$mn:00007F70
.text$mn:00007F70 ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall TiXmlNode::SValue(void)const
.text$mn:00007F70                 public ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:00007F70 ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:00007F70                                         ; CODE XREF: TiXmlNode::FirstChild(wchar_t const *)+6Cp
.text$mn:00007F70                                         ; TiXmlNode::LastChild(wchar_t const *)+6Cp ...
.text$mn:00007F70
.text$mn:00007F70 var_14          = dword ptr -14h
.text$mn:00007F70 var_10          = dword ptr -10h
.text$mn:00007F70 var_C           = dword ptr -0Ch
.text$mn:00007F70 var_4           = dword ptr -4
.text$mn:00007F70 arg_0           = dword ptr  8
.text$mn:00007F70
.text$mn:00007F70                 push    ebp
.text$mn:00007F71                 mov     ebp, esp
.text$mn:00007F73                 push    0FFFFFFFFh
.text$mn:00007F75                 push    offset __ehhandler$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:00007F7A                 mov     eax, large fs:0
.text$mn:00007F80                 push    eax
.text$mn:00007F81                 sub     esp, 8
.text$mn:00007F84                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F89                 xor     eax, ebp
.text$mn:00007F8B                 push    eax
.text$mn:00007F8C                 lea     eax, [ebp+var_C]
.text$mn:00007F8F                 mov     large fs:0, eax
.text$mn:00007F95                 mov     [ebp+var_14], ecx
.text$mn:00007F98                 mov     [ebp+var_10], 0
.text$mn:00007F9F                 mov     eax, [ebp+var_14]
.text$mn:00007FA2                 add     eax, 1Ch
.text$mn:00007FA5                 push    eax
.text$mn:00007FA6                 mov     ecx, [ebp+arg_0]
.text$mn:00007FA9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007FAE                 mov     [ebp+var_4], 0
.text$mn:00007FB5                 mov     ecx, [ebp+var_10]
.text$mn:00007FB8                 or      ecx, 1
.text$mn:00007FBB                 mov     [ebp+var_10], ecx
.text$mn:00007FBE                 mov     eax, [ebp+arg_0]
.text$mn:00007FC1                 mov     ecx, [ebp+var_C]
.text$mn:00007FC4                 mov     large fs:0, ecx
.text$mn:00007FCB                 pop     ecx
.text$mn:00007FCC                 mov     esp, ebp
.text$mn:00007FCE                 pop     ebp
.text$mn:00007FCF                 retn    4
.text$mn:00007FCF ?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:00007FCF
.text$mn:00007FCF ; ---------------------------------------------------------------------------
.text$mn:00007FD2                 align 4
.text$mn:00007FD2 _text$mn        ends
.text$mn:00007FD2
.text$x:00007FD4 ; ===========================================================================
.text$x:00007FD4
.text$x:00007FD4 ; Segment type: Pure code
.text$x:00007FD4 ; Segment permissions: Read/Execute
.text$x:00007FD4 _text$x         segment para public 'CODE' use32
.text$x:00007FD4                 assume cs:_text$x
.text$x:00007FD4                 ;org 7FD4h
.text$x:00007FD4 ; COMDAT (pick associative to section at 7F70)
.text$x:00007FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007FD4
.text$x:00007FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00007FD4
.text$x:00007FD4
.text$x:00007FD4 __unwindfunclet$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:00007FD4                                         ; DATA XREF: .xdata$x:0000D98Co
.text$x:00007FD4                 mov     eax, [ebp-10h]
.text$x:00007FD7                 and     eax, 1
.text$x:00007FDA                 jz      $LN4_1
.text$x:00007FE0                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00007FE4                 mov     ecx, [ebp+8]
.text$x:00007FE7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FEC ; ---------------------------------------------------------------------------
.text$x:00007FEC
.text$x:00007FEC $LN4_1:                                 ; CODE XREF: __unwindfunclet$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:00007FEC                 retn
.text$x:00007FEC __unwindfunclet$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:00007FEC
.text$x:00007FED
.text$x:00007FED ; =============== S U B R O U T I N E =======================================
.text$x:00007FED
.text$x:00007FED
.text$x:00007FED __ehhandler$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:00007FED                                         ; DATA XREF: TiXmlNode::SValue(void)+5o
.text$x:00007FED
.text$x:00007FED arg_4           = dword ptr  8
.text$x:00007FED
.text$x:00007FED                 mov     edx, [esp+arg_4]
.text$x:00007FF1                 lea     eax, [edx+0Ch]
.text$x:00007FF4                 mov     ecx, [edx-0Ch]
.text$x:00007FF7                 xor     ecx, eax
.text$x:00007FF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007FFE                 mov     eax, offset __ehfuncinfo$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:00008003                 jmp     ___CxxFrameHandler3
.text$x:00008003 __ehhandler$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:00008003
.text$x:00008003 _text$x         ends
.text$x:00008003
.text$mn:00008008 ; ===========================================================================
.text$mn:00008008
.text$mn:00008008 ; Segment type: Pure code
.text$mn:00008008 ; Segment permissions: Read/Execute
.text$mn:00008008 _text$mn        segment para public 'CODE' use32
.text$mn:00008008                 assume cs:_text$mn
.text$mn:00008008                 ;org 8008h
.text$mn:00008008 ; COMDAT (pick any)
.text$mn:00008008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008008
.text$mn:00008008 ; =============== S U B R O U T I N E =======================================
.text$mn:00008008
.text$mn:00008008 ; Attributes: bp-based frame
.text$mn:00008008
.text$mn:00008008 ; void __thiscall TiXmlAttribute::SetValue(TiXmlAttribute *this, const wchar_t *)
.text$mn:00008008                 public ?SetValue@TiXmlAttribute@@QAEXPB_W@Z
.text$mn:00008008 ?SetValue@TiXmlAttribute@@QAEXPB_W@Z proc near
.text$mn:00008008                                         ; CODE XREF: TiXmlAttribute::SetIntValue(int)+3Fp
.text$mn:00008008                                         ; TiXmlAttribute::SetDoubleValue(double)+48p ...
.text$mn:00008008
.text$mn:00008008 var_4           = dword ptr -4
.text$mn:00008008 Str             = dword ptr  8
.text$mn:00008008
.text$mn:00008008                 push    ebp
.text$mn:00008009                 mov     ebp, esp
.text$mn:0000800B                 push    ecx
.text$mn:0000800C                 mov     [ebp+var_4], ecx
.text$mn:0000800F                 mov     eax, [ebp+Str]
.text$mn:00008012                 push    eax             ; Str
.text$mn:00008013                 mov     ecx, [ebp+var_4]
.text$mn:00008016                 add     ecx, 2Ch ; ','
.text$mn:00008019                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000801E                 mov     esp, ebp
.text$mn:00008020                 pop     ebp
.text$mn:00008021                 retn    4
.text$mn:00008021 ?SetValue@TiXmlAttribute@@QAEXPB_W@Z endp
.text$mn:00008021
.text$mn:00008021 _text$mn        ends
.text$mn:00008021
.text$mn:00008024 ; ===========================================================================
.text$mn:00008024
.text$mn:00008024 ; Segment type: Pure code
.text$mn:00008024 ; Segment permissions: Read/Execute
.text$mn:00008024 _text$mn        segment para public 'CODE' use32
.text$mn:00008024                 assume cs:_text$mn
.text$mn:00008024                 ;org 8024h
.text$mn:00008024 ; COMDAT (pick any)
.text$mn:00008024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008024
.text$mn:00008024 ; =============== S U B R O U T I N E =======================================
.text$mn:00008024
.text$mn:00008024 ; Attributes: bp-based frame
.text$mn:00008024
.text$mn:00008024 ; void __thiscall TiXmlNode::SetValue(TiXmlNode *this, const wchar_t *)
.text$mn:00008024                 public ?SetValue@TiXmlNode@@QAEXPB_W@Z
.text$mn:00008024 ?SetValue@TiXmlNode@@QAEXPB_W@Z proc near
.text$mn:00008024                                         ; CODE XREF: TiXmlText::TiXmlText(wchar_t const *)+47p
.text$mn:00008024                                         ; TiXmlNode::CopyToClone(TiXmlNode *)+16p
.text$mn:00008024
.text$mn:00008024 var_4           = dword ptr -4
.text$mn:00008024 Str             = dword ptr  8
.text$mn:00008024
.text$mn:00008024                 push    ebp
.text$mn:00008025                 mov     ebp, esp
.text$mn:00008027                 push    ecx
.text$mn:00008028                 mov     [ebp+var_4], ecx
.text$mn:0000802B                 mov     eax, [ebp+Str]
.text$mn:0000802E                 push    eax             ; Str
.text$mn:0000802F                 mov     ecx, [ebp+var_4]
.text$mn:00008032                 add     ecx, 1Ch
.text$mn:00008035                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000803A                 mov     esp, ebp
.text$mn:0000803C                 pop     ebp
.text$mn:0000803D                 retn    4
.text$mn:0000803D ?SetValue@TiXmlNode@@QAEXPB_W@Z endp
.text$mn:0000803D
.text$mn:0000803D _text$mn        ends
.text$mn:0000803D
.text$mn:00008040 ; ===========================================================================
.text$mn:00008040
.text$mn:00008040 ; Segment type: Pure code
.text$mn:00008040 ; Segment permissions: Read/Execute
.text$mn:00008040 _text$mn        segment para public 'CODE' use32
.text$mn:00008040                 assume cs:_text$mn
.text$mn:00008040                 ;org 8040h
.text$mn:00008040 ; COMDAT (pick any)
.text$mn:00008040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008040
.text$mn:00008040 ; =============== S U B R O U T I N E =======================================
.text$mn:00008040
.text$mn:00008040 ; Attributes: bp-based frame
.text$mn:00008040
.text$mn:00008040 ; struct TiXmlDocument *__thiscall TiXmlNode::ToDocument(TiXmlNode *__hidden this)
.text$mn:00008040                 public ?ToDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ
.text$mn:00008040 ?ToDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ proc near
.text$mn:00008040                                         ; CODE XREF: TiXmlNode::GetDocument(void)+23p
.text$mn:00008040                                         ; TiXmlNode::GetDocument(void)+2Fp
.text$mn:00008040
.text$mn:00008040 var_8           = dword ptr -8
.text$mn:00008040 var_4           = dword ptr -4
.text$mn:00008040
.text$mn:00008040                 push    ebp
.text$mn:00008041                 mov     ebp, esp
.text$mn:00008043                 sub     esp, 8
.text$mn:00008046                 mov     [ebp+var_4], ecx
.text$mn:00008049                 cmp     [ebp+var_4], 0
.text$mn:0000804D                 jz      short loc_8060
.text$mn:0000804F                 mov     eax, [ebp+var_4]
.text$mn:00008052                 cmp     dword ptr [eax+10h], 0
.text$mn:00008056                 jnz     short loc_8060
.text$mn:00008058                 mov     ecx, [ebp+var_4]
.text$mn:0000805B                 mov     [ebp+var_8], ecx
.text$mn:0000805E                 jmp     short loc_8067
.text$mn:00008060 ; ---------------------------------------------------------------------------
.text$mn:00008060
.text$mn:00008060 loc_8060:                               ; CODE XREF: TiXmlNode::ToDocument(void)+Dj
.text$mn:00008060                                         ; TiXmlNode::ToDocument(void)+16j
.text$mn:00008060                 mov     [ebp+var_8], 0
.text$mn:00008067
.text$mn:00008067 loc_8067:                               ; CODE XREF: TiXmlNode::ToDocument(void)+1Ej
.text$mn:00008067                 mov     eax, [ebp+var_8]
.text$mn:0000806A                 mov     esp, ebp
.text$mn:0000806C                 pop     ebp
.text$mn:0000806D                 retn
.text$mn:0000806D ?ToDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ endp
.text$mn:0000806D
.text$mn:0000806D ; ---------------------------------------------------------------------------
.text$mn:0000806E                 align 10h
.text$mn:0000806E _text$mn        ends
.text$mn:0000806E
.text$mn:00008070 ; ===========================================================================
.text$mn:00008070
.text$mn:00008070 ; Segment type: Pure code
.text$mn:00008070 ; Segment permissions: Read/Execute
.text$mn:00008070 _text$mn        segment para public 'CODE' use32
.text$mn:00008070                 assume cs:_text$mn
.text$mn:00008070                 ;org 8070h
.text$mn:00008070 ; COMDAT (pick any)
.text$mn:00008070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008070
.text$mn:00008070 ; =============== S U B R O U T I N E =======================================
.text$mn:00008070
.text$mn:00008070 ; Attributes: bp-based frame
.text$mn:00008070
.text$mn:00008070 ; struct TiXmlElement *__thiscall TiXmlNode::ToElement(TiXmlNode *__hidden this)
.text$mn:00008070                 public ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:00008070 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:00008070                                         ; CODE XREF: TiXmlNode::NextSiblingElement(void)+2Ap
.text$mn:00008070                                         ; TiXmlNode::NextSiblingElement(void)+36p ...
.text$mn:00008070
.text$mn:00008070 var_8           = dword ptr -8
.text$mn:00008070 var_4           = dword ptr -4
.text$mn:00008070
.text$mn:00008070                 push    ebp
.text$mn:00008071                 mov     ebp, esp
.text$mn:00008073                 sub     esp, 8
.text$mn:00008076                 mov     [ebp+var_4], ecx
.text$mn:00008079                 cmp     [ebp+var_4], 0
.text$mn:0000807D                 jz      short loc_8090
.text$mn:0000807F                 mov     eax, [ebp+var_4]
.text$mn:00008082                 cmp     dword ptr [eax+10h], 1
.text$mn:00008086                 jnz     short loc_8090
.text$mn:00008088                 mov     ecx, [ebp+var_4]
.text$mn:0000808B                 mov     [ebp+var_8], ecx
.text$mn:0000808E                 jmp     short loc_8097
.text$mn:00008090 ; ---------------------------------------------------------------------------
.text$mn:00008090
.text$mn:00008090 loc_8090:                               ; CODE XREF: TiXmlNode::ToElement(void)+Dj
.text$mn:00008090                                         ; TiXmlNode::ToElement(void)+16j
.text$mn:00008090                 mov     [ebp+var_8], 0
.text$mn:00008097
.text$mn:00008097 loc_8097:                               ; CODE XREF: TiXmlNode::ToElement(void)+1Ej
.text$mn:00008097                 mov     eax, [ebp+var_8]
.text$mn:0000809A                 mov     esp, ebp
.text$mn:0000809C                 pop     ebp
.text$mn:0000809D                 retn
.text$mn:0000809D ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:0000809D
.text$mn:0000809D ; ---------------------------------------------------------------------------
.text$mn:0000809E                 align 10h
.text$mn:0000809E _text$mn        ends
.text$mn:0000809E
.text$mn:000080A0 ; ===========================================================================
.text$mn:000080A0
.text$mn:000080A0 ; Segment type: Pure code
.text$mn:000080A0 ; Segment permissions: Read/Execute
.text$mn:000080A0 _text$mn        segment para public 'CODE' use32
.text$mn:000080A0                 assume cs:_text$mn
.text$mn:000080A0                 ;org 80A0h
.text$mn:000080A0 ; COMDAT (pick any)
.text$mn:000080A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080A0
.text$mn:000080A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080A0
.text$mn:000080A0 ; Attributes: bp-based frame
.text$mn:000080A0
.text$mn:000080A0 ; struct TiXmlText *__thiscall TiXmlNode::ToText(TiXmlNode *__hidden this)
.text$mn:000080A0                 public ?ToText@TiXmlNode@@QBEPAVTiXmlText@@XZ
.text$mn:000080A0 ?ToText@TiXmlNode@@QBEPAVTiXmlText@@XZ proc near
.text$mn:000080A0                                         ; CODE XREF: TiXmlElement::Print(_iobuf *,int)+CFp
.text$mn:000080A0                                         ; TiXmlElement::Print(_iobuf *,int)+159p
.text$mn:000080A0
.text$mn:000080A0 var_8           = dword ptr -8
.text$mn:000080A0 var_4           = dword ptr -4
.text$mn:000080A0
.text$mn:000080A0                 push    ebp
.text$mn:000080A1                 mov     ebp, esp
.text$mn:000080A3                 sub     esp, 8
.text$mn:000080A6                 mov     [ebp+var_4], ecx
.text$mn:000080A9                 cmp     [ebp+var_4], 0
.text$mn:000080AD                 jz      short loc_80C0
.text$mn:000080AF                 mov     eax, [ebp+var_4]
.text$mn:000080B2                 cmp     dword ptr [eax+10h], 4
.text$mn:000080B6                 jnz     short loc_80C0
.text$mn:000080B8                 mov     ecx, [ebp+var_4]
.text$mn:000080BB                 mov     [ebp+var_8], ecx
.text$mn:000080BE                 jmp     short loc_80C7
.text$mn:000080C0 ; ---------------------------------------------------------------------------
.text$mn:000080C0
.text$mn:000080C0 loc_80C0:                               ; CODE XREF: TiXmlNode::ToText(void)+Dj
.text$mn:000080C0                                         ; TiXmlNode::ToText(void)+16j
.text$mn:000080C0                 mov     [ebp+var_8], 0
.text$mn:000080C7
.text$mn:000080C7 loc_80C7:                               ; CODE XREF: TiXmlNode::ToText(void)+1Ej
.text$mn:000080C7                 mov     eax, [ebp+var_8]
.text$mn:000080CA                 mov     esp, ebp
.text$mn:000080CC                 pop     ebp
.text$mn:000080CD                 retn
.text$mn:000080CD ?ToText@TiXmlNode@@QBEPAVTiXmlText@@XZ endp
.text$mn:000080CD
.text$mn:000080CD ; ---------------------------------------------------------------------------
.text$mn:000080CE                 align 10h
.text$mn:000080CE _text$mn        ends
.text$mn:000080CE
.text$mn:000080D0 ; ===========================================================================
.text$mn:000080D0
.text$mn:000080D0 ; Segment type: Pure code
.text$mn:000080D0 ; Segment permissions: Read/Execute
.text$mn:000080D0 _text$mn        segment para public 'CODE' use32
.text$mn:000080D0                 assume cs:_text$mn
.text$mn:000080D0                 ;org 80D0h
.text$mn:000080D0 ; COMDAT (pick any)
.text$mn:000080D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080D0
.text$mn:000080D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080D0
.text$mn:000080D0 ; Attributes: bp-based frame
.text$mn:000080D0
.text$mn:000080D0 ; int __thiscall TiXmlNode::Type(TiXmlNode *__hidden this)
.text$mn:000080D0                 public ?Type@TiXmlNode@@UBEHXZ
.text$mn:000080D0 ?Type@TiXmlNode@@UBEHXZ proc near       ; DATA XREF: .rdata:0000E48Co
.text$mn:000080D0                                         ; .rdata:0000E4C4o ...
.text$mn:000080D0
.text$mn:000080D0 var_4           = dword ptr -4
.text$mn:000080D0
.text$mn:000080D0                 push    ebp
.text$mn:000080D1                 mov     ebp, esp
.text$mn:000080D3                 push    ecx
.text$mn:000080D4                 mov     [ebp+var_4], ecx
.text$mn:000080D7                 mov     eax, [ebp+var_4]
.text$mn:000080DA                 mov     eax, [eax+10h]
.text$mn:000080DD                 mov     esp, ebp
.text$mn:000080DF                 pop     ebp
.text$mn:000080E0                 retn
.text$mn:000080E0 ?Type@TiXmlNode@@UBEHXZ endp
.text$mn:000080E0
.text$mn:000080E0 ; ---------------------------------------------------------------------------
.text$mn:000080E1                 align 4
.text$mn:000080E1 _text$mn        ends
.text$mn:000080E1
.text$mn:000080E4 ; ===========================================================================
.text$mn:000080E4
.text$mn:000080E4 ; Segment type: Pure code
.text$mn:000080E4 ; Segment permissions: Read/Execute
.text$mn:000080E4 _text$mn        segment para public 'CODE' use32
.text$mn:000080E4                 assume cs:_text$mn
.text$mn:000080E4                 ;org 80E4h
.text$mn:000080E4 ; COMDAT (pick any)
.text$mn:000080E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080E4
.text$mn:000080E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000080E4
.text$mn:000080E4 ; Attributes: bp-based frame
.text$mn:000080E4
.text$mn:000080E4 ; const wchar_t *__thiscall TiXmlAttribute::Value(TiXmlAttribute *__hidden this)
.text$mn:000080E4                 public ?Value@TiXmlAttribute@@QBEPB_WXZ
.text$mn:000080E4 ?Value@TiXmlAttribute@@QBEPB_WXZ proc near
.text$mn:000080E4                                         ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+83p
.text$mn:000080E4                                         ; TiXmlElement::Attribute(wchar_t const *)+24p ...
.text$mn:000080E4
.text$mn:000080E4 var_4           = dword ptr -4
.text$mn:000080E4
.text$mn:000080E4                 push    ebp
.text$mn:000080E5                 mov     ebp, esp
.text$mn:000080E7                 push    ecx
.text$mn:000080E8                 mov     [ebp+var_4], ecx
.text$mn:000080EB                 mov     ecx, [ebp+var_4]
.text$mn:000080EE                 add     ecx, 2Ch ; ','
.text$mn:000080F1                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000080F6                 mov     esp, ebp
.text$mn:000080F8                 pop     ebp
.text$mn:000080F9                 retn
.text$mn:000080F9 ?Value@TiXmlAttribute@@QBEPB_WXZ endp
.text$mn:000080F9
.text$mn:000080F9 ; ---------------------------------------------------------------------------
.text$mn:000080FA                 align 4
.text$mn:000080FA _text$mn        ends
.text$mn:000080FA
.text$mn:000080FC ; ===========================================================================
.text$mn:000080FC
.text$mn:000080FC ; Segment type: Pure code
.text$mn:000080FC ; Segment permissions: Read/Execute
.text$mn:000080FC _text$mn        segment para public 'CODE' use32
.text$mn:000080FC                 assume cs:_text$mn
.text$mn:000080FC                 ;org 80FCh
.text$mn:000080FC ; COMDAT (pick any)
.text$mn:000080FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080FC
.text$mn:000080FC ; =============== S U B R O U T I N E =======================================
.text$mn:000080FC
.text$mn:000080FC ; Attributes: bp-based frame
.text$mn:000080FC
.text$mn:000080FC ; const wchar_t *__thiscall TiXmlNode::Value(TiXmlNode *__hidden this)
.text$mn:000080FC                 public ?Value@TiXmlNode@@QBEPB_WXZ
.text$mn:000080FC ?Value@TiXmlNode@@QBEPB_WXZ proc near   ; CODE XREF: TiXmlElement::Clone(void)+48p
.text$mn:000080FC
.text$mn:000080FC var_4           = dword ptr -4
.text$mn:000080FC
.text$mn:000080FC                 push    ebp
.text$mn:000080FD                 mov     ebp, esp
.text$mn:000080FF                 push    ecx
.text$mn:00008100                 mov     [ebp+var_4], ecx
.text$mn:00008103                 mov     ecx, [ebp+var_4]
.text$mn:00008106                 add     ecx, 1Ch
.text$mn:00008109                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000810E                 mov     esp, ebp
.text$mn:00008110                 pop     ebp
.text$mn:00008111                 retn
.text$mn:00008111 ?Value@TiXmlNode@@QBEPB_WXZ endp
.text$mn:00008111
.text$mn:00008111 ; ---------------------------------------------------------------------------
.text$mn:00008112                 align 4
.text$mn:00008112 _text$mn        ends
.text$mn:00008112
.text$mn:00008114 ; ===========================================================================
.text$mn:00008114
.text$mn:00008114 ; Segment type: Pure code
.text$mn:00008114 ; Segment permissions: Read/Execute
.text$mn:00008114 _text$mn        segment para public 'CODE' use32
.text$mn:00008114                 assume cs:_text$mn
.text$mn:00008114                 ;org 8114h
.text$mn:00008114 ; COMDAT (pick any)
.text$mn:00008114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008114
.text$mn:00008114 ; =============== S U B R O U T I N E =======================================
.text$mn:00008114
.text$mn:00008114 ; Attributes: bp-based frame
.text$mn:00008114
.text$mn:00008114 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00008114                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00008114 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008114                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:00008114
.text$mn:00008114 var_10          = byte ptr -10h
.text$mn:00008114 var_8           = dword ptr -8
.text$mn:00008114 var_1           = byte ptr -1
.text$mn:00008114
.text$mn:00008114                 push    ebp
.text$mn:00008115                 mov     ebp, esp
.text$mn:00008117                 sub     esp, 10h
.text$mn:0000811A                 mov     [ebp+var_8], ecx
.text$mn:0000811D                 lea     ecx, [ebp+var_1]
.text$mn:00008120                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00008125                 push    1
.text$mn:00008127                 lea     ecx, [ebp+var_1]
.text$mn:0000812A                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000812F                 mov     ecx, [ebp+var_8]
.text$mn:00008132                 mov     [ecx], eax
.text$mn:00008134                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008137                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000813C                 push    eax             ; int
.text$mn:0000813D                 mov     edx, [ebp+var_8]
.text$mn:00008140                 mov     eax, [edx]
.text$mn:00008142                 push    eax             ; void *
.text$mn:00008143                 lea     ecx, [ebp+var_1]
.text$mn:00008146                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000814B                 mov     ecx, [ebp+var_8]
.text$mn:0000814E                 mov     edx, [ecx]
.text$mn:00008150                 mov     eax, [ebp+var_8]
.text$mn:00008153                 mov     [edx], eax
.text$mn:00008155                 mov     esp, ebp
.text$mn:00008157                 pop     ebp
.text$mn:00008158                 retn
.text$mn:00008158 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008158
.text$mn:00008158 ; ---------------------------------------------------------------------------
.text$mn:00008159                 align 4
.text$mn:00008159 _text$mn        ends
.text$mn:00008159
.text$mn:0000815C ; ===========================================================================
.text$mn:0000815C
.text$mn:0000815C ; Segment type: Pure code
.text$mn:0000815C ; Segment permissions: Read/Execute
.text$mn:0000815C _text$mn        segment para public 'CODE' use32
.text$mn:0000815C                 assume cs:_text$mn
.text$mn:0000815C                 ;org 815Ch
.text$mn:0000815C ; COMDAT (pick any)
.text$mn:0000815C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000815C
.text$mn:0000815C ; =============== S U B R O U T I N E =======================================
.text$mn:0000815C
.text$mn:0000815C ; Attributes: bp-based frame
.text$mn:0000815C
.text$mn:0000815C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:0000815C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000815C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000815C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:0000815C
.text$mn:0000815C var_10          = byte ptr -10h
.text$mn:0000815C var_8           = dword ptr -8
.text$mn:0000815C var_1           = byte ptr -1
.text$mn:0000815C
.text$mn:0000815C                 push    ebp
.text$mn:0000815D                 mov     ebp, esp
.text$mn:0000815F                 sub     esp, 10h
.text$mn:00008162                 mov     [ebp+var_8], ecx
.text$mn:00008165                 lea     ecx, [ebp+var_1]
.text$mn:00008168                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000816D                 push    1
.text$mn:0000816F                 lea     ecx, [ebp+var_1]
.text$mn:00008172                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00008177                 mov     ecx, [ebp+var_8]
.text$mn:0000817A                 mov     [ecx], eax
.text$mn:0000817C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000817F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008184                 push    eax             ; int
.text$mn:00008185                 mov     edx, [ebp+var_8]
.text$mn:00008188                 mov     eax, [edx]
.text$mn:0000818A                 push    eax             ; void *
.text$mn:0000818B                 lea     ecx, [ebp+var_1]
.text$mn:0000818E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008193                 mov     ecx, [ebp+var_8]
.text$mn:00008196                 mov     edx, [ecx]
.text$mn:00008198                 mov     eax, [ebp+var_8]
.text$mn:0000819B                 mov     [edx], eax
.text$mn:0000819D                 mov     esp, ebp
.text$mn:0000819F                 pop     ebp
.text$mn:000081A0                 retn
.text$mn:000081A0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000081A0
.text$mn:000081A0 ; ---------------------------------------------------------------------------
.text$mn:000081A1                 align 4
.text$mn:000081A1 _text$mn        ends
.text$mn:000081A1
.text$mn:000081A4 ; ===========================================================================
.text$mn:000081A4
.text$mn:000081A4 ; Segment type: Pure code
.text$mn:000081A4 ; Segment permissions: Read/Execute
.text$mn:000081A4 _text$mn        segment para public 'CODE' use32
.text$mn:000081A4                 assume cs:_text$mn
.text$mn:000081A4                 ;org 81A4h
.text$mn:000081A4 ; COMDAT (pick any)
.text$mn:000081A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081A4
.text$mn:000081A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081A4
.text$mn:000081A4 ; Attributes: bp-based frame
.text$mn:000081A4
.text$mn:000081A4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Assign_rv(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:000081A4                 public ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
.text$mn:000081A4 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:000081A4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+60p
.text$mn:000081A4
.text$mn:000081A4 var_8           = dword ptr -8
.text$mn:000081A4 var_1           = byte ptr -1
.text$mn:000081A4 arg_0           = dword ptr  8
.text$mn:000081A4
.text$mn:000081A4                 push    ebp
.text$mn:000081A5                 mov     ebp, esp
.text$mn:000081A7                 sub     esp, 8
.text$mn:000081AA                 mov     [ebp+var_8], ecx
.text$mn:000081AD                 mov     eax, [ebp+arg_0]
.text$mn:000081B0                 cmp     dword ptr [eax+18h], 10h
.text$mn:000081B4                 jnb     short loc_81D8
.text$mn:000081B6                 mov     ecx, [ebp+arg_0]
.text$mn:000081B9                 mov     edx, [ecx+14h]
.text$mn:000081BC                 add     edx, 1
.text$mn:000081BF                 push    edx             ; Size
.text$mn:000081C0                 mov     eax, [ebp+arg_0]
.text$mn:000081C3                 add     eax, 4
.text$mn:000081C6                 push    eax             ; Src
.text$mn:000081C7                 mov     ecx, [ebp+var_8]
.text$mn:000081CA                 add     ecx, 4
.text$mn:000081CD                 push    ecx             ; Dst
.text$mn:000081CE                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000081D3                 add     esp, 0Ch
.text$mn:000081D6                 jmp     short loc_8203
.text$mn:000081D8 ; ---------------------------------------------------------------------------
.text$mn:000081D8
.text$mn:000081D8 loc_81D8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+10j
.text$mn:000081D8                 mov     edx, [ebp+arg_0]
.text$mn:000081DB                 add     edx, 4
.text$mn:000081DE                 push    edx             ; int
.text$mn:000081DF                 mov     eax, [ebp+var_8]
.text$mn:000081E2                 add     eax, 4
.text$mn:000081E5                 push    eax             ; void *
.text$mn:000081E6                 lea     ecx, [ebp+var_1]
.text$mn:000081E9                 push    ecx
.text$mn:000081EA                 mov     ecx, [ebp+var_8]
.text$mn:000081ED                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000081F2                 mov     ecx, eax
.text$mn:000081F4                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:000081F9                 mov     edx, [ebp+arg_0]
.text$mn:000081FC                 mov     dword ptr [edx+4], 0
.text$mn:00008203
.text$mn:00008203 loc_8203:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+32j
.text$mn:00008203                 mov     eax, [ebp+var_8]
.text$mn:00008206                 mov     ecx, [ebp+arg_0]
.text$mn:00008209                 mov     edx, [ecx+14h]
.text$mn:0000820C                 mov     [eax+14h], edx
.text$mn:0000820F                 mov     eax, [ebp+var_8]
.text$mn:00008212                 mov     ecx, [ebp+arg_0]
.text$mn:00008215                 mov     edx, [ecx+18h]
.text$mn:00008218                 mov     [eax+18h], edx
.text$mn:0000821B                 push    0               ; Size
.text$mn:0000821D                 push    0               ; char
.text$mn:0000821F                 mov     ecx, [ebp+arg_0]
.text$mn:00008222                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008227                 mov     esp, ebp
.text$mn:00008229                 pop     ebp
.text$mn:0000822A                 retn    4
.text$mn:0000822A ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:0000822A
.text$mn:0000822A ; ---------------------------------------------------------------------------
.text$mn:0000822D                 align 10h
.text$mn:0000822D _text$mn        ends
.text$mn:0000822D
.text$mn:00008230 ; ===========================================================================
.text$mn:00008230
.text$mn:00008230 ; Segment type: Pure code
.text$mn:00008230 ; Segment permissions: Read/Execute
.text$mn:00008230 _text$mn        segment para public 'CODE' use32
.text$mn:00008230                 assume cs:_text$mn
.text$mn:00008230                 ;org 8230h
.text$mn:00008230 ; COMDAT (pick any)
.text$mn:00008230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008230
.text$mn:00008230 ; =============== S U B R O U T I N E =======================================
.text$mn:00008230
.text$mn:00008230 ; Attributes: bp-based frame
.text$mn:00008230
.text$mn:00008230 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00008230                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:00008230 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00008230                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:00008230
.text$mn:00008230 var_8           = dword ptr -8
.text$mn:00008230 var_1           = byte ptr -1
.text$mn:00008230 arg_0           = dword ptr  8
.text$mn:00008230
.text$mn:00008230                 push    ebp
.text$mn:00008231                 mov     ebp, esp
.text$mn:00008233                 sub     esp, 8
.text$mn:00008236                 mov     [ebp+var_8], ecx
.text$mn:00008239                 mov     eax, [ebp+arg_0]
.text$mn:0000823C                 cmp     dword ptr [eax+18h], 8
.text$mn:00008240                 jnb     short loc_8264
.text$mn:00008242                 mov     ecx, [ebp+arg_0]
.text$mn:00008245                 mov     edx, [ecx+14h]
.text$mn:00008248                 add     edx, 1
.text$mn:0000824B                 push    edx             ; int
.text$mn:0000824C                 mov     eax, [ebp+arg_0]
.text$mn:0000824F                 add     eax, 4
.text$mn:00008252                 push    eax             ; Src
.text$mn:00008253                 mov     ecx, [ebp+var_8]
.text$mn:00008256                 add     ecx, 4
.text$mn:00008259                 push    ecx             ; Dst
.text$mn:0000825A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000825F                 add     esp, 0Ch
.text$mn:00008262                 jmp     short loc_828F
.text$mn:00008264 ; ---------------------------------------------------------------------------
.text$mn:00008264
.text$mn:00008264 loc_8264:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:00008264                 mov     edx, [ebp+arg_0]
.text$mn:00008267                 add     edx, 4
.text$mn:0000826A                 push    edx             ; int
.text$mn:0000826B                 mov     eax, [ebp+var_8]
.text$mn:0000826E                 add     eax, 4
.text$mn:00008271                 push    eax             ; void *
.text$mn:00008272                 lea     ecx, [ebp+var_1]
.text$mn:00008275                 push    ecx
.text$mn:00008276                 mov     ecx, [ebp+var_8]
.text$mn:00008279                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000827E                 mov     ecx, eax
.text$mn:00008280                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00008285                 mov     edx, [ebp+arg_0]
.text$mn:00008288                 mov     dword ptr [edx+4], 0
.text$mn:0000828F
.text$mn:0000828F loc_828F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:0000828F                 mov     eax, [ebp+var_8]
.text$mn:00008292                 mov     ecx, [ebp+arg_0]
.text$mn:00008295                 mov     edx, [ecx+14h]
.text$mn:00008298                 mov     [eax+14h], edx
.text$mn:0000829B                 mov     eax, [ebp+var_8]
.text$mn:0000829E                 mov     ecx, [ebp+arg_0]
.text$mn:000082A1                 mov     edx, [ecx+18h]
.text$mn:000082A4                 mov     [eax+18h], edx
.text$mn:000082A7                 push    0
.text$mn:000082A9                 push    0
.text$mn:000082AB                 mov     ecx, [ebp+arg_0]
.text$mn:000082AE                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000082B3                 mov     esp, ebp
.text$mn:000082B5                 pop     ebp
.text$mn:000082B6                 retn    4
.text$mn:000082B6 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:000082B6
.text$mn:000082B6 ; ---------------------------------------------------------------------------
.text$mn:000082B9                 align 4
.text$mn:000082B9 _text$mn        ends
.text$mn:000082B9
.text$mn:000082BC ; ===========================================================================
.text$mn:000082BC
.text$mn:000082BC ; Segment type: Pure code
.text$mn:000082BC ; Segment permissions: Read/Execute
.text$mn:000082BC _text$mn        segment para public 'CODE' use32
.text$mn:000082BC                 assume cs:_text$mn
.text$mn:000082BC                 ;org 82BCh
.text$mn:000082BC ; COMDAT (pick any)
.text$mn:000082BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082BC
.text$mn:000082BC ; =============== S U B R O U T I N E =======================================
.text$mn:000082BC
.text$mn:000082BC ; Attributes: bp-based frame
.text$mn:000082BC
.text$mn:000082BC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000082BC                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:000082BC ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:000082BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:000082BC
.text$mn:000082BC var_4           = dword ptr -4
.text$mn:000082BC
.text$mn:000082BC                 push    ebp
.text$mn:000082BD                 mov     ebp, esp
.text$mn:000082BF                 push    ecx
.text$mn:000082C0                 mov     [ebp+var_4], ecx
.text$mn:000082C3                 mov     esp, ebp
.text$mn:000082C5                 pop     ebp
.text$mn:000082C6                 retn    4
.text$mn:000082C6 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:000082C6
.text$mn:000082C6 ; ---------------------------------------------------------------------------
.text$mn:000082C9                 align 4
.text$mn:000082C9 _text$mn        ends
.text$mn:000082C9
.text$mn:000082CC ; ===========================================================================
.text$mn:000082CC
.text$mn:000082CC ; Segment type: Pure code
.text$mn:000082CC ; Segment permissions: Read/Execute
.text$mn:000082CC _text$mn        segment para public 'CODE' use32
.text$mn:000082CC                 assume cs:_text$mn
.text$mn:000082CC                 ;org 82CCh
.text$mn:000082CC ; COMDAT (pick any)
.text$mn:000082CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082CC
.text$mn:000082CC ; =============== S U B R O U T I N E =======================================
.text$mn:000082CC
.text$mn:000082CC ; Attributes: bp-based frame
.text$mn:000082CC
.text$mn:000082CC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:000082CC                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000082CC ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:000082CC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:000082CC
.text$mn:000082CC var_20          = dword ptr -20h
.text$mn:000082CC var_1C          = dword ptr -1Ch
.text$mn:000082CC var_18          = dword ptr -18h
.text$mn:000082CC var_11          = byte ptr -11h
.text$mn:000082CC var_10          = dword ptr -10h
.text$mn:000082CC var_C           = byte ptr -0Ch
.text$mn:000082CC var_4           = dword ptr -4
.text$mn:000082CC arg_0           = dword ptr  8
.text$mn:000082CC
.text$mn:000082CC ; FUNCTION CHUNK AT .text$mn:000083EE SIZE 00000009 BYTES
.text$mn:000082CC
.text$mn:000082CC                 push    ebp
.text$mn:000082CD                 mov     ebp, esp
.text$mn:000082CF                 push    0FFFFFFFFh
.text$mn:000082D1                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000082D6                 mov     eax, large fs:0
.text$mn:000082DC                 push    eax
.text$mn:000082DD                 push    ecx
.text$mn:000082DE                 sub     esp, 10h
.text$mn:000082E1                 push    ebx
.text$mn:000082E2                 push    esi
.text$mn:000082E3                 push    edi
.text$mn:000082E4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000082E9                 xor     eax, ebp
.text$mn:000082EB                 push    eax
.text$mn:000082EC                 lea     eax, [ebp+var_C]
.text$mn:000082EF                 mov     large fs:0, eax
.text$mn:000082F5                 mov     [ebp+var_10], esp
.text$mn:000082F8                 mov     [ebp+var_18], ecx
.text$mn:000082FB                 mov     eax, [ebp+arg_0]
.text$mn:000082FE                 or      eax, 0Fh
.text$mn:00008301                 mov     [ebp+var_1C], eax
.text$mn:00008304                 mov     ecx, [ebp+var_18]
.text$mn:00008307                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000830C                 cmp     eax, [ebp+var_1C]
.text$mn:0000830F                 jnb     short loc_8319
.text$mn:00008311                 mov     ecx, [ebp+arg_0]
.text$mn:00008314                 mov     [ebp+var_1C], ecx
.text$mn:00008317                 jmp     short loc_836B
.text$mn:00008319 ; ---------------------------------------------------------------------------
.text$mn:00008319
.text$mn:00008319 loc_8319:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00008319                 mov     edx, [ebp+var_18]
.text$mn:0000831C                 mov     ecx, [edx+18h]
.text$mn:0000831F                 shr     ecx, 1
.text$mn:00008321                 mov     eax, [ebp+var_1C]
.text$mn:00008324                 xor     edx, edx
.text$mn:00008326                 mov     esi, 3
.text$mn:0000832B                 div     esi
.text$mn:0000832D                 cmp     ecx, eax
.text$mn:0000832F                 ja      short loc_8333
.text$mn:00008331                 jmp     short loc_836B
.text$mn:00008333 ; ---------------------------------------------------------------------------
.text$mn:00008333
.text$mn:00008333 loc_8333:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00008333                 mov     ecx, [ebp+var_18]
.text$mn:00008336                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000833B                 mov     edx, [ebp+var_18]
.text$mn:0000833E                 mov     ecx, [edx+18h]
.text$mn:00008341                 shr     ecx, 1
.text$mn:00008343                 sub     eax, ecx
.text$mn:00008345                 mov     edx, [ebp+var_18]
.text$mn:00008348                 cmp     [edx+18h], eax
.text$mn:0000834B                 ja      short loc_8360
.text$mn:0000834D                 mov     eax, [ebp+var_18]
.text$mn:00008350                 mov     ecx, [eax+18h]
.text$mn:00008353                 shr     ecx, 1
.text$mn:00008355                 mov     edx, [ebp+var_18]
.text$mn:00008358                 add     ecx, [edx+18h]
.text$mn:0000835B                 mov     [ebp+var_1C], ecx
.text$mn:0000835E                 jmp     short loc_836B
.text$mn:00008360 ; ---------------------------------------------------------------------------
.text$mn:00008360
.text$mn:00008360 loc_8360:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00008360                 mov     ecx, [ebp+var_18]
.text$mn:00008363                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008368                 mov     [ebp+var_1C], eax
.text$mn:0000836B
.text$mn:0000836B loc_836B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000836B                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000836B                 mov     [ebp+var_4], 0
.text$mn:00008372                 mov     eax, [ebp+var_1C]
.text$mn:00008375                 add     eax, 1
.text$mn:00008378                 push    eax
.text$mn:00008379                 lea     ecx, [ebp+var_11]
.text$mn:0000837C                 push    ecx
.text$mn:0000837D                 mov     ecx, [ebp+var_18]
.text$mn:00008380                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008385                 mov     ecx, eax
.text$mn:00008387                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000838C                 mov     [ebp+var_20], eax
.text$mn:0000838F                 jmp     short loc_83EE
.text$mn:0000838F ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:0000838F
.text$mn:00008391
.text$mn:00008391 ; =============== S U B R O U T I N E =======================================
.text$mn:00008391
.text$mn:00008391
.text$mn:00008391 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00008391                                         ; DATA XREF: .xdata$x:0000CA10o
.text$mn:00008391
.text$mn:00008391 ; FUNCTION CHUNK AT .text$mn:000083D8 SIZE 00000009 BYTES
.text$mn:00008391 ; FUNCTION CHUNK AT .text$mn:000083E8 SIZE 00000006 BYTES
.text$mn:00008391
.text$mn:00008391                 mov     [ebp-10h], esp
.text$mn:00008394                 mov     edx, [ebp+8]
.text$mn:00008397                 mov     [ebp-1Ch], edx
.text$mn:0000839A                 mov     byte ptr [ebp-4], 2
.text$mn:0000839E                 mov     eax, [ebp-1Ch]
.text$mn:000083A1                 add     eax, 1
.text$mn:000083A4                 push    eax
.text$mn:000083A5                 lea     ecx, [ebp-12h]
.text$mn:000083A8                 push    ecx
.text$mn:000083A9                 mov     ecx, [ebp-18h]
.text$mn:000083AC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000083B1                 mov     ecx, eax
.text$mn:000083B3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000083B8                 mov     [ebp-20h], eax
.text$mn:000083BB                 jmp     short loc_83D8
.text$mn:000083BB __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:000083BB
.text$mn:000083BD
.text$mn:000083BD ; =============== S U B R O U T I N E =======================================
.text$mn:000083BD
.text$mn:000083BD ; Attributes: noreturn
.text$mn:000083BD
.text$mn:000083BD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:000083BD                                         ; DATA XREF: .xdata$x:0000CA20o
.text$mn:000083BD                 push    0               ; Size
.text$mn:000083BF                 push    1               ; char
.text$mn:000083C1                 mov     ecx, [ebp-18h]
.text$mn:000083C4                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000083C9                 push    0
.text$mn:000083CB                 push    0
.text$mn:000083CD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000083CD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:000083CD
.text$mn:000083D2 ; ---------------------------------------------------------------------------
.text$mn:000083D2                 mov     eax, offset $LN17
.text$mn:000083D7                 retn
.text$mn:000083D8 ; ---------------------------------------------------------------------------
.text$mn:000083D8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000083D8
.text$mn:000083D8 loc_83D8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000083D8                 mov     dword ptr [ebp-4], 1
.text$mn:000083DF                 jmp     short loc_83E8
.text$mn:000083DF ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000083E1
.text$mn:000083E1 ; =============== S U B R O U T I N E =======================================
.text$mn:000083E1
.text$mn:000083E1
.text$mn:000083E1 $LN17           proc near               ; DATA XREF: .text$mn:000083D2o
.text$mn:000083E1                 mov     dword ptr [ebp-4], 1
.text$mn:000083E1 $LN17           endp ; sp-analysis failed
.text$mn:000083E1
.text$mn:000083E8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000083E8
.text$mn:000083E8 loc_83E8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000083E8                 mov     eax, offset $LN19
.text$mn:000083ED                 retn
.text$mn:000083ED ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000083EE ; ---------------------------------------------------------------------------
.text$mn:000083EE ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000083EE
.text$mn:000083EE loc_83EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:000083EE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000083F5                 jmp     short loc_83FE
.text$mn:000083F5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000083F7
.text$mn:000083F7 ; =============== S U B R O U T I N E =======================================
.text$mn:000083F7
.text$mn:000083F7
.text$mn:000083F7 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_83E8o
.text$mn:000083F7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000083FE
.text$mn:000083FE loc_83FE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:000083FE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00008402                 jbe     short loc_841D
.text$mn:00008404                 mov     edx, [ebp+0Ch]
.text$mn:00008407                 push    edx             ; Size
.text$mn:00008408                 mov     ecx, [ebp-18h]
.text$mn:0000840B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008410                 push    eax             ; Src
.text$mn:00008411                 mov     eax, [ebp-20h]
.text$mn:00008414                 push    eax             ; Dst
.text$mn:00008415                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000841A                 add     esp, 0Ch
.text$mn:0000841D
.text$mn:0000841D loc_841D:                               ; CODE XREF: $LN19+Bj
.text$mn:0000841D                 push    0               ; Size
.text$mn:0000841F                 push    1               ; char
.text$mn:00008421                 mov     ecx, [ebp-18h]
.text$mn:00008424                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008429                 lea     ecx, [ebp-20h]
.text$mn:0000842C                 push    ecx             ; int
.text$mn:0000842D                 mov     edx, [ebp-18h]
.text$mn:00008430                 add     edx, 4
.text$mn:00008433                 push    edx             ; void *
.text$mn:00008434                 lea     eax, [ebp-13h]
.text$mn:00008437                 push    eax
.text$mn:00008438                 mov     ecx, [ebp-18h]
.text$mn:0000843B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008440                 mov     ecx, eax
.text$mn:00008442                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00008447                 mov     ecx, [ebp-18h]
.text$mn:0000844A                 mov     edx, [ebp-1Ch]
.text$mn:0000844D                 mov     [ecx+18h], edx
.text$mn:00008450                 mov     eax, [ebp+0Ch]
.text$mn:00008453                 push    eax
.text$mn:00008454                 mov     ecx, [ebp-18h]
.text$mn:00008457                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000845C                 mov     ecx, [ebp-0Ch]
.text$mn:0000845F                 mov     large fs:0, ecx
.text$mn:00008466                 pop     ecx
.text$mn:00008467                 pop     edi
.text$mn:00008468                 pop     esi
.text$mn:00008469                 pop     ebx
.text$mn:0000846A                 mov     esp, ebp
.text$mn:0000846C                 pop     ebp
.text$mn:0000846D                 retn    8
.text$mn:0000846D $LN19           endp ; sp-analysis failed
.text$mn:0000846D
.text$mn:0000846D _text$mn        ends
.text$mn:0000846D
.text$x:00008470 ; ===========================================================================
.text$x:00008470
.text$x:00008470 ; Segment type: Pure code
.text$x:00008470 ; Segment permissions: Read/Execute
.text$x:00008470 _text$x         segment para public 'CODE' use32
.text$x:00008470                 assume cs:_text$x
.text$x:00008470                 ;org 8470h
.text$x:00008470 ; COMDAT (pick associative to section at 82CC)
.text$x:00008470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008470
.text$x:00008470 ; =============== S U B R O U T I N E =======================================
.text$x:00008470
.text$x:00008470
.text$x:00008470 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00008470                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00008470
.text$x:00008470 arg_4           = dword ptr  8
.text$x:00008470
.text$x:00008470                 mov     edx, [esp+arg_4]
.text$x:00008474                 lea     eax, [edx+0Ch]
.text$x:00008477                 mov     ecx, [edx-24h]
.text$x:0000847A                 xor     ecx, eax
.text$x:0000847C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008481                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00008486                 jmp     ___CxxFrameHandler3
.text$x:00008486 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00008486
.text$x:00008486 ; ---------------------------------------------------------------------------
.text$x:0000848B                 align 4
.text$x:0000848B _text$x         ends
.text$x:0000848B
.text$mn:0000848C ; ===========================================================================
.text$mn:0000848C
.text$mn:0000848C ; Segment type: Pure code
.text$mn:0000848C ; Segment permissions: Read/Execute
.text$mn:0000848C _text$mn        segment para public 'CODE' use32
.text$mn:0000848C                 assume cs:_text$mn
.text$mn:0000848C                 ;org 848Ch
.text$mn:0000848C ; COMDAT (pick any)
.text$mn:0000848C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000848C
.text$mn:0000848C ; =============== S U B R O U T I N E =======================================
.text$mn:0000848C
.text$mn:0000848C ; Attributes: bp-based frame
.text$mn:0000848C
.text$mn:0000848C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:0000848C                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000848C ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:0000848C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:0000848C
.text$mn:0000848C var_20          = dword ptr -20h
.text$mn:0000848C var_1C          = dword ptr -1Ch
.text$mn:0000848C var_18          = dword ptr -18h
.text$mn:0000848C var_11          = byte ptr -11h
.text$mn:0000848C var_10          = dword ptr -10h
.text$mn:0000848C var_C           = byte ptr -0Ch
.text$mn:0000848C var_4           = dword ptr -4
.text$mn:0000848C arg_0           = dword ptr  8
.text$mn:0000848C
.text$mn:0000848C ; FUNCTION CHUNK AT .text$mn:000085AE SIZE 00000009 BYTES
.text$mn:0000848C
.text$mn:0000848C                 push    ebp
.text$mn:0000848D                 mov     ebp, esp
.text$mn:0000848F                 push    0FFFFFFFFh
.text$mn:00008491                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00008496                 mov     eax, large fs:0
.text$mn:0000849C                 push    eax
.text$mn:0000849D                 push    ecx
.text$mn:0000849E                 sub     esp, 10h
.text$mn:000084A1                 push    ebx
.text$mn:000084A2                 push    esi
.text$mn:000084A3                 push    edi
.text$mn:000084A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000084A9                 xor     eax, ebp
.text$mn:000084AB                 push    eax
.text$mn:000084AC                 lea     eax, [ebp+var_C]
.text$mn:000084AF                 mov     large fs:0, eax
.text$mn:000084B5                 mov     [ebp+var_10], esp
.text$mn:000084B8                 mov     [ebp+var_18], ecx
.text$mn:000084BB                 mov     eax, [ebp+arg_0]
.text$mn:000084BE                 or      eax, 7
.text$mn:000084C1                 mov     [ebp+var_1C], eax
.text$mn:000084C4                 mov     ecx, [ebp+var_18]
.text$mn:000084C7                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000084CC                 cmp     eax, [ebp+var_1C]
.text$mn:000084CF                 jnb     short loc_84D9
.text$mn:000084D1                 mov     ecx, [ebp+arg_0]
.text$mn:000084D4                 mov     [ebp+var_1C], ecx
.text$mn:000084D7                 jmp     short loc_852B
.text$mn:000084D9 ; ---------------------------------------------------------------------------
.text$mn:000084D9
.text$mn:000084D9 loc_84D9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:000084D9                 mov     edx, [ebp+var_18]
.text$mn:000084DC                 mov     ecx, [edx+18h]
.text$mn:000084DF                 shr     ecx, 1
.text$mn:000084E1                 mov     eax, [ebp+var_1C]
.text$mn:000084E4                 xor     edx, edx
.text$mn:000084E6                 mov     esi, 3
.text$mn:000084EB                 div     esi
.text$mn:000084ED                 cmp     ecx, eax
.text$mn:000084EF                 ja      short loc_84F3
.text$mn:000084F1                 jmp     short loc_852B
.text$mn:000084F3 ; ---------------------------------------------------------------------------
.text$mn:000084F3
.text$mn:000084F3 loc_84F3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:000084F3                 mov     ecx, [ebp+var_18]
.text$mn:000084F6                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000084FB                 mov     edx, [ebp+var_18]
.text$mn:000084FE                 mov     ecx, [edx+18h]
.text$mn:00008501                 shr     ecx, 1
.text$mn:00008503                 sub     eax, ecx
.text$mn:00008505                 mov     edx, [ebp+var_18]
.text$mn:00008508                 cmp     [edx+18h], eax
.text$mn:0000850B                 ja      short loc_8520
.text$mn:0000850D                 mov     eax, [ebp+var_18]
.text$mn:00008510                 mov     ecx, [eax+18h]
.text$mn:00008513                 shr     ecx, 1
.text$mn:00008515                 mov     edx, [ebp+var_18]
.text$mn:00008518                 add     ecx, [edx+18h]
.text$mn:0000851B                 mov     [ebp+var_1C], ecx
.text$mn:0000851E                 jmp     short loc_852B
.text$mn:00008520 ; ---------------------------------------------------------------------------
.text$mn:00008520
.text$mn:00008520 loc_8520:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00008520                 mov     ecx, [ebp+var_18]
.text$mn:00008523                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008528                 mov     [ebp+var_1C], eax
.text$mn:0000852B
.text$mn:0000852B loc_852B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000852B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000852B                 mov     [ebp+var_4], 0
.text$mn:00008532                 mov     eax, [ebp+var_1C]
.text$mn:00008535                 add     eax, 1
.text$mn:00008538                 push    eax
.text$mn:00008539                 lea     ecx, [ebp+var_11]
.text$mn:0000853C                 push    ecx
.text$mn:0000853D                 mov     ecx, [ebp+var_18]
.text$mn:00008540                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008545                 mov     ecx, eax
.text$mn:00008547                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000854C                 mov     [ebp+var_20], eax
.text$mn:0000854F                 jmp     short loc_85AE
.text$mn:0000854F ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:0000854F
.text$mn:00008551
.text$mn:00008551 ; =============== S U B R O U T I N E =======================================
.text$mn:00008551
.text$mn:00008551
.text$mn:00008551 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00008551                                         ; DATA XREF: .xdata$x:0000D3B0o
.text$mn:00008551
.text$mn:00008551 ; FUNCTION CHUNK AT .text$mn:00008598 SIZE 00000009 BYTES
.text$mn:00008551 ; FUNCTION CHUNK AT .text$mn:000085A8 SIZE 00000006 BYTES
.text$mn:00008551
.text$mn:00008551                 mov     [ebp-10h], esp
.text$mn:00008554                 mov     edx, [ebp+8]
.text$mn:00008557                 mov     [ebp-1Ch], edx
.text$mn:0000855A                 mov     byte ptr [ebp-4], 2
.text$mn:0000855E                 mov     eax, [ebp-1Ch]
.text$mn:00008561                 add     eax, 1
.text$mn:00008564                 push    eax
.text$mn:00008565                 lea     ecx, [ebp-12h]
.text$mn:00008568                 push    ecx
.text$mn:00008569                 mov     ecx, [ebp-18h]
.text$mn:0000856C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008571                 mov     ecx, eax
.text$mn:00008573                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00008578                 mov     [ebp-20h], eax
.text$mn:0000857B                 jmp     short loc_8598
.text$mn:0000857B __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:0000857B
.text$mn:0000857D
.text$mn:0000857D ; =============== S U B R O U T I N E =======================================
.text$mn:0000857D
.text$mn:0000857D ; Attributes: noreturn
.text$mn:0000857D
.text$mn:0000857D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:0000857D                                         ; DATA XREF: .xdata$x:0000D3C0o
.text$mn:0000857D                 push    0
.text$mn:0000857F                 push    1
.text$mn:00008581                 mov     ecx, [ebp-18h]
.text$mn:00008584                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008589                 push    0
.text$mn:0000858B                 push    0
.text$mn:0000858D                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000858D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:0000858D
.text$mn:00008592 ; ---------------------------------------------------------------------------
.text$mn:00008592                 mov     eax, offset $LN17_0
.text$mn:00008597                 retn
.text$mn:00008598 ; ---------------------------------------------------------------------------
.text$mn:00008598 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00008598
.text$mn:00008598 loc_8598:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00008598                 mov     dword ptr [ebp-4], 1
.text$mn:0000859F                 jmp     short loc_85A8
.text$mn:0000859F ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000085A1
.text$mn:000085A1 ; =============== S U B R O U T I N E =======================================
.text$mn:000085A1
.text$mn:000085A1
.text$mn:000085A1 $LN17_0         proc near               ; DATA XREF: .text$mn:00008592o
.text$mn:000085A1                 mov     dword ptr [ebp-4], 1
.text$mn:000085A1 $LN17_0         endp ; sp-analysis failed
.text$mn:000085A1
.text$mn:000085A8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000085A8
.text$mn:000085A8 loc_85A8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000085A8                 mov     eax, offset $LN19_0
.text$mn:000085AD                 retn
.text$mn:000085AD ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000085AE ; ---------------------------------------------------------------------------
.text$mn:000085AE ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000085AE
.text$mn:000085AE loc_85AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:000085AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000085B5                 jmp     short loc_85BE
.text$mn:000085B5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000085B7
.text$mn:000085B7 ; =============== S U B R O U T I N E =======================================
.text$mn:000085B7
.text$mn:000085B7
.text$mn:000085B7 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_85A8o
.text$mn:000085B7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000085BE
.text$mn:000085BE loc_85BE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:000085BE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000085C2                 jbe     short loc_85DD
.text$mn:000085C4                 mov     edx, [ebp+0Ch]
.text$mn:000085C7                 push    edx             ; int
.text$mn:000085C8                 mov     ecx, [ebp-18h]
.text$mn:000085CB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000085D0                 push    eax             ; Src
.text$mn:000085D1                 mov     eax, [ebp-20h]
.text$mn:000085D4                 push    eax             ; Dst
.text$mn:000085D5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000085DA                 add     esp, 0Ch
.text$mn:000085DD
.text$mn:000085DD loc_85DD:                               ; CODE XREF: $LN19_0+Bj
.text$mn:000085DD                 push    0
.text$mn:000085DF                 push    1
.text$mn:000085E1                 mov     ecx, [ebp-18h]
.text$mn:000085E4                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000085E9                 lea     ecx, [ebp-20h]
.text$mn:000085EC                 push    ecx             ; int
.text$mn:000085ED                 mov     edx, [ebp-18h]
.text$mn:000085F0                 add     edx, 4
.text$mn:000085F3                 push    edx             ; void *
.text$mn:000085F4                 lea     eax, [ebp-13h]
.text$mn:000085F7                 push    eax
.text$mn:000085F8                 mov     ecx, [ebp-18h]
.text$mn:000085FB                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008600                 mov     ecx, eax
.text$mn:00008602                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00008607                 mov     ecx, [ebp-18h]
.text$mn:0000860A                 mov     edx, [ebp-1Ch]
.text$mn:0000860D                 mov     [ecx+18h], edx
.text$mn:00008610                 mov     eax, [ebp+0Ch]
.text$mn:00008613                 push    eax
.text$mn:00008614                 mov     ecx, [ebp-18h]
.text$mn:00008617                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000861C                 mov     ecx, [ebp-0Ch]
.text$mn:0000861F                 mov     large fs:0, ecx
.text$mn:00008626                 pop     ecx
.text$mn:00008627                 pop     edi
.text$mn:00008628                 pop     esi
.text$mn:00008629                 pop     ebx
.text$mn:0000862A                 mov     esp, ebp
.text$mn:0000862C                 pop     ebp
.text$mn:0000862D                 retn    8
.text$mn:0000862D $LN19_0         endp ; sp-analysis failed
.text$mn:0000862D
.text$mn:0000862D _text$mn        ends
.text$mn:0000862D
.text$x:00008630 ; ===========================================================================
.text$x:00008630
.text$x:00008630 ; Segment type: Pure code
.text$x:00008630 ; Segment permissions: Read/Execute
.text$x:00008630 _text$x         segment para public 'CODE' use32
.text$x:00008630                 assume cs:_text$x
.text$x:00008630                 ;org 8630h
.text$x:00008630 ; COMDAT (pick associative to section at 848C)
.text$x:00008630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008630
.text$x:00008630 ; =============== S U B R O U T I N E =======================================
.text$x:00008630
.text$x:00008630
.text$x:00008630 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00008630                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00008630
.text$x:00008630 arg_4           = dword ptr  8
.text$x:00008630
.text$x:00008630                 mov     edx, [esp+arg_4]
.text$x:00008634                 lea     eax, [edx+0Ch]
.text$x:00008637                 mov     ecx, [edx-24h]
.text$x:0000863A                 xor     ecx, eax
.text$x:0000863C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008641                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00008646                 jmp     ___CxxFrameHandler3
.text$x:00008646 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00008646
.text$x:00008646 ; ---------------------------------------------------------------------------
.text$x:0000864B                 align 4
.text$x:0000864B _text$x         ends
.text$x:0000864B
.text$mn:0000864C ; ===========================================================================
.text$mn:0000864C
.text$mn:0000864C ; Segment type: Pure code
.text$mn:0000864C ; Segment permissions: Read/Execute
.text$mn:0000864C _text$mn        segment para public 'CODE' use32
.text$mn:0000864C                 assume cs:_text$mn
.text$mn:0000864C                 ;org 864Ch
.text$mn:0000864C ; COMDAT (pick any)
.text$mn:0000864C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000864C
.text$mn:0000864C ; =============== S U B R O U T I N E =======================================
.text$mn:0000864C
.text$mn:0000864C ; Attributes: bp-based frame
.text$mn:0000864C
.text$mn:0000864C ; struct std::_Facet_base *__thiscall std::locale::facet::_Decref(std::locale::facet *__hidden this)
.text$mn:0000864C                 public ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
.text$mn:0000864C ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ proc near
.text$mn:0000864C                                         ; DATA XREF: .rdata:0000E080o
.text$mn:0000864C                                         ; .rdata:0000E16Co ...
.text$mn:0000864C
.text$mn:0000864C var_4           = dword ptr -4
.text$mn:0000864C
.text$mn:0000864C                 push    ebp
.text$mn:0000864D                 mov     ebp, esp
.text$mn:0000864F                 push    ecx
.text$mn:00008650                 mov     [ebp+var_4], ecx
.text$mn:00008653                 mov     eax, [ebp+var_4]
.text$mn:00008656                 add     eax, 4
.text$mn:00008659                 or      ecx, 0FFFFFFFFh
.text$mn:0000865C                 lock xadd [eax], ecx
.text$mn:00008660                 dec     ecx
.text$mn:00008661                 jnz     short loc_866A
.text$mn:00008663                 mov     eax, [ebp+var_4]
.text$mn:00008666                 jmp     short loc_866C
.text$mn:00008668 ; ---------------------------------------------------------------------------
.text$mn:00008668                 jmp     short loc_866C
.text$mn:0000866A ; ---------------------------------------------------------------------------
.text$mn:0000866A
.text$mn:0000866A loc_866A:                               ; CODE XREF: std::locale::facet::_Decref(void)+15j
.text$mn:0000866A                 xor     eax, eax
.text$mn:0000866C
.text$mn:0000866C loc_866C:                               ; CODE XREF: std::locale::facet::_Decref(void)+1Aj
.text$mn:0000866C                                         ; std::locale::facet::_Decref(void)+1Cj
.text$mn:0000866C                 mov     esp, ebp
.text$mn:0000866E                 pop     ebp
.text$mn:0000866F                 retn
.text$mn:0000866F ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ endp
.text$mn:0000866F
.text$mn:0000866F _text$mn        ends
.text$mn:0000866F
.text$mn:00008670 ; ===========================================================================
.text$mn:00008670
.text$mn:00008670 ; Segment type: Pure code
.text$mn:00008670 ; Segment permissions: Read/Execute
.text$mn:00008670 _text$mn        segment para public 'CODE' use32
.text$mn:00008670                 assume cs:_text$mn
.text$mn:00008670                 ;org 8670h
.text$mn:00008670 ; COMDAT (pick any)
.text$mn:00008670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008670
.text$mn:00008670 ; =============== S U B R O U T I N E =======================================
.text$mn:00008670
.text$mn:00008670 ; Attributes: bp-based frame
.text$mn:00008670
.text$mn:00008670 ; protected: char __thiscall std::ctype<wchar_t>::_Donarrow(wchar_t, char)const
.text$mn:00008670                 public ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
.text$mn:00008670 ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z proc near
.text$mn:00008670                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t,char)+14p
.text$mn:00008670                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+62p
.text$mn:00008670
.text$mn:00008670 var_18          = dword ptr -18h
.text$mn:00008670 var_14          = dword ptr -14h
.text$mn:00008670 var_D           = byte ptr -0Dh
.text$mn:00008670 var_C           = byte ptr -0Ch
.text$mn:00008670 var_4           = dword ptr -4
.text$mn:00008670 arg_0           = word ptr  8
.text$mn:00008670 arg_4           = byte ptr  0Ch
.text$mn:00008670
.text$mn:00008670                 push    ebp
.text$mn:00008671                 mov     ebp, esp
.text$mn:00008673                 sub     esp, 18h
.text$mn:00008676                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000867B                 xor     eax, ebp
.text$mn:0000867D                 mov     [ebp+var_4], eax
.text$mn:00008680                 mov     [ebp+var_14], ecx
.text$mn:00008683                 mov     [ebp+var_18], 0
.text$mn:0000868A                 mov     eax, [ebp+var_14]
.text$mn:0000868D                 add     eax, 18h
.text$mn:00008690                 push    eax
.text$mn:00008691                 lea     ecx, [ebp+var_18]
.text$mn:00008694                 push    ecx
.text$mn:00008695                 movzx   edx, [ebp+arg_0]
.text$mn:00008699                 push    edx
.text$mn:0000869A                 lea     eax, [ebp+var_C]
.text$mn:0000869D                 push    eax
.text$mn:0000869E                 call    __Wcrtomb
.text$mn:000086A3                 add     esp, 10h
.text$mn:000086A6                 cmp     eax, 1
.text$mn:000086A9                 jz      short loc_86B3
.text$mn:000086AB                 mov     cl, [ebp+arg_4]
.text$mn:000086AE                 mov     [ebp+var_D], cl
.text$mn:000086B1                 jmp     short loc_86C2
.text$mn:000086B3 ; ---------------------------------------------------------------------------
.text$mn:000086B3
.text$mn:000086B3 loc_86B3:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+39j
.text$mn:000086B3                 mov     edx, 1
.text$mn:000086B8                 imul    eax, edx, 0
.text$mn:000086BB                 mov     cl, [ebp+eax+var_C]
.text$mn:000086BF                 mov     [ebp+var_D], cl
.text$mn:000086C2
.text$mn:000086C2 loc_86C2:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+41j
.text$mn:000086C2                 mov     al, [ebp+var_D]
.text$mn:000086C5                 mov     ecx, [ebp+var_4]
.text$mn:000086C8                 xor     ecx, ebp
.text$mn:000086CA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000086CF                 mov     esp, ebp
.text$mn:000086D1                 pop     ebp
.text$mn:000086D2                 retn    8
.text$mn:000086D2 ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z endp
.text$mn:000086D2
.text$mn:000086D2 ; ---------------------------------------------------------------------------
.text$mn:000086D5                 align 4
.text$mn:000086D5 _text$mn        ends
.text$mn:000086D5
.text$mn:000086D8 ; ===========================================================================
.text$mn:000086D8
.text$mn:000086D8 ; Segment type: Pure code
.text$mn:000086D8 ; Segment permissions: Read/Execute
.text$mn:000086D8 _text$mn        segment para public 'CODE' use32
.text$mn:000086D8                 assume cs:_text$mn
.text$mn:000086D8                 ;org 86D8h
.text$mn:000086D8 ; COMDAT (pick any)
.text$mn:000086D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086D8
.text$mn:000086D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000086D8
.text$mn:000086D8 ; Attributes: bp-based frame
.text$mn:000086D8
.text$mn:000086D8 ; protected: wchar_t __thiscall std::ctype<wchar_t>::_Dowiden(char)const
.text$mn:000086D8                 public ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
.text$mn:000086D8 ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z proc near
.text$mn:000086D8                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+5Dp
.text$mn:000086D8                                         ; std::ctype<wchar_t>::do_widen(char)+Fp
.text$mn:000086D8
.text$mn:000086D8 var_10          = dword ptr -10h
.text$mn:000086D8 var_C           = dword ptr -0Ch
.text$mn:000086D8 var_8           = word ptr -8
.text$mn:000086D8 var_2           = word ptr -2
.text$mn:000086D8 arg_0           = byte ptr  8
.text$mn:000086D8
.text$mn:000086D8                 push    ebp
.text$mn:000086D9                 mov     ebp, esp
.text$mn:000086DB                 sub     esp, 10h
.text$mn:000086DE                 mov     [ebp+var_C], ecx
.text$mn:000086E1                 mov     [ebp+var_10], 0
.text$mn:000086E8                 mov     eax, [ebp+var_C]
.text$mn:000086EB                 add     eax, 18h
.text$mn:000086EE                 push    eax
.text$mn:000086EF                 lea     ecx, [ebp+var_10]
.text$mn:000086F2                 push    ecx
.text$mn:000086F3                 push    1
.text$mn:000086F5                 lea     edx, [ebp+arg_0]
.text$mn:000086F8                 push    edx
.text$mn:000086F9                 lea     eax, [ebp+var_8]
.text$mn:000086FC                 push    eax
.text$mn:000086FD                 call    __Mbrtowc
.text$mn:00008702                 add     esp, 14h
.text$mn:00008705                 test    eax, eax
.text$mn:00008707                 jge     short loc_8714
.text$mn:00008709                 mov     ecx, 0FFFFh
.text$mn:0000870E                 mov     [ebp+var_2], cx
.text$mn:00008712                 jmp     short loc_871C
.text$mn:00008714 ; ---------------------------------------------------------------------------
.text$mn:00008714
.text$mn:00008714 loc_8714:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+2Fj
.text$mn:00008714                 mov     dx, [ebp+var_8]
.text$mn:00008718                 mov     [ebp+var_2], dx
.text$mn:0000871C
.text$mn:0000871C loc_871C:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+3Aj
.text$mn:0000871C                 mov     ax, [ebp+var_2]
.text$mn:00008720                 mov     esp, ebp
.text$mn:00008722                 pop     ebp
.text$mn:00008723                 retn    4
.text$mn:00008723 ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z endp
.text$mn:00008723
.text$mn:00008723 ; ---------------------------------------------------------------------------
.text$mn:00008726                 align 4
.text$mn:00008726 _text$mn        ends
.text$mn:00008726
.text$mn:00008728 ; ===========================================================================
.text$mn:00008728
.text$mn:00008728 ; Segment type: Pure code
.text$mn:00008728 ; Segment permissions: Read/Execute
.text$mn:00008728 _text$mn        segment para public 'CODE' use32
.text$mn:00008728                 assume cs:_text$mn
.text$mn:00008728                 ;org 8728h
.text$mn:00008728 ; COMDAT (pick any)
.text$mn:00008728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008728
.text$mn:00008728 ; =============== S U B R O U T I N E =======================================
.text$mn:00008728
.text$mn:00008728 ; Attributes: bp-based frame
.text$mn:00008728
.text$mn:00008728 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00008728                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00008728 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00008728                                         ; CODE XREF: $LN19+60p
.text$mn:00008728                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00008728
.text$mn:00008728 var_8           = dword ptr -8
.text$mn:00008728 var_1           = byte ptr -1
.text$mn:00008728 arg_0           = dword ptr  8
.text$mn:00008728
.text$mn:00008728                 push    ebp
.text$mn:00008729                 mov     ebp, esp
.text$mn:0000872B                 sub     esp, 8
.text$mn:0000872E                 mov     [ebp+var_8], ecx
.text$mn:00008731                 mov     [ebp+var_1], 0
.text$mn:00008735                 mov     eax, [ebp+var_8]
.text$mn:00008738                 mov     ecx, [ebp+arg_0]
.text$mn:0000873B                 mov     [eax+14h], ecx
.text$mn:0000873E                 lea     edx, [ebp+var_1]
.text$mn:00008741                 push    edx
.text$mn:00008742                 mov     ecx, [ebp+var_8]
.text$mn:00008745                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000874A                 add     eax, [ebp+arg_0]
.text$mn:0000874D                 push    eax
.text$mn:0000874E                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:00008753                 add     esp, 8
.text$mn:00008756                 mov     esp, ebp
.text$mn:00008758                 pop     ebp
.text$mn:00008759                 retn    4
.text$mn:00008759 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00008759
.text$mn:00008759 _text$mn        ends
.text$mn:00008759
.text$mn:0000875C ; ===========================================================================
.text$mn:0000875C
.text$mn:0000875C ; Segment type: Pure code
.text$mn:0000875C ; Segment permissions: Read/Execute
.text$mn:0000875C _text$mn        segment para public 'CODE' use32
.text$mn:0000875C                 assume cs:_text$mn
.text$mn:0000875C                 ;org 875Ch
.text$mn:0000875C ; COMDAT (pick any)
.text$mn:0000875C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000875C
.text$mn:0000875C ; =============== S U B R O U T I N E =======================================
.text$mn:0000875C
.text$mn:0000875C ; Attributes: bp-based frame
.text$mn:0000875C
.text$mn:0000875C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:0000875C                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000875C ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000875C                                         ; CODE XREF: $LN19_0+60p
.text$mn:0000875C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:0000875C
.text$mn:0000875C var_8           = dword ptr -8
.text$mn:0000875C var_2           = word ptr -2
.text$mn:0000875C arg_0           = dword ptr  8
.text$mn:0000875C
.text$mn:0000875C                 push    ebp
.text$mn:0000875D                 mov     ebp, esp
.text$mn:0000875F                 sub     esp, 8
.text$mn:00008762                 mov     [ebp+var_8], ecx
.text$mn:00008765                 xor     eax, eax
.text$mn:00008767                 mov     [ebp+var_2], ax
.text$mn:0000876B                 mov     ecx, [ebp+var_8]
.text$mn:0000876E                 mov     edx, [ebp+arg_0]
.text$mn:00008771                 mov     [ecx+14h], edx
.text$mn:00008774                 lea     eax, [ebp+var_2]
.text$mn:00008777                 push    eax
.text$mn:00008778                 mov     ecx, [ebp+var_8]
.text$mn:0000877B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008780                 mov     ecx, [ebp+arg_0]
.text$mn:00008783                 lea     edx, [eax+ecx*2]
.text$mn:00008786                 push    edx
.text$mn:00008787                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000878C                 add     esp, 8
.text$mn:0000878F                 mov     esp, ebp
.text$mn:00008791                 pop     ebp
.text$mn:00008792                 retn    4
.text$mn:00008792 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00008792
.text$mn:00008792 ; ---------------------------------------------------------------------------
.text$mn:00008795                 align 4
.text$mn:00008795 _text$mn        ends
.text$mn:00008795
.text$mn:00008798 ; ===========================================================================
.text$mn:00008798
.text$mn:00008798 ; Segment type: Pure code
.text$mn:00008798 ; Segment permissions: Read/Execute
.text$mn:00008798 _text$mn        segment para public 'CODE' use32
.text$mn:00008798                 assume cs:_text$mn
.text$mn:00008798                 ;org 8798h
.text$mn:00008798 ; COMDAT (pick any)
.text$mn:00008798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008798
.text$mn:00008798 ; =============== S U B R O U T I N E =======================================
.text$mn:00008798
.text$mn:00008798 ; Attributes: bp-based frame
.text$mn:00008798
.text$mn:00008798 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00008798                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00008798 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008798                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00008798
.text$mn:00008798 var_8           = dword ptr -8
.text$mn:00008798 var_1           = byte ptr -1
.text$mn:00008798
.text$mn:00008798                 push    ebp
.text$mn:00008799                 mov     ebp, esp
.text$mn:0000879B                 sub     esp, 8
.text$mn:0000879E                 mov     [ebp+var_8], ecx
.text$mn:000087A1                 lea     ecx, [ebp+var_1]
.text$mn:000087A4                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000087A9                 mov     ecx, [ebp+var_8] ; this
.text$mn:000087AC                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000087B1                 mov     eax, [ebp+var_8]
.text$mn:000087B4                 mov     ecx, [eax]
.text$mn:000087B6                 push    ecx
.text$mn:000087B7                 lea     ecx, [ebp+var_1]
.text$mn:000087BA                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000087BF                 push    1               ; int
.text$mn:000087C1                 mov     edx, [ebp+var_8]
.text$mn:000087C4                 mov     eax, [edx]
.text$mn:000087C6                 push    eax             ; void *
.text$mn:000087C7                 lea     ecx, [ebp+var_1]
.text$mn:000087CA                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000087CF                 mov     ecx, [ebp+var_8]
.text$mn:000087D2                 mov     dword ptr [ecx], 0
.text$mn:000087D8                 mov     esp, ebp
.text$mn:000087DA                 pop     ebp
.text$mn:000087DB                 retn
.text$mn:000087DB ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000087DB
.text$mn:000087DB _text$mn        ends
.text$mn:000087DB
.text$mn:000087DC ; ===========================================================================
.text$mn:000087DC
.text$mn:000087DC ; Segment type: Pure code
.text$mn:000087DC ; Segment permissions: Read/Execute
.text$mn:000087DC _text$mn        segment para public 'CODE' use32
.text$mn:000087DC                 assume cs:_text$mn
.text$mn:000087DC                 ;org 87DCh
.text$mn:000087DC ; COMDAT (pick any)
.text$mn:000087DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087DC
.text$mn:000087DC ; =============== S U B R O U T I N E =======================================
.text$mn:000087DC
.text$mn:000087DC ; Attributes: bp-based frame
.text$mn:000087DC
.text$mn:000087DC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:000087DC                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000087DC ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000087DC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:000087DC
.text$mn:000087DC var_8           = dword ptr -8
.text$mn:000087DC var_1           = byte ptr -1
.text$mn:000087DC
.text$mn:000087DC                 push    ebp
.text$mn:000087DD                 mov     ebp, esp
.text$mn:000087DF                 sub     esp, 8
.text$mn:000087E2                 mov     [ebp+var_8], ecx
.text$mn:000087E5                 lea     ecx, [ebp+var_1]
.text$mn:000087E8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000087ED                 mov     ecx, [ebp+var_8] ; this
.text$mn:000087F0                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000087F5                 mov     eax, [ebp+var_8]
.text$mn:000087F8                 mov     ecx, [eax]
.text$mn:000087FA                 push    ecx
.text$mn:000087FB                 lea     ecx, [ebp+var_1]
.text$mn:000087FE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00008803                 push    1               ; int
.text$mn:00008805                 mov     edx, [ebp+var_8]
.text$mn:00008808                 mov     eax, [edx]
.text$mn:0000880A                 push    eax             ; void *
.text$mn:0000880B                 lea     ecx, [ebp+var_1]
.text$mn:0000880E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00008813                 mov     ecx, [ebp+var_8]
.text$mn:00008816                 mov     dword ptr [ecx], 0
.text$mn:0000881C                 mov     esp, ebp
.text$mn:0000881E                 pop     ebp
.text$mn:0000881F                 retn
.text$mn:0000881F ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000881F
.text$mn:0000881F _text$mn        ends
.text$mn:0000881F
.text$mn:00008820 ; ===========================================================================
.text$mn:00008820
.text$mn:00008820 ; Segment type: Pure code
.text$mn:00008820 ; Segment permissions: Read/Execute
.text$mn:00008820 _text$mn        segment para public 'CODE' use32
.text$mn:00008820                 assume cs:_text$mn
.text$mn:00008820                 ;org 8820h
.text$mn:00008820 ; COMDAT (pick any)
.text$mn:00008820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008820
.text$mn:00008820 ; =============== S U B R O U T I N E =======================================
.text$mn:00008820
.text$mn:00008820 ; Attributes: bp-based frame
.text$mn:00008820
.text$mn:00008820 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:00008820                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:00008820 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:00008820                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Fp
.text$mn:00008820                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+33p ...
.text$mn:00008820
.text$mn:00008820 var_4           = dword ptr -4
.text$mn:00008820 arg_0           = dword ptr  8
.text$mn:00008820
.text$mn:00008820                 push    ebp
.text$mn:00008821                 mov     ebp, esp
.text$mn:00008823                 push    ecx
.text$mn:00008824                 mov     [ebp+var_4], ecx
.text$mn:00008827                 mov     ecx, [ebp+arg_0]
.text$mn:0000882A                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000882F                 mov     eax, [ebp+arg_0]
.text$mn:00008832                 mov     esp, ebp
.text$mn:00008834                 pop     ebp
.text$mn:00008835                 retn    4
.text$mn:00008835 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00008835
.text$mn:00008835 _text$mn        ends
.text$mn:00008835
.text$mn:00008838 ; ===========================================================================
.text$mn:00008838
.text$mn:00008838 ; Segment type: Pure code
.text$mn:00008838 ; Segment permissions: Read/Execute
.text$mn:00008838 _text$mn        segment para public 'CODE' use32
.text$mn:00008838                 assume cs:_text$mn
.text$mn:00008838                 ;org 8838h
.text$mn:00008838 ; COMDAT (pick any)
.text$mn:00008838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008838
.text$mn:00008838 ; =============== S U B R O U T I N E =======================================
.text$mn:00008838
.text$mn:00008838 ; Attributes: bp-based frame
.text$mn:00008838
.text$mn:00008838 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00008838                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00008838 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00008838                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:00008838                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:00008838
.text$mn:00008838 var_4           = dword ptr -4
.text$mn:00008838 arg_0           = dword ptr  8
.text$mn:00008838
.text$mn:00008838                 push    ebp
.text$mn:00008839                 mov     ebp, esp
.text$mn:0000883B                 push    ecx
.text$mn:0000883C                 mov     [ebp+var_4], ecx
.text$mn:0000883F                 mov     ecx, [ebp+arg_0]
.text$mn:00008842                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00008847                 mov     eax, [ebp+arg_0]
.text$mn:0000884A                 mov     esp, ebp
.text$mn:0000884C                 pop     ebp
.text$mn:0000884D                 retn    4
.text$mn:0000884D ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:0000884D
.text$mn:0000884D _text$mn        ends
.text$mn:0000884D
.text$mn:00008850 ; ===========================================================================
.text$mn:00008850
.text$mn:00008850 ; Segment type: Pure code
.text$mn:00008850 ; Segment permissions: Read/Execute
.text$mn:00008850 _text$mn        segment para public 'CODE' use32
.text$mn:00008850                 assume cs:_text$mn
.text$mn:00008850                 ;org 8850h
.text$mn:00008850 ; COMDAT (pick any)
.text$mn:00008850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008850
.text$mn:00008850 ; =============== S U B R O U T I N E =======================================
.text$mn:00008850
.text$mn:00008850 ; Attributes: bp-based frame
.text$mn:00008850
.text$mn:00008850 ; int __cdecl std::ctype<wchar_t>::_Getcat(int, std::locale *)
.text$mn:00008850                 public ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:00008850 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$mn:00008850                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+78p
.text$mn:00008850
.text$mn:00008850 var_5C          = byte ptr -5Ch
.text$mn:00008850 var_28          = dword ptr -28h
.text$mn:00008850 var_24          = dword ptr -24h
.text$mn:00008850 var_20          = dword ptr -20h
.text$mn:00008850 var_1C          = dword ptr -1Ch
.text$mn:00008850 var_18          = dword ptr -18h
.text$mn:00008850 var_14          = dword ptr -14h
.text$mn:00008850 var_10          = dword ptr -10h
.text$mn:00008850 var_C           = dword ptr -0Ch
.text$mn:00008850 var_4           = dword ptr -4
.text$mn:00008850 arg_0           = dword ptr  8
.text$mn:00008850 arg_4           = dword ptr  0Ch
.text$mn:00008850
.text$mn:00008850                 push    ebp
.text$mn:00008851                 mov     ebp, esp
.text$mn:00008853                 push    0FFFFFFFFh
.text$mn:00008855                 push    offset __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:0000885A                 mov     eax, large fs:0
.text$mn:00008860                 push    eax
.text$mn:00008861                 sub     esp, 50h
.text$mn:00008864                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008869                 xor     eax, ebp
.text$mn:0000886B                 push    eax
.text$mn:0000886C                 lea     eax, [ebp+var_C]
.text$mn:0000886F                 mov     large fs:0, eax
.text$mn:00008875                 mov     [ebp+var_10], 0
.text$mn:0000887C                 cmp     [ebp+arg_0], 0
.text$mn:00008880                 jz      loc_8933
.text$mn:00008886                 mov     eax, [ebp+arg_0]
.text$mn:00008889                 cmp     dword ptr [eax], 0
.text$mn:0000888C                 jnz     loc_8933
.text$mn:00008892                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00008897                 mov     [ebp+var_1C], eax
.text$mn:0000889A                 push    0A6Ch           ; int
.text$mn:0000889F                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000088A4                 mov     ecx, [ebp+var_1C]
.text$mn:000088A7                 push    ecx             ; struct std::_DebugHeapTag_t *
.text$mn:000088A8                 push    44h ; 'D'       ; unsigned int
.text$mn:000088AA                 call    ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:000088AF                 add     esp, 10h
.text$mn:000088B2                 mov     [ebp+var_14], eax
.text$mn:000088B5                 mov     [ebp+var_4], 0
.text$mn:000088BC                 cmp     [ebp+var_14], 0
.text$mn:000088C0                 jz      short loc_88FC
.text$mn:000088C2                 push    0
.text$mn:000088C4                 mov     ecx, [ebp+arg_4] ; this
.text$mn:000088C7                 call    ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str(void)
.text$mn:000088CC                 push    eax             ; char *
.text$mn:000088CD                 lea     ecx, [ebp+var_5C] ; this
.text$mn:000088D0                 call    ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo(char const *)
.text$mn:000088D5                 mov     [ebp+var_20], eax
.text$mn:000088D8                 mov     edx, [ebp+var_20]
.text$mn:000088DB                 mov     [ebp+var_24], edx
.text$mn:000088DE                 mov     byte ptr [ebp+var_4], 1
.text$mn:000088E2                 mov     eax, [ebp+var_10]
.text$mn:000088E5                 or      eax, 1
.text$mn:000088E8                 mov     [ebp+var_10], eax
.text$mn:000088EB                 mov     ecx, [ebp+var_24]
.text$mn:000088EE                 push    ecx
.text$mn:000088EF                 mov     ecx, [ebp+var_14]
.text$mn:000088F2                 call    ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)
.text$mn:000088F7                 mov     [ebp+var_18], eax
.text$mn:000088FA                 jmp     short loc_8903
.text$mn:000088FC ; ---------------------------------------------------------------------------
.text$mn:000088FC
.text$mn:000088FC loc_88FC:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+70j
.text$mn:000088FC                 mov     [ebp+var_18], 0
.text$mn:00008903
.text$mn:00008903 loc_8903:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+AAj
.text$mn:00008903                 mov     edx, [ebp+var_18]
.text$mn:00008906                 mov     [ebp+var_28], edx
.text$mn:00008909                 mov     [ebp+var_4], 2
.text$mn:00008910                 mov     eax, [ebp+arg_0]
.text$mn:00008913                 mov     ecx, [ebp+var_28]
.text$mn:00008916                 mov     [eax], ecx
.text$mn:00008918                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000891F                 mov     edx, [ebp+var_10]
.text$mn:00008922                 and     edx, 1
.text$mn:00008925                 jz      short loc_8933
.text$mn:00008927                 and     [ebp+var_10], 0FFFFFFFEh
.text$mn:0000892B                 lea     ecx, [ebp+var_5C] ; this
.text$mn:0000892E                 call    ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$mn:00008933
.text$mn:00008933 loc_8933:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+30j
.text$mn:00008933                                         ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+3Cj ...
.text$mn:00008933                 mov     eax, 2
.text$mn:00008938                 mov     ecx, [ebp+var_C]
.text$mn:0000893B                 mov     large fs:0, ecx
.text$mn:00008942                 pop     ecx
.text$mn:00008943                 mov     esp, ebp
.text$mn:00008945                 pop     ebp
.text$mn:00008946                 retn
.text$mn:00008946 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$mn:00008946
.text$mn:00008946 ; ---------------------------------------------------------------------------
.text$mn:00008947                 align 4
.text$mn:00008947 _text$mn        ends
.text$mn:00008947
.text$x:00008948 ; ===========================================================================
.text$x:00008948
.text$x:00008948 ; Segment type: Pure code
.text$x:00008948 ; Segment permissions: Read/Execute
.text$x:00008948 _text$x         segment para public 'CODE' use32
.text$x:00008948                 assume cs:_text$x
.text$x:00008948                 ;org 8948h
.text$x:00008948 ; COMDAT (pick associative to section at 8850)
.text$x:00008948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008948
.text$x:00008948 ; =============== S U B R O U T I N E =======================================
.text$x:00008948
.text$x:00008948
.text$x:00008948 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 proc near
.text$x:00008948                                         ; DATA XREF: .xdata$x:0000CD04o
.text$x:00008948                 push    0A6Ch
.text$x:0000894D                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$x:00008952                 mov     eax, [ebp-1Ch]
.text$x:00008955                 push    eax
.text$x:00008956                 mov     eax, [ebp-14h]
.text$x:00008959                 push    eax             ; Memory
.text$x:0000895A                 call    ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)
.text$x:0000895F                 add     esp, 10h
.text$x:00008962                 retn
.text$x:00008962 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 endp
.text$x:00008962
.text$x:00008963
.text$x:00008963 ; =============== S U B R O U T I N E =======================================
.text$x:00008963
.text$x:00008963
.text$x:00008963 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 proc near
.text$x:00008963                                         ; DATA XREF: .xdata$x:0000CD0Co
.text$x:00008963                                         ; .xdata$x:0000CD14o
.text$x:00008963                 mov     eax, [ebp-10h]
.text$x:00008966                 and     eax, 1
.text$x:00008969                 jz      $LN8
.text$x:0000896F                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00008973                 lea     ecx, [ebp-5Ch]  ; this
.text$x:00008976                 jmp     ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$x:0000897B ; ---------------------------------------------------------------------------
.text$x:0000897B
.text$x:0000897B $LN8:                                   ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+6j
.text$x:0000897B                 retn
.text$x:0000897B __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 endp
.text$x:0000897B
.text$x:0000897C
.text$x:0000897C ; =============== S U B R O U T I N E =======================================
.text$x:0000897C
.text$x:0000897C
.text$x:0000897C __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$x:0000897C                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5o
.text$x:0000897C
.text$x:0000897C arg_4           = dword ptr  8
.text$x:0000897C
.text$x:0000897C                 mov     edx, [esp+arg_4]
.text$x:00008980                 lea     eax, [edx+0Ch]
.text$x:00008983                 mov     ecx, [edx-54h]
.text$x:00008986                 xor     ecx, eax
.text$x:00008988                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000898D                 mov     eax, offset __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$x:00008992                 jmp     ___CxxFrameHandler3
.text$x:00008992 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$x:00008992
.text$x:00008992 ; ---------------------------------------------------------------------------
.text$x:00008997                 align 4
.text$x:00008997 _text$x         ends
.text$x:00008997
.text$mn:00008998 ; ===========================================================================
.text$mn:00008998
.text$mn:00008998 ; Segment type: Pure code
.text$mn:00008998 ; Segment permissions: Read/Execute
.text$mn:00008998 _text$mn        segment para public 'CODE' use32
.text$mn:00008998                 assume cs:_text$mn
.text$mn:00008998                 ;org 8998h
.text$mn:00008998 ; COMDAT (pick any)
.text$mn:00008998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008998
.text$mn:00008998 ; =============== S U B R O U T I N E =======================================
.text$mn:00008998
.text$mn:00008998 ; Attributes: bp-based frame
.text$mn:00008998
.text$mn:00008998 ; public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const
.text$mn:00008998                 public ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
.text$mn:00008998 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ proc near
.text$mn:00008998                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+1Cp
.text$mn:00008998
.text$mn:00008998 var_24          = byte ptr -24h
.text$mn:00008998 var_14          = dword ptr -14h
.text$mn:00008998 var_10          = dword ptr -10h
.text$mn:00008998 var_C           = dword ptr -0Ch
.text$mn:00008998 var_8           = dword ptr -8
.text$mn:00008998 var_4           = dword ptr -4
.text$mn:00008998 arg_0           = dword ptr  8
.text$mn:00008998
.text$mn:00008998                 push    ebp
.text$mn:00008999                 mov     ebp, esp
.text$mn:0000899B                 sub     esp, 24h
.text$mn:0000899E                 mov     [ebp+var_4], ecx
.text$mn:000089A1                 lea     eax, [ebp+var_24]
.text$mn:000089A4                 push    eax
.text$mn:000089A5                 call    __Getctype
.text$mn:000089AA                 add     esp, 4
.text$mn:000089AD                 mov     ecx, [eax]
.text$mn:000089AF                 mov     [ebp+var_14], ecx
.text$mn:000089B2                 mov     edx, [eax+4]
.text$mn:000089B5                 mov     [ebp+var_10], edx
.text$mn:000089B8                 mov     ecx, [eax+8]
.text$mn:000089BB                 mov     [ebp+var_C], ecx
.text$mn:000089BE                 mov     edx, [eax+0Ch]
.text$mn:000089C1                 mov     [ebp+var_8], edx
.text$mn:000089C4                 mov     eax, [ebp+arg_0]
.text$mn:000089C7                 mov     ecx, [ebp+var_14]
.text$mn:000089CA                 mov     [eax], ecx
.text$mn:000089CC                 mov     edx, [ebp+var_10]
.text$mn:000089CF                 mov     [eax+4], edx
.text$mn:000089D2                 mov     ecx, [ebp+var_C]
.text$mn:000089D5                 mov     [eax+8], ecx
.text$mn:000089D8                 mov     edx, [ebp+var_8]
.text$mn:000089DB                 mov     [eax+0Ch], edx
.text$mn:000089DE                 mov     eax, [ebp+arg_0]
.text$mn:000089E1                 mov     esp, ebp
.text$mn:000089E3                 pop     ebp
.text$mn:000089E4                 retn    4
.text$mn:000089E4 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ endp
.text$mn:000089E4
.text$mn:000089E4 ; ---------------------------------------------------------------------------
.text$mn:000089E7                 align 4
.text$mn:000089E7 _text$mn        ends
.text$mn:000089E7
.text$mn:000089E8 ; ===========================================================================
.text$mn:000089E8
.text$mn:000089E8 ; Segment type: Pure code
.text$mn:000089E8 ; Segment permissions: Read/Execute
.text$mn:000089E8 _text$mn        segment para public 'CODE' use32
.text$mn:000089E8                 assume cs:_text$mn
.text$mn:000089E8                 ;org 89E8h
.text$mn:000089E8 ; COMDAT (pick any)
.text$mn:000089E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089E8
.text$mn:000089E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000089E8
.text$mn:000089E8 ; Attributes: bp-based frame
.text$mn:000089E8
.text$mn:000089E8 ; public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const
.text$mn:000089E8                 public ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
.text$mn:000089E8 ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ proc near
.text$mn:000089E8                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+44p
.text$mn:000089E8
.text$mn:000089E8 var_60          = byte ptr -60h
.text$mn:000089E8 var_34          = dword ptr -34h
.text$mn:000089E8 var_30          = byte ptr -30h
.text$mn:000089E8 var_4           = dword ptr -4
.text$mn:000089E8 arg_0           = dword ptr  8
.text$mn:000089E8
.text$mn:000089E8                 push    ebp
.text$mn:000089E9                 mov     ebp, esp
.text$mn:000089EB                 sub     esp, 60h
.text$mn:000089EE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000089F3                 xor     eax, ebp
.text$mn:000089F5                 mov     [ebp+var_4], eax
.text$mn:000089F8                 push    esi
.text$mn:000089F9                 push    edi
.text$mn:000089FA                 mov     [ebp+var_34], ecx
.text$mn:000089FD                 lea     eax, [ebp+var_60]
.text$mn:00008A00                 push    eax
.text$mn:00008A01                 call    __Getcvt
.text$mn:00008A06                 add     esp, 4
.text$mn:00008A09                 mov     ecx, 0Bh
.text$mn:00008A0E                 mov     esi, eax
.text$mn:00008A10                 lea     edi, [ebp+var_30]
.text$mn:00008A13                 rep movsd
.text$mn:00008A15                 mov     ecx, 0Bh
.text$mn:00008A1A                 lea     esi, [ebp+var_30]
.text$mn:00008A1D                 mov     edi, [ebp+arg_0]
.text$mn:00008A20                 rep movsd
.text$mn:00008A22                 mov     eax, [ebp+arg_0]
.text$mn:00008A25                 pop     edi
.text$mn:00008A26                 pop     esi
.text$mn:00008A27                 mov     ecx, [ebp+var_4]
.text$mn:00008A2A                 xor     ecx, ebp
.text$mn:00008A2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00008A31                 mov     esp, ebp
.text$mn:00008A33                 pop     ebp
.text$mn:00008A34                 retn    4
.text$mn:00008A34 ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ endp
.text$mn:00008A34
.text$mn:00008A34 ; ---------------------------------------------------------------------------
.text$mn:00008A37                 align 4
.text$mn:00008A37 _text$mn        ends
.text$mn:00008A37
.text$mn:00008A38 ; ===========================================================================
.text$mn:00008A38
.text$mn:00008A38 ; Segment type: Pure code
.text$mn:00008A38 ; Segment permissions: Read/Execute
.text$mn:00008A38 _text$mn        segment para public 'CODE' use32
.text$mn:00008A38                 assume cs:_text$mn
.text$mn:00008A38                 ;org 8A38h
.text$mn:00008A38 ; COMDAT (pick any)
.text$mn:00008A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A38
.text$mn:00008A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A38
.text$mn:00008A38 ; Attributes: bp-based frame
.text$mn:00008A38
.text$mn:00008A38 ; const struct std::locale::facet *__thiscall std::locale::_Getfacet(std::locale *this, unsigned int)
.text$mn:00008A38                 public ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
.text$mn:00008A38 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z proc near
.text$mn:00008A38                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+52p
.text$mn:00008A38
.text$mn:00008A38 var_14          = dword ptr -14h
.text$mn:00008A38 var_10          = dword ptr -10h
.text$mn:00008A38 var_C           = dword ptr -0Ch
.text$mn:00008A38 var_8           = dword ptr -8
.text$mn:00008A38 var_4           = dword ptr -4
.text$mn:00008A38 arg_0           = dword ptr  8
.text$mn:00008A38
.text$mn:00008A38                 push    ebp
.text$mn:00008A39                 mov     ebp, esp
.text$mn:00008A3B                 sub     esp, 14h
.text$mn:00008A3E                 mov     [ebp+var_4], ecx
.text$mn:00008A41                 mov     eax, [ebp+var_4]
.text$mn:00008A44                 mov     ecx, [eax]
.text$mn:00008A46                 mov     edx, [ebp+arg_0]
.text$mn:00008A49                 cmp     edx, [ecx+0Ch]
.text$mn:00008A4C                 jnb     short loc_8A61
.text$mn:00008A4E                 mov     eax, [ebp+var_4]
.text$mn:00008A51                 mov     ecx, [eax]
.text$mn:00008A53                 mov     edx, [ecx+8]
.text$mn:00008A56                 mov     eax, [ebp+arg_0]
.text$mn:00008A59                 mov     ecx, [edx+eax*4]
.text$mn:00008A5C                 mov     [ebp+var_8], ecx
.text$mn:00008A5F                 jmp     short loc_8A68
.text$mn:00008A61 ; ---------------------------------------------------------------------------
.text$mn:00008A61
.text$mn:00008A61 loc_8A61:                               ; CODE XREF: std::locale::_Getfacet(uint)+14j
.text$mn:00008A61                 mov     [ebp+var_8], 0
.text$mn:00008A68
.text$mn:00008A68 loc_8A68:                               ; CODE XREF: std::locale::_Getfacet(uint)+27j
.text$mn:00008A68                 mov     edx, [ebp+var_8]
.text$mn:00008A6B                 mov     [ebp+var_C], edx
.text$mn:00008A6E                 cmp     [ebp+var_C], 0
.text$mn:00008A72                 jnz     short loc_8A81
.text$mn:00008A74                 mov     eax, [ebp+var_4]
.text$mn:00008A77                 mov     ecx, [eax]
.text$mn:00008A79                 movzx   edx, byte ptr [ecx+14h]
.text$mn:00008A7D                 test    edx, edx
.text$mn:00008A7F                 jnz     short loc_8A88
.text$mn:00008A81
.text$mn:00008A81 loc_8A81:                               ; CODE XREF: std::locale::_Getfacet(uint)+3Aj
.text$mn:00008A81                 mov     eax, [ebp+var_C]
.text$mn:00008A84                 jmp     short loc_8AB6
.text$mn:00008A86 ; ---------------------------------------------------------------------------
.text$mn:00008A86                 jmp     short loc_8AB6
.text$mn:00008A88 ; ---------------------------------------------------------------------------
.text$mn:00008A88
.text$mn:00008A88 loc_8A88:                               ; CODE XREF: std::locale::_Getfacet(uint)+47j
.text$mn:00008A88                 call    ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale(void)
.text$mn:00008A8D                 mov     [ebp+var_10], eax
.text$mn:00008A90                 mov     eax, [ebp+var_10]
.text$mn:00008A93                 mov     ecx, [ebp+arg_0]
.text$mn:00008A96                 cmp     ecx, [eax+0Ch]
.text$mn:00008A99                 jnb     short loc_8AAC
.text$mn:00008A9B                 mov     edx, [ebp+var_10]
.text$mn:00008A9E                 mov     eax, [edx+8]
.text$mn:00008AA1                 mov     ecx, [ebp+arg_0]
.text$mn:00008AA4                 mov     edx, [eax+ecx*4]
.text$mn:00008AA7                 mov     [ebp+var_14], edx
.text$mn:00008AAA                 jmp     short loc_8AB3
.text$mn:00008AAC ; ---------------------------------------------------------------------------
.text$mn:00008AAC
.text$mn:00008AAC loc_8AAC:                               ; CODE XREF: std::locale::_Getfacet(uint)+61j
.text$mn:00008AAC                 mov     [ebp+var_14], 0
.text$mn:00008AB3
.text$mn:00008AB3 loc_8AB3:                               ; CODE XREF: std::locale::_Getfacet(uint)+72j
.text$mn:00008AB3                 mov     eax, [ebp+var_14]
.text$mn:00008AB6
.text$mn:00008AB6 loc_8AB6:                               ; CODE XREF: std::locale::_Getfacet(uint)+4Cj
.text$mn:00008AB6                                         ; std::locale::_Getfacet(uint)+4Ej
.text$mn:00008AB6                 mov     esp, ebp
.text$mn:00008AB8                 pop     ebp
.text$mn:00008AB9                 retn    4
.text$mn:00008AB9 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z endp
.text$mn:00008AB9
.text$mn:00008AB9 _text$mn        ends
.text$mn:00008AB9
.text$mn:00008ABC ; ===========================================================================
.text$mn:00008ABC
.text$mn:00008ABC ; Segment type: Pure code
.text$mn:00008ABC ; Segment permissions: Read/Execute
.text$mn:00008ABC _text$mn        segment para public 'CODE' use32
.text$mn:00008ABC                 assume cs:_text$mn
.text$mn:00008ABC                 ;org 8ABCh
.text$mn:00008ABC ; COMDAT (pick any)
.text$mn:00008ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008ABC
.text$mn:00008ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00008ABC
.text$mn:00008ABC ; Attributes: bp-based frame
.text$mn:00008ABC
.text$mn:00008ABC ; private: int __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Getstate(int)
.text$mn:00008ABC                 public ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
.text$mn:00008ABC ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z proc near
.text$mn:00008ABC                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+50p
.text$mn:00008ABC
.text$mn:00008ABC var_8           = dword ptr -8
.text$mn:00008ABC var_4           = dword ptr -4
.text$mn:00008ABC arg_0           = dword ptr  8
.text$mn:00008ABC
.text$mn:00008ABC                 push    ebp
.text$mn:00008ABD                 mov     ebp, esp
.text$mn:00008ABF                 sub     esp, 8
.text$mn:00008AC2                 mov     [ebp+var_8], ecx
.text$mn:00008AC5                 mov     [ebp+var_4], 0
.text$mn:00008ACC                 mov     eax, [ebp+arg_0]
.text$mn:00008ACF                 and     eax, 1
.text$mn:00008AD2                 jnz     short loc_8ADD
.text$mn:00008AD4                 mov     ecx, [ebp+var_4]
.text$mn:00008AD7                 or      ecx, 4
.text$mn:00008ADA                 mov     [ebp+var_4], ecx
.text$mn:00008ADD
.text$mn:00008ADD loc_8ADD:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Getstate(int)+16j
.text$mn:00008ADD                 mov     edx, [ebp+arg_0]
.text$mn:00008AE0                 and     edx, 2
.text$mn:00008AE3                 jnz     short loc_8AEE
.text$mn:00008AE5                 mov     eax, [ebp+var_4]
.text$mn:00008AE8                 or      eax, 2
.text$mn:00008AEB                 mov     [ebp+var_4], eax
.text$mn:00008AEE
.text$mn:00008AEE loc_8AEE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Getstate(int)+27j
.text$mn:00008AEE                 mov     ecx, [ebp+arg_0]
.text$mn:00008AF1                 and     ecx, 8
.text$mn:00008AF4                 jz      short loc_8AFF
.text$mn:00008AF6                 mov     edx, [ebp+var_4]
.text$mn:00008AF9                 or      edx, 8
.text$mn:00008AFC                 mov     [ebp+var_4], edx
.text$mn:00008AFF
.text$mn:00008AFF loc_8AFF:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Getstate(int)+38j
.text$mn:00008AFF                 mov     eax, [ebp+arg_0]
.text$mn:00008B02                 and     eax, 4
.text$mn:00008B05                 jz      short loc_8B10
.text$mn:00008B07                 mov     ecx, [ebp+var_4]
.text$mn:00008B0A                 or      ecx, 10h
.text$mn:00008B0D                 mov     [ebp+var_4], ecx
.text$mn:00008B10
.text$mn:00008B10 loc_8B10:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Getstate(int)+49j
.text$mn:00008B10                 mov     eax, [ebp+var_4]
.text$mn:00008B13                 mov     esp, ebp
.text$mn:00008B15                 pop     ebp
.text$mn:00008B16                 retn    4
.text$mn:00008B16 ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z endp
.text$mn:00008B16
.text$mn:00008B16 ; ---------------------------------------------------------------------------
.text$mn:00008B19                 align 4
.text$mn:00008B19 _text$mn        ends
.text$mn:00008B19
.text$mn:00008B1C ; ===========================================================================
.text$mn:00008B1C
.text$mn:00008B1C ; Segment type: Pure code
.text$mn:00008B1C ; Segment permissions: Read/Execute
.text$mn:00008B1C _text$mn        segment para public 'CODE' use32
.text$mn:00008B1C                 assume cs:_text$mn
.text$mn:00008B1C                 ;org 8B1Ch
.text$mn:00008B1C ; COMDAT (pick any)
.text$mn:00008B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B1C
.text$mn:00008B1C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B1C
.text$mn:00008B1C ; Attributes: bp-based frame
.text$mn:00008B1C
.text$mn:00008B1C ; protected: __int64 __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Gnavail(void)const
.text$mn:00008B1C                 public ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
.text$mn:00008B1C ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ proc near
.text$mn:00008B1C                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+2Bp
.text$mn:00008B1C
.text$mn:00008B1C var_8           = dword ptr -8
.text$mn:00008B1C var_4           = dword ptr -4
.text$mn:00008B1C
.text$mn:00008B1C                 push    ebp
.text$mn:00008B1D                 mov     ebp, esp
.text$mn:00008B1F                 sub     esp, 8
.text$mn:00008B22                 mov     [ebp+var_4], ecx
.text$mn:00008B25                 mov     eax, [ebp+var_4]
.text$mn:00008B28                 mov     ecx, [eax+1Ch]
.text$mn:00008B2B                 cmp     dword ptr [ecx], 0
.text$mn:00008B2E                 jz      short loc_8B3D
.text$mn:00008B30                 mov     edx, [ebp+var_4]
.text$mn:00008B33                 mov     eax, [edx+2Ch]
.text$mn:00008B36                 mov     ecx, [eax]
.text$mn:00008B38                 mov     [ebp+var_8], ecx
.text$mn:00008B3B                 jmp     short loc_8B44
.text$mn:00008B3D ; ---------------------------------------------------------------------------
.text$mn:00008B3D
.text$mn:00008B3D loc_8B3D:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)+12j
.text$mn:00008B3D                 mov     [ebp+var_8], 0
.text$mn:00008B44
.text$mn:00008B44 loc_8B44:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)+1Fj
.text$mn:00008B44                 mov     eax, [ebp+var_8]
.text$mn:00008B47                 cdq
.text$mn:00008B48                 mov     esp, ebp
.text$mn:00008B4A                 pop     ebp
.text$mn:00008B4B                 retn
.text$mn:00008B4B ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ endp
.text$mn:00008B4B
.text$mn:00008B4B _text$mn        ends
.text$mn:00008B4B
.text$mn:00008B4C ; ===========================================================================
.text$mn:00008B4C
.text$mn:00008B4C ; Segment type: Pure code
.text$mn:00008B4C ; Segment permissions: Read/Execute
.text$mn:00008B4C _text$mn        segment para public 'CODE' use32
.text$mn:00008B4C                 assume cs:_text$mn
.text$mn:00008B4C                 ;org 8B4Ch
.text$mn:00008B4C ; COMDAT (pick any)
.text$mn:00008B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B4C
.text$mn:00008B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B4C
.text$mn:00008B4C ; Attributes: bp-based frame
.text$mn:00008B4C
.text$mn:00008B4C ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Gninc(void)
.text$mn:00008B4C                 public ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
.text$mn:00008B4C ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ proc near
.text$mn:00008B4C                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::uflow(void)+48p
.text$mn:00008B4C
.text$mn:00008B4C var_8           = dword ptr -8
.text$mn:00008B4C var_4           = dword ptr -4
.text$mn:00008B4C
.text$mn:00008B4C                 push    ebp
.text$mn:00008B4D                 mov     ebp, esp
.text$mn:00008B4F                 sub     esp, 8
.text$mn:00008B52                 mov     [ebp+var_4], ecx
.text$mn:00008B55                 mov     eax, [ebp+var_4]
.text$mn:00008B58                 mov     ecx, [eax+2Ch]
.text$mn:00008B5B                 mov     edx, [ecx]
.text$mn:00008B5D                 sub     edx, 1
.text$mn:00008B60                 mov     eax, [ebp+var_4]
.text$mn:00008B63                 mov     ecx, [eax+2Ch]
.text$mn:00008B66                 mov     [ecx], edx
.text$mn:00008B68                 mov     edx, [ebp+var_4]
.text$mn:00008B6B                 mov     eax, [edx+1Ch]
.text$mn:00008B6E                 mov     ecx, [eax]
.text$mn:00008B70                 mov     [ebp+var_8], ecx
.text$mn:00008B73                 mov     edx, [ebp+var_4]
.text$mn:00008B76                 mov     eax, [edx+1Ch]
.text$mn:00008B79                 mov     ecx, [eax]
.text$mn:00008B7B                 add     ecx, 2
.text$mn:00008B7E                 mov     edx, [ebp+var_4]
.text$mn:00008B81                 mov     eax, [edx+1Ch]
.text$mn:00008B84                 mov     [eax], ecx
.text$mn:00008B86                 mov     eax, [ebp+var_8]
.text$mn:00008B89                 mov     esp, ebp
.text$mn:00008B8B                 pop     ebp
.text$mn:00008B8C                 retn
.text$mn:00008B8C ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ endp
.text$mn:00008B8C
.text$mn:00008B8C ; ---------------------------------------------------------------------------
.text$mn:00008B8D                 align 10h
.text$mn:00008B8D _text$mn        ends
.text$mn:00008B8D
.text$mn:00008B90 ; ===========================================================================
.text$mn:00008B90
.text$mn:00008B90 ; Segment type: Pure code
.text$mn:00008B90 ; Segment permissions: Read/Execute
.text$mn:00008B90 _text$mn        segment para public 'CODE' use32
.text$mn:00008B90                 assume cs:_text$mn
.text$mn:00008B90                 ;org 8B90h
.text$mn:00008B90 ; COMDAT (pick any)
.text$mn:00008B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B90
.text$mn:00008B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B90
.text$mn:00008B90 ; Attributes: bp-based frame
.text$mn:00008B90
.text$mn:00008B90 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00008B90                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00008B90 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00008B90                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Dp
.text$mn:00008B90                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+8Cp ...
.text$mn:00008B90
.text$mn:00008B90 var_C           = dword ptr -0Ch
.text$mn:00008B90 Size            = dword ptr -8
.text$mn:00008B90 var_4           = dword ptr -4
.text$mn:00008B90 arg_0           = dword ptr  8
.text$mn:00008B90 arg_4           = byte ptr  0Ch
.text$mn:00008B90
.text$mn:00008B90                 push    ebp
.text$mn:00008B91                 mov     ebp, esp
.text$mn:00008B93                 sub     esp, 0Ch
.text$mn:00008B96                 mov     [ebp+var_4], ecx
.text$mn:00008B99                 mov     ecx, [ebp+var_4]
.text$mn:00008B9C                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008BA1                 cmp     eax, [ebp+arg_0]
.text$mn:00008BA4                 jnb     short loc_8BAE
.text$mn:00008BA6                 mov     ecx, [ebp+var_4]
.text$mn:00008BA9                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008BAE
.text$mn:00008BAE loc_8BAE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00008BAE                 mov     eax, [ebp+var_4]
.text$mn:00008BB1                 mov     ecx, [eax+18h]
.text$mn:00008BB4                 cmp     ecx, [ebp+arg_0]
.text$mn:00008BB7                 jnb     short loc_8BCE
.text$mn:00008BB9                 mov     edx, [ebp+var_4]
.text$mn:00008BBC                 mov     eax, [edx+14h]
.text$mn:00008BBF                 push    eax
.text$mn:00008BC0                 mov     ecx, [ebp+arg_0]
.text$mn:00008BC3                 push    ecx
.text$mn:00008BC4                 mov     ecx, [ebp+var_4]
.text$mn:00008BC7                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00008BCC                 jmp     short loc_8C18
.text$mn:00008BCE ; ---------------------------------------------------------------------------
.text$mn:00008BCE
.text$mn:00008BCE loc_8BCE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00008BCE                 movzx   edx, [ebp+arg_4]
.text$mn:00008BD2                 test    edx, edx
.text$mn:00008BD4                 jz      short loc_8C08
.text$mn:00008BD6                 cmp     [ebp+arg_0], 10h
.text$mn:00008BDA                 jnb     short loc_8C08
.text$mn:00008BDC                 mov     eax, [ebp+var_4]
.text$mn:00008BDF                 mov     ecx, [ebp+arg_0]
.text$mn:00008BE2                 cmp     ecx, [eax+14h]
.text$mn:00008BE5                 jnb     short loc_8BEF
.text$mn:00008BE7                 mov     edx, [ebp+arg_0]
.text$mn:00008BEA                 mov     [ebp+Size], edx
.text$mn:00008BED                 jmp     short loc_8BF8
.text$mn:00008BEF ; ---------------------------------------------------------------------------
.text$mn:00008BEF
.text$mn:00008BEF loc_8BEF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00008BEF                 mov     eax, [ebp+var_4]
.text$mn:00008BF2                 mov     ecx, [eax+14h]
.text$mn:00008BF5                 mov     [ebp+Size], ecx
.text$mn:00008BF8
.text$mn:00008BF8 loc_8BF8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00008BF8                 mov     edx, [ebp+Size]
.text$mn:00008BFB                 push    edx             ; Size
.text$mn:00008BFC                 push    1               ; char
.text$mn:00008BFE                 mov     ecx, [ebp+var_4]
.text$mn:00008C01                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008C06                 jmp     short loc_8C18
.text$mn:00008C08 ; ---------------------------------------------------------------------------
.text$mn:00008C08
.text$mn:00008C08 loc_8C08:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00008C08                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00008C08                 cmp     [ebp+arg_0], 0
.text$mn:00008C0C                 jnz     short loc_8C18
.text$mn:00008C0E                 push    0
.text$mn:00008C10                 mov     ecx, [ebp+var_4]
.text$mn:00008C13                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008C18
.text$mn:00008C18 loc_8C18:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00008C18                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00008C18                 cmp     [ebp+arg_0], 0
.text$mn:00008C1C                 jbe     short loc_8C27
.text$mn:00008C1E                 mov     [ebp+var_C], 1
.text$mn:00008C25                 jmp     short loc_8C2E
.text$mn:00008C27 ; ---------------------------------------------------------------------------
.text$mn:00008C27
.text$mn:00008C27 loc_8C27:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00008C27                 mov     [ebp+var_C], 0
.text$mn:00008C2E
.text$mn:00008C2E loc_8C2E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00008C2E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00008C31                 mov     esp, ebp
.text$mn:00008C33                 pop     ebp
.text$mn:00008C34                 retn    8
.text$mn:00008C34 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00008C34
.text$mn:00008C34 ; ---------------------------------------------------------------------------
.text$mn:00008C37                 align 4
.text$mn:00008C37 _text$mn        ends
.text$mn:00008C37
.text$mn:00008C38 ; ===========================================================================
.text$mn:00008C38
.text$mn:00008C38 ; Segment type: Pure code
.text$mn:00008C38 ; Segment permissions: Read/Execute
.text$mn:00008C38 _text$mn        segment para public 'CODE' use32
.text$mn:00008C38                 assume cs:_text$mn
.text$mn:00008C38                 ;org 8C38h
.text$mn:00008C38 ; COMDAT (pick any)
.text$mn:00008C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C38
.text$mn:00008C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C38
.text$mn:00008C38 ; Attributes: bp-based frame
.text$mn:00008C38
.text$mn:00008C38 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00008C38                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00008C38 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00008C38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00008C38                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00008C38
.text$mn:00008C38 var_C           = dword ptr -0Ch
.text$mn:00008C38 var_8           = dword ptr -8
.text$mn:00008C38 var_4           = dword ptr -4
.text$mn:00008C38 arg_0           = dword ptr  8
.text$mn:00008C38 arg_4           = byte ptr  0Ch
.text$mn:00008C38
.text$mn:00008C38                 push    ebp
.text$mn:00008C39                 mov     ebp, esp
.text$mn:00008C3B                 sub     esp, 0Ch
.text$mn:00008C3E                 mov     [ebp+var_4], ecx
.text$mn:00008C41                 mov     ecx, [ebp+var_4]
.text$mn:00008C44                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008C49                 cmp     eax, [ebp+arg_0]
.text$mn:00008C4C                 jnb     short loc_8C56
.text$mn:00008C4E                 mov     ecx, [ebp+var_4]
.text$mn:00008C51                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00008C56
.text$mn:00008C56 loc_8C56:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00008C56                 mov     eax, [ebp+var_4]
.text$mn:00008C59                 mov     ecx, [eax+18h]
.text$mn:00008C5C                 cmp     ecx, [ebp+arg_0]
.text$mn:00008C5F                 jnb     short loc_8C76
.text$mn:00008C61                 mov     edx, [ebp+var_4]
.text$mn:00008C64                 mov     eax, [edx+14h]
.text$mn:00008C67                 push    eax
.text$mn:00008C68                 mov     ecx, [ebp+arg_0]
.text$mn:00008C6B                 push    ecx
.text$mn:00008C6C                 mov     ecx, [ebp+var_4]
.text$mn:00008C6F                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00008C74                 jmp     short loc_8CC0
.text$mn:00008C76 ; ---------------------------------------------------------------------------
.text$mn:00008C76
.text$mn:00008C76 loc_8C76:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00008C76                 movzx   edx, [ebp+arg_4]
.text$mn:00008C7A                 test    edx, edx
.text$mn:00008C7C                 jz      short loc_8CB0
.text$mn:00008C7E                 cmp     [ebp+arg_0], 8
.text$mn:00008C82                 jnb     short loc_8CB0
.text$mn:00008C84                 mov     eax, [ebp+var_4]
.text$mn:00008C87                 mov     ecx, [ebp+arg_0]
.text$mn:00008C8A                 cmp     ecx, [eax+14h]
.text$mn:00008C8D                 jnb     short loc_8C97
.text$mn:00008C8F                 mov     edx, [ebp+arg_0]
.text$mn:00008C92                 mov     [ebp+var_8], edx
.text$mn:00008C95                 jmp     short loc_8CA0
.text$mn:00008C97 ; ---------------------------------------------------------------------------
.text$mn:00008C97
.text$mn:00008C97 loc_8C97:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00008C97                 mov     eax, [ebp+var_4]
.text$mn:00008C9A                 mov     ecx, [eax+14h]
.text$mn:00008C9D                 mov     [ebp+var_8], ecx
.text$mn:00008CA0
.text$mn:00008CA0 loc_8CA0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00008CA0                 mov     edx, [ebp+var_8]
.text$mn:00008CA3                 push    edx
.text$mn:00008CA4                 push    1
.text$mn:00008CA6                 mov     ecx, [ebp+var_4]
.text$mn:00008CA9                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008CAE                 jmp     short loc_8CC0
.text$mn:00008CB0 ; ---------------------------------------------------------------------------
.text$mn:00008CB0
.text$mn:00008CB0 loc_8CB0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00008CB0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00008CB0                 cmp     [ebp+arg_0], 0
.text$mn:00008CB4                 jnz     short loc_8CC0
.text$mn:00008CB6                 push    0
.text$mn:00008CB8                 mov     ecx, [ebp+var_4]
.text$mn:00008CBB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008CC0
.text$mn:00008CC0 loc_8CC0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00008CC0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00008CC0                 cmp     [ebp+arg_0], 0
.text$mn:00008CC4                 jbe     short loc_8CCF
.text$mn:00008CC6                 mov     [ebp+var_C], 1
.text$mn:00008CCD                 jmp     short loc_8CD6
.text$mn:00008CCF ; ---------------------------------------------------------------------------
.text$mn:00008CCF
.text$mn:00008CCF loc_8CCF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00008CCF                 mov     [ebp+var_C], 0
.text$mn:00008CD6
.text$mn:00008CD6 loc_8CD6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00008CD6                 mov     al, byte ptr [ebp+var_C]
.text$mn:00008CD9                 mov     esp, ebp
.text$mn:00008CDB                 pop     ebp
.text$mn:00008CDC                 retn    8
.text$mn:00008CDC ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00008CDC
.text$mn:00008CDC ; ---------------------------------------------------------------------------
.text$mn:00008CDF                 align 10h
.text$mn:00008CDF _text$mn        ends
.text$mn:00008CDF
.text$mn:00008CE0 ; ===========================================================================
.text$mn:00008CE0
.text$mn:00008CE0 ; Segment type: Pure code
.text$mn:00008CE0 ; Segment permissions: Read/Execute
.text$mn:00008CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00008CE0                 assume cs:_text$mn
.text$mn:00008CE0                 ;org 8CE0h
.text$mn:00008CE0 ; COMDAT (pick any)
.text$mn:00008CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CE0
.text$mn:00008CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CE0
.text$mn:00008CE0 ; Attributes: bp-based frame
.text$mn:00008CE0
.text$mn:00008CE0 ; void __thiscall std::locale::facet::_Incref(std::locale::facet *__hidden this)
.text$mn:00008CE0                 public ?_Incref@facet@locale@std@@UAEXXZ
.text$mn:00008CE0 ?_Incref@facet@locale@std@@UAEXXZ proc near ; DATA XREF: .rdata:0000E07Co
.text$mn:00008CE0                                         ; .rdata:0000E168o ...
.text$mn:00008CE0
.text$mn:00008CE0 var_4           = dword ptr -4
.text$mn:00008CE0
.text$mn:00008CE0                 push    ebp
.text$mn:00008CE1                 mov     ebp, esp
.text$mn:00008CE3                 push    ecx
.text$mn:00008CE4                 mov     [ebp+var_4], ecx
.text$mn:00008CE7                 mov     eax, [ebp+var_4]
.text$mn:00008CEA                 add     eax, 4
.text$mn:00008CED                 mov     ecx, 1
.text$mn:00008CF2                 lock xadd [eax], ecx
.text$mn:00008CF6                 mov     esp, ebp
.text$mn:00008CF8                 pop     ebp
.text$mn:00008CF9                 retn
.text$mn:00008CF9 ?_Incref@facet@locale@std@@UAEXXZ endp
.text$mn:00008CF9
.text$mn:00008CF9 ; ---------------------------------------------------------------------------
.text$mn:00008CFA                 align 4
.text$mn:00008CFA _text$mn        ends
.text$mn:00008CFA
.text$mn:00008CFC ; ===========================================================================
.text$mn:00008CFC
.text$mn:00008CFC ; Segment type: Pure code
.text$mn:00008CFC ; Segment permissions: Read/Execute
.text$mn:00008CFC _text$mn        segment para public 'CODE' use32
.text$mn:00008CFC                 assume cs:_text$mn
.text$mn:00008CFC                 ;org 8CFCh
.text$mn:00008CFC ; COMDAT (pick any)
.text$mn:00008CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CFC
.text$mn:00008CFC ; =============== S U B R O U T I N E =======================================
.text$mn:00008CFC
.text$mn:00008CFC ; Attributes: bp-based frame
.text$mn:00008CFC
.text$mn:00008CFC ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Init(void)
.text$mn:00008CFC                 public ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
.text$mn:00008CFC ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ proc near
.text$mn:00008CFC                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+52p
.text$mn:00008CFC
.text$mn:00008CFC var_4           = dword ptr -4
.text$mn:00008CFC
.text$mn:00008CFC                 push    ebp
.text$mn:00008CFD                 mov     ebp, esp
.text$mn:00008CFF                 push    ecx
.text$mn:00008D00                 mov     [ebp+var_4], ecx
.text$mn:00008D03                 mov     eax, [ebp+var_4]
.text$mn:00008D06                 add     eax, 4
.text$mn:00008D09                 mov     ecx, [ebp+var_4]
.text$mn:00008D0C                 mov     [ecx+0Ch], eax
.text$mn:00008D0F                 mov     edx, [ebp+var_4]
.text$mn:00008D12                 add     edx, 8
.text$mn:00008D15                 mov     eax, [ebp+var_4]
.text$mn:00008D18                 mov     [eax+10h], edx
.text$mn:00008D1B                 mov     ecx, [ebp+var_4]
.text$mn:00008D1E                 add     ecx, 14h
.text$mn:00008D21                 mov     edx, [ebp+var_4]
.text$mn:00008D24                 mov     [edx+1Ch], ecx
.text$mn:00008D27                 mov     eax, [ebp+var_4]
.text$mn:00008D2A                 add     eax, 18h
.text$mn:00008D2D                 mov     ecx, [ebp+var_4]
.text$mn:00008D30                 mov     [ecx+20h], eax
.text$mn:00008D33                 mov     edx, [ebp+var_4]
.text$mn:00008D36                 add     edx, 24h ; '$'
.text$mn:00008D39                 mov     eax, [ebp+var_4]
.text$mn:00008D3C                 mov     [eax+2Ch], edx
.text$mn:00008D3F                 mov     ecx, [ebp+var_4]
.text$mn:00008D42                 add     ecx, 28h ; '('
.text$mn:00008D45                 mov     edx, [ebp+var_4]
.text$mn:00008D48                 mov     [edx+30h], ecx
.text$mn:00008D4B                 push    0
.text$mn:00008D4D                 push    0
.text$mn:00008D4F                 mov     ecx, [ebp+var_4]
.text$mn:00008D52                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *)
.text$mn:00008D57                 push    0
.text$mn:00008D59                 push    0
.text$mn:00008D5B                 push    0
.text$mn:00008D5D                 mov     ecx, [ebp+var_4]
.text$mn:00008D60                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:00008D65                 mov     esp, ebp
.text$mn:00008D67                 pop     ebp
.text$mn:00008D68                 retn
.text$mn:00008D68 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ endp
.text$mn:00008D68
.text$mn:00008D68 ; ---------------------------------------------------------------------------
.text$mn:00008D69                 align 4
.text$mn:00008D69 _text$mn        ends
.text$mn:00008D69
.text$mn:00008D6C ; ===========================================================================
.text$mn:00008D6C
.text$mn:00008D6C ; Segment type: Pure code
.text$mn:00008D6C ; Segment permissions: Read/Execute
.text$mn:00008D6C _text$mn        segment para public 'CODE' use32
.text$mn:00008D6C                 assume cs:_text$mn
.text$mn:00008D6C                 ;org 8D6Ch
.text$mn:00008D6C ; COMDAT (pick any)
.text$mn:00008D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D6C
.text$mn:00008D6C ; =============== S U B R O U T I N E =======================================
.text$mn:00008D6C
.text$mn:00008D6C ; Attributes: bp-based frame
.text$mn:00008D6C
.text$mn:00008D6C ; int __stdcall std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(void *Src, int, int)
.text$mn:00008D6C                 public ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
.text$mn:00008D6C ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z proc near
.text$mn:00008D6C                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+5Dp
.text$mn:00008D6C
.text$mn:00008D6C var_C           = dword ptr -0Ch
.text$mn:00008D6C Dst             = dword ptr -8
.text$mn:00008D6C var_4           = dword ptr -4
.text$mn:00008D6C Src             = dword ptr  8
.text$mn:00008D6C arg_4           = dword ptr  0Ch
.text$mn:00008D6C arg_8           = dword ptr  10h
.text$mn:00008D6C
.text$mn:00008D6C                 push    ebp
.text$mn:00008D6D                 mov     ebp, esp
.text$mn:00008D6F                 sub     esp, 0Ch
.text$mn:00008D72                 mov     [ebp+var_4], ecx
.text$mn:00008D75                 mov     eax, [ebp+var_4]
.text$mn:00008D78                 mov     dword ptr [eax+38h], 0
.text$mn:00008D7F                 mov     ecx, [ebp+var_4]
.text$mn:00008D82                 mov     edx, [ebp+arg_8]
.text$mn:00008D85                 mov     [ecx+3Ch], edx
.text$mn:00008D88                 cmp     [ebp+arg_4], 0
.text$mn:00008D8C                 jz      loc_8E6F
.text$mn:00008D92                 mov     eax, [ebp+var_4]
.text$mn:00008D95                 mov     ecx, [eax+3Ch]
.text$mn:00008D98                 and     ecx, 6
.text$mn:00008D9B                 cmp     ecx, 6
.text$mn:00008D9E                 jz      loc_8E6F
.text$mn:00008DA4                 mov     edx, [ebp+arg_4]
.text$mn:00008DA7                 push    edx
.text$mn:00008DA8                 mov     ecx, [ebp+var_4]
.text$mn:00008DAB                 add     ecx, 40h ; '@'
.text$mn:00008DAE                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00008DB3                 mov     [ebp+Dst], eax
.text$mn:00008DB6                 mov     eax, [ebp+arg_4]
.text$mn:00008DB9                 push    eax             ; int
.text$mn:00008DBA                 mov     ecx, [ebp+Src]
.text$mn:00008DBD                 push    ecx             ; Src
.text$mn:00008DBE                 mov     edx, [ebp+Dst]
.text$mn:00008DC1                 push    edx             ; Dst
.text$mn:00008DC2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00008DC7                 add     esp, 0Ch
.text$mn:00008DCA                 mov     eax, [ebp+arg_4]
.text$mn:00008DCD                 mov     ecx, [ebp+Dst]
.text$mn:00008DD0                 lea     edx, [ecx+eax*2]
.text$mn:00008DD3                 mov     eax, [ebp+var_4]
.text$mn:00008DD6                 mov     [eax+38h], edx
.text$mn:00008DD9                 mov     ecx, [ebp+var_4]
.text$mn:00008DDC                 mov     edx, [ecx+3Ch]
.text$mn:00008DDF                 and     edx, 4
.text$mn:00008DE2                 jnz     short loc_8DFE
.text$mn:00008DE4                 mov     eax, [ebp+arg_4]
.text$mn:00008DE7                 mov     ecx, [ebp+Dst]
.text$mn:00008DEA                 lea     edx, [ecx+eax*2]
.text$mn:00008DED                 push    edx
.text$mn:00008DEE                 mov     eax, [ebp+Dst]
.text$mn:00008DF1                 push    eax
.text$mn:00008DF2                 mov     ecx, [ebp+Dst]
.text$mn:00008DF5                 push    ecx
.text$mn:00008DF6                 mov     ecx, [ebp+var_4]
.text$mn:00008DF9                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:00008DFE
.text$mn:00008DFE loc_8DFE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+76j
.text$mn:00008DFE                 mov     edx, [ebp+var_4]
.text$mn:00008E01                 mov     eax, [edx+3Ch]
.text$mn:00008E04                 and     eax, 2
.text$mn:00008E07                 jnz     short loc_8E60
.text$mn:00008E09                 mov     ecx, [ebp+var_4]
.text$mn:00008E0C                 mov     edx, [ecx+3Ch]
.text$mn:00008E0F                 and     edx, 18h
.text$mn:00008E12                 jz      short loc_8E22
.text$mn:00008E14                 mov     eax, [ebp+arg_4]
.text$mn:00008E17                 mov     ecx, [ebp+Dst]
.text$mn:00008E1A                 lea     edx, [ecx+eax*2]
.text$mn:00008E1D                 mov     [ebp+var_C], edx
.text$mn:00008E20                 jmp     short loc_8E28
.text$mn:00008E22 ; ---------------------------------------------------------------------------
.text$mn:00008E22
.text$mn:00008E22 loc_8E22:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+A6j
.text$mn:00008E22                 mov     eax, [ebp+Dst]
.text$mn:00008E25                 mov     [ebp+var_C], eax
.text$mn:00008E28
.text$mn:00008E28 loc_8E28:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+B4j
.text$mn:00008E28                 mov     ecx, [ebp+arg_4]
.text$mn:00008E2B                 mov     edx, [ebp+Dst]
.text$mn:00008E2E                 lea     eax, [edx+ecx*2]
.text$mn:00008E31                 push    eax
.text$mn:00008E32                 mov     ecx, [ebp+var_C]
.text$mn:00008E35                 push    ecx
.text$mn:00008E36                 mov     edx, [ebp+Dst]
.text$mn:00008E39                 push    edx
.text$mn:00008E3A                 mov     ecx, [ebp+var_4]
.text$mn:00008E3D                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *,wchar_t *)
.text$mn:00008E42                 mov     ecx, [ebp+var_4]
.text$mn:00008E45                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:00008E4A                 test    eax, eax
.text$mn:00008E4C                 jnz     short loc_8E60
.text$mn:00008E4E                 mov     eax, [ebp+Dst]
.text$mn:00008E51                 push    eax
.text$mn:00008E52                 push    0
.text$mn:00008E54                 mov     ecx, [ebp+Dst]
.text$mn:00008E57                 push    ecx
.text$mn:00008E58                 mov     ecx, [ebp+var_4]
.text$mn:00008E5B                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:00008E60
.text$mn:00008E60 loc_8E60:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+9Bj
.text$mn:00008E60                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+E0j
.text$mn:00008E60                 mov     edx, [ebp+var_4]
.text$mn:00008E63                 mov     eax, [edx+3Ch]
.text$mn:00008E66                 or      eax, 1
.text$mn:00008E69                 mov     ecx, [ebp+var_4]
.text$mn:00008E6C                 mov     [ecx+3Ch], eax
.text$mn:00008E6F
.text$mn:00008E6F loc_8E6F:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+20j
.text$mn:00008E6F                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+32j
.text$mn:00008E6F                 mov     esp, ebp
.text$mn:00008E71                 pop     ebp
.text$mn:00008E72                 retn    0Ch
.text$mn:00008E72 ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z endp
.text$mn:00008E72
.text$mn:00008E72 ; ---------------------------------------------------------------------------
.text$mn:00008E75                 align 4
.text$mn:00008E75 _text$mn        ends
.text$mn:00008E75
.text$mn:00008E78 ; ===========================================================================
.text$mn:00008E78
.text$mn:00008E78 ; Segment type: Pure code
.text$mn:00008E78 ; Segment permissions: Read/Execute
.text$mn:00008E78 _text$mn        segment para public 'CODE' use32
.text$mn:00008E78                 assume cs:_text$mn
.text$mn:00008E78                 ;org 8E78h
.text$mn:00008E78 ; COMDAT (pick any)
.text$mn:00008E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E78
.text$mn:00008E78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E78
.text$mn:00008E78 ; Attributes: bp-based frame
.text$mn:00008E78
.text$mn:00008E78 ; protected: void __thiscall std::ctype<wchar_t>::_Init(class std::_Locinfo const &)
.text$mn:00008E78                 public ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
.text$mn:00008E78 ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z proc near
.text$mn:00008E78                                         ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+49p
.text$mn:00008E78
.text$mn:00008E78 var_44          = byte ptr -44h
.text$mn:00008E78 var_34          = dword ptr -34h
.text$mn:00008E78 var_30          = byte ptr -30h
.text$mn:00008E78 var_4           = dword ptr -4
.text$mn:00008E78 arg_0           = dword ptr  8
.text$mn:00008E78
.text$mn:00008E78                 push    ebp
.text$mn:00008E79                 mov     ebp, esp
.text$mn:00008E7B                 sub     esp, 44h
.text$mn:00008E7E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008E83                 xor     eax, ebp
.text$mn:00008E85                 mov     [ebp+var_4], eax
.text$mn:00008E88                 push    esi
.text$mn:00008E89                 push    edi
.text$mn:00008E8A                 mov     [ebp+var_34], ecx
.text$mn:00008E8D                 lea     eax, [ebp+var_44]
.text$mn:00008E90                 push    eax
.text$mn:00008E91                 mov     ecx, [ebp+arg_0]
.text$mn:00008E94                 call    ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype(void)
.text$mn:00008E99                 mov     ecx, [ebp+var_34]
.text$mn:00008E9C                 add     ecx, 8
.text$mn:00008E9F                 mov     edx, [eax]
.text$mn:00008EA1                 mov     [ecx], edx
.text$mn:00008EA3                 mov     edx, [eax+4]
.text$mn:00008EA6                 mov     [ecx+4], edx
.text$mn:00008EA9                 mov     edx, [eax+8]
.text$mn:00008EAC                 mov     [ecx+8], edx
.text$mn:00008EAF                 mov     eax, [eax+0Ch]
.text$mn:00008EB2                 mov     [ecx+0Ch], eax
.text$mn:00008EB5                 lea     ecx, [ebp+var_30]
.text$mn:00008EB8                 push    ecx
.text$mn:00008EB9                 mov     ecx, [ebp+arg_0]
.text$mn:00008EBC                 call    ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt(void)
.text$mn:00008EC1                 mov     edi, [ebp+var_34]
.text$mn:00008EC4                 add     edi, 18h
.text$mn:00008EC7                 mov     ecx, 0Bh
.text$mn:00008ECC                 mov     esi, eax
.text$mn:00008ECE                 rep movsd
.text$mn:00008ED0                 pop     edi
.text$mn:00008ED1                 pop     esi
.text$mn:00008ED2                 mov     ecx, [ebp+var_4]
.text$mn:00008ED5                 xor     ecx, ebp
.text$mn:00008ED7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00008EDC                 mov     esp, ebp
.text$mn:00008EDE                 pop     ebp
.text$mn:00008EDF                 retn    4
.text$mn:00008EDF ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z endp
.text$mn:00008EDF
.text$mn:00008EDF ; ---------------------------------------------------------------------------
.text$mn:00008EE2                 align 4
.text$mn:00008EE2 _text$mn        ends
.text$mn:00008EE2
.text$mn:00008EE4 ; ===========================================================================
.text$mn:00008EE4
.text$mn:00008EE4 ; Segment type: Pure code
.text$mn:00008EE4 ; Segment permissions: Read/Execute
.text$mn:00008EE4 _text$mn        segment para public 'CODE' use32
.text$mn:00008EE4                 assume cs:_text$mn
.text$mn:00008EE4                 ;org 8EE4h
.text$mn:00008EE4 ; COMDAT (pick any)
.text$mn:00008EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008EE4
.text$mn:00008EE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008EE4
.text$mn:00008EE4 ; Attributes: bp-based frame
.text$mn:00008EE4
.text$mn:00008EE4 ; void __thiscall std::ios_base::_Init(std::ios_base *__hidden this)
.text$mn:00008EE4                 public ?_Init@ios_base@std@@IAEXXZ
.text$mn:00008EE4 ?_Init@ios_base@std@@IAEXXZ proc near   ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+Ap
.text$mn:00008EE4
.text$mn:00008EE4 var_C           = dword ptr -0Ch
.text$mn:00008EE4 var_8           = dword ptr -8
.text$mn:00008EE4 var_4           = dword ptr -4
.text$mn:00008EE4
.text$mn:00008EE4                 push    ebp
.text$mn:00008EE5                 mov     ebp, esp
.text$mn:00008EE7                 sub     esp, 0Ch
.text$mn:00008EEA                 mov     [ebp+var_4], ecx
.text$mn:00008EED                 mov     eax, [ebp+var_4]
.text$mn:00008EF0                 mov     dword ptr [eax+30h], 0
.text$mn:00008EF7                 mov     ecx, [ebp+var_4]
.text$mn:00008EFA                 mov     dword ptr [ecx+8], 0
.text$mn:00008F01                 mov     edx, [ebp+var_4]
.text$mn:00008F04                 mov     dword ptr [edx+10h], 0
.text$mn:00008F0B                 mov     eax, [ebp+var_4]
.text$mn:00008F0E                 mov     dword ptr [eax+14h], 201h
.text$mn:00008F15                 mov     ecx, [ebp+var_4]
.text$mn:00008F18                 mov     dword ptr [ecx+18h], 6
.text$mn:00008F1F                 mov     dword ptr [ecx+1Ch], 0
.text$mn:00008F26                 mov     edx, [ebp+var_4]
.text$mn:00008F29                 mov     dword ptr [edx+20h], 0
.text$mn:00008F30                 mov     dword ptr [edx+24h], 0
.text$mn:00008F37                 mov     eax, [ebp+var_4]
.text$mn:00008F3A                 mov     dword ptr [eax+28h], 0
.text$mn:00008F41                 mov     ecx, [ebp+var_4]
.text$mn:00008F44                 mov     dword ptr [ecx+2Ch], 0
.text$mn:00008F4B                 push    0               ; int
.text$mn:00008F4D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008F50                 call    ?clear@ios_base@std@@QAEXH@Z ; std::ios_base::clear(int)
.text$mn:00008F55                 push    219h            ; int
.text$mn:00008F5A                 push    offset ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008F5F                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00008F64                 push    eax             ; struct std::_DebugHeapTag_t *
.text$mn:00008F65                 push    4               ; unsigned int
.text$mn:00008F67                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00008F6C                 add     esp, 10h
.text$mn:00008F6F                 mov     [ebp+var_8], eax
.text$mn:00008F72                 cmp     [ebp+var_8], 0
.text$mn:00008F76                 jz      short loc_8F85
.text$mn:00008F78                 mov     ecx, [ebp+var_8] ; this
.text$mn:00008F7B                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00008F80                 mov     [ebp+var_C], eax
.text$mn:00008F83                 jmp     short loc_8F8C
.text$mn:00008F85 ; ---------------------------------------------------------------------------
.text$mn:00008F85
.text$mn:00008F85 loc_8F85:                               ; CODE XREF: std::ios_base::_Init(void)+92j
.text$mn:00008F85                 mov     [ebp+var_C], 0
.text$mn:00008F8C
.text$mn:00008F8C loc_8F8C:                               ; CODE XREF: std::ios_base::_Init(void)+9Fj
.text$mn:00008F8C                 mov     edx, [ebp+var_4]
.text$mn:00008F8F                 mov     eax, [ebp+var_C]
.text$mn:00008F92                 mov     [edx+30h], eax
.text$mn:00008F95                 mov     esp, ebp
.text$mn:00008F97                 pop     ebp
.text$mn:00008F98                 retn
.text$mn:00008F98 ?_Init@ios_base@std@@IAEXXZ endp
.text$mn:00008F98
.text$mn:00008F98 ; ---------------------------------------------------------------------------
.text$mn:00008F99                 align 4
.text$mn:00008F99 _text$mn        ends
.text$mn:00008F99
.text$mn:00008F9C ; ===========================================================================
.text$mn:00008F9C
.text$mn:00008F9C ; Segment type: Pure code
.text$mn:00008F9C ; Segment permissions: Read/Execute
.text$mn:00008F9C _text$mn        segment para public 'CODE' use32
.text$mn:00008F9C                 assume cs:_text$mn
.text$mn:00008F9C                 ;org 8F9Ch
.text$mn:00008F9C ; COMDAT (pick any)
.text$mn:00008F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F9C
.text$mn:00008F9C ; =============== S U B R O U T I N E =======================================
.text$mn:00008F9C
.text$mn:00008F9C ; Attributes: bp-based frame
.text$mn:00008F9C
.text$mn:00008F9C ; void __cdecl std::_Init_atomic_counter(unsigned __int32 *, unsigned __int32)
.text$mn:00008F9C                 public ?_Init_atomic_counter@std@@YAXAAKK@Z
.text$mn:00008F9C ?_Init_atomic_counter@std@@YAXAAKK@Z proc near
.text$mn:00008F9C                                         ; CODE XREF: std::locale::facet::facet(uint)+49p
.text$mn:00008F9C
.text$mn:00008F9C arg_0           = dword ptr  8
.text$mn:00008F9C arg_4           = dword ptr  0Ch
.text$mn:00008F9C
.text$mn:00008F9C                 push    ebp
.text$mn:00008F9D                 mov     ebp, esp
.text$mn:00008F9F                 mov     eax, [ebp+arg_0]
.text$mn:00008FA2                 mov     ecx, [ebp+arg_4]
.text$mn:00008FA5                 mov     [eax], ecx
.text$mn:00008FA7                 pop     ebp
.text$mn:00008FA8                 retn
.text$mn:00008FA8 ?_Init_atomic_counter@std@@YAXAAKK@Z endp
.text$mn:00008FA8
.text$mn:00008FA8 ; ---------------------------------------------------------------------------
.text$mn:00008FA9                 align 4
.text$mn:00008FA9 _text$mn        ends
.text$mn:00008FA9
.text$mn:00008FAC ; ===========================================================================
.text$mn:00008FAC
.text$mn:00008FAC ; Segment type: Pure code
.text$mn:00008FAC ; Segment permissions: Read/Execute
.text$mn:00008FAC _text$mn        segment para public 'CODE' use32
.text$mn:00008FAC                 assume cs:_text$mn
.text$mn:00008FAC                 ;org 8FACh
.text$mn:00008FAC ; COMDAT (pick any)
.text$mn:00008FAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FAC
.text$mn:00008FAC ; =============== S U B R O U T I N E =======================================
.text$mn:00008FAC
.text$mn:00008FAC ; Attributes: bp-based frame
.text$mn:00008FAC
.text$mn:00008FAC ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00008FAC                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00008FAC ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00008FAC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+2Cp
.text$mn:00008FAC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00008FAC
.text$mn:00008FAC var_4           = dword ptr -4
.text$mn:00008FAC arg_0           = dword ptr  8
.text$mn:00008FAC
.text$mn:00008FAC                 push    ebp
.text$mn:00008FAD                 mov     ebp, esp
.text$mn:00008FAF                 push    ecx
.text$mn:00008FB0                 mov     [ebp+var_4], ecx
.text$mn:00008FB3                 cmp     [ebp+arg_0], 0
.text$mn:00008FB7                 jz      short loc_8FD9
.text$mn:00008FB9                 mov     ecx, [ebp+var_4]
.text$mn:00008FBC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008FC1                 cmp     [ebp+arg_0], eax
.text$mn:00008FC4                 jb      short loc_8FD9
.text$mn:00008FC6                 mov     ecx, [ebp+var_4]
.text$mn:00008FC9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008FCE                 mov     ecx, [ebp+var_4]
.text$mn:00008FD1                 add     eax, [ecx+14h]
.text$mn:00008FD4                 cmp     eax, [ebp+arg_0]
.text$mn:00008FD7                 ja      short loc_8FDF
.text$mn:00008FD9
.text$mn:00008FD9 loc_8FD9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00008FD9                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00008FD9                 xor     al, al
.text$mn:00008FDB                 jmp     short loc_8FE1
.text$mn:00008FDD ; ---------------------------------------------------------------------------
.text$mn:00008FDD                 jmp     short loc_8FE1
.text$mn:00008FDF ; ---------------------------------------------------------------------------
.text$mn:00008FDF
.text$mn:00008FDF loc_8FDF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00008FDF                 mov     al, 1
.text$mn:00008FE1
.text$mn:00008FE1 loc_8FE1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00008FE1                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00008FE1                 mov     esp, ebp
.text$mn:00008FE3                 pop     ebp
.text$mn:00008FE4                 retn    4
.text$mn:00008FE4 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00008FE4
.text$mn:00008FE4 ; ---------------------------------------------------------------------------
.text$mn:00008FE7                 align 4
.text$mn:00008FE7 _text$mn        ends
.text$mn:00008FE7
.text$mn:00008FE8 ; ===========================================================================
.text$mn:00008FE8
.text$mn:00008FE8 ; Segment type: Pure code
.text$mn:00008FE8 ; Segment permissions: Read/Execute
.text$mn:00008FE8 _text$mn        segment para public 'CODE' use32
.text$mn:00008FE8                 assume cs:_text$mn
.text$mn:00008FE8                 ;org 8FE8h
.text$mn:00008FE8 ; COMDAT (pick any)
.text$mn:00008FE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FE8
.text$mn:00008FE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FE8
.text$mn:00008FE8 ; Attributes: bp-based frame
.text$mn:00008FE8
.text$mn:00008FE8 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00008FE8                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00008FE8 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00008FE8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00008FE8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:00008FE8
.text$mn:00008FE8 var_4           = dword ptr -4
.text$mn:00008FE8 arg_0           = dword ptr  8
.text$mn:00008FE8
.text$mn:00008FE8                 push    ebp
.text$mn:00008FE9                 mov     ebp, esp
.text$mn:00008FEB                 push    ecx
.text$mn:00008FEC                 mov     [ebp+var_4], ecx
.text$mn:00008FEF                 cmp     [ebp+arg_0], 0
.text$mn:00008FF3                 jz      short loc_9018
.text$mn:00008FF5                 mov     ecx, [ebp+var_4]
.text$mn:00008FF8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008FFD                 cmp     [ebp+arg_0], eax
.text$mn:00009000                 jb      short loc_9018
.text$mn:00009002                 mov     ecx, [ebp+var_4]
.text$mn:00009005                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000900A                 mov     ecx, [ebp+var_4]
.text$mn:0000900D                 mov     edx, [ecx+14h]
.text$mn:00009010                 lea     eax, [eax+edx*2]
.text$mn:00009013                 cmp     eax, [ebp+arg_0]
.text$mn:00009016                 ja      short loc_901E
.text$mn:00009018
.text$mn:00009018 loc_9018:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00009018                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00009018                 xor     al, al
.text$mn:0000901A                 jmp     short loc_9020
.text$mn:0000901C ; ---------------------------------------------------------------------------
.text$mn:0000901C                 jmp     short loc_9020
.text$mn:0000901E ; ---------------------------------------------------------------------------
.text$mn:0000901E
.text$mn:0000901E loc_901E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:0000901E                 mov     al, 1
.text$mn:00009020
.text$mn:00009020 loc_9020:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00009020                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00009020                 mov     esp, ebp
.text$mn:00009022                 pop     ebp
.text$mn:00009023                 retn    4
.text$mn:00009023 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00009023
.text$mn:00009023 ; ---------------------------------------------------------------------------
.text$mn:00009026                 align 4
.text$mn:00009026 _text$mn        ends
.text$mn:00009026
.text$mn:00009028 ; ===========================================================================
.text$mn:00009028
.text$mn:00009028 ; Segment type: Pure code
.text$mn:00009028 ; Segment permissions: Read/Execute
.text$mn:00009028 _text$mn        segment para public 'CODE' use32
.text$mn:00009028                 assume cs:_text$mn
.text$mn:00009028                 ;org 9028h
.text$mn:00009028 ; COMDAT (pick any)
.text$mn:00009028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009028
.text$mn:00009028 ; =============== S U B R O U T I N E =======================================
.text$mn:00009028
.text$mn:00009028 ; Attributes: bp-based frame
.text$mn:00009028
.text$mn:00009028 ; public: virtual void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Lock(void)
.text$mn:00009028                 public ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
.text$mn:00009028 ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ proc near
.text$mn:00009028                                         ; DATA XREF: .rdata:0000E420o
.text$mn:00009028                                         ; .rdata:0000E588o
.text$mn:00009028
.text$mn:00009028 var_4           = dword ptr -4
.text$mn:00009028
.text$mn:00009028                 push    ebp
.text$mn:00009029                 mov     ebp, esp
.text$mn:0000902B                 push    ecx
.text$mn:0000902C                 mov     [ebp+var_4], ecx
.text$mn:0000902F                 mov     esp, ebp
.text$mn:00009031                 pop     ebp
.text$mn:00009032                 retn
.text$mn:00009032 ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ endp
.text$mn:00009032
.text$mn:00009032 ; ---------------------------------------------------------------------------
.text$mn:00009033                 align 4
.text$mn:00009033 _text$mn        ends
.text$mn:00009033
.text$mn:00009034 ; ===========================================================================
.text$mn:00009034
.text$mn:00009034 ; Segment type: Pure code
.text$mn:00009034 ; Segment permissions: Read/Execute
.text$mn:00009034 _text$mn        segment para public 'CODE' use32
.text$mn:00009034                 assume cs:_text$mn
.text$mn:00009034                 ;org 9034h
.text$mn:00009034 ; COMDAT (pick any)
.text$mn:00009034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009034
.text$mn:00009034 ; =============== S U B R O U T I N E =======================================
.text$mn:00009034
.text$mn:00009034 ; Attributes: bp-based frame
.text$mn:00009034
.text$mn:00009034 ; private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __cdecl std::_System_error::_Makestr(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
.text$mn:00009034                 public ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:00009034 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$mn:00009034                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Fp
.text$mn:00009034
.text$mn:00009034 var_38          = dword ptr -38h
.text$mn:00009034 var_34          = dword ptr -34h
.text$mn:00009034 var_30          = dword ptr -30h
.text$mn:00009034 var_2C          = byte ptr -2Ch
.text$mn:00009034 var_10          = dword ptr -10h
.text$mn:00009034 var_C           = dword ptr -0Ch
.text$mn:00009034 var_4           = dword ptr -4
.text$mn:00009034 arg_0           = dword ptr  8
.text$mn:00009034 arg_4           = byte ptr  0Ch
.text$mn:00009034 arg_C           = byte ptr  14h
.text$mn:00009034
.text$mn:00009034                 push    ebp
.text$mn:00009035                 mov     ebp, esp
.text$mn:00009037                 push    0FFFFFFFFh
.text$mn:00009039                 push    offset __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:0000903E                 mov     eax, large fs:0
.text$mn:00009044                 push    eax
.text$mn:00009045                 sub     esp, 2Ch
.text$mn:00009048                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000904D                 xor     eax, ebp
.text$mn:0000904F                 mov     [ebp+var_10], eax
.text$mn:00009052                 push    eax
.text$mn:00009053                 lea     eax, [ebp+var_C]
.text$mn:00009056                 mov     large fs:0, eax
.text$mn:0000905C                 mov     [ebp+var_30], 0
.text$mn:00009063                 mov     [ebp+var_4], 1
.text$mn:0000906A                 lea     ecx, [ebp+arg_C]
.text$mn:0000906D                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00009072                 movzx   eax, al
.text$mn:00009075                 test    eax, eax
.text$mn:00009077                 jnz     short loc_9086
.text$mn:00009079                 push    offset ??_C@_02LMMGGCAJ@?3?5?$AA@ ; ": "
.text$mn:0000907E                 lea     ecx, [ebp+arg_C]
.text$mn:00009081                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)
.text$mn:00009086
.text$mn:00009086 loc_9086:                               ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+43j
.text$mn:00009086                 lea     ecx, [ebp+var_2C]
.text$mn:00009089                 push    ecx
.text$mn:0000908A                 lea     ecx, [ebp+arg_4]
.text$mn:0000908D                 call    ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message(void)
.text$mn:00009092                 mov     [ebp+var_34], eax
.text$mn:00009095                 mov     edx, [ebp+var_34]
.text$mn:00009098                 mov     [ebp+var_38], edx
.text$mn:0000909B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000909F                 mov     eax, [ebp+var_38]
.text$mn:000090A2                 push    eax
.text$mn:000090A3                 lea     ecx, [ebp+arg_C]
.text$mn:000090A6                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:000090AB                 mov     byte ptr [ebp+var_4], 1
.text$mn:000090AF                 lea     ecx, [ebp+var_2C]
.text$mn:000090B2                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000090B7                 lea     ecx, [ebp+arg_C]
.text$mn:000090BA                 push    ecx
.text$mn:000090BB                 mov     ecx, [ebp+arg_0]
.text$mn:000090BE                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:000090C3                 mov     edx, [ebp+var_30]
.text$mn:000090C6                 or      edx, 1
.text$mn:000090C9                 mov     [ebp+var_30], edx
.text$mn:000090CC                 mov     byte ptr [ebp+var_4], 0
.text$mn:000090D0                 lea     ecx, [ebp+arg_C]
.text$mn:000090D3                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000090D8                 mov     eax, [ebp+arg_0]
.text$mn:000090DB                 mov     ecx, [ebp+var_C]
.text$mn:000090DE                 mov     large fs:0, ecx
.text$mn:000090E5                 pop     ecx
.text$mn:000090E6                 mov     ecx, [ebp+var_10]
.text$mn:000090E9                 xor     ecx, ebp
.text$mn:000090EB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000090F0                 mov     esp, ebp
.text$mn:000090F2                 pop     ebp
.text$mn:000090F3                 retn
.text$mn:000090F3 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$mn:000090F3
.text$mn:000090F3 _text$mn        ends
.text$mn:000090F3
.text$x:000090F4 ; ===========================================================================
.text$x:000090F4
.text$x:000090F4 ; Segment type: Pure code
.text$x:000090F4 ; Segment permissions: Read/Execute
.text$x:000090F4 _text$x         segment para public 'CODE' use32
.text$x:000090F4                 assume cs:_text$x
.text$x:000090F4                 ;org 90F4h
.text$x:000090F4 ; COMDAT (pick associative to section at 9034)
.text$x:000090F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090F4
.text$x:000090F4 ; =============== S U B R O U T I N E =======================================
.text$x:000090F4
.text$x:000090F4
.text$x:000090F4 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 proc near
.text$x:000090F4                                         ; DATA XREF: .xdata$x:0000CDA0o
.text$x:000090F4                 lea     ecx, [ebp+14h]
.text$x:000090F7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000090F7 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 endp
.text$x:000090F7
.text$x:000090FC
.text$x:000090FC ; =============== S U B R O U T I N E =======================================
.text$x:000090FC
.text$x:000090FC
.text$x:000090FC __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 proc near
.text$x:000090FC                                         ; DATA XREF: .xdata$x:0000CDA8o
.text$x:000090FC                 lea     ecx, [ebp-2Ch]
.text$x:000090FF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000090FF __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 endp
.text$x:000090FF
.text$x:00009104
.text$x:00009104 ; =============== S U B R O U T I N E =======================================
.text$x:00009104
.text$x:00009104
.text$x:00009104 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 proc near
.text$x:00009104                                         ; DATA XREF: .xdata$x:0000CD98o
.text$x:00009104                 mov     eax, [ebp-30h]
.text$x:00009107                 and     eax, 1
.text$x:0000910A                 jz      $LN7
.text$x:00009110                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:00009114                 mov     ecx, [ebp+8]
.text$x:00009117                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000911C ; ---------------------------------------------------------------------------
.text$x:0000911C
.text$x:0000911C $LN7:                                   ; CODE XREF: __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2+6j
.text$x:0000911C                 retn
.text$x:0000911C __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 endp
.text$x:0000911C
.text$x:0000911D
.text$x:0000911D ; =============== S U B R O U T I N E =======================================
.text$x:0000911D
.text$x:0000911D
.text$x:0000911D __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$x:0000911D                                         ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+5o
.text$x:0000911D
.text$x:0000911D arg_4           = dword ptr  8
.text$x:0000911D
.text$x:0000911D                 mov     edx, [esp+arg_4]
.text$x:00009121                 lea     eax, [edx+0Ch]
.text$x:00009124                 mov     ecx, [edx-30h]
.text$x:00009127                 xor     ecx, eax
.text$x:00009129                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000912E                 mov     ecx, [edx-4]
.text$x:00009131                 xor     ecx, eax
.text$x:00009133                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009138                 mov     eax, offset __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$x:0000913D                 jmp     ___CxxFrameHandler3
.text$x:0000913D __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$x:0000913D
.text$x:0000913D ; ---------------------------------------------------------------------------
.text$x:00009142                 align 4
.text$x:00009142 _text$x         ends
.text$x:00009142
.text$mn:00009144 ; ===========================================================================
.text$mn:00009144
.text$mn:00009144 ; Segment type: Pure code
.text$mn:00009144 ; Segment permissions: Read/Execute
.text$mn:00009144 _text$mn        segment para public 'CODE' use32
.text$mn:00009144                 assume cs:_text$mn
.text$mn:00009144                 ;org 9144h
.text$mn:00009144 ; COMDAT (pick any)
.text$mn:00009144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009144
.text$mn:00009144 ; =============== S U B R O U T I N E =======================================
.text$mn:00009144
.text$mn:00009144 ; Attributes: bp-based frame
.text$mn:00009144
.text$mn:00009144 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009144                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00009144 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00009144                                         ; CODE XREF: $LN19+14p
.text$mn:00009144                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00009144
.text$mn:00009144 var_8           = dword ptr -8
.text$mn:00009144 var_4           = dword ptr -4
.text$mn:00009144
.text$mn:00009144                 push    ebp
.text$mn:00009145                 mov     ebp, esp
.text$mn:00009147                 sub     esp, 8
.text$mn:0000914A                 mov     [ebp+var_4], ecx
.text$mn:0000914D                 mov     eax, [ebp+var_4]
.text$mn:00009150                 cmp     dword ptr [eax+18h], 10h
.text$mn:00009154                 jb      short loc_916A
.text$mn:00009156                 mov     ecx, [ebp+var_4]
.text$mn:00009159                 mov     edx, [ecx+4]
.text$mn:0000915C                 push    edx
.text$mn:0000915D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00009162                 add     esp, 4
.text$mn:00009165                 mov     [ebp+var_8], eax
.text$mn:00009168                 jmp     short loc_9173
.text$mn:0000916A ; ---------------------------------------------------------------------------
.text$mn:0000916A
.text$mn:0000916A loc_916A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000916A                 mov     eax, [ebp+var_4]
.text$mn:0000916D                 add     eax, 4
.text$mn:00009170                 mov     [ebp+var_8], eax
.text$mn:00009173
.text$mn:00009173 loc_9173:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00009173                 mov     eax, [ebp+var_8]
.text$mn:00009176                 mov     esp, ebp
.text$mn:00009178                 pop     ebp
.text$mn:00009179                 retn
.text$mn:00009179 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00009179
.text$mn:00009179 ; ---------------------------------------------------------------------------
.text$mn:0000917A                 align 4
.text$mn:0000917A _text$mn        ends
.text$mn:0000917A
.text$mn:0000917C ; ===========================================================================
.text$mn:0000917C
.text$mn:0000917C ; Segment type: Pure code
.text$mn:0000917C ; Segment permissions: Read/Execute
.text$mn:0000917C _text$mn        segment para public 'CODE' use32
.text$mn:0000917C                 assume cs:_text$mn
.text$mn:0000917C                 ;org 917Ch
.text$mn:0000917C ; COMDAT (pick any)
.text$mn:0000917C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000917C
.text$mn:0000917C ; =============== S U B R O U T I N E =======================================
.text$mn:0000917C
.text$mn:0000917C ; Attributes: bp-based frame
.text$mn:0000917C
.text$mn:0000917C ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:0000917C                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:0000917C ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:0000917C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+80p
.text$mn:0000917C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp ...
.text$mn:0000917C
.text$mn:0000917C var_8           = dword ptr -8
.text$mn:0000917C var_4           = dword ptr -4
.text$mn:0000917C
.text$mn:0000917C                 push    ebp
.text$mn:0000917D                 mov     ebp, esp
.text$mn:0000917F                 sub     esp, 8
.text$mn:00009182                 mov     [ebp+var_4], ecx
.text$mn:00009185                 mov     eax, [ebp+var_4]
.text$mn:00009188                 cmp     dword ptr [eax+18h], 10h
.text$mn:0000918C                 jb      short loc_91A2
.text$mn:0000918E                 mov     ecx, [ebp+var_4]
.text$mn:00009191                 mov     edx, [ecx+4]
.text$mn:00009194                 push    edx
.text$mn:00009195                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000919A                 add     esp, 4
.text$mn:0000919D                 mov     [ebp+var_8], eax
.text$mn:000091A0                 jmp     short loc_91AB
.text$mn:000091A2 ; ---------------------------------------------------------------------------
.text$mn:000091A2
.text$mn:000091A2 loc_91A2:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000091A2                 mov     eax, [ebp+var_4]
.text$mn:000091A5                 add     eax, 4
.text$mn:000091A8                 mov     [ebp+var_8], eax
.text$mn:000091AB
.text$mn:000091AB loc_91AB:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000091AB                 mov     eax, [ebp+var_8]
.text$mn:000091AE                 mov     esp, ebp
.text$mn:000091B0                 pop     ebp
.text$mn:000091B1                 retn
.text$mn:000091B1 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:000091B1
.text$mn:000091B1 ; ---------------------------------------------------------------------------
.text$mn:000091B2                 align 4
.text$mn:000091B2 _text$mn        ends
.text$mn:000091B2
.text$mn:000091B4 ; ===========================================================================
.text$mn:000091B4
.text$mn:000091B4 ; Segment type: Pure code
.text$mn:000091B4 ; Segment permissions: Read/Execute
.text$mn:000091B4 _text$mn        segment para public 'CODE' use32
.text$mn:000091B4                 assume cs:_text$mn
.text$mn:000091B4                 ;org 91B4h
.text$mn:000091B4 ; COMDAT (pick any)
.text$mn:000091B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091B4
.text$mn:000091B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000091B4
.text$mn:000091B4 ; Attributes: bp-based frame
.text$mn:000091B4
.text$mn:000091B4 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000091B4                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:000091B4 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:000091B4                                         ; CODE XREF: $LN19_0+14p
.text$mn:000091B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+1Fp ...
.text$mn:000091B4
.text$mn:000091B4 var_8           = dword ptr -8
.text$mn:000091B4 var_4           = dword ptr -4
.text$mn:000091B4
.text$mn:000091B4                 push    ebp
.text$mn:000091B5                 mov     ebp, esp
.text$mn:000091B7                 sub     esp, 8
.text$mn:000091BA                 mov     [ebp+var_4], ecx
.text$mn:000091BD                 mov     eax, [ebp+var_4]
.text$mn:000091C0                 cmp     dword ptr [eax+18h], 8
.text$mn:000091C4                 jb      short loc_91DA
.text$mn:000091C6                 mov     ecx, [ebp+var_4]
.text$mn:000091C9                 mov     edx, [ecx+4]
.text$mn:000091CC                 push    edx
.text$mn:000091CD                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:000091D2                 add     esp, 4
.text$mn:000091D5                 mov     [ebp+var_8], eax
.text$mn:000091D8                 jmp     short loc_91E3
.text$mn:000091DA ; ---------------------------------------------------------------------------
.text$mn:000091DA
.text$mn:000091DA loc_91DA:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:000091DA                 mov     eax, [ebp+var_4]
.text$mn:000091DD                 add     eax, 4
.text$mn:000091E0                 mov     [ebp+var_8], eax
.text$mn:000091E3
.text$mn:000091E3 loc_91E3:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:000091E3                 mov     eax, [ebp+var_8]
.text$mn:000091E6                 mov     esp, ebp
.text$mn:000091E8                 pop     ebp
.text$mn:000091E9                 retn
.text$mn:000091E9 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:000091E9
.text$mn:000091E9 ; ---------------------------------------------------------------------------
.text$mn:000091EA                 align 4
.text$mn:000091EA _text$mn        ends
.text$mn:000091EA
.text$mn:000091EC ; ===========================================================================
.text$mn:000091EC
.text$mn:000091EC ; Segment type: Pure code
.text$mn:000091EC ; Segment permissions: Read/Execute
.text$mn:000091EC _text$mn        segment para public 'CODE' use32
.text$mn:000091EC                 assume cs:_text$mn
.text$mn:000091EC                 ;org 91ECh
.text$mn:000091EC ; COMDAT (pick any)
.text$mn:000091EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091EC
.text$mn:000091EC ; =============== S U B R O U T I N E =======================================
.text$mn:000091EC
.text$mn:000091EC ; Attributes: bp-based frame
.text$mn:000091EC
.text$mn:000091EC ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:000091EC                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:000091EC ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:000091EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+2Cp
.text$mn:000091EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p ...
.text$mn:000091EC
.text$mn:000091EC var_8           = dword ptr -8
.text$mn:000091EC var_4           = dword ptr -4
.text$mn:000091EC
.text$mn:000091EC                 push    ebp
.text$mn:000091ED                 mov     ebp, esp
.text$mn:000091EF                 sub     esp, 8
.text$mn:000091F2                 mov     [ebp+var_4], ecx
.text$mn:000091F5                 mov     eax, [ebp+var_4]
.text$mn:000091F8                 cmp     dword ptr [eax+18h], 8
.text$mn:000091FC                 jb      short loc_9212
.text$mn:000091FE                 mov     ecx, [ebp+var_4]
.text$mn:00009201                 mov     edx, [ecx+4]
.text$mn:00009204                 push    edx
.text$mn:00009205                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000920A                 add     esp, 4
.text$mn:0000920D                 mov     [ebp+var_8], eax
.text$mn:00009210                 jmp     short loc_921B
.text$mn:00009212 ; ---------------------------------------------------------------------------
.text$mn:00009212
.text$mn:00009212 loc_9212:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00009212                 mov     eax, [ebp+var_4]
.text$mn:00009215                 add     eax, 4
.text$mn:00009218                 mov     [ebp+var_8], eax
.text$mn:0000921B
.text$mn:0000921B loc_921B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000921B                 mov     eax, [ebp+var_8]
.text$mn:0000921E                 mov     esp, ebp
.text$mn:00009220                 pop     ebp
.text$mn:00009221                 retn
.text$mn:00009221 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00009221
.text$mn:00009221 ; ---------------------------------------------------------------------------
.text$mn:00009222                 align 4
.text$mn:00009222 _text$mn        ends
.text$mn:00009222
.text$mn:00009224 ; ===========================================================================
.text$mn:00009224
.text$mn:00009224 ; Segment type: Pure code
.text$mn:00009224 ; Segment permissions: Read/Execute
.text$mn:00009224 _text$mn        segment para public 'CODE' use32
.text$mn:00009224                 assume cs:_text$mn
.text$mn:00009224                 ;org 9224h
.text$mn:00009224 ; COMDAT (pick any)
.text$mn:00009224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009224
.text$mn:00009224 ; =============== S U B R O U T I N E =======================================
.text$mn:00009224
.text$mn:00009224 ; Attributes: bp-based frame
.text$mn:00009224
.text$mn:00009224 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00009224                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00009224 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00009224                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00009224                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00009224
.text$mn:00009224 var_18          = byte ptr -18h
.text$mn:00009224 var_14          = dword ptr -14h
.text$mn:00009224 var_10          = dword ptr -10h
.text$mn:00009224 var_C           = dword ptr -0Ch
.text$mn:00009224 var_4           = dword ptr -4
.text$mn:00009224
.text$mn:00009224                 push    ebp
.text$mn:00009225                 mov     ebp, esp
.text$mn:00009227                 push    0FFFFFFFFh
.text$mn:00009229                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000922E                 mov     eax, large fs:0
.text$mn:00009234                 push    eax
.text$mn:00009235                 sub     esp, 0Ch
.text$mn:00009238                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000923D                 xor     eax, ebp
.text$mn:0000923F                 push    eax
.text$mn:00009240                 lea     eax, [ebp+var_C]
.text$mn:00009243                 mov     large fs:0, eax
.text$mn:00009249                 mov     [ebp+var_14], ecx
.text$mn:0000924C                 mov     eax, [ebp+var_14]
.text$mn:0000924F                 cmp     dword ptr [eax], 0
.text$mn:00009252                 jz      short loc_92AF
.text$mn:00009254                 push    3               ; int
.text$mn:00009256                 lea     ecx, [ebp+var_18] ; this
.text$mn:00009259                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000925E                 mov     [ebp+var_4], 0
.text$mn:00009265                 mov     ecx, [ebp+var_14]
.text$mn:00009268                 mov     edx, [ecx]
.text$mn:0000926A                 add     edx, 4
.text$mn:0000926D                 mov     [ebp+var_10], edx
.text$mn:00009270                 jmp     short loc_927F
.text$mn:00009272 ; ---------------------------------------------------------------------------
.text$mn:00009272
.text$mn:00009272 loc_9272:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00009272                 mov     eax, [ebp+var_10]
.text$mn:00009275                 mov     ecx, [eax]
.text$mn:00009277                 mov     edx, [ebp+var_10]
.text$mn:0000927A                 mov     eax, [ecx+4]
.text$mn:0000927D                 mov     [edx], eax
.text$mn:0000927F
.text$mn:0000927F loc_927F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:0000927F                 mov     ecx, [ebp+var_10]
.text$mn:00009282                 cmp     dword ptr [ecx], 0
.text$mn:00009285                 jz      short loc_9294
.text$mn:00009287                 mov     edx, [ebp+var_10]
.text$mn:0000928A                 mov     eax, [edx]
.text$mn:0000928C                 mov     dword ptr [eax], 0
.text$mn:00009292                 jmp     short loc_9272
.text$mn:00009294 ; ---------------------------------------------------------------------------
.text$mn:00009294
.text$mn:00009294 loc_9294:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00009294                 mov     ecx, [ebp+var_14]
.text$mn:00009297                 mov     edx, [ecx]
.text$mn:00009299                 mov     dword ptr [edx+4], 0
.text$mn:000092A0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000092A7                 lea     ecx, [ebp+var_18] ; this
.text$mn:000092AA                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000092AF
.text$mn:000092AF loc_92AF:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:000092AF                 mov     ecx, [ebp+var_C]
.text$mn:000092B2                 mov     large fs:0, ecx
.text$mn:000092B9                 pop     ecx
.text$mn:000092BA                 mov     esp, ebp
.text$mn:000092BC                 pop     ebp
.text$mn:000092BD                 retn
.text$mn:000092BD ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:000092BD
.text$mn:000092BD ; ---------------------------------------------------------------------------
.text$mn:000092BE                 align 10h
.text$mn:000092BE _text$mn        ends
.text$mn:000092BE
.text$x:000092C0 ; ===========================================================================
.text$x:000092C0
.text$x:000092C0 ; Segment type: Pure code
.text$x:000092C0 ; Segment permissions: Read/Execute
.text$x:000092C0 _text$x         segment para public 'CODE' use32
.text$x:000092C0                 assume cs:_text$x
.text$x:000092C0                 ;org 92C0h
.text$x:000092C0 ; COMDAT (pick associative to section at 9224)
.text$x:000092C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000092C0
.text$x:000092C0 ; =============== S U B R O U T I N E =======================================
.text$x:000092C0
.text$x:000092C0
.text$x:000092C0 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:000092C0                                         ; DATA XREF: .xdata$x:0000C87Co
.text$x:000092C0                 lea     ecx, [ebp-18h]  ; this
.text$x:000092C3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000092C3 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:000092C3
.text$x:000092C8
.text$x:000092C8 ; =============== S U B R O U T I N E =======================================
.text$x:000092C8
.text$x:000092C8
.text$x:000092C8 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:000092C8                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:000092C8
.text$x:000092C8 arg_4           = dword ptr  8
.text$x:000092C8
.text$x:000092C8                 mov     edx, [esp+arg_4]
.text$x:000092CC                 lea     eax, [edx+0Ch]
.text$x:000092CF                 mov     ecx, [edx-10h]
.text$x:000092D2                 xor     ecx, eax
.text$x:000092D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000092D9                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:000092DE                 jmp     ___CxxFrameHandler3
.text$x:000092DE __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:000092DE
.text$x:000092DE ; ---------------------------------------------------------------------------
.text$x:000092E3                 align 4
.text$x:000092E3 _text$x         ends
.text$x:000092E3
.text$mn:000092E4 ; ===========================================================================
.text$mn:000092E4
.text$mn:000092E4 ; Segment type: Pure code
.text$mn:000092E4 ; Segment permissions: Read/Execute
.text$mn:000092E4 _text$mn        segment para public 'CODE' use32
.text$mn:000092E4                 assume cs:_text$mn
.text$mn:000092E4                 ;org 92E4h
.text$mn:000092E4 ; COMDAT (pick any)
.text$mn:000092E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092E4
.text$mn:000092E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000092E4
.text$mn:000092E4 ; Attributes: bp-based frame
.text$mn:000092E4
.text$mn:000092E4 ; public: void __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Osfx(void)
.text$mn:000092E4                 public ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:000092E4 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ proc near
.text$mn:000092E4                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+3Ep
.text$mn:000092E4
.text$mn:000092E4 var_14          = dword ptr -14h
.text$mn:000092E4 var_10          = dword ptr -10h
.text$mn:000092E4 var_C           = byte ptr -0Ch
.text$mn:000092E4 var_4           = dword ptr -4
.text$mn:000092E4
.text$mn:000092E4 ; FUNCTION CHUNK AT .text$mn:00009382 SIZE 00000009 BYTES
.text$mn:000092E4
.text$mn:000092E4                 push    ebp
.text$mn:000092E5                 mov     ebp, esp
.text$mn:000092E7                 push    0FFFFFFFFh
.text$mn:000092E9                 push    offset __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:000092EE                 mov     eax, large fs:0
.text$mn:000092F4                 push    eax
.text$mn:000092F5                 push    ecx
.text$mn:000092F6                 push    ecx
.text$mn:000092F7                 push    ebx
.text$mn:000092F8                 push    esi
.text$mn:000092F9                 push    edi
.text$mn:000092FA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000092FF                 xor     eax, ebp
.text$mn:00009301                 push    eax
.text$mn:00009302                 lea     eax, [ebp+var_C]
.text$mn:00009305                 mov     large fs:0, eax
.text$mn:0000930B                 mov     [ebp+var_10], esp
.text$mn:0000930E                 mov     [ebp+var_14], ecx
.text$mn:00009311                 mov     [ebp+var_4], 0
.text$mn:00009318                 mov     eax, [ebp+var_14]
.text$mn:0000931B                 mov     ecx, [eax]
.text$mn:0000931D                 mov     edx, [ebp+var_14]
.text$mn:00009320                 add     edx, [ecx+4]
.text$mn:00009323                 mov     ecx, edx        ; this
.text$mn:00009325                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000932A                 movzx   eax, al
.text$mn:0000932D                 test    eax, eax
.text$mn:0000932F                 jz      short loc_937A
.text$mn:00009331                 mov     ecx, [ebp+var_14]
.text$mn:00009334                 mov     edx, [ecx]
.text$mn:00009336                 mov     ecx, [ebp+var_14]
.text$mn:00009339                 add     ecx, [edx+4]    ; this
.text$mn:0000933C                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00009341                 and     eax, 2
.text$mn:00009344                 jz      short loc_937A
.text$mn:00009346                 mov     eax, [ebp+var_14]
.text$mn:00009349                 mov     ecx, [eax]
.text$mn:0000934B                 mov     edx, [ebp+var_14]
.text$mn:0000934E                 add     edx, [ecx+4]
.text$mn:00009351                 mov     ecx, edx
.text$mn:00009353                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00009358                 mov     ecx, eax
.text$mn:0000935A                 call    ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pubsync(void)
.text$mn:0000935F                 cmp     eax, 0FFFFFFFFh
.text$mn:00009362                 jnz     short loc_937A
.text$mn:00009364                 push    0
.text$mn:00009366                 push    4
.text$mn:00009368                 mov     eax, [ebp+var_14]
.text$mn:0000936B                 mov     ecx, [eax]
.text$mn:0000936D                 mov     edx, [ebp+var_14]
.text$mn:00009370                 add     edx, [ecx+4]
.text$mn:00009373                 mov     ecx, edx
.text$mn:00009375                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000937A
.text$mn:0000937A loc_937A:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+4Bj
.text$mn:0000937A                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+60j ...
.text$mn:0000937A                 jmp     short loc_9382
.text$mn:0000937A ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ endp
.text$mn:0000937A
.text$mn:0000937C
.text$mn:0000937C ; =============== S U B R O U T I N E =======================================
.text$mn:0000937C
.text$mn:0000937C
.text$mn:0000937C __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0 proc near
.text$mn:0000937C                                         ; DATA XREF: .xdata$x:0000DC64o
.text$mn:0000937C                 mov     eax, offset $LN9
.text$mn:00009381                 retn
.text$mn:00009381 __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0 endp
.text$mn:00009381
.text$mn:00009382 ; ---------------------------------------------------------------------------
.text$mn:00009382 ; START OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00009382
.text$mn:00009382 loc_9382:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void):loc_937Aj
.text$mn:00009382                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009389                 jmp     short loc_9392
.text$mn:00009389 ; END OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:0000938B
.text$mn:0000938B ; =============== S U B R O U T I N E =======================================
.text$mn:0000938B
.text$mn:0000938B
.text$mn:0000938B $LN9            proc near               ; DATA XREF: __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0o
.text$mn:0000938B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00009392
.text$mn:00009392 loc_9392:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+A5j
.text$mn:00009392                 mov     ecx, [ebp-0Ch]
.text$mn:00009395                 mov     large fs:0, ecx
.text$mn:0000939C                 pop     ecx
.text$mn:0000939D                 pop     edi
.text$mn:0000939E                 pop     esi
.text$mn:0000939F                 pop     ebx
.text$mn:000093A0                 mov     esp, ebp
.text$mn:000093A2                 pop     ebp
.text$mn:000093A3                 retn
.text$mn:000093A3 $LN9            endp ; sp-analysis failed
.text$mn:000093A3
.text$mn:000093A3 _text$mn        ends
.text$mn:000093A3
.text$x:000093A4 ; ===========================================================================
.text$x:000093A4
.text$x:000093A4 ; Segment type: Pure code
.text$x:000093A4 ; Segment permissions: Read/Execute
.text$x:000093A4 _text$x         segment para public 'CODE' use32
.text$x:000093A4                 assume cs:_text$x
.text$x:000093A4                 ;org 93A4h
.text$x:000093A4 ; COMDAT (pick associative to section at 92E4)
.text$x:000093A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000093A4
.text$x:000093A4 ; =============== S U B R O U T I N E =======================================
.text$x:000093A4
.text$x:000093A4
.text$x:000093A4 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ proc near
.text$x:000093A4                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+5o
.text$x:000093A4
.text$x:000093A4 arg_4           = dword ptr  8
.text$x:000093A4
.text$x:000093A4                 mov     edx, [esp+arg_4]
.text$x:000093A8                 lea     eax, [edx+0Ch]
.text$x:000093AB                 mov     ecx, [edx-18h]
.text$x:000093AE                 xor     ecx, eax
.text$x:000093B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000093B5                 mov     eax, offset __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$x:000093BA                 jmp     ___CxxFrameHandler3
.text$x:000093BA __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ endp
.text$x:000093BA
.text$x:000093BA ; ---------------------------------------------------------------------------
.text$x:000093BF                 align 10h
.text$x:000093BF _text$x         ends
.text$x:000093BF
.text$mn:000093C0 ; ===========================================================================
.text$mn:000093C0
.text$mn:000093C0 ; Segment type: Pure code
.text$mn:000093C0 ; Segment permissions: Read/Execute
.text$mn:000093C0 _text$mn        segment para public 'CODE' use32
.text$mn:000093C0                 assume cs:_text$mn
.text$mn:000093C0                 ;org 93C0h
.text$mn:000093C0 ; COMDAT (pick any)
.text$mn:000093C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093C0
.text$mn:000093C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000093C0
.text$mn:000093C0 ; Attributes: bp-based frame
.text$mn:000093C0
.text$mn:000093C0 ; protected: __int64 __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Pnavail(void)const
.text$mn:000093C0                 public ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
.text$mn:000093C0 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ proc near
.text$mn:000093C0                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+Cp
.text$mn:000093C0                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+2Bp
.text$mn:000093C0
.text$mn:000093C0 var_8           = dword ptr -8
.text$mn:000093C0 var_4           = dword ptr -4
.text$mn:000093C0
.text$mn:000093C0                 push    ebp
.text$mn:000093C1                 mov     ebp, esp
.text$mn:000093C3                 sub     esp, 8
.text$mn:000093C6                 mov     [ebp+var_4], ecx
.text$mn:000093C9                 mov     eax, [ebp+var_4]
.text$mn:000093CC                 mov     ecx, [eax+20h]
.text$mn:000093CF                 cmp     dword ptr [ecx], 0
.text$mn:000093D2                 jz      short loc_93E1
.text$mn:000093D4                 mov     edx, [ebp+var_4]
.text$mn:000093D7                 mov     eax, [edx+30h]
.text$mn:000093DA                 mov     ecx, [eax]
.text$mn:000093DC                 mov     [ebp+var_8], ecx
.text$mn:000093DF                 jmp     short loc_93E8
.text$mn:000093E1 ; ---------------------------------------------------------------------------
.text$mn:000093E1
.text$mn:000093E1 loc_93E1:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pnavail(void)+12j
.text$mn:000093E1                 mov     [ebp+var_8], 0
.text$mn:000093E8
.text$mn:000093E8 loc_93E8:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pnavail(void)+1Fj
.text$mn:000093E8                 mov     eax, [ebp+var_8]
.text$mn:000093EB                 cdq
.text$mn:000093EC                 mov     esp, ebp
.text$mn:000093EE                 pop     ebp
.text$mn:000093EF                 retn
.text$mn:000093EF ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ endp
.text$mn:000093EF
.text$mn:000093EF _text$mn        ends
.text$mn:000093EF
.text$mn:000093F0 ; ===========================================================================
.text$mn:000093F0
.text$mn:000093F0 ; Segment type: Pure code
.text$mn:000093F0 ; Segment permissions: Read/Execute
.text$mn:000093F0 _text$mn        segment para public 'CODE' use32
.text$mn:000093F0                 assume cs:_text$mn
.text$mn:000093F0                 ;org 93F0h
.text$mn:000093F0 ; COMDAT (pick any)
.text$mn:000093F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093F0
.text$mn:000093F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000093F0
.text$mn:000093F0 ; Attributes: bp-based frame
.text$mn:000093F0
.text$mn:000093F0 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Pninc(void)
.text$mn:000093F0                 public ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
.text$mn:000093F0 ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ proc near
.text$mn:000093F0                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+CEp
.text$mn:000093F0                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+2E7p ...
.text$mn:000093F0
.text$mn:000093F0 var_8           = dword ptr -8
.text$mn:000093F0 var_4           = dword ptr -4
.text$mn:000093F0
.text$mn:000093F0                 push    ebp
.text$mn:000093F1                 mov     ebp, esp
.text$mn:000093F3                 sub     esp, 8
.text$mn:000093F6                 mov     [ebp+var_4], ecx
.text$mn:000093F9                 mov     eax, [ebp+var_4]
.text$mn:000093FC                 mov     ecx, [eax+30h]
.text$mn:000093FF                 mov     edx, [ecx]
.text$mn:00009401                 sub     edx, 1
.text$mn:00009404                 mov     eax, [ebp+var_4]
.text$mn:00009407                 mov     ecx, [eax+30h]
.text$mn:0000940A                 mov     [ecx], edx
.text$mn:0000940C                 mov     edx, [ebp+var_4]
.text$mn:0000940F                 mov     eax, [edx+20h]
.text$mn:00009412                 mov     ecx, [eax]
.text$mn:00009414                 mov     [ebp+var_8], ecx
.text$mn:00009417                 mov     edx, [ebp+var_4]
.text$mn:0000941A                 mov     eax, [edx+20h]
.text$mn:0000941D                 mov     ecx, [eax]
.text$mn:0000941F                 add     ecx, 2
.text$mn:00009422                 mov     edx, [ebp+var_4]
.text$mn:00009425                 mov     eax, [edx+20h]
.text$mn:00009428                 mov     [eax], ecx
.text$mn:0000942A                 mov     eax, [ebp+var_8]
.text$mn:0000942D                 mov     esp, ebp
.text$mn:0000942F                 pop     ebp
.text$mn:00009430                 retn
.text$mn:00009430 ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ endp
.text$mn:00009430
.text$mn:00009430 ; ---------------------------------------------------------------------------
.text$mn:00009431                 align 4
.text$mn:00009431 _text$mn        ends
.text$mn:00009431
.text$mn:00009434 ; ===========================================================================
.text$mn:00009434
.text$mn:00009434 ; Segment type: Pure code
.text$mn:00009434 ; Segment permissions: Read/Execute
.text$mn:00009434 _text$mn        segment para public 'CODE' use32
.text$mn:00009434                 assume cs:_text$mn
.text$mn:00009434                 ;org 9434h
.text$mn:00009434 ; COMDAT (pick any)
.text$mn:00009434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009434
.text$mn:00009434 ; =============== S U B R O U T I N E =======================================
.text$mn:00009434
.text$mn:00009434 ; Attributes: bp-based frame
.text$mn:00009434
.text$mn:00009434 ; private: void __thiscall std::_Yarn<char>::_Tidy(void)
.text$mn:00009434                 public ?_Tidy@?$_Yarn@D@std@@AAEXXZ
.text$mn:00009434 ?_Tidy@?$_Yarn@D@std@@AAEXXZ proc near  ; CODE XREF: std::_Yarn<char>::~_Yarn<char>(void)+Ap
.text$mn:00009434
.text$mn:00009434 var_4           = dword ptr -4
.text$mn:00009434
.text$mn:00009434                 push    ebp
.text$mn:00009435                 mov     ebp, esp
.text$mn:00009437                 push    ecx
.text$mn:00009438                 mov     [ebp+var_4], ecx
.text$mn:0000943B                 mov     eax, [ebp+var_4]
.text$mn:0000943E                 cmp     dword ptr [eax], 0
.text$mn:00009441                 jz      short loc_9453
.text$mn:00009443                 push    2
.text$mn:00009445                 mov     ecx, [ebp+var_4]
.text$mn:00009448                 mov     edx, [ecx]
.text$mn:0000944A                 push    edx
.text$mn:0000944B                 call    __free_dbg
.text$mn:00009450                 add     esp, 8
.text$mn:00009453
.text$mn:00009453 loc_9453:                               ; CODE XREF: std::_Yarn<char>::_Tidy(void)+Dj
.text$mn:00009453                 mov     eax, [ebp+var_4]
.text$mn:00009456                 mov     dword ptr [eax], 0
.text$mn:0000945C                 mov     esp, ebp
.text$mn:0000945E                 pop     ebp
.text$mn:0000945F                 retn
.text$mn:0000945F ?_Tidy@?$_Yarn@D@std@@AAEXXZ endp
.text$mn:0000945F
.text$mn:0000945F _text$mn        ends
.text$mn:0000945F
.text$mn:00009460 ; ===========================================================================
.text$mn:00009460
.text$mn:00009460 ; Segment type: Pure code
.text$mn:00009460 ; Segment permissions: Read/Execute
.text$mn:00009460 _text$mn        segment para public 'CODE' use32
.text$mn:00009460                 assume cs:_text$mn
.text$mn:00009460                 ;org 9460h
.text$mn:00009460 ; COMDAT (pick any)
.text$mn:00009460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009460
.text$mn:00009460 ; =============== S U B R O U T I N E =======================================
.text$mn:00009460
.text$mn:00009460 ; Attributes: bp-based frame
.text$mn:00009460
.text$mn:00009460 ; private: void __thiscall std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:00009460                 public ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
.text$mn:00009460 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ proc near ; CODE XREF: std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)+Ap
.text$mn:00009460
.text$mn:00009460 var_4           = dword ptr -4
.text$mn:00009460
.text$mn:00009460                 push    ebp
.text$mn:00009461                 mov     ebp, esp
.text$mn:00009463                 push    ecx
.text$mn:00009464                 mov     [ebp+var_4], ecx
.text$mn:00009467                 mov     eax, [ebp+var_4]
.text$mn:0000946A                 cmp     dword ptr [eax], 0
.text$mn:0000946D                 jz      short loc_947F
.text$mn:0000946F                 push    2
.text$mn:00009471                 mov     ecx, [ebp+var_4]
.text$mn:00009474                 mov     edx, [ecx]
.text$mn:00009476                 push    edx
.text$mn:00009477                 call    __free_dbg
.text$mn:0000947C                 add     esp, 8
.text$mn:0000947F
.text$mn:0000947F loc_947F:                               ; CODE XREF: std::_Yarn<wchar_t>::_Tidy(void)+Dj
.text$mn:0000947F                 mov     eax, [ebp+var_4]
.text$mn:00009482                 mov     dword ptr [eax], 0
.text$mn:00009488                 mov     esp, ebp
.text$mn:0000948A                 pop     ebp
.text$mn:0000948B                 retn
.text$mn:0000948B ?_Tidy@?$_Yarn@_W@std@@AAEXXZ endp
.text$mn:0000948B
.text$mn:0000948B _text$mn        ends
.text$mn:0000948B
.text$mn:0000948C ; ===========================================================================
.text$mn:0000948C
.text$mn:0000948C ; Segment type: Pure code
.text$mn:0000948C ; Segment permissions: Read/Execute
.text$mn:0000948C _text$mn        segment para public 'CODE' use32
.text$mn:0000948C                 assume cs:_text$mn
.text$mn:0000948C                 ;org 948Ch
.text$mn:0000948C ; COMDAT (pick any)
.text$mn:0000948C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000948C
.text$mn:0000948C ; =============== S U B R O U T I N E =======================================
.text$mn:0000948C
.text$mn:0000948C ; Attributes: bp-based frame
.text$mn:0000948C
.text$mn:0000948C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:0000948C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:0000948C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:0000948C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+4Bp
.text$mn:0000948C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+56p ...
.text$mn:0000948C
.text$mn:0000948C var_C           = dword ptr -0Ch
.text$mn:0000948C var_8           = dword ptr -8
.text$mn:0000948C var_2           = byte ptr -2
.text$mn:0000948C var_1           = byte ptr -1
.text$mn:0000948C arg_0           = byte ptr  8
.text$mn:0000948C Size            = dword ptr  0Ch
.text$mn:0000948C
.text$mn:0000948C                 push    ebp
.text$mn:0000948D                 mov     ebp, esp
.text$mn:0000948F                 sub     esp, 0Ch
.text$mn:00009492                 mov     [ebp+var_8], ecx
.text$mn:00009495                 movzx   eax, [ebp+arg_0]
.text$mn:00009499                 test    eax, eax
.text$mn:0000949B                 jnz     short loc_949F
.text$mn:0000949D                 jmp     short loc_9512
.text$mn:0000949F ; ---------------------------------------------------------------------------
.text$mn:0000949F
.text$mn:0000949F loc_949F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:0000949F                 mov     ecx, [ebp+var_8]
.text$mn:000094A2                 cmp     dword ptr [ecx+18h], 10h
.text$mn:000094A6                 jb      short loc_9512
.text$mn:000094A8                 mov     edx, [ebp+var_8]
.text$mn:000094AB                 mov     eax, [edx+4]
.text$mn:000094AE                 mov     [ebp+var_C], eax
.text$mn:000094B1                 mov     ecx, [ebp+var_8]
.text$mn:000094B4                 add     ecx, 4
.text$mn:000094B7                 push    ecx
.text$mn:000094B8                 lea     edx, [ebp+var_1]
.text$mn:000094BB                 push    edx
.text$mn:000094BC                 mov     ecx, [ebp+var_8]
.text$mn:000094BF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000094C4                 mov     ecx, eax
.text$mn:000094C6                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:000094CB                 cmp     [ebp+Size], 0
.text$mn:000094CF                 jbe     short loc_94F1
.text$mn:000094D1                 mov     eax, [ebp+Size]
.text$mn:000094D4                 push    eax             ; Size
.text$mn:000094D5                 mov     ecx, [ebp+var_C]
.text$mn:000094D8                 push    ecx
.text$mn:000094D9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000094DE                 add     esp, 4
.text$mn:000094E1                 push    eax             ; Src
.text$mn:000094E2                 mov     edx, [ebp+var_8]
.text$mn:000094E5                 add     edx, 4
.text$mn:000094E8                 push    edx             ; Dst
.text$mn:000094E9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000094EE                 add     esp, 0Ch
.text$mn:000094F1
.text$mn:000094F1 loc_94F1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:000094F1                 mov     eax, [ebp+var_8]
.text$mn:000094F4                 mov     ecx, [eax+18h]
.text$mn:000094F7                 add     ecx, 1
.text$mn:000094FA                 push    ecx             ; int
.text$mn:000094FB                 mov     edx, [ebp+var_C]
.text$mn:000094FE                 push    edx             ; void *
.text$mn:000094FF                 lea     eax, [ebp+var_2]
.text$mn:00009502                 push    eax
.text$mn:00009503                 mov     ecx, [ebp+var_8]
.text$mn:00009506                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000950B                 mov     ecx, eax
.text$mn:0000950D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00009512
.text$mn:00009512 loc_9512:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00009512                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00009512                 mov     ecx, [ebp+var_8]
.text$mn:00009515                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:0000951C                 mov     edx, [ebp+Size]
.text$mn:0000951F                 push    edx
.text$mn:00009520                 mov     ecx, [ebp+var_8]
.text$mn:00009523                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009528                 mov     esp, ebp
.text$mn:0000952A                 pop     ebp
.text$mn:0000952B                 retn    8
.text$mn:0000952B ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:0000952B
.text$mn:0000952B ; ---------------------------------------------------------------------------
.text$mn:0000952E                 align 10h
.text$mn:0000952E _text$mn        ends
.text$mn:0000952E
.text$mn:00009530 ; ===========================================================================
.text$mn:00009530
.text$mn:00009530 ; Segment type: Pure code
.text$mn:00009530 ; Segment permissions: Read/Execute
.text$mn:00009530 _text$mn        segment para public 'CODE' use32
.text$mn:00009530                 assume cs:_text$mn
.text$mn:00009530                 ;org 9530h
.text$mn:00009530 ; COMDAT (pick any)
.text$mn:00009530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009530
.text$mn:00009530 ; =============== S U B R O U T I N E =======================================
.text$mn:00009530
.text$mn:00009530 ; Attributes: bp-based frame
.text$mn:00009530
.text$mn:00009530 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00009530                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00009530 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00009530                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:00009530                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:00009530
.text$mn:00009530 var_C           = dword ptr -0Ch
.text$mn:00009530 var_8           = dword ptr -8
.text$mn:00009530 var_2           = byte ptr -2
.text$mn:00009530 var_1           = byte ptr -1
.text$mn:00009530 arg_0           = byte ptr  8
.text$mn:00009530 arg_4           = dword ptr  0Ch
.text$mn:00009530
.text$mn:00009530                 push    ebp
.text$mn:00009531                 mov     ebp, esp
.text$mn:00009533                 sub     esp, 0Ch
.text$mn:00009536                 mov     [ebp+var_8], ecx
.text$mn:00009539                 movzx   eax, [ebp+arg_0]
.text$mn:0000953D                 test    eax, eax
.text$mn:0000953F                 jnz     short loc_9543
.text$mn:00009541                 jmp     short loc_95B6
.text$mn:00009543 ; ---------------------------------------------------------------------------
.text$mn:00009543
.text$mn:00009543 loc_9543:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00009543                 mov     ecx, [ebp+var_8]
.text$mn:00009546                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000954A                 jb      short loc_95B6
.text$mn:0000954C                 mov     edx, [ebp+var_8]
.text$mn:0000954F                 mov     eax, [edx+4]
.text$mn:00009552                 mov     [ebp+var_C], eax
.text$mn:00009555                 mov     ecx, [ebp+var_8]
.text$mn:00009558                 add     ecx, 4
.text$mn:0000955B                 push    ecx
.text$mn:0000955C                 lea     edx, [ebp+var_1]
.text$mn:0000955F                 push    edx
.text$mn:00009560                 mov     ecx, [ebp+var_8]
.text$mn:00009563                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009568                 mov     ecx, eax
.text$mn:0000956A                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000956F                 cmp     [ebp+arg_4], 0
.text$mn:00009573                 jbe     short loc_9595
.text$mn:00009575                 mov     eax, [ebp+arg_4]
.text$mn:00009578                 push    eax             ; int
.text$mn:00009579                 mov     ecx, [ebp+var_C]
.text$mn:0000957C                 push    ecx
.text$mn:0000957D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00009582                 add     esp, 4
.text$mn:00009585                 push    eax             ; Src
.text$mn:00009586                 mov     edx, [ebp+var_8]
.text$mn:00009589                 add     edx, 4
.text$mn:0000958C                 push    edx             ; Dst
.text$mn:0000958D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009592                 add     esp, 0Ch
.text$mn:00009595
.text$mn:00009595 loc_9595:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00009595                 mov     eax, [ebp+var_8]
.text$mn:00009598                 mov     ecx, [eax+18h]
.text$mn:0000959B                 add     ecx, 1
.text$mn:0000959E                 push    ecx             ; int
.text$mn:0000959F                 mov     edx, [ebp+var_C]
.text$mn:000095A2                 push    edx             ; void *
.text$mn:000095A3                 lea     eax, [ebp+var_2]
.text$mn:000095A6                 push    eax
.text$mn:000095A7                 mov     ecx, [ebp+var_8]
.text$mn:000095AA                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000095AF                 mov     ecx, eax
.text$mn:000095B1                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:000095B6
.text$mn:000095B6 loc_95B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:000095B6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:000095B6                 mov     ecx, [ebp+var_8]
.text$mn:000095B9                 mov     dword ptr [ecx+18h], 7
.text$mn:000095C0                 mov     edx, [ebp+arg_4]
.text$mn:000095C3                 push    edx
.text$mn:000095C4                 mov     ecx, [ebp+var_8]
.text$mn:000095C7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000095CC                 mov     esp, ebp
.text$mn:000095CE                 pop     ebp
.text$mn:000095CF                 retn    8
.text$mn:000095CF ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:000095CF
.text$mn:000095CF ; ---------------------------------------------------------------------------
.text$mn:000095D2                 align 4
.text$mn:000095D2 _text$mn        ends
.text$mn:000095D2
.text$mn:000095D4 ; ===========================================================================
.text$mn:000095D4
.text$mn:000095D4 ; Segment type: Pure code
.text$mn:000095D4 ; Segment permissions: Read/Execute
.text$mn:000095D4 _text$mn        segment para public 'CODE' use32
.text$mn:000095D4                 assume cs:_text$mn
.text$mn:000095D4                 ;org 95D4h
.text$mn:000095D4 ; COMDAT (pick any)
.text$mn:000095D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095D4
.text$mn:000095D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000095D4
.text$mn:000095D4 ; Attributes: bp-based frame
.text$mn:000095D4
.text$mn:000095D4 ; protected: void __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(void)
.text$mn:000095D4                 public ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
.text$mn:000095D4 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ proc near
.text$mn:000095D4                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+39p
.text$mn:000095D4
.text$mn:000095D4 var_8           = dword ptr -8
.text$mn:000095D4 var_4           = dword ptr -4
.text$mn:000095D4
.text$mn:000095D4                 push    ebp
.text$mn:000095D5                 mov     ebp, esp
.text$mn:000095D7                 sub     esp, 8
.text$mn:000095DA                 mov     [ebp+var_4], ecx
.text$mn:000095DD                 mov     eax, [ebp+var_4]
.text$mn:000095E0                 mov     ecx, [eax+3Ch]
.text$mn:000095E3                 and     ecx, 1
.text$mn:000095E6                 jz      short loc_9630
.text$mn:000095E8                 mov     ecx, [ebp+var_4]
.text$mn:000095EB                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:000095F0                 test    eax, eax
.text$mn:000095F2                 jz      short loc_9601
.text$mn:000095F4                 mov     ecx, [ebp+var_4]
.text$mn:000095F7                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:000095FC                 mov     [ebp+var_8], eax
.text$mn:000095FF                 jmp     short loc_960C
.text$mn:00009601 ; ---------------------------------------------------------------------------
.text$mn:00009601
.text$mn:00009601 loc_9601:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+1Ej
.text$mn:00009601                 mov     ecx, [ebp+var_4]
.text$mn:00009604                 call    ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::egptr(void)
.text$mn:00009609                 mov     [ebp+var_8], eax
.text$mn:0000960C
.text$mn:0000960C loc_960C:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+2Bj
.text$mn:0000960C                 mov     ecx, [ebp+var_4]
.text$mn:0000960F                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:00009614                 mov     edx, [ebp+var_8]
.text$mn:00009617                 sub     edx, eax
.text$mn:00009619                 sar     edx, 1
.text$mn:0000961B                 push    edx             ; int
.text$mn:0000961C                 mov     ecx, [ebp+var_4]
.text$mn:0000961F                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:00009624                 push    eax             ; void *
.text$mn:00009625                 mov     ecx, [ebp+var_4]
.text$mn:00009628                 add     ecx, 40h ; '@'
.text$mn:0000962B                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00009630
.text$mn:00009630 loc_9630:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+12j
.text$mn:00009630                 push    0
.text$mn:00009632                 push    0
.text$mn:00009634                 push    0
.text$mn:00009636                 mov     ecx, [ebp+var_4]
.text$mn:00009639                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000963E                 push    0
.text$mn:00009640                 push    0
.text$mn:00009642                 mov     ecx, [ebp+var_4]
.text$mn:00009645                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *)
.text$mn:0000964A                 mov     eax, [ebp+var_4]
.text$mn:0000964D                 mov     dword ptr [eax+38h], 0
.text$mn:00009654                 mov     ecx, [ebp+var_4]
.text$mn:00009657                 mov     edx, [ecx+3Ch]
.text$mn:0000965A                 and     edx, 0FFFFFFFEh
.text$mn:0000965D                 mov     eax, [ebp+var_4]
.text$mn:00009660                 mov     [eax+3Ch], edx
.text$mn:00009663                 mov     esp, ebp
.text$mn:00009665                 pop     ebp
.text$mn:00009666                 retn
.text$mn:00009666 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ endp
.text$mn:00009666
.text$mn:00009666 ; ---------------------------------------------------------------------------
.text$mn:00009667                 align 4
.text$mn:00009667 _text$mn        ends
.text$mn:00009667
.text$mn:00009668 ; ===========================================================================
.text$mn:00009668
.text$mn:00009668 ; Segment type: Pure code
.text$mn:00009668 ; Segment permissions: Read/Execute
.text$mn:00009668 _text$mn        segment para public 'CODE' use32
.text$mn:00009668                 assume cs:_text$mn
.text$mn:00009668                 ;org 9668h
.text$mn:00009668 ; COMDAT (pick any)
.text$mn:00009668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009668
.text$mn:00009668 ; =============== S U B R O U T I N E =======================================
.text$mn:00009668
.text$mn:00009668 ; Attributes: bp-based frame
.text$mn:00009668
.text$mn:00009668 ; public: virtual void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Unlock(void)
.text$mn:00009668                 public ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
.text$mn:00009668 ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ proc near
.text$mn:00009668                                         ; DATA XREF: .rdata:0000E424o
.text$mn:00009668                                         ; .rdata:0000E58Co
.text$mn:00009668
.text$mn:00009668 var_4           = dword ptr -4
.text$mn:00009668
.text$mn:00009668                 push    ebp
.text$mn:00009669                 mov     ebp, esp
.text$mn:0000966B                 push    ecx
.text$mn:0000966C                 mov     [ebp+var_4], ecx
.text$mn:0000966F                 mov     esp, ebp
.text$mn:00009671                 pop     ebp
.text$mn:00009672                 retn
.text$mn:00009672 ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ endp
.text$mn:00009672
.text$mn:00009672 ; ---------------------------------------------------------------------------
.text$mn:00009673                 align 4
.text$mn:00009673 _text$mn        ends
.text$mn:00009673
.text$mn:00009674 ; ===========================================================================
.text$mn:00009674
.text$mn:00009674 ; Segment type: Pure code
.text$mn:00009674 ; Segment permissions: Read/Execute
.text$mn:00009674 _text$mn        segment para public 'CODE' use32
.text$mn:00009674                 assume cs:_text$mn
.text$mn:00009674                 ;org 9674h
.text$mn:00009674 ; COMDAT (pick any)
.text$mn:00009674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009674
.text$mn:00009674 ; =============== S U B R O U T I N E =======================================
.text$mn:00009674
.text$mn:00009674 ; Attributes: bp-based frame
.text$mn:00009674
.text$mn:00009674 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00009674                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00009674 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00009674                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00009674                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Dp ...
.text$mn:00009674
.text$mn:00009674 var_4           = dword ptr -4
.text$mn:00009674
.text$mn:00009674                 push    ebp
.text$mn:00009675                 mov     ebp, esp
.text$mn:00009677                 push    ecx
.text$mn:00009678                 mov     [ebp+var_4], ecx
.text$mn:0000967B                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00009680                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00009685                 mov     esp, ebp
.text$mn:00009687                 pop     ebp
.text$mn:00009688                 retn
.text$mn:00009688 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00009688
.text$mn:00009688 ; ---------------------------------------------------------------------------
.text$mn:00009689                 align 4
.text$mn:00009689 _text$mn        ends
.text$mn:00009689
.text$mn:0000968C ; ===========================================================================
.text$mn:0000968C
.text$mn:0000968C ; Segment type: Pure code
.text$mn:0000968C ; Segment permissions: Read/Execute
.text$mn:0000968C _text$mn        segment para public 'CODE' use32
.text$mn:0000968C                 assume cs:_text$mn
.text$mn:0000968C                 ;org 968Ch
.text$mn:0000968C ; COMDAT (pick any)
.text$mn:0000968C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000968C
.text$mn:0000968C ; =============== S U B R O U T I N E =======================================
.text$mn:0000968C
.text$mn:0000968C ; Attributes: bp-based frame
.text$mn:0000968C
.text$mn:0000968C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:0000968C                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000968C ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000968C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:0000968C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:0000968C
.text$mn:0000968C var_4           = dword ptr -4
.text$mn:0000968C
.text$mn:0000968C                 push    ebp
.text$mn:0000968D                 mov     ebp, esp
.text$mn:0000968F                 push    ecx
.text$mn:00009690                 mov     [ebp+var_4], ecx
.text$mn:00009693                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00009698                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000969D                 mov     esp, ebp
.text$mn:0000969F                 pop     ebp
.text$mn:000096A0                 retn
.text$mn:000096A0 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:000096A0
.text$mn:000096A0 ; ---------------------------------------------------------------------------
.text$mn:000096A1                 align 4
.text$mn:000096A1 _text$mn        ends
.text$mn:000096A1
.text$mn:000096A4 ; ===========================================================================
.text$mn:000096A4
.text$mn:000096A4 ; Segment type: Pure code
.text$mn:000096A4 ; Segment permissions: Read/Execute
.text$mn:000096A4 _text$mn        segment para public 'CODE' use32
.text$mn:000096A4                 assume cs:_text$mn
.text$mn:000096A4                 ;org 96A4h
.text$mn:000096A4 ; COMDAT (pick any)
.text$mn:000096A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096A4
.text$mn:000096A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000096A4
.text$mn:000096A4 ; Attributes: bp-based frame
.text$mn:000096A4
.text$mn:000096A4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:000096A4                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000096A4 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000096A4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:000096A4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p ...
.text$mn:000096A4
.text$mn:000096A4 var_4           = dword ptr -4
.text$mn:000096A4
.text$mn:000096A4                 push    ebp
.text$mn:000096A5                 mov     ebp, esp
.text$mn:000096A7                 push    ecx
.text$mn:000096A8                 mov     [ebp+var_4], ecx
.text$mn:000096AB                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:000096B0                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:000096B5                 mov     esp, ebp
.text$mn:000096B7                 pop     ebp
.text$mn:000096B8                 retn
.text$mn:000096B8 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000096B8
.text$mn:000096B8 ; ---------------------------------------------------------------------------
.text$mn:000096B9                 align 4
.text$mn:000096B9 _text$mn        ends
.text$mn:000096B9
.text$mn:000096BC ; ===========================================================================
.text$mn:000096BC
.text$mn:000096BC ; Segment type: Pure code
.text$mn:000096BC ; Segment permissions: Read/Execute
.text$mn:000096BC _text$mn        segment para public 'CODE' use32
.text$mn:000096BC                 assume cs:_text$mn
.text$mn:000096BC                 ;org 96BCh
.text$mn:000096BC ; COMDAT (pick any)
.text$mn:000096BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096BC
.text$mn:000096BC ; =============== S U B R O U T I N E =======================================
.text$mn:000096BC
.text$mn:000096BC ; Attributes: bp-based frame
.text$mn:000096BC
.text$mn:000096BC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:000096BC                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000096BC ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000096BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:000096BC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:000096BC
.text$mn:000096BC var_4           = dword ptr -4
.text$mn:000096BC
.text$mn:000096BC                 push    ebp
.text$mn:000096BD                 mov     ebp, esp
.text$mn:000096BF                 push    ecx
.text$mn:000096C0                 mov     [ebp+var_4], ecx
.text$mn:000096C3                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:000096C8                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:000096CD                 mov     esp, ebp
.text$mn:000096CF                 pop     ebp
.text$mn:000096D0                 retn
.text$mn:000096D0 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:000096D0
.text$mn:000096D0 ; ---------------------------------------------------------------------------
.text$mn:000096D1                 align 4
.text$mn:000096D1 _text$mn        ends
.text$mn:000096D1
.text$mn:000096D4 ; ===========================================================================
.text$mn:000096D4
.text$mn:000096D4 ; Segment type: Pure code
.text$mn:000096D4 ; Segment permissions: Read/Execute
.text$mn:000096D4 _text$mn        segment para public 'CODE' use32
.text$mn:000096D4                 assume cs:_text$mn
.text$mn:000096D4                 ;org 96D4h
.text$mn:000096D4 ; COMDAT (pick any)
.text$mn:000096D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096D4
.text$mn:000096D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000096D4
.text$mn:000096D4 ; Attributes: bp-based frame
.text$mn:000096D4
.text$mn:000096D4 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:000096D4                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:000096D4 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:000096D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:000096D4                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:000096D4
.text$mn:000096D4 var_4           = dword ptr -4
.text$mn:000096D4 arg_0           = dword ptr  8
.text$mn:000096D4
.text$mn:000096D4                 push    ebp
.text$mn:000096D5                 mov     ebp, esp
.text$mn:000096D7                 push    ecx
.text$mn:000096D8                 mov     [ebp+var_4], ecx
.text$mn:000096DB                 mov     eax, [ebp+arg_0]
.text$mn:000096DE                 push    eax
.text$mn:000096DF                 mov     ecx, [ebp+var_4]
.text$mn:000096E2                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:000096E7                 mov     esp, ebp
.text$mn:000096E9                 pop     ebp
.text$mn:000096EA                 retn    4
.text$mn:000096EA ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:000096EA
.text$mn:000096EA ; ---------------------------------------------------------------------------
.text$mn:000096ED                 align 10h
.text$mn:000096ED _text$mn        ends
.text$mn:000096ED
.text$mn:000096F0 ; ===========================================================================
.text$mn:000096F0
.text$mn:000096F0 ; Segment type: Pure code
.text$mn:000096F0 ; Segment permissions: Read/Execute
.text$mn:000096F0 _text$mn        segment para public 'CODE' use32
.text$mn:000096F0                 assume cs:_text$mn
.text$mn:000096F0                 ;org 96F0h
.text$mn:000096F0 ; COMDAT (pick any)
.text$mn:000096F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096F0
.text$mn:000096F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000096F0
.text$mn:000096F0 ; Attributes: bp-based frame
.text$mn:000096F0
.text$mn:000096F0 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:000096F0                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:000096F0 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:000096F0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:000096F0                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:000096F0
.text$mn:000096F0 var_4           = dword ptr -4
.text$mn:000096F0 arg_0           = dword ptr  8
.text$mn:000096F0
.text$mn:000096F0                 push    ebp
.text$mn:000096F1                 mov     ebp, esp
.text$mn:000096F3                 push    ecx
.text$mn:000096F4                 mov     [ebp+var_4], ecx
.text$mn:000096F7                 mov     eax, [ebp+arg_0]
.text$mn:000096FA                 push    eax
.text$mn:000096FB                 mov     ecx, [ebp+var_4]
.text$mn:000096FE                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00009703                 mov     esp, ebp
.text$mn:00009705                 pop     ebp
.text$mn:00009706                 retn    4
.text$mn:00009706 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00009706
.text$mn:00009706 ; ---------------------------------------------------------------------------
.text$mn:00009709                 align 4
.text$mn:00009709 _text$mn        ends
.text$mn:00009709
.text$mn:0000970C ; ===========================================================================
.text$mn:0000970C
.text$mn:0000970C ; Segment type: Pure code
.text$mn:0000970C ; Segment permissions: Read/Execute
.text$mn:0000970C _text$mn        segment para public 'CODE' use32
.text$mn:0000970C                 assume cs:_text$mn
.text$mn:0000970C                 ;org 970Ch
.text$mn:0000970C ; COMDAT (pick any)
.text$mn:0000970C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000970C
.text$mn:0000970C ; =============== S U B R O U T I N E =======================================
.text$mn:0000970C
.text$mn:0000970C ; Attributes: bp-based frame
.text$mn:0000970C
.text$mn:0000970C ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:0000970C                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:0000970C ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:0000970C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:0000970C
.text$mn:0000970C var_4           = dword ptr -4
.text$mn:0000970C arg_0           = dword ptr  8
.text$mn:0000970C
.text$mn:0000970C                 push    ebp
.text$mn:0000970D                 mov     ebp, esp
.text$mn:0000970F                 push    ecx
.text$mn:00009710                 mov     [ebp+var_4], ecx
.text$mn:00009713                 push    0
.text$mn:00009715                 mov     eax, [ebp+arg_0]
.text$mn:00009718                 push    eax
.text$mn:00009719                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000971E                 add     esp, 8
.text$mn:00009721                 mov     esp, ebp
.text$mn:00009723                 pop     ebp
.text$mn:00009724                 retn    4
.text$mn:00009724 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00009724
.text$mn:00009724 ; ---------------------------------------------------------------------------
.text$mn:00009727                 align 4
.text$mn:00009727 _text$mn        ends
.text$mn:00009727
.text$mn:00009728 ; ===========================================================================
.text$mn:00009728
.text$mn:00009728 ; Segment type: Pure code
.text$mn:00009728 ; Segment permissions: Read/Execute
.text$mn:00009728 _text$mn        segment para public 'CODE' use32
.text$mn:00009728                 assume cs:_text$mn
.text$mn:00009728                 ;org 9728h
.text$mn:00009728 ; COMDAT (pick any)
.text$mn:00009728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009728
.text$mn:00009728 ; =============== S U B R O U T I N E =======================================
.text$mn:00009728
.text$mn:00009728 ; Attributes: bp-based frame
.text$mn:00009728
.text$mn:00009728 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00009728                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00009728 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00009728                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00009728                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:00009728
.text$mn:00009728 var_4           = dword ptr -4
.text$mn:00009728 arg_0           = dword ptr  8
.text$mn:00009728
.text$mn:00009728                 push    ebp
.text$mn:00009729                 mov     ebp, esp
.text$mn:0000972B                 push    ecx
.text$mn:0000972C                 mov     [ebp+var_4], ecx
.text$mn:0000972F                 push    0
.text$mn:00009731                 mov     eax, [ebp+arg_0]
.text$mn:00009734                 push    eax
.text$mn:00009735                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000973A                 add     esp, 8
.text$mn:0000973D                 mov     esp, ebp
.text$mn:0000973F                 pop     ebp
.text$mn:00009740                 retn    4
.text$mn:00009740 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00009740
.text$mn:00009740 ; ---------------------------------------------------------------------------
.text$mn:00009743                 align 4
.text$mn:00009743 _text$mn        ends
.text$mn:00009743
.text$mn:00009744 ; ===========================================================================
.text$mn:00009744
.text$mn:00009744 ; Segment type: Pure code
.text$mn:00009744 ; Segment permissions: Read/Execute
.text$mn:00009744 _text$mn        segment para public 'CODE' use32
.text$mn:00009744                 assume cs:_text$mn
.text$mn:00009744                 ;org 9744h
.text$mn:00009744 ; COMDAT (pick any)
.text$mn:00009744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009744
.text$mn:00009744 ; =============== S U B R O U T I N E =======================================
.text$mn:00009744
.text$mn:00009744 ; Attributes: bp-based frame
.text$mn:00009744
.text$mn:00009744 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00009744                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00009744 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00009744                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+42p
.text$mn:00009744                                         ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep ...
.text$mn:00009744
.text$mn:00009744 var_4           = dword ptr -4
.text$mn:00009744 arg_0           = dword ptr  8
.text$mn:00009744
.text$mn:00009744                 push    ebp
.text$mn:00009745                 mov     ebp, esp
.text$mn:00009747                 push    ecx
.text$mn:00009748                 mov     [ebp+var_4], ecx
.text$mn:0000974B                 push    0
.text$mn:0000974D                 mov     eax, [ebp+arg_0]
.text$mn:00009750                 push    eax
.text$mn:00009751                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00009756                 add     esp, 8
.text$mn:00009759                 mov     esp, ebp
.text$mn:0000975B                 pop     ebp
.text$mn:0000975C                 retn    4
.text$mn:0000975C ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000975C
.text$mn:0000975C ; ---------------------------------------------------------------------------
.text$mn:0000975F                 align 10h
.text$mn:0000975F _text$mn        ends
.text$mn:0000975F
.text$mn:00009760 ; ===========================================================================
.text$mn:00009760
.text$mn:00009760 ; Segment type: Pure code
.text$mn:00009760 ; Segment permissions: Read/Execute
.text$mn:00009760 _text$mn        segment para public 'CODE' use32
.text$mn:00009760                 assume cs:_text$mn
.text$mn:00009760                 ;org 9760h
.text$mn:00009760 ; COMDAT (pick any)
.text$mn:00009760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009760
.text$mn:00009760 ; =============== S U B R O U T I N E =======================================
.text$mn:00009760
.text$mn:00009760 ; Attributes: bp-based frame
.text$mn:00009760
.text$mn:00009760 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::append(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00009760                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00009760 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00009760                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+72p
.text$mn:00009760
.text$mn:00009760 var_4           = dword ptr -4
.text$mn:00009760 arg_0           = dword ptr  8
.text$mn:00009760
.text$mn:00009760                 push    ebp
.text$mn:00009761                 mov     ebp, esp
.text$mn:00009763                 push    ecx
.text$mn:00009764                 mov     [ebp+var_4], ecx
.text$mn:00009767                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:0000976C                 push    eax             ; Size
.text$mn:0000976D                 push    0               ; int
.text$mn:0000976F                 mov     ecx, [ebp+arg_0]
.text$mn:00009772                 push    ecx             ; int
.text$mn:00009773                 mov     ecx, [ebp+var_4]
.text$mn:00009776                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000977B                 mov     esp, ebp
.text$mn:0000977D                 pop     ebp
.text$mn:0000977E                 retn    4
.text$mn:0000977E ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000977E
.text$mn:0000977E ; ---------------------------------------------------------------------------
.text$mn:00009781                 align 4
.text$mn:00009781 _text$mn        ends
.text$mn:00009781
.text$mn:00009784 ; ===========================================================================
.text$mn:00009784
.text$mn:00009784 ; Segment type: Pure code
.text$mn:00009784 ; Segment permissions: Read/Execute
.text$mn:00009784 _text$mn        segment para public 'CODE' use32
.text$mn:00009784                 assume cs:_text$mn
.text$mn:00009784                 ;org 9784h
.text$mn:00009784 ; COMDAT (pick any)
.text$mn:00009784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009784
.text$mn:00009784 ; =============== S U B R O U T I N E =======================================
.text$mn:00009784
.text$mn:00009784 ; Attributes: bp-based frame
.text$mn:00009784
.text$mn:00009784 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(int, int, size_t Size)
.text$mn:00009784                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009784 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009784                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+16p
.text$mn:00009784                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+51p
.text$mn:00009784
.text$mn:00009784 var_8           = dword ptr -8
.text$mn:00009784 var_4           = dword ptr -4
.text$mn:00009784 arg_0           = dword ptr  8
.text$mn:00009784 arg_4           = dword ptr  0Ch
.text$mn:00009784 Size            = dword ptr  10h
.text$mn:00009784
.text$mn:00009784                 push    ebp
.text$mn:00009785                 mov     ebp, esp
.text$mn:00009787                 sub     esp, 8
.text$mn:0000978A                 mov     [ebp+var_4], ecx
.text$mn:0000978D                 mov     ecx, [ebp+arg_0]
.text$mn:00009790                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00009795                 cmp     eax, [ebp+arg_4]
.text$mn:00009798                 jnb     short loc_97A2
.text$mn:0000979A                 mov     ecx, [ebp+var_4]
.text$mn:0000979D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000097A2
.text$mn:000097A2 loc_97A2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:000097A2                 mov     ecx, [ebp+arg_0]
.text$mn:000097A5                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000097AA                 sub     eax, [ebp+arg_4]
.text$mn:000097AD                 mov     [ebp+var_8], eax
.text$mn:000097B0                 mov     eax, [ebp+var_8]
.text$mn:000097B3                 cmp     eax, [ebp+Size]
.text$mn:000097B6                 jnb     short loc_97BE
.text$mn:000097B8                 mov     ecx, [ebp+var_8]
.text$mn:000097BB                 mov     [ebp+Size], ecx
.text$mn:000097BE
.text$mn:000097BE loc_97BE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:000097BE                 mov     edx, [ebp+var_4]
.text$mn:000097C1                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:000097C6                 sub     eax, [edx+14h]
.text$mn:000097C9                 cmp     eax, [ebp+Size]
.text$mn:000097CC                 ja      short loc_97D6
.text$mn:000097CE                 mov     ecx, [ebp+var_4]
.text$mn:000097D1                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:000097D6
.text$mn:000097D6 loc_97D6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+48j
.text$mn:000097D6                 cmp     [ebp+Size], 0
.text$mn:000097DA                 jbe     short loc_9830
.text$mn:000097DC                 mov     ecx, [ebp+var_4]
.text$mn:000097DF                 mov     edx, [ecx+14h]
.text$mn:000097E2                 add     edx, [ebp+Size]
.text$mn:000097E5                 mov     [ebp+var_8], edx
.text$mn:000097E8                 push    0
.text$mn:000097EA                 mov     eax, [ebp+var_8]
.text$mn:000097ED                 push    eax
.text$mn:000097EE                 mov     ecx, [ebp+var_4]
.text$mn:000097F1                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000097F6                 movzx   ecx, al
.text$mn:000097F9                 test    ecx, ecx
.text$mn:000097FB                 jz      short loc_9830
.text$mn:000097FD                 mov     edx, [ebp+Size]
.text$mn:00009800                 push    edx             ; Size
.text$mn:00009801                 mov     ecx, [ebp+arg_0]
.text$mn:00009804                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009809                 add     eax, [ebp+arg_4]
.text$mn:0000980C                 push    eax             ; Src
.text$mn:0000980D                 mov     ecx, [ebp+var_4]
.text$mn:00009810                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009815                 mov     ecx, [ebp+var_4]
.text$mn:00009818                 add     eax, [ecx+14h]
.text$mn:0000981B                 push    eax             ; Dst
.text$mn:0000981C                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009821                 add     esp, 0Ch
.text$mn:00009824                 mov     edx, [ebp+var_8]
.text$mn:00009827                 push    edx
.text$mn:00009828                 mov     ecx, [ebp+var_4]
.text$mn:0000982B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009830
.text$mn:00009830 loc_9830:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+56j
.text$mn:00009830                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+77j
.text$mn:00009830                 mov     eax, [ebp+var_4]
.text$mn:00009833                 mov     esp, ebp
.text$mn:00009835                 pop     ebp
.text$mn:00009836                 retn    0Ch
.text$mn:00009836 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009836
.text$mn:00009836 ; ---------------------------------------------------------------------------
.text$mn:00009839                 align 4
.text$mn:00009839 _text$mn        ends
.text$mn:00009839
.text$mn:0000983C ; ===========================================================================
.text$mn:0000983C
.text$mn:0000983C ; Segment type: Pure code
.text$mn:0000983C ; Segment permissions: Read/Execute
.text$mn:0000983C _text$mn        segment para public 'CODE' use32
.text$mn:0000983C                 assume cs:_text$mn
.text$mn:0000983C                 ;org 983Ch
.text$mn:0000983C ; COMDAT (pick any)
.text$mn:0000983C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000983C
.text$mn:0000983C ; =============== S U B R O U T I N E =======================================
.text$mn:0000983C
.text$mn:0000983C ; Attributes: bp-based frame
.text$mn:0000983C
.text$mn:0000983C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char *Str)
.text$mn:0000983C                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:0000983C ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:0000983C                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+4Dp
.text$mn:0000983C
.text$mn:0000983C var_4           = dword ptr -4
.text$mn:0000983C Str             = dword ptr  8
.text$mn:0000983C
.text$mn:0000983C                 push    ebp
.text$mn:0000983D                 mov     ebp, esp
.text$mn:0000983F                 push    ecx
.text$mn:00009840                 mov     [ebp+var_4], ecx
.text$mn:00009843                 push    43Eh            ; unsigned int
.text$mn:00009848                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000984D                 mov     eax, [ebp+Str]
.text$mn:00009850                 push    eax             ; int
.text$mn:00009851                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009856                 add     esp, 0Ch
.text$mn:00009859                 mov     ecx, [ebp+Str]
.text$mn:0000985C                 push    ecx             ; Str
.text$mn:0000985D                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00009862                 add     esp, 4
.text$mn:00009865                 push    eax             ; Size
.text$mn:00009866                 mov     edx, [ebp+Str]
.text$mn:00009869                 push    edx             ; Src
.text$mn:0000986A                 mov     ecx, [ebp+var_4]
.text$mn:0000986D                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:00009872                 mov     esp, ebp
.text$mn:00009874                 pop     ebp
.text$mn:00009875                 retn    4
.text$mn:00009875 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00009875
.text$mn:00009875 _text$mn        ends
.text$mn:00009875
.text$mn:00009878 ; ===========================================================================
.text$mn:00009878
.text$mn:00009878 ; Segment type: Pure code
.text$mn:00009878 ; Segment permissions: Read/Execute
.text$mn:00009878 _text$mn        segment para public 'CODE' use32
.text$mn:00009878                 assume cs:_text$mn
.text$mn:00009878                 ;org 9878h
.text$mn:00009878 ; COMDAT (pick any)
.text$mn:00009878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009878
.text$mn:00009878 ; =============== S U B R O U T I N E =======================================
.text$mn:00009878
.text$mn:00009878 ; Attributes: bp-based frame
.text$mn:00009878
.text$mn:00009878 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(void *Src, size_t Size)
.text$mn:00009878                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00009878 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00009878                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+31p
.text$mn:00009878
.text$mn:00009878 var_8           = dword ptr -8
.text$mn:00009878 var_4           = dword ptr -4
.text$mn:00009878 Src             = dword ptr  8
.text$mn:00009878 Size            = dword ptr  0Ch
.text$mn:00009878
.text$mn:00009878                 push    ebp
.text$mn:00009879                 mov     ebp, esp
.text$mn:0000987B                 sub     esp, 8
.text$mn:0000987E                 mov     [ebp+var_4], ecx
.text$mn:00009881                 cmp     [ebp+Size], 0
.text$mn:00009885                 jz      short loc_989D
.text$mn:00009887                 push    42Ah            ; unsigned int
.text$mn:0000988C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009891                 mov     eax, [ebp+Src]
.text$mn:00009894                 push    eax             ; int
.text$mn:00009895                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000989A                 add     esp, 0Ch
.text$mn:0000989D
.text$mn:0000989D loc_989D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+Dj
.text$mn:0000989D                 mov     ecx, [ebp+Src]
.text$mn:000098A0                 push    ecx
.text$mn:000098A1                 mov     ecx, [ebp+var_4]
.text$mn:000098A4                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:000098A9                 movzx   edx, al
.text$mn:000098AC                 test    edx, edx
.text$mn:000098AE                 jz      short loc_98D0
.text$mn:000098B0                 mov     eax, [ebp+Size]
.text$mn:000098B3                 push    eax             ; Size
.text$mn:000098B4                 mov     ecx, [ebp+var_4]
.text$mn:000098B7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000098BC                 mov     ecx, [ebp+Src]
.text$mn:000098BF                 sub     ecx, eax
.text$mn:000098C1                 push    ecx             ; int
.text$mn:000098C2                 mov     edx, [ebp+var_4]
.text$mn:000098C5                 push    edx             ; int
.text$mn:000098C6                 mov     ecx, [ebp+var_4]
.text$mn:000098C9                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:000098CE                 jmp     short loc_993E
.text$mn:000098D0 ; ---------------------------------------------------------------------------
.text$mn:000098D0
.text$mn:000098D0 loc_98D0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+36j
.text$mn:000098D0                 mov     eax, [ebp+var_4]
.text$mn:000098D3                 mov     ecx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:000098D9                 sub     ecx, [eax+14h]
.text$mn:000098DC                 cmp     ecx, [ebp+Size]
.text$mn:000098DF                 ja      short loc_98E9
.text$mn:000098E1                 mov     ecx, [ebp+var_4]
.text$mn:000098E4                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:000098E9
.text$mn:000098E9 loc_98E9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+67j
.text$mn:000098E9                 cmp     [ebp+Size], 0
.text$mn:000098ED                 jbe     short loc_993B
.text$mn:000098EF                 mov     edx, [ebp+var_4]
.text$mn:000098F2                 mov     eax, [edx+14h]
.text$mn:000098F5                 add     eax, [ebp+Size]
.text$mn:000098F8                 mov     [ebp+var_8], eax
.text$mn:000098FB                 push    0
.text$mn:000098FD                 mov     ecx, [ebp+var_8]
.text$mn:00009900                 push    ecx
.text$mn:00009901                 mov     ecx, [ebp+var_4]
.text$mn:00009904                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00009909                 movzx   edx, al
.text$mn:0000990C                 test    edx, edx
.text$mn:0000990E                 jz      short loc_993B
.text$mn:00009910                 mov     eax, [ebp+Size]
.text$mn:00009913                 push    eax             ; Size
.text$mn:00009914                 mov     ecx, [ebp+Src]
.text$mn:00009917                 push    ecx             ; Src
.text$mn:00009918                 mov     ecx, [ebp+var_4]
.text$mn:0000991B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009920                 mov     edx, [ebp+var_4]
.text$mn:00009923                 add     eax, [edx+14h]
.text$mn:00009926                 push    eax             ; Dst
.text$mn:00009927                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000992C                 add     esp, 0Ch
.text$mn:0000992F                 mov     eax, [ebp+var_8]
.text$mn:00009932                 push    eax
.text$mn:00009933                 mov     ecx, [ebp+var_4]
.text$mn:00009936                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000993B
.text$mn:0000993B loc_993B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+75j
.text$mn:0000993B                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+96j
.text$mn:0000993B                 mov     eax, [ebp+var_4]
.text$mn:0000993E
.text$mn:0000993E loc_993E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+56j
.text$mn:0000993E                 mov     esp, ebp
.text$mn:00009940                 pop     ebp
.text$mn:00009941                 retn    8
.text$mn:00009941 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00009941
.text$mn:00009941 _text$mn        ends
.text$mn:00009941
.text$mn:00009944 ; ===========================================================================
.text$mn:00009944
.text$mn:00009944 ; Segment type: Pure code
.text$mn:00009944 ; Segment permissions: Read/Execute
.text$mn:00009944 _text$mn        segment para public 'CODE' use32
.text$mn:00009944                 assume cs:_text$mn
.text$mn:00009944                 ;org 9944h
.text$mn:00009944 ; COMDAT (pick any)
.text$mn:00009944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009944
.text$mn:00009944 ; =============== S U B R O U T I N E =======================================
.text$mn:00009944
.text$mn:00009944 ; Attributes: bp-based frame
.text$mn:00009944
.text$mn:00009944 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00009944                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00009944 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00009944                                         ; CODE XREF: operator<<(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,TiXmlNode const &)+78p
.text$mn:00009944
.text$mn:00009944 var_4           = dword ptr -4
.text$mn:00009944 arg_0           = dword ptr  8
.text$mn:00009944
.text$mn:00009944                 push    ebp
.text$mn:00009945                 mov     ebp, esp
.text$mn:00009947                 push    ecx
.text$mn:00009948                 mov     [ebp+var_4], ecx
.text$mn:0000994B                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009950                 push    eax
.text$mn:00009951                 push    0
.text$mn:00009953                 mov     ecx, [ebp+arg_0]
.text$mn:00009956                 push    ecx
.text$mn:00009957                 mov     ecx, [ebp+var_4]
.text$mn:0000995A                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000995F                 mov     esp, ebp
.text$mn:00009961                 pop     ebp
.text$mn:00009962                 retn    4
.text$mn:00009962 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00009962
.text$mn:00009962 ; ---------------------------------------------------------------------------
.text$mn:00009965                 align 4
.text$mn:00009965 _text$mn        ends
.text$mn:00009965
.text$mn:00009968 ; ===========================================================================
.text$mn:00009968
.text$mn:00009968 ; Segment type: Pure code
.text$mn:00009968 ; Segment permissions: Read/Execute
.text$mn:00009968 _text$mn        segment para public 'CODE' use32
.text$mn:00009968                 assume cs:_text$mn
.text$mn:00009968                 ;org 9968h
.text$mn:00009968 ; COMDAT (pick any)
.text$mn:00009968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009968
.text$mn:00009968 ; =============== S U B R O U T I N E =======================================
.text$mn:00009968
.text$mn:00009968 ; Attributes: bp-based frame
.text$mn:00009968
.text$mn:00009968 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00009968                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009968 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009968                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:00009968                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00009968
.text$mn:00009968 var_8           = dword ptr -8
.text$mn:00009968 var_4           = dword ptr -4
.text$mn:00009968 arg_0           = dword ptr  8
.text$mn:00009968 arg_4           = dword ptr  0Ch
.text$mn:00009968 arg_8           = dword ptr  10h
.text$mn:00009968
.text$mn:00009968                 push    ebp
.text$mn:00009969                 mov     ebp, esp
.text$mn:0000996B                 sub     esp, 8
.text$mn:0000996E                 mov     [ebp+var_4], ecx
.text$mn:00009971                 mov     ecx, [ebp+arg_0]
.text$mn:00009974                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009979                 cmp     eax, [ebp+arg_4]
.text$mn:0000997C                 jnb     short loc_9986
.text$mn:0000997E                 mov     ecx, [ebp+var_4]
.text$mn:00009981                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009986
.text$mn:00009986 loc_9986:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00009986                 mov     ecx, [ebp+arg_0]
.text$mn:00009989                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000998E                 sub     eax, [ebp+arg_4]
.text$mn:00009991                 mov     [ebp+var_8], eax
.text$mn:00009994                 mov     eax, [ebp+var_8]
.text$mn:00009997                 cmp     eax, [ebp+arg_8]
.text$mn:0000999A                 jnb     short loc_99A2
.text$mn:0000999C                 mov     ecx, [ebp+var_8]
.text$mn:0000999F                 mov     [ebp+arg_8], ecx
.text$mn:000099A2
.text$mn:000099A2 loc_99A2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:000099A2                 mov     edx, [ebp+var_4]
.text$mn:000099A5                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000099AA                 sub     eax, [edx+14h]
.text$mn:000099AD                 cmp     eax, [ebp+arg_8]
.text$mn:000099B0                 ja      short loc_99BA
.text$mn:000099B2                 mov     ecx, [ebp+var_4]
.text$mn:000099B5                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000099BA
.text$mn:000099BA loc_99BA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:000099BA                 cmp     [ebp+arg_8], 0
.text$mn:000099BE                 jbe     short loc_9A1A
.text$mn:000099C0                 mov     ecx, [ebp+var_4]
.text$mn:000099C3                 mov     edx, [ecx+14h]
.text$mn:000099C6                 add     edx, [ebp+arg_8]
.text$mn:000099C9                 mov     [ebp+var_8], edx
.text$mn:000099CC                 push    0
.text$mn:000099CE                 mov     eax, [ebp+var_8]
.text$mn:000099D1                 push    eax
.text$mn:000099D2                 mov     ecx, [ebp+var_4]
.text$mn:000099D5                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000099DA                 movzx   ecx, al
.text$mn:000099DD                 test    ecx, ecx
.text$mn:000099DF                 jz      short loc_9A1A
.text$mn:000099E1                 mov     edx, [ebp+arg_8]
.text$mn:000099E4                 push    edx             ; int
.text$mn:000099E5                 mov     ecx, [ebp+arg_0]
.text$mn:000099E8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000099ED                 mov     ecx, [ebp+arg_4]
.text$mn:000099F0                 lea     edx, [eax+ecx*2]
.text$mn:000099F3                 push    edx             ; Src
.text$mn:000099F4                 mov     ecx, [ebp+var_4]
.text$mn:000099F7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000099FC                 mov     ecx, [ebp+var_4]
.text$mn:000099FF                 mov     edx, [ecx+14h]
.text$mn:00009A02                 lea     eax, [eax+edx*2]
.text$mn:00009A05                 push    eax             ; Dst
.text$mn:00009A06                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009A0B                 add     esp, 0Ch
.text$mn:00009A0E                 mov     ecx, [ebp+var_8]
.text$mn:00009A11                 push    ecx
.text$mn:00009A12                 mov     ecx, [ebp+var_4]
.text$mn:00009A15                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009A1A
.text$mn:00009A1A loc_9A1A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:00009A1A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:00009A1A                 mov     eax, [ebp+var_4]
.text$mn:00009A1D                 mov     esp, ebp
.text$mn:00009A1F                 pop     ebp
.text$mn:00009A20                 retn    0Ch
.text$mn:00009A20 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009A20
.text$mn:00009A20 ; ---------------------------------------------------------------------------
.text$mn:00009A23                 align 4
.text$mn:00009A23 _text$mn        ends
.text$mn:00009A23
.text$mn:00009A24 ; ===========================================================================
.text$mn:00009A24
.text$mn:00009A24 ; Segment type: Pure code
.text$mn:00009A24 ; Segment permissions: Read/Execute
.text$mn:00009A24 _text$mn        segment para public 'CODE' use32
.text$mn:00009A24                 assume cs:_text$mn
.text$mn:00009A24                 ;org 9A24h
.text$mn:00009A24 ; COMDAT (pick any)
.text$mn:00009A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A24
.text$mn:00009A24 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A24
.text$mn:00009A24 ; Attributes: bp-based frame
.text$mn:00009A24
.text$mn:00009A24 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00009A24                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00009A24 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00009A24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00009A24
.text$mn:00009A24 var_4           = dword ptr -4
.text$mn:00009A24 Str             = dword ptr  8
.text$mn:00009A24
.text$mn:00009A24                 push    ebp
.text$mn:00009A25                 mov     ebp, esp
.text$mn:00009A27                 push    ecx
.text$mn:00009A28                 mov     [ebp+var_4], ecx
.text$mn:00009A2B                 push    43Eh            ; unsigned int
.text$mn:00009A30                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009A35                 mov     eax, [ebp+Str]
.text$mn:00009A38                 push    eax             ; int
.text$mn:00009A39                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009A3E                 add     esp, 0Ch
.text$mn:00009A41                 mov     ecx, [ebp+Str]
.text$mn:00009A44                 push    ecx             ; Str
.text$mn:00009A45                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00009A4A                 add     esp, 4
.text$mn:00009A4D                 push    eax             ; int
.text$mn:00009A4E                 mov     edx, [ebp+Str]
.text$mn:00009A51                 push    edx             ; Src
.text$mn:00009A52                 mov     ecx, [ebp+var_4]
.text$mn:00009A55                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00009A5A                 mov     esp, ebp
.text$mn:00009A5C                 pop     ebp
.text$mn:00009A5D                 retn    4
.text$mn:00009A5D ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00009A5D
.text$mn:00009A5D _text$mn        ends
.text$mn:00009A5D
.text$mn:00009A60 ; ===========================================================================
.text$mn:00009A60
.text$mn:00009A60 ; Segment type: Pure code
.text$mn:00009A60 ; Segment permissions: Read/Execute
.text$mn:00009A60 _text$mn        segment para public 'CODE' use32
.text$mn:00009A60                 assume cs:_text$mn
.text$mn:00009A60                 ;org 9A60h
.text$mn:00009A60 ; COMDAT (pick any)
.text$mn:00009A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A60
.text$mn:00009A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A60
.text$mn:00009A60 ; Attributes: bp-based frame
.text$mn:00009A60
.text$mn:00009A60 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:00009A60                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00009A60 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00009A60                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+A3p
.text$mn:00009A60                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+F5p ...
.text$mn:00009A60
.text$mn:00009A60 var_8           = dword ptr -8
.text$mn:00009A60 var_4           = dword ptr -4
.text$mn:00009A60 Src             = dword ptr  8
.text$mn:00009A60 arg_4           = dword ptr  0Ch
.text$mn:00009A60
.text$mn:00009A60                 push    ebp
.text$mn:00009A61                 mov     ebp, esp
.text$mn:00009A63                 sub     esp, 8
.text$mn:00009A66                 mov     [ebp+var_4], ecx
.text$mn:00009A69                 cmp     [ebp+arg_4], 0
.text$mn:00009A6D                 jz      short loc_9A85
.text$mn:00009A6F                 push    42Ah            ; unsigned int
.text$mn:00009A74                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009A79                 mov     eax, [ebp+Src]
.text$mn:00009A7C                 push    eax             ; int
.text$mn:00009A7D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009A82                 add     esp, 0Ch
.text$mn:00009A85
.text$mn:00009A85 loc_9A85:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00009A85                 mov     ecx, [ebp+Src]
.text$mn:00009A88                 push    ecx
.text$mn:00009A89                 mov     ecx, [ebp+var_4]
.text$mn:00009A8C                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00009A91                 movzx   edx, al
.text$mn:00009A94                 test    edx, edx
.text$mn:00009A96                 jz      short loc_9ABA
.text$mn:00009A98                 mov     eax, [ebp+arg_4]
.text$mn:00009A9B                 push    eax
.text$mn:00009A9C                 mov     ecx, [ebp+var_4]
.text$mn:00009A9F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009AA4                 mov     ecx, [ebp+Src]
.text$mn:00009AA7                 sub     ecx, eax
.text$mn:00009AA9                 sar     ecx, 1
.text$mn:00009AAB                 push    ecx
.text$mn:00009AAC                 mov     edx, [ebp+var_4]
.text$mn:00009AAF                 push    edx
.text$mn:00009AB0                 mov     ecx, [ebp+var_4]
.text$mn:00009AB3                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009AB8                 jmp     short loc_9B2B
.text$mn:00009ABA ; ---------------------------------------------------------------------------
.text$mn:00009ABA
.text$mn:00009ABA loc_9ABA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:00009ABA                 mov     eax, [ebp+var_4]
.text$mn:00009ABD                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009AC3                 sub     ecx, [eax+14h]
.text$mn:00009AC6                 cmp     ecx, [ebp+arg_4]
.text$mn:00009AC9                 ja      short loc_9AD3
.text$mn:00009ACB                 mov     ecx, [ebp+var_4]
.text$mn:00009ACE                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00009AD3
.text$mn:00009AD3 loc_9AD3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:00009AD3                 cmp     [ebp+arg_4], 0
.text$mn:00009AD7                 jbe     short loc_9B28
.text$mn:00009AD9                 mov     edx, [ebp+var_4]
.text$mn:00009ADC                 mov     eax, [edx+14h]
.text$mn:00009ADF                 add     eax, [ebp+arg_4]
.text$mn:00009AE2                 mov     [ebp+var_8], eax
.text$mn:00009AE5                 push    0
.text$mn:00009AE7                 mov     ecx, [ebp+var_8]
.text$mn:00009AEA                 push    ecx
.text$mn:00009AEB                 mov     ecx, [ebp+var_4]
.text$mn:00009AEE                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009AF3                 movzx   edx, al
.text$mn:00009AF6                 test    edx, edx
.text$mn:00009AF8                 jz      short loc_9B28
.text$mn:00009AFA                 mov     eax, [ebp+arg_4]
.text$mn:00009AFD                 push    eax             ; int
.text$mn:00009AFE                 mov     ecx, [ebp+Src]
.text$mn:00009B01                 push    ecx             ; Src
.text$mn:00009B02                 mov     ecx, [ebp+var_4]
.text$mn:00009B05                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009B0A                 mov     edx, [ebp+var_4]
.text$mn:00009B0D                 mov     ecx, [edx+14h]
.text$mn:00009B10                 lea     edx, [eax+ecx*2]
.text$mn:00009B13                 push    edx             ; Dst
.text$mn:00009B14                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009B19                 add     esp, 0Ch
.text$mn:00009B1C                 mov     eax, [ebp+var_8]
.text$mn:00009B1F                 push    eax
.text$mn:00009B20                 mov     ecx, [ebp+var_4]
.text$mn:00009B23                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009B28
.text$mn:00009B28 loc_9B28:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00009B28                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00009B28                 mov     eax, [ebp+var_4]
.text$mn:00009B2B
.text$mn:00009B2B loc_9B2B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00009B2B                 mov     esp, ebp
.text$mn:00009B2D                 pop     ebp
.text$mn:00009B2E                 retn    8
.text$mn:00009B2E ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00009B2E
.text$mn:00009B2E ; ---------------------------------------------------------------------------
.text$mn:00009B31                 align 4
.text$mn:00009B31 _text$mn        ends
.text$mn:00009B31
.text$mn:00009B34 ; ===========================================================================
.text$mn:00009B34
.text$mn:00009B34 ; Segment type: Pure code
.text$mn:00009B34 ; Segment permissions: Read/Execute
.text$mn:00009B34 _text$mn        segment para public 'CODE' use32
.text$mn:00009B34                 assume cs:_text$mn
.text$mn:00009B34                 ;org 9B34h
.text$mn:00009B34 ; COMDAT (pick any)
.text$mn:00009B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B34
.text$mn:00009B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B34
.text$mn:00009B34 ; Attributes: bp-based frame
.text$mn:00009B34
.text$mn:00009B34 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00009B34                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009B34 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009B34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+6Bp
.text$mn:00009B34                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00009B34
.text$mn:00009B34 Size            = dword ptr -8
.text$mn:00009B34 var_4           = dword ptr -4
.text$mn:00009B34 arg_0           = dword ptr  8
.text$mn:00009B34 arg_4           = dword ptr  0Ch
.text$mn:00009B34 arg_8           = dword ptr  10h
.text$mn:00009B34
.text$mn:00009B34                 push    ebp
.text$mn:00009B35                 mov     ebp, esp
.text$mn:00009B37                 sub     esp, 8
.text$mn:00009B3A                 mov     [ebp+var_4], ecx
.text$mn:00009B3D                 mov     ecx, [ebp+arg_0]
.text$mn:00009B40                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00009B45                 cmp     eax, [ebp+arg_4]
.text$mn:00009B48                 jnb     short loc_9B52
.text$mn:00009B4A                 mov     ecx, [ebp+var_4]
.text$mn:00009B4D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00009B52
.text$mn:00009B52 loc_9B52:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00009B52                 mov     ecx, [ebp+arg_0]
.text$mn:00009B55                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00009B5A                 sub     eax, [ebp+arg_4]
.text$mn:00009B5D                 mov     [ebp+Size], eax
.text$mn:00009B60                 mov     eax, [ebp+arg_8]
.text$mn:00009B63                 cmp     eax, [ebp+Size]
.text$mn:00009B66                 jnb     short loc_9B6E
.text$mn:00009B68                 mov     ecx, [ebp+arg_8]
.text$mn:00009B6B                 mov     [ebp+Size], ecx
.text$mn:00009B6E
.text$mn:00009B6E loc_9B6E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00009B6E                 mov     edx, [ebp+var_4]
.text$mn:00009B71                 cmp     edx, [ebp+arg_0]
.text$mn:00009B74                 jnz     short loc_9B95
.text$mn:00009B76                 mov     eax, [ebp+arg_4]
.text$mn:00009B79                 add     eax, [ebp+Size]
.text$mn:00009B7C                 push    eax
.text$mn:00009B7D                 mov     ecx, [ebp+var_4]
.text$mn:00009B80                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00009B85                 mov     ecx, [ebp+arg_4]
.text$mn:00009B88                 push    ecx
.text$mn:00009B89                 push    0
.text$mn:00009B8B                 mov     ecx, [ebp+var_4]
.text$mn:00009B8E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00009B93                 jmp     short loc_9BD7
.text$mn:00009B95 ; ---------------------------------------------------------------------------
.text$mn:00009B95
.text$mn:00009B95 loc_9B95:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00009B95                 push    0
.text$mn:00009B97                 mov     edx, [ebp+Size]
.text$mn:00009B9A                 push    edx
.text$mn:00009B9B                 mov     ecx, [ebp+var_4]
.text$mn:00009B9E                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00009BA3                 movzx   eax, al
.text$mn:00009BA6                 test    eax, eax
.text$mn:00009BA8                 jz      short loc_9BD7
.text$mn:00009BAA                 mov     ecx, [ebp+Size]
.text$mn:00009BAD                 push    ecx             ; Size
.text$mn:00009BAE                 mov     ecx, [ebp+arg_0]
.text$mn:00009BB1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009BB6                 add     eax, [ebp+arg_4]
.text$mn:00009BB9                 push    eax             ; Src
.text$mn:00009BBA                 mov     ecx, [ebp+var_4]
.text$mn:00009BBD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009BC2                 push    eax             ; Dst
.text$mn:00009BC3                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009BC8                 add     esp, 0Ch
.text$mn:00009BCB                 mov     edx, [ebp+Size]
.text$mn:00009BCE                 push    edx
.text$mn:00009BCF                 mov     ecx, [ebp+var_4]
.text$mn:00009BD2                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009BD7
.text$mn:00009BD7 loc_9BD7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:00009BD7                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:00009BD7                 mov     eax, [ebp+var_4]
.text$mn:00009BDA                 mov     esp, ebp
.text$mn:00009BDC                 pop     ebp
.text$mn:00009BDD                 retn    0Ch
.text$mn:00009BDD ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009BDD
.text$mn:00009BDD _text$mn        ends
.text$mn:00009BDD
.text$mn:00009BE0 ; ===========================================================================
.text$mn:00009BE0
.text$mn:00009BE0 ; Segment type: Pure code
.text$mn:00009BE0 ; Segment permissions: Read/Execute
.text$mn:00009BE0 _text$mn        segment para public 'CODE' use32
.text$mn:00009BE0                 assume cs:_text$mn
.text$mn:00009BE0                 ;org 9BE0h
.text$mn:00009BE0 ; COMDAT (pick any)
.text$mn:00009BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BE0
.text$mn:00009BE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BE0
.text$mn:00009BE0 ; Attributes: bp-based frame
.text$mn:00009BE0
.text$mn:00009BE0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00009BE0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00009BE0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00009BE0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00009BE0
.text$mn:00009BE0 var_4           = dword ptr -4
.text$mn:00009BE0 Str             = dword ptr  8
.text$mn:00009BE0
.text$mn:00009BE0                 push    ebp
.text$mn:00009BE1                 mov     ebp, esp
.text$mn:00009BE3                 push    ecx
.text$mn:00009BE4                 mov     [ebp+var_4], ecx
.text$mn:00009BE7                 push    490h            ; unsigned int
.text$mn:00009BEC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009BF1                 mov     eax, [ebp+Str]
.text$mn:00009BF4                 push    eax             ; int
.text$mn:00009BF5                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009BFA                 add     esp, 0Ch
.text$mn:00009BFD                 mov     ecx, [ebp+Str]
.text$mn:00009C00                 push    ecx             ; Str
.text$mn:00009C01                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00009C06                 add     esp, 4
.text$mn:00009C09                 push    eax             ; Size
.text$mn:00009C0A                 mov     edx, [ebp+Str]
.text$mn:00009C0D                 push    edx             ; Src
.text$mn:00009C0E                 mov     ecx, [ebp+var_4]
.text$mn:00009C11                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00009C16                 mov     esp, ebp
.text$mn:00009C18                 pop     ebp
.text$mn:00009C19                 retn    4
.text$mn:00009C19 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00009C19
.text$mn:00009C19 _text$mn        ends
.text$mn:00009C19
.text$mn:00009C1C ; ===========================================================================
.text$mn:00009C1C
.text$mn:00009C1C ; Segment type: Pure code
.text$mn:00009C1C ; Segment permissions: Read/Execute
.text$mn:00009C1C _text$mn        segment para public 'CODE' use32
.text$mn:00009C1C                 assume cs:_text$mn
.text$mn:00009C1C                 ;org 9C1Ch
.text$mn:00009C1C ; COMDAT (pick any)
.text$mn:00009C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C1C
.text$mn:00009C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00009C1C
.text$mn:00009C1C ; Attributes: bp-based frame
.text$mn:00009C1C
.text$mn:00009C1C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00009C1C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00009C1C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00009C1C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00009C1C
.text$mn:00009C1C var_4           = dword ptr -4
.text$mn:00009C1C Src             = dword ptr  8
.text$mn:00009C1C Size            = dword ptr  0Ch
.text$mn:00009C1C
.text$mn:00009C1C                 push    ebp
.text$mn:00009C1D                 mov     ebp, esp
.text$mn:00009C1F                 push    ecx
.text$mn:00009C20                 mov     [ebp+var_4], ecx
.text$mn:00009C23                 cmp     [ebp+Size], 0
.text$mn:00009C27                 jz      short loc_9C3F
.text$mn:00009C29                 push    47Fh            ; unsigned int
.text$mn:00009C2E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009C33                 mov     eax, [ebp+Src]
.text$mn:00009C36                 push    eax             ; int
.text$mn:00009C37                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009C3C                 add     esp, 0Ch
.text$mn:00009C3F
.text$mn:00009C3F loc_9C3F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00009C3F                 mov     ecx, [ebp+Src]
.text$mn:00009C42                 push    ecx
.text$mn:00009C43                 mov     ecx, [ebp+var_4]
.text$mn:00009C46                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00009C4B                 movzx   edx, al
.text$mn:00009C4E                 test    edx, edx
.text$mn:00009C50                 jz      short loc_9C72
.text$mn:00009C52                 mov     eax, [ebp+Size]
.text$mn:00009C55                 push    eax
.text$mn:00009C56                 mov     ecx, [ebp+var_4]
.text$mn:00009C59                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009C5E                 mov     ecx, [ebp+Src]
.text$mn:00009C61                 sub     ecx, eax
.text$mn:00009C63                 push    ecx
.text$mn:00009C64                 mov     edx, [ebp+var_4]
.text$mn:00009C67                 push    edx
.text$mn:00009C68                 mov     ecx, [ebp+var_4]
.text$mn:00009C6B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00009C70                 jmp     short loc_9CAF
.text$mn:00009C72 ; ---------------------------------------------------------------------------
.text$mn:00009C72
.text$mn:00009C72 loc_9C72:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00009C72                 push    0
.text$mn:00009C74                 mov     eax, [ebp+Size]
.text$mn:00009C77                 push    eax
.text$mn:00009C78                 mov     ecx, [ebp+var_4]
.text$mn:00009C7B                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00009C80                 movzx   ecx, al
.text$mn:00009C83                 test    ecx, ecx
.text$mn:00009C85                 jz      short loc_9CAC
.text$mn:00009C87                 mov     edx, [ebp+Size]
.text$mn:00009C8A                 push    edx             ; Size
.text$mn:00009C8B                 mov     eax, [ebp+Src]
.text$mn:00009C8E                 push    eax             ; Src
.text$mn:00009C8F                 mov     ecx, [ebp+var_4]
.text$mn:00009C92                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009C97                 push    eax             ; Dst
.text$mn:00009C98                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009C9D                 add     esp, 0Ch
.text$mn:00009CA0                 mov     ecx, [ebp+Size]
.text$mn:00009CA3                 push    ecx
.text$mn:00009CA4                 mov     ecx, [ebp+var_4]
.text$mn:00009CA7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009CAC
.text$mn:00009CAC loc_9CAC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00009CAC                 mov     eax, [ebp+var_4]
.text$mn:00009CAF
.text$mn:00009CAF loc_9CAF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00009CAF                 mov     esp, ebp
.text$mn:00009CB1                 pop     ebp
.text$mn:00009CB2                 retn    8
.text$mn:00009CB2 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00009CB2
.text$mn:00009CB2 ; ---------------------------------------------------------------------------
.text$mn:00009CB5                 align 4
.text$mn:00009CB5 _text$mn        ends
.text$mn:00009CB5
.text$mn:00009CB8 ; ===========================================================================
.text$mn:00009CB8
.text$mn:00009CB8 ; Segment type: Pure code
.text$mn:00009CB8 ; Segment permissions: Read/Execute
.text$mn:00009CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00009CB8                 assume cs:_text$mn
.text$mn:00009CB8                 ;org 9CB8h
.text$mn:00009CB8 ; COMDAT (pick any)
.text$mn:00009CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CB8
.text$mn:00009CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CB8
.text$mn:00009CB8 ; Attributes: bp-based frame
.text$mn:00009CB8
.text$mn:00009CB8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00009CB8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00009CB8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00009CB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:00009CB8
.text$mn:00009CB8 var_4           = dword ptr -4
.text$mn:00009CB8 arg_0           = dword ptr  8
.text$mn:00009CB8
.text$mn:00009CB8                 push    ebp
.text$mn:00009CB9                 mov     ebp, esp
.text$mn:00009CBB                 push    ecx
.text$mn:00009CBC                 mov     [ebp+var_4], ecx
.text$mn:00009CBF                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009CC4                 push    eax
.text$mn:00009CC5                 push    0
.text$mn:00009CC7                 mov     ecx, [ebp+arg_0]
.text$mn:00009CCA                 push    ecx
.text$mn:00009CCB                 mov     ecx, [ebp+var_4]
.text$mn:00009CCE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009CD3                 mov     esp, ebp
.text$mn:00009CD5                 pop     ebp
.text$mn:00009CD6                 retn    4
.text$mn:00009CD6 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00009CD6
.text$mn:00009CD6 ; ---------------------------------------------------------------------------
.text$mn:00009CD9                 align 4
.text$mn:00009CD9 _text$mn        ends
.text$mn:00009CD9
.text$mn:00009CDC ; ===========================================================================
.text$mn:00009CDC
.text$mn:00009CDC ; Segment type: Pure code
.text$mn:00009CDC ; Segment permissions: Read/Execute
.text$mn:00009CDC _text$mn        segment para public 'CODE' use32
.text$mn:00009CDC                 assume cs:_text$mn
.text$mn:00009CDC                 ;org 9CDCh
.text$mn:00009CDC ; COMDAT (pick any)
.text$mn:00009CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CDC
.text$mn:00009CDC ; =============== S U B R O U T I N E =======================================
.text$mn:00009CDC
.text$mn:00009CDC ; Attributes: bp-based frame
.text$mn:00009CDC
.text$mn:00009CDC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00009CDC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009CDC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009CDC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00009CDC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:00009CDC
.text$mn:00009CDC var_8           = dword ptr -8
.text$mn:00009CDC var_4           = dword ptr -4
.text$mn:00009CDC arg_0           = dword ptr  8
.text$mn:00009CDC arg_4           = dword ptr  0Ch
.text$mn:00009CDC arg_8           = dword ptr  10h
.text$mn:00009CDC
.text$mn:00009CDC                 push    ebp
.text$mn:00009CDD                 mov     ebp, esp
.text$mn:00009CDF                 sub     esp, 8
.text$mn:00009CE2                 mov     [ebp+var_4], ecx
.text$mn:00009CE5                 mov     ecx, [ebp+arg_0]
.text$mn:00009CE8                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009CED                 cmp     eax, [ebp+arg_4]
.text$mn:00009CF0                 jnb     short loc_9CFA
.text$mn:00009CF2                 mov     ecx, [ebp+var_4]
.text$mn:00009CF5                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009CFA
.text$mn:00009CFA loc_9CFA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00009CFA                 mov     ecx, [ebp+arg_0]
.text$mn:00009CFD                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009D02                 sub     eax, [ebp+arg_4]
.text$mn:00009D05                 mov     [ebp+var_8], eax
.text$mn:00009D08                 mov     eax, [ebp+arg_8]
.text$mn:00009D0B                 cmp     eax, [ebp+var_8]
.text$mn:00009D0E                 jnb     short loc_9D16
.text$mn:00009D10                 mov     ecx, [ebp+arg_8]
.text$mn:00009D13                 mov     [ebp+var_8], ecx
.text$mn:00009D16
.text$mn:00009D16 loc_9D16:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00009D16                 mov     edx, [ebp+var_4]
.text$mn:00009D19                 cmp     edx, [ebp+arg_0]
.text$mn:00009D1C                 jnz     short loc_9D3D
.text$mn:00009D1E                 mov     eax, [ebp+arg_4]
.text$mn:00009D21                 add     eax, [ebp+var_8]
.text$mn:00009D24                 push    eax
.text$mn:00009D25                 mov     ecx, [ebp+var_4]
.text$mn:00009D28                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00009D2D                 mov     ecx, [ebp+arg_4]
.text$mn:00009D30                 push    ecx
.text$mn:00009D31                 push    0
.text$mn:00009D33                 mov     ecx, [ebp+var_4]
.text$mn:00009D36                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00009D3B                 jmp     short loc_9D82
.text$mn:00009D3D ; ---------------------------------------------------------------------------
.text$mn:00009D3D
.text$mn:00009D3D loc_9D3D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00009D3D                 push    0
.text$mn:00009D3F                 mov     edx, [ebp+var_8]
.text$mn:00009D42                 push    edx
.text$mn:00009D43                 mov     ecx, [ebp+var_4]
.text$mn:00009D46                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009D4B                 movzx   eax, al
.text$mn:00009D4E                 test    eax, eax
.text$mn:00009D50                 jz      short loc_9D82
.text$mn:00009D52                 mov     ecx, [ebp+var_8]
.text$mn:00009D55                 push    ecx             ; int
.text$mn:00009D56                 mov     ecx, [ebp+arg_0]
.text$mn:00009D59                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009D5E                 mov     edx, [ebp+arg_4]
.text$mn:00009D61                 lea     eax, [eax+edx*2]
.text$mn:00009D64                 push    eax             ; Src
.text$mn:00009D65                 mov     ecx, [ebp+var_4]
.text$mn:00009D68                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009D6D                 push    eax             ; Dst
.text$mn:00009D6E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009D73                 add     esp, 0Ch
.text$mn:00009D76                 mov     ecx, [ebp+var_8]
.text$mn:00009D79                 push    ecx
.text$mn:00009D7A                 mov     ecx, [ebp+var_4]
.text$mn:00009D7D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009D82
.text$mn:00009D82 loc_9D82:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00009D82                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00009D82                 mov     eax, [ebp+var_4]
.text$mn:00009D85                 mov     esp, ebp
.text$mn:00009D87                 pop     ebp
.text$mn:00009D88                 retn    0Ch
.text$mn:00009D88 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009D88
.text$mn:00009D88 ; ---------------------------------------------------------------------------
.text$mn:00009D8B                 align 4
.text$mn:00009D8B _text$mn        ends
.text$mn:00009D8B
.text$mn:00009D8C ; ===========================================================================
.text$mn:00009D8C
.text$mn:00009D8C ; Segment type: Pure code
.text$mn:00009D8C ; Segment permissions: Read/Execute
.text$mn:00009D8C _text$mn        segment para public 'CODE' use32
.text$mn:00009D8C                 assume cs:_text$mn
.text$mn:00009D8C                 ;org 9D8Ch
.text$mn:00009D8C ; COMDAT (pick any)
.text$mn:00009D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D8C
.text$mn:00009D8C ; =============== S U B R O U T I N E =======================================
.text$mn:00009D8C
.text$mn:00009D8C ; Attributes: bp-based frame
.text$mn:00009D8C
.text$mn:00009D8C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00009D8C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00009D8C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00009D8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00009D8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00009D8C
.text$mn:00009D8C var_4           = dword ptr -4
.text$mn:00009D8C Str             = dword ptr  8
.text$mn:00009D8C
.text$mn:00009D8C                 push    ebp
.text$mn:00009D8D                 mov     ebp, esp
.text$mn:00009D8F                 push    ecx
.text$mn:00009D90                 mov     [ebp+var_4], ecx
.text$mn:00009D93                 push    490h            ; unsigned int
.text$mn:00009D98                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009D9D                 mov     eax, [ebp+Str]
.text$mn:00009DA0                 push    eax             ; int
.text$mn:00009DA1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009DA6                 add     esp, 0Ch
.text$mn:00009DA9                 mov     ecx, [ebp+Str]
.text$mn:00009DAC                 push    ecx             ; Str
.text$mn:00009DAD                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00009DB2                 add     esp, 4
.text$mn:00009DB5                 push    eax             ; int
.text$mn:00009DB6                 mov     edx, [ebp+Str]
.text$mn:00009DB9                 push    edx             ; Src
.text$mn:00009DBA                 mov     ecx, [ebp+var_4]
.text$mn:00009DBD                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00009DC2                 mov     esp, ebp
.text$mn:00009DC4                 pop     ebp
.text$mn:00009DC5                 retn    4
.text$mn:00009DC5 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00009DC5
.text$mn:00009DC5 _text$mn        ends
.text$mn:00009DC5
.text$mn:00009DC8 ; ===========================================================================
.text$mn:00009DC8
.text$mn:00009DC8 ; Segment type: Pure code
.text$mn:00009DC8 ; Segment permissions: Read/Execute
.text$mn:00009DC8 _text$mn        segment para public 'CODE' use32
.text$mn:00009DC8                 assume cs:_text$mn
.text$mn:00009DC8                 ;org 9DC8h
.text$mn:00009DC8 ; COMDAT (pick any)
.text$mn:00009DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DC8
.text$mn:00009DC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DC8
.text$mn:00009DC8 ; Attributes: bp-based frame
.text$mn:00009DC8
.text$mn:00009DC8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00009DC8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00009DC8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00009DC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *,uint)+57p
.text$mn:00009DC8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00009DC8
.text$mn:00009DC8 var_4           = dword ptr -4
.text$mn:00009DC8 Src             = dword ptr  8
.text$mn:00009DC8 arg_4           = dword ptr  0Ch
.text$mn:00009DC8
.text$mn:00009DC8                 push    ebp
.text$mn:00009DC9                 mov     ebp, esp
.text$mn:00009DCB                 push    ecx
.text$mn:00009DCC                 mov     [ebp+var_4], ecx
.text$mn:00009DCF                 cmp     [ebp+arg_4], 0
.text$mn:00009DD3                 jz      short loc_9DEB
.text$mn:00009DD5                 push    47Fh            ; unsigned int
.text$mn:00009DDA                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009DDF                 mov     eax, [ebp+Src]
.text$mn:00009DE2                 push    eax             ; int
.text$mn:00009DE3                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009DE8                 add     esp, 0Ch
.text$mn:00009DEB
.text$mn:00009DEB loc_9DEB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00009DEB                 mov     ecx, [ebp+Src]
.text$mn:00009DEE                 push    ecx
.text$mn:00009DEF                 mov     ecx, [ebp+var_4]
.text$mn:00009DF2                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00009DF7                 movzx   edx, al
.text$mn:00009DFA                 test    edx, edx
.text$mn:00009DFC                 jz      short loc_9E20
.text$mn:00009DFE                 mov     eax, [ebp+arg_4]
.text$mn:00009E01                 push    eax
.text$mn:00009E02                 mov     ecx, [ebp+var_4]
.text$mn:00009E05                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009E0A                 mov     ecx, [ebp+Src]
.text$mn:00009E0D                 sub     ecx, eax
.text$mn:00009E0F                 sar     ecx, 1
.text$mn:00009E11                 push    ecx
.text$mn:00009E12                 mov     edx, [ebp+var_4]
.text$mn:00009E15                 push    edx
.text$mn:00009E16                 mov     ecx, [ebp+var_4]
.text$mn:00009E19                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009E1E                 jmp     short loc_9E5D
.text$mn:00009E20 ; ---------------------------------------------------------------------------
.text$mn:00009E20
.text$mn:00009E20 loc_9E20:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00009E20                 push    0
.text$mn:00009E22                 mov     eax, [ebp+arg_4]
.text$mn:00009E25                 push    eax
.text$mn:00009E26                 mov     ecx, [ebp+var_4]
.text$mn:00009E29                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009E2E                 movzx   ecx, al
.text$mn:00009E31                 test    ecx, ecx
.text$mn:00009E33                 jz      short loc_9E5A
.text$mn:00009E35                 mov     edx, [ebp+arg_4]
.text$mn:00009E38                 push    edx             ; int
.text$mn:00009E39                 mov     eax, [ebp+Src]
.text$mn:00009E3C                 push    eax             ; Src
.text$mn:00009E3D                 mov     ecx, [ebp+var_4]
.text$mn:00009E40                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009E45                 push    eax             ; Dst
.text$mn:00009E46                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009E4B                 add     esp, 0Ch
.text$mn:00009E4E                 mov     ecx, [ebp+arg_4]
.text$mn:00009E51                 push    ecx
.text$mn:00009E52                 mov     ecx, [ebp+var_4]
.text$mn:00009E55                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009E5A
.text$mn:00009E5A loc_9E5A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00009E5A                 mov     eax, [ebp+var_4]
.text$mn:00009E5D
.text$mn:00009E5D loc_9E5D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00009E5D                 mov     esp, ebp
.text$mn:00009E5F                 pop     ebp
.text$mn:00009E60                 retn    8
.text$mn:00009E60 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00009E60
.text$mn:00009E60 ; ---------------------------------------------------------------------------
.text$mn:00009E63                 align 4
.text$mn:00009E63 _text$mn        ends
.text$mn:00009E63
.text$mn:00009E64 ; ===========================================================================
.text$mn:00009E64
.text$mn:00009E64 ; Segment type: Pure code
.text$mn:00009E64 ; Segment permissions: Read/Execute
.text$mn:00009E64 _text$mn        segment para public 'CODE' use32
.text$mn:00009E64                 assume cs:_text$mn
.text$mn:00009E64                 ;org 9E64h
.text$mn:00009E64 ; COMDAT (pick any)
.text$mn:00009E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E64
.text$mn:00009E64 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E64
.text$mn:00009E64 ; Attributes: bp-based frame
.text$mn:00009E64
.text$mn:00009E64 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00009E64                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00009E64 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00009E64                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00009E64
.text$mn:00009E64 arg_0           = dword ptr  8
.text$mn:00009E64 arg_4           = dword ptr  0Ch
.text$mn:00009E64
.text$mn:00009E64                 push    ebp
.text$mn:00009E65                 mov     ebp, esp
.text$mn:00009E67                 mov     eax, [ebp+arg_0]
.text$mn:00009E6A                 mov     ecx, [ebp+arg_4]
.text$mn:00009E6D                 mov     dl, [ecx]
.text$mn:00009E6F                 mov     [eax], dl
.text$mn:00009E71                 pop     ebp
.text$mn:00009E72                 retn
.text$mn:00009E72 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00009E72
.text$mn:00009E72 ; ---------------------------------------------------------------------------
.text$mn:00009E73                 align 4
.text$mn:00009E73 _text$mn        ends
.text$mn:00009E73
.text$mn:00009E74 ; ===========================================================================
.text$mn:00009E74
.text$mn:00009E74 ; Segment type: Pure code
.text$mn:00009E74 ; Segment permissions: Read/Execute
.text$mn:00009E74 _text$mn        segment para public 'CODE' use32
.text$mn:00009E74                 assume cs:_text$mn
.text$mn:00009E74                 ;org 9E74h
.text$mn:00009E74 ; COMDAT (pick any)
.text$mn:00009E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E74
.text$mn:00009E74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E74
.text$mn:00009E74 ; Attributes: bp-based frame
.text$mn:00009E74
.text$mn:00009E74 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00009E74                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00009E74 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00009E74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00009E74
.text$mn:00009E74 arg_0           = dword ptr  8
.text$mn:00009E74 arg_4           = dword ptr  0Ch
.text$mn:00009E74
.text$mn:00009E74                 push    ebp
.text$mn:00009E75                 mov     ebp, esp
.text$mn:00009E77                 mov     eax, [ebp+arg_0]
.text$mn:00009E7A                 mov     ecx, [ebp+arg_4]
.text$mn:00009E7D                 mov     dx, [ecx]
.text$mn:00009E80                 mov     [eax], dx
.text$mn:00009E83                 pop     ebp
.text$mn:00009E84                 retn
.text$mn:00009E84 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00009E84
.text$mn:00009E84 ; ---------------------------------------------------------------------------
.text$mn:00009E85                 align 4
.text$mn:00009E85 _text$mn        ends
.text$mn:00009E85
.text$mn:00009E88 ; ===========================================================================
.text$mn:00009E88
.text$mn:00009E88 ; Segment type: Pure code
.text$mn:00009E88 ; Segment permissions: Read/Execute
.text$mn:00009E88 _text$mn        segment para public 'CODE' use32
.text$mn:00009E88                 assume cs:_text$mn
.text$mn:00009E88                 ;org 9E88h
.text$mn:00009E88 ; COMDAT (pick any)
.text$mn:00009E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E88
.text$mn:00009E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E88
.text$mn:00009E88 ; Attributes: bp-based frame
.text$mn:00009E88
.text$mn:00009E88 ; public: char const * __thiscall std::_Yarn<char>::c_str(void)const
.text$mn:00009E88                 public ?c_str@?$_Yarn@D@std@@QBEPBDXZ
.text$mn:00009E88 ?c_str@?$_Yarn@D@std@@QBEPBDXZ proc near
.text$mn:00009E88                                         ; CODE XREF: std::locale::c_str(void)+22p
.text$mn:00009E88
.text$mn:00009E88 var_8           = dword ptr -8
.text$mn:00009E88 var_4           = dword ptr -4
.text$mn:00009E88
.text$mn:00009E88                 push    ebp
.text$mn:00009E89                 mov     ebp, esp
.text$mn:00009E8B                 sub     esp, 8
.text$mn:00009E8E                 mov     [ebp+var_4], ecx
.text$mn:00009E91                 mov     eax, [ebp+var_4]
.text$mn:00009E94                 cmp     dword ptr [eax], 0
.text$mn:00009E97                 jz      short loc_9EA3
.text$mn:00009E99                 mov     ecx, [ebp+var_4]
.text$mn:00009E9C                 mov     edx, [ecx]
.text$mn:00009E9E                 mov     [ebp+var_8], edx
.text$mn:00009EA1                 jmp     short loc_9EAC
.text$mn:00009EA3 ; ---------------------------------------------------------------------------
.text$mn:00009EA3
.text$mn:00009EA3 loc_9EA3:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+Fj
.text$mn:00009EA3                 mov     eax, [ebp+var_4]
.text$mn:00009EA6                 add     eax, 4
.text$mn:00009EA9                 mov     [ebp+var_8], eax
.text$mn:00009EAC
.text$mn:00009EAC loc_9EAC:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+19j
.text$mn:00009EAC                 mov     eax, [ebp+var_8]
.text$mn:00009EAF                 mov     esp, ebp
.text$mn:00009EB1                 pop     ebp
.text$mn:00009EB2                 retn
.text$mn:00009EB2 ?c_str@?$_Yarn@D@std@@QBEPBDXZ endp
.text$mn:00009EB2
.text$mn:00009EB2 ; ---------------------------------------------------------------------------
.text$mn:00009EB3                 align 4
.text$mn:00009EB3 _text$mn        ends
.text$mn:00009EB3
.text$mn:00009EB4 ; ===========================================================================
.text$mn:00009EB4
.text$mn:00009EB4 ; Segment type: Pure code
.text$mn:00009EB4 ; Segment permissions: Read/Execute
.text$mn:00009EB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009EB4                 assume cs:_text$mn
.text$mn:00009EB4                 ;org 9EB4h
.text$mn:00009EB4 ; COMDAT (pick any)
.text$mn:00009EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EB4
.text$mn:00009EB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009EB4
.text$mn:00009EB4 ; Attributes: bp-based frame
.text$mn:00009EB4
.text$mn:00009EB4 ; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
.text$mn:00009EB4                 public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
.text$mn:00009EB4 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
.text$mn:00009EB4                                         ; CODE XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+2Bp
.text$mn:00009EB4
.text$mn:00009EB4 var_4           = dword ptr -4
.text$mn:00009EB4
.text$mn:00009EB4                 push    ebp
.text$mn:00009EB5                 mov     ebp, esp
.text$mn:00009EB7                 push    ecx
.text$mn:00009EB8                 mov     [ebp+var_4], ecx
.text$mn:00009EBB                 mov     ecx, [ebp+var_4]
.text$mn:00009EBE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009EC3                 mov     esp, ebp
.text$mn:00009EC5                 pop     ebp
.text$mn:00009EC6                 retn
.text$mn:00009EC6 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp
.text$mn:00009EC6
.text$mn:00009EC6 ; ---------------------------------------------------------------------------
.text$mn:00009EC7                 align 4
.text$mn:00009EC7 _text$mn        ends
.text$mn:00009EC7
.text$mn:00009EC8 ; ===========================================================================
.text$mn:00009EC8
.text$mn:00009EC8 ; Segment type: Pure code
.text$mn:00009EC8 ; Segment permissions: Read/Execute
.text$mn:00009EC8 _text$mn        segment para public 'CODE' use32
.text$mn:00009EC8                 assume cs:_text$mn
.text$mn:00009EC8                 ;org 9EC8h
.text$mn:00009EC8 ; COMDAT (pick any)
.text$mn:00009EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EC8
.text$mn:00009EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009EC8
.text$mn:00009EC8 ; Attributes: bp-based frame
.text$mn:00009EC8
.text$mn:00009EC8 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00009EC8                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00009EC8 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00009EC8                                         ; CODE XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p
.text$mn:00009EC8                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+94p ...
.text$mn:00009EC8
.text$mn:00009EC8 var_4           = dword ptr -4
.text$mn:00009EC8
.text$mn:00009EC8                 push    ebp
.text$mn:00009EC9                 mov     ebp, esp
.text$mn:00009ECB                 push    ecx
.text$mn:00009ECC                 mov     [ebp+var_4], ecx
.text$mn:00009ECF                 mov     ecx, [ebp+var_4]
.text$mn:00009ED2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009ED7                 mov     esp, ebp
.text$mn:00009ED9                 pop     ebp
.text$mn:00009EDA                 retn
.text$mn:00009EDA ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00009EDA
.text$mn:00009EDA ; ---------------------------------------------------------------------------
.text$mn:00009EDB                 align 4
.text$mn:00009EDB _text$mn        ends
.text$mn:00009EDB
.text$mn:00009EDC ; ===========================================================================
.text$mn:00009EDC
.text$mn:00009EDC ; Segment type: Pure code
.text$mn:00009EDC ; Segment permissions: Read/Execute
.text$mn:00009EDC _text$mn        segment para public 'CODE' use32
.text$mn:00009EDC                 assume cs:_text$mn
.text$mn:00009EDC                 ;org 9EDCh
.text$mn:00009EDC ; COMDAT (pick any)
.text$mn:00009EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EDC
.text$mn:00009EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00009EDC
.text$mn:00009EDC ; Attributes: bp-based frame
.text$mn:00009EDC
.text$mn:00009EDC ; const char *__thiscall std::locale::c_str(std::locale *__hidden this)
.text$mn:00009EDC                 public ?c_str@locale@std@@QBEPBDXZ
.text$mn:00009EDC ?c_str@locale@std@@QBEPBDXZ proc near   ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+77p
.text$mn:00009EDC
.text$mn:00009EDC var_8           = dword ptr -8
.text$mn:00009EDC var_4           = dword ptr -4
.text$mn:00009EDC
.text$mn:00009EDC                 push    ebp
.text$mn:00009EDD                 mov     ebp, esp
.text$mn:00009EDF                 sub     esp, 8
.text$mn:00009EE2                 mov     [ebp+var_4], ecx
.text$mn:00009EE5                 mov     eax, [ebp+var_4]
.text$mn:00009EE8                 cmp     dword ptr [eax], 0
.text$mn:00009EEB                 jnz     short loc_9EF6
.text$mn:00009EED                 mov     [ebp+var_8], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
.text$mn:00009EF4                 jmp     short loc_9F06
.text$mn:00009EF6 ; ---------------------------------------------------------------------------
.text$mn:00009EF6
.text$mn:00009EF6 loc_9EF6:                               ; CODE XREF: std::locale::c_str(void)+Fj
.text$mn:00009EF6                 mov     ecx, [ebp+var_4]
.text$mn:00009EF9                 mov     ecx, [ecx]
.text$mn:00009EFB                 add     ecx, 18h
.text$mn:00009EFE                 call    ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str(void)
.text$mn:00009F03                 mov     [ebp+var_8], eax
.text$mn:00009F06
.text$mn:00009F06 loc_9F06:                               ; CODE XREF: std::locale::c_str(void)+18j
.text$mn:00009F06                 mov     eax, [ebp+var_8]
.text$mn:00009F09                 mov     esp, ebp
.text$mn:00009F0B                 pop     ebp
.text$mn:00009F0C                 retn
.text$mn:00009F0C ?c_str@locale@std@@QBEPBDXZ endp
.text$mn:00009F0C
.text$mn:00009F0C ; ---------------------------------------------------------------------------
.text$mn:00009F0D                 align 10h
.text$mn:00009F0D _text$mn        ends
.text$mn:00009F0D
.text$mn:00009F10 ; ===========================================================================
.text$mn:00009F10
.text$mn:00009F10 ; Segment type: Pure code
.text$mn:00009F10 ; Segment permissions: Read/Execute
.text$mn:00009F10 _text$mn        segment para public 'CODE' use32
.text$mn:00009F10                 assume cs:_text$mn
.text$mn:00009F10                 ;org 9F10h
.text$mn:00009F10 ; COMDAT (pick any)
.text$mn:00009F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F10
.text$mn:00009F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F10
.text$mn:00009F10 ; Attributes: bp-based frame
.text$mn:00009F10
.text$mn:00009F10 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00009F10                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00009F10 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00009F10                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00009F10                                         ; std::error_code::message(void)+32p
.text$mn:00009F10
.text$mn:00009F10 var_4           = dword ptr -4
.text$mn:00009F10
.text$mn:00009F10                 push    ebp
.text$mn:00009F11                 mov     ebp, esp
.text$mn:00009F13                 push    ecx
.text$mn:00009F14                 mov     [ebp+var_4], ecx
.text$mn:00009F17                 mov     eax, [ebp+var_4]
.text$mn:00009F1A                 mov     eax, [eax+4]
.text$mn:00009F1D                 mov     esp, ebp
.text$mn:00009F1F                 pop     ebp
.text$mn:00009F20                 retn
.text$mn:00009F20 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00009F20
.text$mn:00009F20 ; ---------------------------------------------------------------------------
.text$mn:00009F21                 align 4
.text$mn:00009F21 _text$mn        ends
.text$mn:00009F21
.text$mn:00009F24 ; ===========================================================================
.text$mn:00009F24
.text$mn:00009F24 ; Segment type: Pure code
.text$mn:00009F24 ; Segment permissions: Read/Execute
.text$mn:00009F24 _text$mn        segment para public 'CODE' use32
.text$mn:00009F24                 assume cs:_text$mn
.text$mn:00009F24                 ;org 9F24h
.text$mn:00009F24 ; COMDAT (pick any)
.text$mn:00009F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F24
.text$mn:00009F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F24
.text$mn:00009F24 ; Attributes: bp-based frame
.text$mn:00009F24
.text$mn:00009F24 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00009F24                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00009F24 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00009F24                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00009F24                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00009F24
.text$mn:00009F24 var_4           = dword ptr -4
.text$mn:00009F24
.text$mn:00009F24                 push    ebp
.text$mn:00009F25                 mov     ebp, esp
.text$mn:00009F27                 push    ecx
.text$mn:00009F28                 mov     [ebp+var_4], ecx
.text$mn:00009F2B                 mov     eax, [ebp+var_4]
.text$mn:00009F2E                 mov     eax, [eax+4]
.text$mn:00009F31                 mov     esp, ebp
.text$mn:00009F33                 pop     ebp
.text$mn:00009F34                 retn
.text$mn:00009F34 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00009F34
.text$mn:00009F34 ; ---------------------------------------------------------------------------
.text$mn:00009F35                 align 4
.text$mn:00009F35 _text$mn        ends
.text$mn:00009F35
.text$mn:00009F38 ; ===========================================================================
.text$mn:00009F38
.text$mn:00009F38 ; Segment type: Pure code
.text$mn:00009F38 ; Segment permissions: Read/Execute
.text$mn:00009F38 _text$mn        segment para public 'CODE' use32
.text$mn:00009F38                 assume cs:_text$mn
.text$mn:00009F38                 ;org 9F38h
.text$mn:00009F38 ; COMDAT (pick any)
.text$mn:00009F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F38
.text$mn:00009F38 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F38
.text$mn:00009F38 ; Attributes: bp-based frame
.text$mn:00009F38
.text$mn:00009F38 ; public: void __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::clear(int, bool)
.text$mn:00009F38                 public ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
.text$mn:00009F38 ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z proc near
.text$mn:00009F38                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+21p
.text$mn:00009F38
.text$mn:00009F38 var_8           = dword ptr -8
.text$mn:00009F38 var_4           = dword ptr -4
.text$mn:00009F38 arg_0           = dword ptr  8
.text$mn:00009F38 arg_4           = byte ptr  0Ch
.text$mn:00009F38
.text$mn:00009F38                 push    ebp
.text$mn:00009F39                 mov     ebp, esp
.text$mn:00009F3B                 sub     esp, 8
.text$mn:00009F3E                 mov     [ebp+var_8], ecx
.text$mn:00009F41                 mov     eax, [ebp+var_8]
.text$mn:00009F44                 cmp     dword ptr [eax+38h], 0
.text$mn:00009F48                 jnz     short loc_9F55
.text$mn:00009F4A                 mov     ecx, [ebp+arg_0]
.text$mn:00009F4D                 or      ecx, 4
.text$mn:00009F50                 mov     [ebp+var_4], ecx
.text$mn:00009F53                 jmp     short loc_9F5B
.text$mn:00009F55 ; ---------------------------------------------------------------------------
.text$mn:00009F55
.text$mn:00009F55 loc_9F55:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+10j
.text$mn:00009F55                 mov     edx, [ebp+arg_0]
.text$mn:00009F58                 mov     [ebp+var_4], edx
.text$mn:00009F5B
.text$mn:00009F5B loc_9F5B:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+1Bj
.text$mn:00009F5B                 movzx   eax, [ebp+arg_4]
.text$mn:00009F5F                 push    eax             ; bool
.text$mn:00009F60                 mov     ecx, [ebp+var_4]
.text$mn:00009F63                 push    ecx             ; int
.text$mn:00009F64                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009F67                 call    ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear(int,bool)
.text$mn:00009F6C                 mov     esp, ebp
.text$mn:00009F6E                 pop     ebp
.text$mn:00009F6F                 retn    8
.text$mn:00009F6F ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z endp
.text$mn:00009F6F
.text$mn:00009F6F ; ---------------------------------------------------------------------------
.text$mn:00009F72                 align 4
.text$mn:00009F72 _text$mn        ends
.text$mn:00009F72
.text$mn:00009F74 ; ===========================================================================
.text$mn:00009F74
.text$mn:00009F74 ; Segment type: Pure code
.text$mn:00009F74 ; Segment permissions: Read/Execute
.text$mn:00009F74 _text$mn        segment para public 'CODE' use32
.text$mn:00009F74                 assume cs:_text$mn
.text$mn:00009F74                 ;org 9F74h
.text$mn:00009F74 ; COMDAT (pick any)
.text$mn:00009F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F74
.text$mn:00009F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F74
.text$mn:00009F74 ; Attributes: bp-based frame
.text$mn:00009F74
.text$mn:00009F74 ; void __thiscall std::ios_base::clear(std::ios_base *this, int)
.text$mn:00009F74                 public ?clear@ios_base@std@@QAEXH@Z
.text$mn:00009F74 ?clear@ios_base@std@@QAEXH@Z proc near  ; CODE XREF: std::ios_base::_Init(void)+6Cp
.text$mn:00009F74
.text$mn:00009F74 var_4           = dword ptr -4
.text$mn:00009F74 arg_0           = dword ptr  8
.text$mn:00009F74
.text$mn:00009F74                 push    ebp
.text$mn:00009F75                 mov     ebp, esp
.text$mn:00009F77                 push    ecx
.text$mn:00009F78                 mov     [ebp+var_4], ecx
.text$mn:00009F7B                 push    0               ; bool
.text$mn:00009F7D                 mov     eax, [ebp+arg_0]
.text$mn:00009F80                 push    eax             ; int
.text$mn:00009F81                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009F84                 call    ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear(int,bool)
.text$mn:00009F89                 mov     esp, ebp
.text$mn:00009F8B                 pop     ebp
.text$mn:00009F8C                 retn    4
.text$mn:00009F8C ?clear@ios_base@std@@QAEXH@Z endp
.text$mn:00009F8C
.text$mn:00009F8C ; ---------------------------------------------------------------------------
.text$mn:00009F8F                 align 10h
.text$mn:00009F8F _text$mn        ends
.text$mn:00009F8F
.text$mn:00009F90 ; ===========================================================================
.text$mn:00009F90
.text$mn:00009F90 ; Segment type: Pure code
.text$mn:00009F90 ; Segment permissions: Read/Execute
.text$mn:00009F90 _text$mn        segment para public 'CODE' use32
.text$mn:00009F90                 assume cs:_text$mn
.text$mn:00009F90                 ;org 9F90h
.text$mn:00009F90 ; COMDAT (pick any)
.text$mn:00009F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F90
.text$mn:00009F90 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F90
.text$mn:00009F90 ; Attributes: bp-based frame
.text$mn:00009F90
.text$mn:00009F90 ; void __thiscall std::ios_base::clear(std::ios_base *this, int, bool)
.text$mn:00009F90                 public ?clear@ios_base@std@@QAEXH_N@Z
.text$mn:00009F90 ?clear@ios_base@std@@QAEXH_N@Z proc near
.text$mn:00009F90                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+2Fp
.text$mn:00009F90                                         ; std::ios_base::clear(int)+10p
.text$mn:00009F90
.text$mn:00009F90 var_58          = byte ptr -58h
.text$mn:00009F90 var_44          = byte ptr -44h
.text$mn:00009F90 var_30          = byte ptr -30h
.text$mn:00009F90 var_1C          = byte ptr -1Ch
.text$mn:00009F90 var_14          = byte ptr -14h
.text$mn:00009F90 var_C           = byte ptr -0Ch
.text$mn:00009F90 var_4           = dword ptr -4
.text$mn:00009F90 arg_0           = dword ptr  8
.text$mn:00009F90 arg_4           = byte ptr  0Ch
.text$mn:00009F90
.text$mn:00009F90                 push    ebp
.text$mn:00009F91                 mov     ebp, esp
.text$mn:00009F93                 sub     esp, 58h
.text$mn:00009F96                 mov     [ebp+var_4], ecx
.text$mn:00009F99                 mov     eax, [ebp+arg_0]
.text$mn:00009F9C                 and     eax, 17h
.text$mn:00009F9F                 mov     ecx, [ebp+var_4]
.text$mn:00009FA2                 mov     [ecx+0Ch], eax
.text$mn:00009FA5                 mov     edx, [ebp+var_4]
.text$mn:00009FA8                 mov     eax, [ebp+var_4]
.text$mn:00009FAB                 mov     ecx, [edx+0Ch]
.text$mn:00009FAE                 and     ecx, [eax+10h]
.text$mn:00009FB1                 jnz     short loc_9FB8
.text$mn:00009FB3                 jmp     loc_A072
.text$mn:00009FB8 ; ---------------------------------------------------------------------------
.text$mn:00009FB8
.text$mn:00009FB8 loc_9FB8:                               ; CODE XREF: std::ios_base::clear(int,bool)+21j
.text$mn:00009FB8                 movzx   edx, [ebp+arg_4]
.text$mn:00009FBC                 test    edx, edx
.text$mn:00009FBE                 jz      short loc_9FCE
.text$mn:00009FC0                 push    0
.text$mn:00009FC2                 push    0
.text$mn:00009FC4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00009FC9 ; ---------------------------------------------------------------------------
.text$mn:00009FC9                 jmp     loc_A072
.text$mn:00009FCE ; ---------------------------------------------------------------------------
.text$mn:00009FCE
.text$mn:00009FCE loc_9FCE:                               ; CODE XREF: std::ios_base::clear(int,bool)+2Ej
.text$mn:00009FCE                 mov     eax, [ebp+var_4]
.text$mn:00009FD1                 mov     ecx, [ebp+var_4]
.text$mn:00009FD4                 mov     edx, [eax+0Ch]
.text$mn:00009FD7                 and     edx, [ecx+10h]
.text$mn:00009FDA                 and     edx, 4
.text$mn:00009FDD                 jz      short loc_A00B
.text$mn:00009FDF                 push    1
.text$mn:00009FE1                 lea     eax, [ebp+var_C]
.text$mn:00009FE4                 push    eax
.text$mn:00009FE5                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:00009FEA                 add     esp, 8
.text$mn:00009FED                 push    eax             ; struct std::error_code *
.text$mn:00009FEE                 push    offset ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ ; "ios_base::badbit set"
.text$mn:00009FF3                 lea     ecx, [ebp+var_30] ; this
.text$mn:00009FF6                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:00009FFB                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:0000A000                 lea     ecx, [ebp+var_30]
.text$mn:0000A003                 push    ecx
.text$mn:0000A004                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000A009 ; ---------------------------------------------------------------------------
.text$mn:0000A009                 jmp     short loc_A072
.text$mn:0000A00B ; ---------------------------------------------------------------------------
.text$mn:0000A00B
.text$mn:0000A00B loc_A00B:                               ; CODE XREF: std::ios_base::clear(int,bool)+4Dj
.text$mn:0000A00B                 mov     edx, [ebp+var_4]
.text$mn:0000A00E                 mov     eax, [ebp+var_4]
.text$mn:0000A011                 mov     ecx, [edx+0Ch]
.text$mn:0000A014                 and     ecx, [eax+10h]
.text$mn:0000A017                 and     ecx, 2
.text$mn:0000A01A                 jz      short loc_A048
.text$mn:0000A01C                 push    1
.text$mn:0000A01E                 lea     edx, [ebp+var_14]
.text$mn:0000A021                 push    edx
.text$mn:0000A022                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:0000A027                 add     esp, 8
.text$mn:0000A02A                 push    eax             ; struct std::error_code *
.text$mn:0000A02B                 push    offset ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; "ios_base::failbit set"
.text$mn:0000A030                 lea     ecx, [ebp+var_44] ; this
.text$mn:0000A033                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:0000A038                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:0000A03D                 lea     eax, [ebp+var_44]
.text$mn:0000A040                 push    eax
.text$mn:0000A041                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000A046 ; ---------------------------------------------------------------------------
.text$mn:0000A046                 jmp     short loc_A072
.text$mn:0000A048 ; ---------------------------------------------------------------------------
.text$mn:0000A048
.text$mn:0000A048 loc_A048:                               ; CODE XREF: std::ios_base::clear(int,bool)+8Aj
.text$mn:0000A048                 push    1
.text$mn:0000A04A                 lea     ecx, [ebp+var_1C]
.text$mn:0000A04D                 push    ecx
.text$mn:0000A04E                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:0000A053                 add     esp, 8
.text$mn:0000A056                 push    eax             ; struct std::error_code *
.text$mn:0000A057                 push    offset ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ ; "ios_base::eofbit set"
.text$mn:0000A05C                 lea     ecx, [ebp+var_58] ; this
.text$mn:0000A05F                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:0000A064                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:0000A069                 lea     edx, [ebp+var_58]
.text$mn:0000A06C                 push    edx
.text$mn:0000A06D                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000A072 ; ---------------------------------------------------------------------------
.text$mn:0000A072
.text$mn:0000A072 loc_A072:                               ; CODE XREF: std::ios_base::clear(int,bool)+23j
.text$mn:0000A072                                         ; std::ios_base::clear(int,bool)+39j ...
.text$mn:0000A072                 mov     esp, ebp
.text$mn:0000A074                 pop     ebp
.text$mn:0000A075                 retn    8
.text$mn:0000A075 ?clear@ios_base@std@@QAEXH_N@Z endp
.text$mn:0000A075
.text$mn:0000A075 _text$mn        ends
.text$mn:0000A075
.text$mn:0000A078 ; ===========================================================================
.text$mn:0000A078
.text$mn:0000A078 ; Segment type: Pure code
.text$mn:0000A078 ; Segment permissions: Read/Execute
.text$mn:0000A078 _text$mn        segment para public 'CODE' use32
.text$mn:0000A078                 assume cs:_text$mn
.text$mn:0000A078                 ;org 0A078h
.text$mn:0000A078 ; COMDAT (pick any)
.text$mn:0000A078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A078
.text$mn:0000A078 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A078
.text$mn:0000A078 ; Attributes: bp-based frame
.text$mn:0000A078
.text$mn:0000A078 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:0000A078                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:0000A078 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:0000A078                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:0000A078
.text$mn:0000A078 var_4           = dword ptr -4
.text$mn:0000A078 arg_0           = dword ptr  8
.text$mn:0000A078
.text$mn:0000A078                 push    ebp
.text$mn:0000A079                 mov     ebp, esp
.text$mn:0000A07B                 push    ecx
.text$mn:0000A07C                 mov     [ebp+var_4], ecx
.text$mn:0000A07F                 mov     ecx, [ebp+arg_0]
.text$mn:0000A082                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A087                 push    eax
.text$mn:0000A088                 mov     ecx, [ebp+arg_0]
.text$mn:0000A08B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A090                 push    eax
.text$mn:0000A091                 mov     eax, [ebp+var_4]
.text$mn:0000A094                 mov     ecx, [eax+14h]
.text$mn:0000A097                 push    ecx
.text$mn:0000A098                 push    0
.text$mn:0000A09A                 mov     ecx, [ebp+var_4]
.text$mn:0000A09D                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000A0A2                 mov     esp, ebp
.text$mn:0000A0A4                 pop     ebp
.text$mn:0000A0A5                 retn    4
.text$mn:0000A0A5 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:0000A0A5
.text$mn:0000A0A5 _text$mn        ends
.text$mn:0000A0A5
.text$mn:0000A0A8 ; ===========================================================================
.text$mn:0000A0A8
.text$mn:0000A0A8 ; Segment type: Pure code
.text$mn:0000A0A8 ; Segment permissions: Read/Execute
.text$mn:0000A0A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0A8                 assume cs:_text$mn
.text$mn:0000A0A8                 ;org 0A0A8h
.text$mn:0000A0A8 ; COMDAT (pick any)
.text$mn:0000A0A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0A8
.text$mn:0000A0A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0A8
.text$mn:0000A0A8 ; Attributes: bp-based frame
.text$mn:0000A0A8
.text$mn:0000A0A8 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:0000A0A8                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:0000A0A8 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:0000A0A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:0000A0A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:0000A0A8
.text$mn:0000A0A8 var_18          = dword ptr -18h
.text$mn:0000A0A8 var_14          = dword ptr -14h
.text$mn:0000A0A8 var_10          = dword ptr -10h
.text$mn:0000A0A8 var_C           = dword ptr -0Ch
.text$mn:0000A0A8 var_8           = dword ptr -8
.text$mn:0000A0A8 var_4           = dword ptr -4
.text$mn:0000A0A8 arg_0           = dword ptr  8
.text$mn:0000A0A8 arg_4           = dword ptr  0Ch
.text$mn:0000A0A8 arg_8           = dword ptr  10h
.text$mn:0000A0A8 arg_C           = dword ptr  14h
.text$mn:0000A0A8
.text$mn:0000A0A8                 push    ebp
.text$mn:0000A0A9                 mov     ebp, esp
.text$mn:0000A0AB                 sub     esp, 18h
.text$mn:0000A0AE                 mov     [ebp+var_4], ecx
.text$mn:0000A0B1                 cmp     [ebp+arg_C], 0
.text$mn:0000A0B5                 jz      short loc_A0CD
.text$mn:0000A0B7                 push    87Dh            ; unsigned int
.text$mn:0000A0BC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A0C1                 mov     eax, [ebp+arg_8]
.text$mn:0000A0C4                 push    eax             ; int
.text$mn:0000A0C5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A0CA                 add     esp, 0Ch
.text$mn:0000A0CD
.text$mn:0000A0CD loc_A0CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000A0CD                 mov     ecx, [ebp+var_4]
.text$mn:0000A0D0                 mov     edx, [ecx+14h]
.text$mn:0000A0D3                 cmp     edx, [ebp+arg_0]
.text$mn:0000A0D6                 jnb     short loc_A0E0
.text$mn:0000A0D8                 mov     ecx, [ebp+var_4]
.text$mn:0000A0DB                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A0E0
.text$mn:0000A0E0 loc_A0E0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:0000A0E0                 mov     eax, [ebp+var_4]
.text$mn:0000A0E3                 mov     ecx, [eax+14h]
.text$mn:0000A0E6                 sub     ecx, [ebp+arg_0]
.text$mn:0000A0E9                 cmp     ecx, [ebp+arg_4]
.text$mn:0000A0EC                 jnb     short loc_A0FA
.text$mn:0000A0EE                 mov     edx, [ebp+var_4]
.text$mn:0000A0F1                 mov     eax, [edx+14h]
.text$mn:0000A0F4                 sub     eax, [ebp+arg_0]
.text$mn:0000A0F7                 mov     [ebp+arg_4], eax
.text$mn:0000A0FA
.text$mn:0000A0FA loc_A0FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:0000A0FA                 mov     ecx, [ebp+arg_4]
.text$mn:0000A0FD                 cmp     ecx, [ebp+arg_C]
.text$mn:0000A100                 jnb     short loc_A10A
.text$mn:0000A102                 mov     edx, [ebp+arg_4]
.text$mn:0000A105                 mov     [ebp+var_8], edx
.text$mn:0000A108                 jmp     short loc_A110
.text$mn:0000A10A ; ---------------------------------------------------------------------------
.text$mn:0000A10A
.text$mn:0000A10A loc_A10A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:0000A10A                 mov     eax, [ebp+arg_C]
.text$mn:0000A10D                 mov     [ebp+var_8], eax
.text$mn:0000A110
.text$mn:0000A110 loc_A110:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000A110                 mov     ecx, [ebp+var_8]
.text$mn:0000A113                 push    ecx
.text$mn:0000A114                 mov     edx, [ebp+arg_8]
.text$mn:0000A117                 push    edx
.text$mn:0000A118                 mov     ecx, [ebp+var_4]
.text$mn:0000A11B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A120                 mov     ecx, [ebp+arg_0]
.text$mn:0000A123                 lea     edx, [eax+ecx*2]
.text$mn:0000A126                 push    edx
.text$mn:0000A127                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A12C                 add     esp, 0Ch
.text$mn:0000A12F                 mov     [ebp+var_C], eax
.text$mn:0000A132                 cmp     [ebp+var_C], 0
.text$mn:0000A136                 jz      short loc_A140
.text$mn:0000A138                 mov     eax, [ebp+var_C]
.text$mn:0000A13B                 mov     [ebp+var_18], eax
.text$mn:0000A13E                 jmp     short loc_A175
.text$mn:0000A140 ; ---------------------------------------------------------------------------
.text$mn:0000A140
.text$mn:0000A140 loc_A140:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:0000A140                 mov     ecx, [ebp+arg_4]
.text$mn:0000A143                 cmp     ecx, [ebp+arg_C]
.text$mn:0000A146                 jnb     short loc_A151
.text$mn:0000A148                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000A14F                 jmp     short loc_A16F
.text$mn:0000A151 ; ---------------------------------------------------------------------------
.text$mn:0000A151
.text$mn:0000A151 loc_A151:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:0000A151                 mov     edx, [ebp+arg_4]
.text$mn:0000A154                 cmp     edx, [ebp+arg_C]
.text$mn:0000A157                 jnz     short loc_A162
.text$mn:0000A159                 mov     [ebp+var_10], 0
.text$mn:0000A160                 jmp     short loc_A169
.text$mn:0000A162 ; ---------------------------------------------------------------------------
.text$mn:0000A162
.text$mn:0000A162 loc_A162:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000A162                 mov     [ebp+var_10], 1
.text$mn:0000A169
.text$mn:0000A169 loc_A169:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:0000A169                 mov     eax, [ebp+var_10]
.text$mn:0000A16C                 mov     [ebp+var_14], eax
.text$mn:0000A16F
.text$mn:0000A16F loc_A16F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000A16F                 mov     ecx, [ebp+var_14]
.text$mn:0000A172                 mov     [ebp+var_18], ecx
.text$mn:0000A175
.text$mn:0000A175 loc_A175:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000A175                 mov     eax, [ebp+var_18]
.text$mn:0000A178                 mov     esp, ebp
.text$mn:0000A17A                 pop     ebp
.text$mn:0000A17B                 retn    10h
.text$mn:0000A17B ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000A17B
.text$mn:0000A17B ; ---------------------------------------------------------------------------
.text$mn:0000A17E                 align 10h
.text$mn:0000A17E _text$mn        ends
.text$mn:0000A17E
.text$mn:0000A180 ; ===========================================================================
.text$mn:0000A180
.text$mn:0000A180 ; Segment type: Pure code
.text$mn:0000A180 ; Segment permissions: Read/Execute
.text$mn:0000A180 _text$mn        segment para public 'CODE' use32
.text$mn:0000A180                 assume cs:_text$mn
.text$mn:0000A180                 ;org 0A180h
.text$mn:0000A180 ; COMDAT (pick any)
.text$mn:0000A180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A180
.text$mn:0000A180 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A180
.text$mn:0000A180 ; Attributes: bp-based frame
.text$mn:0000A180
.text$mn:0000A180 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:0000A180                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:0000A180 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:0000A180                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:0000A180
.text$mn:0000A180 var_4           = dword ptr -4
.text$mn:0000A180 Str             = dword ptr  8
.text$mn:0000A180
.text$mn:0000A180                 push    ebp
.text$mn:0000A181                 mov     ebp, esp
.text$mn:0000A183                 push    ecx
.text$mn:0000A184                 mov     [ebp+var_4], ecx
.text$mn:0000A187                 push    86Eh            ; unsigned int
.text$mn:0000A18C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A191                 mov     eax, [ebp+Str]
.text$mn:0000A194                 push    eax             ; int
.text$mn:0000A195                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A19A                 add     esp, 0Ch
.text$mn:0000A19D                 mov     ecx, [ebp+Str]
.text$mn:0000A1A0                 push    ecx             ; Str
.text$mn:0000A1A1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000A1A6                 add     esp, 4
.text$mn:0000A1A9                 push    eax
.text$mn:0000A1AA                 mov     edx, [ebp+Str]
.text$mn:0000A1AD                 push    edx
.text$mn:0000A1AE                 mov     eax, [ebp+var_4]
.text$mn:0000A1B1                 mov     ecx, [eax+14h]
.text$mn:0000A1B4                 push    ecx
.text$mn:0000A1B5                 push    0
.text$mn:0000A1B7                 mov     ecx, [ebp+var_4]
.text$mn:0000A1BA                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000A1BF                 mov     esp, ebp
.text$mn:0000A1C1                 pop     ebp
.text$mn:0000A1C2                 retn    4
.text$mn:0000A1C2 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:0000A1C2
.text$mn:0000A1C2 ; ---------------------------------------------------------------------------
.text$mn:0000A1C5                 align 4
.text$mn:0000A1C5 _text$mn        ends
.text$mn:0000A1C5
.text$mn:0000A1C8 ; ===========================================================================
.text$mn:0000A1C8
.text$mn:0000A1C8 ; Segment type: Pure code
.text$mn:0000A1C8 ; Segment permissions: Read/Execute
.text$mn:0000A1C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1C8                 assume cs:_text$mn
.text$mn:0000A1C8                 ;org 0A1C8h
.text$mn:0000A1C8 ; COMDAT (pick any)
.text$mn:0000A1C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1C8
.text$mn:0000A1C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1C8
.text$mn:0000A1C8 ; Attributes: bp-based frame
.text$mn:0000A1C8
.text$mn:0000A1C8 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:0000A1C8                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:0000A1C8 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:0000A1C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:0000A1C8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+CBp
.text$mn:0000A1C8
.text$mn:0000A1C8 var_4           = dword ptr -4
.text$mn:0000A1C8 arg_0           = dword ptr  8
.text$mn:0000A1C8 arg_4           = dword ptr  0Ch
.text$mn:0000A1C8 arg_8           = dword ptr  10h
.text$mn:0000A1C8
.text$mn:0000A1C8                 push    ebp
.text$mn:0000A1C9                 mov     ebp, esp
.text$mn:0000A1CB                 push    ecx
.text$mn:0000A1CC                 cmp     [ebp+arg_8], 0
.text$mn:0000A1D0                 jnz     short loc_A1DB
.text$mn:0000A1D2                 mov     [ebp+var_4], 0
.text$mn:0000A1D9                 jmp     short loc_A1F2
.text$mn:0000A1DB ; ---------------------------------------------------------------------------
.text$mn:0000A1DB
.text$mn:0000A1DB loc_A1DB:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:0000A1DB                 mov     eax, [ebp+arg_8]
.text$mn:0000A1DE                 push    eax
.text$mn:0000A1DF                 mov     ecx, [ebp+arg_4]
.text$mn:0000A1E2                 push    ecx
.text$mn:0000A1E3                 mov     edx, [ebp+arg_0]
.text$mn:0000A1E6                 push    edx
.text$mn:0000A1E7                 call    _wmemcmp
.text$mn:0000A1EC                 add     esp, 0Ch
.text$mn:0000A1EF                 mov     [ebp+var_4], eax
.text$mn:0000A1F2
.text$mn:0000A1F2 loc_A1F2:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000A1F2                 mov     eax, [ebp+var_4]
.text$mn:0000A1F5                 mov     esp, ebp
.text$mn:0000A1F7                 pop     ebp
.text$mn:0000A1F8                 retn
.text$mn:0000A1F8 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:0000A1F8
.text$mn:0000A1F8 ; ---------------------------------------------------------------------------
.text$mn:0000A1F9                 align 4
.text$mn:0000A1F9 _text$mn        ends
.text$mn:0000A1F9
.text$mn:0000A1FC ; ===========================================================================
.text$mn:0000A1FC
.text$mn:0000A1FC ; Segment type: Pure code
.text$mn:0000A1FC ; Segment permissions: Read/Execute
.text$mn:0000A1FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A1FC                 assume cs:_text$mn
.text$mn:0000A1FC                 ;org 0A1FCh
.text$mn:0000A1FC ; COMDAT (pick any)
.text$mn:0000A1FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1FC
.text$mn:0000A1FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1FC
.text$mn:0000A1FC ; Attributes: bp-based frame
.text$mn:0000A1FC
.text$mn:0000A1FC ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:0000A1FC                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000A1FC ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:0000A1FC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000A1FC
.text$mn:0000A1FC var_4           = dword ptr -4
.text$mn:0000A1FC Dst             = dword ptr  8
.text$mn:0000A1FC Src             = dword ptr  0Ch
.text$mn:0000A1FC Size            = dword ptr  10h
.text$mn:0000A1FC
.text$mn:0000A1FC                 push    ebp
.text$mn:0000A1FD                 mov     ebp, esp
.text$mn:0000A1FF                 push    ecx
.text$mn:0000A200                 cmp     [ebp+Size], 0
.text$mn:0000A204                 jnz     short loc_A20E
.text$mn:0000A206                 mov     eax, [ebp+Dst]
.text$mn:0000A209                 mov     [ebp+var_4], eax
.text$mn:0000A20C                 jmp     short loc_A225
.text$mn:0000A20E ; ---------------------------------------------------------------------------
.text$mn:0000A20E
.text$mn:0000A20E loc_A20E:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000A20E                 mov     ecx, [ebp+Size]
.text$mn:0000A211                 push    ecx             ; Size
.text$mn:0000A212                 mov     edx, [ebp+Src]
.text$mn:0000A215                 push    edx             ; Src
.text$mn:0000A216                 mov     eax, [ebp+Dst]
.text$mn:0000A219                 push    eax             ; Dst
.text$mn:0000A21A                 call    _memcpy
.text$mn:0000A21F                 add     esp, 0Ch
.text$mn:0000A222                 mov     [ebp+var_4], eax
.text$mn:0000A225
.text$mn:0000A225 loc_A225:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000A225                 mov     eax, [ebp+var_4]
.text$mn:0000A228                 mov     esp, ebp
.text$mn:0000A22A                 pop     ebp
.text$mn:0000A22B                 retn
.text$mn:0000A22B ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000A22B
.text$mn:0000A22B _text$mn        ends
.text$mn:0000A22B
.text$mn:0000A22C ; ===========================================================================
.text$mn:0000A22C
.text$mn:0000A22C ; Segment type: Pure code
.text$mn:0000A22C ; Segment permissions: Read/Execute
.text$mn:0000A22C _text$mn        segment para public 'CODE' use32
.text$mn:0000A22C                 assume cs:_text$mn
.text$mn:0000A22C                 ;org 0A22Ch
.text$mn:0000A22C ; COMDAT (pick any)
.text$mn:0000A22C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A22C
.text$mn:0000A22C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A22C
.text$mn:0000A22C ; Attributes: bp-based frame
.text$mn:0000A22C
.text$mn:0000A22C ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:0000A22C                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000A22C ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000A22C                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:0000A22C                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+56p ...
.text$mn:0000A22C
.text$mn:0000A22C var_4           = dword ptr -4
.text$mn:0000A22C Dst             = dword ptr  8
.text$mn:0000A22C Src             = dword ptr  0Ch
.text$mn:0000A22C arg_8           = dword ptr  10h
.text$mn:0000A22C
.text$mn:0000A22C                 push    ebp
.text$mn:0000A22D                 mov     ebp, esp
.text$mn:0000A22F                 push    ecx
.text$mn:0000A230                 cmp     [ebp+arg_8], 0
.text$mn:0000A234                 jnz     short loc_A23E
.text$mn:0000A236                 mov     eax, [ebp+Dst]
.text$mn:0000A239                 mov     [ebp+var_4], eax
.text$mn:0000A23C                 jmp     short loc_A255
.text$mn:0000A23E ; ---------------------------------------------------------------------------
.text$mn:0000A23E
.text$mn:0000A23E loc_A23E:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000A23E                 mov     ecx, [ebp+arg_8]
.text$mn:0000A241                 push    ecx             ; int
.text$mn:0000A242                 mov     edx, [ebp+Src]
.text$mn:0000A245                 push    edx             ; Src
.text$mn:0000A246                 mov     eax, [ebp+Dst]
.text$mn:0000A249                 push    eax             ; Dst
.text$mn:0000A24A                 call    _wmemcpy
.text$mn:0000A24F                 add     esp, 0Ch
.text$mn:0000A252                 mov     [ebp+var_4], eax
.text$mn:0000A255
.text$mn:0000A255 loc_A255:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000A255                 mov     eax, [ebp+var_4]
.text$mn:0000A258                 mov     esp, ebp
.text$mn:0000A25A                 pop     ebp
.text$mn:0000A25B                 retn
.text$mn:0000A25B ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000A25B
.text$mn:0000A25B _text$mn        ends
.text$mn:0000A25B
.text$mn:0000A25C ; ===========================================================================
.text$mn:0000A25C
.text$mn:0000A25C ; Segment type: Pure code
.text$mn:0000A25C ; Segment permissions: Read/Execute
.text$mn:0000A25C _text$mn        segment para public 'CODE' use32
.text$mn:0000A25C                 assume cs:_text$mn
.text$mn:0000A25C                 ;org 0A25Ch
.text$mn:0000A25C ; COMDAT (pick any)
.text$mn:0000A25C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A25C
.text$mn:0000A25C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A25C
.text$mn:0000A25C ; Attributes: bp-based frame
.text$mn:0000A25C
.text$mn:0000A25C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000A25C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000A25C ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000A25C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000A25C
.text$mn:0000A25C var_4           = dword ptr -4
.text$mn:0000A25C arg_0           = dword ptr  8
.text$mn:0000A25C arg_4           = dword ptr  0Ch
.text$mn:0000A25C
.text$mn:0000A25C                 push    ebp
.text$mn:0000A25D                 mov     ebp, esp
.text$mn:0000A25F                 push    ecx
.text$mn:0000A260                 mov     [ebp+var_4], ecx
.text$mn:0000A263                 mov     eax, [ebp+arg_4]
.text$mn:0000A266                 push    eax             ; int
.text$mn:0000A267                 mov     ecx, [ebp+arg_0]
.text$mn:0000A26A                 push    ecx             ; void *
.text$mn:0000A26B                 mov     ecx, [ebp+var_4]
.text$mn:0000A26E                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000A273                 mov     esp, ebp
.text$mn:0000A275                 pop     ebp
.text$mn:0000A276                 retn    8
.text$mn:0000A276 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000A276
.text$mn:0000A276 ; ---------------------------------------------------------------------------
.text$mn:0000A279                 align 4
.text$mn:0000A279 _text$mn        ends
.text$mn:0000A279
.text$mn:0000A27C ; ===========================================================================
.text$mn:0000A27C
.text$mn:0000A27C ; Segment type: Pure code
.text$mn:0000A27C ; Segment permissions: Read/Execute
.text$mn:0000A27C _text$mn        segment para public 'CODE' use32
.text$mn:0000A27C                 assume cs:_text$mn
.text$mn:0000A27C                 ;org 0A27Ch
.text$mn:0000A27C ; COMDAT (pick any)
.text$mn:0000A27C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A27C
.text$mn:0000A27C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A27C
.text$mn:0000A27C ; Attributes: bp-based frame
.text$mn:0000A27C
.text$mn:0000A27C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000A27C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000A27C ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000A27C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000A27C
.text$mn:0000A27C var_4           = dword ptr -4
.text$mn:0000A27C arg_0           = dword ptr  8
.text$mn:0000A27C arg_4           = dword ptr  0Ch
.text$mn:0000A27C
.text$mn:0000A27C                 push    ebp
.text$mn:0000A27D                 mov     ebp, esp
.text$mn:0000A27F                 push    ecx
.text$mn:0000A280                 mov     [ebp+var_4], ecx
.text$mn:0000A283                 mov     eax, [ebp+arg_4]
.text$mn:0000A286                 push    eax             ; int
.text$mn:0000A287                 mov     ecx, [ebp+arg_0]
.text$mn:0000A28A                 push    ecx             ; void *
.text$mn:0000A28B                 mov     ecx, [ebp+var_4]
.text$mn:0000A28E                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000A293                 mov     esp, ebp
.text$mn:0000A295                 pop     ebp
.text$mn:0000A296                 retn    8
.text$mn:0000A296 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000A296
.text$mn:0000A296 ; ---------------------------------------------------------------------------
.text$mn:0000A299                 align 4
.text$mn:0000A299 _text$mn        ends
.text$mn:0000A299
.text$mn:0000A29C ; ===========================================================================
.text$mn:0000A29C
.text$mn:0000A29C ; Segment type: Pure code
.text$mn:0000A29C ; Segment permissions: Read/Execute
.text$mn:0000A29C _text$mn        segment para public 'CODE' use32
.text$mn:0000A29C                 assume cs:_text$mn
.text$mn:0000A29C                 ;org 0A29Ch
.text$mn:0000A29C ; COMDAT (pick any)
.text$mn:0000A29C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A29C
.text$mn:0000A29C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A29C
.text$mn:0000A29C ; Attributes: bp-based frame
.text$mn:0000A29C
.text$mn:0000A29C ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000A29C                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000A29C ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000A29C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000A29C
.text$mn:0000A29C var_4           = dword ptr -4
.text$mn:0000A29C arg_0           = dword ptr  8
.text$mn:0000A29C
.text$mn:0000A29C                 push    ebp
.text$mn:0000A29D                 mov     ebp, esp
.text$mn:0000A29F                 push    ecx
.text$mn:0000A2A0                 mov     [ebp+var_4], ecx
.text$mn:0000A2A3                 mov     eax, [ebp+arg_0]
.text$mn:0000A2A6                 push    eax             ; void *
.text$mn:0000A2A7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A2AC                 add     esp, 4
.text$mn:0000A2AF                 mov     esp, ebp
.text$mn:0000A2B1                 pop     ebp
.text$mn:0000A2B2                 retn    8
.text$mn:0000A2B2 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000A2B2
.text$mn:0000A2B2 ; ---------------------------------------------------------------------------
.text$mn:0000A2B5                 align 4
.text$mn:0000A2B5 _text$mn        ends
.text$mn:0000A2B5
.text$mn:0000A2B8 ; ===========================================================================
.text$mn:0000A2B8
.text$mn:0000A2B8 ; Segment type: Pure code
.text$mn:0000A2B8 ; Segment permissions: Read/Execute
.text$mn:0000A2B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2B8                 assume cs:_text$mn
.text$mn:0000A2B8                 ;org 0A2B8h
.text$mn:0000A2B8 ; COMDAT (pick any)
.text$mn:0000A2B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2B8
.text$mn:0000A2B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2B8
.text$mn:0000A2B8 ; Attributes: bp-based frame
.text$mn:0000A2B8
.text$mn:0000A2B8 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:0000A2B8                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000A2B8 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000A2B8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:0000A2B8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:0000A2B8
.text$mn:0000A2B8 var_4           = dword ptr -4
.text$mn:0000A2B8 arg_0           = dword ptr  8
.text$mn:0000A2B8
.text$mn:0000A2B8                 push    ebp
.text$mn:0000A2B9                 mov     ebp, esp
.text$mn:0000A2BB                 push    ecx
.text$mn:0000A2BC                 mov     [ebp+var_4], ecx
.text$mn:0000A2BF                 mov     eax, [ebp+arg_0]
.text$mn:0000A2C2                 push    eax             ; void *
.text$mn:0000A2C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A2C8                 add     esp, 4
.text$mn:0000A2CB                 mov     esp, ebp
.text$mn:0000A2CD                 pop     ebp
.text$mn:0000A2CE                 retn    8
.text$mn:0000A2CE ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000A2CE
.text$mn:0000A2CE ; ---------------------------------------------------------------------------
.text$mn:0000A2D1                 align 4
.text$mn:0000A2D1 _text$mn        ends
.text$mn:0000A2D1
.text$mn:0000A2D4 ; ===========================================================================
.text$mn:0000A2D4
.text$mn:0000A2D4 ; Segment type: Pure code
.text$mn:0000A2D4 ; Segment permissions: Read/Execute
.text$mn:0000A2D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2D4                 assume cs:_text$mn
.text$mn:0000A2D4                 ;org 0A2D4h
.text$mn:0000A2D4 ; COMDAT (pick any)
.text$mn:0000A2D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2D4
.text$mn:0000A2D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2D4
.text$mn:0000A2D4 ; Attributes: bp-based frame
.text$mn:0000A2D4
.text$mn:0000A2D4 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000A2D4                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000A2D4 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000A2D4                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+57p
.text$mn:0000A2D4                                         ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p ...
.text$mn:0000A2D4
.text$mn:0000A2D4 var_4           = dword ptr -4
.text$mn:0000A2D4 arg_0           = dword ptr  8
.text$mn:0000A2D4
.text$mn:0000A2D4                 push    ebp
.text$mn:0000A2D5                 mov     ebp, esp
.text$mn:0000A2D7                 push    ecx
.text$mn:0000A2D8                 mov     [ebp+var_4], ecx
.text$mn:0000A2DB                 mov     eax, [ebp+arg_0]
.text$mn:0000A2DE                 push    eax             ; void *
.text$mn:0000A2DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A2E4                 add     esp, 4
.text$mn:0000A2E7                 mov     esp, ebp
.text$mn:0000A2E9                 pop     ebp
.text$mn:0000A2EA                 retn    8
.text$mn:0000A2EA ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:0000A2EA
.text$mn:0000A2EA ; ---------------------------------------------------------------------------
.text$mn:0000A2ED                 align 10h
.text$mn:0000A2ED _text$mn        ends
.text$mn:0000A2ED
.text$mn:0000A2F0 ; ===========================================================================
.text$mn:0000A2F0
.text$mn:0000A2F0 ; Segment type: Pure code
.text$mn:0000A2F0 ; Segment permissions: Read/Execute
.text$mn:0000A2F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2F0                 assume cs:_text$mn
.text$mn:0000A2F0                 ;org 0A2F0h
.text$mn:0000A2F0 ; COMDAT (pick any)
.text$mn:0000A2F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2F0
.text$mn:0000A2F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2F0
.text$mn:0000A2F0 ; Attributes: bp-based frame
.text$mn:0000A2F0
.text$mn:0000A2F0 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000A2F0                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000A2F0 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000A2F0                                         ; DATA XREF: .rdata:0000E26Co
.text$mn:0000A2F0
.text$mn:0000A2F0 var_4           = dword ptr -4
.text$mn:0000A2F0 arg_0           = dword ptr  8
.text$mn:0000A2F0 arg_4           = dword ptr  0Ch
.text$mn:0000A2F0
.text$mn:0000A2F0                 push    ebp
.text$mn:0000A2F1                 mov     ebp, esp
.text$mn:0000A2F3                 push    ecx
.text$mn:0000A2F4                 mov     [ebp+var_4], ecx
.text$mn:0000A2F7                 mov     eax, [ebp+arg_4]
.text$mn:0000A2FA                 push    eax             ; int
.text$mn:0000A2FB                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000A300                 add     esp, 4
.text$mn:0000A303                 test    eax, eax
.text$mn:0000A305                 jz      short loc_A320
.text$mn:0000A307                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:0000A30C                 push    eax             ; struct std::error_category *
.text$mn:0000A30D                 mov     ecx, [ebp+arg_4]
.text$mn:0000A310                 push    ecx             ; int
.text$mn:0000A311                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A314                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A319                 mov     eax, [ebp+arg_0]
.text$mn:0000A31C                 jmp     short loc_A335
.text$mn:0000A31E ; ---------------------------------------------------------------------------
.text$mn:0000A31E                 jmp     short loc_A335
.text$mn:0000A320 ; ---------------------------------------------------------------------------
.text$mn:0000A320
.text$mn:0000A320 loc_A320:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000A320                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000A325                 push    eax             ; struct std::error_category *
.text$mn:0000A326                 mov     edx, [ebp+arg_4]
.text$mn:0000A329                 push    edx             ; int
.text$mn:0000A32A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A32D                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A332                 mov     eax, [ebp+arg_0]
.text$mn:0000A335
.text$mn:0000A335 loc_A335:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000A335                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000A335                 mov     esp, ebp
.text$mn:0000A337                 pop     ebp
.text$mn:0000A338                 retn    8
.text$mn:0000A338 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000A338
.text$mn:0000A338 ; ---------------------------------------------------------------------------
.text$mn:0000A33B                 align 4
.text$mn:0000A33B _text$mn        ends
.text$mn:0000A33B
.text$mn:0000A33C ; ===========================================================================
.text$mn:0000A33C
.text$mn:0000A33C ; Segment type: Pure code
.text$mn:0000A33C ; Segment permissions: Read/Execute
.text$mn:0000A33C _text$mn        segment para public 'CODE' use32
.text$mn:0000A33C                 assume cs:_text$mn
.text$mn:0000A33C                 ;org 0A33Ch
.text$mn:0000A33C ; COMDAT (pick any)
.text$mn:0000A33C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A33C
.text$mn:0000A33C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A33C
.text$mn:0000A33C ; Attributes: bp-based frame
.text$mn:0000A33C
.text$mn:0000A33C ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:0000A33C                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000A33C ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000A33C                                         ; DATA XREF: .rdata:0000E1C0o
.text$mn:0000A33C                                         ; .rdata:0000E1F8o ...
.text$mn:0000A33C
.text$mn:0000A33C var_4           = dword ptr -4
.text$mn:0000A33C arg_0           = dword ptr  8
.text$mn:0000A33C arg_4           = dword ptr  0Ch
.text$mn:0000A33C
.text$mn:0000A33C                 push    ebp
.text$mn:0000A33D                 mov     ebp, esp
.text$mn:0000A33F                 push    ecx
.text$mn:0000A340                 mov     [ebp+var_4], ecx
.text$mn:0000A343                 mov     eax, [ebp+var_4]
.text$mn:0000A346                 push    eax             ; struct std::error_category *
.text$mn:0000A347                 mov     ecx, [ebp+arg_4]
.text$mn:0000A34A                 push    ecx             ; int
.text$mn:0000A34B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A34E                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A353                 mov     eax, [ebp+arg_0]
.text$mn:0000A356                 mov     esp, ebp
.text$mn:0000A358                 pop     ebp
.text$mn:0000A359                 retn    8
.text$mn:0000A359 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000A359
.text$mn:0000A359 _text$mn        ends
.text$mn:0000A359
.text$mn:0000A35C ; ===========================================================================
.text$mn:0000A35C
.text$mn:0000A35C ; Segment type: Pure code
.text$mn:0000A35C ; Segment permissions: Read/Execute
.text$mn:0000A35C _text$mn        segment para public 'CODE' use32
.text$mn:0000A35C                 assume cs:_text$mn
.text$mn:0000A35C                 ;org 0A35Ch
.text$mn:0000A35C ; COMDAT (pick any)
.text$mn:0000A35C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A35C
.text$mn:0000A35C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A35C
.text$mn:0000A35C ; Attributes: bp-based frame
.text$mn:0000A35C
.text$mn:0000A35C ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_is(wchar_t const *, wchar_t const *, short *)const
.text$mn:0000A35C                 public ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
.text$mn:0000A35C ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z proc near
.text$mn:0000A35C                                         ; DATA XREF: .rdata:0000E180o
.text$mn:0000A35C
.text$mn:0000A35C var_4           = dword ptr -4
.text$mn:0000A35C arg_0           = dword ptr  8
.text$mn:0000A35C arg_4           = dword ptr  0Ch
.text$mn:0000A35C arg_8           = dword ptr  10h
.text$mn:0000A35C
.text$mn:0000A35C                 push    ebp
.text$mn:0000A35D                 mov     ebp, esp
.text$mn:0000A35F                 push    ecx
.text$mn:0000A360                 mov     [ebp+var_4], ecx
.text$mn:0000A363                 push    0A88h           ; unsigned int
.text$mn:0000A368                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A36D                 mov     eax, [ebp+arg_4]
.text$mn:0000A370                 push    eax             ; int
.text$mn:0000A371                 mov     ecx, [ebp+arg_0]
.text$mn:0000A374                 push    ecx             ; int
.text$mn:0000A375                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A37A                 add     esp, 10h
.text$mn:0000A37D                 push    0A89h           ; unsigned int
.text$mn:0000A382                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A387                 mov     edx, [ebp+arg_8]
.text$mn:0000A38A                 push    edx             ; int
.text$mn:0000A38B                 call    ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z ; std::_Debug_pointer<short>(short *,wchar_t const *,uint)
.text$mn:0000A390                 add     esp, 0Ch
.text$mn:0000A393                 mov     eax, [ebp+var_4]
.text$mn:0000A396                 add     eax, 8
.text$mn:0000A399                 push    eax
.text$mn:0000A39A                 mov     ecx, [ebp+arg_8]
.text$mn:0000A39D                 push    ecx
.text$mn:0000A39E                 mov     edx, [ebp+arg_4]
.text$mn:0000A3A1                 push    edx
.text$mn:0000A3A2                 mov     eax, [ebp+arg_0]
.text$mn:0000A3A5                 push    eax
.text$mn:0000A3A6                 call    __Getwctypes
.text$mn:0000A3AB                 add     esp, 10h
.text$mn:0000A3AE                 mov     esp, ebp
.text$mn:0000A3B0                 pop     ebp
.text$mn:0000A3B1                 retn    0Ch
.text$mn:0000A3B1 ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z endp
.text$mn:0000A3B1
.text$mn:0000A3B1 _text$mn        ends
.text$mn:0000A3B1
.text$mn:0000A3B4 ; ===========================================================================
.text$mn:0000A3B4
.text$mn:0000A3B4 ; Segment type: Pure code
.text$mn:0000A3B4 ; Segment permissions: Read/Execute
.text$mn:0000A3B4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A3B4                 assume cs:_text$mn
.text$mn:0000A3B4                 ;org 0A3B4h
.text$mn:0000A3B4 ; COMDAT (pick any)
.text$mn:0000A3B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3B4
.text$mn:0000A3B4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3B4
.text$mn:0000A3B4 ; Attributes: bp-based frame
.text$mn:0000A3B4
.text$mn:0000A3B4 ; protected: virtual bool __thiscall std::ctype<wchar_t>::do_is(short, wchar_t)const
.text$mn:0000A3B4                 public ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
.text$mn:0000A3B4 ?do_is@?$ctype@_W@std@@MBE_NF_W@Z proc near ; DATA XREF: .rdata:0000E184o
.text$mn:0000A3B4
.text$mn:0000A3B4 var_8           = dword ptr -8
.text$mn:0000A3B4 var_4           = dword ptr -4
.text$mn:0000A3B4 arg_0           = word ptr  8
.text$mn:0000A3B4 arg_4           = word ptr  0Ch
.text$mn:0000A3B4
.text$mn:0000A3B4                 push    ebp
.text$mn:0000A3B5                 mov     ebp, esp
.text$mn:0000A3B7                 sub     esp, 8
.text$mn:0000A3BA                 mov     [ebp+var_8], ecx
.text$mn:0000A3BD                 mov     eax, [ebp+var_8]
.text$mn:0000A3C0                 add     eax, 8
.text$mn:0000A3C3                 push    eax
.text$mn:0000A3C4                 movzx   ecx, [ebp+arg_4]
.text$mn:0000A3C8                 push    ecx
.text$mn:0000A3C9                 call    __Getwctype
.text$mn:0000A3CE                 add     esp, 8
.text$mn:0000A3D1                 movsx   edx, ax
.text$mn:0000A3D4                 movsx   eax, [ebp+arg_0]
.text$mn:0000A3D8                 and     edx, eax
.text$mn:0000A3DA                 jz      short loc_A3E5
.text$mn:0000A3DC                 mov     [ebp+var_4], 1
.text$mn:0000A3E3                 jmp     short loc_A3EC
.text$mn:0000A3E5 ; ---------------------------------------------------------------------------
.text$mn:0000A3E5
.text$mn:0000A3E5 loc_A3E5:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+26j
.text$mn:0000A3E5                 mov     [ebp+var_4], 0
.text$mn:0000A3EC
.text$mn:0000A3EC loc_A3EC:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+2Fj
.text$mn:0000A3EC                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A3EF                 mov     esp, ebp
.text$mn:0000A3F1                 pop     ebp
.text$mn:0000A3F2                 retn    8
.text$mn:0000A3F2 ?do_is@?$ctype@_W@std@@MBE_NF_W@Z endp
.text$mn:0000A3F2
.text$mn:0000A3F2 ; ---------------------------------------------------------------------------
.text$mn:0000A3F5                 align 4
.text$mn:0000A3F5 _text$mn        ends
.text$mn:0000A3F5
.text$mn:0000A3F8 ; ===========================================================================
.text$mn:0000A3F8
.text$mn:0000A3F8 ; Segment type: Pure code
.text$mn:0000A3F8 ; Segment permissions: Read/Execute
.text$mn:0000A3F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A3F8                 assume cs:_text$mn
.text$mn:0000A3F8                 ;org 0A3F8h
.text$mn:0000A3F8 ; COMDAT (pick any)
.text$mn:0000A3F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3F8
.text$mn:0000A3F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3F8
.text$mn:0000A3F8 ; Attributes: bp-based frame
.text$mn:0000A3F8
.text$mn:0000A3F8 ; protected: virtual char __thiscall std::ctype<wchar_t>::do_narrow(wchar_t, char)const
.text$mn:0000A3F8                 public ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
.text$mn:0000A3F8 ?do_narrow@?$ctype@_W@std@@MBED_WD@Z proc near
.text$mn:0000A3F8                                         ; DATA XREF: .rdata:0000E1ACo
.text$mn:0000A3F8
.text$mn:0000A3F8 var_4           = dword ptr -4
.text$mn:0000A3F8 arg_0           = word ptr  8
.text$mn:0000A3F8 arg_4           = byte ptr  0Ch
.text$mn:0000A3F8
.text$mn:0000A3F8                 push    ebp
.text$mn:0000A3F9                 mov     ebp, esp
.text$mn:0000A3FB                 push    ecx
.text$mn:0000A3FC                 mov     [ebp+var_4], ecx
.text$mn:0000A3FF                 movzx   eax, [ebp+arg_4]
.text$mn:0000A403                 push    eax
.text$mn:0000A404                 movzx   ecx, [ebp+arg_0]
.text$mn:0000A408                 push    ecx
.text$mn:0000A409                 mov     ecx, [ebp+var_4]
.text$mn:0000A40C                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:0000A411                 mov     esp, ebp
.text$mn:0000A413                 pop     ebp
.text$mn:0000A414                 retn    8
.text$mn:0000A414 ?do_narrow@?$ctype@_W@std@@MBED_WD@Z endp
.text$mn:0000A414
.text$mn:0000A414 ; ---------------------------------------------------------------------------
.text$mn:0000A417                 align 4
.text$mn:0000A417 _text$mn        ends
.text$mn:0000A417
.text$mn:0000A418 ; ===========================================================================
.text$mn:0000A418
.text$mn:0000A418 ; Segment type: Pure code
.text$mn:0000A418 ; Segment permissions: Read/Execute
.text$mn:0000A418 _text$mn        segment para public 'CODE' use32
.text$mn:0000A418                 assume cs:_text$mn
.text$mn:0000A418                 ;org 0A418h
.text$mn:0000A418 ; COMDAT (pick any)
.text$mn:0000A418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A418
.text$mn:0000A418 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A418
.text$mn:0000A418 ; Attributes: bp-based frame
.text$mn:0000A418
.text$mn:0000A418 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_narrow(wchar_t const *, wchar_t const *, char, char *)const
.text$mn:0000A418                 public ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
.text$mn:0000A418 ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z proc near
.text$mn:0000A418                                         ; DATA XREF: .rdata:0000E1A8o
.text$mn:0000A418
.text$mn:0000A418 var_4           = dword ptr -4
.text$mn:0000A418 arg_0           = dword ptr  8
.text$mn:0000A418 arg_4           = dword ptr  0Ch
.text$mn:0000A418 arg_8           = byte ptr  10h
.text$mn:0000A418 arg_C           = dword ptr  14h
.text$mn:0000A418
.text$mn:0000A418                 push    ebp
.text$mn:0000A419                 mov     ebp, esp
.text$mn:0000A41B                 push    ecx
.text$mn:0000A41C                 mov     [ebp+var_4], ecx
.text$mn:0000A41F                 push    0AE2h           ; unsigned int
.text$mn:0000A424                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A429                 mov     eax, [ebp+arg_4]
.text$mn:0000A42C                 push    eax             ; int
.text$mn:0000A42D                 mov     ecx, [ebp+arg_0]
.text$mn:0000A430                 push    ecx             ; int
.text$mn:0000A431                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A436                 add     esp, 10h
.text$mn:0000A439                 push    0AE3h           ; unsigned int
.text$mn:0000A43E                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A443                 mov     edx, [ebp+arg_C]
.text$mn:0000A446                 push    edx             ; int
.text$mn:0000A447                 call    ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z ; std::_Debug_pointer<char>(char *,wchar_t const *,uint)
.text$mn:0000A44C                 add     esp, 0Ch
.text$mn:0000A44F                 jmp     short loc_A463
.text$mn:0000A451 ; ---------------------------------------------------------------------------
.text$mn:0000A451
.text$mn:0000A451 loc_A451:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+6Cj
.text$mn:0000A451                 mov     eax, [ebp+arg_0]
.text$mn:0000A454                 add     eax, 2
.text$mn:0000A457                 mov     [ebp+arg_0], eax
.text$mn:0000A45A                 mov     ecx, [ebp+arg_C]
.text$mn:0000A45D                 add     ecx, 1
.text$mn:0000A460                 mov     [ebp+arg_C], ecx
.text$mn:0000A463
.text$mn:0000A463 loc_A463:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+37j
.text$mn:0000A463                 mov     edx, [ebp+arg_0]
.text$mn:0000A466                 cmp     edx, [ebp+arg_4]
.text$mn:0000A469                 jz      short loc_A486
.text$mn:0000A46B                 movzx   eax, [ebp+arg_8]
.text$mn:0000A46F                 push    eax
.text$mn:0000A470                 mov     ecx, [ebp+arg_0]
.text$mn:0000A473                 movzx   edx, word ptr [ecx]
.text$mn:0000A476                 push    edx
.text$mn:0000A477                 mov     ecx, [ebp+var_4]
.text$mn:0000A47A                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:0000A47F                 mov     ecx, [ebp+arg_C]
.text$mn:0000A482                 mov     [ecx], al
.text$mn:0000A484                 jmp     short loc_A451
.text$mn:0000A486 ; ---------------------------------------------------------------------------
.text$mn:0000A486
.text$mn:0000A486 loc_A486:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+51j
.text$mn:0000A486                 mov     eax, [ebp+arg_0]
.text$mn:0000A489                 mov     esp, ebp
.text$mn:0000A48B                 pop     ebp
.text$mn:0000A48C                 retn    10h
.text$mn:0000A48C ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z endp
.text$mn:0000A48C
.text$mn:0000A48C ; ---------------------------------------------------------------------------
.text$mn:0000A48F                 align 10h
.text$mn:0000A48F _text$mn        ends
.text$mn:0000A48F
.text$mn:0000A490 ; ===========================================================================
.text$mn:0000A490
.text$mn:0000A490 ; Segment type: Pure code
.text$mn:0000A490 ; Segment permissions: Read/Execute
.text$mn:0000A490 _text$mn        segment para public 'CODE' use32
.text$mn:0000A490                 assume cs:_text$mn
.text$mn:0000A490                 ;org 0A490h
.text$mn:0000A490 ; COMDAT (pick any)
.text$mn:0000A490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A490
.text$mn:0000A490 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A490
.text$mn:0000A490 ; Attributes: bp-based frame
.text$mn:0000A490
.text$mn:0000A490 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_is(short, wchar_t const *, wchar_t const *)const
.text$mn:0000A490                 public ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:0000A490 ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:0000A490                                         ; DATA XREF: .rdata:0000E188o
.text$mn:0000A490
.text$mn:0000A490 var_4           = dword ptr -4
.text$mn:0000A490 arg_0           = word ptr  8
.text$mn:0000A490 arg_4           = dword ptr  0Ch
.text$mn:0000A490 arg_8           = dword ptr  10h
.text$mn:0000A490
.text$mn:0000A490                 push    ebp
.text$mn:0000A491                 mov     ebp, esp
.text$mn:0000A493                 push    ecx
.text$mn:0000A494                 mov     [ebp+var_4], ecx
.text$mn:0000A497                 push    0A90h           ; unsigned int
.text$mn:0000A49C                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A4A1                 mov     eax, [ebp+arg_8]
.text$mn:0000A4A4                 push    eax             ; int
.text$mn:0000A4A5                 mov     ecx, [ebp+arg_4]
.text$mn:0000A4A8                 push    ecx             ; int
.text$mn:0000A4A9                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A4AE                 add     esp, 10h
.text$mn:0000A4B1                 jmp     short loc_A4BC
.text$mn:0000A4B3 ; ---------------------------------------------------------------------------
.text$mn:0000A4B3
.text$mn:0000A4B3 loc_A4B3:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:0000A4B3                 mov     edx, [ebp+arg_4]
.text$mn:0000A4B6                 add     edx, 2
.text$mn:0000A4B9                 mov     [ebp+arg_4], edx
.text$mn:0000A4BC
.text$mn:0000A4BC loc_A4BC:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+21j
.text$mn:0000A4BC                 mov     eax, [ebp+arg_4]
.text$mn:0000A4BF                 cmp     eax, [ebp+arg_8]
.text$mn:0000A4C2                 jz      short loc_A4E1
.text$mn:0000A4C4                 mov     ecx, [ebp+arg_4]
.text$mn:0000A4C7                 movzx   edx, word ptr [ecx]
.text$mn:0000A4CA                 push    edx
.text$mn:0000A4CB                 movzx   eax, [ebp+arg_0]
.text$mn:0000A4CF                 push    eax
.text$mn:0000A4D0                 mov     ecx, [ebp+var_4]
.text$mn:0000A4D3                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:0000A4D8                 movzx   ecx, al
.text$mn:0000A4DB                 test    ecx, ecx
.text$mn:0000A4DD                 jnz     short loc_A4E1
.text$mn:0000A4DF                 jmp     short loc_A4B3
.text$mn:0000A4E1 ; ---------------------------------------------------------------------------
.text$mn:0000A4E1
.text$mn:0000A4E1 loc_A4E1:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+32j
.text$mn:0000A4E1                                         ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:0000A4E1                 mov     eax, [ebp+arg_4]
.text$mn:0000A4E4                 mov     esp, ebp
.text$mn:0000A4E6                 pop     ebp
.text$mn:0000A4E7                 retn    0Ch
.text$mn:0000A4E7 ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:0000A4E7
.text$mn:0000A4E7 ; ---------------------------------------------------------------------------
.text$mn:0000A4EA                 align 4
.text$mn:0000A4EA _text$mn        ends
.text$mn:0000A4EA
.text$mn:0000A4EC ; ===========================================================================
.text$mn:0000A4EC
.text$mn:0000A4EC ; Segment type: Pure code
.text$mn:0000A4EC ; Segment permissions: Read/Execute
.text$mn:0000A4EC _text$mn        segment para public 'CODE' use32
.text$mn:0000A4EC                 assume cs:_text$mn
.text$mn:0000A4EC                 ;org 0A4ECh
.text$mn:0000A4EC ; COMDAT (pick any)
.text$mn:0000A4EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4EC
.text$mn:0000A4EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4EC
.text$mn:0000A4EC ; Attributes: bp-based frame
.text$mn:0000A4EC
.text$mn:0000A4EC ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_not(short, wchar_t const *, wchar_t const *)const
.text$mn:0000A4EC                 public ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:0000A4EC ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:0000A4EC                                         ; DATA XREF: .rdata:0000E18Co
.text$mn:0000A4EC
.text$mn:0000A4EC var_4           = dword ptr -4
.text$mn:0000A4EC arg_0           = word ptr  8
.text$mn:0000A4EC arg_4           = dword ptr  0Ch
.text$mn:0000A4EC arg_8           = dword ptr  10h
.text$mn:0000A4EC
.text$mn:0000A4EC                 push    ebp
.text$mn:0000A4ED                 mov     ebp, esp
.text$mn:0000A4EF                 push    ecx
.text$mn:0000A4F0                 mov     [ebp+var_4], ecx
.text$mn:0000A4F3                 push    0A99h           ; unsigned int
.text$mn:0000A4F8                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A4FD                 mov     eax, [ebp+arg_8]
.text$mn:0000A500                 push    eax             ; int
.text$mn:0000A501                 mov     ecx, [ebp+arg_4]
.text$mn:0000A504                 push    ecx             ; int
.text$mn:0000A505                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A50A                 add     esp, 10h
.text$mn:0000A50D                 jmp     short loc_A518
.text$mn:0000A50F ; ---------------------------------------------------------------------------
.text$mn:0000A50F
.text$mn:0000A50F loc_A50F:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:0000A50F                 mov     edx, [ebp+arg_4]
.text$mn:0000A512                 add     edx, 2
.text$mn:0000A515                 mov     [ebp+arg_4], edx
.text$mn:0000A518
.text$mn:0000A518 loc_A518:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+21j
.text$mn:0000A518                 mov     eax, [ebp+arg_4]
.text$mn:0000A51B                 cmp     eax, [ebp+arg_8]
.text$mn:0000A51E                 jz      short loc_A53D
.text$mn:0000A520                 mov     ecx, [ebp+arg_4]
.text$mn:0000A523                 movzx   edx, word ptr [ecx]
.text$mn:0000A526                 push    edx
.text$mn:0000A527                 movzx   eax, [ebp+arg_0]
.text$mn:0000A52B                 push    eax
.text$mn:0000A52C                 mov     ecx, [ebp+var_4]
.text$mn:0000A52F                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:0000A534                 movzx   ecx, al
.text$mn:0000A537                 test    ecx, ecx
.text$mn:0000A539                 jz      short loc_A53D
.text$mn:0000A53B                 jmp     short loc_A50F
.text$mn:0000A53D ; ---------------------------------------------------------------------------
.text$mn:0000A53D
.text$mn:0000A53D loc_A53D:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+32j
.text$mn:0000A53D                                         ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:0000A53D                 mov     eax, [ebp+arg_4]
.text$mn:0000A540                 mov     esp, ebp
.text$mn:0000A542                 pop     ebp
.text$mn:0000A543                 retn    0Ch
.text$mn:0000A543 ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:0000A543
.text$mn:0000A543 ; ---------------------------------------------------------------------------
.text$mn:0000A546                 align 4
.text$mn:0000A546 _text$mn        ends
.text$mn:0000A546
.text$mn:0000A548 ; ===========================================================================
.text$mn:0000A548
.text$mn:0000A548 ; Segment type: Pure code
.text$mn:0000A548 ; Segment permissions: Read/Execute
.text$mn:0000A548 _text$mn        segment para public 'CODE' use32
.text$mn:0000A548                 assume cs:_text$mn
.text$mn:0000A548                 ;org 0A548h
.text$mn:0000A548 ; COMDAT (pick any)
.text$mn:0000A548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A548
.text$mn:0000A548 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A548
.text$mn:0000A548 ; Attributes: bp-based frame
.text$mn:0000A548
.text$mn:0000A548 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_tolower(wchar_t *, wchar_t const *)const
.text$mn:0000A548                 public ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:0000A548 ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:0000A548                                         ; DATA XREF: .rdata:0000E190o
.text$mn:0000A548
.text$mn:0000A548 var_4           = dword ptr -4
.text$mn:0000A548 arg_0           = dword ptr  8
.text$mn:0000A548 arg_4           = dword ptr  0Ch
.text$mn:0000A548
.text$mn:0000A548                 push    ebp
.text$mn:0000A549                 mov     ebp, esp
.text$mn:0000A54B                 push    ecx
.text$mn:0000A54C                 mov     [ebp+var_4], ecx
.text$mn:0000A54F                 push    0AA7h           ; unsigned int
.text$mn:0000A554                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A559                 mov     eax, [ebp+arg_4]
.text$mn:0000A55C                 push    eax             ; int
.text$mn:0000A55D                 mov     ecx, [ebp+arg_0]
.text$mn:0000A560                 push    ecx             ; int
.text$mn:0000A561                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A566                 add     esp, 10h
.text$mn:0000A569                 jmp     short loc_A574
.text$mn:0000A56B ; ---------------------------------------------------------------------------
.text$mn:0000A56B
.text$mn:0000A56B loc_A56B:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+50j
.text$mn:0000A56B                 mov     edx, [ebp+arg_0]
.text$mn:0000A56E                 add     edx, 2
.text$mn:0000A571                 mov     [ebp+arg_0], edx
.text$mn:0000A574
.text$mn:0000A574 loc_A574:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+21j
.text$mn:0000A574                 mov     eax, [ebp+arg_0]
.text$mn:0000A577                 cmp     eax, [ebp+arg_4]
.text$mn:0000A57A                 jz      short loc_A59A
.text$mn:0000A57C                 mov     ecx, [ebp+var_4]
.text$mn:0000A57F                 add     ecx, 8
.text$mn:0000A582                 push    ecx
.text$mn:0000A583                 mov     edx, [ebp+arg_0]
.text$mn:0000A586                 movzx   eax, word ptr [edx]
.text$mn:0000A589                 push    eax
.text$mn:0000A58A                 call    __Towlower
.text$mn:0000A58F                 add     esp, 8
.text$mn:0000A592                 mov     ecx, [ebp+arg_0]
.text$mn:0000A595                 mov     [ecx], ax
.text$mn:0000A598                 jmp     short loc_A56B
.text$mn:0000A59A ; ---------------------------------------------------------------------------
.text$mn:0000A59A
.text$mn:0000A59A loc_A59A:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+32j
.text$mn:0000A59A                 mov     eax, [ebp+arg_0]
.text$mn:0000A59D                 mov     esp, ebp
.text$mn:0000A59F                 pop     ebp
.text$mn:0000A5A0                 retn    8
.text$mn:0000A5A0 ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:0000A5A0
.text$mn:0000A5A0 ; ---------------------------------------------------------------------------
.text$mn:0000A5A3                 align 4
.text$mn:0000A5A3 _text$mn        ends
.text$mn:0000A5A3
.text$mn:0000A5A4 ; ===========================================================================
.text$mn:0000A5A4
.text$mn:0000A5A4 ; Segment type: Pure code
.text$mn:0000A5A4 ; Segment permissions: Read/Execute
.text$mn:0000A5A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5A4                 assume cs:_text$mn
.text$mn:0000A5A4                 ;org 0A5A4h
.text$mn:0000A5A4 ; COMDAT (pick any)
.text$mn:0000A5A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5A4
.text$mn:0000A5A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5A4
.text$mn:0000A5A4 ; Attributes: bp-based frame
.text$mn:0000A5A4
.text$mn:0000A5A4 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_tolower(wchar_t)const
.text$mn:0000A5A4                 public ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:0000A5A4 ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:0000A5A4                                         ; DATA XREF: .rdata:0000E194o
.text$mn:0000A5A4
.text$mn:0000A5A4 var_4           = dword ptr -4
.text$mn:0000A5A4 arg_0           = word ptr  8
.text$mn:0000A5A4
.text$mn:0000A5A4                 push    ebp
.text$mn:0000A5A5                 mov     ebp, esp
.text$mn:0000A5A7                 push    ecx
.text$mn:0000A5A8                 mov     [ebp+var_4], ecx
.text$mn:0000A5AB                 mov     eax, [ebp+var_4]
.text$mn:0000A5AE                 add     eax, 8
.text$mn:0000A5B1                 push    eax
.text$mn:0000A5B2                 movzx   ecx, [ebp+arg_0]
.text$mn:0000A5B6                 push    ecx
.text$mn:0000A5B7                 call    __Towlower
.text$mn:0000A5BC                 add     esp, 8
.text$mn:0000A5BF                 mov     esp, ebp
.text$mn:0000A5C1                 pop     ebp
.text$mn:0000A5C2                 retn    4
.text$mn:0000A5C2 ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:0000A5C2
.text$mn:0000A5C2 ; ---------------------------------------------------------------------------
.text$mn:0000A5C5                 align 4
.text$mn:0000A5C5 _text$mn        ends
.text$mn:0000A5C5
.text$mn:0000A5C8 ; ===========================================================================
.text$mn:0000A5C8
.text$mn:0000A5C8 ; Segment type: Pure code
.text$mn:0000A5C8 ; Segment permissions: Read/Execute
.text$mn:0000A5C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5C8                 assume cs:_text$mn
.text$mn:0000A5C8                 ;org 0A5C8h
.text$mn:0000A5C8 ; COMDAT (pick any)
.text$mn:0000A5C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5C8
.text$mn:0000A5C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5C8
.text$mn:0000A5C8 ; Attributes: bp-based frame
.text$mn:0000A5C8
.text$mn:0000A5C8 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_toupper(wchar_t *, wchar_t const *)const
.text$mn:0000A5C8                 public ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:0000A5C8 ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:0000A5C8                                         ; DATA XREF: .rdata:0000E198o
.text$mn:0000A5C8
.text$mn:0000A5C8 var_4           = dword ptr -4
.text$mn:0000A5C8 arg_0           = dword ptr  8
.text$mn:0000A5C8 arg_4           = dword ptr  0Ch
.text$mn:0000A5C8
.text$mn:0000A5C8                 push    ebp
.text$mn:0000A5C9                 mov     ebp, esp
.text$mn:0000A5CB                 push    ecx
.text$mn:0000A5CC                 mov     [ebp+var_4], ecx
.text$mn:0000A5CF                 push    0AB5h           ; unsigned int
.text$mn:0000A5D4                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A5D9                 mov     eax, [ebp+arg_4]
.text$mn:0000A5DC                 push    eax             ; int
.text$mn:0000A5DD                 mov     ecx, [ebp+arg_0]
.text$mn:0000A5E0                 push    ecx             ; int
.text$mn:0000A5E1                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000A5E6                 add     esp, 10h
.text$mn:0000A5E9                 jmp     short loc_A5F4
.text$mn:0000A5EB ; ---------------------------------------------------------------------------
.text$mn:0000A5EB
.text$mn:0000A5EB loc_A5EB:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+50j
.text$mn:0000A5EB                 mov     edx, [ebp+arg_0]
.text$mn:0000A5EE                 add     edx, 2
.text$mn:0000A5F1                 mov     [ebp+arg_0], edx
.text$mn:0000A5F4
.text$mn:0000A5F4 loc_A5F4:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+21j
.text$mn:0000A5F4                 mov     eax, [ebp+arg_0]
.text$mn:0000A5F7                 cmp     eax, [ebp+arg_4]
.text$mn:0000A5FA                 jz      short loc_A61A
.text$mn:0000A5FC                 mov     ecx, [ebp+var_4]
.text$mn:0000A5FF                 add     ecx, 8
.text$mn:0000A602                 push    ecx
.text$mn:0000A603                 mov     edx, [ebp+arg_0]
.text$mn:0000A606                 movzx   eax, word ptr [edx]
.text$mn:0000A609                 push    eax
.text$mn:0000A60A                 call    __Towupper
.text$mn:0000A60F                 add     esp, 8
.text$mn:0000A612                 mov     ecx, [ebp+arg_0]
.text$mn:0000A615                 mov     [ecx], ax
.text$mn:0000A618                 jmp     short loc_A5EB
.text$mn:0000A61A ; ---------------------------------------------------------------------------
.text$mn:0000A61A
.text$mn:0000A61A loc_A61A:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+32j
.text$mn:0000A61A                 mov     eax, [ebp+arg_0]
.text$mn:0000A61D                 mov     esp, ebp
.text$mn:0000A61F                 pop     ebp
.text$mn:0000A620                 retn    8
.text$mn:0000A620 ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:0000A620
.text$mn:0000A620 ; ---------------------------------------------------------------------------
.text$mn:0000A623                 align 4
.text$mn:0000A623 _text$mn        ends
.text$mn:0000A623
.text$mn:0000A624 ; ===========================================================================
.text$mn:0000A624
.text$mn:0000A624 ; Segment type: Pure code
.text$mn:0000A624 ; Segment permissions: Read/Execute
.text$mn:0000A624 _text$mn        segment para public 'CODE' use32
.text$mn:0000A624                 assume cs:_text$mn
.text$mn:0000A624                 ;org 0A624h
.text$mn:0000A624 ; COMDAT (pick any)
.text$mn:0000A624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A624
.text$mn:0000A624 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A624
.text$mn:0000A624 ; Attributes: bp-based frame
.text$mn:0000A624
.text$mn:0000A624 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_toupper(wchar_t)const
.text$mn:0000A624                 public ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:0000A624 ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:0000A624                                         ; DATA XREF: .rdata:0000E19Co
.text$mn:0000A624
.text$mn:0000A624 var_4           = dword ptr -4
.text$mn:0000A624 arg_0           = word ptr  8
.text$mn:0000A624
.text$mn:0000A624                 push    ebp
.text$mn:0000A625                 mov     ebp, esp
.text$mn:0000A627                 push    ecx
.text$mn:0000A628                 mov     [ebp+var_4], ecx
.text$mn:0000A62B                 mov     eax, [ebp+var_4]
.text$mn:0000A62E                 add     eax, 8
.text$mn:0000A631                 push    eax
.text$mn:0000A632                 movzx   ecx, [ebp+arg_0]
.text$mn:0000A636                 push    ecx
.text$mn:0000A637                 call    __Towupper
.text$mn:0000A63C                 add     esp, 8
.text$mn:0000A63F                 mov     esp, ebp
.text$mn:0000A641                 pop     ebp
.text$mn:0000A642                 retn    4
.text$mn:0000A642 ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:0000A642
.text$mn:0000A642 ; ---------------------------------------------------------------------------
.text$mn:0000A645                 align 4
.text$mn:0000A645 _text$mn        ends
.text$mn:0000A645
.text$mn:0000A648 ; ===========================================================================
.text$mn:0000A648
.text$mn:0000A648 ; Segment type: Pure code
.text$mn:0000A648 ; Segment permissions: Read/Execute
.text$mn:0000A648 _text$mn        segment para public 'CODE' use32
.text$mn:0000A648                 assume cs:_text$mn
.text$mn:0000A648                 ;org 0A648h
.text$mn:0000A648 ; COMDAT (pick any)
.text$mn:0000A648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A648
.text$mn:0000A648 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A648
.text$mn:0000A648 ; Attributes: bp-based frame
.text$mn:0000A648
.text$mn:0000A648 ; protected: virtual char const * __thiscall std::ctype<wchar_t>::do_widen(char const *, char const *, wchar_t *)const
.text$mn:0000A648                 public ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
.text$mn:0000A648 ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z proc near
.text$mn:0000A648                                         ; DATA XREF: .rdata:0000E1A0o
.text$mn:0000A648
.text$mn:0000A648 var_4           = dword ptr -4
.text$mn:0000A648 arg_0           = dword ptr  8
.text$mn:0000A648 arg_4           = dword ptr  0Ch
.text$mn:0000A648 arg_8           = dword ptr  10h
.text$mn:0000A648
.text$mn:0000A648                 push    ebp
.text$mn:0000A649                 mov     ebp, esp
.text$mn:0000A64B                 push    ecx
.text$mn:0000A64C                 mov     [ebp+var_4], ecx
.text$mn:0000A64F                 push    0ACBh           ; unsigned int
.text$mn:0000A654                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A659                 mov     eax, [ebp+arg_4]
.text$mn:0000A65C                 push    eax             ; int
.text$mn:0000A65D                 mov     ecx, [ebp+arg_0]
.text$mn:0000A660                 push    ecx             ; int
.text$mn:0000A661                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:0000A666                 add     esp, 10h
.text$mn:0000A669                 push    0ACCh           ; unsigned int
.text$mn:0000A66E                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A673                 mov     edx, [ebp+arg_8]
.text$mn:0000A676                 push    edx             ; int
.text$mn:0000A677                 call    ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)
.text$mn:0000A67C                 add     esp, 0Ch
.text$mn:0000A67F                 jmp     short loc_A693
.text$mn:0000A681 ; ---------------------------------------------------------------------------
.text$mn:0000A681
.text$mn:0000A681 loc_A681:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+68j
.text$mn:0000A681                 mov     eax, [ebp+arg_0]
.text$mn:0000A684                 add     eax, 1
.text$mn:0000A687                 mov     [ebp+arg_0], eax
.text$mn:0000A68A                 mov     ecx, [ebp+arg_8]
.text$mn:0000A68D                 add     ecx, 2
.text$mn:0000A690                 mov     [ebp+arg_8], ecx
.text$mn:0000A693
.text$mn:0000A693 loc_A693:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+37j
.text$mn:0000A693                 mov     edx, [ebp+arg_0]
.text$mn:0000A696                 cmp     edx, [ebp+arg_4]
.text$mn:0000A699                 jz      short loc_A6B2
.text$mn:0000A69B                 mov     eax, [ebp+arg_0]
.text$mn:0000A69E                 movzx   ecx, byte ptr [eax]
.text$mn:0000A6A1                 push    ecx
.text$mn:0000A6A2                 mov     ecx, [ebp+var_4]
.text$mn:0000A6A5                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:0000A6AA                 mov     edx, [ebp+arg_8]
.text$mn:0000A6AD                 mov     [edx], ax
.text$mn:0000A6B0                 jmp     short loc_A681
.text$mn:0000A6B2 ; ---------------------------------------------------------------------------
.text$mn:0000A6B2
.text$mn:0000A6B2 loc_A6B2:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+51j
.text$mn:0000A6B2                 mov     eax, [ebp+arg_0]
.text$mn:0000A6B5                 mov     esp, ebp
.text$mn:0000A6B7                 pop     ebp
.text$mn:0000A6B8                 retn    0Ch
.text$mn:0000A6B8 ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z endp
.text$mn:0000A6B8
.text$mn:0000A6B8 ; ---------------------------------------------------------------------------
.text$mn:0000A6BB                 align 4
.text$mn:0000A6BB _text$mn        ends
.text$mn:0000A6BB
.text$mn:0000A6BC ; ===========================================================================
.text$mn:0000A6BC
.text$mn:0000A6BC ; Segment type: Pure code
.text$mn:0000A6BC ; Segment permissions: Read/Execute
.text$mn:0000A6BC _text$mn        segment para public 'CODE' use32
.text$mn:0000A6BC                 assume cs:_text$mn
.text$mn:0000A6BC                 ;org 0A6BCh
.text$mn:0000A6BC ; COMDAT (pick any)
.text$mn:0000A6BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A6BC
.text$mn:0000A6BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A6BC
.text$mn:0000A6BC ; Attributes: bp-based frame
.text$mn:0000A6BC
.text$mn:0000A6BC ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_widen(char)const
.text$mn:0000A6BC                 public ?do_widen@?$ctype@_W@std@@MBE_WD@Z
.text$mn:0000A6BC ?do_widen@?$ctype@_W@std@@MBE_WD@Z proc near ; DATA XREF: .rdata:0000E1A4o
.text$mn:0000A6BC
.text$mn:0000A6BC var_4           = dword ptr -4
.text$mn:0000A6BC arg_0           = byte ptr  8
.text$mn:0000A6BC
.text$mn:0000A6BC                 push    ebp
.text$mn:0000A6BD                 mov     ebp, esp
.text$mn:0000A6BF                 push    ecx
.text$mn:0000A6C0                 mov     [ebp+var_4], ecx
.text$mn:0000A6C3                 movzx   eax, [ebp+arg_0]
.text$mn:0000A6C7                 push    eax
.text$mn:0000A6C8                 mov     ecx, [ebp+var_4]
.text$mn:0000A6CB                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:0000A6D0                 mov     esp, ebp
.text$mn:0000A6D2                 pop     ebp
.text$mn:0000A6D3                 retn    4
.text$mn:0000A6D3 ?do_widen@?$ctype@_W@std@@MBE_WD@Z endp
.text$mn:0000A6D3
.text$mn:0000A6D3 ; ---------------------------------------------------------------------------
.text$mn:0000A6D6                 align 4
.text$mn:0000A6D6 _text$mn        ends
.text$mn:0000A6D6
.text$mn:0000A6D8 ; ===========================================================================
.text$mn:0000A6D8
.text$mn:0000A6D8 ; Segment type: Pure code
.text$mn:0000A6D8 ; Segment permissions: Read/Execute
.text$mn:0000A6D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A6D8                 assume cs:_text$mn
.text$mn:0000A6D8                 ;org 0A6D8h
.text$mn:0000A6D8 ; COMDAT (pick any)
.text$mn:0000A6D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A6D8
.text$mn:0000A6D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A6D8
.text$mn:0000A6D8 ; Attributes: bp-based frame
.text$mn:0000A6D8
.text$mn:0000A6D8 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::eback(void)const
.text$mn:0000A6D8                 public ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000A6D8 ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000A6D8                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+3Bp
.text$mn:0000A6D8                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+4Bp ...
.text$mn:0000A6D8
.text$mn:0000A6D8 var_4           = dword ptr -4
.text$mn:0000A6D8
.text$mn:0000A6D8                 push    ebp
.text$mn:0000A6D9                 mov     ebp, esp
.text$mn:0000A6DB                 push    ecx
.text$mn:0000A6DC                 mov     [ebp+var_4], ecx
.text$mn:0000A6DF                 mov     eax, [ebp+var_4]
.text$mn:0000A6E2                 mov     ecx, [eax+0Ch]
.text$mn:0000A6E5                 mov     eax, [ecx]
.text$mn:0000A6E7                 mov     esp, ebp
.text$mn:0000A6E9                 pop     ebp
.text$mn:0000A6EA                 retn
.text$mn:0000A6EA ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000A6EA
.text$mn:0000A6EA ; ---------------------------------------------------------------------------
.text$mn:0000A6EB                 align 4
.text$mn:0000A6EB _text$mn        ends
.text$mn:0000A6EB
.text$mn:0000A6EC ; ===========================================================================
.text$mn:0000A6EC
.text$mn:0000A6EC ; Segment type: Pure code
.text$mn:0000A6EC ; Segment permissions: Read/Execute
.text$mn:0000A6EC _text$mn        segment para public 'CODE' use32
.text$mn:0000A6EC                 assume cs:_text$mn
.text$mn:0000A6EC                 ;org 0A6ECh
.text$mn:0000A6EC ; COMDAT (pick any)
.text$mn:0000A6EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A6EC
.text$mn:0000A6EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A6EC
.text$mn:0000A6EC ; Attributes: bp-based frame
.text$mn:0000A6EC
.text$mn:0000A6EC ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::egptr(void)const
.text$mn:0000A6EC                 public ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000A6EC ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000A6EC                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+30p
.text$mn:0000A6EC                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+E4p ...
.text$mn:0000A6EC
.text$mn:0000A6EC var_4           = dword ptr -4
.text$mn:0000A6EC
.text$mn:0000A6EC                 push    ebp
.text$mn:0000A6ED                 mov     ebp, esp
.text$mn:0000A6EF                 push    ecx
.text$mn:0000A6F0                 mov     [ebp+var_4], ecx
.text$mn:0000A6F3                 mov     eax, [ebp+var_4]
.text$mn:0000A6F6                 mov     ecx, [eax+1Ch]
.text$mn:0000A6F9                 mov     edx, [ebp+var_4]
.text$mn:0000A6FC                 mov     eax, [edx+2Ch]
.text$mn:0000A6FF                 mov     edx, [eax]
.text$mn:0000A701                 mov     eax, [ecx]
.text$mn:0000A703                 lea     eax, [eax+edx*2]
.text$mn:0000A706                 mov     esp, ebp
.text$mn:0000A708                 pop     ebp
.text$mn:0000A709                 retn
.text$mn:0000A709 ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000A709
.text$mn:0000A709 ; ---------------------------------------------------------------------------
.text$mn:0000A70A                 align 4
.text$mn:0000A70A _text$mn        ends
.text$mn:0000A70A
.text$mn:0000A70C ; ===========================================================================
.text$mn:0000A70C
.text$mn:0000A70C ; Segment type: Pure code
.text$mn:0000A70C ; Segment permissions: Read/Execute
.text$mn:0000A70C _text$mn        segment para public 'CODE' use32
.text$mn:0000A70C                 assume cs:_text$mn
.text$mn:0000A70C                 ;org 0A70Ch
.text$mn:0000A70C ; COMDAT (pick any)
.text$mn:0000A70C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A70C
.text$mn:0000A70C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A70C
.text$mn:0000A70C ; Attributes: bp-based frame
.text$mn:0000A70C
.text$mn:0000A70C ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::empty(void)const
.text$mn:0000A70C                 public ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
.text$mn:0000A70C ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
.text$mn:0000A70C                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+39p
.text$mn:0000A70C
.text$mn:0000A70C var_8           = dword ptr -8
.text$mn:0000A70C var_4           = dword ptr -4
.text$mn:0000A70C
.text$mn:0000A70C                 push    ebp
.text$mn:0000A70D                 mov     ebp, esp
.text$mn:0000A70F                 sub     esp, 8
.text$mn:0000A712                 mov     [ebp+var_8], ecx
.text$mn:0000A715                 mov     eax, [ebp+var_8]
.text$mn:0000A718                 cmp     dword ptr [eax+14h], 0
.text$mn:0000A71C                 jnz     short loc_A727
.text$mn:0000A71E                 mov     [ebp+var_4], 1
.text$mn:0000A725                 jmp     short loc_A72E
.text$mn:0000A727 ; ---------------------------------------------------------------------------
.text$mn:0000A727
.text$mn:0000A727 loc_A727:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+10j
.text$mn:0000A727                 mov     [ebp+var_4], 0
.text$mn:0000A72E
.text$mn:0000A72E loc_A72E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+19j
.text$mn:0000A72E                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A731                 mov     esp, ebp
.text$mn:0000A733                 pop     ebp
.text$mn:0000A734                 retn
.text$mn:0000A734 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ endp
.text$mn:0000A734
.text$mn:0000A734 ; ---------------------------------------------------------------------------
.text$mn:0000A735                 align 4
.text$mn:0000A735 _text$mn        ends
.text$mn:0000A735
.text$mn:0000A738 ; ===========================================================================
.text$mn:0000A738
.text$mn:0000A738 ; Segment type: Pure code
.text$mn:0000A738 ; Segment permissions: Read/Execute
.text$mn:0000A738 _text$mn        segment para public 'CODE' use32
.text$mn:0000A738                 assume cs:_text$mn
.text$mn:0000A738                 ;org 0A738h
.text$mn:0000A738 ; COMDAT (pick any)
.text$mn:0000A738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A738
.text$mn:0000A738 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A738
.text$mn:0000A738 ; Attributes: bp-based frame
.text$mn:0000A738
.text$mn:0000A738 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::empty(void)const
.text$mn:0000A738                 public ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
.text$mn:0000A738 ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ proc near
.text$mn:0000A738                                         ; CODE XREF: TiXmlAttribute::Next(void)+10p
.text$mn:0000A738                                         ; TiXmlAttribute::Next(void)+25p ...
.text$mn:0000A738
.text$mn:0000A738 var_8           = dword ptr -8
.text$mn:0000A738 var_4           = dword ptr -4
.text$mn:0000A738
.text$mn:0000A738                 push    ebp
.text$mn:0000A739                 mov     ebp, esp
.text$mn:0000A73B                 sub     esp, 8
.text$mn:0000A73E                 mov     [ebp+var_8], ecx
.text$mn:0000A741                 mov     eax, [ebp+var_8]
.text$mn:0000A744                 cmp     dword ptr [eax+14h], 0
.text$mn:0000A748                 jnz     short loc_A753
.text$mn:0000A74A                 mov     [ebp+var_4], 1
.text$mn:0000A751                 jmp     short loc_A75A
.text$mn:0000A753 ; ---------------------------------------------------------------------------
.text$mn:0000A753
.text$mn:0000A753 loc_A753:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)+10j
.text$mn:0000A753                 mov     [ebp+var_4], 0
.text$mn:0000A75A
.text$mn:0000A75A loc_A75A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)+19j
.text$mn:0000A75A                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A75D                 mov     esp, ebp
.text$mn:0000A75F                 pop     ebp
.text$mn:0000A760                 retn
.text$mn:0000A760 ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ endp
.text$mn:0000A760
.text$mn:0000A760 ; ---------------------------------------------------------------------------
.text$mn:0000A761                 align 4
.text$mn:0000A761 _text$mn        ends
.text$mn:0000A761
.text$mn:0000A764 ; ===========================================================================
.text$mn:0000A764
.text$mn:0000A764 ; Segment type: Pure code
.text$mn:0000A764 ; Segment permissions: Read/Execute
.text$mn:0000A764 _text$mn        segment para public 'CODE' use32
.text$mn:0000A764                 assume cs:_text$mn
.text$mn:0000A764                 ;org 0A764h
.text$mn:0000A764 ; COMDAT (pick any)
.text$mn:0000A764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A764
.text$mn:0000A764 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A764
.text$mn:0000A764 ; Attributes: bp-based frame
.text$mn:0000A764
.text$mn:0000A764 ; public: static unsigned short __cdecl std::char_traits<wchar_t>::eof(void)
.text$mn:0000A764                 public ?eof@?$char_traits@_W@std@@SAGXZ
.text$mn:0000A764 ?eof@?$char_traits@_W@std@@SAGXZ proc near
.text$mn:0000A764                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+167p
.text$mn:0000A764                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+239p ...
.text$mn:0000A764                 push    ebp
.text$mn:0000A765                 mov     ebp, esp
.text$mn:0000A767                 mov     eax, 0FFFFh
.text$mn:0000A76C                 pop     ebp
.text$mn:0000A76D                 retn
.text$mn:0000A76D ?eof@?$char_traits@_W@std@@SAGXZ endp
.text$mn:0000A76D
.text$mn:0000A76D ; ---------------------------------------------------------------------------
.text$mn:0000A76E                 align 10h
.text$mn:0000A76E _text$mn        ends
.text$mn:0000A76E
.text$mn:0000A770 ; ===========================================================================
.text$mn:0000A770
.text$mn:0000A770 ; Segment type: Pure code
.text$mn:0000A770 ; Segment permissions: Read/Execute
.text$mn:0000A770 _text$mn        segment para public 'CODE' use32
.text$mn:0000A770                 assume cs:_text$mn
.text$mn:0000A770                 ;org 0A770h
.text$mn:0000A770 ; COMDAT (pick any)
.text$mn:0000A770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A770
.text$mn:0000A770 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A770
.text$mn:0000A770 ; Attributes: bp-based frame
.text$mn:0000A770
.text$mn:0000A770 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::epptr(void)const
.text$mn:0000A770                 public ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000A770 ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000A770                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+23p
.text$mn:0000A770                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+7Cp ...
.text$mn:0000A770
.text$mn:0000A770 var_4           = dword ptr -4
.text$mn:0000A770
.text$mn:0000A770                 push    ebp
.text$mn:0000A771                 mov     ebp, esp
.text$mn:0000A773                 push    ecx
.text$mn:0000A774                 mov     [ebp+var_4], ecx
.text$mn:0000A777                 mov     eax, [ebp+var_4]
.text$mn:0000A77A                 mov     ecx, [eax+20h]
.text$mn:0000A77D                 mov     edx, [ebp+var_4]
.text$mn:0000A780                 mov     eax, [edx+30h]
.text$mn:0000A783                 mov     edx, [eax]
.text$mn:0000A785                 mov     eax, [ecx]
.text$mn:0000A787                 lea     eax, [eax+edx*2]
.text$mn:0000A78A                 mov     esp, ebp
.text$mn:0000A78C                 pop     ebp
.text$mn:0000A78D                 retn
.text$mn:0000A78D ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000A78D
.text$mn:0000A78D ; ---------------------------------------------------------------------------
.text$mn:0000A78E                 align 10h
.text$mn:0000A78E _text$mn        ends
.text$mn:0000A78E
.text$mn:0000A790 ; ===========================================================================
.text$mn:0000A790
.text$mn:0000A790 ; Segment type: Pure code
.text$mn:0000A790 ; Segment permissions: Read/Execute
.text$mn:0000A790 _text$mn        segment para public 'CODE' use32
.text$mn:0000A790                 assume cs:_text$mn
.text$mn:0000A790                 ;org 0A790h
.text$mn:0000A790 ; COMDAT (pick any)
.text$mn:0000A790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A790
.text$mn:0000A790 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A790
.text$mn:0000A790 ; Attributes: bp-based frame
.text$mn:0000A790
.text$mn:0000A790 ; public: static bool __cdecl std::char_traits<wchar_t>::eq(wchar_t const &, wchar_t const &)
.text$mn:0000A790                 public ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
.text$mn:0000A790 ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z proc near
.text$mn:0000A790                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+73p
.text$mn:0000A790
.text$mn:0000A790 var_4           = dword ptr -4
.text$mn:0000A790 arg_0           = dword ptr  8
.text$mn:0000A790 arg_4           = dword ptr  0Ch
.text$mn:0000A790
.text$mn:0000A790                 push    ebp
.text$mn:0000A791                 mov     ebp, esp
.text$mn:0000A793                 push    ecx
.text$mn:0000A794                 mov     eax, [ebp+arg_0]
.text$mn:0000A797                 movzx   ecx, word ptr [eax]
.text$mn:0000A79A                 mov     edx, [ebp+arg_4]
.text$mn:0000A79D                 movzx   eax, word ptr [edx]
.text$mn:0000A7A0                 cmp     ecx, eax
.text$mn:0000A7A2                 jnz     short loc_A7AD
.text$mn:0000A7A4                 mov     [ebp+var_4], 1
.text$mn:0000A7AB                 jmp     short loc_A7B4
.text$mn:0000A7AD ; ---------------------------------------------------------------------------
.text$mn:0000A7AD
.text$mn:0000A7AD loc_A7AD:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+12j
.text$mn:0000A7AD                 mov     [ebp+var_4], 0
.text$mn:0000A7B4
.text$mn:0000A7B4 loc_A7B4:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+1Bj
.text$mn:0000A7B4                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A7B7                 mov     esp, ebp
.text$mn:0000A7B9                 pop     ebp
.text$mn:0000A7BA                 retn
.text$mn:0000A7BA ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z endp
.text$mn:0000A7BA
.text$mn:0000A7BA ; ---------------------------------------------------------------------------
.text$mn:0000A7BB                 align 4
.text$mn:0000A7BB _text$mn        ends
.text$mn:0000A7BB
.text$mn:0000A7BC ; ===========================================================================
.text$mn:0000A7BC
.text$mn:0000A7BC ; Segment type: Pure code
.text$mn:0000A7BC ; Segment permissions: Read/Execute
.text$mn:0000A7BC _text$mn        segment para public 'CODE' use32
.text$mn:0000A7BC                 assume cs:_text$mn
.text$mn:0000A7BC                 ;org 0A7BCh
.text$mn:0000A7BC ; COMDAT (pick any)
.text$mn:0000A7BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7BC
.text$mn:0000A7BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7BC
.text$mn:0000A7BC ; Attributes: bp-based frame
.text$mn:0000A7BC
.text$mn:0000A7BC ; public: static bool __cdecl std::char_traits<wchar_t>::eq_int_type(unsigned short const &, unsigned short const &)
.text$mn:0000A7BC                 public ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
.text$mn:0000A7BC ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z proc near
.text$mn:0000A7BC                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+178p
.text$mn:0000A7BC                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+24Ap ...
.text$mn:0000A7BC
.text$mn:0000A7BC var_4           = dword ptr -4
.text$mn:0000A7BC arg_0           = dword ptr  8
.text$mn:0000A7BC arg_4           = dword ptr  0Ch
.text$mn:0000A7BC
.text$mn:0000A7BC                 push    ebp
.text$mn:0000A7BD                 mov     ebp, esp
.text$mn:0000A7BF                 push    ecx
.text$mn:0000A7C0                 mov     eax, [ebp+arg_0]
.text$mn:0000A7C3                 movzx   ecx, word ptr [eax]
.text$mn:0000A7C6                 mov     edx, [ebp+arg_4]
.text$mn:0000A7C9                 movzx   eax, word ptr [edx]
.text$mn:0000A7CC                 cmp     ecx, eax
.text$mn:0000A7CE                 jnz     short loc_A7D9
.text$mn:0000A7D0                 mov     [ebp+var_4], 1
.text$mn:0000A7D7                 jmp     short loc_A7E0
.text$mn:0000A7D9 ; ---------------------------------------------------------------------------
.text$mn:0000A7D9
.text$mn:0000A7D9 loc_A7D9:                               ; CODE XREF: std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)+12j
.text$mn:0000A7D9                 mov     [ebp+var_4], 0
.text$mn:0000A7E0
.text$mn:0000A7E0 loc_A7E0:                               ; CODE XREF: std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)+1Bj
.text$mn:0000A7E0                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A7E3                 mov     esp, ebp
.text$mn:0000A7E5                 pop     ebp
.text$mn:0000A7E6                 retn
.text$mn:0000A7E6 ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z endp
.text$mn:0000A7E6
.text$mn:0000A7E6 ; ---------------------------------------------------------------------------
.text$mn:0000A7E7                 align 4
.text$mn:0000A7E7 _text$mn        ends
.text$mn:0000A7E7
.text$mn:0000A7E8 ; ===========================================================================
.text$mn:0000A7E8
.text$mn:0000A7E8 ; Segment type: Pure code
.text$mn:0000A7E8 ; Segment permissions: Read/Execute
.text$mn:0000A7E8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7E8                 assume cs:_text$mn
.text$mn:0000A7E8                 ;org 0A7E8h
.text$mn:0000A7E8 ; COMDAT (pick any)
.text$mn:0000A7E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7E8
.text$mn:0000A7E8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7E8
.text$mn:0000A7E8 ; Attributes: bp-based frame
.text$mn:0000A7E8
.text$mn:0000A7E8 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000A7E8                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000A7E8 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000A7E8                                         ; DATA XREF: .rdata:0000E1C4o
.text$mn:0000A7E8                                         ; .rdata:0000E1FCo ...
.text$mn:0000A7E8
.text$mn:0000A7E8 var_8           = dword ptr -8
.text$mn:0000A7E8 var_4           = dword ptr -4
.text$mn:0000A7E8 arg_0           = dword ptr  8
.text$mn:0000A7E8 arg_4           = dword ptr  0Ch
.text$mn:0000A7E8
.text$mn:0000A7E8                 push    ebp
.text$mn:0000A7E9                 mov     ebp, esp
.text$mn:0000A7EB                 sub     esp, 8
.text$mn:0000A7EE                 mov     [ebp+var_8], ecx
.text$mn:0000A7F1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A7F4                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000A7F9                 push    eax
.text$mn:0000A7FA                 mov     ecx, [ebp+var_8]
.text$mn:0000A7FD                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000A802                 movzx   eax, al
.text$mn:0000A805                 test    eax, eax
.text$mn:0000A807                 jz      short loc_A81F
.text$mn:0000A809                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A80C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000A811                 cmp     eax, [ebp+arg_4]
.text$mn:0000A814                 jnz     short loc_A81F
.text$mn:0000A816                 mov     [ebp+var_4], 1
.text$mn:0000A81D                 jmp     short loc_A826
.text$mn:0000A81F ; ---------------------------------------------------------------------------
.text$mn:0000A81F
.text$mn:0000A81F loc_A81F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000A81F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000A81F                 mov     [ebp+var_4], 0
.text$mn:0000A826
.text$mn:0000A826 loc_A826:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000A826                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A829                 mov     esp, ebp
.text$mn:0000A82B                 pop     ebp
.text$mn:0000A82C                 retn    8
.text$mn:0000A82C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000A82C
.text$mn:0000A82C ; ---------------------------------------------------------------------------
.text$mn:0000A82F                 align 10h
.text$mn:0000A82F _text$mn        ends
.text$mn:0000A82F
.text$mn:0000A830 ; ===========================================================================
.text$mn:0000A830
.text$mn:0000A830 ; Segment type: Pure code
.text$mn:0000A830 ; Segment permissions: Read/Execute
.text$mn:0000A830 _text$mn        segment para public 'CODE' use32
.text$mn:0000A830                 assume cs:_text$mn
.text$mn:0000A830                 ;org 0A830h
.text$mn:0000A830 ; COMDAT (pick any)
.text$mn:0000A830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A830
.text$mn:0000A830 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A830
.text$mn:0000A830 ; Attributes: bp-based frame
.text$mn:0000A830
.text$mn:0000A830 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:0000A830                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:0000A830 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:0000A830                                         ; DATA XREF: .rdata:0000E1C8o
.text$mn:0000A830                                         ; .rdata:0000E200o ...
.text$mn:0000A830
.text$mn:0000A830 var_C           = byte ptr -0Ch
.text$mn:0000A830 var_4           = dword ptr -4
.text$mn:0000A830 arg_0           = dword ptr  8
.text$mn:0000A830 arg_4           = dword ptr  0Ch
.text$mn:0000A830
.text$mn:0000A830                 push    ebp
.text$mn:0000A831                 mov     ebp, esp
.text$mn:0000A833                 sub     esp, 0Ch
.text$mn:0000A836                 mov     [ebp+var_4], ecx
.text$mn:0000A839                 mov     eax, [ebp+arg_4]
.text$mn:0000A83C                 push    eax             ; std::error_condition *
.text$mn:0000A83D                 mov     ecx, [ebp+arg_0]
.text$mn:0000A840                 push    ecx
.text$mn:0000A841                 lea     edx, [ebp+var_C]
.text$mn:0000A844                 push    edx
.text$mn:0000A845                 mov     eax, [ebp+var_4]
.text$mn:0000A848                 mov     edx, [eax]
.text$mn:0000A84A                 mov     ecx, [ebp+var_4]
.text$mn:0000A84D                 mov     eax, [edx+0Ch]
.text$mn:0000A850                 call    eax
.text$mn:0000A852                 mov     ecx, eax
.text$mn:0000A854                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:0000A859                 mov     esp, ebp
.text$mn:0000A85B                 pop     ebp
.text$mn:0000A85C                 retn    8
.text$mn:0000A85C ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000A85C
.text$mn:0000A85C ; ---------------------------------------------------------------------------
.text$mn:0000A85F                 align 10h
.text$mn:0000A85F _text$mn        ends
.text$mn:0000A85F
.text$mn:0000A860 ; ===========================================================================
.text$mn:0000A860
.text$mn:0000A860 ; Segment type: Pure code
.text$mn:0000A860 ; Segment permissions: Read/Execute
.text$mn:0000A860 _text$mn        segment para public 'CODE' use32
.text$mn:0000A860                 assume cs:_text$mn
.text$mn:0000A860                 ;org 0A860h
.text$mn:0000A860 ; COMDAT (pick any)
.text$mn:0000A860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A860
.text$mn:0000A860 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A860
.text$mn:0000A860 ; Attributes: bp-based frame
.text$mn:0000A860
.text$mn:0000A860 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:0000A860                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:0000A860 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000A860                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:0000A860
.text$mn:0000A860 var_4           = dword ptr -4
.text$mn:0000A860 arg_0           = dword ptr  8
.text$mn:0000A860
.text$mn:0000A860                 push    ebp
.text$mn:0000A861                 mov     ebp, esp
.text$mn:0000A863                 push    ecx
.text$mn:0000A864                 mov     [ebp+var_4], ecx
.text$mn:0000A867                 mov     eax, [ebp+var_4]
.text$mn:0000A86A                 mov     ecx, [eax+14h]
.text$mn:0000A86D                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A870                 jnb     short loc_A87A
.text$mn:0000A872                 mov     ecx, [ebp+var_4]
.text$mn:0000A875                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000A87A
.text$mn:0000A87A loc_A87A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000A87A                 mov     edx, [ebp+arg_0]
.text$mn:0000A87D                 push    edx
.text$mn:0000A87E                 mov     ecx, [ebp+var_4]
.text$mn:0000A881                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A886                 mov     eax, [ebp+var_4]
.text$mn:0000A889                 mov     esp, ebp
.text$mn:0000A88B                 pop     ebp
.text$mn:0000A88C                 retn    4
.text$mn:0000A88C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000A88C
.text$mn:0000A88C ; ---------------------------------------------------------------------------
.text$mn:0000A88F                 align 10h
.text$mn:0000A88F _text$mn        ends
.text$mn:0000A88F
.text$mn:0000A890 ; ===========================================================================
.text$mn:0000A890
.text$mn:0000A890 ; Segment type: Pure code
.text$mn:0000A890 ; Segment permissions: Read/Execute
.text$mn:0000A890 _text$mn        segment para public 'CODE' use32
.text$mn:0000A890                 assume cs:_text$mn
.text$mn:0000A890                 ;org 0A890h
.text$mn:0000A890 ; COMDAT (pick any)
.text$mn:0000A890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A890
.text$mn:0000A890 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A890
.text$mn:0000A890 ; Attributes: bp-based frame
.text$mn:0000A890
.text$mn:0000A890 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000A890                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000A890 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000A890                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000A890
.text$mn:0000A890 var_C           = dword ptr -0Ch
.text$mn:0000A890 Dst             = dword ptr -8
.text$mn:0000A890 var_4           = dword ptr -4
.text$mn:0000A890 arg_0           = dword ptr  8
.text$mn:0000A890 arg_4           = dword ptr  0Ch
.text$mn:0000A890
.text$mn:0000A890                 push    ebp
.text$mn:0000A891                 mov     ebp, esp
.text$mn:0000A893                 sub     esp, 0Ch
.text$mn:0000A896                 mov     [ebp+var_4], ecx
.text$mn:0000A899                 mov     eax, [ebp+var_4]
.text$mn:0000A89C                 mov     ecx, [eax+14h]
.text$mn:0000A89F                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A8A2                 jnb     short loc_A8AC
.text$mn:0000A8A4                 mov     ecx, [ebp+var_4]
.text$mn:0000A8A7                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000A8AC
.text$mn:0000A8AC loc_A8AC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000A8AC                 mov     edx, [ebp+var_4]
.text$mn:0000A8AF                 mov     eax, [edx+14h]
.text$mn:0000A8B2                 sub     eax, [ebp+arg_0]
.text$mn:0000A8B5                 cmp     eax, [ebp+arg_4]
.text$mn:0000A8B8                 ja      short loc_A8C8
.text$mn:0000A8BA                 mov     ecx, [ebp+arg_0]
.text$mn:0000A8BD                 push    ecx
.text$mn:0000A8BE                 mov     ecx, [ebp+var_4]
.text$mn:0000A8C1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A8C6                 jmp     short loc_A90E
.text$mn:0000A8C8 ; ---------------------------------------------------------------------------
.text$mn:0000A8C8
.text$mn:0000A8C8 loc_A8C8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000A8C8                 cmp     [ebp+arg_4], 0
.text$mn:0000A8CC                 jbe     short loc_A90E
.text$mn:0000A8CE                 mov     ecx, [ebp+var_4]
.text$mn:0000A8D1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A8D6                 add     eax, [ebp+arg_0]
.text$mn:0000A8D9                 mov     [ebp+Dst], eax
.text$mn:0000A8DC                 mov     edx, [ebp+var_4]
.text$mn:0000A8DF                 mov     eax, [edx+14h]
.text$mn:0000A8E2                 sub     eax, [ebp+arg_4]
.text$mn:0000A8E5                 mov     [ebp+var_C], eax
.text$mn:0000A8E8                 mov     ecx, [ebp+var_C]
.text$mn:0000A8EB                 sub     ecx, [ebp+arg_0]
.text$mn:0000A8EE                 push    ecx             ; Size
.text$mn:0000A8EF                 mov     edx, [ebp+Dst]
.text$mn:0000A8F2                 add     edx, [ebp+arg_4]
.text$mn:0000A8F5                 push    edx             ; Src
.text$mn:0000A8F6                 mov     eax, [ebp+Dst]
.text$mn:0000A8F9                 push    eax             ; Dst
.text$mn:0000A8FA                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000A8FF                 add     esp, 0Ch
.text$mn:0000A902                 mov     ecx, [ebp+var_C]
.text$mn:0000A905                 push    ecx
.text$mn:0000A906                 mov     ecx, [ebp+var_4]
.text$mn:0000A909                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A90E
.text$mn:0000A90E loc_A90E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000A90E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000A90E                 mov     eax, [ebp+var_4]
.text$mn:0000A911                 mov     esp, ebp
.text$mn:0000A913                 pop     ebp
.text$mn:0000A914                 retn    8
.text$mn:0000A914 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000A914
.text$mn:0000A914 ; ---------------------------------------------------------------------------
.text$mn:0000A917                 align 4
.text$mn:0000A917 _text$mn        ends
.text$mn:0000A917
.text$mn:0000A918 ; ===========================================================================
.text$mn:0000A918
.text$mn:0000A918 ; Segment type: Pure code
.text$mn:0000A918 ; Segment permissions: Read/Execute
.text$mn:0000A918 _text$mn        segment para public 'CODE' use32
.text$mn:0000A918                 assume cs:_text$mn
.text$mn:0000A918                 ;org 0A918h
.text$mn:0000A918 ; COMDAT (pick any)
.text$mn:0000A918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A918
.text$mn:0000A918 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A918
.text$mn:0000A918 ; Attributes: bp-based frame
.text$mn:0000A918
.text$mn:0000A918 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000A918                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000A918 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000A918                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000A918
.text$mn:0000A918 var_4           = dword ptr -4
.text$mn:0000A918 arg_0           = dword ptr  8
.text$mn:0000A918
.text$mn:0000A918                 push    ebp
.text$mn:0000A919                 mov     ebp, esp
.text$mn:0000A91B                 push    ecx
.text$mn:0000A91C                 mov     [ebp+var_4], ecx
.text$mn:0000A91F                 mov     eax, [ebp+var_4]
.text$mn:0000A922                 mov     ecx, [eax+14h]
.text$mn:0000A925                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A928                 jnb     short loc_A932
.text$mn:0000A92A                 mov     ecx, [ebp+var_4]
.text$mn:0000A92D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A932
.text$mn:0000A932 loc_A932:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:0000A932                 mov     edx, [ebp+arg_0]
.text$mn:0000A935                 push    edx
.text$mn:0000A936                 mov     ecx, [ebp+var_4]
.text$mn:0000A939                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A93E                 mov     eax, [ebp+var_4]
.text$mn:0000A941                 mov     esp, ebp
.text$mn:0000A943                 pop     ebp
.text$mn:0000A944                 retn    4
.text$mn:0000A944 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000A944
.text$mn:0000A944 ; ---------------------------------------------------------------------------
.text$mn:0000A947                 align 4
.text$mn:0000A947 _text$mn        ends
.text$mn:0000A947
.text$mn:0000A948 ; ===========================================================================
.text$mn:0000A948
.text$mn:0000A948 ; Segment type: Pure code
.text$mn:0000A948 ; Segment permissions: Read/Execute
.text$mn:0000A948 _text$mn        segment para public 'CODE' use32
.text$mn:0000A948                 assume cs:_text$mn
.text$mn:0000A948                 ;org 0A948h
.text$mn:0000A948 ; COMDAT (pick any)
.text$mn:0000A948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A948
.text$mn:0000A948 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A948
.text$mn:0000A948 ; Attributes: bp-based frame
.text$mn:0000A948
.text$mn:0000A948 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:0000A948                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:0000A948 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000A948                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:0000A948
.text$mn:0000A948 var_C           = dword ptr -0Ch
.text$mn:0000A948 Dst             = dword ptr -8
.text$mn:0000A948 var_4           = dword ptr -4
.text$mn:0000A948 arg_0           = dword ptr  8
.text$mn:0000A948 arg_4           = dword ptr  0Ch
.text$mn:0000A948
.text$mn:0000A948                 push    ebp
.text$mn:0000A949                 mov     ebp, esp
.text$mn:0000A94B                 sub     esp, 0Ch
.text$mn:0000A94E                 mov     [ebp+var_4], ecx
.text$mn:0000A951                 mov     eax, [ebp+var_4]
.text$mn:0000A954                 mov     ecx, [eax+14h]
.text$mn:0000A957                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A95A                 jnb     short loc_A964
.text$mn:0000A95C                 mov     ecx, [ebp+var_4]
.text$mn:0000A95F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A964
.text$mn:0000A964 loc_A964:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:0000A964                 mov     edx, [ebp+var_4]
.text$mn:0000A967                 mov     eax, [edx+14h]
.text$mn:0000A96A                 sub     eax, [ebp+arg_0]
.text$mn:0000A96D                 cmp     eax, [ebp+arg_4]
.text$mn:0000A970                 ja      short loc_A980
.text$mn:0000A972                 mov     ecx, [ebp+arg_0]
.text$mn:0000A975                 push    ecx
.text$mn:0000A976                 mov     ecx, [ebp+var_4]
.text$mn:0000A979                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A97E                 jmp     short loc_A9CC
.text$mn:0000A980 ; ---------------------------------------------------------------------------
.text$mn:0000A980
.text$mn:0000A980 loc_A980:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:0000A980                 cmp     [ebp+arg_4], 0
.text$mn:0000A984                 jbe     short loc_A9CC
.text$mn:0000A986                 mov     ecx, [ebp+var_4]
.text$mn:0000A989                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A98E                 mov     edx, [ebp+arg_0]
.text$mn:0000A991                 lea     eax, [eax+edx*2]
.text$mn:0000A994                 mov     [ebp+Dst], eax
.text$mn:0000A997                 mov     ecx, [ebp+var_4]
.text$mn:0000A99A                 mov     edx, [ecx+14h]
.text$mn:0000A99D                 sub     edx, [ebp+arg_4]
.text$mn:0000A9A0                 mov     [ebp+var_C], edx
.text$mn:0000A9A3                 mov     eax, [ebp+var_C]
.text$mn:0000A9A6                 sub     eax, [ebp+arg_0]
.text$mn:0000A9A9                 push    eax             ; int
.text$mn:0000A9AA                 mov     ecx, [ebp+arg_4]
.text$mn:0000A9AD                 mov     edx, [ebp+Dst]
.text$mn:0000A9B0                 lea     eax, [edx+ecx*2]
.text$mn:0000A9B3                 push    eax             ; Src
.text$mn:0000A9B4                 mov     ecx, [ebp+Dst]
.text$mn:0000A9B7                 push    ecx             ; Dst
.text$mn:0000A9B8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A9BD                 add     esp, 0Ch
.text$mn:0000A9C0                 mov     edx, [ebp+var_C]
.text$mn:0000A9C3                 push    edx
.text$mn:0000A9C4                 mov     ecx, [ebp+var_4]
.text$mn:0000A9C7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A9CC
.text$mn:0000A9CC loc_A9CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000A9CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000A9CC                 mov     eax, [ebp+var_4]
.text$mn:0000A9CF                 mov     esp, ebp
.text$mn:0000A9D1                 pop     ebp
.text$mn:0000A9D2                 retn    8
.text$mn:0000A9D2 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000A9D2
.text$mn:0000A9D2 ; ---------------------------------------------------------------------------
.text$mn:0000A9D5                 align 4
.text$mn:0000A9D5 _text$mn        ends
.text$mn:0000A9D5
.text$mn:0000A9D8 ; ===========================================================================
.text$mn:0000A9D8
.text$mn:0000A9D8 ; Segment type: Pure code
.text$mn:0000A9D8 ; Segment permissions: Read/Execute
.text$mn:0000A9D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9D8                 assume cs:_text$mn
.text$mn:0000A9D8                 ;org 0A9D8h
.text$mn:0000A9D8 ; COMDAT (pick any)
.text$mn:0000A9D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9D8
.text$mn:0000A9D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9D8
.text$mn:0000A9D8 ; Attributes: bp-based frame
.text$mn:0000A9D8
.text$mn:0000A9D8 ; public: wchar_t __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::fill(void)const
.text$mn:0000A9D8                 public ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
.text$mn:0000A9D8 ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ proc near
.text$mn:0000A9D8                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+143p
.text$mn:0000A9D8                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+215p ...
.text$mn:0000A9D8
.text$mn:0000A9D8 var_4           = dword ptr -4
.text$mn:0000A9D8
.text$mn:0000A9D8                 push    ebp
.text$mn:0000A9D9                 mov     ebp, esp
.text$mn:0000A9DB                 push    ecx
.text$mn:0000A9DC                 mov     [ebp+var_4], ecx
.text$mn:0000A9DF                 mov     eax, [ebp+var_4]
.text$mn:0000A9E2                 mov     ax, [eax+40h]
.text$mn:0000A9E6                 mov     esp, ebp
.text$mn:0000A9E8                 pop     ebp
.text$mn:0000A9E9                 retn
.text$mn:0000A9E9 ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ endp
.text$mn:0000A9E9
.text$mn:0000A9E9 ; ---------------------------------------------------------------------------
.text$mn:0000A9EA                 align 4
.text$mn:0000A9EA _text$mn        ends
.text$mn:0000A9EA
.text$mn:0000A9EC ; ===========================================================================
.text$mn:0000A9EC
.text$mn:0000A9EC ; Segment type: Pure code
.text$mn:0000A9EC ; Segment permissions: Read/Execute
.text$mn:0000A9EC _text$mn        segment para public 'CODE' use32
.text$mn:0000A9EC                 assume cs:_text$mn
.text$mn:0000A9EC                 ;org 0A9ECh
.text$mn:0000A9EC ; COMDAT (pick any)
.text$mn:0000A9EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9EC
.text$mn:0000A9EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9EC
.text$mn:0000A9EC ; Attributes: bp-based frame
.text$mn:0000A9EC
.text$mn:0000A9EC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000A9EC                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000A9EC ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000A9EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t,uint)+14p
.text$mn:0000A9EC
.text$mn:0000A9EC var_10          = dword ptr -10h
.text$mn:0000A9EC var_C           = dword ptr -0Ch
.text$mn:0000A9EC var_8           = dword ptr -8
.text$mn:0000A9EC var_4           = dword ptr -4
.text$mn:0000A9EC arg_0           = dword ptr  8
.text$mn:0000A9EC arg_4           = dword ptr  0Ch
.text$mn:0000A9EC arg_8           = dword ptr  10h
.text$mn:0000A9EC
.text$mn:0000A9EC                 push    ebp
.text$mn:0000A9ED                 mov     ebp, esp
.text$mn:0000A9EF                 sub     esp, 10h
.text$mn:0000A9F2                 mov     [ebp+var_8], ecx
.text$mn:0000A9F5                 cmp     [ebp+arg_8], 0
.text$mn:0000A9F9                 jz      short loc_AA11
.text$mn:0000A9FB                 push    768h            ; unsigned int
.text$mn:0000AA00                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AA05                 mov     eax, [ebp+arg_0]
.text$mn:0000AA08                 push    eax             ; int
.text$mn:0000AA09                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000AA0E                 add     esp, 0Ch
.text$mn:0000AA11
.text$mn:0000AA11 loc_AA11:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+Dj
.text$mn:0000AA11                 cmp     [ebp+arg_8], 0
.text$mn:0000AA15                 jnz     short loc_AA2A
.text$mn:0000AA17                 mov     ecx, [ebp+var_8]
.text$mn:0000AA1A                 mov     edx, [ebp+arg_4]
.text$mn:0000AA1D                 cmp     edx, [ecx+14h]
.text$mn:0000AA20                 ja      short loc_AA2A
.text$mn:0000AA22                 mov     eax, [ebp+arg_4]
.text$mn:0000AA25                 jmp     loc_AADD
.text$mn:0000AA2A ; ---------------------------------------------------------------------------
.text$mn:0000AA2A
.text$mn:0000AA2A loc_AA2A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+29j
.text$mn:0000AA2A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+34j
.text$mn:0000AA2A                 mov     eax, [ebp+var_8]
.text$mn:0000AA2D                 mov     ecx, [ebp+arg_4]
.text$mn:0000AA30                 cmp     ecx, [eax+14h]
.text$mn:0000AA33                 jnb     loc_AAD8
.text$mn:0000AA39                 mov     edx, [ebp+var_8]
.text$mn:0000AA3C                 mov     eax, [edx+14h]
.text$mn:0000AA3F                 sub     eax, [ebp+arg_4]
.text$mn:0000AA42                 mov     [ebp+var_4], eax
.text$mn:0000AA45                 mov     ecx, [ebp+arg_8]
.text$mn:0000AA48                 cmp     ecx, [ebp+var_4]
.text$mn:0000AA4B                 ja      loc_AAD8
.text$mn:0000AA51                 mov     edx, [ebp+arg_8]
.text$mn:0000AA54                 sub     edx, 1
.text$mn:0000AA57                 mov     eax, [ebp+var_4]
.text$mn:0000AA5A                 sub     eax, edx
.text$mn:0000AA5C                 mov     [ebp+var_4], eax
.text$mn:0000AA5F                 mov     ecx, [ebp+var_8]
.text$mn:0000AA62                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AA67                 mov     ecx, [ebp+arg_4]
.text$mn:0000AA6A                 lea     edx, [eax+ecx*2]
.text$mn:0000AA6D                 mov     [ebp+var_10], edx
.text$mn:0000AA70                 jmp     short loc_AA8E
.text$mn:0000AA72 ; ---------------------------------------------------------------------------
.text$mn:0000AA72
.text$mn:0000AA72 loc_AA72:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint):loc_AAD6j
.text$mn:0000AA72                 mov     eax, [ebp+var_C]
.text$mn:0000AA75                 sub     eax, [ebp+var_10]
.text$mn:0000AA78                 sar     eax, 1
.text$mn:0000AA7A                 add     eax, 1
.text$mn:0000AA7D                 mov     ecx, [ebp+var_4]
.text$mn:0000AA80                 sub     ecx, eax
.text$mn:0000AA82                 mov     [ebp+var_4], ecx
.text$mn:0000AA85                 mov     edx, [ebp+var_C]
.text$mn:0000AA88                 add     edx, 2
.text$mn:0000AA8B                 mov     [ebp+var_10], edx
.text$mn:0000AA8E
.text$mn:0000AA8E loc_AA8E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+84j
.text$mn:0000AA8E                 mov     eax, [ebp+arg_0]
.text$mn:0000AA91                 push    eax
.text$mn:0000AA92                 mov     ecx, [ebp+var_4]
.text$mn:0000AA95                 push    ecx
.text$mn:0000AA96                 mov     edx, [ebp+var_10]
.text$mn:0000AA99                 push    edx
.text$mn:0000AA9A                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:0000AA9F                 add     esp, 0Ch
.text$mn:0000AAA2                 mov     [ebp+var_C], eax
.text$mn:0000AAA5                 cmp     [ebp+var_C], 0
.text$mn:0000AAA9                 jz      short loc_AAD8
.text$mn:0000AAAB                 mov     eax, [ebp+arg_8]
.text$mn:0000AAAE                 push    eax
.text$mn:0000AAAF                 mov     ecx, [ebp+arg_0]
.text$mn:0000AAB2                 push    ecx
.text$mn:0000AAB3                 mov     edx, [ebp+var_C]
.text$mn:0000AAB6                 push    edx
.text$mn:0000AAB7                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000AABC                 add     esp, 0Ch
.text$mn:0000AABF                 test    eax, eax
.text$mn:0000AAC1                 jnz     short loc_AAD6
.text$mn:0000AAC3                 mov     ecx, [ebp+var_8]
.text$mn:0000AAC6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AACB                 mov     ecx, [ebp+var_C]
.text$mn:0000AACE                 sub     ecx, eax
.text$mn:0000AAD0                 sar     ecx, 1
.text$mn:0000AAD2                 mov     eax, ecx
.text$mn:0000AAD4                 jmp     short loc_AADD
.text$mn:0000AAD6 ; ---------------------------------------------------------------------------
.text$mn:0000AAD6
.text$mn:0000AAD6 loc_AAD6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+D5j
.text$mn:0000AAD6                 jmp     short loc_AA72
.text$mn:0000AAD8 ; ---------------------------------------------------------------------------
.text$mn:0000AAD8
.text$mn:0000AAD8 loc_AAD8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+47j
.text$mn:0000AAD8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+5Fj ...
.text$mn:0000AAD8                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000AADD
.text$mn:0000AADD loc_AADD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+39j
.text$mn:0000AADD                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+E8j
.text$mn:0000AADD                 mov     esp, ebp
.text$mn:0000AADF                 pop     ebp
.text$mn:0000AAE0                 retn    0Ch
.text$mn:0000AAE0 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000AAE0
.text$mn:0000AAE0 ; ---------------------------------------------------------------------------
.text$mn:0000AAE3                 align 4
.text$mn:0000AAE3 _text$mn        ends
.text$mn:0000AAE3
.text$mn:0000AAE4 ; ===========================================================================
.text$mn:0000AAE4
.text$mn:0000AAE4 ; Segment type: Pure code
.text$mn:0000AAE4 ; Segment permissions: Read/Execute
.text$mn:0000AAE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAE4                 assume cs:_text$mn
.text$mn:0000AAE4                 ;org 0AAE4h
.text$mn:0000AAE4 ; COMDAT (pick any)
.text$mn:0000AAE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAE4
.text$mn:0000AAE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAE4
.text$mn:0000AAE4 ; Attributes: bp-based frame
.text$mn:0000AAE4
.text$mn:0000AAE4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t, unsigned int)const
.text$mn:0000AAE4                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z
.text$mn:0000AAE4 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z proc near
.text$mn:0000AAE4                                         ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+BEp
.text$mn:0000AAE4                                         ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+11p
.text$mn:0000AAE4
.text$mn:0000AAE4 var_4           = dword ptr -4
.text$mn:0000AAE4 arg_0           = byte ptr  8
.text$mn:0000AAE4 arg_4           = dword ptr  0Ch
.text$mn:0000AAE4
.text$mn:0000AAE4                 push    ebp
.text$mn:0000AAE5                 mov     ebp, esp
.text$mn:0000AAE7                 push    ecx
.text$mn:0000AAE8                 mov     [ebp+var_4], ecx
.text$mn:0000AAEB                 push    1
.text$mn:0000AAED                 mov     eax, [ebp+arg_4]
.text$mn:0000AAF0                 push    eax
.text$mn:0000AAF1                 lea     ecx, [ebp+arg_0]
.text$mn:0000AAF4                 push    ecx
.text$mn:0000AAF5                 mov     ecx, [ebp+var_4]
.text$mn:0000AAF8                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:0000AAFD                 mov     esp, ebp
.text$mn:0000AAFF                 pop     ebp
.text$mn:0000AB00                 retn    8
.text$mn:0000AB00 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z endp
.text$mn:0000AB00
.text$mn:0000AB00 ; ---------------------------------------------------------------------------
.text$mn:0000AB03                 align 4
.text$mn:0000AB03 _text$mn        ends
.text$mn:0000AB03
.text$mn:0000AB04 ; ===========================================================================
.text$mn:0000AB04
.text$mn:0000AB04 ; Segment type: Pure code
.text$mn:0000AB04 ; Segment permissions: Read/Execute
.text$mn:0000AB04 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB04                 assume cs:_text$mn
.text$mn:0000AB04                 ;org 0AB04h
.text$mn:0000AB04 ; COMDAT (pick any)
.text$mn:0000AB04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB04
.text$mn:0000AB04 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB04
.text$mn:0000AB04 ; Attributes: bp-based frame
.text$mn:0000AB04
.text$mn:0000AB04 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:0000AB04                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:0000AB04 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:0000AB04                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+AEp
.text$mn:0000AB04
.text$mn:0000AB04 var_4           = dword ptr -4
.text$mn:0000AB04 arg_0           = dword ptr  8
.text$mn:0000AB04 arg_4           = dword ptr  0Ch
.text$mn:0000AB04 arg_8           = dword ptr  10h
.text$mn:0000AB04
.text$mn:0000AB04                 push    ebp
.text$mn:0000AB05                 mov     ebp, esp
.text$mn:0000AB07                 push    ecx
.text$mn:0000AB08                 cmp     [ebp+arg_4], 0
.text$mn:0000AB0C                 jnz     short loc_AB17
.text$mn:0000AB0E                 mov     [ebp+var_4], 0
.text$mn:0000AB15                 jmp     short loc_AB31
.text$mn:0000AB17 ; ---------------------------------------------------------------------------
.text$mn:0000AB17
.text$mn:0000AB17 loc_AB17:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:0000AB17                 mov     eax, [ebp+arg_4]
.text$mn:0000AB1A                 push    eax
.text$mn:0000AB1B                 mov     ecx, [ebp+arg_8]
.text$mn:0000AB1E                 movzx   edx, word ptr [ecx]
.text$mn:0000AB21                 push    edx
.text$mn:0000AB22                 mov     eax, [ebp+arg_0]
.text$mn:0000AB25                 push    eax
.text$mn:0000AB26                 call    _wmemchr
.text$mn:0000AB2B                 add     esp, 0Ch
.text$mn:0000AB2E                 mov     [ebp+var_4], eax
.text$mn:0000AB31
.text$mn:0000AB31 loc_AB31:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:0000AB31                 mov     eax, [ebp+var_4]
.text$mn:0000AB34                 mov     esp, ebp
.text$mn:0000AB36                 pop     ebp
.text$mn:0000AB37                 retn
.text$mn:0000AB37 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:0000AB37
.text$mn:0000AB37 _text$mn        ends
.text$mn:0000AB37
.text$mn:0000AB38 ; ===========================================================================
.text$mn:0000AB38
.text$mn:0000AB38 ; Segment type: Pure code
.text$mn:0000AB38 ; Segment permissions: Read/Execute
.text$mn:0000AB38 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB38                 assume cs:_text$mn
.text$mn:0000AB38                 ;org 0AB38h
.text$mn:0000AB38 ; COMDAT (pick any)
.text$mn:0000AB38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB38
.text$mn:0000AB38 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB38
.text$mn:0000AB38 ; Attributes: bp-based frame
.text$mn:0000AB38
.text$mn:0000AB38 ; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
.text$mn:0000AB38                 public ?flags@ios_base@std@@QBEHXZ
.text$mn:0000AB38 ?flags@ios_base@std@@QBEHXZ proc near   ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+107p
.text$mn:0000AB38                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+E1p ...
.text$mn:0000AB38
.text$mn:0000AB38 var_4           = dword ptr -4
.text$mn:0000AB38
.text$mn:0000AB38                 push    ebp
.text$mn:0000AB39                 mov     ebp, esp
.text$mn:0000AB3B                 push    ecx
.text$mn:0000AB3C                 mov     [ebp+var_4], ecx
.text$mn:0000AB3F                 mov     eax, [ebp+var_4]
.text$mn:0000AB42                 mov     eax, [eax+14h]
.text$mn:0000AB45                 mov     esp, ebp
.text$mn:0000AB47                 pop     ebp
.text$mn:0000AB48                 retn
.text$mn:0000AB48 ?flags@ios_base@std@@QBEHXZ endp
.text$mn:0000AB48
.text$mn:0000AB48 ; ---------------------------------------------------------------------------
.text$mn:0000AB49                 align 4
.text$mn:0000AB49 _text$mn        ends
.text$mn:0000AB49
.text$mn:0000AB4C ; ===========================================================================
.text$mn:0000AB4C
.text$mn:0000AB4C ; Segment type: Pure code
.text$mn:0000AB4C ; Segment permissions: Read/Execute
.text$mn:0000AB4C _text$mn        segment para public 'CODE' use32
.text$mn:0000AB4C                 assume cs:_text$mn
.text$mn:0000AB4C                 ;org 0AB4Ch
.text$mn:0000AB4C ; COMDAT (pick any)
.text$mn:0000AB4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB4C
.text$mn:0000AB4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB4C
.text$mn:0000AB4C ; Attributes: bp-based frame
.text$mn:0000AB4C
.text$mn:0000AB4C ; public: class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> & __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::flush(void)
.text$mn:0000AB4C                 public ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$mn:0000AB4C ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ proc near
.text$mn:0000AB4C                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+8Fp
.text$mn:0000AB4C
.text$mn:0000AB4C var_18          = byte ptr -18h
.text$mn:0000AB4C var_10          = dword ptr -10h
.text$mn:0000AB4C var_C           = dword ptr -0Ch
.text$mn:0000AB4C var_4           = dword ptr -4
.text$mn:0000AB4C
.text$mn:0000AB4C                 push    ebp
.text$mn:0000AB4D                 mov     ebp, esp
.text$mn:0000AB4F                 push    0FFFFFFFFh
.text$mn:0000AB51                 push    offset __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$mn:0000AB56                 mov     eax, large fs:0
.text$mn:0000AB5C                 push    eax
.text$mn:0000AB5D                 sub     esp, 0Ch
.text$mn:0000AB60                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AB65                 xor     eax, ebp
.text$mn:0000AB67                 push    eax
.text$mn:0000AB68                 lea     eax, [ebp+var_C]
.text$mn:0000AB6B                 mov     large fs:0, eax
.text$mn:0000AB71                 mov     [ebp+var_10], ecx
.text$mn:0000AB74                 mov     eax, [ebp+var_10]
.text$mn:0000AB77                 mov     ecx, [eax]
.text$mn:0000AB79                 mov     edx, [ebp+var_10]
.text$mn:0000AB7C                 add     edx, [ecx+4]
.text$mn:0000AB7F                 mov     ecx, edx
.text$mn:0000AB81                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:0000AB86                 test    eax, eax
.text$mn:0000AB88                 jz      short loc_ABEB
.text$mn:0000AB8A                 mov     eax, [ebp+var_10]
.text$mn:0000AB8D                 push    eax
.text$mn:0000AB8E                 lea     ecx, [ebp+var_18]
.text$mn:0000AB91                 call    ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:0000AB96                 mov     [ebp+var_4], 0
.text$mn:0000AB9D                 lea     ecx, [ebp+var_18]
.text$mn:0000ABA0                 call    ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:0000ABA5                 movzx   ecx, al
.text$mn:0000ABA8                 test    ecx, ecx
.text$mn:0000ABAA                 jz      short loc_ABDC
.text$mn:0000ABAC                 mov     edx, [ebp+var_10]
.text$mn:0000ABAF                 mov     eax, [edx]
.text$mn:0000ABB1                 mov     ecx, [ebp+var_10]
.text$mn:0000ABB4                 add     ecx, [eax+4]
.text$mn:0000ABB7                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:0000ABBC                 mov     ecx, eax
.text$mn:0000ABBE                 call    ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pubsync(void)
.text$mn:0000ABC3                 cmp     eax, 0FFFFFFFFh
.text$mn:0000ABC6                 jnz     short loc_ABDC
.text$mn:0000ABC8                 push    0
.text$mn:0000ABCA                 push    4
.text$mn:0000ABCC                 mov     ecx, [ebp+var_10]
.text$mn:0000ABCF                 mov     edx, [ecx]
.text$mn:0000ABD1                 mov     ecx, [ebp+var_10]
.text$mn:0000ABD4                 add     ecx, [edx+4]
.text$mn:0000ABD7                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000ABDC
.text$mn:0000ABDC loc_ABDC:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+5Ej
.text$mn:0000ABDC                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+7Aj
.text$mn:0000ABDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000ABE3                 lea     ecx, [ebp+var_18]
.text$mn:0000ABE6                 call    ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:0000ABEB
.text$mn:0000ABEB loc_ABEB:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+3Cj
.text$mn:0000ABEB                 mov     eax, [ebp+var_10]
.text$mn:0000ABEE                 mov     ecx, [ebp+var_C]
.text$mn:0000ABF1                 mov     large fs:0, ecx
.text$mn:0000ABF8                 pop     ecx
.text$mn:0000ABF9                 mov     esp, ebp
.text$mn:0000ABFB                 pop     ebp
.text$mn:0000ABFC                 retn
.text$mn:0000ABFC ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ endp
.text$mn:0000ABFC
.text$mn:0000ABFC ; ---------------------------------------------------------------------------
.text$mn:0000ABFD                 align 10h
.text$mn:0000ABFD _text$mn        ends
.text$mn:0000ABFD
.text$x:0000AC00 ; ===========================================================================
.text$x:0000AC00
.text$x:0000AC00 ; Segment type: Pure code
.text$x:0000AC00 ; Segment permissions: Read/Execute
.text$x:0000AC00 _text$x         segment para public 'CODE' use32
.text$x:0000AC00                 assume cs:_text$x
.text$x:0000AC00                 ;org 0AC00h
.text$x:0000AC00 ; COMDAT (pick associative to section at AB4C)
.text$x:0000AC00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AC00
.text$x:0000AC00 ; =============== S U B R O U T I N E =======================================
.text$x:0000AC00
.text$x:0000AC00
.text$x:0000AC00 __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0 proc near
.text$x:0000AC00                                         ; DATA XREF: .xdata$x:0000DCB4o
.text$x:0000AC00                 lea     ecx, [ebp-18h]
.text$x:0000AC03                 jmp     ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:0000AC03 __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0 endp
.text$x:0000AC03
.text$x:0000AC08
.text$x:0000AC08 ; =============== S U B R O U T I N E =======================================
.text$x:0000AC08
.text$x:0000AC08
.text$x:0000AC08 __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ proc near
.text$x:0000AC08                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+5o
.text$x:0000AC08
.text$x:0000AC08 arg_4           = dword ptr  8
.text$x:0000AC08
.text$x:0000AC08                 mov     edx, [esp+arg_4]
.text$x:0000AC0C                 lea     eax, [edx+0Ch]
.text$x:0000AC0F                 mov     ecx, [edx-10h]
.text$x:0000AC12                 xor     ecx, eax
.text$x:0000AC14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AC19                 mov     eax, offset __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$x:0000AC1E                 jmp     ___CxxFrameHandler3
.text$x:0000AC1E __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ endp
.text$x:0000AC1E
.text$x:0000AC1E ; ---------------------------------------------------------------------------
.text$x:0000AC23                 align 4
.text$x:0000AC23 _text$x         ends
.text$x:0000AC23
.text$mn:0000AC24 ; ===========================================================================
.text$mn:0000AC24
.text$mn:0000AC24 ; Segment type: Pure code
.text$mn:0000AC24 ; Segment permissions: Read/Execute
.text$mn:0000AC24 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC24                 assume cs:_text$mn
.text$mn:0000AC24                 ;org 0AC24h
.text$mn:0000AC24 ; COMDAT (pick any)
.text$mn:0000AC24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC24
.text$mn:0000AC24 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC24
.text$mn:0000AC24 ; Attributes: bp-based frame
.text$mn:0000AC24
.text$mn:0000AC24 ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::gbump(int)
.text$mn:0000AC24                 public ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
.text$mn:0000AC24 ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z proc near
.text$mn:0000AC24                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+9Bp
.text$mn:0000AC24                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+12Cp ...
.text$mn:0000AC24
.text$mn:0000AC24 var_4           = dword ptr -4
.text$mn:0000AC24 arg_0           = dword ptr  8
.text$mn:0000AC24
.text$mn:0000AC24                 push    ebp
.text$mn:0000AC25                 mov     ebp, esp
.text$mn:0000AC27                 push    ecx
.text$mn:0000AC28                 mov     [ebp+var_4], ecx
.text$mn:0000AC2B                 mov     eax, [ebp+var_4]
.text$mn:0000AC2E                 mov     ecx, [eax+2Ch]
.text$mn:0000AC31                 mov     edx, [ecx]
.text$mn:0000AC33                 sub     edx, [ebp+arg_0]
.text$mn:0000AC36                 mov     eax, [ebp+var_4]
.text$mn:0000AC39                 mov     ecx, [eax+2Ch]
.text$mn:0000AC3C                 mov     [ecx], edx
.text$mn:0000AC3E                 mov     edx, [ebp+var_4]
.text$mn:0000AC41                 mov     eax, [edx+1Ch]
.text$mn:0000AC44                 mov     ecx, [eax]
.text$mn:0000AC46                 mov     edx, [ebp+arg_0]
.text$mn:0000AC49                 lea     eax, [ecx+edx*2]
.text$mn:0000AC4C                 mov     ecx, [ebp+var_4]
.text$mn:0000AC4F                 mov     edx, [ecx+1Ch]
.text$mn:0000AC52                 mov     [edx], eax
.text$mn:0000AC54                 mov     esp, ebp
.text$mn:0000AC56                 pop     ebp
.text$mn:0000AC57                 retn    4
.text$mn:0000AC57 ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z endp
.text$mn:0000AC57
.text$mn:0000AC57 ; ---------------------------------------------------------------------------
.text$mn:0000AC5A                 align 4
.text$mn:0000AC5A _text$mn        ends
.text$mn:0000AC5A
.text$mn:0000AC5C ; ===========================================================================
.text$mn:0000AC5C
.text$mn:0000AC5C ; Segment type: Pure code
.text$mn:0000AC5C ; Segment permissions: Read/Execute
.text$mn:0000AC5C _text$mn        segment para public 'CODE' use32
.text$mn:0000AC5C                 assume cs:_text$mn
.text$mn:0000AC5C                 ;org 0AC5Ch
.text$mn:0000AC5C ; COMDAT (pick any)
.text$mn:0000AC5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC5C
.text$mn:0000AC5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC5C
.text$mn:0000AC5C ; Attributes: bp-based frame
.text$mn:0000AC5C
.text$mn:0000AC5C ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:0000AC5C                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:0000AC5C ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000AC5C                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:0000AC5C                 push    ebp
.text$mn:0000AC5D                 mov     ebp, esp
.text$mn:0000AC5F                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:0000AC64                 pop     ebp
.text$mn:0000AC65                 retn
.text$mn:0000AC65 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000AC65
.text$mn:0000AC65 ; ---------------------------------------------------------------------------
.text$mn:0000AC66                 align 4
.text$mn:0000AC66 _text$mn        ends
.text$mn:0000AC66
.text$mn:0000AC68 ; ===========================================================================
.text$mn:0000AC68
.text$mn:0000AC68 ; Segment type: Pure code
.text$mn:0000AC68 ; Segment permissions: Read/Execute
.text$mn:0000AC68 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC68                 assume cs:_text$mn
.text$mn:0000AC68                 ;org 0AC68h
.text$mn:0000AC68 ; COMDAT (pick any)
.text$mn:0000AC68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC68
.text$mn:0000AC68 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC68
.text$mn:0000AC68 ; Attributes: bp-based frame
.text$mn:0000AC68
.text$mn:0000AC68 ; public: class std::locale __thiscall std::ios_base::getloc(void)const
.text$mn:0000AC68                 public ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:0000AC68 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$mn:0000AC68                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::widen(char)+2Fp
.text$mn:0000AC68
.text$mn:0000AC68 var_14          = dword ptr -14h
.text$mn:0000AC68 var_10          = dword ptr -10h
.text$mn:0000AC68 var_C           = dword ptr -0Ch
.text$mn:0000AC68 var_4           = dword ptr -4
.text$mn:0000AC68 arg_0           = dword ptr  8
.text$mn:0000AC68
.text$mn:0000AC68                 push    ebp
.text$mn:0000AC69                 mov     ebp, esp
.text$mn:0000AC6B                 push    0FFFFFFFFh
.text$mn:0000AC6D                 push    offset __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:0000AC72                 mov     eax, large fs:0
.text$mn:0000AC78                 push    eax
.text$mn:0000AC79                 sub     esp, 8
.text$mn:0000AC7C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AC81                 xor     eax, ebp
.text$mn:0000AC83                 push    eax
.text$mn:0000AC84                 lea     eax, [ebp+var_C]
.text$mn:0000AC87                 mov     large fs:0, eax
.text$mn:0000AC8D                 mov     [ebp+var_14], ecx
.text$mn:0000AC90                 mov     [ebp+var_10], 0
.text$mn:0000AC97                 mov     eax, [ebp+var_14]
.text$mn:0000AC9A                 mov     ecx, [eax+30h]
.text$mn:0000AC9D                 push    ecx             ; struct std::locale *
.text$mn:0000AC9E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000ACA1                 call    ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale(std::locale const &)
.text$mn:0000ACA6                 mov     [ebp+var_4], 0
.text$mn:0000ACAD                 mov     edx, [ebp+var_10]
.text$mn:0000ACB0                 or      edx, 1
.text$mn:0000ACB3                 mov     [ebp+var_10], edx
.text$mn:0000ACB6                 mov     eax, [ebp+arg_0]
.text$mn:0000ACB9                 mov     ecx, [ebp+var_C]
.text$mn:0000ACBC                 mov     large fs:0, ecx
.text$mn:0000ACC3                 pop     ecx
.text$mn:0000ACC4                 mov     esp, ebp
.text$mn:0000ACC6                 pop     ebp
.text$mn:0000ACC7                 retn    4
.text$mn:0000ACC7 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$mn:0000ACC7
.text$mn:0000ACC7 ; ---------------------------------------------------------------------------
.text$mn:0000ACCA                 align 4
.text$mn:0000ACCA _text$mn        ends
.text$mn:0000ACCA
.text$x:0000ACCC ; ===========================================================================
.text$x:0000ACCC
.text$x:0000ACCC ; Segment type: Pure code
.text$x:0000ACCC ; Segment permissions: Read/Execute
.text$x:0000ACCC _text$x         segment para public 'CODE' use32
.text$x:0000ACCC                 assume cs:_text$x
.text$x:0000ACCC                 ;org 0ACCCh
.text$x:0000ACCC ; COMDAT (pick associative to section at AC68)
.text$x:0000ACCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000ACCC
.text$x:0000ACCC ; =============== S U B R O U T I N E =======================================
.text$x:0000ACCC
.text$x:0000ACCC
.text$x:0000ACCC __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 proc near
.text$x:0000ACCC                                         ; DATA XREF: .xdata$x:0000D114o
.text$x:0000ACCC                 mov     eax, [ebp-10h]
.text$x:0000ACCF                 and     eax, 1
.text$x:0000ACD2                 jz      $LN4_0
.text$x:0000ACD8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000ACDC                 mov     ecx, [ebp+8]    ; this
.text$x:0000ACDF                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:0000ACE4 ; ---------------------------------------------------------------------------
.text$x:0000ACE4
.text$x:0000ACE4 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0+6j
.text$x:0000ACE4                 retn
.text$x:0000ACE4 __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 endp
.text$x:0000ACE4
.text$x:0000ACE5
.text$x:0000ACE5 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACE5
.text$x:0000ACE5
.text$x:0000ACE5 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$x:0000ACE5                                         ; DATA XREF: std::ios_base::getloc(void)+5o
.text$x:0000ACE5
.text$x:0000ACE5 arg_4           = dword ptr  8
.text$x:0000ACE5
.text$x:0000ACE5                 mov     edx, [esp+arg_4]
.text$x:0000ACE9                 lea     eax, [edx+0Ch]
.text$x:0000ACEC                 mov     ecx, [edx-0Ch]
.text$x:0000ACEF                 xor     ecx, eax
.text$x:0000ACF1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ACF6                 mov     eax, offset __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$x:0000ACFB                 jmp     ___CxxFrameHandler3
.text$x:0000ACFB __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$x:0000ACFB
.text$x:0000ACFB _text$x         ends
.text$x:0000ACFB
.text$mn:0000AD00 ; ===========================================================================
.text$mn:0000AD00
.text$mn:0000AD00 ; Segment type: Pure code
.text$mn:0000AD00 ; Segment permissions: Read/Execute
.text$mn:0000AD00 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD00                 assume cs:_text$mn
.text$mn:0000AD00                 ;org 0AD00h
.text$mn:0000AD00 ; COMDAT (pick any)
.text$mn:0000AD00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD00
.text$mn:0000AD00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD00
.text$mn:0000AD00 ; Attributes: bp-based frame
.text$mn:0000AD00
.text$mn:0000AD00 ; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
.text$mn:0000AD00                 public ?good@ios_base@std@@QBE_NXZ
.text$mn:0000AD00 ?good@ios_base@std@@QBE_NXZ proc near   ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+44p
.text$mn:0000AD00                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+A1p ...
.text$mn:0000AD00
.text$mn:0000AD00 var_8           = dword ptr -8
.text$mn:0000AD00 var_4           = dword ptr -4
.text$mn:0000AD00
.text$mn:0000AD00                 push    ebp
.text$mn:0000AD01                 mov     ebp, esp
.text$mn:0000AD03                 sub     esp, 8
.text$mn:0000AD06                 mov     [ebp+var_8], ecx
.text$mn:0000AD09                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000AD0C                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:0000AD11                 test    eax, eax
.text$mn:0000AD13                 jnz     short loc_AD1E
.text$mn:0000AD15                 mov     [ebp+var_4], 1
.text$mn:0000AD1C                 jmp     short loc_AD25
.text$mn:0000AD1E ; ---------------------------------------------------------------------------
.text$mn:0000AD1E
.text$mn:0000AD1E loc_AD1E:                               ; CODE XREF: std::ios_base::good(void)+13j
.text$mn:0000AD1E                 mov     [ebp+var_4], 0
.text$mn:0000AD25
.text$mn:0000AD25 loc_AD25:                               ; CODE XREF: std::ios_base::good(void)+1Cj
.text$mn:0000AD25                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000AD28                 mov     esp, ebp
.text$mn:0000AD2A                 pop     ebp
.text$mn:0000AD2B                 retn
.text$mn:0000AD2B ?good@ios_base@std@@QBE_NXZ endp
.text$mn:0000AD2B
.text$mn:0000AD2B _text$mn        ends
.text$mn:0000AD2B
.text$mn:0000AD2C ; ===========================================================================
.text$mn:0000AD2C
.text$mn:0000AD2C ; Segment type: Pure code
.text$mn:0000AD2C ; Segment permissions: Read/Execute
.text$mn:0000AD2C _text$mn        segment para public 'CODE' use32
.text$mn:0000AD2C                 assume cs:_text$mn
.text$mn:0000AD2C                 ;org 0AD2Ch
.text$mn:0000AD2C ; COMDAT (pick any)
.text$mn:0000AD2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD2C
.text$mn:0000AD2C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD2C
.text$mn:0000AD2C ; Attributes: bp-based frame
.text$mn:0000AD2C
.text$mn:0000AD2C ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::gptr(void)const
.text$mn:0000AD2C                 public ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000AD2C ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000AD2C                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+D9p
.text$mn:0000AD2C                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+28Bp ...
.text$mn:0000AD2C
.text$mn:0000AD2C var_4           = dword ptr -4
.text$mn:0000AD2C
.text$mn:0000AD2C                 push    ebp
.text$mn:0000AD2D                 mov     ebp, esp
.text$mn:0000AD2F                 push    ecx
.text$mn:0000AD30                 mov     [ebp+var_4], ecx
.text$mn:0000AD33                 mov     eax, [ebp+var_4]
.text$mn:0000AD36                 mov     ecx, [eax+1Ch]
.text$mn:0000AD39                 mov     eax, [ecx]
.text$mn:0000AD3B                 mov     esp, ebp
.text$mn:0000AD3D                 pop     ebp
.text$mn:0000AD3E                 retn
.text$mn:0000AD3E ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000AD3E
.text$mn:0000AD3E ; ---------------------------------------------------------------------------
.text$mn:0000AD3F                 align 10h
.text$mn:0000AD3F _text$mn        ends
.text$mn:0000AD3F
.text$mn:0000AD40 ; ===========================================================================
.text$mn:0000AD40
.text$mn:0000AD40 ; Segment type: Pure code
.text$mn:0000AD40 ; Segment permissions: Read/Execute
.text$mn:0000AD40 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD40                 assume cs:_text$mn
.text$mn:0000AD40                 ;org 0AD40h
.text$mn:0000AD40 ; COMDAT (pick any)
.text$mn:0000AD40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD40
.text$mn:0000AD40 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD40
.text$mn:0000AD40 ; Attributes: bp-based frame
.text$mn:0000AD40
.text$mn:0000AD40 ; protected: virtual void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::imbue(class std::locale const &)
.text$mn:0000AD40                 public ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
.text$mn:0000AD40 ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z proc near
.text$mn:0000AD40                                         ; DATA XREF: .rdata:0000E454o
.text$mn:0000AD40                                         ; .rdata:0000E5BCo
.text$mn:0000AD40
.text$mn:0000AD40 var_4           = dword ptr -4
.text$mn:0000AD40
.text$mn:0000AD40                 push    ebp
.text$mn:0000AD41                 mov     ebp, esp
.text$mn:0000AD43                 push    ecx
.text$mn:0000AD44                 mov     [ebp+var_4], ecx
.text$mn:0000AD47                 mov     esp, ebp
.text$mn:0000AD49                 pop     ebp
.text$mn:0000AD4A                 retn    4
.text$mn:0000AD4A ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z endp
.text$mn:0000AD4A
.text$mn:0000AD4A ; ---------------------------------------------------------------------------
.text$mn:0000AD4D                 align 10h
.text$mn:0000AD4D _text$mn        ends
.text$mn:0000AD4D
.text$mn:0000AD50 ; ===========================================================================
.text$mn:0000AD50
.text$mn:0000AD50 ; Segment type: Pure code
.text$mn:0000AD50 ; Segment permissions: Read/Execute
.text$mn:0000AD50 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD50                 assume cs:_text$mn
.text$mn:0000AD50                 ;org 0AD50h
.text$mn:0000AD50 ; COMDAT (pick any)
.text$mn:0000AD50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD50
.text$mn:0000AD50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD50
.text$mn:0000AD50 ; Attributes: bp-based frame
.text$mn:0000AD50
.text$mn:0000AD50 ; protected: void __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::init(class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> *, bool)
.text$mn:0000AD50                 public ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
.text$mn:0000AD50 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z proc near
.text$mn:0000AD50                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+99p
.text$mn:0000AD50
.text$mn:0000AD50 var_4           = dword ptr -4
.text$mn:0000AD50 arg_0           = dword ptr  8
.text$mn:0000AD50 arg_4           = byte ptr  0Ch
.text$mn:0000AD50
.text$mn:0000AD50                 push    ebp
.text$mn:0000AD51                 mov     ebp, esp
.text$mn:0000AD53                 push    ecx
.text$mn:0000AD54                 mov     [ebp+var_4], ecx
.text$mn:0000AD57                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AD5A                 call    ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init(void)
.text$mn:0000AD5F                 mov     eax, [ebp+var_4]
.text$mn:0000AD62                 mov     ecx, [ebp+arg_0]
.text$mn:0000AD65                 mov     [eax+38h], ecx
.text$mn:0000AD68                 mov     edx, [ebp+var_4]
.text$mn:0000AD6B                 mov     dword ptr [edx+3Ch], 0
.text$mn:0000AD72                 push    20h ; ' '
.text$mn:0000AD74                 mov     ecx, [ebp+var_4]
.text$mn:0000AD77                 call    ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::widen(char)
.text$mn:0000AD7C                 mov     ecx, [ebp+var_4]
.text$mn:0000AD7F                 mov     [ecx+40h], ax
.text$mn:0000AD83                 mov     edx, [ebp+var_4]
.text$mn:0000AD86                 cmp     dword ptr [edx+38h], 0
.text$mn:0000AD8A                 jnz     short loc_AD98
.text$mn:0000AD8C                 push    0
.text$mn:0000AD8E                 push    4
.text$mn:0000AD90                 mov     ecx, [ebp+var_4]
.text$mn:0000AD93                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000AD98
.text$mn:0000AD98 loc_AD98:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+3Aj
.text$mn:0000AD98                 movzx   eax, [ebp+arg_4]
.text$mn:0000AD9C                 test    eax, eax
.text$mn:0000AD9E                 jz      short loc_ADAC
.text$mn:0000ADA0                 mov     ecx, [ebp+var_4]
.text$mn:0000ADA3                 push    ecx             ; struct std::ios_base *
.text$mn:0000ADA4                 call    ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd(std::ios_base *)
.text$mn:0000ADA9                 add     esp, 4
.text$mn:0000ADAC
.text$mn:0000ADAC loc_ADAC:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+4Ej
.text$mn:0000ADAC                 mov     esp, ebp
.text$mn:0000ADAE                 pop     ebp
.text$mn:0000ADAF                 retn    8
.text$mn:0000ADAF ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z endp
.text$mn:0000ADAF
.text$mn:0000ADAF ; ---------------------------------------------------------------------------
.text$mn:0000ADB2                 align 4
.text$mn:0000ADB2 _text$mn        ends
.text$mn:0000ADB2
.text$mn:0000ADB4 ; ===========================================================================
.text$mn:0000ADB4
.text$mn:0000ADB4 ; Segment type: Pure code
.text$mn:0000ADB4 ; Segment permissions: Read/Execute
.text$mn:0000ADB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADB4                 assume cs:_text$mn
.text$mn:0000ADB4                 ;org 0ADB4h
.text$mn:0000ADB4 ; COMDAT (pick any)
.text$mn:0000ADB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADB4
.text$mn:0000ADB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADB4
.text$mn:0000ADB4 ; Attributes: bp-based frame
.text$mn:0000ADB4
.text$mn:0000ADB4 ; const struct std::error_category *__cdecl std::iostream_category()
.text$mn:0000ADB4                 public ?iostream_category@std@@YAABVerror_category@1@XZ
.text$mn:0000ADB4 ?iostream_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000ADB4                                         ; CODE XREF: std::make_error_code(std::io_errc)+3p
.text$mn:0000ADB4                 push    ebp
.text$mn:0000ADB5                 mov     ebp, esp
.text$mn:0000ADB7                 mov     eax, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.text$mn:0000ADBC                 pop     ebp
.text$mn:0000ADBD                 retn
.text$mn:0000ADBD ?iostream_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000ADBD
.text$mn:0000ADBD ; ---------------------------------------------------------------------------
.text$mn:0000ADBE                 align 10h
.text$mn:0000ADBE _text$mn        ends
.text$mn:0000ADBE
.text$mn:0000ADC0 ; ===========================================================================
.text$mn:0000ADC0
.text$mn:0000ADC0 ; Segment type: Pure code
.text$mn:0000ADC0 ; Segment permissions: Read/Execute
.text$mn:0000ADC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADC0                 assume cs:_text$mn
.text$mn:0000ADC0                 ;org 0ADC0h
.text$mn:0000ADC0 ; COMDAT (pick any)
.text$mn:0000ADC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADC0
.text$mn:0000ADC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADC0
.text$mn:0000ADC0 ; Attributes: bp-based frame
.text$mn:0000ADC0
.text$mn:0000ADC0 ; public: bool __thiscall std::ctype<wchar_t>::is(short, wchar_t)const
.text$mn:0000ADC0                 public ?is@?$ctype@_W@std@@QBE_NF_W@Z
.text$mn:0000ADC0 ?is@?$ctype@_W@std@@QBE_NF_W@Z proc near
.text$mn:0000ADC0                                         ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+43p
.text$mn:0000ADC0                                         ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+43p
.text$mn:0000ADC0
.text$mn:0000ADC0 var_4           = dword ptr -4
.text$mn:0000ADC0 arg_0           = word ptr  8
.text$mn:0000ADC0 arg_4           = word ptr  0Ch
.text$mn:0000ADC0
.text$mn:0000ADC0                 push    ebp
.text$mn:0000ADC1                 mov     ebp, esp
.text$mn:0000ADC3                 push    ecx
.text$mn:0000ADC4                 mov     [ebp+var_4], ecx
.text$mn:0000ADC7                 movzx   eax, [ebp+arg_4]
.text$mn:0000ADCB                 push    eax
.text$mn:0000ADCC                 movzx   ecx, [ebp+arg_0]
.text$mn:0000ADD0                 push    ecx
.text$mn:0000ADD1                 mov     edx, [ebp+var_4]
.text$mn:0000ADD4                 mov     eax, [edx]
.text$mn:0000ADD6                 mov     ecx, [ebp+var_4]
.text$mn:0000ADD9                 mov     edx, [eax+10h]
.text$mn:0000ADDC                 call    edx
.text$mn:0000ADDE                 mov     esp, ebp
.text$mn:0000ADE0                 pop     ebp
.text$mn:0000ADE1                 retn    8
.text$mn:0000ADE1 ?is@?$ctype@_W@std@@QBE_NF_W@Z endp
.text$mn:0000ADE1
.text$mn:0000ADE1 _text$mn        ends
.text$mn:0000ADE1
.text$mn:0000ADE4 ; ===========================================================================
.text$mn:0000ADE4
.text$mn:0000ADE4 ; Segment type: Pure code
.text$mn:0000ADE4 ; Segment permissions: Read/Execute
.text$mn:0000ADE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADE4                 assume cs:_text$mn
.text$mn:0000ADE4                 ;org 0ADE4h
.text$mn:0000ADE4 ; COMDAT (pick any)
.text$mn:0000ADE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADE4
.text$mn:0000ADE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADE4
.text$mn:0000ADE4 ; Attributes: bp-based frame
.text$mn:0000ADE4
.text$mn:0000ADE4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:0000ADE4                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000ADE4 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000ADE4                                         ; CODE XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Cp
.text$mn:0000ADE4                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Ap ...
.text$mn:0000ADE4
.text$mn:0000ADE4 var_4           = dword ptr -4
.text$mn:0000ADE4
.text$mn:0000ADE4                 push    ebp
.text$mn:0000ADE5                 mov     ebp, esp
.text$mn:0000ADE7                 push    ecx
.text$mn:0000ADE8                 mov     [ebp+var_4], ecx
.text$mn:0000ADEB                 mov     eax, [ebp+var_4]
.text$mn:0000ADEE                 mov     eax, [eax+14h]
.text$mn:0000ADF1                 mov     esp, ebp
.text$mn:0000ADF3                 pop     ebp
.text$mn:0000ADF4                 retn
.text$mn:0000ADF4 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000ADF4
.text$mn:0000ADF4 ; ---------------------------------------------------------------------------
.text$mn:0000ADF5                 align 4
.text$mn:0000ADF5 _text$mn        ends
.text$mn:0000ADF5
.text$mn:0000ADF8 ; ===========================================================================
.text$mn:0000ADF8
.text$mn:0000ADF8 ; Segment type: Pure code
.text$mn:0000ADF8 ; Segment permissions: Read/Execute
.text$mn:0000ADF8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADF8                 assume cs:_text$mn
.text$mn:0000ADF8                 ;org 0ADF8h
.text$mn:0000ADF8 ; COMDAT (pick any)
.text$mn:0000ADF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADF8
.text$mn:0000ADF8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADF8
.text$mn:0000ADF8 ; Attributes: bp-based frame
.text$mn:0000ADF8
.text$mn:0000ADF8 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:0000ADF8                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:0000ADF8 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:0000ADF8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+21p
.text$mn:0000ADF8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:0000ADF8
.text$mn:0000ADF8 var_4           = dword ptr -4
.text$mn:0000ADF8 Str             = dword ptr  8
.text$mn:0000ADF8
.text$mn:0000ADF8                 push    ebp
.text$mn:0000ADF9                 mov     ebp, esp
.text$mn:0000ADFB                 push    ecx
.text$mn:0000ADFC                 mov     eax, [ebp+Str]
.text$mn:0000ADFF                 movsx   ecx, byte ptr [eax]
.text$mn:0000AE02                 test    ecx, ecx
.text$mn:0000AE04                 jnz     short loc_AE0F
.text$mn:0000AE06                 mov     [ebp+var_4], 0
.text$mn:0000AE0D                 jmp     short loc_AE1E
.text$mn:0000AE0F ; ---------------------------------------------------------------------------
.text$mn:0000AE0F
.text$mn:0000AE0F loc_AE0F:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000AE0F                 mov     edx, [ebp+Str]
.text$mn:0000AE12                 push    edx             ; Str
.text$mn:0000AE13                 call    _strlen
.text$mn:0000AE18                 add     esp, 4
.text$mn:0000AE1B                 mov     [ebp+var_4], eax
.text$mn:0000AE1E
.text$mn:0000AE1E loc_AE1E:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000AE1E                 mov     eax, [ebp+var_4]
.text$mn:0000AE21                 mov     esp, ebp
.text$mn:0000AE23                 pop     ebp
.text$mn:0000AE24                 retn
.text$mn:0000AE24 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:0000AE24
.text$mn:0000AE24 ; ---------------------------------------------------------------------------
.text$mn:0000AE25                 align 4
.text$mn:0000AE25 _text$mn        ends
.text$mn:0000AE25
.text$mn:0000AE28 ; ===========================================================================
.text$mn:0000AE28
.text$mn:0000AE28 ; Segment type: Pure code
.text$mn:0000AE28 ; Segment permissions: Read/Execute
.text$mn:0000AE28 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE28                 assume cs:_text$mn
.text$mn:0000AE28                 ;org 0AE28h
.text$mn:0000AE28 ; COMDAT (pick any)
.text$mn:0000AE28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE28
.text$mn:0000AE28 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE28
.text$mn:0000AE28 ; Attributes: bp-based frame
.text$mn:0000AE28
.text$mn:0000AE28 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:0000AE28                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:0000AE28 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:0000AE28                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+37p
.text$mn:0000AE28                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p ...
.text$mn:0000AE28
.text$mn:0000AE28 var_4           = dword ptr -4
.text$mn:0000AE28 Str             = dword ptr  8
.text$mn:0000AE28
.text$mn:0000AE28                 push    ebp
.text$mn:0000AE29                 mov     ebp, esp
.text$mn:0000AE2B                 push    ecx
.text$mn:0000AE2C                 mov     eax, [ebp+Str]
.text$mn:0000AE2F                 movzx   ecx, word ptr [eax]
.text$mn:0000AE32                 test    ecx, ecx
.text$mn:0000AE34                 jnz     short loc_AE3F
.text$mn:0000AE36                 mov     [ebp+var_4], 0
.text$mn:0000AE3D                 jmp     short loc_AE4E
.text$mn:0000AE3F ; ---------------------------------------------------------------------------
.text$mn:0000AE3F
.text$mn:0000AE3F loc_AE3F:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000AE3F                 mov     edx, [ebp+Str]
.text$mn:0000AE42                 push    edx             ; Str
.text$mn:0000AE43                 call    _wcslen
.text$mn:0000AE48                 add     esp, 4
.text$mn:0000AE4B                 mov     [ebp+var_4], eax
.text$mn:0000AE4E
.text$mn:0000AE4E loc_AE4E:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000AE4E                 mov     eax, [ebp+var_4]
.text$mn:0000AE51                 mov     esp, ebp
.text$mn:0000AE53                 pop     ebp
.text$mn:0000AE54                 retn
.text$mn:0000AE54 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:0000AE54
.text$mn:0000AE54 ; ---------------------------------------------------------------------------
.text$mn:0000AE55                 align 4
.text$mn:0000AE55 _text$mn        ends
.text$mn:0000AE55
.text$mn:0000AE58 ; ===========================================================================
.text$mn:0000AE58
.text$mn:0000AE58 ; Segment type: Pure code
.text$mn:0000AE58 ; Segment permissions: Read/Execute
.text$mn:0000AE58 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE58                 assume cs:_text$mn
.text$mn:0000AE58                 ;org 0AE58h
.text$mn:0000AE58 ; COMDAT (pick any)
.text$mn:0000AE58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE58
.text$mn:0000AE58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE58
.text$mn:0000AE58 ; Attributes: bp-based frame
.text$mn:0000AE58
.text$mn:0000AE58 ; class std::error_code __cdecl std::make_error_code(enum  std::io_errc)
.text$mn:0000AE58                 public ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
.text$mn:0000AE58 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z proc near
.text$mn:0000AE58                                         ; CODE XREF: std::ios_base::clear(int,bool)+55p
.text$mn:0000AE58                                         ; std::ios_base::clear(int,bool)+92p ...
.text$mn:0000AE58
.text$mn:0000AE58 arg_0           = dword ptr  8
.text$mn:0000AE58 arg_4           = dword ptr  0Ch
.text$mn:0000AE58
.text$mn:0000AE58                 push    ebp
.text$mn:0000AE59                 mov     ebp, esp
.text$mn:0000AE5B                 call    ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category(void)
.text$mn:0000AE60                 push    eax             ; struct std::error_category *
.text$mn:0000AE61                 mov     eax, [ebp+arg_4]
.text$mn:0000AE64                 push    eax             ; int
.text$mn:0000AE65                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000AE68                 call    ??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code(int,std::error_category const &)
.text$mn:0000AE6D                 mov     eax, [ebp+arg_0]
.text$mn:0000AE70                 pop     ebp
.text$mn:0000AE71                 retn
.text$mn:0000AE71 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z endp
.text$mn:0000AE71
.text$mn:0000AE71 ; ---------------------------------------------------------------------------
.text$mn:0000AE72                 align 4
.text$mn:0000AE72 _text$mn        ends
.text$mn:0000AE72
.text$mn:0000AE74 ; ===========================================================================
.text$mn:0000AE74
.text$mn:0000AE74 ; Segment type: Pure code
.text$mn:0000AE74 ; Segment permissions: Read/Execute
.text$mn:0000AE74 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE74                 assume cs:_text$mn
.text$mn:0000AE74                 ;org 0AE74h
.text$mn:0000AE74 ; COMDAT (pick any)
.text$mn:0000AE74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE74
.text$mn:0000AE74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE74
.text$mn:0000AE74 ; Attributes: bp-based frame
.text$mn:0000AE74
.text$mn:0000AE74 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000AE74                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000AE74 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000AE74                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000AE74
.text$mn:0000AE74 var_4           = dword ptr -4
.text$mn:0000AE74
.text$mn:0000AE74                 push    ebp
.text$mn:0000AE75                 mov     ebp, esp
.text$mn:0000AE77                 push    ecx
.text$mn:0000AE78                 mov     [ebp+var_4], ecx
.text$mn:0000AE7B                 mov     eax, [ebp+var_4]
.text$mn:0000AE7E                 push    eax
.text$mn:0000AE7F                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000AE84                 add     esp, 4
.text$mn:0000AE87                 mov     esp, ebp
.text$mn:0000AE89                 pop     ebp
.text$mn:0000AE8A                 retn
.text$mn:0000AE8A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000AE8A
.text$mn:0000AE8A ; ---------------------------------------------------------------------------
.text$mn:0000AE8B                 align 4
.text$mn:0000AE8B _text$mn        ends
.text$mn:0000AE8B
.text$mn:0000AE8C ; ===========================================================================
.text$mn:0000AE8C
.text$mn:0000AE8C ; Segment type: Pure code
.text$mn:0000AE8C ; Segment permissions: Read/Execute
.text$mn:0000AE8C _text$mn        segment para public 'CODE' use32
.text$mn:0000AE8C                 assume cs:_text$mn
.text$mn:0000AE8C                 ;org 0AE8Ch
.text$mn:0000AE8C ; COMDAT (pick any)
.text$mn:0000AE8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE8C
.text$mn:0000AE8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE8C
.text$mn:0000AE8C ; Attributes: bp-based frame
.text$mn:0000AE8C
.text$mn:0000AE8C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000AE8C                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000AE8C ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000AE8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000AE8C
.text$mn:0000AE8C var_4           = dword ptr -4
.text$mn:0000AE8C
.text$mn:0000AE8C                 push    ebp
.text$mn:0000AE8D                 mov     ebp, esp
.text$mn:0000AE8F                 push    ecx
.text$mn:0000AE90                 mov     [ebp+var_4], ecx
.text$mn:0000AE93                 mov     eax, [ebp+var_4]
.text$mn:0000AE96                 push    eax
.text$mn:0000AE97                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000AE9C                 add     esp, 4
.text$mn:0000AE9F                 mov     esp, ebp
.text$mn:0000AEA1                 pop     ebp
.text$mn:0000AEA2                 retn
.text$mn:0000AEA2 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000AEA2
.text$mn:0000AEA2 ; ---------------------------------------------------------------------------
.text$mn:0000AEA3                 align 4
.text$mn:0000AEA3 _text$mn        ends
.text$mn:0000AEA3
.text$mn:0000AEA4 ; ===========================================================================
.text$mn:0000AEA4
.text$mn:0000AEA4 ; Segment type: Pure code
.text$mn:0000AEA4 ; Segment permissions: Read/Execute
.text$mn:0000AEA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEA4                 assume cs:_text$mn
.text$mn:0000AEA4                 ;org 0AEA4h
.text$mn:0000AEA4 ; COMDAT (pick any)
.text$mn:0000AEA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEA4
.text$mn:0000AEA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEA4
.text$mn:0000AEA4 ; Attributes: bp-based frame
.text$mn:0000AEA4
.text$mn:0000AEA4 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000AEA4                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000AEA4 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000AEA4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000AEA4
.text$mn:0000AEA4 var_4           = dword ptr -4
.text$mn:0000AEA4
.text$mn:0000AEA4                 push    ebp
.text$mn:0000AEA5                 mov     ebp, esp
.text$mn:0000AEA7                 push    ecx
.text$mn:0000AEA8                 mov     [ebp+var_4], ecx
.text$mn:0000AEAB                 or      eax, 0FFFFFFFFh
.text$mn:0000AEAE                 mov     esp, ebp
.text$mn:0000AEB0                 pop     ebp
.text$mn:0000AEB1                 retn
.text$mn:0000AEB1 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:0000AEB1
.text$mn:0000AEB1 ; ---------------------------------------------------------------------------
.text$mn:0000AEB2                 align 4
.text$mn:0000AEB2 _text$mn        ends
.text$mn:0000AEB2
.text$mn:0000AEB4 ; ===========================================================================
.text$mn:0000AEB4
.text$mn:0000AEB4 ; Segment type: Pure code
.text$mn:0000AEB4 ; Segment permissions: Read/Execute
.text$mn:0000AEB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEB4                 assume cs:_text$mn
.text$mn:0000AEB4                 ;org 0AEB4h
.text$mn:0000AEB4 ; COMDAT (pick any)
.text$mn:0000AEB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEB4
.text$mn:0000AEB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEB4
.text$mn:0000AEB4 ; Attributes: bp-based frame
.text$mn:0000AEB4
.text$mn:0000AEB4 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000AEB4                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000AEB4 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000AEB4                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000AEB4
.text$mn:0000AEB4 var_4           = dword ptr -4
.text$mn:0000AEB4
.text$mn:0000AEB4                 push    ebp
.text$mn:0000AEB5                 mov     ebp, esp
.text$mn:0000AEB7                 push    ecx
.text$mn:0000AEB8                 mov     [ebp+var_4], ecx
.text$mn:0000AEBB                 mov     eax, 7FFFFFFFh
.text$mn:0000AEC0                 mov     esp, ebp
.text$mn:0000AEC2                 pop     ebp
.text$mn:0000AEC3                 retn
.text$mn:0000AEC3 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000AEC3
.text$mn:0000AEC3 _text$mn        ends
.text$mn:0000AEC3
.text$mn:0000AEC4 ; ===========================================================================
.text$mn:0000AEC4
.text$mn:0000AEC4 ; Segment type: Pure code
.text$mn:0000AEC4 ; Segment permissions: Read/Execute
.text$mn:0000AEC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEC4                 assume cs:_text$mn
.text$mn:0000AEC4                 ;org 0AEC4h
.text$mn:0000AEC4 ; COMDAT (pick any)
.text$mn:0000AEC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEC4
.text$mn:0000AEC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEC4
.text$mn:0000AEC4 ; Attributes: bp-based frame
.text$mn:0000AEC4
.text$mn:0000AEC4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000AEC4                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000AEC4 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000AEC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000AEC4
.text$mn:0000AEC4 arg_0           = dword ptr  8
.text$mn:0000AEC4
.text$mn:0000AEC4                 push    ebp
.text$mn:0000AEC5                 mov     ebp, esp
.text$mn:0000AEC7                 mov     ecx, [ebp+arg_0]
.text$mn:0000AECA                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000AECF                 pop     ebp
.text$mn:0000AED0                 retn
.text$mn:0000AED0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:0000AED0
.text$mn:0000AED0 ; ---------------------------------------------------------------------------
.text$mn:0000AED1                 align 4
.text$mn:0000AED1 _text$mn        ends
.text$mn:0000AED1
.text$mn:0000AED4 ; ===========================================================================
.text$mn:0000AED4
.text$mn:0000AED4 ; Segment type: Pure code
.text$mn:0000AED4 ; Segment permissions: Read/Execute
.text$mn:0000AED4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AED4                 assume cs:_text$mn
.text$mn:0000AED4                 ;org 0AED4h
.text$mn:0000AED4 ; COMDAT (pick any)
.text$mn:0000AED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AED4
.text$mn:0000AED4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AED4
.text$mn:0000AED4 ; Attributes: bp-based frame
.text$mn:0000AED4
.text$mn:0000AED4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000AED4                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000AED4 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000AED4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000AED4
.text$mn:0000AED4 arg_0           = dword ptr  8
.text$mn:0000AED4
.text$mn:0000AED4                 push    ebp
.text$mn:0000AED5                 mov     ebp, esp
.text$mn:0000AED7                 mov     ecx, [ebp+arg_0]
.text$mn:0000AEDA                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000AEDF                 pop     ebp
.text$mn:0000AEE0                 retn
.text$mn:0000AEE0 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:0000AEE0
.text$mn:0000AEE0 ; ---------------------------------------------------------------------------
.text$mn:0000AEE1                 align 4
.text$mn:0000AEE1 _text$mn        ends
.text$mn:0000AEE1
.text$mn:0000AEE4 ; ===========================================================================
.text$mn:0000AEE4
.text$mn:0000AEE4 ; Segment type: Pure code
.text$mn:0000AEE4 ; Segment permissions: Read/Execute
.text$mn:0000AEE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEE4                 assume cs:_text$mn
.text$mn:0000AEE4                 ;org 0AEE4h
.text$mn:0000AEE4 ; COMDAT (pick any)
.text$mn:0000AEE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEE4
.text$mn:0000AEE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEE4
.text$mn:0000AEE4 ; Attributes: bp-based frame
.text$mn:0000AEE4
.text$mn:0000AEE4 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000AEE4                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000AEE4 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000AEE4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000AEE4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000AEE4
.text$mn:0000AEE4 var_10          = dword ptr -10h
.text$mn:0000AEE4 var_C           = dword ptr -0Ch
.text$mn:0000AEE4 var_8           = dword ptr -8
.text$mn:0000AEE4 var_1           = byte ptr -1
.text$mn:0000AEE4
.text$mn:0000AEE4                 push    ebp
.text$mn:0000AEE5                 mov     ebp, esp
.text$mn:0000AEE7                 sub     esp, 10h
.text$mn:0000AEEA                 mov     [ebp+var_10], ecx
.text$mn:0000AEED                 lea     eax, [ebp+var_1]
.text$mn:0000AEF0                 push    eax
.text$mn:0000AEF1                 mov     ecx, [ebp+var_10]
.text$mn:0000AEF4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000AEF9                 mov     ecx, eax
.text$mn:0000AEFB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:0000AF00                 mov     [ebp+var_8], eax
.text$mn:0000AF03                 cmp     [ebp+var_8], 1
.text$mn:0000AF07                 ja      short loc_AF12
.text$mn:0000AF09                 mov     [ebp+var_C], 1
.text$mn:0000AF10                 jmp     short loc_AF1B
.text$mn:0000AF12 ; ---------------------------------------------------------------------------
.text$mn:0000AF12
.text$mn:0000AF12 loc_AF12:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000AF12                 mov     ecx, [ebp+var_8]
.text$mn:0000AF15                 sub     ecx, 1
.text$mn:0000AF18                 mov     [ebp+var_C], ecx
.text$mn:0000AF1B
.text$mn:0000AF1B loc_AF1B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000AF1B                 mov     eax, [ebp+var_C]
.text$mn:0000AF1E                 mov     esp, ebp
.text$mn:0000AF20                 pop     ebp
.text$mn:0000AF21                 retn
.text$mn:0000AF21 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000AF21
.text$mn:0000AF21 ; ---------------------------------------------------------------------------
.text$mn:0000AF22                 align 4
.text$mn:0000AF22 _text$mn        ends
.text$mn:0000AF22
.text$mn:0000AF24 ; ===========================================================================
.text$mn:0000AF24
.text$mn:0000AF24 ; Segment type: Pure code
.text$mn:0000AF24 ; Segment permissions: Read/Execute
.text$mn:0000AF24 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF24                 assume cs:_text$mn
.text$mn:0000AF24                 ;org 0AF24h
.text$mn:0000AF24 ; COMDAT (pick any)
.text$mn:0000AF24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF24
.text$mn:0000AF24 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF24
.text$mn:0000AF24 ; Attributes: bp-based frame
.text$mn:0000AF24
.text$mn:0000AF24 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000AF24                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000AF24 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000AF24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000AF24                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000AF24
.text$mn:0000AF24 var_10          = dword ptr -10h
.text$mn:0000AF24 var_C           = dword ptr -0Ch
.text$mn:0000AF24 var_8           = dword ptr -8
.text$mn:0000AF24 var_1           = byte ptr -1
.text$mn:0000AF24
.text$mn:0000AF24                 push    ebp
.text$mn:0000AF25                 mov     ebp, esp
.text$mn:0000AF27                 sub     esp, 10h
.text$mn:0000AF2A                 mov     [ebp+var_10], ecx
.text$mn:0000AF2D                 lea     eax, [ebp+var_1]
.text$mn:0000AF30                 push    eax
.text$mn:0000AF31                 mov     ecx, [ebp+var_10]
.text$mn:0000AF34                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000AF39                 mov     ecx, eax
.text$mn:0000AF3B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AF40                 mov     [ebp+var_8], eax
.text$mn:0000AF43                 cmp     [ebp+var_8], 1
.text$mn:0000AF47                 ja      short loc_AF52
.text$mn:0000AF49                 mov     [ebp+var_C], 1
.text$mn:0000AF50                 jmp     short loc_AF5B
.text$mn:0000AF52 ; ---------------------------------------------------------------------------
.text$mn:0000AF52
.text$mn:0000AF52 loc_AF52:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000AF52                 mov     ecx, [ebp+var_8]
.text$mn:0000AF55                 sub     ecx, 1
.text$mn:0000AF58                 mov     [ebp+var_C], ecx
.text$mn:0000AF5B
.text$mn:0000AF5B loc_AF5B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000AF5B                 mov     eax, [ebp+var_C]
.text$mn:0000AF5E                 mov     esp, ebp
.text$mn:0000AF60                 pop     ebp
.text$mn:0000AF61                 retn
.text$mn:0000AF61 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000AF61
.text$mn:0000AF61 ; ---------------------------------------------------------------------------
.text$mn:0000AF62                 align 4
.text$mn:0000AF62 _text$mn        ends
.text$mn:0000AF62
.text$mn:0000AF64 ; ===========================================================================
.text$mn:0000AF64
.text$mn:0000AF64 ; Segment type: Pure code
.text$mn:0000AF64 ; Segment permissions: Read/Execute
.text$mn:0000AF64 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF64                 assume cs:_text$mn
.text$mn:0000AF64                 ;org 0AF64h
.text$mn:0000AF64 ; COMDAT (pick any)
.text$mn:0000AF64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF64
.text$mn:0000AF64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF64
.text$mn:0000AF64 ; Attributes: bp-based frame
.text$mn:0000AF64
.text$mn:0000AF64 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000AF64                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000AF64 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000AF64                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000AF64                                         ; DATA XREF: .rdata:0000E1F4o
.text$mn:0000AF64
.text$mn:0000AF64 var_1C          = dword ptr -1Ch
.text$mn:0000AF64 var_18          = dword ptr -18h
.text$mn:0000AF64 Str             = dword ptr -14h
.text$mn:0000AF64 var_10          = dword ptr -10h
.text$mn:0000AF64 var_C           = dword ptr -0Ch
.text$mn:0000AF64 var_4           = dword ptr -4
.text$mn:0000AF64 arg_0           = dword ptr  8
.text$mn:0000AF64 arg_4           = dword ptr  0Ch
.text$mn:0000AF64
.text$mn:0000AF64                 push    ebp
.text$mn:0000AF65                 mov     ebp, esp
.text$mn:0000AF67                 push    0FFFFFFFFh
.text$mn:0000AF69                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000AF6E                 mov     eax, large fs:0
.text$mn:0000AF74                 push    eax
.text$mn:0000AF75                 sub     esp, 10h
.text$mn:0000AF78                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AF7D                 xor     eax, ebp
.text$mn:0000AF7F                 push    eax
.text$mn:0000AF80                 lea     eax, [ebp+var_C]
.text$mn:0000AF83                 mov     large fs:0, eax
.text$mn:0000AF89                 mov     [ebp+var_1C], ecx
.text$mn:0000AF8C                 mov     [ebp+var_18], 0
.text$mn:0000AF93                 mov     eax, [ebp+arg_4]
.text$mn:0000AF96                 push    eax             ; int
.text$mn:0000AF97                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000AF9C                 add     esp, 4
.text$mn:0000AF9F                 mov     [ebp+var_10], eax
.text$mn:0000AFA2                 cmp     [ebp+var_10], 0
.text$mn:0000AFA6                 jz      short loc_AFB0
.text$mn:0000AFA8                 mov     ecx, [ebp+var_10]
.text$mn:0000AFAB                 mov     [ebp+Str], ecx
.text$mn:0000AFAE                 jmp     short loc_AFB7
.text$mn:0000AFB0 ; ---------------------------------------------------------------------------
.text$mn:0000AFB0
.text$mn:0000AFB0 loc_AFB0:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:0000AFB0                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000AFB7
.text$mn:0000AFB7 loc_AFB7:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000AFB7                 mov     edx, [ebp+Str]
.text$mn:0000AFBA                 push    edx             ; Str
.text$mn:0000AFBB                 mov     ecx, [ebp+arg_0]
.text$mn:0000AFBE                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000AFC3                 mov     [ebp+var_4], 0
.text$mn:0000AFCA                 mov     eax, [ebp+var_18]
.text$mn:0000AFCD                 or      eax, 1
.text$mn:0000AFD0                 mov     [ebp+var_18], eax
.text$mn:0000AFD3                 mov     eax, [ebp+arg_0]
.text$mn:0000AFD6                 mov     ecx, [ebp+var_C]
.text$mn:0000AFD9                 mov     large fs:0, ecx
.text$mn:0000AFE0                 pop     ecx
.text$mn:0000AFE1                 mov     esp, ebp
.text$mn:0000AFE3                 pop     ebp
.text$mn:0000AFE4                 retn    8
.text$mn:0000AFE4 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000AFE4
.text$mn:0000AFE4 ; ---------------------------------------------------------------------------
.text$mn:0000AFE7                 align 4
.text$mn:0000AFE7 _text$mn        ends
.text$mn:0000AFE7
.text$x:0000AFE8 ; ===========================================================================
.text$x:0000AFE8
.text$x:0000AFE8 ; Segment type: Pure code
.text$x:0000AFE8 ; Segment permissions: Read/Execute
.text$x:0000AFE8 _text$x         segment para public 'CODE' use32
.text$x:0000AFE8                 assume cs:_text$x
.text$x:0000AFE8                 ;org 0AFE8h
.text$x:0000AFE8 ; COMDAT (pick associative to section at AF64)
.text$x:0000AFE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AFE8
.text$x:0000AFE8 ; =============== S U B R O U T I N E =======================================
.text$x:0000AFE8
.text$x:0000AFE8
.text$x:0000AFE8 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000AFE8                                         ; DATA XREF: .xdata$x:0000CF30o
.text$x:0000AFE8                 mov     eax, [ebp-18h]
.text$x:0000AFEB                 and     eax, 1
.text$x:0000AFEE                 jz      $LN6
.text$x:0000AFF4                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000AFF8                 mov     ecx, [ebp+8]
.text$x:0000AFFB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000B000 ; ---------------------------------------------------------------------------
.text$x:0000B000
.text$x:0000B000 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000B000                 retn
.text$x:0000B000 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000B000
.text$x:0000B001
.text$x:0000B001 ; =============== S U B R O U T I N E =======================================
.text$x:0000B001
.text$x:0000B001
.text$x:0000B001 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000B001                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:0000B001
.text$x:0000B001 arg_4           = dword ptr  8
.text$x:0000B001
.text$x:0000B001                 mov     edx, [esp+arg_4]
.text$x:0000B005                 lea     eax, [edx+0Ch]
.text$x:0000B008                 mov     ecx, [edx-14h]
.text$x:0000B00B                 xor     ecx, eax
.text$x:0000B00D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B012                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000B017                 jmp     ___CxxFrameHandler3
.text$x:0000B017 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000B017
.text$x:0000B017 _text$x         ends
.text$x:0000B017
.text$mn:0000B01C ; ===========================================================================
.text$mn:0000B01C
.text$mn:0000B01C ; Segment type: Pure code
.text$mn:0000B01C ; Segment permissions: Read/Execute
.text$mn:0000B01C _text$mn        segment para public 'CODE' use32
.text$mn:0000B01C                 assume cs:_text$mn
.text$mn:0000B01C                 ;org 0B01Ch
.text$mn:0000B01C ; COMDAT (pick any)
.text$mn:0000B01C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B01C
.text$mn:0000B01C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B01C
.text$mn:0000B01C ; Attributes: bp-based frame
.text$mn:0000B01C
.text$mn:0000B01C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000B01C                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000B01C ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000B01C                                         ; DATA XREF: .rdata:0000E228o
.text$mn:0000B01C
.text$mn:0000B01C var_14          = dword ptr -14h
.text$mn:0000B01C var_10          = dword ptr -10h
.text$mn:0000B01C var_C           = dword ptr -0Ch
.text$mn:0000B01C var_4           = dword ptr -4
.text$mn:0000B01C arg_0           = dword ptr  8
.text$mn:0000B01C arg_4           = dword ptr  0Ch
.text$mn:0000B01C
.text$mn:0000B01C                 push    ebp
.text$mn:0000B01D                 mov     ebp, esp
.text$mn:0000B01F                 push    0FFFFFFFFh
.text$mn:0000B021                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000B026                 mov     eax, large fs:0
.text$mn:0000B02C                 push    eax
.text$mn:0000B02D                 sub     esp, 8
.text$mn:0000B030                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B035                 xor     eax, ebp
.text$mn:0000B037                 push    eax
.text$mn:0000B038                 lea     eax, [ebp+var_C]
.text$mn:0000B03B                 mov     large fs:0, eax
.text$mn:0000B041                 mov     [ebp+var_14], ecx
.text$mn:0000B044                 mov     [ebp+var_10], 0
.text$mn:0000B04B                 cmp     [ebp+arg_4], 1
.text$mn:0000B04F                 jnz     short loc_B075
.text$mn:0000B051                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000B056                 mov     ecx, [ebp+arg_0]
.text$mn:0000B059                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000B05E                 mov     [ebp+var_4], 0
.text$mn:0000B065                 mov     eax, [ebp+var_10]
.text$mn:0000B068                 or      eax, 1
.text$mn:0000B06B                 mov     [ebp+var_10], eax
.text$mn:0000B06E                 mov     eax, [ebp+arg_0]
.text$mn:0000B071                 jmp     short loc_B098
.text$mn:0000B073 ; ---------------------------------------------------------------------------
.text$mn:0000B073                 jmp     short loc_B098
.text$mn:0000B075 ; ---------------------------------------------------------------------------
.text$mn:0000B075
.text$mn:0000B075 loc_B075:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000B075                 mov     ecx, [ebp+arg_4]
.text$mn:0000B078                 push    ecx
.text$mn:0000B079                 mov     edx, [ebp+arg_0]
.text$mn:0000B07C                 push    edx
.text$mn:0000B07D                 mov     ecx, [ebp+var_14]
.text$mn:0000B080                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000B085                 mov     [ebp+var_4], 0
.text$mn:0000B08C                 mov     eax, [ebp+var_10]
.text$mn:0000B08F                 or      eax, 1
.text$mn:0000B092                 mov     [ebp+var_10], eax
.text$mn:0000B095                 mov     eax, [ebp+arg_0]
.text$mn:0000B098
.text$mn:0000B098 loc_B098:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:0000B098                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:0000B098                 mov     ecx, [ebp+var_C]
.text$mn:0000B09B                 mov     large fs:0, ecx
.text$mn:0000B0A2                 pop     ecx
.text$mn:0000B0A3                 mov     esp, ebp
.text$mn:0000B0A5                 pop     ebp
.text$mn:0000B0A6                 retn    8
.text$mn:0000B0A6 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000B0A6
.text$mn:0000B0A6 ; ---------------------------------------------------------------------------
.text$mn:0000B0A9                 align 4
.text$mn:0000B0A9 _text$mn        ends
.text$mn:0000B0A9
.text$x:0000B0AC ; ===========================================================================
.text$x:0000B0AC
.text$x:0000B0AC ; Segment type: Pure code
.text$x:0000B0AC ; Segment permissions: Read/Execute
.text$x:0000B0AC _text$x         segment para public 'CODE' use32
.text$x:0000B0AC                 assume cs:_text$x
.text$x:0000B0AC                 ;org 0B0ACh
.text$x:0000B0AC ; COMDAT (pick associative to section at B01C)
.text$x:0000B0AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B0AC
.text$x:0000B0AC ; =============== S U B R O U T I N E =======================================
.text$x:0000B0AC
.text$x:0000B0AC
.text$x:0000B0AC __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000B0AC                                         ; DATA XREF: .xdata$x:0000CFB4o
.text$x:0000B0AC                 mov     eax, [ebp-10h]
.text$x:0000B0AF                 and     eax, 1
.text$x:0000B0B2                 jz      $LN6_0
.text$x:0000B0B8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B0BC                 mov     ecx, [ebp+8]
.text$x:0000B0BF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000B0C4 ; ---------------------------------------------------------------------------
.text$x:0000B0C4
.text$x:0000B0C4 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000B0C4                 retn
.text$x:0000B0C4 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000B0C4
.text$x:0000B0C5
.text$x:0000B0C5 ; =============== S U B R O U T I N E =======================================
.text$x:0000B0C5
.text$x:0000B0C5
.text$x:0000B0C5 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000B0C5                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000B0C5
.text$x:0000B0C5 arg_4           = dword ptr  8
.text$x:0000B0C5
.text$x:0000B0C5                 mov     edx, [esp+arg_4]
.text$x:0000B0C9                 lea     eax, [edx+0Ch]
.text$x:0000B0CC                 mov     ecx, [edx-0Ch]
.text$x:0000B0CF                 xor     ecx, eax
.text$x:0000B0D1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B0D6                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000B0DB                 jmp     ___CxxFrameHandler3
.text$x:0000B0DB __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000B0DB
.text$x:0000B0DB _text$x         ends
.text$x:0000B0DB
.text$mn:0000B0E0 ; ===========================================================================
.text$mn:0000B0E0
.text$mn:0000B0E0 ; Segment type: Pure code
.text$mn:0000B0E0 ; Segment permissions: Read/Execute
.text$mn:0000B0E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B0E0                 assume cs:_text$mn
.text$mn:0000B0E0                 ;org 0B0E0h
.text$mn:0000B0E0 ; COMDAT (pick any)
.text$mn:0000B0E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0E0
.text$mn:0000B0E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0E0
.text$mn:0000B0E0 ; Attributes: bp-based frame
.text$mn:0000B0E0
.text$mn:0000B0E0 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:0000B0E0                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000B0E0 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000B0E0                                         ; DATA XREF: .rdata:0000E268o
.text$mn:0000B0E0
.text$mn:0000B0E0 var_1C          = dword ptr -1Ch
.text$mn:0000B0E0 var_18          = dword ptr -18h
.text$mn:0000B0E0 Str             = dword ptr -14h
.text$mn:0000B0E0 var_10          = dword ptr -10h
.text$mn:0000B0E0 var_C           = dword ptr -0Ch
.text$mn:0000B0E0 var_4           = dword ptr -4
.text$mn:0000B0E0 arg_0           = dword ptr  8
.text$mn:0000B0E0 arg_4           = dword ptr  0Ch
.text$mn:0000B0E0
.text$mn:0000B0E0                 push    ebp
.text$mn:0000B0E1                 mov     ebp, esp
.text$mn:0000B0E3                 push    0FFFFFFFFh
.text$mn:0000B0E5                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000B0EA                 mov     eax, large fs:0
.text$mn:0000B0F0                 push    eax
.text$mn:0000B0F1                 sub     esp, 10h
.text$mn:0000B0F4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B0F9                 xor     eax, ebp
.text$mn:0000B0FB                 push    eax
.text$mn:0000B0FC                 lea     eax, [ebp+var_C]
.text$mn:0000B0FF                 mov     large fs:0, eax
.text$mn:0000B105                 mov     [ebp+var_1C], ecx
.text$mn:0000B108                 mov     [ebp+var_18], 0
.text$mn:0000B10F                 mov     eax, [ebp+arg_4]
.text$mn:0000B112                 push    eax             ; int
.text$mn:0000B113                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000B118                 add     esp, 4
.text$mn:0000B11B                 mov     [ebp+var_10], eax
.text$mn:0000B11E                 cmp     [ebp+var_10], 0
.text$mn:0000B122                 jz      short loc_B12C
.text$mn:0000B124                 mov     ecx, [ebp+var_10]
.text$mn:0000B127                 mov     [ebp+Str], ecx
.text$mn:0000B12A                 jmp     short loc_B133
.text$mn:0000B12C ; ---------------------------------------------------------------------------
.text$mn:0000B12C
.text$mn:0000B12C loc_B12C:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000B12C                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000B133
.text$mn:0000B133 loc_B133:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000B133                 mov     edx, [ebp+Str]
.text$mn:0000B136                 push    edx             ; Str
.text$mn:0000B137                 mov     ecx, [ebp+arg_0]
.text$mn:0000B13A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000B13F                 mov     [ebp+var_4], 0
.text$mn:0000B146                 mov     eax, [ebp+var_18]
.text$mn:0000B149                 or      eax, 1
.text$mn:0000B14C                 mov     [ebp+var_18], eax
.text$mn:0000B14F                 mov     eax, [ebp+arg_0]
.text$mn:0000B152                 mov     ecx, [ebp+var_C]
.text$mn:0000B155                 mov     large fs:0, ecx
.text$mn:0000B15C                 pop     ecx
.text$mn:0000B15D                 mov     esp, ebp
.text$mn:0000B15F                 pop     ebp
.text$mn:0000B160                 retn    8
.text$mn:0000B160 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000B160
.text$mn:0000B160 ; ---------------------------------------------------------------------------
.text$mn:0000B163                 align 4
.text$mn:0000B163 _text$mn        ends
.text$mn:0000B163
.text$x:0000B164 ; ===========================================================================
.text$x:0000B164
.text$x:0000B164 ; Segment type: Pure code
.text$x:0000B164 ; Segment permissions: Read/Execute
.text$x:0000B164 _text$x         segment para public 'CODE' use32
.text$x:0000B164                 assume cs:_text$x
.text$x:0000B164                 ;org 0B164h
.text$x:0000B164 ; COMDAT (pick associative to section at B0E0)
.text$x:0000B164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B164
.text$x:0000B164 ; =============== S U B R O U T I N E =======================================
.text$x:0000B164
.text$x:0000B164
.text$x:0000B164 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000B164                                         ; DATA XREF: .xdata$x:0000D038o
.text$x:0000B164                 mov     eax, [ebp-18h]
.text$x:0000B167                 and     eax, 1
.text$x:0000B16A                 jz      $LN6_1
.text$x:0000B170                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000B174                 mov     ecx, [ebp+8]
.text$x:0000B177                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000B17C ; ---------------------------------------------------------------------------
.text$x:0000B17C
.text$x:0000B17C $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000B17C                 retn
.text$x:0000B17C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000B17C
.text$x:0000B17D
.text$x:0000B17D ; =============== S U B R O U T I N E =======================================
.text$x:0000B17D
.text$x:0000B17D
.text$x:0000B17D __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000B17D                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000B17D
.text$x:0000B17D arg_4           = dword ptr  8
.text$x:0000B17D
.text$x:0000B17D                 mov     edx, [esp+arg_4]
.text$x:0000B181                 lea     eax, [edx+0Ch]
.text$x:0000B184                 mov     ecx, [edx-14h]
.text$x:0000B187                 xor     ecx, eax
.text$x:0000B189                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B18E                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000B193                 jmp     ___CxxFrameHandler3
.text$x:0000B193 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000B193
.text$x:0000B193 _text$x         ends
.text$x:0000B193
.text$mn:0000B198 ; ===========================================================================
.text$mn:0000B198
.text$mn:0000B198 ; Segment type: Pure code
.text$mn:0000B198 ; Segment permissions: Read/Execute
.text$mn:0000B198 _text$mn        segment para public 'CODE' use32
.text$mn:0000B198                 assume cs:_text$mn
.text$mn:0000B198                 ;org 0B198h
.text$mn:0000B198 ; COMDAT (pick any)
.text$mn:0000B198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B198
.text$mn:0000B198 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B198
.text$mn:0000B198 ; Attributes: bp-based frame
.text$mn:0000B198
.text$mn:0000B198 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::error_code::message(void)const
.text$mn:0000B198                 public ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000B198 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$mn:0000B198                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+59p
.text$mn:0000B198
.text$mn:0000B198 var_18          = dword ptr -18h
.text$mn:0000B198 var_14          = dword ptr -14h
.text$mn:0000B198 var_10          = dword ptr -10h
.text$mn:0000B198 var_C           = dword ptr -0Ch
.text$mn:0000B198 var_4           = dword ptr -4
.text$mn:0000B198 arg_0           = dword ptr  8
.text$mn:0000B198
.text$mn:0000B198                 push    ebp
.text$mn:0000B199                 mov     ebp, esp
.text$mn:0000B19B                 push    0FFFFFFFFh
.text$mn:0000B19D                 push    offset __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000B1A2                 mov     eax, large fs:0
.text$mn:0000B1A8                 push    eax
.text$mn:0000B1A9                 sub     esp, 0Ch
.text$mn:0000B1AC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B1B1                 xor     eax, ebp
.text$mn:0000B1B3                 push    eax
.text$mn:0000B1B4                 lea     eax, [ebp+var_C]
.text$mn:0000B1B7                 mov     large fs:0, eax
.text$mn:0000B1BD                 mov     [ebp+var_10], ecx
.text$mn:0000B1C0                 mov     [ebp+var_18], 0
.text$mn:0000B1C7                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000B1CA                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000B1CF                 mov     [ebp+var_14], eax
.text$mn:0000B1D2                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000B1D5                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000B1DA                 push    eax
.text$mn:0000B1DB                 mov     eax, [ebp+arg_0]
.text$mn:0000B1DE                 push    eax
.text$mn:0000B1DF                 mov     ecx, [ebp+var_14]
.text$mn:0000B1E2                 mov     edx, [ecx]
.text$mn:0000B1E4                 mov     ecx, [ebp+var_14]
.text$mn:0000B1E7                 mov     eax, [edx+8]
.text$mn:0000B1EA                 call    eax
.text$mn:0000B1EC                 mov     [ebp+var_4], 0
.text$mn:0000B1F3                 mov     ecx, [ebp+var_18]
.text$mn:0000B1F6                 or      ecx, 1
.text$mn:0000B1F9                 mov     [ebp+var_18], ecx
.text$mn:0000B1FC                 mov     eax, [ebp+arg_0]
.text$mn:0000B1FF                 mov     ecx, [ebp+var_C]
.text$mn:0000B202                 mov     large fs:0, ecx
.text$mn:0000B209                 pop     ecx
.text$mn:0000B20A                 mov     esp, ebp
.text$mn:0000B20C                 pop     ebp
.text$mn:0000B20D                 retn    4
.text$mn:0000B20D ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$mn:0000B20D
.text$mn:0000B20D _text$mn        ends
.text$mn:0000B20D
.text$x:0000B210 ; ===========================================================================
.text$x:0000B210
.text$x:0000B210 ; Segment type: Pure code
.text$x:0000B210 ; Segment permissions: Read/Execute
.text$x:0000B210 _text$x         segment para public 'CODE' use32
.text$x:0000B210                 assume cs:_text$x
.text$x:0000B210                 ;org 0B210h
.text$x:0000B210 ; COMDAT (pick associative to section at B198)
.text$x:0000B210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B210
.text$x:0000B210 ; =============== S U B R O U T I N E =======================================
.text$x:0000B210
.text$x:0000B210
.text$x:0000B210 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 proc near
.text$x:0000B210                                         ; DATA XREF: .xdata$x:0000CD6Co
.text$x:0000B210                 mov     eax, [ebp-18h]
.text$x:0000B213                 and     eax, 1
.text$x:0000B216                 jz      $LN4
.text$x:0000B21C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000B220                 mov     ecx, [ebp+8]
.text$x:0000B223                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000B228 ; ---------------------------------------------------------------------------
.text$x:0000B228
.text$x:0000B228 $LN4:                                   ; CODE XREF: __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0+6j
.text$x:0000B228                 retn
.text$x:0000B228 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 endp
.text$x:0000B228
.text$x:0000B229
.text$x:0000B229 ; =============== S U B R O U T I N E =======================================
.text$x:0000B229
.text$x:0000B229
.text$x:0000B229 __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$x:0000B229                                         ; DATA XREF: std::error_code::message(void)+5o
.text$x:0000B229
.text$x:0000B229 arg_4           = dword ptr  8
.text$x:0000B229
.text$x:0000B229                 mov     edx, [esp+arg_4]
.text$x:0000B22D                 lea     eax, [edx+0Ch]
.text$x:0000B230                 mov     ecx, [edx-10h]
.text$x:0000B233                 xor     ecx, eax
.text$x:0000B235                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B23A                 mov     eax, offset __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$x:0000B23F                 jmp     ___CxxFrameHandler3
.text$x:0000B23F __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$x:0000B23F
.text$x:0000B23F _text$x         ends
.text$x:0000B23F
.text$mn:0000B244 ; ===========================================================================
.text$mn:0000B244
.text$mn:0000B244 ; Segment type: Pure code
.text$mn:0000B244 ; Segment permissions: Read/Execute
.text$mn:0000B244 _text$mn        segment para public 'CODE' use32
.text$mn:0000B244                 assume cs:_text$mn
.text$mn:0000B244                 ;org 0B244h
.text$mn:0000B244 ; COMDAT (pick any)
.text$mn:0000B244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B244
.text$mn:0000B244 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B244
.text$mn:0000B244 ; Attributes: bp-based frame
.text$mn:0000B244
.text$mn:0000B244 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:0000B244                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000B244 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:0000B244                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Ap
.text$mn:0000B244                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:0000B244
.text$mn:0000B244 var_4           = dword ptr -4
.text$mn:0000B244 Dst             = dword ptr  8
.text$mn:0000B244 Src             = dword ptr  0Ch
.text$mn:0000B244 Size            = dword ptr  10h
.text$mn:0000B244
.text$mn:0000B244                 push    ebp
.text$mn:0000B245                 mov     ebp, esp
.text$mn:0000B247                 push    ecx
.text$mn:0000B248                 cmp     [ebp+Size], 0
.text$mn:0000B24C                 jnz     short loc_B256
.text$mn:0000B24E                 mov     eax, [ebp+Dst]
.text$mn:0000B251                 mov     [ebp+var_4], eax
.text$mn:0000B254                 jmp     short loc_B26D
.text$mn:0000B256 ; ---------------------------------------------------------------------------
.text$mn:0000B256
.text$mn:0000B256 loc_B256:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000B256                 mov     ecx, [ebp+Size]
.text$mn:0000B259                 push    ecx             ; Size
.text$mn:0000B25A                 mov     edx, [ebp+Src]
.text$mn:0000B25D                 push    edx             ; Src
.text$mn:0000B25E                 mov     eax, [ebp+Dst]
.text$mn:0000B261                 push    eax             ; Dst
.text$mn:0000B262                 call    _memmove
.text$mn:0000B267                 add     esp, 0Ch
.text$mn:0000B26A                 mov     [ebp+var_4], eax
.text$mn:0000B26D
.text$mn:0000B26D loc_B26D:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:0000B26D                 mov     eax, [ebp+var_4]
.text$mn:0000B270                 mov     esp, ebp
.text$mn:0000B272                 pop     ebp
.text$mn:0000B273                 retn
.text$mn:0000B273 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000B273
.text$mn:0000B273 _text$mn        ends
.text$mn:0000B273
.text$mn:0000B274 ; ===========================================================================
.text$mn:0000B274
.text$mn:0000B274 ; Segment type: Pure code
.text$mn:0000B274 ; Segment permissions: Read/Execute
.text$mn:0000B274 _text$mn        segment para public 'CODE' use32
.text$mn:0000B274                 assume cs:_text$mn
.text$mn:0000B274                 ;org 0B274h
.text$mn:0000B274 ; COMDAT (pick any)
.text$mn:0000B274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B274
.text$mn:0000B274 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B274
.text$mn:0000B274 ; Attributes: bp-based frame
.text$mn:0000B274
.text$mn:0000B274 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000B274                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000B274 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000B274                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000B274                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:0000B274
.text$mn:0000B274 var_4           = dword ptr -4
.text$mn:0000B274 Dst             = dword ptr  8
.text$mn:0000B274 Src             = dword ptr  0Ch
.text$mn:0000B274 arg_8           = dword ptr  10h
.text$mn:0000B274
.text$mn:0000B274                 push    ebp
.text$mn:0000B275                 mov     ebp, esp
.text$mn:0000B277                 push    ecx
.text$mn:0000B278                 cmp     [ebp+arg_8], 0
.text$mn:0000B27C                 jnz     short loc_B286
.text$mn:0000B27E                 mov     eax, [ebp+Dst]
.text$mn:0000B281                 mov     [ebp+var_4], eax
.text$mn:0000B284                 jmp     short loc_B29D
.text$mn:0000B286 ; ---------------------------------------------------------------------------
.text$mn:0000B286
.text$mn:0000B286 loc_B286:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000B286                 mov     ecx, [ebp+arg_8]
.text$mn:0000B289                 push    ecx             ; int
.text$mn:0000B28A                 mov     edx, [ebp+Src]
.text$mn:0000B28D                 push    edx             ; Src
.text$mn:0000B28E                 mov     eax, [ebp+Dst]
.text$mn:0000B291                 push    eax             ; Dst
.text$mn:0000B292                 call    _wmemmove
.text$mn:0000B297                 add     esp, 0Ch
.text$mn:0000B29A                 mov     [ebp+var_4], eax
.text$mn:0000B29D
.text$mn:0000B29D loc_B29D:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000B29D                 mov     eax, [ebp+var_4]
.text$mn:0000B2A0                 mov     esp, ebp
.text$mn:0000B2A2                 pop     ebp
.text$mn:0000B2A3                 retn
.text$mn:0000B2A3 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000B2A3
.text$mn:0000B2A3 _text$mn        ends
.text$mn:0000B2A3
.text$mn:0000B2A4 ; ===========================================================================
.text$mn:0000B2A4
.text$mn:0000B2A4 ; Segment type: Pure code
.text$mn:0000B2A4 ; Segment permissions: Read/Execute
.text$mn:0000B2A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2A4                 assume cs:_text$mn
.text$mn:0000B2A4                 ;org 0B2A4h
.text$mn:0000B2A4 ; COMDAT (pick any)
.text$mn:0000B2A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2A4
.text$mn:0000B2A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2A4
.text$mn:0000B2A4 ; Attributes: bp-based frame
.text$mn:0000B2A4
.text$mn:0000B2A4 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000B2A4                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000B2A4 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000B2A4                                         ; DATA XREF: .rdata:0000E1F0o
.text$mn:0000B2A4
.text$mn:0000B2A4 var_4           = dword ptr -4
.text$mn:0000B2A4
.text$mn:0000B2A4                 push    ebp
.text$mn:0000B2A5                 mov     ebp, esp
.text$mn:0000B2A7                 push    ecx
.text$mn:0000B2A8                 mov     [ebp+var_4], ecx
.text$mn:0000B2AB                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000B2B0                 mov     esp, ebp
.text$mn:0000B2B2                 pop     ebp
.text$mn:0000B2B3                 retn
.text$mn:0000B2B3 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000B2B3
.text$mn:0000B2B3 _text$mn        ends
.text$mn:0000B2B3
.text$mn:0000B2B4 ; ===========================================================================
.text$mn:0000B2B4
.text$mn:0000B2B4 ; Segment type: Pure code
.text$mn:0000B2B4 ; Segment permissions: Read/Execute
.text$mn:0000B2B4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2B4                 assume cs:_text$mn
.text$mn:0000B2B4                 ;org 0B2B4h
.text$mn:0000B2B4 ; COMDAT (pick any)
.text$mn:0000B2B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2B4
.text$mn:0000B2B4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2B4
.text$mn:0000B2B4 ; Attributes: bp-based frame
.text$mn:0000B2B4
.text$mn:0000B2B4 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000B2B4                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000B2B4 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000B2B4                                         ; DATA XREF: .rdata:0000E224o
.text$mn:0000B2B4
.text$mn:0000B2B4 var_4           = dword ptr -4
.text$mn:0000B2B4
.text$mn:0000B2B4                 push    ebp
.text$mn:0000B2B5                 mov     ebp, esp
.text$mn:0000B2B7                 push    ecx
.text$mn:0000B2B8                 mov     [ebp+var_4], ecx
.text$mn:0000B2BB                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000B2C0                 mov     esp, ebp
.text$mn:0000B2C2                 pop     ebp
.text$mn:0000B2C3                 retn
.text$mn:0000B2C3 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000B2C3
.text$mn:0000B2C3 _text$mn        ends
.text$mn:0000B2C3
.text$mn:0000B2C4 ; ===========================================================================
.text$mn:0000B2C4
.text$mn:0000B2C4 ; Segment type: Pure code
.text$mn:0000B2C4 ; Segment permissions: Read/Execute
.text$mn:0000B2C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2C4                 assume cs:_text$mn
.text$mn:0000B2C4                 ;org 0B2C4h
.text$mn:0000B2C4 ; COMDAT (pick any)
.text$mn:0000B2C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2C4
.text$mn:0000B2C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2C4
.text$mn:0000B2C4 ; Attributes: bp-based frame
.text$mn:0000B2C4
.text$mn:0000B2C4 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000B2C4                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000B2C4 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000B2C4                                         ; DATA XREF: .rdata:0000E264o
.text$mn:0000B2C4
.text$mn:0000B2C4 var_4           = dword ptr -4
.text$mn:0000B2C4
.text$mn:0000B2C4                 push    ebp
.text$mn:0000B2C5                 mov     ebp, esp
.text$mn:0000B2C7                 push    ecx
.text$mn:0000B2C8                 mov     [ebp+var_4], ecx
.text$mn:0000B2CB                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000B2D0                 mov     esp, ebp
.text$mn:0000B2D2                 pop     ebp
.text$mn:0000B2D3                 retn
.text$mn:0000B2D3 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000B2D3
.text$mn:0000B2D3 _text$mn        ends
.text$mn:0000B2D3
.text$mn:0000B2D4 ; ===========================================================================
.text$mn:0000B2D4
.text$mn:0000B2D4 ; Segment type: Pure code
.text$mn:0000B2D4 ; Segment permissions: Read/Execute
.text$mn:0000B2D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2D4                 assume cs:_text$mn
.text$mn:0000B2D4                 ;org 0B2D4h
.text$mn:0000B2D4 ; COMDAT (pick any)
.text$mn:0000B2D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2D4
.text$mn:0000B2D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2D4
.text$mn:0000B2D4 ; Attributes: bp-based frame
.text$mn:0000B2D4
.text$mn:0000B2D4 ; public: static unsigned short __cdecl std::char_traits<wchar_t>::not_eof(unsigned short const &)
.text$mn:0000B2D4                 public ?not_eof@?$char_traits@_W@std@@SAGABG@Z
.text$mn:0000B2D4 ?not_eof@?$char_traits@_W@std@@SAGABG@Z proc near
.text$mn:0000B2D4                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+45p
.text$mn:0000B2D4                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+DEp
.text$mn:0000B2D4
.text$mn:0000B2D4 var_8           = dword ptr -8
.text$mn:0000B2D4 var_4           = dword ptr -4
.text$mn:0000B2D4 arg_0           = dword ptr  8
.text$mn:0000B2D4
.text$mn:0000B2D4                 push    ebp
.text$mn:0000B2D5                 mov     ebp, esp
.text$mn:0000B2D7                 sub     esp, 8
.text$mn:0000B2DA                 push    esi
.text$mn:0000B2DB                 mov     eax, [ebp+arg_0]
.text$mn:0000B2DE                 movzx   esi, word ptr [eax]
.text$mn:0000B2E1                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B2E6                 movzx   ecx, ax
.text$mn:0000B2E9                 cmp     esi, ecx
.text$mn:0000B2EB                 jz      short loc_B2F8
.text$mn:0000B2ED                 mov     edx, [ebp+arg_0]
.text$mn:0000B2F0                 movzx   eax, word ptr [edx]
.text$mn:0000B2F3                 mov     [ebp+var_8], eax
.text$mn:0000B2F6                 jmp     short loc_B31A
.text$mn:0000B2F8 ; ---------------------------------------------------------------------------
.text$mn:0000B2F8
.text$mn:0000B2F8 loc_B2F8:                               ; CODE XREF: std::char_traits<wchar_t>::not_eof(ushort const &)+17j
.text$mn:0000B2F8                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B2FD                 movzx   ecx, ax
.text$mn:0000B300                 test    ecx, ecx
.text$mn:0000B302                 jnz     short loc_B30D
.text$mn:0000B304                 mov     [ebp+var_4], 1
.text$mn:0000B30B                 jmp     short loc_B314
.text$mn:0000B30D ; ---------------------------------------------------------------------------
.text$mn:0000B30D
.text$mn:0000B30D loc_B30D:                               ; CODE XREF: std::char_traits<wchar_t>::not_eof(ushort const &)+2Ej
.text$mn:0000B30D                 mov     [ebp+var_4], 0
.text$mn:0000B314
.text$mn:0000B314 loc_B314:                               ; CODE XREF: std::char_traits<wchar_t>::not_eof(ushort const &)+37j
.text$mn:0000B314                 mov     edx, [ebp+var_4]
.text$mn:0000B317                 mov     [ebp+var_8], edx
.text$mn:0000B31A
.text$mn:0000B31A loc_B31A:                               ; CODE XREF: std::char_traits<wchar_t>::not_eof(ushort const &)+22j
.text$mn:0000B31A                 mov     ax, word ptr [ebp+var_8]
.text$mn:0000B31E                 pop     esi
.text$mn:0000B31F                 mov     esp, ebp
.text$mn:0000B321                 pop     ebp
.text$mn:0000B322                 retn
.text$mn:0000B322 ?not_eof@?$char_traits@_W@std@@SAGABG@Z endp
.text$mn:0000B322
.text$mn:0000B322 ; ---------------------------------------------------------------------------
.text$mn:0000B323                 align 4
.text$mn:0000B323 _text$mn        ends
.text$mn:0000B323
.text$mn:0000B324 ; ===========================================================================
.text$mn:0000B324
.text$mn:0000B324 ; Segment type: Pure code
.text$mn:0000B324 ; Segment permissions: Read/Execute
.text$mn:0000B324 _text$mn        segment para public 'CODE' use32
.text$mn:0000B324                 assume cs:_text$mn
.text$mn:0000B324                 ;org 0B324h
.text$mn:0000B324 ; COMDAT (pick any)
.text$mn:0000B324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B324
.text$mn:0000B324 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B324
.text$mn:0000B324 ; Attributes: bp-based frame
.text$mn:0000B324
.text$mn:0000B324 ; protected: virtual unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::overflow(unsigned short)
.text$mn:0000B324                 public ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
.text$mn:0000B324 ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z proc near
.text$mn:0000B324                                         ; DATA XREF: .rdata:0000E428o
.text$mn:0000B324
.text$mn:0000B324 var_4           = dword ptr -4
.text$mn:0000B324
.text$mn:0000B324                 push    ebp
.text$mn:0000B325                 mov     ebp, esp
.text$mn:0000B327                 push    ecx
.text$mn:0000B328                 mov     [ebp+var_4], ecx
.text$mn:0000B32B                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B330                 mov     esp, ebp
.text$mn:0000B332                 pop     ebp
.text$mn:0000B333                 retn    4
.text$mn:0000B333 ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z endp
.text$mn:0000B333
.text$mn:0000B333 ; ---------------------------------------------------------------------------
.text$mn:0000B336                 align 4
.text$mn:0000B336 _text$mn        ends
.text$mn:0000B336
.text$mn:0000B338 ; ===========================================================================
.text$mn:0000B338
.text$mn:0000B338 ; Segment type: Pure code
.text$mn:0000B338 ; Segment permissions: Read/Execute
.text$mn:0000B338 _text$mn        segment para public 'CODE' use32
.text$mn:0000B338                 assume cs:_text$mn
.text$mn:0000B338                 ;org 0B338h
.text$mn:0000B338 ; COMDAT (pick any)
.text$mn:0000B338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B338
.text$mn:0000B338 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B338
.text$mn:0000B338 ; Attributes: bp-based frame
.text$mn:0000B338
.text$mn:0000B338 ; protected: virtual unsigned short __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::overflow(unsigned short)
.text$mn:0000B338                 public ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
.text$mn:0000B338 ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z proc near
.text$mn:0000B338                                         ; DATA XREF: .rdata:0000E590o
.text$mn:0000B338
.text$mn:0000B338 var_24          = dword ptr -24h
.text$mn:0000B338 var_20          = dword ptr -20h
.text$mn:0000B338 var_1C          = dword ptr -1Ch
.text$mn:0000B338 Src             = dword ptr -18h
.text$mn:0000B338 var_14          = dword ptr -14h
.text$mn:0000B338 var_10          = dword ptr -10h
.text$mn:0000B338 Dst             = dword ptr -0Ch
.text$mn:0000B338 var_8           = dword ptr -8
.text$mn:0000B338 var_2           = word ptr -2
.text$mn:0000B338 arg_0           = word ptr  8
.text$mn:0000B338
.text$mn:0000B338                 push    ebp
.text$mn:0000B339                 mov     ebp, esp
.text$mn:0000B33B                 sub     esp, 24h
.text$mn:0000B33E                 push    esi
.text$mn:0000B33F                 mov     [ebp+var_8], ecx
.text$mn:0000B342                 mov     eax, [ebp+var_8]
.text$mn:0000B345                 mov     ecx, [eax+3Ch]
.text$mn:0000B348                 and     ecx, 2
.text$mn:0000B34B                 jz      short loc_B359
.text$mn:0000B34D                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B352                 jmp     loc_B62B
.text$mn:0000B357 ; ---------------------------------------------------------------------------
.text$mn:0000B357                 jmp     short loc_B38A
.text$mn:0000B359 ; ---------------------------------------------------------------------------
.text$mn:0000B359
.text$mn:0000B359 loc_B359:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+13j
.text$mn:0000B359                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B35E                 mov     [ebp+var_2], ax
.text$mn:0000B362                 lea     edx, [ebp+arg_0]
.text$mn:0000B365                 push    edx
.text$mn:0000B366                 lea     eax, [ebp+var_2]
.text$mn:0000B369                 push    eax
.text$mn:0000B36A                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000B36F                 add     esp, 8
.text$mn:0000B372                 movzx   ecx, al
.text$mn:0000B375                 test    ecx, ecx
.text$mn:0000B377                 jz      short loc_B38A
.text$mn:0000B379                 lea     edx, [ebp+arg_0]
.text$mn:0000B37C                 push    edx
.text$mn:0000B37D                 call    ?not_eof@?$char_traits@_W@std@@SAGABG@Z ; std::char_traits<wchar_t>::not_eof(ushort const &)
.text$mn:0000B382                 add     esp, 4
.text$mn:0000B385                 jmp     loc_B62B
.text$mn:0000B38A ; ---------------------------------------------------------------------------
.text$mn:0000B38A
.text$mn:0000B38A loc_B38A:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+1Fj
.text$mn:0000B38A                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+3Fj
.text$mn:0000B38A                 mov     eax, [ebp+var_8]
.text$mn:0000B38D                 mov     ecx, [eax+3Ch]
.text$mn:0000B390                 and     ecx, 8
.text$mn:0000B393                 jz      short loc_B3D2
.text$mn:0000B395                 mov     ecx, [ebp+var_8]
.text$mn:0000B398                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B39D                 test    eax, eax
.text$mn:0000B39F                 jz      short loc_B3D2
.text$mn:0000B3A1                 mov     ecx, [ebp+var_8]
.text$mn:0000B3A4                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B3A9                 mov     edx, [ebp+var_8]
.text$mn:0000B3AC                 cmp     eax, [edx+38h]
.text$mn:0000B3AF                 jnb     short loc_B3D2
.text$mn:0000B3B1                 mov     ecx, [ebp+var_8]
.text$mn:0000B3B4                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:0000B3B9                 push    eax
.text$mn:0000B3BA                 mov     eax, [ebp+var_8]
.text$mn:0000B3BD                 mov     ecx, [eax+38h]
.text$mn:0000B3C0                 push    ecx
.text$mn:0000B3C1                 mov     ecx, [ebp+var_8]
.text$mn:0000B3C4                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000B3C9                 push    eax
.text$mn:0000B3CA                 mov     ecx, [ebp+var_8]
.text$mn:0000B3CD                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B3D2
.text$mn:0000B3D2 loc_B3D2:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+5Bj
.text$mn:0000B3D2                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+67j ...
.text$mn:0000B3D2                 mov     ecx, [ebp+var_8]
.text$mn:0000B3D5                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B3DA                 test    eax, eax
.text$mn:0000B3DC                 jz      short loc_B41C
.text$mn:0000B3DE                 mov     ecx, [ebp+var_8]
.text$mn:0000B3E1                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B3E6                 mov     esi, eax
.text$mn:0000B3E8                 mov     ecx, [ebp+var_8]
.text$mn:0000B3EB                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:0000B3F0                 cmp     esi, eax
.text$mn:0000B3F2                 jnb     short loc_B41C
.text$mn:0000B3F4                 lea     edx, [ebp+arg_0]
.text$mn:0000B3F7                 push    edx
.text$mn:0000B3F8                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:0000B3FD                 add     esp, 4
.text$mn:0000B400                 mov     si, ax
.text$mn:0000B403                 mov     ecx, [ebp+var_8]
.text$mn:0000B406                 call    ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pninc(void)
.text$mn:0000B40B                 mov     [eax], si
.text$mn:0000B40E                 mov     ax, [ebp+arg_0]
.text$mn:0000B412                 jmp     loc_B62B
.text$mn:0000B417 ; ---------------------------------------------------------------------------
.text$mn:0000B417                 jmp     loc_B62B
.text$mn:0000B41C ; ---------------------------------------------------------------------------
.text$mn:0000B41C
.text$mn:0000B41C loc_B41C:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+A4j
.text$mn:0000B41C                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+BAj
.text$mn:0000B41C                 mov     ecx, [ebp+var_8]
.text$mn:0000B41F                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B424                 test    eax, eax
.text$mn:0000B426                 jnz     short loc_B431
.text$mn:0000B428                 mov     [ebp+var_20], 0
.text$mn:0000B42F                 jmp     short loc_B44A
.text$mn:0000B431 ; ---------------------------------------------------------------------------
.text$mn:0000B431
.text$mn:0000B431 loc_B431:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+EEj
.text$mn:0000B431                 mov     ecx, [ebp+var_8]
.text$mn:0000B434                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:0000B439                 mov     esi, eax
.text$mn:0000B43B                 mov     ecx, [ebp+var_8]
.text$mn:0000B43E                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B443                 sub     esi, eax
.text$mn:0000B445                 sar     esi, 1
.text$mn:0000B447                 mov     [ebp+var_20], esi
.text$mn:0000B44A
.text$mn:0000B44A loc_B44A:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+F7j
.text$mn:0000B44A                 mov     eax, [ebp+var_20]
.text$mn:0000B44D                 mov     [ebp+var_1C], eax
.text$mn:0000B450                 mov     ecx, [ebp+var_1C]
.text$mn:0000B453                 mov     [ebp+var_10], ecx
.text$mn:0000B456                 mov     edx, [ebp+var_10]
.text$mn:0000B459                 shr     edx, 1
.text$mn:0000B45B                 cmp     edx, 20h ; ' '
.text$mn:0000B45E                 jnb     short loc_B469
.text$mn:0000B460                 mov     [ebp+var_24], 20h ; ' '
.text$mn:0000B467                 jmp     short loc_B471
.text$mn:0000B469 ; ---------------------------------------------------------------------------
.text$mn:0000B469
.text$mn:0000B469 loc_B469:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+126j
.text$mn:0000B469                 mov     eax, [ebp+var_10]
.text$mn:0000B46C                 shr     eax, 1
.text$mn:0000B46E                 mov     [ebp+var_24], eax
.text$mn:0000B471
.text$mn:0000B471 loc_B471:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+12Fj
.text$mn:0000B471                 mov     ecx, [ebp+var_24]
.text$mn:0000B474                 mov     [ebp+var_14], ecx
.text$mn:0000B477
.text$mn:0000B477 loc_B477:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+15Aj
.text$mn:0000B477                 cmp     [ebp+var_14], 0
.text$mn:0000B47B                 jbe     short loc_B494
.text$mn:0000B47D                 mov     edx, 7FFFFFFFh
.text$mn:0000B482                 sub     edx, [ebp+var_14]
.text$mn:0000B485                 cmp     edx, [ebp+var_10]
.text$mn:0000B488                 jnb     short loc_B494
.text$mn:0000B48A                 mov     eax, [ebp+var_14]
.text$mn:0000B48D                 shr     eax, 1
.text$mn:0000B48F                 mov     [ebp+var_14], eax
.text$mn:0000B492                 jmp     short loc_B477
.text$mn:0000B494 ; ---------------------------------------------------------------------------
.text$mn:0000B494
.text$mn:0000B494 loc_B494:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+143j
.text$mn:0000B494                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+150j
.text$mn:0000B494                 cmp     [ebp+var_14], 0
.text$mn:0000B498                 jnz     short loc_B4A4
.text$mn:0000B49A                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B49F                 jmp     loc_B62B
.text$mn:0000B4A4 ; ---------------------------------------------------------------------------
.text$mn:0000B4A4
.text$mn:0000B4A4 loc_B4A4:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+160j
.text$mn:0000B4A4                 mov     ecx, [ebp+var_10]
.text$mn:0000B4A7                 add     ecx, [ebp+var_14]
.text$mn:0000B4AA                 mov     [ebp+var_10], ecx
.text$mn:0000B4AD                 mov     edx, [ebp+var_10]
.text$mn:0000B4B0                 push    edx
.text$mn:0000B4B1                 mov     ecx, [ebp+var_8]
.text$mn:0000B4B4                 add     ecx, 40h ; '@'
.text$mn:0000B4B7                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000B4BC                 mov     [ebp+Dst], eax
.text$mn:0000B4BF                 mov     ecx, [ebp+var_8]
.text$mn:0000B4C2                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B4C7                 mov     [ebp+Src], eax
.text$mn:0000B4CA                 cmp     [ebp+var_1C], 0
.text$mn:0000B4CE                 jbe     short loc_B4E4
.text$mn:0000B4D0                 mov     eax, [ebp+var_1C]
.text$mn:0000B4D3                 push    eax             ; int
.text$mn:0000B4D4                 mov     ecx, [ebp+Src]
.text$mn:0000B4D7                 push    ecx             ; Src
.text$mn:0000B4D8                 mov     edx, [ebp+Dst]
.text$mn:0000B4DB                 push    edx             ; Dst
.text$mn:0000B4DC                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000B4E1                 add     esp, 0Ch
.text$mn:0000B4E4
.text$mn:0000B4E4 loc_B4E4:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+196j
.text$mn:0000B4E4                 cmp     [ebp+var_1C], 0
.text$mn:0000B4E8                 jnz     short loc_B544
.text$mn:0000B4EA                 mov     eax, [ebp+var_8]
.text$mn:0000B4ED                 mov     ecx, [ebp+Dst]
.text$mn:0000B4F0                 mov     [eax+38h], ecx
.text$mn:0000B4F3                 mov     edx, [ebp+var_10]
.text$mn:0000B4F6                 mov     eax, [ebp+Dst]
.text$mn:0000B4F9                 lea     ecx, [eax+edx*2]
.text$mn:0000B4FC                 push    ecx
.text$mn:0000B4FD                 mov     edx, [ebp+Dst]
.text$mn:0000B500                 push    edx
.text$mn:0000B501                 mov     ecx, [ebp+var_8]
.text$mn:0000B504                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *)
.text$mn:0000B509                 mov     eax, [ebp+var_8]
.text$mn:0000B50C                 mov     ecx, [eax+3Ch]
.text$mn:0000B50F                 and     ecx, 4
.text$mn:0000B512                 jz      short loc_B528
.text$mn:0000B514                 mov     edx, [ebp+Dst]
.text$mn:0000B517                 push    edx
.text$mn:0000B518                 push    0
.text$mn:0000B51A                 mov     eax, [ebp+Dst]
.text$mn:0000B51D                 push    eax
.text$mn:0000B51E                 mov     ecx, [ebp+var_8]
.text$mn:0000B521                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B526                 jmp     short loc_B53F
.text$mn:0000B528 ; ---------------------------------------------------------------------------
.text$mn:0000B528
.text$mn:0000B528 loc_B528:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+1DAj
.text$mn:0000B528                 mov     ecx, [ebp+Dst]
.text$mn:0000B52B                 add     ecx, 2
.text$mn:0000B52E                 push    ecx
.text$mn:0000B52F                 mov     edx, [ebp+Dst]
.text$mn:0000B532                 push    edx
.text$mn:0000B533                 mov     eax, [ebp+Dst]
.text$mn:0000B536                 push    eax
.text$mn:0000B537                 mov     ecx, [ebp+var_8]
.text$mn:0000B53A                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B53F
.text$mn:0000B53F loc_B53F:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+1EEj
.text$mn:0000B53F                 jmp     loc_B5E0
.text$mn:0000B544 ; ---------------------------------------------------------------------------
.text$mn:0000B544
.text$mn:0000B544 loc_B544:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+1B0j
.text$mn:0000B544                 mov     ecx, [ebp+var_8]
.text$mn:0000B547                 mov     edx, [ecx+38h]
.text$mn:0000B54A                 sub     edx, [ebp+Src]
.text$mn:0000B54D                 sar     edx, 1
.text$mn:0000B54F                 mov     eax, [ebp+Dst]
.text$mn:0000B552                 lea     ecx, [eax+edx*2]
.text$mn:0000B555                 mov     edx, [ebp+var_8]
.text$mn:0000B558                 mov     [edx+38h], ecx
.text$mn:0000B55B                 mov     eax, [ebp+var_10]
.text$mn:0000B55E                 mov     ecx, [ebp+Dst]
.text$mn:0000B561                 lea     edx, [ecx+eax*2]
.text$mn:0000B564                 push    edx
.text$mn:0000B565                 mov     ecx, [ebp+var_8]
.text$mn:0000B568                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B56D                 sub     eax, [ebp+Src]
.text$mn:0000B570                 sar     eax, 1
.text$mn:0000B572                 mov     ecx, [ebp+Dst]
.text$mn:0000B575                 lea     edx, [ecx+eax*2]
.text$mn:0000B578                 push    edx
.text$mn:0000B579                 mov     ecx, [ebp+var_8]
.text$mn:0000B57C                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000B581                 sub     eax, [ebp+Src]
.text$mn:0000B584                 sar     eax, 1
.text$mn:0000B586                 mov     ecx, [ebp+Dst]
.text$mn:0000B589                 lea     edx, [ecx+eax*2]
.text$mn:0000B58C                 push    edx
.text$mn:0000B58D                 mov     ecx, [ebp+var_8]
.text$mn:0000B590                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B595                 mov     eax, [ebp+var_8]
.text$mn:0000B598                 mov     ecx, [eax+3Ch]
.text$mn:0000B59B                 and     ecx, 4
.text$mn:0000B59E                 jz      short loc_B5B4
.text$mn:0000B5A0                 mov     edx, [ebp+Dst]
.text$mn:0000B5A3                 push    edx
.text$mn:0000B5A4                 push    0
.text$mn:0000B5A6                 mov     eax, [ebp+Dst]
.text$mn:0000B5A9                 push    eax
.text$mn:0000B5AA                 mov     ecx, [ebp+var_8]
.text$mn:0000B5AD                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B5B2                 jmp     short loc_B5E0
.text$mn:0000B5B4 ; ---------------------------------------------------------------------------
.text$mn:0000B5B4
.text$mn:0000B5B4 loc_B5B4:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+266j
.text$mn:0000B5B4                 mov     ecx, [ebp+var_8]
.text$mn:0000B5B7                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B5BC                 add     eax, 2
.text$mn:0000B5BF                 push    eax
.text$mn:0000B5C0                 mov     ecx, [ebp+var_8]
.text$mn:0000B5C3                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B5C8                 sub     eax, [ebp+Src]
.text$mn:0000B5CB                 sar     eax, 1
.text$mn:0000B5CD                 mov     ecx, [ebp+Dst]
.text$mn:0000B5D0                 lea     edx, [ecx+eax*2]
.text$mn:0000B5D3                 push    edx
.text$mn:0000B5D4                 mov     eax, [ebp+Dst]
.text$mn:0000B5D7                 push    eax
.text$mn:0000B5D8                 mov     ecx, [ebp+var_8]
.text$mn:0000B5DB                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B5E0
.text$mn:0000B5E0 loc_B5E0:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort):loc_B53Fj
.text$mn:0000B5E0                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+27Aj
.text$mn:0000B5E0                 mov     ecx, [ebp+var_8]
.text$mn:0000B5E3                 mov     edx, [ecx+3Ch]
.text$mn:0000B5E6                 and     edx, 1
.text$mn:0000B5E9                 jz      short loc_B5FE
.text$mn:0000B5EB                 mov     eax, [ebp+var_1C]
.text$mn:0000B5EE                 push    eax             ; int
.text$mn:0000B5EF                 mov     ecx, [ebp+Src]
.text$mn:0000B5F2                 push    ecx             ; void *
.text$mn:0000B5F3                 mov     ecx, [ebp+var_8]
.text$mn:0000B5F6                 add     ecx, 40h ; '@'
.text$mn:0000B5F9                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000B5FE
.text$mn:0000B5FE loc_B5FE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+2B1j
.text$mn:0000B5FE                 mov     edx, [ebp+var_8]
.text$mn:0000B601                 mov     eax, [edx+3Ch]
.text$mn:0000B604                 or      eax, 1
.text$mn:0000B607                 mov     ecx, [ebp+var_8]
.text$mn:0000B60A                 mov     [ecx+3Ch], eax
.text$mn:0000B60D                 lea     edx, [ebp+arg_0]
.text$mn:0000B610                 push    edx
.text$mn:0000B611                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:0000B616                 add     esp, 4
.text$mn:0000B619                 mov     si, ax
.text$mn:0000B61C                 mov     ecx, [ebp+var_8]
.text$mn:0000B61F                 call    ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pninc(void)
.text$mn:0000B624                 mov     [eax], si
.text$mn:0000B627                 mov     ax, [ebp+arg_0]
.text$mn:0000B62B
.text$mn:0000B62B loc_B62B:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+1Aj
.text$mn:0000B62B                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+4Dj ...
.text$mn:0000B62B                 pop     esi
.text$mn:0000B62C                 mov     esp, ebp
.text$mn:0000B62E                 pop     ebp
.text$mn:0000B62F                 retn    4
.text$mn:0000B62F ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z endp
.text$mn:0000B62F
.text$mn:0000B62F ; ---------------------------------------------------------------------------
.text$mn:0000B632                 align 4
.text$mn:0000B632 _text$mn        ends
.text$mn:0000B632
.text$mn:0000B634 ; ===========================================================================
.text$mn:0000B634
.text$mn:0000B634 ; Segment type: Pure code
.text$mn:0000B634 ; Segment permissions: Read/Execute
.text$mn:0000B634 _text$mn        segment para public 'CODE' use32
.text$mn:0000B634                 assume cs:_text$mn
.text$mn:0000B634                 ;org 0B634h
.text$mn:0000B634 ; COMDAT (pick any)
.text$mn:0000B634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B634
.text$mn:0000B634 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B634
.text$mn:0000B634 ; Attributes: bp-based frame
.text$mn:0000B634
.text$mn:0000B634 ; protected: virtual unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pbackfail(unsigned short)
.text$mn:0000B634                 public ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
.text$mn:0000B634 ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z proc near
.text$mn:0000B634                                         ; DATA XREF: .rdata:0000E42Co
.text$mn:0000B634
.text$mn:0000B634 var_4           = dword ptr -4
.text$mn:0000B634
.text$mn:0000B634                 push    ebp
.text$mn:0000B635                 mov     ebp, esp
.text$mn:0000B637                 push    ecx
.text$mn:0000B638                 mov     [ebp+var_4], ecx
.text$mn:0000B63B                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B640                 mov     esp, ebp
.text$mn:0000B642                 pop     ebp
.text$mn:0000B643                 retn    4
.text$mn:0000B643 ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z endp
.text$mn:0000B643
.text$mn:0000B643 ; ---------------------------------------------------------------------------
.text$mn:0000B646                 align 4
.text$mn:0000B646 _text$mn        ends
.text$mn:0000B646
.text$mn:0000B648 ; ===========================================================================
.text$mn:0000B648
.text$mn:0000B648 ; Segment type: Pure code
.text$mn:0000B648 ; Segment permissions: Read/Execute
.text$mn:0000B648 _text$mn        segment para public 'CODE' use32
.text$mn:0000B648                 assume cs:_text$mn
.text$mn:0000B648                 ;org 0B648h
.text$mn:0000B648 ; COMDAT (pick any)
.text$mn:0000B648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B648
.text$mn:0000B648 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B648
.text$mn:0000B648 ; Attributes: bp-based frame
.text$mn:0000B648
.text$mn:0000B648 ; protected: virtual unsigned short __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::pbackfail(unsigned short)
.text$mn:0000B648                 public ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
.text$mn:0000B648 ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z proc near
.text$mn:0000B648                                         ; DATA XREF: .rdata:0000E594o
.text$mn:0000B648
.text$mn:0000B648 var_C           = dword ptr -0Ch
.text$mn:0000B648 var_6           = word ptr -6
.text$mn:0000B648 var_4           = word ptr -4
.text$mn:0000B648 var_2           = word ptr -2
.text$mn:0000B648 arg_0           = byte ptr  8
.text$mn:0000B648
.text$mn:0000B648                 push    ebp
.text$mn:0000B649                 mov     ebp, esp
.text$mn:0000B64B                 sub     esp, 0Ch
.text$mn:0000B64E                 push    esi
.text$mn:0000B64F                 mov     [ebp+var_C], ecx
.text$mn:0000B652                 mov     ecx, [ebp+var_C]
.text$mn:0000B655                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B65A                 test    eax, eax
.text$mn:0000B65C                 jz      short loc_B6D5
.text$mn:0000B65E                 mov     ecx, [ebp+var_C]
.text$mn:0000B661                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B666                 mov     esi, eax
.text$mn:0000B668                 mov     ecx, [ebp+var_C]
.text$mn:0000B66B                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B670                 cmp     esi, eax
.text$mn:0000B672                 jbe     short loc_B6D5
.text$mn:0000B674                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B679                 mov     [ebp+var_2], ax
.text$mn:0000B67D                 lea     eax, [ebp+arg_0]
.text$mn:0000B680                 push    eax
.text$mn:0000B681                 lea     ecx, [ebp+var_2]
.text$mn:0000B684                 push    ecx
.text$mn:0000B685                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000B68A                 add     esp, 8
.text$mn:0000B68D                 movzx   edx, al
.text$mn:0000B690                 test    edx, edx
.text$mn:0000B692                 jnz     short loc_B6DE
.text$mn:0000B694                 lea     eax, [ebp+arg_0]
.text$mn:0000B697                 push    eax
.text$mn:0000B698                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:0000B69D                 add     esp, 4
.text$mn:0000B6A0                 mov     [ebp+var_4], ax
.text$mn:0000B6A4                 mov     ecx, [ebp+var_C]
.text$mn:0000B6A7                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B6AC                 mov     ecx, 2
.text$mn:0000B6B1                 imul    edx, ecx, -1
.text$mn:0000B6B4                 add     eax, edx
.text$mn:0000B6B6                 push    eax
.text$mn:0000B6B7                 lea     eax, [ebp+var_4]
.text$mn:0000B6BA                 push    eax
.text$mn:0000B6BB                 call    ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ; std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)
.text$mn:0000B6C0                 add     esp, 8
.text$mn:0000B6C3                 movzx   ecx, al
.text$mn:0000B6C6                 test    ecx, ecx
.text$mn:0000B6C8                 jnz     short loc_B6DE
.text$mn:0000B6CA                 mov     edx, [ebp+var_C]
.text$mn:0000B6CD                 mov     eax, [edx+3Ch]
.text$mn:0000B6D0                 and     eax, 2
.text$mn:0000B6D3                 jz      short loc_B6DE
.text$mn:0000B6D5
.text$mn:0000B6D5 loc_B6D5:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+14j
.text$mn:0000B6D5                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+2Aj
.text$mn:0000B6D5                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B6DA                 jmp     short loc_B72E
.text$mn:0000B6DC ; ---------------------------------------------------------------------------
.text$mn:0000B6DC                 jmp     short loc_B72E
.text$mn:0000B6DE ; ---------------------------------------------------------------------------
.text$mn:0000B6DE
.text$mn:0000B6DE loc_B6DE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+4Aj
.text$mn:0000B6DE                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+80j ...
.text$mn:0000B6DE                 push    0FFFFFFFFh
.text$mn:0000B6E0                 mov     ecx, [ebp+var_C]
.text$mn:0000B6E3                 call    ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gbump(int)
.text$mn:0000B6E8                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000B6ED                 mov     [ebp+var_6], ax
.text$mn:0000B6F1                 lea     ecx, [ebp+arg_0]
.text$mn:0000B6F4                 push    ecx
.text$mn:0000B6F5                 lea     edx, [ebp+var_6]
.text$mn:0000B6F8                 push    edx
.text$mn:0000B6F9                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000B6FE                 add     esp, 8
.text$mn:0000B701                 movzx   eax, al
.text$mn:0000B704                 test    eax, eax
.text$mn:0000B706                 jnz     short loc_B722
.text$mn:0000B708                 lea     ecx, [ebp+arg_0]
.text$mn:0000B70B                 push    ecx
.text$mn:0000B70C                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:0000B711                 add     esp, 4
.text$mn:0000B714                 mov     si, ax
.text$mn:0000B717                 mov     ecx, [ebp+var_C]
.text$mn:0000B71A                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B71F                 mov     [eax], si
.text$mn:0000B722
.text$mn:0000B722 loc_B722:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+BEj
.text$mn:0000B722                 lea     edx, [ebp+arg_0]
.text$mn:0000B725                 push    edx
.text$mn:0000B726                 call    ?not_eof@?$char_traits@_W@std@@SAGABG@Z ; std::char_traits<wchar_t>::not_eof(ushort const &)
.text$mn:0000B72B                 add     esp, 4
.text$mn:0000B72E
.text$mn:0000B72E loc_B72E:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+92j
.text$mn:0000B72E                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)+94j
.text$mn:0000B72E                 pop     esi
.text$mn:0000B72F                 mov     esp, ebp
.text$mn:0000B731                 pop     ebp
.text$mn:0000B732                 retn    4
.text$mn:0000B732 ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z endp
.text$mn:0000B732
.text$mn:0000B732 ; ---------------------------------------------------------------------------
.text$mn:0000B735                 align 4
.text$mn:0000B735 _text$mn        ends
.text$mn:0000B735
.text$mn:0000B738 ; ===========================================================================
.text$mn:0000B738
.text$mn:0000B738 ; Segment type: Pure code
.text$mn:0000B738 ; Segment permissions: Read/Execute
.text$mn:0000B738 _text$mn        segment para public 'CODE' use32
.text$mn:0000B738                 assume cs:_text$mn
.text$mn:0000B738                 ;org 0B738h
.text$mn:0000B738 ; COMDAT (pick any)
.text$mn:0000B738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B738
.text$mn:0000B738 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B738
.text$mn:0000B738 ; Attributes: bp-based frame
.text$mn:0000B738
.text$mn:0000B738 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pbase(void)const
.text$mn:0000B738                 public ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000B738 ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000B738                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+8Cp
.text$mn:0000B738                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+244p ...
.text$mn:0000B738
.text$mn:0000B738 var_4           = dword ptr -4
.text$mn:0000B738
.text$mn:0000B738                 push    ebp
.text$mn:0000B739                 mov     ebp, esp
.text$mn:0000B73B                 push    ecx
.text$mn:0000B73C                 mov     [ebp+var_4], ecx
.text$mn:0000B73F                 mov     eax, [ebp+var_4]
.text$mn:0000B742                 mov     ecx, [eax+10h]
.text$mn:0000B745                 mov     eax, [ecx]
.text$mn:0000B747                 mov     esp, ebp
.text$mn:0000B749                 pop     ebp
.text$mn:0000B74A                 retn
.text$mn:0000B74A ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000B74A
.text$mn:0000B74A ; ---------------------------------------------------------------------------
.text$mn:0000B74B                 align 4
.text$mn:0000B74B _text$mn        ends
.text$mn:0000B74B
.text$mn:0000B74C ; ===========================================================================
.text$mn:0000B74C
.text$mn:0000B74C ; Segment type: Pure code
.text$mn:0000B74C ; Segment permissions: Read/Execute
.text$mn:0000B74C _text$mn        segment para public 'CODE' use32
.text$mn:0000B74C                 assume cs:_text$mn
.text$mn:0000B74C                 ;org 0B74Ch
.text$mn:0000B74C ; COMDAT (pick any)
.text$mn:0000B74C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B74C
.text$mn:0000B74C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B74C
.text$mn:0000B74C ; Attributes: bp-based frame
.text$mn:0000B74C
.text$mn:0000B74C ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pbump(int)
.text$mn:0000B74C                 public ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
.text$mn:0000B74C ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z proc near
.text$mn:0000B74C                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+267p
.text$mn:0000B74C                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+1A9p ...
.text$mn:0000B74C
.text$mn:0000B74C var_4           = dword ptr -4
.text$mn:0000B74C arg_0           = dword ptr  8
.text$mn:0000B74C
.text$mn:0000B74C                 push    ebp
.text$mn:0000B74D                 mov     ebp, esp
.text$mn:0000B74F                 push    ecx
.text$mn:0000B750                 mov     [ebp+var_4], ecx
.text$mn:0000B753                 mov     eax, [ebp+var_4]
.text$mn:0000B756                 mov     ecx, [eax+30h]
.text$mn:0000B759                 mov     edx, [ecx]
.text$mn:0000B75B                 sub     edx, [ebp+arg_0]
.text$mn:0000B75E                 mov     eax, [ebp+var_4]
.text$mn:0000B761                 mov     ecx, [eax+30h]
.text$mn:0000B764                 mov     [ecx], edx
.text$mn:0000B766                 mov     edx, [ebp+var_4]
.text$mn:0000B769                 mov     eax, [edx+20h]
.text$mn:0000B76C                 mov     ecx, [eax]
.text$mn:0000B76E                 mov     edx, [ebp+arg_0]
.text$mn:0000B771                 lea     eax, [ecx+edx*2]
.text$mn:0000B774                 mov     ecx, [ebp+var_4]
.text$mn:0000B777                 mov     edx, [ecx+20h]
.text$mn:0000B77A                 mov     [edx], eax
.text$mn:0000B77C                 mov     esp, ebp
.text$mn:0000B77E                 pop     ebp
.text$mn:0000B77F                 retn    4
.text$mn:0000B77F ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z endp
.text$mn:0000B77F
.text$mn:0000B77F ; ---------------------------------------------------------------------------
.text$mn:0000B782                 align 4
.text$mn:0000B782 _text$mn        ends
.text$mn:0000B782
.text$mn:0000B784 ; ===========================================================================
.text$mn:0000B784
.text$mn:0000B784 ; Segment type: Pure code
.text$mn:0000B784 ; Segment permissions: Read/Execute
.text$mn:0000B784 _text$mn        segment para public 'CODE' use32
.text$mn:0000B784                 assume cs:_text$mn
.text$mn:0000B784                 ;org 0B784h
.text$mn:0000B784 ; COMDAT (pick any)
.text$mn:0000B784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B784
.text$mn:0000B784 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B784
.text$mn:0000B784 ; Attributes: bp-based frame
.text$mn:0000B784
.text$mn:0000B784 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pptr(void)const
.text$mn:0000B784                 public ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:0000B784 ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:0000B784                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+17p
.text$mn:0000B784                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+60p ...
.text$mn:0000B784
.text$mn:0000B784 var_4           = dword ptr -4
.text$mn:0000B784
.text$mn:0000B784                 push    ebp
.text$mn:0000B785                 mov     ebp, esp
.text$mn:0000B787                 push    ecx
.text$mn:0000B788                 mov     [ebp+var_4], ecx
.text$mn:0000B78B                 mov     eax, [ebp+var_4]
.text$mn:0000B78E                 mov     ecx, [eax+20h]
.text$mn:0000B791                 mov     eax, [ecx]
.text$mn:0000B793                 mov     esp, ebp
.text$mn:0000B795                 pop     ebp
.text$mn:0000B796                 retn
.text$mn:0000B796 ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:0000B796
.text$mn:0000B796 ; ---------------------------------------------------------------------------
.text$mn:0000B797                 align 4
.text$mn:0000B797 _text$mn        ends
.text$mn:0000B797
.text$mn:0000B798 ; ===========================================================================
.text$mn:0000B798
.text$mn:0000B798 ; Segment type: Pure code
.text$mn:0000B798 ; Segment permissions: Read/Execute
.text$mn:0000B798 _text$mn        segment para public 'CODE' use32
.text$mn:0000B798                 assume cs:_text$mn
.text$mn:0000B798                 ;org 0B798h
.text$mn:0000B798 ; COMDAT (pick any)
.text$mn:0000B798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B798
.text$mn:0000B798 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B798
.text$mn:0000B798 ; Attributes: bp-based frame
.text$mn:0000B798
.text$mn:0000B798 ; public: int __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pubsync(void)
.text$mn:0000B798                 public ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
.text$mn:0000B798 ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ proc near
.text$mn:0000B798                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+76p
.text$mn:0000B798                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+72p
.text$mn:0000B798
.text$mn:0000B798 var_4           = dword ptr -4
.text$mn:0000B798
.text$mn:0000B798                 push    ebp
.text$mn:0000B799                 mov     ebp, esp
.text$mn:0000B79B                 push    ecx
.text$mn:0000B79C                 mov     [ebp+var_4], ecx
.text$mn:0000B79F                 mov     eax, [ebp+var_4]
.text$mn:0000B7A2                 mov     edx, [eax]
.text$mn:0000B7A4                 mov     ecx, [ebp+var_4]
.text$mn:0000B7A7                 mov     eax, [edx+34h]
.text$mn:0000B7AA                 call    eax
.text$mn:0000B7AC                 mov     esp, ebp
.text$mn:0000B7AE                 pop     ebp
.text$mn:0000B7AF                 retn
.text$mn:0000B7AF ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ endp
.text$mn:0000B7AF
.text$mn:0000B7AF _text$mn        ends
.text$mn:0000B7AF
.text$mn:0000B7B0 ; ===========================================================================
.text$mn:0000B7B0
.text$mn:0000B7B0 ; Segment type: Pure code
.text$mn:0000B7B0 ; Segment permissions: Read/Execute
.text$mn:0000B7B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7B0                 assume cs:_text$mn
.text$mn:0000B7B0                 ;org 0B7B0h
.text$mn:0000B7B0 ; COMDAT (pick any)
.text$mn:0000B7B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7B0
.text$mn:0000B7B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7B0
.text$mn:0000B7B0 ; Attributes: bp-based frame
.text$mn:0000B7B0
.text$mn:0000B7B0 ; public: class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::rdbuf(void)const
.text$mn:0000B7B0                 public ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
.text$mn:0000B7B0 ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ proc near
.text$mn:0000B7B0                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+157p
.text$mn:0000B7B0                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1B1p ...
.text$mn:0000B7B0
.text$mn:0000B7B0 var_4           = dword ptr -4
.text$mn:0000B7B0
.text$mn:0000B7B0                 push    ebp
.text$mn:0000B7B1                 mov     ebp, esp
.text$mn:0000B7B3                 push    ecx
.text$mn:0000B7B4                 mov     [ebp+var_4], ecx
.text$mn:0000B7B7                 mov     eax, [ebp+var_4]
.text$mn:0000B7BA                 mov     eax, [eax+38h]
.text$mn:0000B7BD                 mov     esp, ebp
.text$mn:0000B7BF                 pop     ebp
.text$mn:0000B7C0                 retn
.text$mn:0000B7C0 ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ endp
.text$mn:0000B7C0
.text$mn:0000B7C0 ; ---------------------------------------------------------------------------
.text$mn:0000B7C1                 align 4
.text$mn:0000B7C1 _text$mn        ends
.text$mn:0000B7C1
.text$mn:0000B7C4 ; ===========================================================================
.text$mn:0000B7C4
.text$mn:0000B7C4 ; Segment type: Pure code
.text$mn:0000B7C4 ; Segment permissions: Read/Execute
.text$mn:0000B7C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7C4                 assume cs:_text$mn
.text$mn:0000B7C4                 ;org 0B7C4h
.text$mn:0000B7C4 ; COMDAT (pick any)
.text$mn:0000B7C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7C4
.text$mn:0000B7C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7C4
.text$mn:0000B7C4 ; Attributes: bp-based frame
.text$mn:0000B7C4
.text$mn:0000B7C4 ; int __thiscall std::ios_base::rdstate(std::ios_base *__hidden this)
.text$mn:0000B7C4                 public ?rdstate@ios_base@std@@QBEHXZ
.text$mn:0000B7C4 ?rdstate@ios_base@std@@QBEHXZ proc near ; CODE XREF: std::ios_base::good(void)+Cp
.text$mn:0000B7C4                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+15p
.text$mn:0000B7C4
.text$mn:0000B7C4 var_4           = dword ptr -4
.text$mn:0000B7C4
.text$mn:0000B7C4                 push    ebp
.text$mn:0000B7C5                 mov     ebp, esp
.text$mn:0000B7C7                 push    ecx
.text$mn:0000B7C8                 mov     [ebp+var_4], ecx
.text$mn:0000B7CB                 mov     eax, [ebp+var_4]
.text$mn:0000B7CE                 mov     eax, [eax+0Ch]
.text$mn:0000B7D1                 mov     esp, ebp
.text$mn:0000B7D3                 pop     ebp
.text$mn:0000B7D4                 retn
.text$mn:0000B7D4 ?rdstate@ios_base@std@@QBEHXZ endp
.text$mn:0000B7D4
.text$mn:0000B7D4 ; ---------------------------------------------------------------------------
.text$mn:0000B7D5                 align 4
.text$mn:0000B7D5 _text$mn        ends
.text$mn:0000B7D5
.text$mn:0000B7D8 ; ===========================================================================
.text$mn:0000B7D8
.text$mn:0000B7D8 ; Segment type: Pure code
.text$mn:0000B7D8 ; Segment permissions: Read/Execute
.text$mn:0000B7D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7D8                 assume cs:_text$mn
.text$mn:0000B7D8                 ;org 0B7D8h
.text$mn:0000B7D8 ; COMDAT (pick any)
.text$mn:0000B7D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7D8
.text$mn:0000B7D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7D8
.text$mn:0000B7D8 ; Attributes: bp-based frame
.text$mn:0000B7D8
.text$mn:0000B7D8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::reserve(unsigned int)
.text$mn:0000B7D8                 public ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000B7D8 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000B7D8                                         ; CODE XREF: operator>>(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,TiXmlNode &)+3Fp
.text$mn:0000B7D8                                         ; TiXmlDocument::LoadFile(wchar_t const *)+112p
.text$mn:0000B7D8
.text$mn:0000B7D8 var_8           = dword ptr -8
.text$mn:0000B7D8 var_4           = dword ptr -4
.text$mn:0000B7D8 arg_0           = dword ptr  8
.text$mn:0000B7D8
.text$mn:0000B7D8                 push    ebp
.text$mn:0000B7D9                 mov     ebp, esp
.text$mn:0000B7DB                 sub     esp, 8
.text$mn:0000B7DE                 mov     [ebp+var_4], ecx
.text$mn:0000B7E1                 mov     eax, [ebp+var_4]
.text$mn:0000B7E4                 mov     ecx, [eax+14h]
.text$mn:0000B7E7                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B7EA                 ja      short loc_B821
.text$mn:0000B7EC                 mov     edx, [ebp+var_4]
.text$mn:0000B7EF                 mov     eax, [edx+18h]
.text$mn:0000B7F2                 cmp     eax, [ebp+arg_0]
.text$mn:0000B7F5                 jz      short loc_B821
.text$mn:0000B7F7                 mov     ecx, [ebp+var_4]
.text$mn:0000B7FA                 mov     edx, [ecx+14h]
.text$mn:0000B7FD                 mov     [ebp+var_8], edx
.text$mn:0000B800                 push    1
.text$mn:0000B802                 mov     eax, [ebp+arg_0]
.text$mn:0000B805                 push    eax
.text$mn:0000B806                 mov     ecx, [ebp+var_4]
.text$mn:0000B809                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000B80E                 movzx   ecx, al
.text$mn:0000B811                 test    ecx, ecx
.text$mn:0000B813                 jz      short loc_B821
.text$mn:0000B815                 mov     edx, [ebp+var_8]
.text$mn:0000B818                 push    edx
.text$mn:0000B819                 mov     ecx, [ebp+var_4]
.text$mn:0000B81C                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B821
.text$mn:0000B821 loc_B821:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+12j
.text$mn:0000B821                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+1Dj ...
.text$mn:0000B821                 mov     esp, ebp
.text$mn:0000B823                 pop     ebp
.text$mn:0000B824                 retn    4
.text$mn:0000B824 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000B824
.text$mn:0000B824 ; ---------------------------------------------------------------------------
.text$mn:0000B827                 align 4
.text$mn:0000B827 _text$mn        ends
.text$mn:0000B827
.text$mn:0000B828 ; ===========================================================================
.text$mn:0000B828
.text$mn:0000B828 ; Segment type: Pure code
.text$mn:0000B828 ; Segment permissions: Read/Execute
.text$mn:0000B828 _text$mn        segment para public 'CODE' use32
.text$mn:0000B828                 assume cs:_text$mn
.text$mn:0000B828                 ;org 0B828h
.text$mn:0000B828 ; COMDAT (pick any)
.text$mn:0000B828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B828
.text$mn:0000B828 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B828
.text$mn:0000B828 ; Attributes: bp-based frame
.text$mn:0000B828
.text$mn:0000B828 ; protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::seekoff(__int64, int, int)
.text$mn:0000B828                 public ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
.text$mn:0000B828 ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
.text$mn:0000B828                                         ; DATA XREF: .rdata:0000E444o
.text$mn:0000B828
.text$mn:0000B828 var_4           = dword ptr -4
.text$mn:0000B828 arg_0           = dword ptr  8
.text$mn:0000B828
.text$mn:0000B828                 push    ebp
.text$mn:0000B829                 mov     ebp, esp
.text$mn:0000B82B                 push    ecx
.text$mn:0000B82C                 mov     [ebp+var_4], ecx
.text$mn:0000B82F                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000B834                 push    eax
.text$mn:0000B835                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000B83B                 push    ecx
.text$mn:0000B83C                 mov     ecx, [ebp+arg_0]
.text$mn:0000B83F                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000B844                 mov     eax, [ebp+arg_0]
.text$mn:0000B847                 mov     esp, ebp
.text$mn:0000B849                 pop     ebp
.text$mn:0000B84A                 retn    14h
.text$mn:0000B84A ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z endp
.text$mn:0000B84A
.text$mn:0000B84A ; ---------------------------------------------------------------------------
.text$mn:0000B84D                 align 10h
.text$mn:0000B84D _text$mn        ends
.text$mn:0000B84D
.text$mn:0000B850 ; ===========================================================================
.text$mn:0000B850
.text$mn:0000B850 ; Segment type: Pure code
.text$mn:0000B850 ; Segment permissions: Read/Execute
.text$mn:0000B850 _text$mn        segment para public 'CODE' use32
.text$mn:0000B850                 assume cs:_text$mn
.text$mn:0000B850                 ;org 0B850h
.text$mn:0000B850 ; COMDAT (pick any)
.text$mn:0000B850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B850
.text$mn:0000B850 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B850
.text$mn:0000B850 ; Attributes: bp-based frame
.text$mn:0000B850
.text$mn:0000B850 ; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::seekoff(__int64, int, int)
.text$mn:0000B850                 public ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
.text$mn:0000B850 ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
.text$mn:0000B850                                         ; DATA XREF: .rdata:0000E5ACo
.text$mn:0000B850
.text$mn:0000B850 var_14          = dword ptr -14h
.text$mn:0000B850 var_10          = dword ptr -10h
.text$mn:0000B850 var_C           = dword ptr -0Ch
.text$mn:0000B850 var_8           = dword ptr -8
.text$mn:0000B850 var_4           = dword ptr -4
.text$mn:0000B850 arg_0           = dword ptr  8
.text$mn:0000B850 arg_4           = dword ptr  0Ch
.text$mn:0000B850 arg_8           = dword ptr  10h
.text$mn:0000B850 arg_C           = dword ptr  14h
.text$mn:0000B850 arg_10          = dword ptr  18h
.text$mn:0000B850
.text$mn:0000B850                 push    ebp
.text$mn:0000B851                 mov     ebp, esp
.text$mn:0000B853                 sub     esp, 14h
.text$mn:0000B856                 push    esi
.text$mn:0000B857                 mov     [ebp+var_4], ecx
.text$mn:0000B85A                 mov     ecx, [ebp+var_4]
.text$mn:0000B85D                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B862                 test    eax, eax
.text$mn:0000B864                 jz      short loc_B884
.text$mn:0000B866                 mov     ecx, [ebp+var_4]
.text$mn:0000B869                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B86E                 mov     ecx, [ebp+var_4]
.text$mn:0000B871                 cmp     [ecx+38h], eax
.text$mn:0000B874                 jnb     short loc_B884
.text$mn:0000B876                 mov     ecx, [ebp+var_4]
.text$mn:0000B879                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B87E                 mov     edx, [ebp+var_4]
.text$mn:0000B881                 mov     [edx+38h], eax
.text$mn:0000B884
.text$mn:0000B884 loc_B884:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+14j
.text$mn:0000B884                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+24j
.text$mn:0000B884                 mov     eax, [ebp+arg_10]
.text$mn:0000B887                 and     eax, 1
.text$mn:0000B88A                 jz      loc_B9D0
.text$mn:0000B890                 mov     ecx, [ebp+var_4]
.text$mn:0000B893                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B898                 test    eax, eax
.text$mn:0000B89A                 jz      loc_B9D0
.text$mn:0000B8A0                 cmp     [ebp+arg_C], 2
.text$mn:0000B8A4                 jnz     short loc_B8C9
.text$mn:0000B8A6                 mov     ecx, [ebp+var_4]
.text$mn:0000B8A9                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B8AE                 mov     ecx, [ebp+var_4]
.text$mn:0000B8B1                 mov     edx, [ecx+38h]
.text$mn:0000B8B4                 sub     edx, eax
.text$mn:0000B8B6                 sar     edx, 1
.text$mn:0000B8B8                 mov     eax, edx
.text$mn:0000B8BA                 cdq
.text$mn:0000B8BB                 add     eax, [ebp+arg_4]
.text$mn:0000B8BE                 adc     edx, [ebp+arg_8]
.text$mn:0000B8C1                 mov     [ebp+arg_4], eax
.text$mn:0000B8C4                 mov     [ebp+arg_8], edx
.text$mn:0000B8C7                 jmp     short loc_B916
.text$mn:0000B8C9 ; ---------------------------------------------------------------------------
.text$mn:0000B8C9
.text$mn:0000B8C9 loc_B8C9:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+54j
.text$mn:0000B8C9                 cmp     [ebp+arg_C], 1
.text$mn:0000B8CD                 jnz     short loc_B8FE
.text$mn:0000B8CF                 mov     eax, [ebp+arg_10]
.text$mn:0000B8D2                 and     eax, 2
.text$mn:0000B8D5                 jnz     short loc_B8FE
.text$mn:0000B8D7                 mov     ecx, [ebp+var_4]
.text$mn:0000B8DA                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B8DF                 mov     esi, eax
.text$mn:0000B8E1                 mov     ecx, [ebp+var_4]
.text$mn:0000B8E4                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B8E9                 sub     esi, eax
.text$mn:0000B8EB                 sar     esi, 1
.text$mn:0000B8ED                 mov     eax, esi
.text$mn:0000B8EF                 cdq
.text$mn:0000B8F0                 add     eax, [ebp+arg_4]
.text$mn:0000B8F3                 adc     edx, [ebp+arg_8]
.text$mn:0000B8F6                 mov     [ebp+arg_4], eax
.text$mn:0000B8F9                 mov     [ebp+arg_8], edx
.text$mn:0000B8FC                 jmp     short loc_B916
.text$mn:0000B8FE ; ---------------------------------------------------------------------------
.text$mn:0000B8FE
.text$mn:0000B8FE loc_B8FE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+7Dj
.text$mn:0000B8FE                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+85j
.text$mn:0000B8FE                 cmp     [ebp+arg_C], 0
.text$mn:0000B902                 jz      short loc_B916
.text$mn:0000B904                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000B90A                 mov     [ebp+arg_4], ecx
.text$mn:0000B90D                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000B913                 mov     [ebp+arg_8], edx
.text$mn:0000B916
.text$mn:0000B916 loc_B916:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+77j
.text$mn:0000B916                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+ACj ...
.text$mn:0000B916                 cmp     [ebp+arg_8], 0
.text$mn:0000B91A                 jl      loc_B9BA
.text$mn:0000B920                 jg      short loc_B92C
.text$mn:0000B922                 cmp     [ebp+arg_4], 0
.text$mn:0000B926                 jb      loc_B9BA
.text$mn:0000B92C
.text$mn:0000B92C loc_B92C:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+D0j
.text$mn:0000B92C                 mov     ecx, [ebp+var_4]
.text$mn:0000B92F                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B934                 mov     ecx, [ebp+var_4]
.text$mn:0000B937                 mov     edx, [ecx+38h]
.text$mn:0000B93A                 sub     edx, eax
.text$mn:0000B93C                 sar     edx, 1
.text$mn:0000B93E                 mov     eax, edx
.text$mn:0000B940                 cdq
.text$mn:0000B941                 mov     [ebp+var_C], eax
.text$mn:0000B944                 mov     [ebp+var_8], edx
.text$mn:0000B947                 mov     eax, [ebp+arg_8]
.text$mn:0000B94A                 cmp     eax, [ebp+var_8]
.text$mn:0000B94D                 jg      short loc_B9BA
.text$mn:0000B94F                 jl      short loc_B959
.text$mn:0000B951                 mov     ecx, [ebp+arg_4]
.text$mn:0000B954                 cmp     ecx, [ebp+var_C]
.text$mn:0000B957                 ja      short loc_B9BA
.text$mn:0000B959
.text$mn:0000B959 loc_B959:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+FFj
.text$mn:0000B959                 mov     ecx, [ebp+var_4]
.text$mn:0000B95C                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B961                 mov     esi, eax
.text$mn:0000B963                 mov     ecx, [ebp+var_4]
.text$mn:0000B966                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B96B                 sub     esi, eax
.text$mn:0000B96D                 sar     esi, 1
.text$mn:0000B96F                 mov     eax, esi
.text$mn:0000B971                 cdq
.text$mn:0000B972                 add     eax, [ebp+arg_4]
.text$mn:0000B975                 adc     edx, [ebp+arg_8]
.text$mn:0000B978                 push    eax
.text$mn:0000B979                 mov     ecx, [ebp+var_4]
.text$mn:0000B97C                 call    ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gbump(int)
.text$mn:0000B981                 mov     edx, [ebp+arg_10]
.text$mn:0000B984                 and     edx, 2
.text$mn:0000B987                 jz      short loc_B9B8
.text$mn:0000B989                 mov     ecx, [ebp+var_4]
.text$mn:0000B98C                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B991                 test    eax, eax
.text$mn:0000B993                 jz      short loc_B9B8
.text$mn:0000B995                 mov     ecx, [ebp+var_4]
.text$mn:0000B998                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:0000B99D                 push    eax
.text$mn:0000B99E                 mov     ecx, [ebp+var_4]
.text$mn:0000B9A1                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000B9A6                 push    eax
.text$mn:0000B9A7                 mov     ecx, [ebp+var_4]
.text$mn:0000B9AA                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000B9AF                 push    eax
.text$mn:0000B9B0                 mov     ecx, [ebp+var_4]
.text$mn:0000B9B3                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000B9B8
.text$mn:0000B9B8 loc_B9B8:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+137j
.text$mn:0000B9B8                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+143j
.text$mn:0000B9B8                 jmp     short loc_B9CB
.text$mn:0000B9BA ; ---------------------------------------------------------------------------
.text$mn:0000B9BA
.text$mn:0000B9BA loc_B9BA:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+CAj
.text$mn:0000B9BA                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+D6j ...
.text$mn:0000B9BA                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000B9BF                 mov     [ebp+arg_4], eax
.text$mn:0000B9C2                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000B9C8                 mov     [ebp+arg_8], ecx
.text$mn:0000B9CB
.text$mn:0000B9CB loc_B9CB:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int):loc_B9B8j
.text$mn:0000B9CB                 jmp     loc_BAEC
.text$mn:0000B9D0 ; ---------------------------------------------------------------------------
.text$mn:0000B9D0
.text$mn:0000B9D0 loc_B9D0:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+3Aj
.text$mn:0000B9D0                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+4Aj
.text$mn:0000B9D0                 mov     edx, [ebp+arg_10]
.text$mn:0000B9D3                 and     edx, 2
.text$mn:0000B9D6                 jz      loc_BAD2
.text$mn:0000B9DC                 mov     ecx, [ebp+var_4]
.text$mn:0000B9DF                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000B9E4                 test    eax, eax
.text$mn:0000B9E6                 jz      loc_BAD2
.text$mn:0000B9EC                 cmp     [ebp+arg_C], 2
.text$mn:0000B9F0                 jnz     short loc_BA15
.text$mn:0000B9F2                 mov     ecx, [ebp+var_4]
.text$mn:0000B9F5                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000B9FA                 mov     ecx, [ebp+var_4]
.text$mn:0000B9FD                 mov     edx, [ecx+38h]
.text$mn:0000BA00                 sub     edx, eax
.text$mn:0000BA02                 sar     edx, 1
.text$mn:0000BA04                 mov     eax, edx
.text$mn:0000BA06                 cdq
.text$mn:0000BA07                 add     eax, [ebp+arg_4]
.text$mn:0000BA0A                 adc     edx, [ebp+arg_8]
.text$mn:0000BA0D                 mov     [ebp+arg_4], eax
.text$mn:0000BA10                 mov     [ebp+arg_8], edx
.text$mn:0000BA13                 jmp     short loc_BA59
.text$mn:0000BA15 ; ---------------------------------------------------------------------------
.text$mn:0000BA15
.text$mn:0000BA15 loc_BA15:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+1A0j
.text$mn:0000BA15                 cmp     [ebp+arg_C], 1
.text$mn:0000BA19                 jnz     short loc_BA42
.text$mn:0000BA1B                 mov     ecx, [ebp+var_4]
.text$mn:0000BA1E                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BA23                 mov     esi, eax
.text$mn:0000BA25                 mov     ecx, [ebp+var_4]
.text$mn:0000BA28                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BA2D                 sub     esi, eax
.text$mn:0000BA2F                 sar     esi, 1
.text$mn:0000BA31                 mov     eax, esi
.text$mn:0000BA33                 cdq
.text$mn:0000BA34                 add     eax, [ebp+arg_4]
.text$mn:0000BA37                 adc     edx, [ebp+arg_8]
.text$mn:0000BA3A                 mov     [ebp+arg_4], eax
.text$mn:0000BA3D                 mov     [ebp+arg_8], edx
.text$mn:0000BA40                 jmp     short loc_BA59
.text$mn:0000BA42 ; ---------------------------------------------------------------------------
.text$mn:0000BA42
.text$mn:0000BA42 loc_BA42:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+1C9j
.text$mn:0000BA42                 cmp     [ebp+arg_C], 0
.text$mn:0000BA46                 jz      short loc_BA59
.text$mn:0000BA48                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BA4D                 mov     [ebp+arg_4], eax
.text$mn:0000BA50                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BA56                 mov     [ebp+arg_8], ecx
.text$mn:0000BA59
.text$mn:0000BA59 loc_BA59:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+1C3j
.text$mn:0000BA59                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+1F0j ...
.text$mn:0000BA59                 cmp     [ebp+arg_8], 0
.text$mn:0000BA5D                 jl      short loc_BABE
.text$mn:0000BA5F                 jg      short loc_BA67
.text$mn:0000BA61                 cmp     [ebp+arg_4], 0
.text$mn:0000BA65                 jb      short loc_BABE
.text$mn:0000BA67
.text$mn:0000BA67 loc_BA67:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+20Fj
.text$mn:0000BA67                 mov     ecx, [ebp+var_4]
.text$mn:0000BA6A                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BA6F                 mov     edx, [ebp+var_4]
.text$mn:0000BA72                 mov     ecx, [edx+38h]
.text$mn:0000BA75                 sub     ecx, eax
.text$mn:0000BA77                 sar     ecx, 1
.text$mn:0000BA79                 mov     eax, ecx
.text$mn:0000BA7B                 cdq
.text$mn:0000BA7C                 mov     [ebp+var_14], eax
.text$mn:0000BA7F                 mov     [ebp+var_10], edx
.text$mn:0000BA82                 mov     edx, [ebp+arg_8]
.text$mn:0000BA85                 cmp     edx, [ebp+var_10]
.text$mn:0000BA88                 jg      short loc_BABE
.text$mn:0000BA8A                 jl      short loc_BA94
.text$mn:0000BA8C                 mov     eax, [ebp+arg_4]
.text$mn:0000BA8F                 cmp     eax, [ebp+var_14]
.text$mn:0000BA92                 ja      short loc_BABE
.text$mn:0000BA94
.text$mn:0000BA94 loc_BA94:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+23Aj
.text$mn:0000BA94                 mov     ecx, [ebp+var_4]
.text$mn:0000BA97                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BA9C                 mov     esi, eax
.text$mn:0000BA9E                 mov     ecx, [ebp+var_4]
.text$mn:0000BAA1                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BAA6                 sub     esi, eax
.text$mn:0000BAA8                 sar     esi, 1
.text$mn:0000BAAA                 mov     eax, esi
.text$mn:0000BAAC                 cdq
.text$mn:0000BAAD                 add     eax, [ebp+arg_4]
.text$mn:0000BAB0                 adc     edx, [ebp+arg_8]
.text$mn:0000BAB3                 push    eax
.text$mn:0000BAB4                 mov     ecx, [ebp+var_4]
.text$mn:0000BAB7                 call    ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbump(int)
.text$mn:0000BABC                 jmp     short loc_BAD0
.text$mn:0000BABE ; ---------------------------------------------------------------------------
.text$mn:0000BABE
.text$mn:0000BABE loc_BABE:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+20Dj
.text$mn:0000BABE                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+215j ...
.text$mn:0000BABE                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BAC4                 mov     [ebp+arg_4], ecx
.text$mn:0000BAC7                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BACD                 mov     [ebp+arg_8], edx
.text$mn:0000BAD0
.text$mn:0000BAD0 loc_BAD0:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+26Cj
.text$mn:0000BAD0                 jmp     short loc_BAEC
.text$mn:0000BAD2 ; ---------------------------------------------------------------------------
.text$mn:0000BAD2
.text$mn:0000BAD2 loc_BAD2:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+186j
.text$mn:0000BAD2                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)+196j
.text$mn:0000BAD2                 mov     eax, [ebp+arg_4]
.text$mn:0000BAD5                 or      eax, [ebp+arg_8]
.text$mn:0000BAD8                 jz      short loc_BAEC
.text$mn:0000BADA                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BAE0                 mov     [ebp+arg_4], ecx
.text$mn:0000BAE3                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BAE9                 mov     [ebp+arg_8], edx
.text$mn:0000BAEC
.text$mn:0000BAEC loc_BAEC:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int):loc_B9CBj
.text$mn:0000BAEC                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int):loc_BAD0j ...
.text$mn:0000BAEC                 mov     eax, [ebp+arg_8]
.text$mn:0000BAEF                 push    eax
.text$mn:0000BAF0                 mov     ecx, [ebp+arg_4]
.text$mn:0000BAF3                 push    ecx
.text$mn:0000BAF4                 mov     ecx, [ebp+arg_0]
.text$mn:0000BAF7                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000BAFC                 mov     eax, [ebp+arg_0]
.text$mn:0000BAFF                 pop     esi
.text$mn:0000BB00                 mov     esp, ebp
.text$mn:0000BB02                 pop     ebp
.text$mn:0000BB03                 retn    14h
.text$mn:0000BB03 ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z endp
.text$mn:0000BB03
.text$mn:0000BB03 ; ---------------------------------------------------------------------------
.text$mn:0000BB06                 align 4
.text$mn:0000BB06 _text$mn        ends
.text$mn:0000BB06
.text$mn:0000BB08 ; ===========================================================================
.text$mn:0000BB08
.text$mn:0000BB08 ; Segment type: Pure code
.text$mn:0000BB08 ; Segment permissions: Read/Execute
.text$mn:0000BB08 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB08                 assume cs:_text$mn
.text$mn:0000BB08                 ;org 0BB08h
.text$mn:0000BB08 ; COMDAT (pick any)
.text$mn:0000BB08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB08
.text$mn:0000BB08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB08
.text$mn:0000BB08 ; Attributes: bp-based frame
.text$mn:0000BB08
.text$mn:0000BB08 ; protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::seekpos(class std::fpos<int>, int)
.text$mn:0000BB08                 public ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
.text$mn:0000BB08 ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
.text$mn:0000BB08                                         ; DATA XREF: .rdata:0000E448o
.text$mn:0000BB08
.text$mn:0000BB08 var_4           = dword ptr -4
.text$mn:0000BB08 arg_0           = dword ptr  8
.text$mn:0000BB08
.text$mn:0000BB08                 push    ebp
.text$mn:0000BB09                 mov     ebp, esp
.text$mn:0000BB0B                 push    ecx
.text$mn:0000BB0C                 mov     [ebp+var_4], ecx
.text$mn:0000BB0F                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BB14                 push    eax
.text$mn:0000BB15                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BB1B                 push    ecx
.text$mn:0000BB1C                 mov     ecx, [ebp+arg_0]
.text$mn:0000BB1F                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000BB24                 mov     eax, [ebp+arg_0]
.text$mn:0000BB27                 mov     esp, ebp
.text$mn:0000BB29                 pop     ebp
.text$mn:0000BB2A                 retn    20h
.text$mn:0000BB2A ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z endp
.text$mn:0000BB2A
.text$mn:0000BB2A ; ---------------------------------------------------------------------------
.text$mn:0000BB2D                 align 10h
.text$mn:0000BB2D _text$mn        ends
.text$mn:0000BB2D
.text$mn:0000BB30 ; ===========================================================================
.text$mn:0000BB30
.text$mn:0000BB30 ; Segment type: Pure code
.text$mn:0000BB30 ; Segment permissions: Read/Execute
.text$mn:0000BB30 _text$mn        segment para public 'CODE' use32
.text$mn:0000BB30                 assume cs:_text$mn
.text$mn:0000BB30                 ;org 0BB30h
.text$mn:0000BB30 ; COMDAT (pick any)
.text$mn:0000BB30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB30
.text$mn:0000BB30 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB30
.text$mn:0000BB30 ; Attributes: bp-based frame
.text$mn:0000BB30
.text$mn:0000BB30 ; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::seekpos(class std::fpos<int>, int)
.text$mn:0000BB30                 public ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
.text$mn:0000BB30 ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
.text$mn:0000BB30                                         ; DATA XREF: .rdata:0000E5B0o
.text$mn:0000BB30
.text$mn:0000BB30 var_1C          = dword ptr -1Ch
.text$mn:0000BB30 var_18          = dword ptr -18h
.text$mn:0000BB30 var_14          = dword ptr -14h
.text$mn:0000BB30 var_10          = dword ptr -10h
.text$mn:0000BB30 var_C           = dword ptr -0Ch
.text$mn:0000BB30 var_8           = dword ptr -8
.text$mn:0000BB30 var_4           = dword ptr -4
.text$mn:0000BB30 arg_0           = dword ptr  8
.text$mn:0000BB30 arg_4           = byte ptr  0Ch
.text$mn:0000BB30 arg_1C          = dword ptr  24h
.text$mn:0000BB30
.text$mn:0000BB30                 push    ebp
.text$mn:0000BB31                 mov     ebp, esp
.text$mn:0000BB33                 sub     esp, 1Ch
.text$mn:0000BB36                 push    esi
.text$mn:0000BB37                 mov     [ebp+var_4], ecx
.text$mn:0000BB3A                 lea     ecx, [ebp+arg_4]
.text$mn:0000BB3D                 call    ??B?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::operator __int64(void)
.text$mn:0000BB42                 mov     [ebp+var_C], eax
.text$mn:0000BB45                 mov     [ebp+var_8], edx
.text$mn:0000BB48                 mov     ecx, [ebp+var_4]
.text$mn:0000BB4B                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BB50                 test    eax, eax
.text$mn:0000BB52                 jz      short loc_BB72
.text$mn:0000BB54                 mov     ecx, [ebp+var_4]
.text$mn:0000BB57                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BB5C                 mov     ecx, [ebp+var_4]
.text$mn:0000BB5F                 cmp     [ecx+38h], eax
.text$mn:0000BB62                 jnb     short loc_BB72
.text$mn:0000BB64                 mov     ecx, [ebp+var_4]
.text$mn:0000BB67                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BB6C                 mov     edx, [ebp+var_4]
.text$mn:0000BB6F                 mov     [edx+38h], eax
.text$mn:0000BB72
.text$mn:0000BB72 loc_BB72:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+22j
.text$mn:0000BB72                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+32j
.text$mn:0000BB72                 mov     eax, [ebp+var_C]
.text$mn:0000BB75                 cmp     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BB7B                 jnz     short loc_BB8D
.text$mn:0000BB7D                 mov     ecx, [ebp+var_8]
.text$mn:0000BB80                 cmp     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BB86                 jnz     short loc_BB8D
.text$mn:0000BB88                 jmp     loc_BD05
.text$mn:0000BB8D ; ---------------------------------------------------------------------------
.text$mn:0000BB8D
.text$mn:0000BB8D loc_BB8D:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+4Bj
.text$mn:0000BB8D                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+56j
.text$mn:0000BB8D                 mov     edx, [ebp+arg_1C]
.text$mn:0000BB90                 and     edx, 1
.text$mn:0000BB93                 jz      loc_BC63
.text$mn:0000BB99                 mov     ecx, [ebp+var_4]
.text$mn:0000BB9C                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000BBA1                 test    eax, eax
.text$mn:0000BBA3                 jz      loc_BC63
.text$mn:0000BBA9                 cmp     [ebp+var_8], 0
.text$mn:0000BBAD                 jl      loc_BC4D
.text$mn:0000BBB3                 jg      short loc_BBBF
.text$mn:0000BBB5                 cmp     [ebp+var_C], 0
.text$mn:0000BBB9                 jb      loc_BC4D
.text$mn:0000BBBF
.text$mn:0000BBBF loc_BBBF:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+83j
.text$mn:0000BBBF                 mov     ecx, [ebp+var_4]
.text$mn:0000BBC2                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BBC7                 mov     ecx, [ebp+var_4]
.text$mn:0000BBCA                 mov     edx, [ecx+38h]
.text$mn:0000BBCD                 sub     edx, eax
.text$mn:0000BBCF                 sar     edx, 1
.text$mn:0000BBD1                 mov     eax, edx
.text$mn:0000BBD3                 cdq
.text$mn:0000BBD4                 mov     [ebp+var_14], eax
.text$mn:0000BBD7                 mov     [ebp+var_10], edx
.text$mn:0000BBDA                 mov     eax, [ebp+var_8]
.text$mn:0000BBDD                 cmp     eax, [ebp+var_10]
.text$mn:0000BBE0                 jg      short loc_BC4D
.text$mn:0000BBE2                 jl      short loc_BBEC
.text$mn:0000BBE4                 mov     ecx, [ebp+var_C]
.text$mn:0000BBE7                 cmp     ecx, [ebp+var_14]
.text$mn:0000BBEA                 ja      short loc_BC4D
.text$mn:0000BBEC
.text$mn:0000BBEC loc_BBEC:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+B2j
.text$mn:0000BBEC                 mov     ecx, [ebp+var_4]
.text$mn:0000BBEF                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BBF4                 mov     esi, eax
.text$mn:0000BBF6                 mov     ecx, [ebp+var_4]
.text$mn:0000BBF9                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000BBFE                 sub     esi, eax
.text$mn:0000BC00                 sar     esi, 1
.text$mn:0000BC02                 mov     eax, esi
.text$mn:0000BC04                 cdq
.text$mn:0000BC05                 add     eax, [ebp+var_C]
.text$mn:0000BC08                 adc     edx, [ebp+var_8]
.text$mn:0000BC0B                 push    eax
.text$mn:0000BC0C                 mov     ecx, [ebp+var_4]
.text$mn:0000BC0F                 call    ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gbump(int)
.text$mn:0000BC14                 mov     edx, [ebp+arg_1C]
.text$mn:0000BC17                 and     edx, 2
.text$mn:0000BC1A                 jz      short loc_BC4B
.text$mn:0000BC1C                 mov     ecx, [ebp+var_4]
.text$mn:0000BC1F                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BC24                 test    eax, eax
.text$mn:0000BC26                 jz      short loc_BC4B
.text$mn:0000BC28                 mov     ecx, [ebp+var_4]
.text$mn:0000BC2B                 call    ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::epptr(void)
.text$mn:0000BC30                 push    eax
.text$mn:0000BC31                 mov     ecx, [ebp+var_4]
.text$mn:0000BC34                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000BC39                 push    eax
.text$mn:0000BC3A                 mov     ecx, [ebp+var_4]
.text$mn:0000BC3D                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000BC42                 push    eax
.text$mn:0000BC43                 mov     ecx, [ebp+var_4]
.text$mn:0000BC46                 call    ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setp(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000BC4B
.text$mn:0000BC4B loc_BC4B:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+EAj
.text$mn:0000BC4B                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+F6j
.text$mn:0000BC4B                 jmp     short loc_BC5E
.text$mn:0000BC4D ; ---------------------------------------------------------------------------
.text$mn:0000BC4D
.text$mn:0000BC4D loc_BC4D:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+7Dj
.text$mn:0000BC4D                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+89j ...
.text$mn:0000BC4D                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BC52                 mov     [ebp+var_C], eax
.text$mn:0000BC55                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BC5B                 mov     [ebp+var_8], ecx
.text$mn:0000BC5E
.text$mn:0000BC5E loc_BC5E:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int):loc_BC4Bj
.text$mn:0000BC5E                 jmp     loc_BD05
.text$mn:0000BC63 ; ---------------------------------------------------------------------------
.text$mn:0000BC63
.text$mn:0000BC63 loc_BC63:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+63j
.text$mn:0000BC63                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+73j
.text$mn:0000BC63                 mov     edx, [ebp+arg_1C]
.text$mn:0000BC66                 and     edx, 2
.text$mn:0000BC69                 jz      loc_BCF3
.text$mn:0000BC6F                 mov     ecx, [ebp+var_4]
.text$mn:0000BC72                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BC77                 test    eax, eax
.text$mn:0000BC79                 jz      short loc_BCF3
.text$mn:0000BC7B                 cmp     [ebp+var_8], 0
.text$mn:0000BC7F                 jl      short loc_BCE0
.text$mn:0000BC81                 jg      short loc_BC89
.text$mn:0000BC83                 cmp     [ebp+var_C], 0
.text$mn:0000BC87                 jb      short loc_BCE0
.text$mn:0000BC89
.text$mn:0000BC89 loc_BC89:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+151j
.text$mn:0000BC89                 mov     ecx, [ebp+var_4]
.text$mn:0000BC8C                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BC91                 mov     ecx, [ebp+var_4]
.text$mn:0000BC94                 mov     edx, [ecx+38h]
.text$mn:0000BC97                 sub     edx, eax
.text$mn:0000BC99                 sar     edx, 1
.text$mn:0000BC9B                 mov     eax, edx
.text$mn:0000BC9D                 cdq
.text$mn:0000BC9E                 mov     [ebp+var_1C], eax
.text$mn:0000BCA1                 mov     [ebp+var_18], edx
.text$mn:0000BCA4                 mov     eax, [ebp+var_8]
.text$mn:0000BCA7                 cmp     eax, [ebp+var_18]
.text$mn:0000BCAA                 jg      short loc_BCE0
.text$mn:0000BCAC                 jl      short loc_BCB6
.text$mn:0000BCAE                 mov     ecx, [ebp+var_C]
.text$mn:0000BCB1                 cmp     ecx, [ebp+var_1C]
.text$mn:0000BCB4                 ja      short loc_BCE0
.text$mn:0000BCB6
.text$mn:0000BCB6 loc_BCB6:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+17Cj
.text$mn:0000BCB6                 mov     ecx, [ebp+var_4]
.text$mn:0000BCB9                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000BCBE                 mov     esi, eax
.text$mn:0000BCC0                 mov     ecx, [ebp+var_4]
.text$mn:0000BCC3                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000BCC8                 sub     esi, eax
.text$mn:0000BCCA                 sar     esi, 1
.text$mn:0000BCCC                 mov     eax, esi
.text$mn:0000BCCE                 cdq
.text$mn:0000BCCF                 add     eax, [ebp+var_C]
.text$mn:0000BCD2                 adc     edx, [ebp+var_8]
.text$mn:0000BCD5                 push    eax
.text$mn:0000BCD6                 mov     ecx, [ebp+var_4]
.text$mn:0000BCD9                 call    ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbump(int)
.text$mn:0000BCDE                 jmp     short loc_BCF1
.text$mn:0000BCE0 ; ---------------------------------------------------------------------------
.text$mn:0000BCE0
.text$mn:0000BCE0 loc_BCE0:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+14Fj
.text$mn:0000BCE0                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+157j ...
.text$mn:0000BCE0                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BCE6                 mov     [ebp+var_C], edx
.text$mn:0000BCE9                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BCEE                 mov     [ebp+var_8], eax
.text$mn:0000BCF1
.text$mn:0000BCF1 loc_BCF1:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+1AEj
.text$mn:0000BCF1                 jmp     short loc_BD05
.text$mn:0000BCF3 ; ---------------------------------------------------------------------------
.text$mn:0000BCF3
.text$mn:0000BCF3 loc_BCF3:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+139j
.text$mn:0000BCF3                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+149j
.text$mn:0000BCF3                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000BCF9                 mov     [ebp+var_C], ecx
.text$mn:0000BCFC                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000BD02                 mov     [ebp+var_8], edx
.text$mn:0000BD05
.text$mn:0000BD05 loc_BD05:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)+58j
.text$mn:0000BD05                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int):loc_BC5Ej ...
.text$mn:0000BD05                 mov     eax, [ebp+var_8]
.text$mn:0000BD08                 push    eax
.text$mn:0000BD09                 mov     ecx, [ebp+var_C]
.text$mn:0000BD0C                 push    ecx
.text$mn:0000BD0D                 mov     ecx, [ebp+arg_0]
.text$mn:0000BD10                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000BD15                 mov     eax, [ebp+arg_0]
.text$mn:0000BD18                 pop     esi
.text$mn:0000BD19                 mov     esp, ebp
.text$mn:0000BD1B                 pop     ebp
.text$mn:0000BD1C                 retn    20h
.text$mn:0000BD1C ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z endp
.text$mn:0000BD1C
.text$mn:0000BD1C ; ---------------------------------------------------------------------------
.text$mn:0000BD1F                 align 10h
.text$mn:0000BD1F _text$mn        ends
.text$mn:0000BD1F
.text$mn:0000BD20 ; ===========================================================================
.text$mn:0000BD20
.text$mn:0000BD20 ; Segment type: Pure code
.text$mn:0000BD20 ; Segment permissions: Read/Execute
.text$mn:0000BD20 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD20                 assume cs:_text$mn
.text$mn:0000BD20                 ;org 0BD20h
.text$mn:0000BD20 ; COMDAT (pick any)
.text$mn:0000BD20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD20
.text$mn:0000BD20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD20
.text$mn:0000BD20 ; Attributes: bp-based frame
.text$mn:0000BD20
.text$mn:0000BD20 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_Wrap_alloc<class std::allocator<char>>::select_on_container_copy_construction(void)const
.text$mn:0000BD20                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
.text$mn:0000BD20 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000BD20                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
.text$mn:0000BD20
.text$mn:0000BD20 var_8           = dword ptr -8
.text$mn:0000BD20 var_1           = byte ptr -1
.text$mn:0000BD20 arg_0           = dword ptr  8
.text$mn:0000BD20
.text$mn:0000BD20                 push    ebp
.text$mn:0000BD21                 mov     ebp, esp
.text$mn:0000BD23                 sub     esp, 8
.text$mn:0000BD26                 mov     [ebp+var_8], ecx
.text$mn:0000BD29                 mov     eax, [ebp+var_8]
.text$mn:0000BD2C                 push    eax
.text$mn:0000BD2D                 lea     ecx, [ebp+var_1]
.text$mn:0000BD30                 push    ecx
.text$mn:0000BD31                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)
.text$mn:0000BD36                 add     esp, 8
.text$mn:0000BD39                 push    eax
.text$mn:0000BD3A                 mov     ecx, [ebp+arg_0]
.text$mn:0000BD3D                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(std::allocator<char> const &)
.text$mn:0000BD42                 mov     eax, [ebp+arg_0]
.text$mn:0000BD45                 mov     esp, ebp
.text$mn:0000BD47                 pop     ebp
.text$mn:0000BD48                 retn    4
.text$mn:0000BD48 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000BD48
.text$mn:0000BD48 ; ---------------------------------------------------------------------------
.text$mn:0000BD4B                 align 4
.text$mn:0000BD4B _text$mn        ends
.text$mn:0000BD4B
.text$mn:0000BD4C ; ===========================================================================
.text$mn:0000BD4C
.text$mn:0000BD4C ; Segment type: Pure code
.text$mn:0000BD4C ; Segment permissions: Read/Execute
.text$mn:0000BD4C _text$mn        segment para public 'CODE' use32
.text$mn:0000BD4C                 assume cs:_text$mn
.text$mn:0000BD4C                 ;org 0BD4Ch
.text$mn:0000BD4C ; COMDAT (pick any)
.text$mn:0000BD4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD4C
.text$mn:0000BD4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD4C
.text$mn:0000BD4C ; Attributes: bp-based frame
.text$mn:0000BD4C
.text$mn:0000BD4C ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000BD4C                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000BD4C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000BD4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000BD4C
.text$mn:0000BD4C var_8           = dword ptr -8
.text$mn:0000BD4C var_1           = byte ptr -1
.text$mn:0000BD4C arg_0           = dword ptr  8
.text$mn:0000BD4C
.text$mn:0000BD4C                 push    ebp
.text$mn:0000BD4D                 mov     ebp, esp
.text$mn:0000BD4F                 sub     esp, 8
.text$mn:0000BD52                 mov     [ebp+var_8], ecx
.text$mn:0000BD55                 mov     eax, [ebp+var_8]
.text$mn:0000BD58                 push    eax
.text$mn:0000BD59                 lea     ecx, [ebp+var_1]
.text$mn:0000BD5C                 push    ecx
.text$mn:0000BD5D                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000BD62                 add     esp, 8
.text$mn:0000BD65                 push    eax
.text$mn:0000BD66                 mov     ecx, [ebp+arg_0]
.text$mn:0000BD69                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000BD6E                 mov     eax, [ebp+arg_0]
.text$mn:0000BD71                 mov     esp, ebp
.text$mn:0000BD73                 pop     ebp
.text$mn:0000BD74                 retn    4
.text$mn:0000BD74 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000BD74
.text$mn:0000BD74 ; ---------------------------------------------------------------------------
.text$mn:0000BD77                 align 4
.text$mn:0000BD77 _text$mn        ends
.text$mn:0000BD77
.text$mn:0000BD78 ; ===========================================================================
.text$mn:0000BD78
.text$mn:0000BD78 ; Segment type: Pure code
.text$mn:0000BD78 ; Segment permissions: Read/Execute
.text$mn:0000BD78 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD78                 assume cs:_text$mn
.text$mn:0000BD78                 ;org 0BD78h
.text$mn:0000BD78 ; COMDAT (pick any)
.text$mn:0000BD78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD78
.text$mn:0000BD78 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD78
.text$mn:0000BD78 ; Attributes: bp-based frame
.text$mn:0000BD78
.text$mn:0000BD78 ; public: class std::allocator<char> __thiscall std::allocator<char>::select_on_container_copy_construction(void)const
.text$mn:0000BD78                 public ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
.text$mn:0000BD78 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ proc near
.text$mn:0000BD78                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)+Ap
.text$mn:0000BD78
.text$mn:0000BD78 var_4           = dword ptr -4
.text$mn:0000BD78 arg_0           = dword ptr  8
.text$mn:0000BD78
.text$mn:0000BD78                 push    ebp
.text$mn:0000BD79                 mov     ebp, esp
.text$mn:0000BD7B                 push    ecx
.text$mn:0000BD7C                 mov     [ebp+var_4], ecx
.text$mn:0000BD7F                 mov     eax, [ebp+var_4]
.text$mn:0000BD82                 push    eax
.text$mn:0000BD83                 mov     ecx, [ebp+arg_0]
.text$mn:0000BD86                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:0000BD8B                 mov     eax, [ebp+arg_0]
.text$mn:0000BD8E                 mov     esp, ebp
.text$mn:0000BD90                 pop     ebp
.text$mn:0000BD91                 retn    4
.text$mn:0000BD91 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ endp
.text$mn:0000BD91
.text$mn:0000BD91 _text$mn        ends
.text$mn:0000BD91
.text$mn:0000BD94 ; ===========================================================================
.text$mn:0000BD94
.text$mn:0000BD94 ; Segment type: Pure code
.text$mn:0000BD94 ; Segment permissions: Read/Execute
.text$mn:0000BD94 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD94                 assume cs:_text$mn
.text$mn:0000BD94                 ;org 0BD94h
.text$mn:0000BD94 ; COMDAT (pick any)
.text$mn:0000BD94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD94
.text$mn:0000BD94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD94
.text$mn:0000BD94 ; Attributes: bp-based frame
.text$mn:0000BD94
.text$mn:0000BD94 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000BD94                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000BD94 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000BD94                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000BD94
.text$mn:0000BD94 var_4           = dword ptr -4
.text$mn:0000BD94 arg_0           = dword ptr  8
.text$mn:0000BD94
.text$mn:0000BD94                 push    ebp
.text$mn:0000BD95                 mov     ebp, esp
.text$mn:0000BD97                 push    ecx
.text$mn:0000BD98                 mov     [ebp+var_4], ecx
.text$mn:0000BD9B                 mov     eax, [ebp+var_4]
.text$mn:0000BD9E                 push    eax
.text$mn:0000BD9F                 mov     ecx, [ebp+arg_0]
.text$mn:0000BDA2                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000BDA7                 mov     eax, [ebp+arg_0]
.text$mn:0000BDAA                 mov     esp, ebp
.text$mn:0000BDAC                 pop     ebp
.text$mn:0000BDAD                 retn    4
.text$mn:0000BDAD ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000BDAD
.text$mn:0000BDAD _text$mn        ends
.text$mn:0000BDAD
.text$mn:0000BDB0 ; ===========================================================================
.text$mn:0000BDB0
.text$mn:0000BDB0 ; Segment type: Pure code
.text$mn:0000BDB0 ; Segment permissions: Read/Execute
.text$mn:0000BDB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDB0                 assume cs:_text$mn
.text$mn:0000BDB0                 ;org 0BDB0h
.text$mn:0000BDB0 ; COMDAT (pick any)
.text$mn:0000BDB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDB0
.text$mn:0000BDB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDB0
.text$mn:0000BDB0 ; Attributes: bp-based frame
.text$mn:0000BDB0
.text$mn:0000BDB0 ; public: static class std::allocator<char> __cdecl std::allocator_traits<class std::allocator<char>>::select_on_container_copy_construction(class std::allocator<char> const &)
.text$mn:0000BDB0                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
.text$mn:0000BDB0 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z proc near
.text$mn:0000BDB0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+11p
.text$mn:0000BDB0
.text$mn:0000BDB0 arg_0           = dword ptr  8
.text$mn:0000BDB0 arg_4           = dword ptr  0Ch
.text$mn:0000BDB0
.text$mn:0000BDB0                 push    ebp
.text$mn:0000BDB1                 mov     ebp, esp
.text$mn:0000BDB3                 mov     eax, [ebp+arg_0]
.text$mn:0000BDB6                 push    eax
.text$mn:0000BDB7                 mov     ecx, [ebp+arg_4]
.text$mn:0000BDBA                 call    ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction(void)
.text$mn:0000BDBF                 mov     eax, [ebp+arg_0]
.text$mn:0000BDC2                 pop     ebp
.text$mn:0000BDC3                 retn
.text$mn:0000BDC3 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z endp
.text$mn:0000BDC3
.text$mn:0000BDC3 _text$mn        ends
.text$mn:0000BDC3
.text$mn:0000BDC4 ; ===========================================================================
.text$mn:0000BDC4
.text$mn:0000BDC4 ; Segment type: Pure code
.text$mn:0000BDC4 ; Segment permissions: Read/Execute
.text$mn:0000BDC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDC4                 assume cs:_text$mn
.text$mn:0000BDC4                 ;org 0BDC4h
.text$mn:0000BDC4 ; COMDAT (pick any)
.text$mn:0000BDC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDC4
.text$mn:0000BDC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDC4
.text$mn:0000BDC4 ; Attributes: bp-based frame
.text$mn:0000BDC4
.text$mn:0000BDC4 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000BDC4                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000BDC4 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000BDC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000BDC4
.text$mn:0000BDC4 arg_0           = dword ptr  8
.text$mn:0000BDC4 arg_4           = dword ptr  0Ch
.text$mn:0000BDC4
.text$mn:0000BDC4                 push    ebp
.text$mn:0000BDC5                 mov     ebp, esp
.text$mn:0000BDC7                 mov     eax, [ebp+arg_0]
.text$mn:0000BDCA                 push    eax
.text$mn:0000BDCB                 mov     ecx, [ebp+arg_4]
.text$mn:0000BDCE                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000BDD3                 mov     eax, [ebp+arg_0]
.text$mn:0000BDD6                 pop     ebp
.text$mn:0000BDD7                 retn
.text$mn:0000BDD7 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000BDD7
.text$mn:0000BDD7 _text$mn        ends
.text$mn:0000BDD7
.text$mn:0000BDD8 ; ===========================================================================
.text$mn:0000BDD8
.text$mn:0000BDD8 ; Segment type: Pure code
.text$mn:0000BDD8 ; Segment permissions: Read/Execute
.text$mn:0000BDD8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDD8                 assume cs:_text$mn
.text$mn:0000BDD8                 ;org 0BDD8h
.text$mn:0000BDD8 ; COMDAT (pick any)
.text$mn:0000BDD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDD8
.text$mn:0000BDD8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDD8
.text$mn:0000BDD8 ; Attributes: bp-based frame
.text$mn:0000BDD8
.text$mn:0000BDD8 ; protected: virtual class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::setbuf(wchar_t *, __int64)
.text$mn:0000BDD8                 public ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
.text$mn:0000BDD8 ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z proc near
.text$mn:0000BDD8                                         ; DATA XREF: .rdata:0000E44Co
.text$mn:0000BDD8                                         ; .rdata:0000E5B4o
.text$mn:0000BDD8
.text$mn:0000BDD8 var_4           = dword ptr -4
.text$mn:0000BDD8
.text$mn:0000BDD8                 push    ebp
.text$mn:0000BDD9                 mov     ebp, esp
.text$mn:0000BDDB                 push    ecx
.text$mn:0000BDDC                 mov     [ebp+var_4], ecx
.text$mn:0000BDDF                 mov     eax, [ebp+var_4]
.text$mn:0000BDE2                 mov     esp, ebp
.text$mn:0000BDE4                 pop     ebp
.text$mn:0000BDE5                 retn    0Ch
.text$mn:0000BDE5 ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z endp
.text$mn:0000BDE5
.text$mn:0000BDE5 _text$mn        ends
.text$mn:0000BDE5
.text$mn:0000BDE8 ; ===========================================================================
.text$mn:0000BDE8
.text$mn:0000BDE8 ; Segment type: Pure code
.text$mn:0000BDE8 ; Segment permissions: Read/Execute
.text$mn:0000BDE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDE8                 assume cs:_text$mn
.text$mn:0000BDE8                 ;org 0BDE8h
.text$mn:0000BDE8 ; COMDAT (pick any)
.text$mn:0000BDE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDE8
.text$mn:0000BDE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDE8
.text$mn:0000BDE8 ; Attributes: bp-based frame
.text$mn:0000BDE8
.text$mn:0000BDE8 ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::setg(wchar_t *, wchar_t *, wchar_t *)
.text$mn:0000BDE8                 public ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
.text$mn:0000BDE8 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z proc near
.text$mn:0000BDE8                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Init(void)+64p
.text$mn:0000BDE8                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+8Dp ...
.text$mn:0000BDE8
.text$mn:0000BDE8 var_4           = dword ptr -4
.text$mn:0000BDE8 arg_0           = dword ptr  8
.text$mn:0000BDE8 arg_4           = dword ptr  0Ch
.text$mn:0000BDE8 arg_8           = dword ptr  10h
.text$mn:0000BDE8
.text$mn:0000BDE8                 push    ebp
.text$mn:0000BDE9                 mov     ebp, esp
.text$mn:0000BDEB                 push    ecx
.text$mn:0000BDEC                 mov     [ebp+var_4], ecx
.text$mn:0000BDEF                 mov     eax, [ebp+var_4]
.text$mn:0000BDF2                 mov     ecx, [eax+0Ch]
.text$mn:0000BDF5                 mov     edx, [ebp+arg_0]
.text$mn:0000BDF8                 mov     [ecx], edx
.text$mn:0000BDFA                 mov     eax, [ebp+var_4]
.text$mn:0000BDFD                 mov     ecx, [eax+1Ch]
.text$mn:0000BE00                 mov     edx, [ebp+arg_4]
.text$mn:0000BE03                 mov     [ecx], edx
.text$mn:0000BE05                 mov     eax, [ebp+arg_8]
.text$mn:0000BE08                 sub     eax, [ebp+arg_4]
.text$mn:0000BE0B                 sar     eax, 1
.text$mn:0000BE0D                 mov     ecx, [ebp+var_4]
.text$mn:0000BE10                 mov     edx, [ecx+2Ch]
.text$mn:0000BE13                 mov     [edx], eax
.text$mn:0000BE15                 mov     esp, ebp
.text$mn:0000BE17                 pop     ebp
.text$mn:0000BE18                 retn    0Ch
.text$mn:0000BE18 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z endp
.text$mn:0000BE18
.text$mn:0000BE18 ; ---------------------------------------------------------------------------
.text$mn:0000BE1B                 align 4
.text$mn:0000BE1B _text$mn        ends
.text$mn:0000BE1B
.text$mn:0000BE1C ; ===========================================================================
.text$mn:0000BE1C
.text$mn:0000BE1C ; Segment type: Pure code
.text$mn:0000BE1C ; Segment permissions: Read/Execute
.text$mn:0000BE1C _text$mn        segment para public 'CODE' use32
.text$mn:0000BE1C                 assume cs:_text$mn
.text$mn:0000BE1C                 ;org 0BE1Ch
.text$mn:0000BE1C ; COMDAT (pick any)
.text$mn:0000BE1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE1C
.text$mn:0000BE1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE1C
.text$mn:0000BE1C ; Attributes: bp-based frame
.text$mn:0000BE1C
.text$mn:0000BE1C ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::setp(wchar_t *, wchar_t *, wchar_t *)
.text$mn:0000BE1C                 public ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
.text$mn:0000BE1C ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z proc near
.text$mn:0000BE1C                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Init(wchar_t const *,uint,int)+D1p
.text$mn:0000BE1C                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+95p ...
.text$mn:0000BE1C
.text$mn:0000BE1C var_4           = dword ptr -4
.text$mn:0000BE1C arg_0           = dword ptr  8
.text$mn:0000BE1C arg_4           = dword ptr  0Ch
.text$mn:0000BE1C arg_8           = dword ptr  10h
.text$mn:0000BE1C
.text$mn:0000BE1C                 push    ebp
.text$mn:0000BE1D                 mov     ebp, esp
.text$mn:0000BE1F                 push    ecx
.text$mn:0000BE20                 mov     [ebp+var_4], ecx
.text$mn:0000BE23                 mov     eax, [ebp+var_4]
.text$mn:0000BE26                 mov     ecx, [eax+10h]
.text$mn:0000BE29                 mov     edx, [ebp+arg_0]
.text$mn:0000BE2C                 mov     [ecx], edx
.text$mn:0000BE2E                 mov     eax, [ebp+var_4]
.text$mn:0000BE31                 mov     ecx, [eax+20h]
.text$mn:0000BE34                 mov     edx, [ebp+arg_4]
.text$mn:0000BE37                 mov     [ecx], edx
.text$mn:0000BE39                 mov     eax, [ebp+arg_8]
.text$mn:0000BE3C                 sub     eax, [ebp+arg_4]
.text$mn:0000BE3F                 sar     eax, 1
.text$mn:0000BE41                 mov     ecx, [ebp+var_4]
.text$mn:0000BE44                 mov     edx, [ecx+30h]
.text$mn:0000BE47                 mov     [edx], eax
.text$mn:0000BE49                 mov     esp, ebp
.text$mn:0000BE4B                 pop     ebp
.text$mn:0000BE4C                 retn    0Ch
.text$mn:0000BE4C ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z endp
.text$mn:0000BE4C
.text$mn:0000BE4C ; ---------------------------------------------------------------------------
.text$mn:0000BE4F                 align 10h
.text$mn:0000BE4F _text$mn        ends
.text$mn:0000BE4F
.text$mn:0000BE50 ; ===========================================================================
.text$mn:0000BE50
.text$mn:0000BE50 ; Segment type: Pure code
.text$mn:0000BE50 ; Segment permissions: Read/Execute
.text$mn:0000BE50 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE50                 assume cs:_text$mn
.text$mn:0000BE50                 ;org 0BE50h
.text$mn:0000BE50 ; COMDAT (pick any)
.text$mn:0000BE50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE50
.text$mn:0000BE50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE50
.text$mn:0000BE50 ; Attributes: bp-based frame
.text$mn:0000BE50
.text$mn:0000BE50 ; protected: void __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::setp(wchar_t *, wchar_t *)
.text$mn:0000BE50                 public ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
.text$mn:0000BE50 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z proc near
.text$mn:0000BE50                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Init(void)+56p
.text$mn:0000BE50                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(void)+71p ...
.text$mn:0000BE50
.text$mn:0000BE50 var_4           = dword ptr -4
.text$mn:0000BE50 arg_0           = dword ptr  8
.text$mn:0000BE50 arg_4           = dword ptr  0Ch
.text$mn:0000BE50
.text$mn:0000BE50                 push    ebp
.text$mn:0000BE51                 mov     ebp, esp
.text$mn:0000BE53                 push    ecx
.text$mn:0000BE54                 mov     [ebp+var_4], ecx
.text$mn:0000BE57                 mov     eax, [ebp+var_4]
.text$mn:0000BE5A                 mov     ecx, [eax+10h]
.text$mn:0000BE5D                 mov     edx, [ebp+arg_0]
.text$mn:0000BE60                 mov     [ecx], edx
.text$mn:0000BE62                 mov     eax, [ebp+var_4]
.text$mn:0000BE65                 mov     ecx, [eax+20h]
.text$mn:0000BE68                 mov     edx, [ebp+arg_0]
.text$mn:0000BE6B                 mov     [ecx], edx
.text$mn:0000BE6D                 mov     eax, [ebp+arg_4]
.text$mn:0000BE70                 sub     eax, [ebp+arg_0]
.text$mn:0000BE73                 sar     eax, 1
.text$mn:0000BE75                 mov     ecx, [ebp+var_4]
.text$mn:0000BE78                 mov     edx, [ecx+30h]
.text$mn:0000BE7B                 mov     [edx], eax
.text$mn:0000BE7D                 mov     esp, ebp
.text$mn:0000BE7F                 pop     ebp
.text$mn:0000BE80                 retn    8
.text$mn:0000BE80 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z endp
.text$mn:0000BE80
.text$mn:0000BE80 ; ---------------------------------------------------------------------------
.text$mn:0000BE83                 align 4
.text$mn:0000BE83 _text$mn        ends
.text$mn:0000BE83
.text$mn:0000BE84 ; ===========================================================================
.text$mn:0000BE84
.text$mn:0000BE84 ; Segment type: Pure code
.text$mn:0000BE84 ; Segment permissions: Read/Execute
.text$mn:0000BE84 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE84                 assume cs:_text$mn
.text$mn:0000BE84                 ;org 0BE84h
.text$mn:0000BE84 ; COMDAT (pick any)
.text$mn:0000BE84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE84
.text$mn:0000BE84 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE84
.text$mn:0000BE84 ; Attributes: bp-based frame
.text$mn:0000BE84
.text$mn:0000BE84 ; public: void __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::setstate(int, bool)
.text$mn:0000BE84                 public ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
.text$mn:0000BE84 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z proc near
.text$mn:0000BE84                                         ; CODE XREF: __catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0+11p
.text$mn:0000BE84                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+2B9p ...
.text$mn:0000BE84
.text$mn:0000BE84 var_4           = dword ptr -4
.text$mn:0000BE84 arg_0           = dword ptr  8
.text$mn:0000BE84 arg_4           = byte ptr  0Ch
.text$mn:0000BE84
.text$mn:0000BE84                 push    ebp
.text$mn:0000BE85                 mov     ebp, esp
.text$mn:0000BE87                 push    ecx
.text$mn:0000BE88                 mov     [ebp+var_4], ecx
.text$mn:0000BE8B                 cmp     [ebp+arg_0], 0
.text$mn:0000BE8F                 jz      short loc_BEAA
.text$mn:0000BE91                 movzx   eax, [ebp+arg_4]
.text$mn:0000BE95                 push    eax
.text$mn:0000BE96                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000BE99                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:0000BE9E                 or      eax, [ebp+arg_0]
.text$mn:0000BEA1                 push    eax
.text$mn:0000BEA2                 mov     ecx, [ebp+var_4]
.text$mn:0000BEA5                 call    ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)
.text$mn:0000BEAA
.text$mn:0000BEAA loc_BEAA:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+Bj
.text$mn:0000BEAA                 mov     esp, ebp
.text$mn:0000BEAC                 pop     ebp
.text$mn:0000BEAD                 retn    8
.text$mn:0000BEAD ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z endp
.text$mn:0000BEAD
.text$mn:0000BEAD _text$mn        ends
.text$mn:0000BEAD
.text$mn:0000BEB0 ; ===========================================================================
.text$mn:0000BEB0
.text$mn:0000BEB0 ; Segment type: Pure code
.text$mn:0000BEB0 ; Segment permissions: Read/Execute
.text$mn:0000BEB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEB0                 assume cs:_text$mn
.text$mn:0000BEB0                 ;org 0BEB0h
.text$mn:0000BEB0 ; COMDAT (pick any)
.text$mn:0000BEB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEB0
.text$mn:0000BEB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEB0
.text$mn:0000BEB0 ; Attributes: bp-based frame
.text$mn:0000BEB0
.text$mn:0000BEB0 ; protected: virtual __int64 __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::showmanyc(void)
.text$mn:0000BEB0                 public ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
.text$mn:0000BEB0 ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ proc near
.text$mn:0000BEB0                                         ; DATA XREF: .rdata:0000E430o
.text$mn:0000BEB0                                         ; .rdata:0000E598o
.text$mn:0000BEB0
.text$mn:0000BEB0 var_4           = dword ptr -4
.text$mn:0000BEB0
.text$mn:0000BEB0                 push    ebp
.text$mn:0000BEB1                 mov     ebp, esp
.text$mn:0000BEB3                 push    ecx
.text$mn:0000BEB4                 mov     [ebp+var_4], ecx
.text$mn:0000BEB7                 xor     eax, eax
.text$mn:0000BEB9                 xor     edx, edx
.text$mn:0000BEBB                 mov     esp, ebp
.text$mn:0000BEBD                 pop     ebp
.text$mn:0000BEBE                 retn
.text$mn:0000BEBE ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ endp
.text$mn:0000BEBE
.text$mn:0000BEBE ; ---------------------------------------------------------------------------
.text$mn:0000BEBF                 align 10h
.text$mn:0000BEBF _text$mn        ends
.text$mn:0000BEBF
.text$mn:0000BEC0 ; ===========================================================================
.text$mn:0000BEC0
.text$mn:0000BEC0 ; Segment type: Pure code
.text$mn:0000BEC0 ; Segment permissions: Read/Execute
.text$mn:0000BEC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEC0                 assume cs:_text$mn
.text$mn:0000BEC0                 ;org 0BEC0h
.text$mn:0000BEC0 ; COMDAT (pick any)
.text$mn:0000BEC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEC0
.text$mn:0000BEC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEC0
.text$mn:0000BEC0 ; Attributes: bp-based frame
.text$mn:0000BEC0
.text$mn:0000BEC0 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000BEC0                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000BEC0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000BEC0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000BEC0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p ...
.text$mn:0000BEC0
.text$mn:0000BEC0 var_4           = dword ptr -4
.text$mn:0000BEC0
.text$mn:0000BEC0                 push    ebp
.text$mn:0000BEC1                 mov     ebp, esp
.text$mn:0000BEC3                 push    ecx
.text$mn:0000BEC4                 mov     [ebp+var_4], ecx
.text$mn:0000BEC7                 mov     eax, [ebp+var_4]
.text$mn:0000BECA                 mov     eax, [eax+14h]
.text$mn:0000BECD                 mov     esp, ebp
.text$mn:0000BECF                 pop     ebp
.text$mn:0000BED0                 retn
.text$mn:0000BED0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000BED0
.text$mn:0000BED0 ; ---------------------------------------------------------------------------
.text$mn:0000BED1                 align 4
.text$mn:0000BED1 _text$mn        ends
.text$mn:0000BED1
.text$mn:0000BED4 ; ===========================================================================
.text$mn:0000BED4
.text$mn:0000BED4 ; Segment type: Pure code
.text$mn:0000BED4 ; Segment permissions: Read/Execute
.text$mn:0000BED4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BED4                 assume cs:_text$mn
.text$mn:0000BED4                 ;org 0BED4h
.text$mn:0000BED4 ; COMDAT (pick any)
.text$mn:0000BED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BED4
.text$mn:0000BED4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BED4
.text$mn:0000BED4 ; Attributes: bp-based frame
.text$mn:0000BED4
.text$mn:0000BED4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000BED4                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000BED4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000BED4                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+36p
.text$mn:0000BED4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp ...
.text$mn:0000BED4
.text$mn:0000BED4 var_4           = dword ptr -4
.text$mn:0000BED4
.text$mn:0000BED4                 push    ebp
.text$mn:0000BED5                 mov     ebp, esp
.text$mn:0000BED7                 push    ecx
.text$mn:0000BED8                 mov     [ebp+var_4], ecx
.text$mn:0000BEDB                 mov     eax, [ebp+var_4]
.text$mn:0000BEDE                 mov     eax, [eax+14h]
.text$mn:0000BEE1                 mov     esp, ebp
.text$mn:0000BEE3                 pop     ebp
.text$mn:0000BEE4                 retn
.text$mn:0000BEE4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000BEE4
.text$mn:0000BEE4 ; ---------------------------------------------------------------------------
.text$mn:0000BEE5                 align 4
.text$mn:0000BEE5 _text$mn        ends
.text$mn:0000BEE5
.text$mn:0000BEE8 ; ===========================================================================
.text$mn:0000BEE8
.text$mn:0000BEE8 ; Segment type: Pure code
.text$mn:0000BEE8 ; Segment permissions: Read/Execute
.text$mn:0000BEE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BEE8                 assume cs:_text$mn
.text$mn:0000BEE8                 ;org 0BEE8h
.text$mn:0000BEE8 ; COMDAT (pick any)
.text$mn:0000BEE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BEE8
.text$mn:0000BEE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEE8
.text$mn:0000BEE8 ; Attributes: bp-based frame
.text$mn:0000BEE8
.text$mn:0000BEE8 ; public: unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::sputc(wchar_t)
.text$mn:0000BEE8                 public ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
.text$mn:0000BEE8 ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z proc near
.text$mn:0000BEE8                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+15Ep
.text$mn:0000BEE8                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+230p ...
.text$mn:0000BEE8
.text$mn:0000BEE8 var_14          = dword ptr -14h
.text$mn:0000BEE8 var_10          = dword ptr -10h
.text$mn:0000BEE8 var_C           = dword ptr -0Ch
.text$mn:0000BEE8 var_8           = dword ptr -8
.text$mn:0000BEE8 var_2           = word ptr -2
.text$mn:0000BEE8 arg_0           = word ptr  8
.text$mn:0000BEE8
.text$mn:0000BEE8                 push    ebp
.text$mn:0000BEE9                 mov     ebp, esp
.text$mn:0000BEEB                 sub     esp, 14h
.text$mn:0000BEEE                 mov     [ebp+var_8], ecx
.text$mn:0000BEF1                 mov     ecx, [ebp+var_8]
.text$mn:0000BEF4                 call    ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pnavail(void)
.text$mn:0000BEF9                 mov     [ebp+var_14], eax
.text$mn:0000BEFC                 mov     [ebp+var_10], edx
.text$mn:0000BEFF                 cmp     [ebp+var_10], 0
.text$mn:0000BF03                 jl      short loc_BF34
.text$mn:0000BF05                 jg      short loc_BF0D
.text$mn:0000BF07                 cmp     [ebp+var_14], 0
.text$mn:0000BF0B                 jbe     short loc_BF34
.text$mn:0000BF0D
.text$mn:0000BF0D loc_BF0D:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+1Dj
.text$mn:0000BF0D                 mov     ecx, [ebp+var_8]
.text$mn:0000BF10                 call    ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pninc(void)
.text$mn:0000BF15                 mov     [ebp+var_C], eax
.text$mn:0000BF18                 mov     eax, [ebp+var_C]
.text$mn:0000BF1B                 mov     cx, [ebp+arg_0]
.text$mn:0000BF1F                 mov     [eax], cx
.text$mn:0000BF22                 mov     edx, [ebp+var_C]
.text$mn:0000BF25                 push    edx
.text$mn:0000BF26                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000BF2B                 add     esp, 4
.text$mn:0000BF2E                 mov     [ebp+var_2], ax
.text$mn:0000BF32                 jmp     short loc_BF55
.text$mn:0000BF34 ; ---------------------------------------------------------------------------
.text$mn:0000BF34
.text$mn:0000BF34 loc_BF34:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+1Bj
.text$mn:0000BF34                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+23j
.text$mn:0000BF34                 lea     eax, [ebp+arg_0]
.text$mn:0000BF37                 push    eax
.text$mn:0000BF38                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000BF3D                 add     esp, 4
.text$mn:0000BF40                 movzx   ecx, ax
.text$mn:0000BF43                 push    ecx
.text$mn:0000BF44                 mov     edx, [ebp+var_8]
.text$mn:0000BF47                 mov     eax, [edx]
.text$mn:0000BF49                 mov     ecx, [ebp+var_8]
.text$mn:0000BF4C                 mov     edx, [eax+0Ch]
.text$mn:0000BF4F                 call    edx
.text$mn:0000BF51                 mov     [ebp+var_2], ax
.text$mn:0000BF55
.text$mn:0000BF55 loc_BF55:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+4Aj
.text$mn:0000BF55                 mov     ax, [ebp+var_2]
.text$mn:0000BF59                 mov     esp, ebp
.text$mn:0000BF5B                 pop     ebp
.text$mn:0000BF5C                 retn    4
.text$mn:0000BF5C ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z endp
.text$mn:0000BF5C
.text$mn:0000BF5C ; ---------------------------------------------------------------------------
.text$mn:0000BF5F                 align 10h
.text$mn:0000BF5F _text$mn        ends
.text$mn:0000BF5F
.text$mn:0000BF60 ; ===========================================================================
.text$mn:0000BF60
.text$mn:0000BF60 ; Segment type: Pure code
.text$mn:0000BF60 ; Segment permissions: Read/Execute
.text$mn:0000BF60 _text$mn        segment para public 'CODE' use32
.text$mn:0000BF60                 assume cs:_text$mn
.text$mn:0000BF60                 ;org 0BF60h
.text$mn:0000BF60 ; COMDAT (pick any)
.text$mn:0000BF60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BF60
.text$mn:0000BF60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BF60
.text$mn:0000BF60 ; Attributes: bp-based frame
.text$mn:0000BF60
.text$mn:0000BF60 ; public: __int64 __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::sputn(wchar_t const *, __int64)
.text$mn:0000BF60                 public ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAE_JPB_W_J@Z
.text$mn:0000BF60 ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAE_JPB_W_J@Z proc near
.text$mn:0000BF60                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+1B8p
.text$mn:0000BF60                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+187p
.text$mn:0000BF60
.text$mn:0000BF60 var_4           = dword ptr -4
.text$mn:0000BF60 arg_0           = dword ptr  8
.text$mn:0000BF60 arg_4           = dword ptr  0Ch
.text$mn:0000BF60 arg_8           = dword ptr  10h
.text$mn:0000BF60
.text$mn:0000BF60                 push    ebp
.text$mn:0000BF61                 mov     ebp, esp
.text$mn:0000BF63                 push    ecx
.text$mn:0000BF64                 mov     [ebp+var_4], ecx
.text$mn:0000BF67                 mov     eax, [ebp+arg_8]
.text$mn:0000BF6A                 push    eax
.text$mn:0000BF6B                 mov     ecx, [ebp+arg_4]
.text$mn:0000BF6E                 push    ecx
.text$mn:0000BF6F                 mov     edx, [ebp+arg_0]
.text$mn:0000BF72                 push    edx
.text$mn:0000BF73                 mov     eax, [ebp+var_4]
.text$mn:0000BF76                 mov     edx, [eax]
.text$mn:0000BF78                 mov     ecx, [ebp+var_4]
.text$mn:0000BF7B                 mov     eax, [edx+24h]
.text$mn:0000BF7E                 call    eax
.text$mn:0000BF80                 mov     esp, ebp
.text$mn:0000BF82                 pop     ebp
.text$mn:0000BF83                 retn    0Ch
.text$mn:0000BF83 ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAE_JPB_W_J@Z endp
.text$mn:0000BF83
.text$mn:0000BF83 ; ---------------------------------------------------------------------------
.text$mn:0000BF86                 align 4
.text$mn:0000BF86 _text$mn        ends
.text$mn:0000BF86
.text$mn:0000BF88 ; ===========================================================================
.text$mn:0000BF88
.text$mn:0000BF88 ; Segment type: Pure code
.text$mn:0000BF88 ; Segment permissions: Read/Execute
.text$mn:0000BF88 _text$mn        segment para public 'CODE' use32
.text$mn:0000BF88                 assume cs:_text$mn
.text$mn:0000BF88                 ;org 0BF88h
.text$mn:0000BF88 ; COMDAT (pick any)
.text$mn:0000BF88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BF88
.text$mn:0000BF88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BF88
.text$mn:0000BF88 ; Attributes: bp-based frame
.text$mn:0000BF88
.text$mn:0000BF88 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::str(void)const
.text$mn:0000BF88                 public ?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000BF88 ?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$mn:0000BF88                                         ; CODE XREF: operator<<(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,TiXmlNode const &)+5Fp
.text$mn:0000BF88
.text$mn:0000BF88 var_14          = dword ptr -14h
.text$mn:0000BF88 var_10          = dword ptr -10h
.text$mn:0000BF88 var_C           = dword ptr -0Ch
.text$mn:0000BF88 var_4           = dword ptr -4
.text$mn:0000BF88 arg_0           = dword ptr  8
.text$mn:0000BF88
.text$mn:0000BF88                 push    ebp
.text$mn:0000BF89                 mov     ebp, esp
.text$mn:0000BF8B                 push    0FFFFFFFFh
.text$mn:0000BF8D                 push    offset __ehhandler$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000BF92                 mov     eax, large fs:0
.text$mn:0000BF98                 push    eax
.text$mn:0000BF99                 sub     esp, 8
.text$mn:0000BF9C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BFA1                 xor     eax, ebp
.text$mn:0000BFA3                 push    eax
.text$mn:0000BFA4                 lea     eax, [ebp+var_C]
.text$mn:0000BFA7                 mov     large fs:0, eax
.text$mn:0000BFAD                 mov     [ebp+var_14], ecx
.text$mn:0000BFB0                 mov     [ebp+var_10], 0
.text$mn:0000BFB7                 mov     eax, [ebp+arg_0]
.text$mn:0000BFBA                 push    eax
.text$mn:0000BFBB                 mov     ecx, [ebp+var_14]
.text$mn:0000BFBE                 add     ecx, 4
.text$mn:0000BFC1                 call    ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)
.text$mn:0000BFC6                 mov     [ebp+var_4], 0
.text$mn:0000BFCD                 mov     ecx, [ebp+var_10]
.text$mn:0000BFD0                 or      ecx, 1
.text$mn:0000BFD3                 mov     [ebp+var_10], ecx
.text$mn:0000BFD6                 mov     eax, [ebp+arg_0]
.text$mn:0000BFD9                 mov     ecx, [ebp+var_C]
.text$mn:0000BFDC                 mov     large fs:0, ecx
.text$mn:0000BFE3                 pop     ecx
.text$mn:0000BFE4                 mov     esp, ebp
.text$mn:0000BFE6                 pop     ebp
.text$mn:0000BFE7                 retn    4
.text$mn:0000BFE7 ?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$mn:0000BFE7
.text$mn:0000BFE7 ; ---------------------------------------------------------------------------
.text$mn:0000BFEA                 align 4
.text$mn:0000BFEA _text$mn        ends
.text$mn:0000BFEA
.text$x:0000BFEC ; ===========================================================================
.text$x:0000BFEC
.text$x:0000BFEC ; Segment type: Pure code
.text$x:0000BFEC ; Segment permissions: Read/Execute
.text$x:0000BFEC _text$x         segment para public 'CODE' use32
.text$x:0000BFEC                 assume cs:_text$x
.text$x:0000BFEC                 ;org 0BFECh
.text$x:0000BFEC ; COMDAT (pick associative to section at BF88)
.text$x:0000BFEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BFEC
.text$x:0000BFEC ; =============== S U B R O U T I N E =======================================
.text$x:0000BFEC
.text$x:0000BFEC
.text$x:0000BFEC __unwindfunclet$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0 proc near
.text$x:0000BFEC                                         ; DATA XREF: .xdata$x:0000DE10o
.text$x:0000BFEC                 mov     eax, [ebp-10h]
.text$x:0000BFEF                 and     eax, 1
.text$x:0000BFF2                 jz      $LN4_2
.text$x:0000BFF8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000BFFC                 mov     ecx, [ebp+8]
.text$x:0000BFFF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000C004 ; ---------------------------------------------------------------------------
.text$x:0000C004
.text$x:0000C004 $LN4_2:                                 ; CODE XREF: __unwindfunclet$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0+6j
.text$x:0000C004                 retn
.text$x:0000C004 __unwindfunclet$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0 endp
.text$x:0000C004
.text$x:0000C005
.text$x:0000C005 ; =============== S U B R O U T I N E =======================================
.text$x:0000C005
.text$x:0000C005
.text$x:0000C005 __ehhandler$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$x:0000C005                                         ; DATA XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+5o
.text$x:0000C005
.text$x:0000C005 arg_4           = dword ptr  8
.text$x:0000C005
.text$x:0000C005                 mov     edx, [esp+arg_4]
.text$x:0000C009                 lea     eax, [edx+0Ch]
.text$x:0000C00C                 mov     ecx, [edx-0Ch]
.text$x:0000C00F                 xor     ecx, eax
.text$x:0000C011                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C016                 mov     eax, offset __ehfuncinfo$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$x:0000C01B                 jmp     ___CxxFrameHandler3
.text$x:0000C01B __ehhandler$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$x:0000C01B
.text$x:0000C01B _text$x         ends
.text$x:0000C01B
.text$mn:0000C020 ; ===========================================================================
.text$mn:0000C020
.text$mn:0000C020 ; Segment type: Pure code
.text$mn:0000C020 ; Segment permissions: Read/Execute
.text$mn:0000C020 _text$mn        segment para public 'CODE' use32
.text$mn:0000C020                 assume cs:_text$mn
.text$mn:0000C020                 ;org 0C020h
.text$mn:0000C020 ; COMDAT (pick any)
.text$mn:0000C020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C020
.text$mn:0000C020 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C020
.text$mn:0000C020 ; Attributes: bp-based frame
.text$mn:0000C020
.text$mn:0000C020 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::str(void)const
.text$mn:0000C020                 public ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000C020 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$mn:0000C020                                         ; CODE XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+39p
.text$mn:0000C020
.text$mn:0000C020 var_70          = dword ptr -70h
.text$mn:0000C020 var_6C          = dword ptr -6Ch
.text$mn:0000C020 var_68          = dword ptr -68h
.text$mn:0000C020 var_64          = byte ptr -64h
.text$mn:0000C020 var_48          = byte ptr -48h
.text$mn:0000C020 var_2C          = byte ptr -2Ch
.text$mn:0000C020 var_10          = dword ptr -10h
.text$mn:0000C020 var_C           = dword ptr -0Ch
.text$mn:0000C020 var_4           = dword ptr -4
.text$mn:0000C020 arg_0           = dword ptr  8
.text$mn:0000C020
.text$mn:0000C020                 push    ebp
.text$mn:0000C021                 mov     ebp, esp
.text$mn:0000C023                 push    0FFFFFFFFh
.text$mn:0000C025                 push    offset __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000C02A                 mov     eax, large fs:0
.text$mn:0000C030                 push    eax
.text$mn:0000C031                 sub     esp, 64h
.text$mn:0000C034                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000C039                 xor     eax, ebp
.text$mn:0000C03B                 mov     [ebp+var_10], eax
.text$mn:0000C03E                 push    esi
.text$mn:0000C03F                 push    eax
.text$mn:0000C040                 lea     eax, [ebp+var_C]
.text$mn:0000C043                 mov     large fs:0, eax
.text$mn:0000C049                 mov     [ebp+var_68], ecx
.text$mn:0000C04C                 mov     [ebp+var_6C], 0
.text$mn:0000C053                 mov     eax, [ebp+var_68]
.text$mn:0000C056                 mov     ecx, [eax+3Ch]
.text$mn:0000C059                 and     ecx, 2
.text$mn:0000C05C                 jnz     loc_C0EA
.text$mn:0000C062                 mov     ecx, [ebp+var_68]
.text$mn:0000C065                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C06A                 test    eax, eax
.text$mn:0000C06C                 jz      short loc_C0EA
.text$mn:0000C06E                 mov     ecx, [ebp+var_68]
.text$mn:0000C071                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C076                 mov     edx, [ebp+var_68]
.text$mn:0000C079                 cmp     [edx+38h], eax
.text$mn:0000C07C                 jnb     short loc_C08B
.text$mn:0000C07E                 mov     ecx, [ebp+var_68]
.text$mn:0000C081                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C086                 mov     [ebp+var_70], eax
.text$mn:0000C089                 jmp     short loc_C094
.text$mn:0000C08B ; ---------------------------------------------------------------------------
.text$mn:0000C08B
.text$mn:0000C08B loc_C08B:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+5Cj
.text$mn:0000C08B                 mov     eax, [ebp+var_68]
.text$mn:0000C08E                 mov     ecx, [eax+38h]
.text$mn:0000C091                 mov     [ebp+var_70], ecx
.text$mn:0000C094
.text$mn:0000C094 loc_C094:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+69j
.text$mn:0000C094                 mov     ecx, [ebp+var_68]
.text$mn:0000C097                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000C09C                 mov     edx, [ebp+var_70]
.text$mn:0000C09F                 sub     edx, eax
.text$mn:0000C0A1                 sar     edx, 1
.text$mn:0000C0A3                 push    edx             ; int
.text$mn:0000C0A4                 mov     ecx, [ebp+var_68]
.text$mn:0000C0A7                 call    ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbase(void)
.text$mn:0000C0AC                 push    eax             ; Src
.text$mn:0000C0AD                 lea     ecx, [ebp+var_64]
.text$mn:0000C0B0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *,uint)
.text$mn:0000C0B5                 mov     [ebp+var_4], 1
.text$mn:0000C0BC                 lea     eax, [ebp+var_64]
.text$mn:0000C0BF                 push    eax
.text$mn:0000C0C0                 mov     ecx, [ebp+arg_0]
.text$mn:0000C0C3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000C0C8                 mov     ecx, [ebp+var_6C]
.text$mn:0000C0CB                 or      ecx, 1
.text$mn:0000C0CE                 mov     [ebp+var_6C], ecx
.text$mn:0000C0D1                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000C0D5                 lea     ecx, [ebp+var_64]
.text$mn:0000C0D8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000C0DD                 mov     eax, [ebp+arg_0]
.text$mn:0000C0E0                 jmp     loc_C18B
.text$mn:0000C0E5 ; ---------------------------------------------------------------------------
.text$mn:0000C0E5                 jmp     loc_C18B
.text$mn:0000C0EA ; ---------------------------------------------------------------------------
.text$mn:0000C0EA
.text$mn:0000C0EA loc_C0EA:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+3Cj
.text$mn:0000C0EA                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+4Cj
.text$mn:0000C0EA                 mov     edx, [ebp+var_68]
.text$mn:0000C0ED                 mov     eax, [edx+3Ch]
.text$mn:0000C0F0                 and     eax, 4
.text$mn:0000C0F3                 jnz     short loc_C158
.text$mn:0000C0F5                 mov     ecx, [ebp+var_68]
.text$mn:0000C0F8                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C0FD                 test    eax, eax
.text$mn:0000C0FF                 jz      short loc_C158
.text$mn:0000C101                 mov     ecx, [ebp+var_68]
.text$mn:0000C104                 call    ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::egptr(void)
.text$mn:0000C109                 mov     esi, eax
.text$mn:0000C10B                 mov     ecx, [ebp+var_68]
.text$mn:0000C10E                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000C113                 sub     esi, eax
.text$mn:0000C115                 sar     esi, 1
.text$mn:0000C117                 push    esi             ; int
.text$mn:0000C118                 mov     ecx, [ebp+var_68]
.text$mn:0000C11B                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000C120                 push    eax             ; Src
.text$mn:0000C121                 lea     ecx, [ebp+var_48]
.text$mn:0000C124                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *,uint)
.text$mn:0000C129                 mov     [ebp+var_4], 2
.text$mn:0000C130                 lea     ecx, [ebp+var_48]
.text$mn:0000C133                 push    ecx
.text$mn:0000C134                 mov     ecx, [ebp+arg_0]
.text$mn:0000C137                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000C13C                 mov     edx, [ebp+var_6C]
.text$mn:0000C13F                 or      edx, 1
.text$mn:0000C142                 mov     [ebp+var_6C], edx
.text$mn:0000C145                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000C149                 lea     ecx, [ebp+var_48]
.text$mn:0000C14C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000C151                 mov     eax, [ebp+arg_0]
.text$mn:0000C154                 jmp     short loc_C18B
.text$mn:0000C156 ; ---------------------------------------------------------------------------
.text$mn:0000C156                 jmp     short loc_C18B
.text$mn:0000C158 ; ---------------------------------------------------------------------------
.text$mn:0000C158
.text$mn:0000C158 loc_C158:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+D3j
.text$mn:0000C158                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+DFj
.text$mn:0000C158                 lea     ecx, [ebp+var_2C]
.text$mn:0000C15B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000C160                 mov     [ebp+var_4], 3
.text$mn:0000C167                 lea     eax, [ebp+var_2C]
.text$mn:0000C16A                 push    eax
.text$mn:0000C16B                 mov     ecx, [ebp+arg_0]
.text$mn:0000C16E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000C173                 mov     ecx, [ebp+var_6C]
.text$mn:0000C176                 or      ecx, 1
.text$mn:0000C179                 mov     [ebp+var_6C], ecx
.text$mn:0000C17C                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000C180                 lea     ecx, [ebp+var_2C]
.text$mn:0000C183                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000C188                 mov     eax, [ebp+arg_0]
.text$mn:0000C18B
.text$mn:0000C18B loc_C18B:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+C0j
.text$mn:0000C18B                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+C5j ...
.text$mn:0000C18B                 mov     ecx, [ebp+var_C]
.text$mn:0000C18E                 mov     large fs:0, ecx
.text$mn:0000C195                 pop     ecx
.text$mn:0000C196                 pop     esi
.text$mn:0000C197                 mov     ecx, [ebp+var_10]
.text$mn:0000C19A                 xor     ecx, ebp
.text$mn:0000C19C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000C1A1                 mov     esp, ebp
.text$mn:0000C1A3                 pop     ebp
.text$mn:0000C1A4                 retn    4
.text$mn:0000C1A4 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$mn:0000C1A4
.text$mn:0000C1A4 ; ---------------------------------------------------------------------------
.text$mn:0000C1A7                 align 4
.text$mn:0000C1A7 _text$mn        ends
.text$mn:0000C1A7
.text$x:0000C1A8 ; ===========================================================================
.text$x:0000C1A8
.text$x:0000C1A8 ; Segment type: Pure code
.text$x:0000C1A8 ; Segment permissions: Read/Execute
.text$x:0000C1A8 _text$x         segment para public 'CODE' use32
.text$x:0000C1A8                 assume cs:_text$x
.text$x:0000C1A8                 ;org 0C1A8h
.text$x:0000C1A8 ; COMDAT (pick associative to section at C020)
.text$x:0000C1A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C1A8
.text$x:0000C1A8 ; =============== S U B R O U T I N E =======================================
.text$x:0000C1A8
.text$x:0000C1A8
.text$x:0000C1A8 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0 proc near
.text$x:0000C1A8                                         ; DATA XREF: .xdata$x:0000DE9Co
.text$x:0000C1A8                 lea     ecx, [ebp-64h]
.text$x:0000C1AB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000C1AB __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0 endp
.text$x:0000C1AB
.text$x:0000C1B0
.text$x:0000C1B0 ; =============== S U B R O U T I N E =======================================
.text$x:0000C1B0
.text$x:0000C1B0
.text$x:0000C1B0 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$1 proc near
.text$x:0000C1B0                                         ; DATA XREF: .xdata$x:0000DE94o
.text$x:0000C1B0                 mov     eax, [ebp-6Ch]
.text$x:0000C1B3                 and     eax, 1
.text$x:0000C1B6                 jz      $LN11
.text$x:0000C1BC                 and     dword ptr [ebp-6Ch], 0FFFFFFFEh
.text$x:0000C1C0                 mov     ecx, [ebp+8]
.text$x:0000C1C3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000C1C8 ; ---------------------------------------------------------------------------
.text$x:0000C1C8
.text$x:0000C1C8 $LN11:                                  ; CODE XREF: __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$1+6j
.text$x:0000C1C8                 retn
.text$x:0000C1C8 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$1 endp
.text$x:0000C1C8
.text$x:0000C1C9
.text$x:0000C1C9 ; =============== S U B R O U T I N E =======================================
.text$x:0000C1C9
.text$x:0000C1C9
.text$x:0000C1C9 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2 proc near
.text$x:0000C1C9                                         ; DATA XREF: .xdata$x:0000DEA4o
.text$x:0000C1C9                 lea     ecx, [ebp-48h]
.text$x:0000C1CC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000C1CC __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2 endp
.text$x:0000C1CC
.text$x:0000C1D1
.text$x:0000C1D1 ; =============== S U B R O U T I N E =======================================
.text$x:0000C1D1
.text$x:0000C1D1
.text$x:0000C1D1 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3 proc near
.text$x:0000C1D1                                         ; DATA XREF: .xdata$x:0000DEACo
.text$x:0000C1D1                 lea     ecx, [ebp-2Ch]
.text$x:0000C1D4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000C1D4 __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3 endp
.text$x:0000C1D4
.text$x:0000C1D9
.text$x:0000C1D9 ; =============== S U B R O U T I N E =======================================
.text$x:0000C1D9
.text$x:0000C1D9
.text$x:0000C1D9 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$x:0000C1D9                                         ; DATA XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::str(void)+5o
.text$x:0000C1D9
.text$x:0000C1D9 arg_4           = dword ptr  8
.text$x:0000C1D9
.text$x:0000C1D9                 mov     edx, [esp+arg_4]
.text$x:0000C1DD                 lea     eax, [edx+0Ch]
.text$x:0000C1E0                 mov     ecx, [edx-6Ch]
.text$x:0000C1E3                 xor     ecx, eax
.text$x:0000C1E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C1EA                 mov     ecx, [edx-4]
.text$x:0000C1ED                 xor     ecx, eax
.text$x:0000C1EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C1F4                 mov     eax, offset __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$x:0000C1F9                 jmp     ___CxxFrameHandler3
.text$x:0000C1F9 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$x:0000C1F9
.text$x:0000C1F9 ; ---------------------------------------------------------------------------
.text$x:0000C1FE                 align 10h
.text$x:0000C1FE _text$x         ends
.text$x:0000C1FE
.text$mn:0000C200 ; ===========================================================================
.text$mn:0000C200
.text$mn:0000C200 ; Segment type: Pure code
.text$mn:0000C200 ; Segment permissions: Read/Execute
.text$mn:0000C200 _text$mn        segment para public 'CODE' use32
.text$mn:0000C200                 assume cs:_text$mn
.text$mn:0000C200                 ;org 0C200h
.text$mn:0000C200 ; COMDAT (pick any)
.text$mn:0000C200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C200
.text$mn:0000C200 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C200
.text$mn:0000C200 ; Attributes: bp-based frame
.text$mn:0000C200
.text$mn:0000C200 ; protected: virtual int __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::sync(void)
.text$mn:0000C200                 public ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
.text$mn:0000C200 ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ proc near
.text$mn:0000C200                                         ; DATA XREF: .rdata:0000E450o
.text$mn:0000C200                                         ; .rdata:0000E5B8o
.text$mn:0000C200
.text$mn:0000C200 var_4           = dword ptr -4
.text$mn:0000C200
.text$mn:0000C200                 push    ebp
.text$mn:0000C201                 mov     ebp, esp
.text$mn:0000C203                 push    ecx
.text$mn:0000C204                 mov     [ebp+var_4], ecx
.text$mn:0000C207                 xor     eax, eax
.text$mn:0000C209                 mov     esp, ebp
.text$mn:0000C20B                 pop     ebp
.text$mn:0000C20C                 retn
.text$mn:0000C20C ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ endp
.text$mn:0000C20C
.text$mn:0000C20C ; ---------------------------------------------------------------------------
.text$mn:0000C20D                 align 10h
.text$mn:0000C20D _text$mn        ends
.text$mn:0000C20D
.text$mn:0000C210 ; ===========================================================================
.text$mn:0000C210
.text$mn:0000C210 ; Segment type: Pure code
.text$mn:0000C210 ; Segment permissions: Read/Execute
.text$mn:0000C210 _text$mn        segment para public 'CODE' use32
.text$mn:0000C210                 assume cs:_text$mn
.text$mn:0000C210                 ;org 0C210h
.text$mn:0000C210 ; COMDAT (pick any)
.text$mn:0000C210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C210
.text$mn:0000C210 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C210
.text$mn:0000C210 ; Attributes: bp-based frame
.text$mn:0000C210
.text$mn:0000C210 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000C210                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000C210 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000C210                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_A320p
.text$mn:0000C210                 push    ebp
.text$mn:0000C211                 mov     ebp, esp
.text$mn:0000C213                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000C218                 pop     ebp
.text$mn:0000C219                 retn
.text$mn:0000C219 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000C219
.text$mn:0000C219 ; ---------------------------------------------------------------------------
.text$mn:0000C21A                 align 4
.text$mn:0000C21A _text$mn        ends
.text$mn:0000C21A
.text$mn:0000C21C ; ===========================================================================
.text$mn:0000C21C
.text$mn:0000C21C ; Segment type: Pure code
.text$mn:0000C21C ; Segment permissions: Read/Execute
.text$mn:0000C21C _text$mn        segment para public 'CODE' use32
.text$mn:0000C21C                 assume cs:_text$mn
.text$mn:0000C21C                 ;org 0C21Ch
.text$mn:0000C21C ; COMDAT (pick any)
.text$mn:0000C21C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C21C
.text$mn:0000C21C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C21C
.text$mn:0000C21C ; Attributes: bp-based frame
.text$mn:0000C21C
.text$mn:0000C21C ; public: class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::tie(void)const
.text$mn:0000C21C                 public ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
.text$mn:0000C21C ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ proc near
.text$mn:0000C21C                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+5Bp
.text$mn:0000C21C                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+71p ...
.text$mn:0000C21C
.text$mn:0000C21C var_4           = dword ptr -4
.text$mn:0000C21C
.text$mn:0000C21C                 push    ebp
.text$mn:0000C21D                 mov     ebp, esp
.text$mn:0000C21F                 push    ecx
.text$mn:0000C220                 mov     [ebp+var_4], ecx
.text$mn:0000C223                 mov     eax, [ebp+var_4]
.text$mn:0000C226                 mov     eax, [eax+3Ch]
.text$mn:0000C229                 mov     esp, ebp
.text$mn:0000C22B                 pop     ebp
.text$mn:0000C22C                 retn
.text$mn:0000C22C ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ endp
.text$mn:0000C22C
.text$mn:0000C22C ; ---------------------------------------------------------------------------
.text$mn:0000C22D                 align 10h
.text$mn:0000C22D _text$mn        ends
.text$mn:0000C22D
.text$mn:0000C230 ; ===========================================================================
.text$mn:0000C230
.text$mn:0000C230 ; Segment type: Pure code
.text$mn:0000C230 ; Segment permissions: Read/Execute
.text$mn:0000C230 _text$mn        segment para public 'CODE' use32
.text$mn:0000C230                 assume cs:_text$mn
.text$mn:0000C230                 ;org 0C230h
.text$mn:0000C230 ; COMDAT (pick any)
.text$mn:0000C230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C230
.text$mn:0000C230 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C230
.text$mn:0000C230 ; Attributes: bp-based frame
.text$mn:0000C230
.text$mn:0000C230 ; public: static wchar_t __cdecl std::char_traits<wchar_t>::to_char_type(unsigned short const &)
.text$mn:0000C230                 public ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
.text$mn:0000C230 ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z proc near
.text$mn:0000C230                                         ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+C0p
.text$mn:0000C230                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)+2D9p ...
.text$mn:0000C230
.text$mn:0000C230 arg_0           = dword ptr  8
.text$mn:0000C230
.text$mn:0000C230                 push    ebp
.text$mn:0000C231                 mov     ebp, esp
.text$mn:0000C233                 mov     eax, [ebp+arg_0]
.text$mn:0000C236                 mov     ax, [eax]
.text$mn:0000C239                 pop     ebp
.text$mn:0000C23A                 retn
.text$mn:0000C23A ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z endp
.text$mn:0000C23A
.text$mn:0000C23A ; ---------------------------------------------------------------------------
.text$mn:0000C23B                 align 4
.text$mn:0000C23B _text$mn        ends
.text$mn:0000C23B
.text$mn:0000C23C ; ===========================================================================
.text$mn:0000C23C
.text$mn:0000C23C ; Segment type: Pure code
.text$mn:0000C23C ; Segment permissions: Read/Execute
.text$mn:0000C23C _text$mn        segment para public 'CODE' use32
.text$mn:0000C23C                 assume cs:_text$mn
.text$mn:0000C23C                 ;org 0C23Ch
.text$mn:0000C23C ; COMDAT (pick any)
.text$mn:0000C23C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C23C
.text$mn:0000C23C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C23C
.text$mn:0000C23C ; Attributes: bp-based frame
.text$mn:0000C23C
.text$mn:0000C23C ; public: static unsigned short __cdecl std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000C23C                 public ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
.text$mn:0000C23C ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z proc near
.text$mn:0000C23C                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+3Ep
.text$mn:0000C23C                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sputc(wchar_t)+50p ...
.text$mn:0000C23C
.text$mn:0000C23C arg_0           = dword ptr  8
.text$mn:0000C23C
.text$mn:0000C23C                 push    ebp
.text$mn:0000C23D                 mov     ebp, esp
.text$mn:0000C23F                 mov     eax, [ebp+arg_0]
.text$mn:0000C242                 mov     ax, [eax]
.text$mn:0000C245                 pop     ebp
.text$mn:0000C246                 retn
.text$mn:0000C246 ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z endp
.text$mn:0000C246
.text$mn:0000C246 ; ---------------------------------------------------------------------------
.text$mn:0000C247                 align 4
.text$mn:0000C247 _text$mn        ends
.text$mn:0000C247
.text$mn:0000C248 ; ===========================================================================
.text$mn:0000C248
.text$mn:0000C248 ; Segment type: Pure code
.text$mn:0000C248 ; Segment permissions: Read/Execute
.text$mn:0000C248 _text$mn        segment para public 'CODE' use32
.text$mn:0000C248                 assume cs:_text$mn
.text$mn:0000C248                 ;org 0C248h
.text$mn:0000C248 ; COMDAT (pick any)
.text$mn:0000C248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C248
.text$mn:0000C248 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C248
.text$mn:0000C248 ; Attributes: bp-based frame
.text$mn:0000C248
.text$mn:0000C248 ; protected: virtual unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::uflow(void)
.text$mn:0000C248                 public ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
.text$mn:0000C248 ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ proc near
.text$mn:0000C248                                         ; DATA XREF: .rdata:0000E438o
.text$mn:0000C248                                         ; .rdata:0000E5A0o
.text$mn:0000C248
.text$mn:0000C248 var_C           = dword ptr -0Ch
.text$mn:0000C248 var_6           = word ptr -6
.text$mn:0000C248 var_4           = word ptr -4
.text$mn:0000C248 var_2           = word ptr -2
.text$mn:0000C248
.text$mn:0000C248                 push    ebp
.text$mn:0000C249                 mov     ebp, esp
.text$mn:0000C24B                 sub     esp, 0Ch
.text$mn:0000C24E                 mov     [ebp+var_C], ecx
.text$mn:0000C251                 mov     eax, [ebp+var_C]
.text$mn:0000C254                 mov     edx, [eax]
.text$mn:0000C256                 mov     ecx, [ebp+var_C]
.text$mn:0000C259                 mov     eax, [edx+18h]
.text$mn:0000C25C                 call    eax
.text$mn:0000C25E                 mov     [ebp+var_4], ax
.text$mn:0000C262                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C267                 mov     [ebp+var_6], ax
.text$mn:0000C26B                 lea     ecx, [ebp+var_4]
.text$mn:0000C26E                 push    ecx
.text$mn:0000C26F                 lea     edx, [ebp+var_6]
.text$mn:0000C272                 push    edx
.text$mn:0000C273                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000C278                 add     esp, 8
.text$mn:0000C27B                 movzx   eax, al
.text$mn:0000C27E                 test    eax, eax
.text$mn:0000C280                 jz      short loc_C28D
.text$mn:0000C282                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C287                 mov     [ebp+var_2], ax
.text$mn:0000C28B                 jmp     short loc_C2A2
.text$mn:0000C28D ; ---------------------------------------------------------------------------
.text$mn:0000C28D
.text$mn:0000C28D loc_C28D:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::uflow(void)+38j
.text$mn:0000C28D                 mov     ecx, [ebp+var_C]
.text$mn:0000C290                 call    ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gninc(void)
.text$mn:0000C295                 push    eax
.text$mn:0000C296                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000C29B                 add     esp, 4
.text$mn:0000C29E                 mov     [ebp+var_2], ax
.text$mn:0000C2A2
.text$mn:0000C2A2 loc_C2A2:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::uflow(void)+43j
.text$mn:0000C2A2                 mov     ax, [ebp+var_2]
.text$mn:0000C2A6                 mov     esp, ebp
.text$mn:0000C2A8                 pop     ebp
.text$mn:0000C2A9                 retn
.text$mn:0000C2A9 ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ endp
.text$mn:0000C2A9
.text$mn:0000C2A9 ; ---------------------------------------------------------------------------
.text$mn:0000C2AA                 align 4
.text$mn:0000C2AA _text$mn        ends
.text$mn:0000C2AA
.text$mn:0000C2AC ; ===========================================================================
.text$mn:0000C2AC
.text$mn:0000C2AC ; Segment type: Pure code
.text$mn:0000C2AC ; Segment permissions: Read/Execute
.text$mn:0000C2AC _text$mn        segment para public 'CODE' use32
.text$mn:0000C2AC                 assume cs:_text$mn
.text$mn:0000C2AC                 ;org 0C2ACh
.text$mn:0000C2AC ; COMDAT (pick any)
.text$mn:0000C2AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C2AC
.text$mn:0000C2AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C2AC
.text$mn:0000C2AC ; Attributes: bp-based frame
.text$mn:0000C2AC
.text$mn:0000C2AC ; protected: virtual unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::underflow(void)
.text$mn:0000C2AC                 public ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
.text$mn:0000C2AC ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ proc near
.text$mn:0000C2AC                                         ; DATA XREF: .rdata:0000E434o
.text$mn:0000C2AC
.text$mn:0000C2AC var_4           = dword ptr -4
.text$mn:0000C2AC
.text$mn:0000C2AC                 push    ebp
.text$mn:0000C2AD                 mov     ebp, esp
.text$mn:0000C2AF                 push    ecx
.text$mn:0000C2B0                 mov     [ebp+var_4], ecx
.text$mn:0000C2B3                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C2B8                 mov     esp, ebp
.text$mn:0000C2BA                 pop     ebp
.text$mn:0000C2BB                 retn
.text$mn:0000C2BB ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ endp
.text$mn:0000C2BB
.text$mn:0000C2BB _text$mn        ends
.text$mn:0000C2BB
.text$mn:0000C2BC ; ===========================================================================
.text$mn:0000C2BC
.text$mn:0000C2BC ; Segment type: Pure code
.text$mn:0000C2BC ; Segment permissions: Read/Execute
.text$mn:0000C2BC _text$mn        segment para public 'CODE' use32
.text$mn:0000C2BC                 assume cs:_text$mn
.text$mn:0000C2BC                 ;org 0C2BCh
.text$mn:0000C2BC ; COMDAT (pick any)
.text$mn:0000C2BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C2BC
.text$mn:0000C2BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C2BC
.text$mn:0000C2BC ; Attributes: bp-based frame
.text$mn:0000C2BC
.text$mn:0000C2BC ; protected: virtual unsigned short __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::underflow(void)
.text$mn:0000C2BC                 public ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
.text$mn:0000C2BC ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ proc near
.text$mn:0000C2BC                                         ; DATA XREF: .rdata:0000E59Co
.text$mn:0000C2BC
.text$mn:0000C2BC var_4           = dword ptr -4
.text$mn:0000C2BC
.text$mn:0000C2BC                 push    ebp
.text$mn:0000C2BD                 mov     ebp, esp
.text$mn:0000C2BF                 push    ecx
.text$mn:0000C2C0                 push    esi
.text$mn:0000C2C1                 mov     [ebp+var_4], ecx
.text$mn:0000C2C4                 mov     ecx, [ebp+var_4]
.text$mn:0000C2C7                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C2CC                 test    eax, eax
.text$mn:0000C2CE                 jnz     short loc_C2DF
.text$mn:0000C2D0                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C2D5                 jmp     loc_C3A6
.text$mn:0000C2DA ; ---------------------------------------------------------------------------
.text$mn:0000C2DA                 jmp     loc_C3A6
.text$mn:0000C2DF ; ---------------------------------------------------------------------------
.text$mn:0000C2DF
.text$mn:0000C2DF loc_C2DF:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+12j
.text$mn:0000C2DF                 mov     ecx, [ebp+var_4]
.text$mn:0000C2E2                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C2E7                 mov     esi, eax
.text$mn:0000C2E9                 mov     ecx, [ebp+var_4]
.text$mn:0000C2EC                 call    ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::egptr(void)
.text$mn:0000C2F1                 cmp     esi, eax
.text$mn:0000C2F3                 jnb     short loc_C310
.text$mn:0000C2F5                 mov     ecx, [ebp+var_4]
.text$mn:0000C2F8                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C2FD                 push    eax
.text$mn:0000C2FE                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000C303                 add     esp, 4
.text$mn:0000C306                 jmp     loc_C3A6
.text$mn:0000C30B ; ---------------------------------------------------------------------------
.text$mn:0000C30B                 jmp     loc_C3A6
.text$mn:0000C310 ; ---------------------------------------------------------------------------
.text$mn:0000C310
.text$mn:0000C310 loc_C310:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+37j
.text$mn:0000C310                 mov     eax, [ebp+var_4]
.text$mn:0000C313                 mov     ecx, [eax+3Ch]
.text$mn:0000C316                 and     ecx, 4
.text$mn:0000C319                 jnz     short loc_C34D
.text$mn:0000C31B                 mov     ecx, [ebp+var_4]
.text$mn:0000C31E                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C323                 test    eax, eax
.text$mn:0000C325                 jz      short loc_C34D
.text$mn:0000C327                 mov     ecx, [ebp+var_4]
.text$mn:0000C32A                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C32F                 mov     esi, eax
.text$mn:0000C331                 mov     ecx, [ebp+var_4]
.text$mn:0000C334                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C339                 cmp     esi, eax
.text$mn:0000C33B                 ja      short loc_C356
.text$mn:0000C33D                 mov     ecx, [ebp+var_4]
.text$mn:0000C340                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C345                 mov     edx, [ebp+var_4]
.text$mn:0000C348                 cmp     [edx+38h], eax
.text$mn:0000C34B                 ja      short loc_C356
.text$mn:0000C34D
.text$mn:0000C34D loc_C34D:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+5Dj
.text$mn:0000C34D                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+69j
.text$mn:0000C34D                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C352                 jmp     short loc_C3A6
.text$mn:0000C354 ; ---------------------------------------------------------------------------
.text$mn:0000C354                 jmp     short loc_C3A6
.text$mn:0000C356 ; ---------------------------------------------------------------------------
.text$mn:0000C356
.text$mn:0000C356 loc_C356:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+7Fj
.text$mn:0000C356                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+8Fj
.text$mn:0000C356                 mov     ecx, [ebp+var_4]
.text$mn:0000C359                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C35E                 mov     ecx, [ebp+var_4]
.text$mn:0000C361                 cmp     [ecx+38h], eax
.text$mn:0000C364                 jnb     short loc_C374
.text$mn:0000C366                 mov     ecx, [ebp+var_4]
.text$mn:0000C369                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C36E                 mov     edx, [ebp+var_4]
.text$mn:0000C371                 mov     [edx+38h], eax
.text$mn:0000C374
.text$mn:0000C374 loc_C374:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+A8j
.text$mn:0000C374                 mov     eax, [ebp+var_4]
.text$mn:0000C377                 mov     ecx, [eax+38h]
.text$mn:0000C37A                 push    ecx
.text$mn:0000C37B                 mov     ecx, [ebp+var_4]
.text$mn:0000C37E                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C383                 push    eax
.text$mn:0000C384                 mov     ecx, [ebp+var_4]
.text$mn:0000C387                 call    ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::eback(void)
.text$mn:0000C38C                 push    eax
.text$mn:0000C38D                 mov     ecx, [ebp+var_4]
.text$mn:0000C390                 call    ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setg(wchar_t *,wchar_t *,wchar_t *)
.text$mn:0000C395                 mov     ecx, [ebp+var_4]
.text$mn:0000C398                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C39D                 push    eax
.text$mn:0000C39E                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000C3A3                 add     esp, 4
.text$mn:0000C3A6
.text$mn:0000C3A6 loc_C3A6:                               ; CODE XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+19j
.text$mn:0000C3A6                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)+1Ej ...
.text$mn:0000C3A6                 pop     esi
.text$mn:0000C3A7                 mov     esp, ebp
.text$mn:0000C3A9                 pop     ebp
.text$mn:0000C3AA                 retn
.text$mn:0000C3AA ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ endp
.text$mn:0000C3AA
.text$mn:0000C3AA ; ---------------------------------------------------------------------------
.text$mn:0000C3AB                 align 4
.text$mn:0000C3AB _text$mn        ends
.text$mn:0000C3AB
.text$mn:0000C3AC ; ===========================================================================
.text$mn:0000C3AC
.text$mn:0000C3AC ; Segment type: Pure code
.text$mn:0000C3AC ; Segment permissions: Read/Execute
.text$mn:0000C3AC _text$mn        segment para public 'CODE' use32
.text$mn:0000C3AC                 assume cs:_text$mn
.text$mn:0000C3AC                 ;org 0C3ACh
.text$mn:0000C3AC ; COMDAT (pick any)
.text$mn:0000C3AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3AC
.text$mn:0000C3AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3AC
.text$mn:0000C3AC ; Attributes: bp-based frame
.text$mn:0000C3AC
.text$mn:0000C3AC ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000C3AC                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000C3AC ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000C3AC                                         ; std::error_code::message(void)+3Dp
.text$mn:0000C3AC
.text$mn:0000C3AC var_4           = dword ptr -4
.text$mn:0000C3AC
.text$mn:0000C3AC                 push    ebp
.text$mn:0000C3AD                 mov     ebp, esp
.text$mn:0000C3AF                 push    ecx
.text$mn:0000C3B0                 mov     [ebp+var_4], ecx
.text$mn:0000C3B3                 mov     eax, [ebp+var_4]
.text$mn:0000C3B6                 mov     eax, [eax]
.text$mn:0000C3B8                 mov     esp, ebp
.text$mn:0000C3BA                 pop     ebp
.text$mn:0000C3BB                 retn
.text$mn:0000C3BB ?value@error_code@std@@QBEHXZ endp
.text$mn:0000C3BB
.text$mn:0000C3BB _text$mn        ends
.text$mn:0000C3BB
.text$mn:0000C3BC ; ===========================================================================
.text$mn:0000C3BC
.text$mn:0000C3BC ; Segment type: Pure code
.text$mn:0000C3BC ; Segment permissions: Read/Execute
.text$mn:0000C3BC _text$mn        segment para public 'CODE' use32
.text$mn:0000C3BC                 assume cs:_text$mn
.text$mn:0000C3BC                 ;org 0C3BCh
.text$mn:0000C3BC ; COMDAT (pick any)
.text$mn:0000C3BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3BC
.text$mn:0000C3BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3BC
.text$mn:0000C3BC ; Attributes: bp-based frame
.text$mn:0000C3BC
.text$mn:0000C3BC ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000C3BC                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000C3BC ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000C3BC                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000C3BC                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000C3BC
.text$mn:0000C3BC var_4           = dword ptr -4
.text$mn:0000C3BC
.text$mn:0000C3BC                 push    ebp
.text$mn:0000C3BD                 mov     ebp, esp
.text$mn:0000C3BF                 push    ecx
.text$mn:0000C3C0                 mov     [ebp+var_4], ecx
.text$mn:0000C3C3                 mov     eax, [ebp+var_4]
.text$mn:0000C3C6                 mov     eax, [eax]
.text$mn:0000C3C8                 mov     esp, ebp
.text$mn:0000C3CA                 pop     ebp
.text$mn:0000C3CB                 retn
.text$mn:0000C3CB ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000C3CB
.text$mn:0000C3CB _text$mn        ends
.text$mn:0000C3CB
.text$mn:0000C3CC ; ===========================================================================
.text$mn:0000C3CC
.text$mn:0000C3CC ; Segment type: Pure code
.text$mn:0000C3CC ; Segment permissions: Read/Execute
.text$mn:0000C3CC _text$mn        segment para public 'CODE' use32
.text$mn:0000C3CC                 assume cs:_text$mn
.text$mn:0000C3CC                 ;org 0C3CCh
.text$mn:0000C3CC ; COMDAT (pick any)
.text$mn:0000C3CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3CC
.text$mn:0000C3CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3CC
.text$mn:0000C3CC ; Attributes: bp-based frame
.text$mn:0000C3CC
.text$mn:0000C3CC ; public: wchar_t __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::widen(char)const
.text$mn:0000C3CC                 public ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
.text$mn:0000C3CC ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z proc near
.text$mn:0000C3CC                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+27p
.text$mn:0000C3CC
.text$mn:0000C3CC var_20          = dword ptr -20h
.text$mn:0000C3CC var_1C          = byte ptr -1Ch
.text$mn:0000C3CC var_18          = dword ptr -18h
.text$mn:0000C3CC var_14          = dword ptr -14h
.text$mn:0000C3CC var_10          = dword ptr -10h
.text$mn:0000C3CC var_C           = dword ptr -0Ch
.text$mn:0000C3CC var_4           = dword ptr -4
.text$mn:0000C3CC arg_0           = byte ptr  8
.text$mn:0000C3CC
.text$mn:0000C3CC                 push    ebp
.text$mn:0000C3CD                 mov     ebp, esp
.text$mn:0000C3CF                 push    0FFFFFFFFh
.text$mn:0000C3D1                 push    offset __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
.text$mn:0000C3D6                 mov     eax, large fs:0
.text$mn:0000C3DC                 push    eax
.text$mn:0000C3DD                 sub     esp, 14h
.text$mn:0000C3E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000C3E5                 xor     eax, ebp
.text$mn:0000C3E7                 push    eax
.text$mn:0000C3E8                 lea     eax, [ebp+var_C]
.text$mn:0000C3EB                 mov     large fs:0, eax
.text$mn:0000C3F1                 mov     [ebp+var_10], ecx
.text$mn:0000C3F4                 lea     eax, [ebp+var_1C]
.text$mn:0000C3F7                 push    eax
.text$mn:0000C3F8                 mov     ecx, [ebp+var_10]
.text$mn:0000C3FB                 call    ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc(void)
.text$mn:0000C400                 mov     [ebp+var_14], eax
.text$mn:0000C403                 mov     ecx, [ebp+var_14]
.text$mn:0000C406                 mov     [ebp+var_18], ecx
.text$mn:0000C409                 mov     [ebp+var_4], 0
.text$mn:0000C410                 mov     edx, [ebp+var_18]
.text$mn:0000C413                 push    edx             ; std::locale *
.text$mn:0000C414                 call    ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)
.text$mn:0000C419                 add     esp, 4
.text$mn:0000C41C                 mov     [ebp+var_20], eax
.text$mn:0000C41F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000C426                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000C429                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:0000C42E                 movzx   eax, [ebp+arg_0]
.text$mn:0000C432                 push    eax
.text$mn:0000C433                 mov     ecx, [ebp+var_20]
.text$mn:0000C436                 call    ?widen@?$ctype@_W@std@@QBE_WD@Z ; std::ctype<wchar_t>::widen(char)
.text$mn:0000C43B                 mov     ecx, [ebp+var_C]
.text$mn:0000C43E                 mov     large fs:0, ecx
.text$mn:0000C445                 pop     ecx
.text$mn:0000C446                 mov     esp, ebp
.text$mn:0000C448                 pop     ebp
.text$mn:0000C449                 retn    4
.text$mn:0000C449 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z endp
.text$mn:0000C449
.text$mn:0000C449 _text$mn        ends
.text$mn:0000C449
.text$x:0000C44C ; ===========================================================================
.text$x:0000C44C
.text$x:0000C44C ; Segment type: Pure code
.text$x:0000C44C ; Segment permissions: Read/Execute
.text$x:0000C44C _text$x         segment para public 'CODE' use32
.text$x:0000C44C                 assume cs:_text$x
.text$x:0000C44C                 ;org 0C44Ch
.text$x:0000C44C ; COMDAT (pick associative to section at C3CC)
.text$x:0000C44C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C44C
.text$x:0000C44C ; =============== S U B R O U T I N E =======================================
.text$x:0000C44C
.text$x:0000C44C
.text$x:0000C44C __unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0 proc near
.text$x:0000C44C                                         ; DATA XREF: .xdata$x:0000D16Co
.text$x:0000C44C                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000C44F                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:0000C44F __unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0 endp
.text$x:0000C44F
.text$x:0000C454
.text$x:0000C454 ; =============== S U B R O U T I N E =======================================
.text$x:0000C454
.text$x:0000C454
.text$x:0000C454 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z proc near
.text$x:0000C454                                         ; DATA XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::widen(char)+5o
.text$x:0000C454
.text$x:0000C454 arg_4           = dword ptr  8
.text$x:0000C454
.text$x:0000C454                 mov     edx, [esp+arg_4]
.text$x:0000C458                 lea     eax, [edx+0Ch]
.text$x:0000C45B                 mov     ecx, [edx-18h]
.text$x:0000C45E                 xor     ecx, eax
.text$x:0000C460                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C465                 mov     eax, offset __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
.text$x:0000C46A                 jmp     ___CxxFrameHandler3
.text$x:0000C46A __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z endp
.text$x:0000C46A
.text$x:0000C46A ; ---------------------------------------------------------------------------
.text$x:0000C46F                 align 10h
.text$x:0000C46F _text$x         ends
.text$x:0000C46F
.text$mn:0000C470 ; ===========================================================================
.text$mn:0000C470
.text$mn:0000C470 ; Segment type: Pure code
.text$mn:0000C470 ; Segment permissions: Read/Execute
.text$mn:0000C470 _text$mn        segment para public 'CODE' use32
.text$mn:0000C470                 assume cs:_text$mn
.text$mn:0000C470                 ;org 0C470h
.text$mn:0000C470 ; COMDAT (pick any)
.text$mn:0000C470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C470
.text$mn:0000C470 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C470
.text$mn:0000C470 ; Attributes: bp-based frame
.text$mn:0000C470
.text$mn:0000C470 ; public: wchar_t __thiscall std::ctype<wchar_t>::widen(char)const
.text$mn:0000C470                 public ?widen@?$ctype@_W@std@@QBE_WD@Z
.text$mn:0000C470 ?widen@?$ctype@_W@std@@QBE_WD@Z proc near
.text$mn:0000C470                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::widen(char)+6Ap
.text$mn:0000C470
.text$mn:0000C470 var_4           = dword ptr -4
.text$mn:0000C470 arg_0           = byte ptr  8
.text$mn:0000C470
.text$mn:0000C470                 push    ebp
.text$mn:0000C471                 mov     ebp, esp
.text$mn:0000C473                 push    ecx
.text$mn:0000C474                 mov     [ebp+var_4], ecx
.text$mn:0000C477                 movzx   eax, [ebp+arg_0]
.text$mn:0000C47B                 push    eax
.text$mn:0000C47C                 mov     ecx, [ebp+var_4]
.text$mn:0000C47F                 mov     edx, [ecx]
.text$mn:0000C481                 mov     ecx, [ebp+var_4]
.text$mn:0000C484                 mov     eax, [edx+30h]
.text$mn:0000C487                 call    eax
.text$mn:0000C489                 mov     esp, ebp
.text$mn:0000C48B                 pop     ebp
.text$mn:0000C48C                 retn    4
.text$mn:0000C48C ?widen@?$ctype@_W@std@@QBE_WD@Z endp
.text$mn:0000C48C
.text$mn:0000C48C ; ---------------------------------------------------------------------------
.text$mn:0000C48F                 align 10h
.text$mn:0000C48F _text$mn        ends
.text$mn:0000C48F
.text$mn:0000C490 ; ===========================================================================
.text$mn:0000C490
.text$mn:0000C490 ; Segment type: Pure code
.text$mn:0000C490 ; Segment permissions: Read/Execute
.text$mn:0000C490 _text$mn        segment para public 'CODE' use32
.text$mn:0000C490                 assume cs:_text$mn
.text$mn:0000C490                 ;org 0C490h
.text$mn:0000C490 ; COMDAT (pick any)
.text$mn:0000C490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C490
.text$mn:0000C490 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C490
.text$mn:0000C490 ; Attributes: bp-based frame
.text$mn:0000C490
.text$mn:0000C490 ; __int64 __thiscall std::ios_base::width(std::ios_base *this, __int64)
.text$mn:0000C490                 public ?width@ios_base@std@@QAE_J_J@Z
.text$mn:0000C490 ?width@ios_base@std@@QAE_J_J@Z proc near
.text$mn:0000C490                                         ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+275p
.text$mn:0000C490                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+236p
.text$mn:0000C490
.text$mn:0000C490 var_C           = dword ptr -0Ch
.text$mn:0000C490 var_8           = dword ptr -8
.text$mn:0000C490 var_4           = dword ptr -4
.text$mn:0000C490 arg_0           = qword ptr  8
.text$mn:0000C490
.text$mn:0000C490                 push    ebp
.text$mn:0000C491                 mov     ebp, esp
.text$mn:0000C493                 sub     esp, 0Ch
.text$mn:0000C496                 mov     [ebp+var_4], ecx
.text$mn:0000C499                 mov     eax, [ebp+var_4]
.text$mn:0000C49C                 mov     ecx, [eax+20h]
.text$mn:0000C49F                 mov     [ebp+var_C], ecx
.text$mn:0000C4A2                 mov     edx, [eax+24h]
.text$mn:0000C4A5                 mov     [ebp+var_8], edx
.text$mn:0000C4A8                 mov     eax, [ebp+var_4]
.text$mn:0000C4AB                 mov     ecx, dword ptr [ebp+arg_0]
.text$mn:0000C4AE                 mov     [eax+20h], ecx
.text$mn:0000C4B1                 mov     edx, dword ptr [ebp+arg_0+4]
.text$mn:0000C4B4                 mov     [eax+24h], edx
.text$mn:0000C4B7                 mov     eax, [ebp+var_C]
.text$mn:0000C4BA                 mov     edx, [ebp+var_8]
.text$mn:0000C4BD                 mov     esp, ebp
.text$mn:0000C4BF                 pop     ebp
.text$mn:0000C4C0                 retn    8
.text$mn:0000C4C0 ?width@ios_base@std@@QAE_J_J@Z endp
.text$mn:0000C4C0
.text$mn:0000C4C0 ; ---------------------------------------------------------------------------
.text$mn:0000C4C3                 align 4
.text$mn:0000C4C3 _text$mn        ends
.text$mn:0000C4C3
.text$mn:0000C4C4 ; ===========================================================================
.text$mn:0000C4C4
.text$mn:0000C4C4 ; Segment type: Pure code
.text$mn:0000C4C4 ; Segment permissions: Read/Execute
.text$mn:0000C4C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4C4                 assume cs:_text$mn
.text$mn:0000C4C4                 ;org 0C4C4h
.text$mn:0000C4C4 ; COMDAT (pick any)
.text$mn:0000C4C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4C4
.text$mn:0000C4C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4C4
.text$mn:0000C4C4 ; Attributes: bp-based frame
.text$mn:0000C4C4
.text$mn:0000C4C4 ; __int64 __thiscall std::ios_base::width(std::ios_base *__hidden this)
.text$mn:0000C4C4                 public ?width@ios_base@std@@QBE_JXZ
.text$mn:0000C4C4 ?width@ios_base@std@@QBE_JXZ proc near  ; CODE XREF: std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+52p
.text$mn:0000C4C4                                         ; std::operator<<<wchar_t,std::char_traits<wchar_t>>(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &,wchar_t const *)+76p ...
.text$mn:0000C4C4
.text$mn:0000C4C4 var_4           = dword ptr -4
.text$mn:0000C4C4
.text$mn:0000C4C4                 push    ebp
.text$mn:0000C4C5                 mov     ebp, esp
.text$mn:0000C4C7                 push    ecx
.text$mn:0000C4C8                 mov     [ebp+var_4], ecx
.text$mn:0000C4CB                 mov     ecx, [ebp+var_4]
.text$mn:0000C4CE                 mov     eax, [ecx+20h]
.text$mn:0000C4D1                 mov     edx, [ecx+24h]
.text$mn:0000C4D4                 mov     esp, ebp
.text$mn:0000C4D6                 pop     ebp
.text$mn:0000C4D7                 retn
.text$mn:0000C4D7 ?width@ios_base@std@@QBE_JXZ endp
.text$mn:0000C4D7
.text$mn:0000C4D7 _text$mn        ends
.text$mn:0000C4D7
.text$mn:0000C4D8 ; ===========================================================================
.text$mn:0000C4D8
.text$mn:0000C4D8 ; Segment type: Pure code
.text$mn:0000C4D8 ; Segment permissions: Read/Execute
.text$mn:0000C4D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4D8                 assume cs:_text$mn
.text$mn:0000C4D8                 ;org 0C4D8h
.text$mn:0000C4D8 ; COMDAT (pick any)
.text$mn:0000C4D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4D8
.text$mn:0000C4D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4D8
.text$mn:0000C4D8 ; Attributes: bp-based frame
.text$mn:0000C4D8
.text$mn:0000C4D8 ; int __stdcall std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(void *Dst, int, int)
.text$mn:0000C4D8                 public ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
.text$mn:0000C4D8 ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z proc near
.text$mn:0000C4D8                                         ; DATA XREF: .rdata:0000E43Co
.text$mn:0000C4D8                                         ; .rdata:0000E5A4o
.text$mn:0000C4D8
.text$mn:0000C4D8 var_1C          = qword ptr -1Ch
.text$mn:0000C4D8 var_14          = dword ptr -14h
.text$mn:0000C4D8 var_10          = dword ptr -10h
.text$mn:0000C4D8 var_C           = dword ptr -0Ch
.text$mn:0000C4D8 var_6           = word ptr -6
.text$mn:0000C4D8 var_4           = word ptr -4
.text$mn:0000C4D8 Dst             = dword ptr  8
.text$mn:0000C4D8 arg_4           = dword ptr  0Ch
.text$mn:0000C4D8 arg_8           = dword ptr  10h
.text$mn:0000C4D8
.text$mn:0000C4D8                 push    ebp
.text$mn:0000C4D9                 mov     ebp, esp
.text$mn:0000C4DB                 sub     esp, 1Ch
.text$mn:0000C4DE                 mov     [ebp+var_C], ecx
.text$mn:0000C4E1                 xorpd   xmm0, xmm0
.text$mn:0000C4E5                 movlpd  [ebp+var_1C], xmm0
.text$mn:0000C4EA
.text$mn:0000C4EA loc_C4EA:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64):loc_C618j
.text$mn:0000C4EA                 cmp     [ebp+arg_8], 0
.text$mn:0000C4EE                 jl      loc_C61D
.text$mn:0000C4F4                 jg      short loc_C500
.text$mn:0000C4F6                 cmp     [ebp+arg_4], 0
.text$mn:0000C4FA                 jbe     loc_C61D
.text$mn:0000C500
.text$mn:0000C500 loc_C500:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+1Cj
.text$mn:0000C500                 mov     ecx, [ebp+var_C]
.text$mn:0000C503                 call    ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)
.text$mn:0000C508                 mov     [ebp+var_14], eax
.text$mn:0000C50B                 mov     [ebp+var_10], edx
.text$mn:0000C50E                 cmp     [ebp+var_10], 0
.text$mn:0000C512                 jl      loc_C5A4
.text$mn:0000C518                 jg      short loc_C524
.text$mn:0000C51A                 cmp     [ebp+var_14], 0
.text$mn:0000C51E                 jbe     loc_C5A4
.text$mn:0000C524
.text$mn:0000C524 loc_C524:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+40j
.text$mn:0000C524                 mov     eax, [ebp+arg_8]
.text$mn:0000C527                 cmp     eax, [ebp+var_10]
.text$mn:0000C52A                 jg      short loc_C542
.text$mn:0000C52C                 jl      short loc_C536
.text$mn:0000C52E                 mov     ecx, [ebp+arg_4]
.text$mn:0000C531                 cmp     ecx, [ebp+var_14]
.text$mn:0000C534                 jnb     short loc_C542
.text$mn:0000C536
.text$mn:0000C536 loc_C536:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+54j
.text$mn:0000C536                 mov     edx, [ebp+arg_4]
.text$mn:0000C539                 mov     [ebp+var_14], edx
.text$mn:0000C53C                 mov     eax, [ebp+arg_8]
.text$mn:0000C53F                 mov     [ebp+var_10], eax
.text$mn:0000C542
.text$mn:0000C542 loc_C542:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+52j
.text$mn:0000C542                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+5Cj
.text$mn:0000C542                 mov     ecx, [ebp+var_14]
.text$mn:0000C545                 push    ecx             ; int
.text$mn:0000C546                 mov     ecx, [ebp+var_C]
.text$mn:0000C549                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:0000C54E                 push    eax             ; Src
.text$mn:0000C54F                 mov     edx, [ebp+Dst]
.text$mn:0000C552                 push    edx             ; Dst
.text$mn:0000C553                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C558                 add     esp, 0Ch
.text$mn:0000C55B                 push    0
.text$mn:0000C55D                 push    2
.text$mn:0000C55F                 mov     eax, [ebp+var_10]
.text$mn:0000C562                 push    eax
.text$mn:0000C563                 mov     ecx, [ebp+var_14]
.text$mn:0000C566                 push    ecx
.text$mn:0000C567                 call    __allmul
.text$mn:0000C56C                 add     eax, [ebp+Dst]
.text$mn:0000C56F                 mov     [ebp+Dst], eax
.text$mn:0000C572                 mov     edx, dword ptr [ebp+var_1C]
.text$mn:0000C575                 add     edx, [ebp+var_14]
.text$mn:0000C578                 mov     eax, dword ptr [ebp+var_1C+4]
.text$mn:0000C57B                 adc     eax, [ebp+var_10]
.text$mn:0000C57E                 mov     dword ptr [ebp+var_1C], edx
.text$mn:0000C581                 mov     dword ptr [ebp+var_1C+4], eax
.text$mn:0000C584                 mov     ecx, [ebp+arg_4]
.text$mn:0000C587                 sub     ecx, [ebp+var_14]
.text$mn:0000C58A                 mov     edx, [ebp+arg_8]
.text$mn:0000C58D                 sbb     edx, [ebp+var_10]
.text$mn:0000C590                 mov     [ebp+arg_4], ecx
.text$mn:0000C593                 mov     [ebp+arg_8], edx
.text$mn:0000C596                 mov     eax, [ebp+var_14]
.text$mn:0000C599                 push    eax
.text$mn:0000C59A                 mov     ecx, [ebp+var_C]
.text$mn:0000C59D                 call    ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gbump(int)
.text$mn:0000C5A2                 jmp     short loc_C618
.text$mn:0000C5A4 ; ---------------------------------------------------------------------------
.text$mn:0000C5A4
.text$mn:0000C5A4 loc_C5A4:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+3Aj
.text$mn:0000C5A4                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+46j
.text$mn:0000C5A4                 mov     ecx, [ebp+var_C]
.text$mn:0000C5A7                 mov     edx, [ecx]
.text$mn:0000C5A9                 mov     ecx, [ebp+var_C]
.text$mn:0000C5AC                 mov     eax, [edx+1Ch]
.text$mn:0000C5AF                 call    eax
.text$mn:0000C5B1                 mov     [ebp+var_4], ax
.text$mn:0000C5B5                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C5BA                 mov     [ebp+var_6], ax
.text$mn:0000C5BE                 lea     ecx, [ebp+var_4]
.text$mn:0000C5C1                 push    ecx
.text$mn:0000C5C2                 lea     edx, [ebp+var_6]
.text$mn:0000C5C5                 push    edx
.text$mn:0000C5C6                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000C5CB                 add     esp, 8
.text$mn:0000C5CE                 movzx   eax, al
.text$mn:0000C5D1                 test    eax, eax
.text$mn:0000C5D3                 jz      short loc_C5D9
.text$mn:0000C5D5                 jmp     short loc_C61D
.text$mn:0000C5D7 ; ---------------------------------------------------------------------------
.text$mn:0000C5D7                 jmp     short loc_C618
.text$mn:0000C5D9 ; ---------------------------------------------------------------------------
.text$mn:0000C5D9
.text$mn:0000C5D9 loc_C5D9:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+FBj
.text$mn:0000C5D9                 lea     ecx, [ebp+var_4]
.text$mn:0000C5DC                 push    ecx
.text$mn:0000C5DD                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:0000C5E2                 add     esp, 4
.text$mn:0000C5E5                 mov     edx, [ebp+Dst]
.text$mn:0000C5E8                 mov     [edx], ax
.text$mn:0000C5EB                 mov     eax, [ebp+Dst]
.text$mn:0000C5EE                 add     eax, 2
.text$mn:0000C5F1                 mov     [ebp+Dst], eax
.text$mn:0000C5F4                 mov     ecx, dword ptr [ebp+var_1C]
.text$mn:0000C5F7                 add     ecx, 1
.text$mn:0000C5FA                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000C5FD                 adc     edx, 0
.text$mn:0000C600                 mov     dword ptr [ebp+var_1C], ecx
.text$mn:0000C603                 mov     dword ptr [ebp+var_1C+4], edx
.text$mn:0000C606                 mov     eax, [ebp+arg_4]
.text$mn:0000C609                 sub     eax, 1
.text$mn:0000C60C                 mov     ecx, [ebp+arg_8]
.text$mn:0000C60F                 sbb     ecx, 0
.text$mn:0000C612                 mov     [ebp+arg_4], eax
.text$mn:0000C615                 mov     [ebp+arg_8], ecx
.text$mn:0000C618
.text$mn:0000C618 loc_C618:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+CAj
.text$mn:0000C618                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+FFj
.text$mn:0000C618                 jmp     loc_C4EA
.text$mn:0000C61D ; ---------------------------------------------------------------------------
.text$mn:0000C61D
.text$mn:0000C61D loc_C61D:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+16j
.text$mn:0000C61D                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+22j ...
.text$mn:0000C61D                 mov     eax, dword ptr [ebp+var_1C]
.text$mn:0000C620                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000C623                 mov     esp, ebp
.text$mn:0000C625                 pop     ebp
.text$mn:0000C626                 retn    0Ch
.text$mn:0000C626 ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z endp
.text$mn:0000C626
.text$mn:0000C626 ; ---------------------------------------------------------------------------
.text$mn:0000C629                 align 4
.text$mn:0000C629 _text$mn        ends
.text$mn:0000C629
.text$mn:0000C62C ; ===========================================================================
.text$mn:0000C62C
.text$mn:0000C62C ; Segment type: Pure code
.text$mn:0000C62C ; Segment permissions: Read/Execute
.text$mn:0000C62C _text$mn        segment para public 'CODE' use32
.text$mn:0000C62C                 assume cs:_text$mn
.text$mn:0000C62C                 ;org 0C62Ch
.text$mn:0000C62C ; COMDAT (pick any)
.text$mn:0000C62C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C62C
.text$mn:0000C62C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C62C
.text$mn:0000C62C ; Attributes: bp-based frame
.text$mn:0000C62C
.text$mn:0000C62C ; int __stdcall std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(void *Src, int, int)
.text$mn:0000C62C                 public ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
.text$mn:0000C62C ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z proc near
.text$mn:0000C62C                                         ; DATA XREF: .rdata:0000E440o
.text$mn:0000C62C                                         ; .rdata:0000E5A8o
.text$mn:0000C62C
.text$mn:0000C62C var_18          = qword ptr -18h
.text$mn:0000C62C var_10          = dword ptr -10h
.text$mn:0000C62C var_C           = dword ptr -0Ch
.text$mn:0000C62C var_8           = dword ptr -8
.text$mn:0000C62C var_4           = word ptr -4
.text$mn:0000C62C var_2           = word ptr -2
.text$mn:0000C62C Src             = dword ptr  8
.text$mn:0000C62C arg_4           = dword ptr  0Ch
.text$mn:0000C62C arg_8           = dword ptr  10h
.text$mn:0000C62C
.text$mn:0000C62C                 push    ebp
.text$mn:0000C62D                 mov     ebp, esp
.text$mn:0000C62F                 sub     esp, 18h
.text$mn:0000C632                 mov     [ebp+var_8], ecx
.text$mn:0000C635                 xorpd   xmm0, xmm0
.text$mn:0000C639                 movlpd  [ebp+var_18], xmm0
.text$mn:0000C63E
.text$mn:0000C63E loc_C63E:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64):loc_C76Aj
.text$mn:0000C63E                 cmp     [ebp+arg_8], 0
.text$mn:0000C642                 jl      loc_C76F
.text$mn:0000C648                 jg      short loc_C654
.text$mn:0000C64A                 cmp     [ebp+arg_4], 0
.text$mn:0000C64E                 jbe     loc_C76F
.text$mn:0000C654
.text$mn:0000C654 loc_C654:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+1Cj
.text$mn:0000C654                 mov     ecx, [ebp+var_8]
.text$mn:0000C657                 call    ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Pnavail(void)
.text$mn:0000C65C                 mov     [ebp+var_10], eax
.text$mn:0000C65F                 mov     [ebp+var_C], edx
.text$mn:0000C662                 cmp     [ebp+var_C], 0
.text$mn:0000C666                 jl      loc_C6F8
.text$mn:0000C66C                 jg      short loc_C678
.text$mn:0000C66E                 cmp     [ebp+var_10], 0
.text$mn:0000C672                 jbe     loc_C6F8
.text$mn:0000C678
.text$mn:0000C678 loc_C678:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+40j
.text$mn:0000C678                 mov     eax, [ebp+arg_8]
.text$mn:0000C67B                 cmp     eax, [ebp+var_C]
.text$mn:0000C67E                 jg      short loc_C696
.text$mn:0000C680                 jl      short loc_C68A
.text$mn:0000C682                 mov     ecx, [ebp+arg_4]
.text$mn:0000C685                 cmp     ecx, [ebp+var_10]
.text$mn:0000C688                 jnb     short loc_C696
.text$mn:0000C68A
.text$mn:0000C68A loc_C68A:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+54j
.text$mn:0000C68A                 mov     edx, [ebp+arg_4]
.text$mn:0000C68D                 mov     [ebp+var_10], edx
.text$mn:0000C690                 mov     eax, [ebp+arg_8]
.text$mn:0000C693                 mov     [ebp+var_C], eax
.text$mn:0000C696
.text$mn:0000C696 loc_C696:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+52j
.text$mn:0000C696                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+5Cj
.text$mn:0000C696                 mov     ecx, [ebp+var_10]
.text$mn:0000C699                 push    ecx             ; int
.text$mn:0000C69A                 mov     edx, [ebp+Src]
.text$mn:0000C69D                 push    edx             ; Src
.text$mn:0000C69E                 mov     ecx, [ebp+var_8]
.text$mn:0000C6A1                 call    ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pptr(void)
.text$mn:0000C6A6                 push    eax             ; Dst
.text$mn:0000C6A7                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C6AC                 add     esp, 0Ch
.text$mn:0000C6AF                 push    0
.text$mn:0000C6B1                 push    2
.text$mn:0000C6B3                 mov     eax, [ebp+var_C]
.text$mn:0000C6B6                 push    eax
.text$mn:0000C6B7                 mov     ecx, [ebp+var_10]
.text$mn:0000C6BA                 push    ecx
.text$mn:0000C6BB                 call    __allmul
.text$mn:0000C6C0                 add     eax, [ebp+Src]
.text$mn:0000C6C3                 mov     [ebp+Src], eax
.text$mn:0000C6C6                 mov     edx, dword ptr [ebp+var_18]
.text$mn:0000C6C9                 add     edx, [ebp+var_10]
.text$mn:0000C6CC                 mov     eax, dword ptr [ebp+var_18+4]
.text$mn:0000C6CF                 adc     eax, [ebp+var_C]
.text$mn:0000C6D2                 mov     dword ptr [ebp+var_18], edx
.text$mn:0000C6D5                 mov     dword ptr [ebp+var_18+4], eax
.text$mn:0000C6D8                 mov     ecx, [ebp+arg_4]
.text$mn:0000C6DB                 sub     ecx, [ebp+var_10]
.text$mn:0000C6DE                 mov     edx, [ebp+arg_8]
.text$mn:0000C6E1                 sbb     edx, [ebp+var_C]
.text$mn:0000C6E4                 mov     [ebp+arg_4], ecx
.text$mn:0000C6E7                 mov     [ebp+arg_8], edx
.text$mn:0000C6EA                 mov     eax, [ebp+var_10]
.text$mn:0000C6ED                 push    eax
.text$mn:0000C6EE                 mov     ecx, [ebp+var_8]
.text$mn:0000C6F1                 call    ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbump(int)
.text$mn:0000C6F6                 jmp     short loc_C76A
.text$mn:0000C6F8 ; ---------------------------------------------------------------------------
.text$mn:0000C6F8
.text$mn:0000C6F8 loc_C6F8:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+3Aj
.text$mn:0000C6F8                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+46j
.text$mn:0000C6F8                 mov     ecx, [ebp+Src]
.text$mn:0000C6FB                 push    ecx
.text$mn:0000C6FC                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:0000C701                 add     esp, 4
.text$mn:0000C704                 movzx   edx, ax
.text$mn:0000C707                 push    edx
.text$mn:0000C708                 mov     eax, [ebp+var_8]
.text$mn:0000C70B                 mov     edx, [eax]
.text$mn:0000C70D                 mov     ecx, [ebp+var_8]
.text$mn:0000C710                 mov     eax, [edx+0Ch]
.text$mn:0000C713                 call    eax
.text$mn:0000C715                 mov     [ebp+var_2], ax
.text$mn:0000C719                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:0000C71E                 mov     [ebp+var_4], ax
.text$mn:0000C722                 lea     ecx, [ebp+var_2]
.text$mn:0000C725                 push    ecx
.text$mn:0000C726                 lea     edx, [ebp+var_4]
.text$mn:0000C729                 push    edx
.text$mn:0000C72A                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:0000C72F                 add     esp, 8
.text$mn:0000C732                 movzx   eax, al
.text$mn:0000C735                 test    eax, eax
.text$mn:0000C737                 jz      short loc_C73D
.text$mn:0000C739                 jmp     short loc_C76F
.text$mn:0000C73B ; ---------------------------------------------------------------------------
.text$mn:0000C73B                 jmp     short loc_C76A
.text$mn:0000C73D ; ---------------------------------------------------------------------------
.text$mn:0000C73D
.text$mn:0000C73D loc_C73D:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+10Bj
.text$mn:0000C73D                 mov     ecx, [ebp+Src]
.text$mn:0000C740                 add     ecx, 2
.text$mn:0000C743                 mov     [ebp+Src], ecx
.text$mn:0000C746                 mov     edx, dword ptr [ebp+var_18]
.text$mn:0000C749                 add     edx, 1
.text$mn:0000C74C                 mov     eax, dword ptr [ebp+var_18+4]
.text$mn:0000C74F                 adc     eax, 0
.text$mn:0000C752                 mov     dword ptr [ebp+var_18], edx
.text$mn:0000C755                 mov     dword ptr [ebp+var_18+4], eax
.text$mn:0000C758                 mov     ecx, [ebp+arg_4]
.text$mn:0000C75B                 sub     ecx, 1
.text$mn:0000C75E                 mov     edx, [ebp+arg_8]
.text$mn:0000C761                 sbb     edx, 0
.text$mn:0000C764                 mov     [ebp+arg_4], ecx
.text$mn:0000C767                 mov     [ebp+arg_8], edx
.text$mn:0000C76A
.text$mn:0000C76A loc_C76A:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+CAj
.text$mn:0000C76A                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+10Fj
.text$mn:0000C76A                 jmp     loc_C63E
.text$mn:0000C76F ; ---------------------------------------------------------------------------
.text$mn:0000C76F
.text$mn:0000C76F loc_C76F:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+16j
.text$mn:0000C76F                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+22j ...
.text$mn:0000C76F                 mov     eax, dword ptr [ebp+var_18]
.text$mn:0000C772                 mov     edx, dword ptr [ebp+var_18+4]
.text$mn:0000C775                 mov     esp, ebp
.text$mn:0000C777                 pop     ebp
.text$mn:0000C778                 retn    0Ch
.text$mn:0000C778 ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z endp
.text$mn:0000C778
.text$mn:0000C778 ; ---------------------------------------------------------------------------
.text$mn:0000C77B                 align 4
.text$mn:0000C77B _text$mn        ends
.text$mn:0000C77B
.text$mn:0000C77C ; ===========================================================================
.text$mn:0000C77C
.text$mn:0000C77C ; Segment type: Pure code
.text$mn:0000C77C ; Segment permissions: Read/Execute
.text$mn:0000C77C _text$mn        segment para public 'CODE' use32
.text$mn:0000C77C                 assume cs:_text$mn
.text$mn:0000C77C                 ;org 0C77Ch
.text$mn:0000C77C ; COMDAT (pick any)
.text$mn:0000C77C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C77C
.text$mn:0000C77C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C77C
.text$mn:0000C77C ; Attributes: bp-based frame
.text$mn:0000C77C
.text$mn:0000C77C                 public _hypot
.text$mn:0000C77C _hypot          proc near
.text$mn:0000C77C
.text$mn:0000C77C var_10          = qword ptr -10h
.text$mn:0000C77C var_8           = qword ptr -8
.text$mn:0000C77C arg_0           = qword ptr  8
.text$mn:0000C77C arg_8           = qword ptr  10h
.text$mn:0000C77C
.text$mn:0000C77C                 push    ebp
.text$mn:0000C77D                 mov     ebp, esp
.text$mn:0000C77F                 sub     esp, 8
.text$mn:0000C782                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000C787                 movsd   [esp+8+var_8], xmm0
.text$mn:0000C78C                 sub     esp, 8
.text$mn:0000C78F                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000C794                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000C799                 call    __hypot
.text$mn:0000C79E                 add     esp, 10h
.text$mn:0000C7A1                 pop     ebp
.text$mn:0000C7A2                 retn
.text$mn:0000C7A2 _hypot          endp
.text$mn:0000C7A2
.text$mn:0000C7A2 ; ---------------------------------------------------------------------------
.text$mn:0000C7A3                 align 4
.text$mn:0000C7A3 _text$mn        ends
.text$mn:0000C7A3
.text$mn:0000C7A4 ; ===========================================================================
.text$mn:0000C7A4
.text$mn:0000C7A4 ; Segment type: Pure code
.text$mn:0000C7A4 ; Segment permissions: Read/Execute
.text$mn:0000C7A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C7A4                 assume cs:_text$mn
.text$mn:0000C7A4                 ;org 0C7A4h
.text$mn:0000C7A4 ; COMDAT (pick any)
.text$mn:0000C7A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C7A4
.text$mn:0000C7A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C7A4
.text$mn:0000C7A4 ; Attributes: bp-based frame
.text$mn:0000C7A4
.text$mn:0000C7A4                 public _wmemchr
.text$mn:0000C7A4 _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000C7A4
.text$mn:0000C7A4 arg_0           = dword ptr  8
.text$mn:0000C7A4 arg_4           = word ptr  0Ch
.text$mn:0000C7A4 arg_8           = dword ptr  10h
.text$mn:0000C7A4
.text$mn:0000C7A4                 push    ebp
.text$mn:0000C7A5                 mov     ebp, esp
.text$mn:0000C7A7                 jmp     short loc_C7BB
.text$mn:0000C7A9 ; ---------------------------------------------------------------------------
.text$mn:0000C7A9
.text$mn:0000C7A9 loc_C7A9:                               ; CODE XREF: _wmemchr:loc_C7D4j
.text$mn:0000C7A9                 mov     eax, [ebp+arg_0]
.text$mn:0000C7AC                 add     eax, 2
.text$mn:0000C7AF                 mov     [ebp+arg_0], eax
.text$mn:0000C7B2                 mov     ecx, [ebp+arg_8]
.text$mn:0000C7B5                 sub     ecx, 1
.text$mn:0000C7B8                 mov     [ebp+arg_8], ecx
.text$mn:0000C7BB
.text$mn:0000C7BB loc_C7BB:                               ; CODE XREF: _wmemchr+3j
.text$mn:0000C7BB                 cmp     [ebp+arg_8], 0
.text$mn:0000C7BF                 jbe     short loc_C7D6
.text$mn:0000C7C1                 mov     edx, [ebp+arg_0]
.text$mn:0000C7C4                 movzx   eax, word ptr [edx]
.text$mn:0000C7C7                 movzx   ecx, [ebp+arg_4]
.text$mn:0000C7CB                 cmp     eax, ecx
.text$mn:0000C7CD                 jnz     short loc_C7D4
.text$mn:0000C7CF                 mov     eax, [ebp+arg_0]
.text$mn:0000C7D2                 jmp     short loc_C7D8
.text$mn:0000C7D4 ; ---------------------------------------------------------------------------
.text$mn:0000C7D4
.text$mn:0000C7D4 loc_C7D4:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000C7D4                 jmp     short loc_C7A9
.text$mn:0000C7D6 ; ---------------------------------------------------------------------------
.text$mn:0000C7D6
.text$mn:0000C7D6 loc_C7D6:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000C7D6                 xor     eax, eax
.text$mn:0000C7D8
.text$mn:0000C7D8 loc_C7D8:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:0000C7D8                 pop     ebp
.text$mn:0000C7D9                 retn
.text$mn:0000C7D9 _wmemchr        endp
.text$mn:0000C7D9
.text$mn:0000C7D9 ; ---------------------------------------------------------------------------
.text$mn:0000C7DA                 align 4
.text$mn:0000C7DA _text$mn        ends
.text$mn:0000C7DA
.text$mn:0000C7DC ; ===========================================================================
.text$mn:0000C7DC
.text$mn:0000C7DC ; Segment type: Pure code
.text$mn:0000C7DC ; Segment permissions: Read/Execute
.text$mn:0000C7DC _text$mn        segment para public 'CODE' use32
.text$mn:0000C7DC                 assume cs:_text$mn
.text$mn:0000C7DC                 ;org 0C7DCh
.text$mn:0000C7DC ; COMDAT (pick any)
.text$mn:0000C7DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C7DC
.text$mn:0000C7DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C7DC
.text$mn:0000C7DC ; Attributes: bp-based frame
.text$mn:0000C7DC
.text$mn:0000C7DC                 public _wmemcmp
.text$mn:0000C7DC _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000C7DC
.text$mn:0000C7DC var_4           = dword ptr -4
.text$mn:0000C7DC arg_0           = dword ptr  8
.text$mn:0000C7DC arg_4           = dword ptr  0Ch
.text$mn:0000C7DC arg_8           = dword ptr  10h
.text$mn:0000C7DC
.text$mn:0000C7DC                 push    ebp
.text$mn:0000C7DD                 mov     ebp, esp
.text$mn:0000C7DF                 push    ecx
.text$mn:0000C7E0                 jmp     short loc_C7FD
.text$mn:0000C7E2 ; ---------------------------------------------------------------------------
.text$mn:0000C7E2
.text$mn:0000C7E2 loc_C7E2:                               ; CODE XREF: _wmemcmp:loc_C838j
.text$mn:0000C7E2                 mov     eax, [ebp+arg_0]
.text$mn:0000C7E5                 add     eax, 2
.text$mn:0000C7E8                 mov     [ebp+arg_0], eax
.text$mn:0000C7EB                 mov     ecx, [ebp+arg_4]
.text$mn:0000C7EE                 add     ecx, 2
.text$mn:0000C7F1                 mov     [ebp+arg_4], ecx
.text$mn:0000C7F4                 mov     edx, [ebp+arg_8]
.text$mn:0000C7F7                 sub     edx, 1
.text$mn:0000C7FA                 mov     [ebp+arg_8], edx
.text$mn:0000C7FD
.text$mn:0000C7FD loc_C7FD:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000C7FD                 cmp     [ebp+arg_8], 0
.text$mn:0000C801                 jbe     short loc_C83A
.text$mn:0000C803                 mov     eax, [ebp+arg_0]
.text$mn:0000C806                 movzx   ecx, word ptr [eax]
.text$mn:0000C809                 mov     edx, [ebp+arg_4]
.text$mn:0000C80C                 movzx   eax, word ptr [edx]
.text$mn:0000C80F                 cmp     ecx, eax
.text$mn:0000C811                 jz      short loc_C838
.text$mn:0000C813                 mov     ecx, [ebp+arg_0]
.text$mn:0000C816                 movzx   edx, word ptr [ecx]
.text$mn:0000C819                 mov     eax, [ebp+arg_4]
.text$mn:0000C81C                 movzx   ecx, word ptr [eax]
.text$mn:0000C81F                 cmp     edx, ecx
.text$mn:0000C821                 jge     short loc_C82C
.text$mn:0000C823                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000C82A                 jmp     short loc_C833
.text$mn:0000C82C ; ---------------------------------------------------------------------------
.text$mn:0000C82C
.text$mn:0000C82C loc_C82C:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000C82C                 mov     [ebp+var_4], 1
.text$mn:0000C833
.text$mn:0000C833 loc_C833:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000C833                 mov     eax, [ebp+var_4]
.text$mn:0000C836                 jmp     short loc_C83C
.text$mn:0000C838 ; ---------------------------------------------------------------------------
.text$mn:0000C838
.text$mn:0000C838 loc_C838:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000C838                 jmp     short loc_C7E2
.text$mn:0000C83A ; ---------------------------------------------------------------------------
.text$mn:0000C83A
.text$mn:0000C83A loc_C83A:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000C83A                 xor     eax, eax
.text$mn:0000C83C
.text$mn:0000C83C loc_C83C:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000C83C                 mov     esp, ebp
.text$mn:0000C83E                 pop     ebp
.text$mn:0000C83F                 retn
.text$mn:0000C83F _wmemcmp        endp
.text$mn:0000C83F
.text$mn:0000C83F _text$mn        ends
.text$mn:0000C83F
.text$mn:0000C840 ; ===========================================================================
.text$mn:0000C840
.text$mn:0000C840 ; Segment type: Pure code
.text$mn:0000C840 ; Segment permissions: Read/Execute
.text$mn:0000C840 _text$mn        segment para public 'CODE' use32
.text$mn:0000C840                 assume cs:_text$mn
.text$mn:0000C840                 ;org 0C840h
.text$mn:0000C840 ; COMDAT (pick any)
.text$mn:0000C840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C840
.text$mn:0000C840 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C840
.text$mn:0000C840 ; Attributes: bp-based frame
.text$mn:0000C840
.text$mn:0000C840 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000C840                 public _wmemcpy
.text$mn:0000C840 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000C840
.text$mn:0000C840 Dst             = dword ptr  8
.text$mn:0000C840 Src             = dword ptr  0Ch
.text$mn:0000C840 arg_8           = dword ptr  10h
.text$mn:0000C840
.text$mn:0000C840                 push    ebp
.text$mn:0000C841                 mov     ebp, esp
.text$mn:0000C843                 mov     eax, [ebp+arg_8]
.text$mn:0000C846                 shl     eax, 1
.text$mn:0000C848                 push    eax             ; Size
.text$mn:0000C849                 mov     ecx, [ebp+Src]
.text$mn:0000C84C                 push    ecx             ; Src
.text$mn:0000C84D                 mov     edx, [ebp+Dst]
.text$mn:0000C850                 push    edx             ; Dst
.text$mn:0000C851                 call    _memcpy
.text$mn:0000C856                 add     esp, 0Ch
.text$mn:0000C859                 pop     ebp
.text$mn:0000C85A                 retn
.text$mn:0000C85A _wmemcpy        endp
.text$mn:0000C85A
.text$mn:0000C85A ; ---------------------------------------------------------------------------
.text$mn:0000C85B                 align 4
.text$mn:0000C85B _text$mn        ends
.text$mn:0000C85B
.text$mn:0000C85C ; ===========================================================================
.text$mn:0000C85C
.text$mn:0000C85C ; Segment type: Pure code
.text$mn:0000C85C ; Segment permissions: Read/Execute
.text$mn:0000C85C _text$mn        segment para public 'CODE' use32
.text$mn:0000C85C                 assume cs:_text$mn
.text$mn:0000C85C                 ;org 0C85Ch
.text$mn:0000C85C ; COMDAT (pick any)
.text$mn:0000C85C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C85C
.text$mn:0000C85C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C85C
.text$mn:0000C85C ; Attributes: bp-based frame
.text$mn:0000C85C
.text$mn:0000C85C ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000C85C                 public _wmemmove
.text$mn:0000C85C _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000C85C
.text$mn:0000C85C Dst             = dword ptr  8
.text$mn:0000C85C Src             = dword ptr  0Ch
.text$mn:0000C85C arg_8           = dword ptr  10h
.text$mn:0000C85C
.text$mn:0000C85C                 push    ebp
.text$mn:0000C85D                 mov     ebp, esp
.text$mn:0000C85F                 mov     eax, [ebp+arg_8]
.text$mn:0000C862                 shl     eax, 1
.text$mn:0000C864                 push    eax             ; Size
.text$mn:0000C865                 mov     ecx, [ebp+Src]
.text$mn:0000C868                 push    ecx             ; Src
.text$mn:0000C869                 mov     edx, [ebp+Dst]
.text$mn:0000C86C                 push    edx             ; Dst
.text$mn:0000C86D                 call    _memmove
.text$mn:0000C872                 add     esp, 0Ch
.text$mn:0000C875                 pop     ebp
.text$mn:0000C876                 retn
.text$mn:0000C876 _wmemmove       endp
.text$mn:0000C876
.text$mn:0000C876 ; ---------------------------------------------------------------------------
.text$mn:0000C877                 align 4
.text$mn:0000C877 _text$mn        ends
.text$mn:0000C877
.xdata$x:0000C878 ; ===========================================================================
.xdata$x:0000C878
.xdata$x:0000C878 ; Segment type: Pure data
.xdata$x:0000C878 ; Segment permissions: Read
.xdata$x:0000C878 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C878                 assume cs:_xdata$x
.xdata$x:0000C878                 ;org 0C878h
.xdata$x:0000C878 ; COMDAT (pick associative to section at 9224)
.xdata$x:0000C878 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000C878                                         ; DATA XREF: .xdata$x:0000C888o
.xdata$x:0000C879                 db 0FFh
.xdata$x:0000C87A                 db 0FFh
.xdata$x:0000C87B                 db 0FFh
.xdata$x:0000C87C                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000C880 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000C880                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000C881                 db    5
.xdata$x:0000C882                 db  93h ; ô
.xdata$x:0000C883                 db  19h
.xdata$x:0000C884                 db    1
.xdata$x:0000C885                 db    0
.xdata$x:0000C886                 db    0
.xdata$x:0000C887                 db    0
.xdata$x:0000C888                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000C88C                 db    0
.xdata$x:0000C88D                 db    0
.xdata$x:0000C88E                 db    0
.xdata$x:0000C88F                 db    0
.xdata$x:0000C890                 db    0
.xdata$x:0000C891                 db    0
.xdata$x:0000C892                 db    0
.xdata$x:0000C893                 db    0
.xdata$x:0000C894                 db    0
.xdata$x:0000C895                 db    0
.xdata$x:0000C896                 db    0
.xdata$x:0000C897                 db    0
.xdata$x:0000C898                 db    0
.xdata$x:0000C899                 db    0
.xdata$x:0000C89A                 db    0
.xdata$x:0000C89B                 db    0
.xdata$x:0000C89C                 db    0
.xdata$x:0000C89D                 db    0
.xdata$x:0000C89E                 db    0
.xdata$x:0000C89F                 db    0
.xdata$x:0000C8A0                 db    0
.xdata$x:0000C8A1                 db    0
.xdata$x:0000C8A2                 db    0
.xdata$x:0000C8A3                 db    0
.xdata$x:0000C8A3 _xdata$x        ends
.xdata$x:0000C8A3
.xdata$x:0000C8A4 ; ===========================================================================
.xdata$x:0000C8A4
.xdata$x:0000C8A4 ; Segment type: Pure data
.xdata$x:0000C8A4 ; Segment permissions: Read
.xdata$x:0000C8A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8A4                 assume cs:_xdata$x
.xdata$x:0000C8A4                 ;org 0C8A4h
.xdata$x:0000C8A4 ; COMDAT (pick associative to section at 4A18)
.xdata$x:0000C8A4 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C8A4                                         ; DATA XREF: .xdata$x:0000C8B4o
.xdata$x:0000C8A5                 db 0FFh
.xdata$x:0000C8A6                 db 0FFh
.xdata$x:0000C8A7                 db 0FFh
.xdata$x:0000C8A8                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000C8AC __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C8AC                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000C8AD                 db    5
.xdata$x:0000C8AE                 db  93h ; ô
.xdata$x:0000C8AF                 db  19h
.xdata$x:0000C8B0                 db    1
.xdata$x:0000C8B1                 db    0
.xdata$x:0000C8B2                 db    0
.xdata$x:0000C8B3                 db    0
.xdata$x:0000C8B4                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000C8B8                 db    0
.xdata$x:0000C8B9                 db    0
.xdata$x:0000C8BA                 db    0
.xdata$x:0000C8BB                 db    0
.xdata$x:0000C8BC                 db    0
.xdata$x:0000C8BD                 db    0
.xdata$x:0000C8BE                 db    0
.xdata$x:0000C8BF                 db    0
.xdata$x:0000C8C0                 db    0
.xdata$x:0000C8C1                 db    0
.xdata$x:0000C8C2                 db    0
.xdata$x:0000C8C3                 db    0
.xdata$x:0000C8C4                 db    0
.xdata$x:0000C8C5                 db    0
.xdata$x:0000C8C6                 db    0
.xdata$x:0000C8C7                 db    0
.xdata$x:0000C8C8                 db    0
.xdata$x:0000C8C9                 db    0
.xdata$x:0000C8CA                 db    0
.xdata$x:0000C8CB                 db    0
.xdata$x:0000C8CC                 db    0
.xdata$x:0000C8CD                 db    0
.xdata$x:0000C8CE                 db    0
.xdata$x:0000C8CF                 db    0
.xdata$x:0000C8CF _xdata$x        ends
.xdata$x:0000C8CF
.xdata$x:0000C8D0 ; ===========================================================================
.xdata$x:0000C8D0
.xdata$x:0000C8D0 ; Segment type: Pure data
.xdata$x:0000C8D0 ; Segment permissions: Read
.xdata$x:0000C8D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8D0                 assume cs:_xdata$x
.xdata$x:0000C8D0                 ;org 0C8D0h
.xdata$x:0000C8D0 ; COMDAT (pick associative to section at 66B8)
.xdata$x:0000C8D0 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C8D0                                         ; DATA XREF: .xdata$x:0000C8E0o
.xdata$x:0000C8D1                 db 0FFh
.xdata$x:0000C8D2                 db 0FFh
.xdata$x:0000C8D3                 db 0FFh
.xdata$x:0000C8D4                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000C8D8 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C8D8                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000C8D9                 db    5
.xdata$x:0000C8DA                 db  93h ; ô
.xdata$x:0000C8DB                 db  19h
.xdata$x:0000C8DC                 db    1
.xdata$x:0000C8DD                 db    0
.xdata$x:0000C8DE                 db    0
.xdata$x:0000C8DF                 db    0
.xdata$x:0000C8E0                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000C8E4                 db    0
.xdata$x:0000C8E5                 db    0
.xdata$x:0000C8E6                 db    0
.xdata$x:0000C8E7                 db    0
.xdata$x:0000C8E8                 db    0
.xdata$x:0000C8E9                 db    0
.xdata$x:0000C8EA                 db    0
.xdata$x:0000C8EB                 db    0
.xdata$x:0000C8EC                 db    0
.xdata$x:0000C8ED                 db    0
.xdata$x:0000C8EE                 db    0
.xdata$x:0000C8EF                 db    0
.xdata$x:0000C8F0                 db    0
.xdata$x:0000C8F1                 db    0
.xdata$x:0000C8F2                 db    0
.xdata$x:0000C8F3                 db    0
.xdata$x:0000C8F4                 db    0
.xdata$x:0000C8F5                 db    0
.xdata$x:0000C8F6                 db    0
.xdata$x:0000C8F7                 db    0
.xdata$x:0000C8F8                 db    0
.xdata$x:0000C8F9                 db    0
.xdata$x:0000C8FA                 db    0
.xdata$x:0000C8FB                 db    0
.xdata$x:0000C8FB _xdata$x        ends
.xdata$x:0000C8FB
.xdata$x:0000C8FC ; ===========================================================================
.xdata$x:0000C8FC
.xdata$x:0000C8FC ; Segment type: Pure data
.xdata$x:0000C8FC ; Segment permissions: Read
.xdata$x:0000C8FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8FC                 assume cs:_xdata$x
.xdata$x:0000C8FC                 ;org 0C8FCh
.xdata$x:0000C8FC ; COMDAT (pick associative to section at 4920)
.xdata$x:0000C8FC __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000C8FC                                         ; DATA XREF: .xdata$x:0000C90Co
.xdata$x:0000C8FD                 db 0FFh
.xdata$x:0000C8FE                 db 0FFh
.xdata$x:0000C8FF                 db 0FFh
.xdata$x:0000C900                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000C904 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000C904                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000C905                 db    5
.xdata$x:0000C906                 db  93h ; ô
.xdata$x:0000C907                 db  19h
.xdata$x:0000C908                 db    1
.xdata$x:0000C909                 db    0
.xdata$x:0000C90A                 db    0
.xdata$x:0000C90B                 db    0
.xdata$x:0000C90C                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000C910                 db    0
.xdata$x:0000C911                 db    0
.xdata$x:0000C912                 db    0
.xdata$x:0000C913                 db    0
.xdata$x:0000C914                 db    0
.xdata$x:0000C915                 db    0
.xdata$x:0000C916                 db    0
.xdata$x:0000C917                 db    0
.xdata$x:0000C918                 db    0
.xdata$x:0000C919                 db    0
.xdata$x:0000C91A                 db    0
.xdata$x:0000C91B                 db    0
.xdata$x:0000C91C                 db    0
.xdata$x:0000C91D                 db    0
.xdata$x:0000C91E                 db    0
.xdata$x:0000C91F                 db    0
.xdata$x:0000C920                 db    0
.xdata$x:0000C921                 db    0
.xdata$x:0000C922                 db    0
.xdata$x:0000C923                 db    0
.xdata$x:0000C924                 db    0
.xdata$x:0000C925                 db    0
.xdata$x:0000C926                 db    0
.xdata$x:0000C927                 db    0
.xdata$x:0000C927 _xdata$x        ends
.xdata$x:0000C927
.xdata$x:0000C928 ; ===========================================================================
.xdata$x:0000C928
.xdata$x:0000C928 ; Segment type: Pure data
.xdata$x:0000C928 ; Segment permissions: Read
.xdata$x:0000C928 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C928                 assume cs:_xdata$x
.xdata$x:0000C928                 ;org 0C928h
.xdata$x:0000C928 ; COMDAT (pick associative to section at 65C8)
.xdata$x:0000C928 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C928                                         ; DATA XREF: .xdata$x:0000C938o
.xdata$x:0000C929                 db 0FFh
.xdata$x:0000C92A                 db 0FFh
.xdata$x:0000C92B                 db 0FFh
.xdata$x:0000C92C                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000C930 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C930                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000C931                 db    5
.xdata$x:0000C932                 db  93h ; ô
.xdata$x:0000C933                 db  19h
.xdata$x:0000C934                 db    1
.xdata$x:0000C935                 db    0
.xdata$x:0000C936                 db    0
.xdata$x:0000C937                 db    0
.xdata$x:0000C938                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000C93C                 db    0
.xdata$x:0000C93D                 db    0
.xdata$x:0000C93E                 db    0
.xdata$x:0000C93F                 db    0
.xdata$x:0000C940                 db    0
.xdata$x:0000C941                 db    0
.xdata$x:0000C942                 db    0
.xdata$x:0000C943                 db    0
.xdata$x:0000C944                 db    0
.xdata$x:0000C945                 db    0
.xdata$x:0000C946                 db    0
.xdata$x:0000C947                 db    0
.xdata$x:0000C948                 db    0
.xdata$x:0000C949                 db    0
.xdata$x:0000C94A                 db    0
.xdata$x:0000C94B                 db    0
.xdata$x:0000C94C                 db    0
.xdata$x:0000C94D                 db    0
.xdata$x:0000C94E                 db    0
.xdata$x:0000C94F                 db    0
.xdata$x:0000C950                 db    0
.xdata$x:0000C951                 db    0
.xdata$x:0000C952                 db    0
.xdata$x:0000C953                 db    0
.xdata$x:0000C953 _xdata$x        ends
.xdata$x:0000C953
.xdata$x:0000C954 ; ===========================================================================
.xdata$x:0000C954
.xdata$x:0000C954 ; Segment type: Pure data
.xdata$x:0000C954 ; Segment permissions: Read
.xdata$x:0000C954 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C954                 assume cs:_xdata$x
.xdata$x:0000C954                 ;org 0C954h
.xdata$x:0000C954 ; COMDAT (pick associative to section at 4FB4)
.xdata$x:0000C954 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000C954                                         ; DATA XREF: .xdata$x:0000C964o
.xdata$x:0000C955                 db 0FFh
.xdata$x:0000C956                 db 0FFh
.xdata$x:0000C957                 db 0FFh
.xdata$x:0000C958                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000C95C __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000C95C                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000C95D                 db    5
.xdata$x:0000C95E                 db  93h ; ô
.xdata$x:0000C95F                 db  19h
.xdata$x:0000C960                 db    1
.xdata$x:0000C961                 db    0
.xdata$x:0000C962                 db    0
.xdata$x:0000C963                 db    0
.xdata$x:0000C964                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.xdata$x:0000C968                 align 20h
.xdata$x:0000C968 _xdata$x        ends
.xdata$x:0000C968
.xdata$x:0000C980 ; ===========================================================================
.xdata$x:0000C980
.xdata$x:0000C980 ; Segment type: Pure data
.xdata$x:0000C980 ; Segment permissions: Read
.xdata$x:0000C980 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C980                 assume cs:_xdata$x
.xdata$x:0000C980                 ;org 0C980h
.xdata$x:0000C980 ; COMDAT (pick associative to section at 5064)
.xdata$x:0000C980 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000C980                                         ; DATA XREF: .xdata$x:0000C990o
.xdata$x:0000C981                 db 0FFh
.xdata$x:0000C982                 db 0FFh
.xdata$x:0000C983                 db 0FFh
.xdata$x:0000C984                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000C988 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000C988                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000C989                 db    5
.xdata$x:0000C98A                 db  93h ; ô
.xdata$x:0000C98B                 db  19h
.xdata$x:0000C98C                 db    1
.xdata$x:0000C98D                 db    0
.xdata$x:0000C98E                 db    0
.xdata$x:0000C98F                 db    0
.xdata$x:0000C990                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000C994                 db    0
.xdata$x:0000C995                 db    0
.xdata$x:0000C996                 db    0
.xdata$x:0000C997                 db    0
.xdata$x:0000C998                 db    0
.xdata$x:0000C999                 db    0
.xdata$x:0000C99A                 db    0
.xdata$x:0000C99B                 db    0
.xdata$x:0000C99C                 db    0
.xdata$x:0000C99D                 db    0
.xdata$x:0000C99E                 db    0
.xdata$x:0000C99F                 db    0
.xdata$x:0000C9A0                 db    0
.xdata$x:0000C9A1                 db    0
.xdata$x:0000C9A2                 db    0
.xdata$x:0000C9A3                 db    0
.xdata$x:0000C9A4                 db    0
.xdata$x:0000C9A5                 db    0
.xdata$x:0000C9A6                 db    0
.xdata$x:0000C9A7                 db    0
.xdata$x:0000C9A8                 db    0
.xdata$x:0000C9A9                 db    0
.xdata$x:0000C9AA                 db    0
.xdata$x:0000C9AB                 db    0
.xdata$x:0000C9AB _xdata$x        ends
.xdata$x:0000C9AB
.xdata$x:0000C9AC ; ===========================================================================
.xdata$x:0000C9AC
.xdata$x:0000C9AC ; Segment type: Pure data
.xdata$x:0000C9AC ; Segment permissions: Read
.xdata$x:0000C9AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C9AC                 assume cs:_xdata$x
.xdata$x:0000C9AC                 ;org 0C9ACh
.xdata$x:0000C9AC ; COMDAT (pick associative to section at 4F10)
.xdata$x:0000C9AC __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000C9AC                                         ; DATA XREF: .xdata$x:0000C9BCo
.xdata$x:0000C9AD                 db 0FFh
.xdata$x:0000C9AE                 db 0FFh
.xdata$x:0000C9AF                 db 0FFh
.xdata$x:0000C9B0                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000C9B4 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000C9B4                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000C9B5                 db    5
.xdata$x:0000C9B6                 db  93h ; ô
.xdata$x:0000C9B7                 db  19h
.xdata$x:0000C9B8                 db    1
.xdata$x:0000C9B9                 db    0
.xdata$x:0000C9BA                 db    0
.xdata$x:0000C9BB                 db    0
.xdata$x:0000C9BC                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000C9C0                 db    0
.xdata$x:0000C9C1                 db    0
.xdata$x:0000C9C2                 db    0
.xdata$x:0000C9C3                 db    0
.xdata$x:0000C9C4                 db    0
.xdata$x:0000C9C5                 db    0
.xdata$x:0000C9C6                 db    0
.xdata$x:0000C9C7                 db    0
.xdata$x:0000C9C8                 db    0
.xdata$x:0000C9C9                 db    0
.xdata$x:0000C9CA                 db    0
.xdata$x:0000C9CB                 db    0
.xdata$x:0000C9CC                 db    0
.xdata$x:0000C9CD                 db    0
.xdata$x:0000C9CE                 db    0
.xdata$x:0000C9CF                 db    0
.xdata$x:0000C9D0                 db    0
.xdata$x:0000C9D1                 db    0
.xdata$x:0000C9D2                 db    0
.xdata$x:0000C9D3                 db    0
.xdata$x:0000C9D4                 db    0
.xdata$x:0000C9D5                 db    0
.xdata$x:0000C9D6                 db    0
.xdata$x:0000C9D7                 db    0
.xdata$x:0000C9D7 _xdata$x        ends
.xdata$x:0000C9D7
.xdata$x:0000C9D8 ; ===========================================================================
.xdata$x:0000C9D8
.xdata$x:0000C9D8 ; Segment type: Pure data
.xdata$x:0000C9D8 ; Segment permissions: Read
.xdata$x:0000C9D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C9D8                 assume cs:_xdata$x
.xdata$x:0000C9D8                 ;org 0C9D8h
.xdata$x:0000C9D8 ; COMDAT (pick associative to section at 695C)
.xdata$x:0000C9D8 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000C9D8                                         ; DATA XREF: .xdata$x:0000C9E8o
.xdata$x:0000C9D9                 db 0FFh
.xdata$x:0000C9DA                 db 0FFh
.xdata$x:0000C9DB                 db 0FFh
.xdata$x:0000C9DC                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000C9E0 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C9E0                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000C9E1                 db    5
.xdata$x:0000C9E2                 db  93h ; ô
.xdata$x:0000C9E3                 db  19h
.xdata$x:0000C9E4                 db    1
.xdata$x:0000C9E5                 db    0
.xdata$x:0000C9E6                 db    0
.xdata$x:0000C9E7                 db    0
.xdata$x:0000C9E8                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000C9EC                 db    0
.xdata$x:0000C9ED                 db    0
.xdata$x:0000C9EE                 db    0
.xdata$x:0000C9EF                 db    0
.xdata$x:0000C9F0                 db    0
.xdata$x:0000C9F1                 db    0
.xdata$x:0000C9F2                 db    0
.xdata$x:0000C9F3                 db    0
.xdata$x:0000C9F4                 db    0
.xdata$x:0000C9F5                 db    0
.xdata$x:0000C9F6                 db    0
.xdata$x:0000C9F7                 db    0
.xdata$x:0000C9F8                 db    0
.xdata$x:0000C9F9                 db    0
.xdata$x:0000C9FA                 db    0
.xdata$x:0000C9FB                 db    0
.xdata$x:0000C9FC                 db    0
.xdata$x:0000C9FD                 db    0
.xdata$x:0000C9FE                 db    0
.xdata$x:0000C9FF                 db    0
.xdata$x:0000CA00                 db    0
.xdata$x:0000CA01                 db    0
.xdata$x:0000CA02                 db    0
.xdata$x:0000CA03                 db    0
.xdata$x:0000CA03 _xdata$x        ends
.xdata$x:0000CA03
.xdata$x:0000CA04 ; ===========================================================================
.xdata$x:0000CA04
.xdata$x:0000CA04 ; Segment type: Pure data
.xdata$x:0000CA04 ; Segment permissions: Read
.xdata$x:0000CA04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CA04                 assume cs:_xdata$x
.xdata$x:0000CA04                 ;org 0CA04h
.xdata$x:0000CA04 ; COMDAT (pick associative to section at 82CC)
.xdata$x:0000CA04 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000CA04                                         ; DATA XREF: .xdata$x:0000CA8Co
.xdata$x:0000CA05                 db    0
.xdata$x:0000CA06                 db    0
.xdata$x:0000CA07                 db    0
.xdata$x:0000CA08                 db    0
.xdata$x:0000CA09                 db    0
.xdata$x:0000CA0A                 db    0
.xdata$x:0000CA0B                 db    0
.xdata$x:0000CA0C                 db    0
.xdata$x:0000CA0D                 db    0
.xdata$x:0000CA0E                 db    0
.xdata$x:0000CA0F                 db    0
.xdata$x:0000CA10                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000CA14 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000CA14                                         ; DATA XREF: .xdata$x:0000CA78o
.xdata$x:0000CA15                 db    0
.xdata$x:0000CA16                 db    0
.xdata$x:0000CA17                 db    0
.xdata$x:0000CA18                 db    0
.xdata$x:0000CA19                 db    0
.xdata$x:0000CA1A                 db    0
.xdata$x:0000CA1B                 db    0
.xdata$x:0000CA1C                 db    0
.xdata$x:0000CA1D                 db    0
.xdata$x:0000CA1E                 db    0
.xdata$x:0000CA1F                 db    0
.xdata$x:0000CA20                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000CA24 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000CA24                                         ; DATA XREF: .xdata$x:0000CA4Co
.xdata$x:0000CA25                 db 0FFh
.xdata$x:0000CA26                 db 0FFh
.xdata$x:0000CA27                 db 0FFh
.xdata$x:0000CA28                 db    0
.xdata$x:0000CA29                 db    0
.xdata$x:0000CA2A                 db    0
.xdata$x:0000CA2B                 db    0
.xdata$x:0000CA2C                 db 0FFh
.xdata$x:0000CA2D                 db 0FFh
.xdata$x:0000CA2E                 db 0FFh
.xdata$x:0000CA2F                 db 0FFh
.xdata$x:0000CA30                 db    0
.xdata$x:0000CA31                 db    0
.xdata$x:0000CA32                 db    0
.xdata$x:0000CA33                 db    0
.xdata$x:0000CA34                 db    1
.xdata$x:0000CA35                 db    0
.xdata$x:0000CA36                 db    0
.xdata$x:0000CA37                 db    0
.xdata$x:0000CA38                 db    0
.xdata$x:0000CA39                 db    0
.xdata$x:0000CA3A                 db    0
.xdata$x:0000CA3B                 db    0
.xdata$x:0000CA3C                 db    1
.xdata$x:0000CA3D                 db    0
.xdata$x:0000CA3E                 db    0
.xdata$x:0000CA3F                 db    0
.xdata$x:0000CA40                 db    0
.xdata$x:0000CA41                 db    0
.xdata$x:0000CA42                 db    0
.xdata$x:0000CA43                 db    0
.xdata$x:0000CA44 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000CA44                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000CA45                 db    5
.xdata$x:0000CA46                 db  93h ; ô
.xdata$x:0000CA47                 db  19h
.xdata$x:0000CA48                 db    4
.xdata$x:0000CA49                 db    0
.xdata$x:0000CA4A                 db    0
.xdata$x:0000CA4B                 db    0
.xdata$x:0000CA4C                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000CA50                 db    2
.xdata$x:0000CA51                 db    0
.xdata$x:0000CA52                 db    0
.xdata$x:0000CA53                 db    0
.xdata$x:0000CA54                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000CA58                 db    0
.xdata$x:0000CA59                 db    0
.xdata$x:0000CA5A                 db    0
.xdata$x:0000CA5B                 db    0
.xdata$x:0000CA5C                 db    0
.xdata$x:0000CA5D                 db    0
.xdata$x:0000CA5E                 db    0
.xdata$x:0000CA5F                 db    0
.xdata$x:0000CA60                 db    0
.xdata$x:0000CA61                 db    0
.xdata$x:0000CA62                 db    0
.xdata$x:0000CA63                 db    0
.xdata$x:0000CA64                 db    0
.xdata$x:0000CA65                 db    0
.xdata$x:0000CA66                 db    0
.xdata$x:0000CA67                 db    0
.xdata$x:0000CA68 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000CA68                                         ; DATA XREF: .xdata$x:0000CA54o
.xdata$x:0000CA69                 db    0
.xdata$x:0000CA6A                 db    0
.xdata$x:0000CA6B                 db    0
.xdata$x:0000CA6C                 db    2
.xdata$x:0000CA6D                 db    0
.xdata$x:0000CA6E                 db    0
.xdata$x:0000CA6F                 db    0
.xdata$x:0000CA70                 db    3
.xdata$x:0000CA71                 db    0
.xdata$x:0000CA72                 db    0
.xdata$x:0000CA73                 db    0
.xdata$x:0000CA74                 db    1
.xdata$x:0000CA75                 db    0
.xdata$x:0000CA76                 db    0
.xdata$x:0000CA77                 db    0
.xdata$x:0000CA78                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000CA7C                 db    0
.xdata$x:0000CA7D                 db    0
.xdata$x:0000CA7E                 db    0
.xdata$x:0000CA7F                 db    0
.xdata$x:0000CA80                 db    0
.xdata$x:0000CA81                 db    0
.xdata$x:0000CA82                 db    0
.xdata$x:0000CA83                 db    0
.xdata$x:0000CA84                 db    3
.xdata$x:0000CA85                 db    0
.xdata$x:0000CA86                 db    0
.xdata$x:0000CA87                 db    0
.xdata$x:0000CA88                 db    1
.xdata$x:0000CA89                 db    0
.xdata$x:0000CA8A                 db    0
.xdata$x:0000CA8B                 db    0
.xdata$x:0000CA8C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000CA8C _xdata$x        ends
.xdata$x:0000CA8C
.xdata$x:0000CA90 ; ===========================================================================
.xdata$x:0000CA90
.xdata$x:0000CA90 ; Segment type: Pure data
.xdata$x:0000CA90 ; Segment permissions: Read
.xdata$x:0000CA90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CA90                 assume cs:_xdata$x
.xdata$x:0000CA90                 ;org 0CA90h
.xdata$x:0000CA90 ; COMDAT (pick associative to section at 6280)
.xdata$x:0000CA90 __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:0000CA90                                         ; DATA XREF: .xdata$x:0000CAA0o
.xdata$x:0000CA91                 db 0FFh
.xdata$x:0000CA92                 db 0FFh
.xdata$x:0000CA93                 db 0FFh
.xdata$x:0000CA94                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:0000CA98 __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:0000CA98                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+11o
.xdata$x:0000CA99                 db    5
.xdata$x:0000CA9A                 db  93h ; ô
.xdata$x:0000CA9B                 db  19h
.xdata$x:0000CA9C                 db    1
.xdata$x:0000CA9D                 db    0
.xdata$x:0000CA9E                 db    0
.xdata$x:0000CA9F                 db    0
.xdata$x:0000CAA0                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:0000CAA4                 db    0
.xdata$x:0000CAA5                 db    0
.xdata$x:0000CAA6                 db    0
.xdata$x:0000CAA7                 db    0
.xdata$x:0000CAA8                 db    0
.xdata$x:0000CAA9                 db    0
.xdata$x:0000CAAA                 db    0
.xdata$x:0000CAAB                 db    0
.xdata$x:0000CAAC                 db    0
.xdata$x:0000CAAD                 db    0
.xdata$x:0000CAAE                 db    0
.xdata$x:0000CAAF                 db    0
.xdata$x:0000CAB0                 db    0
.xdata$x:0000CAB1                 db    0
.xdata$x:0000CAB2                 db    0
.xdata$x:0000CAB3                 db    0
.xdata$x:0000CAB4                 db    0
.xdata$x:0000CAB5                 db    0
.xdata$x:0000CAB6                 db    0
.xdata$x:0000CAB7                 db    0
.xdata$x:0000CAB8                 db    0
.xdata$x:0000CAB9                 db    0
.xdata$x:0000CABA                 db    0
.xdata$x:0000CABB                 db    0
.xdata$x:0000CABB _xdata$x        ends
.xdata$x:0000CABB
.xdata$x:0000CABC ; ===========================================================================
.xdata$x:0000CABC
.xdata$x:0000CABC ; Segment type: Pure data
.xdata$x:0000CABC ; Segment permissions: Read
.xdata$x:0000CABC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CABC                 assume cs:_xdata$x
.xdata$x:0000CABC                 ;org 0CABCh
.xdata$x:0000CABC ; COMDAT (pick associative to section at 6310)
.xdata$x:0000CABC __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000CABC                                         ; DATA XREF: .xdata$x:0000CACCo
.xdata$x:0000CABD                 db 0FFh
.xdata$x:0000CABE                 db 0FFh
.xdata$x:0000CABF                 db 0FFh
.xdata$x:0000CAC0                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:0000CAC4 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000CAC4                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:0000CAC5                 db    5
.xdata$x:0000CAC6                 db  93h ; ô
.xdata$x:0000CAC7                 db  19h
.xdata$x:0000CAC8                 db    1
.xdata$x:0000CAC9                 db    0
.xdata$x:0000CACA                 db    0
.xdata$x:0000CACB                 db    0
.xdata$x:0000CACC                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:0000CAD0                 db    0
.xdata$x:0000CAD1                 db    0
.xdata$x:0000CAD2                 db    0
.xdata$x:0000CAD3                 db    0
.xdata$x:0000CAD4                 db    0
.xdata$x:0000CAD5                 db    0
.xdata$x:0000CAD6                 db    0
.xdata$x:0000CAD7                 db    0
.xdata$x:0000CAD8                 db    0
.xdata$x:0000CAD9                 db    0
.xdata$x:0000CADA                 db    0
.xdata$x:0000CADB                 db    0
.xdata$x:0000CADC                 db    0
.xdata$x:0000CADD                 db    0
.xdata$x:0000CADE                 db    0
.xdata$x:0000CADF                 db    0
.xdata$x:0000CAE0                 db    0
.xdata$x:0000CAE1                 db    0
.xdata$x:0000CAE2                 db    0
.xdata$x:0000CAE3                 db    0
.xdata$x:0000CAE4                 db    0
.xdata$x:0000CAE5                 db    0
.xdata$x:0000CAE6                 db    0
.xdata$x:0000CAE7                 db    0
.xdata$x:0000CAE7 _xdata$x        ends
.xdata$x:0000CAE7
.xdata$x:0000CAE8 ; ===========================================================================
.xdata$x:0000CAE8
.xdata$x:0000CAE8 ; Segment type: Pure data
.xdata$x:0000CAE8 ; Segment permissions: Read
.xdata$x:0000CAE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CAE8                 assume cs:_xdata$x
.xdata$x:0000CAE8                 ;org 0CAE8h
.xdata$x:0000CAE8 ; COMDAT (pick associative to section at 7410)
.xdata$x:0000CAE8 __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:0000CAE8                                         ; DATA XREF: .xdata$x:0000CAF8o
.xdata$x:0000CAE9                 db 0FFh
.xdata$x:0000CAEA                 db 0FFh
.xdata$x:0000CAEB                 db 0FFh
.xdata$x:0000CAEC                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:0000CAF0 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000CAF0                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:0000CAF1                 db    5
.xdata$x:0000CAF2                 db  93h ; ô
.xdata$x:0000CAF3                 db  19h
.xdata$x:0000CAF4                 db    1
.xdata$x:0000CAF5                 db    0
.xdata$x:0000CAF6                 db    0
.xdata$x:0000CAF7                 db    0
.xdata$x:0000CAF8                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:0000CAFC                 db    0
.xdata$x:0000CAFD                 db    0
.xdata$x:0000CAFE                 db    0
.xdata$x:0000CAFF                 db    0
.xdata$x:0000CB00                 db    0
.xdata$x:0000CB01                 db    0
.xdata$x:0000CB02                 db    0
.xdata$x:0000CB03                 db    0
.xdata$x:0000CB04                 db    0
.xdata$x:0000CB05                 db    0
.xdata$x:0000CB06                 db    0
.xdata$x:0000CB07                 db    0
.xdata$x:0000CB08                 db    0
.xdata$x:0000CB09                 db    0
.xdata$x:0000CB0A                 db    0
.xdata$x:0000CB0B                 db    0
.xdata$x:0000CB0C                 db    0
.xdata$x:0000CB0D                 db    0
.xdata$x:0000CB0E                 db    0
.xdata$x:0000CB0F                 db    0
.xdata$x:0000CB10                 db    0
.xdata$x:0000CB11                 db    0
.xdata$x:0000CB12                 db    0
.xdata$x:0000CB13                 db    0
.xdata$x:0000CB13 _xdata$x        ends
.xdata$x:0000CB13
.xdata$x:0000CB14 ; ===========================================================================
.xdata$x:0000CB14
.xdata$x:0000CB14 ; Segment type: Pure data
.xdata$x:0000CB14 ; Segment permissions: Read
.xdata$x:0000CB14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB14                 assume cs:_xdata$x
.xdata$x:0000CB14                 ;org 0CB14h
.xdata$x:0000CB14 ; COMDAT (pick associative to section at 61FC)
.xdata$x:0000CB14 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CB14                                         ; DATA XREF: .xdata$x:0000CB24o
.xdata$x:0000CB15                 db 0FFh
.xdata$x:0000CB16                 db 0FFh
.xdata$x:0000CB17                 db 0FFh
.xdata$x:0000CB18                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000CB1C __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CB1C                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CB1D                 db    5
.xdata$x:0000CB1E                 db  93h ; ô
.xdata$x:0000CB1F                 db  19h
.xdata$x:0000CB20                 db    1
.xdata$x:0000CB21                 db    0
.xdata$x:0000CB22                 db    0
.xdata$x:0000CB23                 db    0
.xdata$x:0000CB24                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:0000CB28                 align 20h
.xdata$x:0000CB28 _xdata$x        ends
.xdata$x:0000CB28
.xdata$x:0000CB40 ; ===========================================================================
.xdata$x:0000CB40
.xdata$x:0000CB40 ; Segment type: Pure data
.xdata$x:0000CB40 ; Segment permissions: Read
.xdata$x:0000CB40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB40                 assume cs:_xdata$x
.xdata$x:0000CB40                 ;org 0CB40h
.xdata$x:0000CB40 ; COMDAT (pick associative to section at 5B38)
.xdata$x:0000CB40 __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000CB40                                         ; DATA XREF: __ehhandler$??0_Locinfo@std@@QAE@PBD@Z+11o
.xdata$x:0000CB41                 db    5
.xdata$x:0000CB42                 db  93h ; ô
.xdata$x:0000CB43                 db  19h
.xdata$x:0000CB44                 db    7
.xdata$x:0000CB45                 db    0
.xdata$x:0000CB46                 db    0
.xdata$x:0000CB47                 db    0
.xdata$x:0000CB48                 dd offset __unwindtable$??0_Locinfo@std@@QAE@PBD@Z
.xdata$x:0000CB4C                 db    0
.xdata$x:0000CB4D                 db    0
.xdata$x:0000CB4E                 db    0
.xdata$x:0000CB4F                 db    0
.xdata$x:0000CB50                 db    0
.xdata$x:0000CB51                 db    0
.xdata$x:0000CB52                 db    0
.xdata$x:0000CB53                 db    0
.xdata$x:0000CB54                 db    0
.xdata$x:0000CB55                 db    0
.xdata$x:0000CB56                 db    0
.xdata$x:0000CB57                 db    0
.xdata$x:0000CB58                 db    0
.xdata$x:0000CB59                 db    0
.xdata$x:0000CB5A                 db    0
.xdata$x:0000CB5B                 db    0
.xdata$x:0000CB5C                 db    0
.xdata$x:0000CB5D                 db    0
.xdata$x:0000CB5E                 db    0
.xdata$x:0000CB5F                 db    0
.xdata$x:0000CB60                 db    0
.xdata$x:0000CB61                 db    0
.xdata$x:0000CB62                 db    0
.xdata$x:0000CB63                 db    0
.xdata$x:0000CB64 __unwindtable$??0_Locinfo@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000CB64                                         ; DATA XREF: .xdata$x:0000CB48o
.xdata$x:0000CB65                 db 0FFh
.xdata$x:0000CB66                 db 0FFh
.xdata$x:0000CB67                 db 0FFh
.xdata$x:0000CB68                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
.xdata$x:0000CB6C                 align 10h
.xdata$x:0000CB70                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
.xdata$x:0000CB74                 db    1
.xdata$x:0000CB75                 db    0
.xdata$x:0000CB76                 db    0
.xdata$x:0000CB77                 db    0
.xdata$x:0000CB78                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
.xdata$x:0000CB7C                 db    2
.xdata$x:0000CB7D                 db    0
.xdata$x:0000CB7E                 db    0
.xdata$x:0000CB7F                 db    0
.xdata$x:0000CB80                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
.xdata$x:0000CB84                 db    3
.xdata$x:0000CB85                 db    0
.xdata$x:0000CB86                 db    0
.xdata$x:0000CB87                 db    0
.xdata$x:0000CB88                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
.xdata$x:0000CB8C                 db    4
.xdata$x:0000CB8D                 db    0
.xdata$x:0000CB8E                 db    0
.xdata$x:0000CB8F                 db    0
.xdata$x:0000CB90                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
.xdata$x:0000CB94                 db    5
.xdata$x:0000CB95                 db    0
.xdata$x:0000CB96                 db    0
.xdata$x:0000CB97                 db    0
.xdata$x:0000CB98                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
.xdata$x:0000CB98 _xdata$x        ends
.xdata$x:0000CB98
.xdata$x:0000CB9C ; ===========================================================================
.xdata$x:0000CB9C
.xdata$x:0000CB9C ; Segment type: Pure data
.xdata$x:0000CB9C ; Segment permissions: Read
.xdata$x:0000CB9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB9C                 assume cs:_xdata$x
.xdata$x:0000CB9C                 ;org 0CB9Ch
.xdata$x:0000CB9C ; COMDAT (pick associative to section at 6FFC)
.xdata$x:0000CB9C __ehfuncinfo$??1_Locinfo@std@@QAE@XZ db  22h ; "
.xdata$x:0000CB9C                                         ; DATA XREF: __ehhandler$??1_Locinfo@std@@QAE@XZ+11o
.xdata$x:0000CB9D                 db    5
.xdata$x:0000CB9E                 db  93h ; ô
.xdata$x:0000CB9F                 db  19h
.xdata$x:0000CBA0                 db    7
.xdata$x:0000CBA1                 db    0
.xdata$x:0000CBA2                 db    0
.xdata$x:0000CBA3                 db    0
.xdata$x:0000CBA4                 dd offset __unwindtable$??1_Locinfo@std@@QAE@XZ
.xdata$x:0000CBA8                 align 20h
.xdata$x:0000CBC0 __unwindtable$??1_Locinfo@std@@QAE@XZ db 0FFh
.xdata$x:0000CBC0                                         ; DATA XREF: .xdata$x:0000CBA4o
.xdata$x:0000CBC1                 db 0FFh
.xdata$x:0000CBC2                 db 0FFh
.xdata$x:0000CBC3                 db 0FFh
.xdata$x:0000CBC4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
.xdata$x:0000CBC8                 db    0
.xdata$x:0000CBC9                 db    0
.xdata$x:0000CBCA                 db    0
.xdata$x:0000CBCB                 db    0
.xdata$x:0000CBCC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
.xdata$x:0000CBD0                 db    1
.xdata$x:0000CBD1                 db    0
.xdata$x:0000CBD2                 db    0
.xdata$x:0000CBD3                 db    0
.xdata$x:0000CBD4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
.xdata$x:0000CBD8                 db    2
.xdata$x:0000CBD9                 db    0
.xdata$x:0000CBDA                 db    0
.xdata$x:0000CBDB                 db    0
.xdata$x:0000CBDC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
.xdata$x:0000CBE0                 db    3
.xdata$x:0000CBE1                 db    0
.xdata$x:0000CBE2                 db    0
.xdata$x:0000CBE3                 db    0
.xdata$x:0000CBE4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
.xdata$x:0000CBE8                 db    4
.xdata$x:0000CBE9                 db    0
.xdata$x:0000CBEA                 db    0
.xdata$x:0000CBEB                 db    0
.xdata$x:0000CBEC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5
.xdata$x:0000CBF0                 db    5
.xdata$x:0000CBF1                 db    0
.xdata$x:0000CBF2                 db    0
.xdata$x:0000CBF3                 db    0
.xdata$x:0000CBF4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6
.xdata$x:0000CBF4 _xdata$x        ends
.xdata$x:0000CBF4
.xdata$x:0000CBF8 ; ===========================================================================
.xdata$x:0000CBF8
.xdata$x:0000CBF8 ; Segment type: Pure data
.xdata$x:0000CBF8 ; Segment permissions: Read
.xdata$x:0000CBF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBF8                 assume cs:_xdata$x
.xdata$x:0000CBF8                 ;org 0CBF8h
.xdata$x:0000CBF8 ; COMDAT (pick associative to section at 774C)
.xdata$x:0000CBF8 __unwindtable$??Bid@locale@std@@QAEIXZ db 0FFh
.xdata$x:0000CBF8                                         ; DATA XREF: .xdata$x:0000CC08o
.xdata$x:0000CBF9                 db 0FFh
.xdata$x:0000CBFA                 db 0FFh
.xdata$x:0000CBFB                 db 0FFh
.xdata$x:0000CBFC                 dd offset __unwindfunclet$??Bid@locale@std@@QAEIXZ$0
.xdata$x:0000CC00 __ehfuncinfo$??Bid@locale@std@@QAEIXZ db  22h ; "
.xdata$x:0000CC00                                         ; DATA XREF: __ehhandler$??Bid@locale@std@@QAEIXZ+11o
.xdata$x:0000CC01                 db    5
.xdata$x:0000CC02                 db  93h ; ô
.xdata$x:0000CC03                 db  19h
.xdata$x:0000CC04                 db    1
.xdata$x:0000CC05                 db    0
.xdata$x:0000CC06                 db    0
.xdata$x:0000CC07                 db    0
.xdata$x:0000CC08                 dd offset __unwindtable$??Bid@locale@std@@QAEIXZ
.xdata$x:0000CC0C                 db    0
.xdata$x:0000CC0D                 db    0
.xdata$x:0000CC0E                 db    0
.xdata$x:0000CC0F                 db    0
.xdata$x:0000CC10                 db    0
.xdata$x:0000CC11                 db    0
.xdata$x:0000CC12                 db    0
.xdata$x:0000CC13                 db    0
.xdata$x:0000CC14                 db    0
.xdata$x:0000CC15                 db    0
.xdata$x:0000CC16                 db    0
.xdata$x:0000CC17                 db    0
.xdata$x:0000CC18                 db    0
.xdata$x:0000CC19                 db    0
.xdata$x:0000CC1A                 db    0
.xdata$x:0000CC1B                 db    0
.xdata$x:0000CC1C                 db    0
.xdata$x:0000CC1D                 db    0
.xdata$x:0000CC1E                 db    0
.xdata$x:0000CC1F                 db    0
.xdata$x:0000CC20                 db    0
.xdata$x:0000CC21                 db    0
.xdata$x:0000CC22                 db    0
.xdata$x:0000CC23                 db    0
.xdata$x:0000CC23 _xdata$x        ends
.xdata$x:0000CC23
.xdata$x:0000CC24 ; ===========================================================================
.xdata$x:0000CC24
.xdata$x:0000CC24 ; Segment type: Pure data
.xdata$x:0000CC24 ; Segment permissions: Read
.xdata$x:0000CC24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC24                 assume cs:_xdata$x
.xdata$x:0000CC24                 ;org 0CC24h
.xdata$x:0000CC24 ; COMDAT (pick associative to section at 5FE0)
.xdata$x:0000CC24 __unwindtable$??0facet@locale@std@@IAE@I@Z db 0FFh
.xdata$x:0000CC24                                         ; DATA XREF: .xdata$x:0000CC34o
.xdata$x:0000CC25                 db 0FFh
.xdata$x:0000CC26                 db 0FFh
.xdata$x:0000CC27                 db 0FFh
.xdata$x:0000CC28                 dd offset __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
.xdata$x:0000CC2C __ehfuncinfo$??0facet@locale@std@@IAE@I@Z db  22h ; "
.xdata$x:0000CC2C                                         ; DATA XREF: __ehhandler$??0facet@locale@std@@IAE@I@Z+11o
.xdata$x:0000CC2D                 db    5
.xdata$x:0000CC2E                 db  93h ; ô
.xdata$x:0000CC2F                 db  19h
.xdata$x:0000CC30                 db    1
.xdata$x:0000CC31                 db    0
.xdata$x:0000CC32                 db    0
.xdata$x:0000CC33                 db    0
.xdata$x:0000CC34                 dd offset __unwindtable$??0facet@locale@std@@IAE@I@Z
.xdata$x:0000CC38                 db    0
.xdata$x:0000CC39                 db    0
.xdata$x:0000CC3A                 db    0
.xdata$x:0000CC3B                 db    0
.xdata$x:0000CC3C                 db    0
.xdata$x:0000CC3D                 db    0
.xdata$x:0000CC3E                 db    0
.xdata$x:0000CC3F                 db    0
.xdata$x:0000CC40                 db    0
.xdata$x:0000CC41                 db    0
.xdata$x:0000CC42                 db    0
.xdata$x:0000CC43                 db    0
.xdata$x:0000CC44                 db    0
.xdata$x:0000CC45                 db    0
.xdata$x:0000CC46                 db    0
.xdata$x:0000CC47                 db    0
.xdata$x:0000CC48                 db    0
.xdata$x:0000CC49                 db    0
.xdata$x:0000CC4A                 db    0
.xdata$x:0000CC4B                 db    0
.xdata$x:0000CC4C                 db    0
.xdata$x:0000CC4D                 db    0
.xdata$x:0000CC4E                 db    0
.xdata$x:0000CC4F                 db    0
.xdata$x:0000CC4F _xdata$x        ends
.xdata$x:0000CC4F
.xdata$x:0000CC50 ; ===========================================================================
.xdata$x:0000CC50
.xdata$x:0000CC50 ; Segment type: Pure data
.xdata$x:0000CC50 ; Segment permissions: Read
.xdata$x:0000CC50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC50                 assume cs:_xdata$x
.xdata$x:0000CC50                 ;org 0CC50h
.xdata$x:0000CC50 ; COMDAT (pick associative to section at 72D8)
.xdata$x:0000CC50 __unwindtable$??1facet@locale@std@@MAE@XZ db 0FFh
.xdata$x:0000CC50                                         ; DATA XREF: .xdata$x:0000CC60o
.xdata$x:0000CC51                 db 0FFh
.xdata$x:0000CC52                 db 0FFh
.xdata$x:0000CC53                 db 0FFh
.xdata$x:0000CC54                 dd offset __unwindfunclet$??1facet@locale@std@@MAE@XZ$0
.xdata$x:0000CC58 __ehfuncinfo$??1facet@locale@std@@MAE@XZ db  22h ; "
.xdata$x:0000CC58                                         ; DATA XREF: __ehhandler$??1facet@locale@std@@MAE@XZ+11o
.xdata$x:0000CC59                 db    5
.xdata$x:0000CC5A                 db  93h ; ô
.xdata$x:0000CC5B                 db  19h
.xdata$x:0000CC5C                 db    1
.xdata$x:0000CC5D                 db    0
.xdata$x:0000CC5E                 db    0
.xdata$x:0000CC5F                 db    0
.xdata$x:0000CC60                 dd offset __unwindtable$??1facet@locale@std@@MAE@XZ
.xdata$x:0000CC64                 db    0
.xdata$x:0000CC65                 db    0
.xdata$x:0000CC66                 db    0
.xdata$x:0000CC67                 db    0
.xdata$x:0000CC68                 db    0
.xdata$x:0000CC69                 db    0
.xdata$x:0000CC6A                 db    0
.xdata$x:0000CC6B                 db    0
.xdata$x:0000CC6C                 db    0
.xdata$x:0000CC6D                 db    0
.xdata$x:0000CC6E                 db    0
.xdata$x:0000CC6F                 db    0
.xdata$x:0000CC70                 db    0
.xdata$x:0000CC71                 db    0
.xdata$x:0000CC72                 db    0
.xdata$x:0000CC73                 db    0
.xdata$x:0000CC74                 db    0
.xdata$x:0000CC75                 db    0
.xdata$x:0000CC76                 db    0
.xdata$x:0000CC77                 db    0
.xdata$x:0000CC78                 db    0
.xdata$x:0000CC79                 db    0
.xdata$x:0000CC7A                 db    0
.xdata$x:0000CC7B                 db    0
.xdata$x:0000CC7B _xdata$x        ends
.xdata$x:0000CC7B
.xdata$x:0000CC7C ; ===========================================================================
.xdata$x:0000CC7C
.xdata$x:0000CC7C ; Segment type: Pure data
.xdata$x:0000CC7C ; Segment permissions: Read
.xdata$x:0000CC7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC7C                 assume cs:_xdata$x
.xdata$x:0000CC7C                 ;org 0CC7Ch
.xdata$x:0000CC7C ; COMDAT (pick associative to section at 5EFC)
.xdata$x:0000CC7C __unwindtable$??0ctype_base@std@@QAE@I@Z db 0FFh
.xdata$x:0000CC7C                                         ; DATA XREF: .xdata$x:0000CC8Co
.xdata$x:0000CC7D                 db 0FFh
.xdata$x:0000CC7E                 db 0FFh
.xdata$x:0000CC7F                 db 0FFh
.xdata$x:0000CC80                 dd offset __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0
.xdata$x:0000CC84 __ehfuncinfo$??0ctype_base@std@@QAE@I@Z db  22h ; "
.xdata$x:0000CC84                                         ; DATA XREF: __ehhandler$??0ctype_base@std@@QAE@I@Z+11o
.xdata$x:0000CC85                 db    5
.xdata$x:0000CC86                 db  93h ; ô
.xdata$x:0000CC87                 db  19h
.xdata$x:0000CC88                 db    1
.xdata$x:0000CC89                 db    0
.xdata$x:0000CC8A                 db    0
.xdata$x:0000CC8B                 db    0
.xdata$x:0000CC8C                 dd offset __unwindtable$??0ctype_base@std@@QAE@I@Z
.xdata$x:0000CC90                 db    0
.xdata$x:0000CC91                 db    0
.xdata$x:0000CC92                 db    0
.xdata$x:0000CC93                 db    0
.xdata$x:0000CC94                 db    0
.xdata$x:0000CC95                 db    0
.xdata$x:0000CC96                 db    0
.xdata$x:0000CC97                 db    0
.xdata$x:0000CC98                 db    0
.xdata$x:0000CC99                 db    0
.xdata$x:0000CC9A                 db    0
.xdata$x:0000CC9B                 db    0
.xdata$x:0000CC9C                 db    0
.xdata$x:0000CC9D                 db    0
.xdata$x:0000CC9E                 db    0
.xdata$x:0000CC9F                 db    0
.xdata$x:0000CCA0                 db    0
.xdata$x:0000CCA1                 db    0
.xdata$x:0000CCA2                 db    0
.xdata$x:0000CCA3                 db    0
.xdata$x:0000CCA4                 db    0
.xdata$x:0000CCA5                 db    0
.xdata$x:0000CCA6                 db    0
.xdata$x:0000CCA7                 db    0
.xdata$x:0000CCA7 _xdata$x        ends
.xdata$x:0000CCA7
.xdata$x:0000CCA8 ; ===========================================================================
.xdata$x:0000CCA8
.xdata$x:0000CCA8 ; Segment type: Pure data
.xdata$x:0000CCA8 ; Segment permissions: Read
.xdata$x:0000CCA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CCA8                 assume cs:_xdata$x
.xdata$x:0000CCA8                 ;org 0CCA8h
.xdata$x:0000CCA8 ; COMDAT (pick associative to section at 724C)
.xdata$x:0000CCA8 __unwindtable$??1ctype_base@std@@UAE@XZ db 0FFh
.xdata$x:0000CCA8                                         ; DATA XREF: .xdata$x:0000CCB8o
.xdata$x:0000CCA9                 db 0FFh
.xdata$x:0000CCAA                 db 0FFh
.xdata$x:0000CCAB                 db 0FFh
.xdata$x:0000CCAC                 dd offset __unwindfunclet$??1ctype_base@std@@UAE@XZ$0
.xdata$x:0000CCB0 __ehfuncinfo$??1ctype_base@std@@UAE@XZ db  22h ; "
.xdata$x:0000CCB0                                         ; DATA XREF: __ehhandler$??1ctype_base@std@@UAE@XZ+11o
.xdata$x:0000CCB1                 db    5
.xdata$x:0000CCB2                 db  93h ; ô
.xdata$x:0000CCB3                 db  19h
.xdata$x:0000CCB4                 db    1
.xdata$x:0000CCB5                 db    0
.xdata$x:0000CCB6                 db    0
.xdata$x:0000CCB7                 db    0
.xdata$x:0000CCB8                 dd offset __unwindtable$??1ctype_base@std@@UAE@XZ
.xdata$x:0000CCBC                 db    0
.xdata$x:0000CCBD                 db    0
.xdata$x:0000CCBE                 db    0
.xdata$x:0000CCBF                 db    0
.xdata$x:0000CCC0                 db    0
.xdata$x:0000CCC1                 db    0
.xdata$x:0000CCC2                 db    0
.xdata$x:0000CCC3                 db    0
.xdata$x:0000CCC4                 db    0
.xdata$x:0000CCC5                 db    0
.xdata$x:0000CCC6                 db    0
.xdata$x:0000CCC7                 db    0
.xdata$x:0000CCC8                 db    0
.xdata$x:0000CCC9                 db    0
.xdata$x:0000CCCA                 db    0
.xdata$x:0000CCCB                 db    0
.xdata$x:0000CCCC                 db    0
.xdata$x:0000CCCD                 db    0
.xdata$x:0000CCCE                 db    0
.xdata$x:0000CCCF                 db    0
.xdata$x:0000CCD0                 db    0
.xdata$x:0000CCD1                 db    0
.xdata$x:0000CCD2                 db    0
.xdata$x:0000CCD3                 db    0
.xdata$x:0000CCD3 _xdata$x        ends
.xdata$x:0000CCD3
.xdata$x:0000CCD4 ; ===========================================================================
.xdata$x:0000CCD4
.xdata$x:0000CCD4 ; Segment type: Pure data
.xdata$x:0000CCD4 ; Segment permissions: Read
.xdata$x:0000CCD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CCD4                 assume cs:_xdata$x
.xdata$x:0000CCD4                 ;org 0CCD4h
.xdata$x:0000CCD4 ; COMDAT (pick associative to section at 54B4)
.xdata$x:0000CCD4 __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db 0FFh
.xdata$x:0000CCD4                                         ; DATA XREF: .xdata$x:0000CCE4o
.xdata$x:0000CCD5                 db 0FFh
.xdata$x:0000CCD6                 db 0FFh
.xdata$x:0000CCD7                 db 0FFh
.xdata$x:0000CCD8                 dd offset __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0
.xdata$x:0000CCDC __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db  22h ; "
.xdata$x:0000CCDC                                         ; DATA XREF: __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z+11o
.xdata$x:0000CCDD                 db    5
.xdata$x:0000CCDE                 db  93h ; ô
.xdata$x:0000CCDF                 db  19h
.xdata$x:0000CCE0                 db    1
.xdata$x:0000CCE1                 db    0
.xdata$x:0000CCE2                 db    0
.xdata$x:0000CCE3                 db    0
.xdata$x:0000CCE4                 dd offset __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.xdata$x:0000CCE8                 align 20h
.xdata$x:0000CCE8 _xdata$x        ends
.xdata$x:0000CCE8
.xdata$x:0000CD00 ; ===========================================================================
.xdata$x:0000CD00
.xdata$x:0000CD00 ; Segment type: Pure data
.xdata$x:0000CD00 ; Segment permissions: Read
.xdata$x:0000CD00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD00                 assume cs:_xdata$x
.xdata$x:0000CD00                 ;org 0CD00h
.xdata$x:0000CD00 ; COMDAT (pick associative to section at 8850)
.xdata$x:0000CD00 __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db 0FFh
.xdata$x:0000CD00                                         ; DATA XREF: .xdata$x:0000CD20o
.xdata$x:0000CD01                 db 0FFh
.xdata$x:0000CD02                 db 0FFh
.xdata$x:0000CD03                 db 0FFh
.xdata$x:0000CD04                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
.xdata$x:0000CD08                 db    0
.xdata$x:0000CD09                 db    0
.xdata$x:0000CD0A                 db    0
.xdata$x:0000CD0B                 db    0
.xdata$x:0000CD0C                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000CD10                 db 0FFh
.xdata$x:0000CD11                 db 0FFh
.xdata$x:0000CD12                 db 0FFh
.xdata$x:0000CD13                 db 0FFh
.xdata$x:0000CD14                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000CD18 __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db  22h ; "
.xdata$x:0000CD18                                         ; DATA XREF: __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z+11o
.xdata$x:0000CD19                 db    5
.xdata$x:0000CD1A                 db  93h ; ô
.xdata$x:0000CD1B                 db  19h
.xdata$x:0000CD1C                 db    3
.xdata$x:0000CD1D                 db    0
.xdata$x:0000CD1E                 db    0
.xdata$x:0000CD1F                 db    0
.xdata$x:0000CD20                 dd offset __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.xdata$x:0000CD24                 db    0
.xdata$x:0000CD25                 db    0
.xdata$x:0000CD26                 db    0
.xdata$x:0000CD27                 db    0
.xdata$x:0000CD28                 db    0
.xdata$x:0000CD29                 db    0
.xdata$x:0000CD2A                 db    0
.xdata$x:0000CD2B                 db    0
.xdata$x:0000CD2C                 db    0
.xdata$x:0000CD2D                 db    0
.xdata$x:0000CD2E                 db    0
.xdata$x:0000CD2F                 db    0
.xdata$x:0000CD30                 db    0
.xdata$x:0000CD31                 db    0
.xdata$x:0000CD32                 db    0
.xdata$x:0000CD33                 db    0
.xdata$x:0000CD34                 db    0
.xdata$x:0000CD35                 db    0
.xdata$x:0000CD36                 db    0
.xdata$x:0000CD37                 db    0
.xdata$x:0000CD38                 db    0
.xdata$x:0000CD39                 db    0
.xdata$x:0000CD3A                 db    0
.xdata$x:0000CD3B                 db    0
.xdata$x:0000CD3B _xdata$x        ends
.xdata$x:0000CD3B
.xdata$x:0000CD3C ; ===========================================================================
.xdata$x:0000CD3C
.xdata$x:0000CD3C ; Segment type: Pure data
.xdata$x:0000CD3C ; Segment permissions: Read
.xdata$x:0000CD3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD3C                 assume cs:_xdata$x
.xdata$x:0000CD3C                 ;org 0CD3Ch
.xdata$x:0000CD3C ; COMDAT (pick associative to section at 6AD4)
.xdata$x:0000CD3C __unwindtable$??1?$ctype@_W@std@@MAE@XZ db 0FFh
.xdata$x:0000CD3C                                         ; DATA XREF: .xdata$x:0000CD4Co
.xdata$x:0000CD3D                 db 0FFh
.xdata$x:0000CD3E                 db 0FFh
.xdata$x:0000CD3F                 db 0FFh
.xdata$x:0000CD40                 dd offset __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0
.xdata$x:0000CD44 __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ db  22h ; "
.xdata$x:0000CD44                                         ; DATA XREF: __ehhandler$??1?$ctype@_W@std@@MAE@XZ+11o
.xdata$x:0000CD45                 db    5
.xdata$x:0000CD46                 db  93h ; ô
.xdata$x:0000CD47                 db  19h
.xdata$x:0000CD48                 db    1
.xdata$x:0000CD49                 db    0
.xdata$x:0000CD4A                 db    0
.xdata$x:0000CD4B                 db    0
.xdata$x:0000CD4C                 dd offset __unwindtable$??1?$ctype@_W@std@@MAE@XZ
.xdata$x:0000CD50                 db    0
.xdata$x:0000CD51                 db    0
.xdata$x:0000CD52                 db    0
.xdata$x:0000CD53                 db    0
.xdata$x:0000CD54                 db    0
.xdata$x:0000CD55                 db    0
.xdata$x:0000CD56                 db    0
.xdata$x:0000CD57                 db    0
.xdata$x:0000CD58                 db    0
.xdata$x:0000CD59                 db    0
.xdata$x:0000CD5A                 db    0
.xdata$x:0000CD5B                 db    0
.xdata$x:0000CD5C                 db    0
.xdata$x:0000CD5D                 db    0
.xdata$x:0000CD5E                 db    0
.xdata$x:0000CD5F                 db    0
.xdata$x:0000CD60                 db    0
.xdata$x:0000CD61                 db    0
.xdata$x:0000CD62                 db    0
.xdata$x:0000CD63                 db    0
.xdata$x:0000CD64                 db    0
.xdata$x:0000CD65                 db    0
.xdata$x:0000CD66                 db    0
.xdata$x:0000CD67                 db    0
.xdata$x:0000CD67 _xdata$x        ends
.xdata$x:0000CD67
.xdata$x:0000CD68 ; ===========================================================================
.xdata$x:0000CD68
.xdata$x:0000CD68 ; Segment type: Pure data
.xdata$x:0000CD68 ; Segment permissions: Read
.xdata$x:0000CD68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD68                 assume cs:_xdata$x
.xdata$x:0000CD68                 ;org 0CD68h
.xdata$x:0000CD68 ; COMDAT (pick associative to section at B198)
.xdata$x:0000CD68 __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db 0FFh
.xdata$x:0000CD68                                         ; DATA XREF: .xdata$x:0000CD78o
.xdata$x:0000CD69                 db 0FFh
.xdata$x:0000CD6A                 db 0FFh
.xdata$x:0000CD6B                 db 0FFh
.xdata$x:0000CD6C                 dd offset __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
.xdata$x:0000CD70 __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db  22h ; "
.xdata$x:0000CD70                                         ; DATA XREF: __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ+11o
.xdata$x:0000CD71                 db    5
.xdata$x:0000CD72                 db  93h ; ô
.xdata$x:0000CD73                 db  19h
.xdata$x:0000CD74                 db    1
.xdata$x:0000CD75                 db    0
.xdata$x:0000CD76                 db    0
.xdata$x:0000CD77                 db    0
.xdata$x:0000CD78                 dd offset __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.xdata$x:0000CD7C                 db    0
.xdata$x:0000CD7D                 db    0
.xdata$x:0000CD7E                 db    0
.xdata$x:0000CD7F                 db    0
.xdata$x:0000CD80                 db    0
.xdata$x:0000CD81                 db    0
.xdata$x:0000CD82                 db    0
.xdata$x:0000CD83                 db    0
.xdata$x:0000CD84                 db    0
.xdata$x:0000CD85                 db    0
.xdata$x:0000CD86                 db    0
.xdata$x:0000CD87                 db    0
.xdata$x:0000CD88                 db    0
.xdata$x:0000CD89                 db    0
.xdata$x:0000CD8A                 db    0
.xdata$x:0000CD8B                 db    0
.xdata$x:0000CD8C                 db    0
.xdata$x:0000CD8D                 db    0
.xdata$x:0000CD8E                 db    0
.xdata$x:0000CD8F                 db    0
.xdata$x:0000CD90                 db    0
.xdata$x:0000CD91                 db    0
.xdata$x:0000CD92                 db    0
.xdata$x:0000CD93                 db    0
.xdata$x:0000CD93 _xdata$x        ends
.xdata$x:0000CD93
.xdata$x:0000CD94 ; ===========================================================================
.xdata$x:0000CD94
.xdata$x:0000CD94 ; Segment type: Pure data
.xdata$x:0000CD94 ; Segment permissions: Read
.xdata$x:0000CD94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD94                 assume cs:_xdata$x
.xdata$x:0000CD94                 ;org 0CD94h
.xdata$x:0000CD94 ; COMDAT (pick associative to section at 9034)
.xdata$x:0000CD94 __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db 0FFh
.xdata$x:0000CD94                                         ; DATA XREF: .xdata$x:0000CDB4o
.xdata$x:0000CD95                 db 0FFh
.xdata$x:0000CD96                 db 0FFh
.xdata$x:0000CD97                 db 0FFh
.xdata$x:0000CD98                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2
.xdata$x:0000CD9C                 align 10h
.xdata$x:0000CDA0                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
.xdata$x:0000CDA4                 db    1
.xdata$x:0000CDA5                 db    0
.xdata$x:0000CDA6                 db    0
.xdata$x:0000CDA7                 db    0
.xdata$x:0000CDA8                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
.xdata$x:0000CDAC __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db  22h ; "
.xdata$x:0000CDAC                                         ; DATA XREF: __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+1Bo
.xdata$x:0000CDAD                 db    5
.xdata$x:0000CDAE                 db  93h ; ô
.xdata$x:0000CDAF                 db  19h
.xdata$x:0000CDB0                 db    3
.xdata$x:0000CDB1                 db    0
.xdata$x:0000CDB2                 db    0
.xdata$x:0000CDB3                 db    0
.xdata$x:0000CDB4                 dd offset __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.xdata$x:0000CDB8                 db    0
.xdata$x:0000CDB9                 db    0
.xdata$x:0000CDBA                 db    0
.xdata$x:0000CDBB                 db    0
.xdata$x:0000CDBC                 db    0
.xdata$x:0000CDBD                 db    0
.xdata$x:0000CDBE                 db    0
.xdata$x:0000CDBF                 db    0
.xdata$x:0000CDC0                 db    0
.xdata$x:0000CDC1                 db    0
.xdata$x:0000CDC2                 db    0
.xdata$x:0000CDC3                 db    0
.xdata$x:0000CDC4                 db    0
.xdata$x:0000CDC5                 db    0
.xdata$x:0000CDC6                 db    0
.xdata$x:0000CDC7                 db    0
.xdata$x:0000CDC8                 db    0
.xdata$x:0000CDC9                 db    0
.xdata$x:0000CDCA                 db    0
.xdata$x:0000CDCB                 db    0
.xdata$x:0000CDCC                 db    0
.xdata$x:0000CDCD                 db    0
.xdata$x:0000CDCE                 db    0
.xdata$x:0000CDCF                 db    0
.xdata$x:0000CDCF _xdata$x        ends
.xdata$x:0000CDCF
.xdata$x:0000CDD0 ; ===========================================================================
.xdata$x:0000CDD0
.xdata$x:0000CDD0 ; Segment type: Pure data
.xdata$x:0000CDD0 ; Segment permissions: Read
.xdata$x:0000CDD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CDD0                 assume cs:_xdata$x
.xdata$x:0000CDD0                 ;org 0CDD0h
.xdata$x:0000CDD0 ; COMDAT (pick associative to section at 5CE0)
.xdata$x:0000CDD0 __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:0000CDD0                                         ; DATA XREF: .xdata$x:0000CDF8o
.xdata$x:0000CDD1                 db 0FFh
.xdata$x:0000CDD2                 db 0FFh
.xdata$x:0000CDD3                 db 0FFh
.xdata$x:0000CDD4                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:0000CDD8                 db 0FFh
.xdata$x:0000CDD9                 db 0FFh
.xdata$x:0000CDDA                 db 0FFh
.xdata$x:0000CDDB                 db 0FFh
.xdata$x:0000CDDC                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
.xdata$x:0000CDE0                 db    1
.xdata$x:0000CDE1                 db    0
.xdata$x:0000CDE2                 db    0
.xdata$x:0000CDE3                 db    0
.xdata$x:0000CDE4                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:0000CDE8                 db 0FFh
.xdata$x:0000CDE9                 db 0FFh
.xdata$x:0000CDEA                 db 0FFh
.xdata$x:0000CDEB                 db 0FFh
.xdata$x:0000CDEC                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:0000CDF0 __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:0000CDF0                                         ; DATA XREF: __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+1Bo
.xdata$x:0000CDF1                 db    5
.xdata$x:0000CDF2                 db  93h ; ô
.xdata$x:0000CDF3                 db  19h
.xdata$x:0000CDF4                 db    4
.xdata$x:0000CDF5                 db    0
.xdata$x:0000CDF6                 db    0
.xdata$x:0000CDF7                 db    0
.xdata$x:0000CDF8                 dd offset __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:0000CDFC                 db    0
.xdata$x:0000CDFD                 db    0
.xdata$x:0000CDFE                 db    0
.xdata$x:0000CDFF                 db    0
.xdata$x:0000CE00                 db    0
.xdata$x:0000CE01                 db    0
.xdata$x:0000CE02                 db    0
.xdata$x:0000CE03                 db    0
.xdata$x:0000CE04                 db    0
.xdata$x:0000CE05                 db    0
.xdata$x:0000CE06                 db    0
.xdata$x:0000CE07                 db    0
.xdata$x:0000CE08                 db    0
.xdata$x:0000CE09                 db    0
.xdata$x:0000CE0A                 db    0
.xdata$x:0000CE0B                 db    0
.xdata$x:0000CE0C                 db    0
.xdata$x:0000CE0D                 db    0
.xdata$x:0000CE0E                 db    0
.xdata$x:0000CE0F                 db    0
.xdata$x:0000CE10                 db    0
.xdata$x:0000CE11                 db    0
.xdata$x:0000CE12                 db    0
.xdata$x:0000CE13                 db    0
.xdata$x:0000CE13 _xdata$x        ends
.xdata$x:0000CE13
.xdata$x:0000CE14 ; ===========================================================================
.xdata$x:0000CE14
.xdata$x:0000CE14 ; Segment type: Pure data
.xdata$x:0000CE14 ; Segment permissions: Read
.xdata$x:0000CE14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE14                 assume cs:_xdata$x
.xdata$x:0000CE14                 ;org 0CE14h
.xdata$x:0000CE14 ; COMDAT (pick associative to section at 716C)
.xdata$x:0000CE14 __unwindtable$??1_System_error@std@@UAE@XZ db 0FFh
.xdata$x:0000CE14                                         ; DATA XREF: .xdata$x:0000CE24o
.xdata$x:0000CE15                 db 0FFh
.xdata$x:0000CE16                 db 0FFh
.xdata$x:0000CE17                 db 0FFh
.xdata$x:0000CE18                 dd offset __unwindfunclet$??1_System_error@std@@UAE@XZ$0
.xdata$x:0000CE1C __ehfuncinfo$??1_System_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000CE1C                                         ; DATA XREF: __ehhandler$??1_System_error@std@@UAE@XZ+11o
.xdata$x:0000CE1D                 db    5
.xdata$x:0000CE1E                 db  93h ; ô
.xdata$x:0000CE1F                 db  19h
.xdata$x:0000CE20                 db    1
.xdata$x:0000CE21                 db    0
.xdata$x:0000CE22                 db    0
.xdata$x:0000CE23                 db    0
.xdata$x:0000CE24                 dd offset __unwindtable$??1_System_error@std@@UAE@XZ
.xdata$x:0000CE28                 align 20h
.xdata$x:0000CE28 _xdata$x        ends
.xdata$x:0000CE28
.xdata$x:0000CE40 ; ===========================================================================
.xdata$x:0000CE40
.xdata$x:0000CE40 ; Segment type: Pure data
.xdata$x:0000CE40 ; Segment permissions: Read
.xdata$x:0000CE40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE40                 assume cs:_xdata$x
.xdata$x:0000CE40                 ;org 0CE40h
.xdata$x:0000CE40 ; COMDAT (pick associative to section at 5DEC)
.xdata$x:0000CE40 __unwindtable$??0_System_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CE40                                         ; DATA XREF: .xdata$x:0000CE50o
.xdata$x:0000CE41                 db 0FFh
.xdata$x:0000CE42                 db 0FFh
.xdata$x:0000CE43                 db 0FFh
.xdata$x:0000CE44                 dd offset __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000CE48 __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CE48                                         ; DATA XREF: __ehhandler$??0_System_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CE49                 db    5
.xdata$x:0000CE4A                 db  93h ; ô
.xdata$x:0000CE4B                 db  19h
.xdata$x:0000CE4C                 db    1
.xdata$x:0000CE4D                 db    0
.xdata$x:0000CE4E                 db    0
.xdata$x:0000CE4F                 db    0
.xdata$x:0000CE50                 dd offset __unwindtable$??0_System_error@std@@QAE@ABV01@@Z
.xdata$x:0000CE54                 db    0
.xdata$x:0000CE55                 db    0
.xdata$x:0000CE56                 db    0
.xdata$x:0000CE57                 db    0
.xdata$x:0000CE58                 db    0
.xdata$x:0000CE59                 db    0
.xdata$x:0000CE5A                 db    0
.xdata$x:0000CE5B                 db    0
.xdata$x:0000CE5C                 db    0
.xdata$x:0000CE5D                 db    0
.xdata$x:0000CE5E                 db    0
.xdata$x:0000CE5F                 db    0
.xdata$x:0000CE60                 db    0
.xdata$x:0000CE61                 db    0
.xdata$x:0000CE62                 db    0
.xdata$x:0000CE63                 db    0
.xdata$x:0000CE64                 db    0
.xdata$x:0000CE65                 db    0
.xdata$x:0000CE66                 db    0
.xdata$x:0000CE67                 db    0
.xdata$x:0000CE68                 db    0
.xdata$x:0000CE69                 db    0
.xdata$x:0000CE6A                 db    0
.xdata$x:0000CE6B                 db    0
.xdata$x:0000CE6B _xdata$x        ends
.xdata$x:0000CE6B
.xdata$x:0000CE6C ; ===========================================================================
.xdata$x:0000CE6C
.xdata$x:0000CE6C ; Segment type: Pure data
.xdata$x:0000CE6C ; Segment permissions: Read
.xdata$x:0000CE6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE6C                 assume cs:_xdata$x
.xdata$x:0000CE6C                 ;org 0CE6Ch
.xdata$x:0000CE6C ; COMDAT (pick associative to section at 6504)
.xdata$x:0000CE6C __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z db 0FFh
.xdata$x:0000CE6C                                         ; DATA XREF: .xdata$x:0000CE8Co
.xdata$x:0000CE6D                 db 0FFh
.xdata$x:0000CE6E                 db 0FFh
.xdata$x:0000CE6F                 db 0FFh
.xdata$x:0000CE70                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
.xdata$x:0000CE74                 align 8
.xdata$x:0000CE78                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:0000CE7C                 db 0FFh
.xdata$x:0000CE7D                 db 0FFh
.xdata$x:0000CE7E                 db 0FFh
.xdata$x:0000CE7F                 db 0FFh
.xdata$x:0000CE80                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:0000CE84 __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z db  22h ; "
.xdata$x:0000CE84                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z+1Bo
.xdata$x:0000CE85                 db    5
.xdata$x:0000CE86                 db  93h ; ô
.xdata$x:0000CE87                 db  19h
.xdata$x:0000CE88                 db    3
.xdata$x:0000CE89                 db    0
.xdata$x:0000CE8A                 db    0
.xdata$x:0000CE8B                 db    0
.xdata$x:0000CE8C                 dd offset __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.xdata$x:0000CE90                 db    0
.xdata$x:0000CE91                 db    0
.xdata$x:0000CE92                 db    0
.xdata$x:0000CE93                 db    0
.xdata$x:0000CE94                 db    0
.xdata$x:0000CE95                 db    0
.xdata$x:0000CE96                 db    0
.xdata$x:0000CE97                 db    0
.xdata$x:0000CE98                 db    0
.xdata$x:0000CE99                 db    0
.xdata$x:0000CE9A                 db    0
.xdata$x:0000CE9B                 db    0
.xdata$x:0000CE9C                 db    0
.xdata$x:0000CE9D                 db    0
.xdata$x:0000CE9E                 db    0
.xdata$x:0000CE9F                 db    0
.xdata$x:0000CEA0                 db    0
.xdata$x:0000CEA1                 db    0
.xdata$x:0000CEA2                 db    0
.xdata$x:0000CEA3                 db    0
.xdata$x:0000CEA4                 db    0
.xdata$x:0000CEA5                 db    0
.xdata$x:0000CEA6                 db    0
.xdata$x:0000CEA7                 db    0
.xdata$x:0000CEA7 _xdata$x        ends
.xdata$x:0000CEA7
.xdata$x:0000CEA8 ; ===========================================================================
.xdata$x:0000CEA8
.xdata$x:0000CEA8 ; Segment type: Pure data
.xdata$x:0000CEA8 ; Segment permissions: Read
.xdata$x:0000CEA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CEA8                 assume cs:_xdata$x
.xdata$x:0000CEA8                 ;org 0CEA8h
.xdata$x:0000CEA8 ; COMDAT (pick associative to section at 7508)
.xdata$x:0000CEA8 __unwindtable$??1system_error@std@@UAE@XZ db 0FFh
.xdata$x:0000CEA8                                         ; DATA XREF: .xdata$x:0000CEB8o
.xdata$x:0000CEA9                 db 0FFh
.xdata$x:0000CEAA                 db 0FFh
.xdata$x:0000CEAB                 db 0FFh
.xdata$x:0000CEAC                 dd offset __unwindfunclet$??1system_error@std@@UAE@XZ$0
.xdata$x:0000CEB0 __ehfuncinfo$??1system_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000CEB0                                         ; DATA XREF: __ehhandler$??1system_error@std@@UAE@XZ+11o
.xdata$x:0000CEB1                 db    5
.xdata$x:0000CEB2                 db  93h ; ô
.xdata$x:0000CEB3                 db  19h
.xdata$x:0000CEB4                 db    1
.xdata$x:0000CEB5                 db    0
.xdata$x:0000CEB6                 db    0
.xdata$x:0000CEB7                 db    0
.xdata$x:0000CEB8                 dd offset __unwindtable$??1system_error@std@@UAE@XZ
.xdata$x:0000CEBC                 db    0
.xdata$x:0000CEBD                 db    0
.xdata$x:0000CEBE                 db    0
.xdata$x:0000CEBF                 db    0
.xdata$x:0000CEC0                 db    0
.xdata$x:0000CEC1                 db    0
.xdata$x:0000CEC2                 db    0
.xdata$x:0000CEC3                 db    0
.xdata$x:0000CEC4                 db    0
.xdata$x:0000CEC5                 db    0
.xdata$x:0000CEC6                 db    0
.xdata$x:0000CEC7                 db    0
.xdata$x:0000CEC8                 db    0
.xdata$x:0000CEC9                 db    0
.xdata$x:0000CECA                 db    0
.xdata$x:0000CECB                 db    0
.xdata$x:0000CECC                 db    0
.xdata$x:0000CECD                 db    0
.xdata$x:0000CECE                 db    0
.xdata$x:0000CECF                 db    0
.xdata$x:0000CED0                 db    0
.xdata$x:0000CED1                 db    0
.xdata$x:0000CED2                 db    0
.xdata$x:0000CED3                 db    0
.xdata$x:0000CED3 _xdata$x        ends
.xdata$x:0000CED3
.xdata$x:0000CED4 ; ===========================================================================
.xdata$x:0000CED4
.xdata$x:0000CED4 ; Segment type: Pure data
.xdata$x:0000CED4 ; Segment permissions: Read
.xdata$x:0000CED4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CED4                 assume cs:_xdata$x
.xdata$x:0000CED4                 ;org 0CED4h
.xdata$x:0000CED4 ; COMDAT (pick associative to section at 6480)
.xdata$x:0000CED4 __unwindtable$??0system_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CED4                                         ; DATA XREF: .xdata$x:0000CEE4o
.xdata$x:0000CED5                 db 0FFh
.xdata$x:0000CED6                 db 0FFh
.xdata$x:0000CED7                 db 0FFh
.xdata$x:0000CED8                 dd offset __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000CEDC __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CEDC                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CEDD                 db    5
.xdata$x:0000CEDE                 db  93h ; ô
.xdata$x:0000CEDF                 db  19h
.xdata$x:0000CEE0                 db    1
.xdata$x:0000CEE1                 db    0
.xdata$x:0000CEE2                 db    0
.xdata$x:0000CEE3                 db    0
.xdata$x:0000CEE4                 dd offset __unwindtable$??0system_error@std@@QAE@ABV01@@Z
.xdata$x:0000CEE8                 align 20h
.xdata$x:0000CEE8 _xdata$x        ends
.xdata$x:0000CEE8
.xdata$x:0000CF00 ; ===========================================================================
.xdata$x:0000CF00
.xdata$x:0000CF00 ; Segment type: Pure data
.xdata$x:0000CF00 ; Segment permissions: Read
.xdata$x:0000CF00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF00                 assume cs:_xdata$x
.xdata$x:0000CF00                 ;org 0CF00h
.xdata$x:0000CF00 ; COMDAT (pick associative to section at 5A40)
.xdata$x:0000CF00 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000CF00                                         ; DATA XREF: .xdata$x:0000CF10o
.xdata$x:0000CF01                 db 0FFh
.xdata$x:0000CF02                 db 0FFh
.xdata$x:0000CF03                 db 0FFh
.xdata$x:0000CF04                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000CF08 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000CF08                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000CF09                 db    5
.xdata$x:0000CF0A                 db  93h ; ô
.xdata$x:0000CF0B                 db  19h
.xdata$x:0000CF0C                 db    1
.xdata$x:0000CF0D                 db    0
.xdata$x:0000CF0E                 db    0
.xdata$x:0000CF0F                 db    0
.xdata$x:0000CF10                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000CF14                 db    0
.xdata$x:0000CF15                 db    0
.xdata$x:0000CF16                 db    0
.xdata$x:0000CF17                 db    0
.xdata$x:0000CF18                 db    0
.xdata$x:0000CF19                 db    0
.xdata$x:0000CF1A                 db    0
.xdata$x:0000CF1B                 db    0
.xdata$x:0000CF1C                 db    0
.xdata$x:0000CF1D                 db    0
.xdata$x:0000CF1E                 db    0
.xdata$x:0000CF1F                 db    0
.xdata$x:0000CF20                 db    0
.xdata$x:0000CF21                 db    0
.xdata$x:0000CF22                 db    0
.xdata$x:0000CF23                 db    0
.xdata$x:0000CF24                 db    0
.xdata$x:0000CF25                 db    0
.xdata$x:0000CF26                 db    0
.xdata$x:0000CF27                 db    0
.xdata$x:0000CF28                 db    0
.xdata$x:0000CF29                 db    0
.xdata$x:0000CF2A                 db    0
.xdata$x:0000CF2B                 db    0
.xdata$x:0000CF2B _xdata$x        ends
.xdata$x:0000CF2B
.xdata$x:0000CF2C ; ===========================================================================
.xdata$x:0000CF2C
.xdata$x:0000CF2C ; Segment type: Pure data
.xdata$x:0000CF2C ; Segment permissions: Read
.xdata$x:0000CF2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF2C                 assume cs:_xdata$x
.xdata$x:0000CF2C                 ;org 0CF2Ch
.xdata$x:0000CF2C ; COMDAT (pick associative to section at AF64)
.xdata$x:0000CF2C __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000CF2C                                         ; DATA XREF: .xdata$x:0000CF3Co
.xdata$x:0000CF2D                 db 0FFh
.xdata$x:0000CF2E                 db 0FFh
.xdata$x:0000CF2F                 db 0FFh
.xdata$x:0000CF30                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000CF34 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000CF34                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000CF35                 db    5
.xdata$x:0000CF36                 db  93h ; ô
.xdata$x:0000CF37                 db  19h
.xdata$x:0000CF38                 db    1
.xdata$x:0000CF39                 db    0
.xdata$x:0000CF3A                 db    0
.xdata$x:0000CF3B                 db    0
.xdata$x:0000CF3C                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000CF40                 db    0
.xdata$x:0000CF41                 db    0
.xdata$x:0000CF42                 db    0
.xdata$x:0000CF43                 db    0
.xdata$x:0000CF44                 db    0
.xdata$x:0000CF45                 db    0
.xdata$x:0000CF46                 db    0
.xdata$x:0000CF47                 db    0
.xdata$x:0000CF48                 db    0
.xdata$x:0000CF49                 db    0
.xdata$x:0000CF4A                 db    0
.xdata$x:0000CF4B                 db    0
.xdata$x:0000CF4C                 db    0
.xdata$x:0000CF4D                 db    0
.xdata$x:0000CF4E                 db    0
.xdata$x:0000CF4F                 db    0
.xdata$x:0000CF50                 db    0
.xdata$x:0000CF51                 db    0
.xdata$x:0000CF52                 db    0
.xdata$x:0000CF53                 db    0
.xdata$x:0000CF54                 db    0
.xdata$x:0000CF55                 db    0
.xdata$x:0000CF56                 db    0
.xdata$x:0000CF57                 db    0
.xdata$x:0000CF57 _xdata$x        ends
.xdata$x:0000CF57
.xdata$x:0000CF58 ; ===========================================================================
.xdata$x:0000CF58
.xdata$x:0000CF58 ; Segment type: Pure data
.xdata$x:0000CF58 ; Segment permissions: Read
.xdata$x:0000CF58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF58                 assume cs:_xdata$x
.xdata$x:0000CF58                 ;org 0CF58h
.xdata$x:0000CF58 ; COMDAT (pick associative to section at 6F1C)
.xdata$x:0000CF58 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000CF58                                         ; DATA XREF: .xdata$x:0000CF68o
.xdata$x:0000CF59                 db 0FFh
.xdata$x:0000CF5A                 db 0FFh
.xdata$x:0000CF5B                 db 0FFh
.xdata$x:0000CF5C                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000CF60 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000CF60                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000CF61                 db    5
.xdata$x:0000CF62                 db  93h ; ô
.xdata$x:0000CF63                 db  19h
.xdata$x:0000CF64                 db    1
.xdata$x:0000CF65                 db    0
.xdata$x:0000CF66                 db    0
.xdata$x:0000CF67                 db    0
.xdata$x:0000CF68                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000CF6C                 db    0
.xdata$x:0000CF6D                 db    0
.xdata$x:0000CF6E                 db    0
.xdata$x:0000CF6F                 db    0
.xdata$x:0000CF70                 db    0
.xdata$x:0000CF71                 db    0
.xdata$x:0000CF72                 db    0
.xdata$x:0000CF73                 db    0
.xdata$x:0000CF74                 db    0
.xdata$x:0000CF75                 db    0
.xdata$x:0000CF76                 db    0
.xdata$x:0000CF77                 db    0
.xdata$x:0000CF78                 db    0
.xdata$x:0000CF79                 db    0
.xdata$x:0000CF7A                 db    0
.xdata$x:0000CF7B                 db    0
.xdata$x:0000CF7C                 db    0
.xdata$x:0000CF7D                 db    0
.xdata$x:0000CF7E                 db    0
.xdata$x:0000CF7F                 db    0
.xdata$x:0000CF80                 db    0
.xdata$x:0000CF81                 db    0
.xdata$x:0000CF82                 db    0
.xdata$x:0000CF83                 db    0
.xdata$x:0000CF83 _xdata$x        ends
.xdata$x:0000CF83
.xdata$x:0000CF84 ; ===========================================================================
.xdata$x:0000CF84
.xdata$x:0000CF84 ; Segment type: Pure data
.xdata$x:0000CF84 ; Segment permissions: Read
.xdata$x:0000CF84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF84                 assume cs:_xdata$x
.xdata$x:0000CF84                 ;org 0CF84h
.xdata$x:0000CF84 ; COMDAT (pick associative to section at 5ABC)
.xdata$x:0000CF84 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000CF84                                         ; DATA XREF: .xdata$x:0000CF94o
.xdata$x:0000CF85                 db 0FFh
.xdata$x:0000CF86                 db 0FFh
.xdata$x:0000CF87                 db 0FFh
.xdata$x:0000CF88                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000CF8C __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000CF8C                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000CF8D                 db    5
.xdata$x:0000CF8E                 db  93h ; ô
.xdata$x:0000CF8F                 db  19h
.xdata$x:0000CF90                 db    1
.xdata$x:0000CF91                 db    0
.xdata$x:0000CF92                 db    0
.xdata$x:0000CF93                 db    0
.xdata$x:0000CF94                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000CF98                 db    0
.xdata$x:0000CF99                 db    0
.xdata$x:0000CF9A                 db    0
.xdata$x:0000CF9B                 db    0
.xdata$x:0000CF9C                 db    0
.xdata$x:0000CF9D                 db    0
.xdata$x:0000CF9E                 db    0
.xdata$x:0000CF9F                 db    0
.xdata$x:0000CFA0                 db    0
.xdata$x:0000CFA1                 db    0
.xdata$x:0000CFA2                 db    0
.xdata$x:0000CFA3                 db    0
.xdata$x:0000CFA4                 db    0
.xdata$x:0000CFA5                 db    0
.xdata$x:0000CFA6                 db    0
.xdata$x:0000CFA7                 db    0
.xdata$x:0000CFA8                 db    0
.xdata$x:0000CFA9                 db    0
.xdata$x:0000CFAA                 db    0
.xdata$x:0000CFAB                 db    0
.xdata$x:0000CFAC                 db    0
.xdata$x:0000CFAD                 db    0
.xdata$x:0000CFAE                 db    0
.xdata$x:0000CFAF                 db    0
.xdata$x:0000CFAF _xdata$x        ends
.xdata$x:0000CFAF
.xdata$x:0000CFB0 ; ===========================================================================
.xdata$x:0000CFB0
.xdata$x:0000CFB0 ; Segment type: Pure data
.xdata$x:0000CFB0 ; Segment permissions: Read
.xdata$x:0000CFB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFB0                 assume cs:_xdata$x
.xdata$x:0000CFB0                 ;org 0CFB0h
.xdata$x:0000CFB0 ; COMDAT (pick associative to section at B01C)
.xdata$x:0000CFB0 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000CFB0                                         ; DATA XREF: .xdata$x:0000CFC0o
.xdata$x:0000CFB1                 db 0FFh
.xdata$x:0000CFB2                 db 0FFh
.xdata$x:0000CFB3                 db 0FFh
.xdata$x:0000CFB4                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000CFB8 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000CFB8                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000CFB9                 db    5
.xdata$x:0000CFBA                 db  93h ; ô
.xdata$x:0000CFBB                 db  19h
.xdata$x:0000CFBC                 db    1
.xdata$x:0000CFBD                 db    0
.xdata$x:0000CFBE                 db    0
.xdata$x:0000CFBF                 db    0
.xdata$x:0000CFC0                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000CFC4                 db    0
.xdata$x:0000CFC5                 db    0
.xdata$x:0000CFC6                 db    0
.xdata$x:0000CFC7                 db    0
.xdata$x:0000CFC8                 db    0
.xdata$x:0000CFC9                 db    0
.xdata$x:0000CFCA                 db    0
.xdata$x:0000CFCB                 db    0
.xdata$x:0000CFCC                 db    0
.xdata$x:0000CFCD                 db    0
.xdata$x:0000CFCE                 db    0
.xdata$x:0000CFCF                 db    0
.xdata$x:0000CFD0                 db    0
.xdata$x:0000CFD1                 db    0
.xdata$x:0000CFD2                 db    0
.xdata$x:0000CFD3                 db    0
.xdata$x:0000CFD4                 db    0
.xdata$x:0000CFD5                 db    0
.xdata$x:0000CFD6                 db    0
.xdata$x:0000CFD7                 db    0
.xdata$x:0000CFD8                 db    0
.xdata$x:0000CFD9                 db    0
.xdata$x:0000CFDA                 db    0
.xdata$x:0000CFDB                 db    0
.xdata$x:0000CFDB _xdata$x        ends
.xdata$x:0000CFDB
.xdata$x:0000CFDC ; ===========================================================================
.xdata$x:0000CFDC
.xdata$x:0000CFDC ; Segment type: Pure data
.xdata$x:0000CFDC ; Segment permissions: Read
.xdata$x:0000CFDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFDC                 assume cs:_xdata$x
.xdata$x:0000CFDC                 ;org 0CFDCh
.xdata$x:0000CFDC ; COMDAT (pick associative to section at 6F8C)
.xdata$x:0000CFDC __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000CFDC                                         ; DATA XREF: .xdata$x:0000CFECo
.xdata$x:0000CFDD                 db 0FFh
.xdata$x:0000CFDE                 db 0FFh
.xdata$x:0000CFDF                 db 0FFh
.xdata$x:0000CFE0                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000CFE4 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000CFE4                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000CFE5                 db    5
.xdata$x:0000CFE6                 db  93h ; ô
.xdata$x:0000CFE7                 db  19h
.xdata$x:0000CFE8                 db    1
.xdata$x:0000CFE9                 db    0
.xdata$x:0000CFEA                 db    0
.xdata$x:0000CFEB                 db    0
.xdata$x:0000CFEC                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000CFF0                 db    0
.xdata$x:0000CFF1                 db    0
.xdata$x:0000CFF2                 db    0
.xdata$x:0000CFF3                 db    0
.xdata$x:0000CFF4                 db    0
.xdata$x:0000CFF5                 db    0
.xdata$x:0000CFF6                 db    0
.xdata$x:0000CFF7                 db    0
.xdata$x:0000CFF8                 db    0
.xdata$x:0000CFF9                 db    0
.xdata$x:0000CFFA                 db    0
.xdata$x:0000CFFB                 db    0
.xdata$x:0000CFFC                 db    0
.xdata$x:0000CFFD                 db    0
.xdata$x:0000CFFE                 db    0
.xdata$x:0000CFFF                 db    0
.xdata$x:0000D000                 db    0
.xdata$x:0000D001                 db    0
.xdata$x:0000D002                 db    0
.xdata$x:0000D003                 db    0
.xdata$x:0000D004                 db    0
.xdata$x:0000D005                 db    0
.xdata$x:0000D006                 db    0
.xdata$x:0000D007                 db    0
.xdata$x:0000D007 _xdata$x        ends
.xdata$x:0000D007
.xdata$x:0000D008 ; ===========================================================================
.xdata$x:0000D008
.xdata$x:0000D008 ; Segment type: Pure data
.xdata$x:0000D008 ; Segment permissions: Read
.xdata$x:0000D008 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D008                 assume cs:_xdata$x
.xdata$x:0000D008                 ;org 0D008h
.xdata$x:0000D008 ; COMDAT (pick associative to section at 5E80)
.xdata$x:0000D008 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000D008                                         ; DATA XREF: .xdata$x:0000D018o
.xdata$x:0000D009                 db 0FFh
.xdata$x:0000D00A                 db 0FFh
.xdata$x:0000D00B                 db 0FFh
.xdata$x:0000D00C                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000D010 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000D010                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000D011                 db    5
.xdata$x:0000D012                 db  93h ; ô
.xdata$x:0000D013                 db  19h
.xdata$x:0000D014                 db    1
.xdata$x:0000D015                 db    0
.xdata$x:0000D016                 db    0
.xdata$x:0000D017                 db    0
.xdata$x:0000D018                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000D01C                 db    0
.xdata$x:0000D01D                 db    0
.xdata$x:0000D01E                 db    0
.xdata$x:0000D01F                 db    0
.xdata$x:0000D020                 db    0
.xdata$x:0000D021                 db    0
.xdata$x:0000D022                 db    0
.xdata$x:0000D023                 db    0
.xdata$x:0000D024                 db    0
.xdata$x:0000D025                 db    0
.xdata$x:0000D026                 db    0
.xdata$x:0000D027                 db    0
.xdata$x:0000D028                 db    0
.xdata$x:0000D029                 db    0
.xdata$x:0000D02A                 db    0
.xdata$x:0000D02B                 db    0
.xdata$x:0000D02C                 db    0
.xdata$x:0000D02D                 db    0
.xdata$x:0000D02E                 db    0
.xdata$x:0000D02F                 db    0
.xdata$x:0000D030                 db    0
.xdata$x:0000D031                 db    0
.xdata$x:0000D032                 db    0
.xdata$x:0000D033                 db    0
.xdata$x:0000D033 _xdata$x        ends
.xdata$x:0000D033
.xdata$x:0000D034 ; ===========================================================================
.xdata$x:0000D034
.xdata$x:0000D034 ; Segment type: Pure data
.xdata$x:0000D034 ; Segment permissions: Read
.xdata$x:0000D034 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D034                 assume cs:_xdata$x
.xdata$x:0000D034                 ;org 0D034h
.xdata$x:0000D034 ; COMDAT (pick associative to section at B0E0)
.xdata$x:0000D034 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000D034                                         ; DATA XREF: .xdata$x:0000D044o
.xdata$x:0000D035                 db 0FFh
.xdata$x:0000D036                 db 0FFh
.xdata$x:0000D037                 db 0FFh
.xdata$x:0000D038                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000D03C __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000D03C                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000D03D                 db    5
.xdata$x:0000D03E                 db  93h ; ô
.xdata$x:0000D03F                 db  19h
.xdata$x:0000D040                 db    1
.xdata$x:0000D041                 db    0
.xdata$x:0000D042                 db    0
.xdata$x:0000D043                 db    0
.xdata$x:0000D044                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000D048                 align 20h
.xdata$x:0000D048 _xdata$x        ends
.xdata$x:0000D048
.xdata$x:0000D060 ; ===========================================================================
.xdata$x:0000D060
.xdata$x:0000D060 ; Segment type: Pure data
.xdata$x:0000D060 ; Segment permissions: Read
.xdata$x:0000D060 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D060                 assume cs:_xdata$x
.xdata$x:0000D060                 ;org 0D060h
.xdata$x:0000D060 ; COMDAT (pick associative to section at 71DC)
.xdata$x:0000D060 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000D060                                         ; DATA XREF: .xdata$x:0000D070o
.xdata$x:0000D061                 db 0FFh
.xdata$x:0000D062                 db 0FFh
.xdata$x:0000D063                 db 0FFh
.xdata$x:0000D064                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000D068 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000D068                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000D069                 db    5
.xdata$x:0000D06A                 db  93h ; ô
.xdata$x:0000D06B                 db  19h
.xdata$x:0000D06C                 db    1
.xdata$x:0000D06D                 db    0
.xdata$x:0000D06E                 db    0
.xdata$x:0000D06F                 db    0
.xdata$x:0000D070                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000D074                 db    0
.xdata$x:0000D075                 db    0
.xdata$x:0000D076                 db    0
.xdata$x:0000D077                 db    0
.xdata$x:0000D078                 db    0
.xdata$x:0000D079                 db    0
.xdata$x:0000D07A                 db    0
.xdata$x:0000D07B                 db    0
.xdata$x:0000D07C                 db    0
.xdata$x:0000D07D                 db    0
.xdata$x:0000D07E                 db    0
.xdata$x:0000D07F                 db    0
.xdata$x:0000D080                 db    0
.xdata$x:0000D081                 db    0
.xdata$x:0000D082                 db    0
.xdata$x:0000D083                 db    0
.xdata$x:0000D084                 db    0
.xdata$x:0000D085                 db    0
.xdata$x:0000D086                 db    0
.xdata$x:0000D087                 db    0
.xdata$x:0000D088                 db    0
.xdata$x:0000D089                 db    0
.xdata$x:0000D08A                 db    0
.xdata$x:0000D08B                 db    0
.xdata$x:0000D08B _xdata$x        ends
.xdata$x:0000D08B
.xdata$x:0000D08C ; ===========================================================================
.xdata$x:0000D08C
.xdata$x:0000D08C ; Segment type: Pure data
.xdata$x:0000D08C ; Segment permissions: Read
.xdata$x:0000D08C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D08C                 assume cs:_xdata$x
.xdata$x:0000D08C                 ;org 0D08Ch
.xdata$x:0000D08C ; COMDAT (pick associative to section at 60F4)
.xdata$x:0000D08C __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db 0FFh
.xdata$x:0000D08C                                         ; DATA XREF: .xdata$x:0000D09Co
.xdata$x:0000D08D                 db 0FFh
.xdata$x:0000D08E                 db 0FFh
.xdata$x:0000D08F                 db 0FFh
.xdata$x:0000D090                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
.xdata$x:0000D094 __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db  22h ; "
.xdata$x:0000D094                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z+11o
.xdata$x:0000D095                 db    5
.xdata$x:0000D096                 db  93h ; ô
.xdata$x:0000D097                 db  19h
.xdata$x:0000D098                 db    1
.xdata$x:0000D099                 db    0
.xdata$x:0000D09A                 db    0
.xdata$x:0000D09B                 db    0
.xdata$x:0000D09C                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.xdata$x:0000D0A0                 db    0
.xdata$x:0000D0A1                 db    0
.xdata$x:0000D0A2                 db    0
.xdata$x:0000D0A3                 db    0
.xdata$x:0000D0A4                 db    0
.xdata$x:0000D0A5                 db    0
.xdata$x:0000D0A6                 db    0
.xdata$x:0000D0A7                 db    0
.xdata$x:0000D0A8                 db    0
.xdata$x:0000D0A9                 db    0
.xdata$x:0000D0AA                 db    0
.xdata$x:0000D0AB                 db    0
.xdata$x:0000D0AC                 db    0
.xdata$x:0000D0AD                 db    0
.xdata$x:0000D0AE                 db    0
.xdata$x:0000D0AF                 db    0
.xdata$x:0000D0B0                 db    0
.xdata$x:0000D0B1                 db    0
.xdata$x:0000D0B2                 db    0
.xdata$x:0000D0B3                 db    0
.xdata$x:0000D0B4                 db    0
.xdata$x:0000D0B5                 db    0
.xdata$x:0000D0B6                 db    0
.xdata$x:0000D0B7                 db    0
.xdata$x:0000D0B7 _xdata$x        ends
.xdata$x:0000D0B7
.xdata$x:0000D0B8 ; ===========================================================================
.xdata$x:0000D0B8
.xdata$x:0000D0B8 ; Segment type: Pure data
.xdata$x:0000D0B8 ; Segment permissions: Read
.xdata$x:0000D0B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D0B8                 assume cs:_xdata$x
.xdata$x:0000D0B8                 ;org 0D0B8h
.xdata$x:0000D0B8 ; COMDAT (pick associative to section at 7350)
.xdata$x:0000D0B8 __unwindtable$??1failure@ios_base@std@@UAE@XZ db 0FFh
.xdata$x:0000D0B8                                         ; DATA XREF: .xdata$x:0000D0C8o
.xdata$x:0000D0B9                 db 0FFh
.xdata$x:0000D0BA                 db 0FFh
.xdata$x:0000D0BB                 db 0FFh
.xdata$x:0000D0BC                 dd offset __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0
.xdata$x:0000D0C0 __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ db  22h ; "
.xdata$x:0000D0C0                                         ; DATA XREF: __ehhandler$??1failure@ios_base@std@@UAE@XZ+11o
.xdata$x:0000D0C1                 db    5
.xdata$x:0000D0C2                 db  93h ; ô
.xdata$x:0000D0C3                 db  19h
.xdata$x:0000D0C4                 db    1
.xdata$x:0000D0C5                 db    0
.xdata$x:0000D0C6                 db    0
.xdata$x:0000D0C7                 db    0
.xdata$x:0000D0C8                 dd offset __unwindtable$??1failure@ios_base@std@@UAE@XZ
.xdata$x:0000D0CC                 db    0
.xdata$x:0000D0CD                 db    0
.xdata$x:0000D0CE                 db    0
.xdata$x:0000D0CF                 db    0
.xdata$x:0000D0D0                 db    0
.xdata$x:0000D0D1                 db    0
.xdata$x:0000D0D2                 db    0
.xdata$x:0000D0D3                 db    0
.xdata$x:0000D0D4                 db    0
.xdata$x:0000D0D5                 db    0
.xdata$x:0000D0D6                 db    0
.xdata$x:0000D0D7                 db    0
.xdata$x:0000D0D8                 db    0
.xdata$x:0000D0D9                 db    0
.xdata$x:0000D0DA                 db    0
.xdata$x:0000D0DB                 db    0
.xdata$x:0000D0DC                 db    0
.xdata$x:0000D0DD                 db    0
.xdata$x:0000D0DE                 db    0
.xdata$x:0000D0DF                 db    0
.xdata$x:0000D0E0                 db    0
.xdata$x:0000D0E1                 db    0
.xdata$x:0000D0E2                 db    0
.xdata$x:0000D0E3                 db    0
.xdata$x:0000D0E3 _xdata$x        ends
.xdata$x:0000D0E3
.xdata$x:0000D0E4 ; ===========================================================================
.xdata$x:0000D0E4
.xdata$x:0000D0E4 ; Segment type: Pure data
.xdata$x:0000D0E4 ; Segment permissions: Read
.xdata$x:0000D0E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D0E4                 assume cs:_xdata$x
.xdata$x:0000D0E4                 ;org 0D0E4h
.xdata$x:0000D0E4 ; COMDAT (pick associative to section at 6070)
.xdata$x:0000D0E4 __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z db 0FFh
.xdata$x:0000D0E4                                         ; DATA XREF: .xdata$x:0000D0F4o
.xdata$x:0000D0E5                 db 0FFh
.xdata$x:0000D0E6                 db 0FFh
.xdata$x:0000D0E7                 db 0FFh
.xdata$x:0000D0E8                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0
.xdata$x:0000D0EC __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z db  22h ; "
.xdata$x:0000D0EC                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z+11o
.xdata$x:0000D0ED                 db    5
.xdata$x:0000D0EE                 db  93h ; ô
.xdata$x:0000D0EF                 db  19h
.xdata$x:0000D0F0                 db    1
.xdata$x:0000D0F1                 db    0
.xdata$x:0000D0F2                 db    0
.xdata$x:0000D0F3                 db    0
.xdata$x:0000D0F4                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z
.xdata$x:0000D0F8                 db    0
.xdata$x:0000D0F9                 db    0
.xdata$x:0000D0FA                 db    0
.xdata$x:0000D0FB                 db    0
.xdata$x:0000D0FC                 db    0
.xdata$x:0000D0FD                 db    0
.xdata$x:0000D0FE                 db    0
.xdata$x:0000D0FF                 db    0
.xdata$x:0000D100                 db    0
.xdata$x:0000D101                 db    0
.xdata$x:0000D102                 db    0
.xdata$x:0000D103                 db    0
.xdata$x:0000D104                 db    0
.xdata$x:0000D105                 db    0
.xdata$x:0000D106                 db    0
.xdata$x:0000D107                 db    0
.xdata$x:0000D108                 db    0
.xdata$x:0000D109                 db    0
.xdata$x:0000D10A                 db    0
.xdata$x:0000D10B                 db    0
.xdata$x:0000D10C                 db    0
.xdata$x:0000D10D                 db    0
.xdata$x:0000D10E                 db    0
.xdata$x:0000D10F                 db    0
.xdata$x:0000D10F _xdata$x        ends
.xdata$x:0000D10F
.xdata$x:0000D110 ; ===========================================================================
.xdata$x:0000D110
.xdata$x:0000D110 ; Segment type: Pure data
.xdata$x:0000D110 ; Segment permissions: Read
.xdata$x:0000D110 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D110                 assume cs:_xdata$x
.xdata$x:0000D110                 ;org 0D110h
.xdata$x:0000D110 ; COMDAT (pick associative to section at AC68)
.xdata$x:0000D110 __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db 0FFh
.xdata$x:0000D110                                         ; DATA XREF: .xdata$x:0000D120o
.xdata$x:0000D111                 db 0FFh
.xdata$x:0000D112                 db 0FFh
.xdata$x:0000D113                 db 0FFh
.xdata$x:0000D114                 dd offset __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0
.xdata$x:0000D118 __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db  22h ; "
.xdata$x:0000D118                                         ; DATA XREF: __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ+11o
.xdata$x:0000D119                 db    5
.xdata$x:0000D11A                 db  93h ; ô
.xdata$x:0000D11B                 db  19h
.xdata$x:0000D11C                 db    1
.xdata$x:0000D11D                 db    0
.xdata$x:0000D11E                 db    0
.xdata$x:0000D11F                 db    0
.xdata$x:0000D120                 dd offset __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.xdata$x:0000D124                 db    0
.xdata$x:0000D125                 db    0
.xdata$x:0000D126                 db    0
.xdata$x:0000D127                 db    0
.xdata$x:0000D128                 db    0
.xdata$x:0000D129                 db    0
.xdata$x:0000D12A                 db    0
.xdata$x:0000D12B                 db    0
.xdata$x:0000D12C                 db    0
.xdata$x:0000D12D                 db    0
.xdata$x:0000D12E                 db    0
.xdata$x:0000D12F                 db    0
.xdata$x:0000D130                 db    0
.xdata$x:0000D131                 db    0
.xdata$x:0000D132                 db    0
.xdata$x:0000D133                 db    0
.xdata$x:0000D134                 db    0
.xdata$x:0000D135                 db    0
.xdata$x:0000D136                 db    0
.xdata$x:0000D137                 db    0
.xdata$x:0000D138                 db    0
.xdata$x:0000D139                 db    0
.xdata$x:0000D13A                 db    0
.xdata$x:0000D13B                 db    0
.xdata$x:0000D13B _xdata$x        ends
.xdata$x:0000D13B
.xdata$x:0000D13C ; ===========================================================================
.xdata$x:0000D13C
.xdata$x:0000D13C ; Segment type: Pure data
.xdata$x:0000D13C ; Segment permissions: Read
.xdata$x:0000D13C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D13C                 assume cs:_xdata$x
.xdata$x:0000D13C                 ;org 0D13Ch
.xdata$x:0000D13C ; COMDAT (pick associative to section at 67C0)
.xdata$x:0000D13C __unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ db 0FFh
.xdata$x:0000D13C                                         ; DATA XREF: .xdata$x:0000D14Co
.xdata$x:0000D13D                 db 0FFh
.xdata$x:0000D13E                 db 0FFh
.xdata$x:0000D13F                 db 0FFh
.xdata$x:0000D140                 dd offset __unwindfunclet$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ$0
.xdata$x:0000D144 __ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ db  22h ; "
.xdata$x:0000D144                                         ; DATA XREF: __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ+11o
.xdata$x:0000D145                 db    5
.xdata$x:0000D146                 db  93h ; ô
.xdata$x:0000D147                 db  19h
.xdata$x:0000D148                 db    1
.xdata$x:0000D149                 db    0
.xdata$x:0000D14A                 db    0
.xdata$x:0000D14B                 db    0
.xdata$x:0000D14C                 dd offset __unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
.xdata$x:0000D150                 db    0
.xdata$x:0000D151                 db    0
.xdata$x:0000D152                 db    0
.xdata$x:0000D153                 db    0
.xdata$x:0000D154                 db    0
.xdata$x:0000D155                 db    0
.xdata$x:0000D156                 db    0
.xdata$x:0000D157                 db    0
.xdata$x:0000D158                 db    0
.xdata$x:0000D159                 db    0
.xdata$x:0000D15A                 db    0
.xdata$x:0000D15B                 db    0
.xdata$x:0000D15C                 db    0
.xdata$x:0000D15D                 db    0
.xdata$x:0000D15E                 db    0
.xdata$x:0000D15F                 db    0
.xdata$x:0000D160                 db    0
.xdata$x:0000D161                 db    0
.xdata$x:0000D162                 db    0
.xdata$x:0000D163                 db    0
.xdata$x:0000D164                 db    0
.xdata$x:0000D165                 db    0
.xdata$x:0000D166                 db    0
.xdata$x:0000D167                 db    0
.xdata$x:0000D167 _xdata$x        ends
.xdata$x:0000D167
.xdata$x:0000D168 ; ===========================================================================
.xdata$x:0000D168
.xdata$x:0000D168 ; Segment type: Pure data
.xdata$x:0000D168 ; Segment permissions: Read
.xdata$x:0000D168 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D168                 assume cs:_xdata$x
.xdata$x:0000D168                 ;org 0D168h
.xdata$x:0000D168 ; COMDAT (pick associative to section at C3CC)
.xdata$x:0000D168 __unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z db 0FFh
.xdata$x:0000D168                                         ; DATA XREF: .xdata$x:0000D178o
.xdata$x:0000D169                 db 0FFh
.xdata$x:0000D16A                 db 0FFh
.xdata$x:0000D16B                 db 0FFh
.xdata$x:0000D16C                 dd offset __unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
.xdata$x:0000D170 __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z db  22h ; "
.xdata$x:0000D170                                         ; DATA XREF: __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z+11o
.xdata$x:0000D171                 db    5
.xdata$x:0000D172                 db  93h ; ô
.xdata$x:0000D173                 db  19h
.xdata$x:0000D174                 db    1
.xdata$x:0000D175                 db    0
.xdata$x:0000D176                 db    0
.xdata$x:0000D177                 db    0
.xdata$x:0000D178                 dd offset __unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
.xdata$x:0000D17C                 db    0
.xdata$x:0000D17D                 db    0
.xdata$x:0000D17E                 db    0
.xdata$x:0000D17F                 db    0
.xdata$x:0000D180                 db    0
.xdata$x:0000D181                 db    0
.xdata$x:0000D182                 db    0
.xdata$x:0000D183                 db    0
.xdata$x:0000D184                 db    0
.xdata$x:0000D185                 db    0
.xdata$x:0000D186                 db    0
.xdata$x:0000D187                 db    0
.xdata$x:0000D188                 db    0
.xdata$x:0000D189                 db    0
.xdata$x:0000D18A                 db    0
.xdata$x:0000D18B                 db    0
.xdata$x:0000D18C                 db    0
.xdata$x:0000D18D                 db    0
.xdata$x:0000D18E                 db    0
.xdata$x:0000D18F                 db    0
.xdata$x:0000D190                 db    0
.xdata$x:0000D191                 db    0
.xdata$x:0000D192                 db    0
.xdata$x:0000D193                 db    0
.xdata$x:0000D193 _xdata$x        ends
.xdata$x:0000D193
.xdata$x:0000D194 ; ===========================================================================
.xdata$x:0000D194
.xdata$x:0000D194 ; Segment type: Pure data
.xdata$x:0000D194 ; Segment permissions: Read
.xdata$x:0000D194 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D194                 assume cs:_xdata$x
.xdata$x:0000D194                 ;org 0D194h
.xdata$x:0000D194 ; COMDAT (pick associative to section at 4C20)
.xdata$x:0000D194 __unwindtable$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ db 0FFh
.xdata$x:0000D194                                         ; DATA XREF: .xdata$x:0000D1A4o
.xdata$x:0000D195                 db 0FFh
.xdata$x:0000D196                 db 0FFh
.xdata$x:0000D197                 db 0FFh
.xdata$x:0000D198                 dd offset __unwindfunclet$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
.xdata$x:0000D19C __ehfuncinfo$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ db  22h ; "
.xdata$x:0000D19C                                         ; DATA XREF: __ehhandler$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ+11o
.xdata$x:0000D19D                 db    5
.xdata$x:0000D19E                 db  93h ; ô
.xdata$x:0000D19F                 db  19h
.xdata$x:0000D1A0                 db    1
.xdata$x:0000D1A1                 db    0
.xdata$x:0000D1A2                 db    0
.xdata$x:0000D1A3                 db    0
.xdata$x:0000D1A4                 dd offset __unwindtable$??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
.xdata$x:0000D1A8                 align 20h
.xdata$x:0000D1A8 _xdata$x        ends
.xdata$x:0000D1A8
.xdata$x:0000D1C0 ; ===========================================================================
.xdata$x:0000D1C0
.xdata$x:0000D1C0 ; Segment type: Pure data
.xdata$x:0000D1C0 ; Segment permissions: Read
.xdata$x:0000D1C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D1C0                 assume cs:_xdata$x
.xdata$x:0000D1C0                 ;org 0D1C0h
.xdata$x:0000D1C0 ; COMDAT (pick associative to section at 4804)
.xdata$x:0000D1C0 __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db 0FFh
.xdata$x:0000D1C0                                         ; DATA XREF: .xdata$x:0000D1D0o
.xdata$x:0000D1C1                 db 0FFh
.xdata$x:0000D1C2                 db 0FFh
.xdata$x:0000D1C3                 db 0FFh
.xdata$x:0000D1C4                 dd offset __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
.xdata$x:0000D1C8 __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db  22h ; "
.xdata$x:0000D1C8                                         ; DATA XREF: __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z+11o
.xdata$x:0000D1C9                 db    5
.xdata$x:0000D1CA                 db  93h ; ô
.xdata$x:0000D1CB                 db  19h
.xdata$x:0000D1CC                 db    1
.xdata$x:0000D1CD                 db    0
.xdata$x:0000D1CE                 db    0
.xdata$x:0000D1CF                 db    0
.xdata$x:0000D1D0                 dd offset __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.xdata$x:0000D1D4                 db    0
.xdata$x:0000D1D5                 db    0
.xdata$x:0000D1D6                 db    0
.xdata$x:0000D1D7                 db    0
.xdata$x:0000D1D8                 db    0
.xdata$x:0000D1D9                 db    0
.xdata$x:0000D1DA                 db    0
.xdata$x:0000D1DB                 db    0
.xdata$x:0000D1DC                 db    0
.xdata$x:0000D1DD                 db    0
.xdata$x:0000D1DE                 db    0
.xdata$x:0000D1DF                 db    0
.xdata$x:0000D1E0                 db    0
.xdata$x:0000D1E1                 db    0
.xdata$x:0000D1E2                 db    0
.xdata$x:0000D1E3                 db    0
.xdata$x:0000D1E4                 db    0
.xdata$x:0000D1E5                 db    0
.xdata$x:0000D1E6                 db    0
.xdata$x:0000D1E7                 db    0
.xdata$x:0000D1E8                 db    0
.xdata$x:0000D1E9                 db    0
.xdata$x:0000D1EA                 db    0
.xdata$x:0000D1EB                 db    0
.xdata$x:0000D1EB _xdata$x        ends
.xdata$x:0000D1EB
.xdata$x:0000D1EC ; ===========================================================================
.xdata$x:0000D1EC
.xdata$x:0000D1EC ; Segment type: Pure data
.xdata$x:0000D1EC ; Segment permissions: Read
.xdata$x:0000D1EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D1EC                 assume cs:_xdata$x
.xdata$x:0000D1EC                 ;org 0D1ECh
.xdata$x:0000D1EC ; COMDAT (pick associative to section at 4AA0)
.xdata$x:0000D1EC __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D1EC                                         ; DATA XREF: .xdata$x:0000D1FCo
.xdata$x:0000D1ED                 db 0FFh
.xdata$x:0000D1EE                 db 0FFh
.xdata$x:0000D1EF                 db 0FFh
.xdata$x:0000D1F0                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000D1F4 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D1F4                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000D1F5                 db    5
.xdata$x:0000D1F6                 db  93h ; ô
.xdata$x:0000D1F7                 db  19h
.xdata$x:0000D1F8                 db    1
.xdata$x:0000D1F9                 db    0
.xdata$x:0000D1FA                 db    0
.xdata$x:0000D1FB                 db    0
.xdata$x:0000D1FC                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000D200                 db    0
.xdata$x:0000D201                 db    0
.xdata$x:0000D202                 db    0
.xdata$x:0000D203                 db    0
.xdata$x:0000D204                 db    0
.xdata$x:0000D205                 db    0
.xdata$x:0000D206                 db    0
.xdata$x:0000D207                 db    0
.xdata$x:0000D208                 db    0
.xdata$x:0000D209                 db    0
.xdata$x:0000D20A                 db    0
.xdata$x:0000D20B                 db    0
.xdata$x:0000D20C                 db    0
.xdata$x:0000D20D                 db    0
.xdata$x:0000D20E                 db    0
.xdata$x:0000D20F                 db    0
.xdata$x:0000D210                 db    0
.xdata$x:0000D211                 db    0
.xdata$x:0000D212                 db    0
.xdata$x:0000D213                 db    0
.xdata$x:0000D214                 db    0
.xdata$x:0000D215                 db    0
.xdata$x:0000D216                 db    0
.xdata$x:0000D217                 db    0
.xdata$x:0000D217 _xdata$x        ends
.xdata$x:0000D217
.xdata$x:0000D218 ; ===========================================================================
.xdata$x:0000D218
.xdata$x:0000D218 ; Segment type: Pure data
.xdata$x:0000D218 ; Segment permissions: Read
.xdata$x:0000D218 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D218                 assume cs:_xdata$x
.xdata$x:0000D218                 ;org 0D218h
.xdata$x:0000D218 ; COMDAT (pick associative to section at 6728)
.xdata$x:0000D218 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D218                                         ; DATA XREF: .xdata$x:0000D228o
.xdata$x:0000D219                 db 0FFh
.xdata$x:0000D21A                 db 0FFh
.xdata$x:0000D21B                 db 0FFh
.xdata$x:0000D21C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000D220 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D220                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000D221                 db    5
.xdata$x:0000D222                 db  93h ; ô
.xdata$x:0000D223                 db  19h
.xdata$x:0000D224                 db    1
.xdata$x:0000D225                 db    0
.xdata$x:0000D226                 db    0
.xdata$x:0000D227                 db    0
.xdata$x:0000D228                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000D22C                 db    0
.xdata$x:0000D22D                 db    0
.xdata$x:0000D22E                 db    0
.xdata$x:0000D22F                 db    0
.xdata$x:0000D230                 db    0
.xdata$x:0000D231                 db    0
.xdata$x:0000D232                 db    0
.xdata$x:0000D233                 db    0
.xdata$x:0000D234                 db    0
.xdata$x:0000D235                 db    0
.xdata$x:0000D236                 db    0
.xdata$x:0000D237                 db    0
.xdata$x:0000D238                 db    0
.xdata$x:0000D239                 db    0
.xdata$x:0000D23A                 db    0
.xdata$x:0000D23B                 db    0
.xdata$x:0000D23C                 db    0
.xdata$x:0000D23D                 db    0
.xdata$x:0000D23E                 db    0
.xdata$x:0000D23F                 db    0
.xdata$x:0000D240                 db    0
.xdata$x:0000D241                 db    0
.xdata$x:0000D242                 db    0
.xdata$x:0000D243                 db    0
.xdata$x:0000D243 _xdata$x        ends
.xdata$x:0000D243
.xdata$x:0000D244 ; ===========================================================================
.xdata$x:0000D244
.xdata$x:0000D244 ; Segment type: Pure data
.xdata$x:0000D244 ; Segment permissions: Read
.xdata$x:0000D244 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D244                 assume cs:_xdata$x
.xdata$x:0000D244                 ;org 0D244h
.xdata$x:0000D244 ; COMDAT (pick associative to section at 499C)
.xdata$x:0000D244 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000D244                                         ; DATA XREF: .xdata$x:0000D254o
.xdata$x:0000D245                 db 0FFh
.xdata$x:0000D246                 db 0FFh
.xdata$x:0000D247                 db 0FFh
.xdata$x:0000D248                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000D24C __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000D24C                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000D24D                 db    5
.xdata$x:0000D24E                 db  93h ; ô
.xdata$x:0000D24F                 db  19h
.xdata$x:0000D250                 db    1
.xdata$x:0000D251                 db    0
.xdata$x:0000D252                 db    0
.xdata$x:0000D253                 db    0
.xdata$x:0000D254                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000D258                 db    0
.xdata$x:0000D259                 db    0
.xdata$x:0000D25A                 db    0
.xdata$x:0000D25B                 db    0
.xdata$x:0000D25C                 db    0
.xdata$x:0000D25D                 db    0
.xdata$x:0000D25E                 db    0
.xdata$x:0000D25F                 db    0
.xdata$x:0000D260                 db    0
.xdata$x:0000D261                 db    0
.xdata$x:0000D262                 db    0
.xdata$x:0000D263                 db    0
.xdata$x:0000D264                 db    0
.xdata$x:0000D265                 db    0
.xdata$x:0000D266                 db    0
.xdata$x:0000D267                 db    0
.xdata$x:0000D268                 db    0
.xdata$x:0000D269                 db    0
.xdata$x:0000D26A                 db    0
.xdata$x:0000D26B                 db    0
.xdata$x:0000D26C                 db    0
.xdata$x:0000D26D                 db    0
.xdata$x:0000D26E                 db    0
.xdata$x:0000D26F                 db    0
.xdata$x:0000D26F _xdata$x        ends
.xdata$x:0000D26F
.xdata$x:0000D270 ; ===========================================================================
.xdata$x:0000D270
.xdata$x:0000D270 ; Segment type: Pure data
.xdata$x:0000D270 ; Segment permissions: Read
.xdata$x:0000D270 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D270                 assume cs:_xdata$x
.xdata$x:0000D270                 ;org 0D270h
.xdata$x:0000D270 ; COMDAT (pick associative to section at 6640)
.xdata$x:0000D270 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000D270                                         ; DATA XREF: .xdata$x:0000D280o
.xdata$x:0000D271                 db 0FFh
.xdata$x:0000D272                 db 0FFh
.xdata$x:0000D273                 db 0FFh
.xdata$x:0000D274                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000D278 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D278                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000D279                 db    5
.xdata$x:0000D27A                 db  93h ; ô
.xdata$x:0000D27B                 db  19h
.xdata$x:0000D27C                 db    1
.xdata$x:0000D27D                 db    0
.xdata$x:0000D27E                 db    0
.xdata$x:0000D27F                 db    0
.xdata$x:0000D280                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000D284                 db    0
.xdata$x:0000D285                 db    0
.xdata$x:0000D286                 db    0
.xdata$x:0000D287                 db    0
.xdata$x:0000D288                 db    0
.xdata$x:0000D289                 db    0
.xdata$x:0000D28A                 db    0
.xdata$x:0000D28B                 db    0
.xdata$x:0000D28C                 db    0
.xdata$x:0000D28D                 db    0
.xdata$x:0000D28E                 db    0
.xdata$x:0000D28F                 db    0
.xdata$x:0000D290                 db    0
.xdata$x:0000D291                 db    0
.xdata$x:0000D292                 db    0
.xdata$x:0000D293                 db    0
.xdata$x:0000D294                 db    0
.xdata$x:0000D295                 db    0
.xdata$x:0000D296                 db    0
.xdata$x:0000D297                 db    0
.xdata$x:0000D298                 db    0
.xdata$x:0000D299                 db    0
.xdata$x:0000D29A                 db    0
.xdata$x:0000D29B                 db    0
.xdata$x:0000D29B _xdata$x        ends
.xdata$x:0000D29B
.xdata$x:0000D29C ; ===========================================================================
.xdata$x:0000D29C
.xdata$x:0000D29C ; Segment type: Pure data
.xdata$x:0000D29C ; Segment permissions: Read
.xdata$x:0000D29C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D29C                 assume cs:_xdata$x
.xdata$x:0000D29C                 ;org 0D29Ch
.xdata$x:0000D29C ; COMDAT (pick associative to section at 51A0)
.xdata$x:0000D29C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000D29C                                         ; DATA XREF: .xdata$x:0000D2ACo
.xdata$x:0000D29D                 db 0FFh
.xdata$x:0000D29E                 db 0FFh
.xdata$x:0000D29F                 db 0FFh
.xdata$x:0000D2A0                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000D2A4 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000D2A4                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000D2A5                 db    5
.xdata$x:0000D2A6                 db  93h ; ô
.xdata$x:0000D2A7                 db  19h
.xdata$x:0000D2A8                 db    1
.xdata$x:0000D2A9                 db    0
.xdata$x:0000D2AA                 db    0
.xdata$x:0000D2AB                 db    0
.xdata$x:0000D2AC                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000D2B0                 db    0
.xdata$x:0000D2B1                 db    0
.xdata$x:0000D2B2                 db    0
.xdata$x:0000D2B3                 db    0
.xdata$x:0000D2B4                 db    0
.xdata$x:0000D2B5                 db    0
.xdata$x:0000D2B6                 db    0
.xdata$x:0000D2B7                 db    0
.xdata$x:0000D2B8                 db    0
.xdata$x:0000D2B9                 db    0
.xdata$x:0000D2BA                 db    0
.xdata$x:0000D2BB                 db    0
.xdata$x:0000D2BC                 db    0
.xdata$x:0000D2BD                 db    0
.xdata$x:0000D2BE                 db    0
.xdata$x:0000D2BF                 db    0
.xdata$x:0000D2C0                 db    0
.xdata$x:0000D2C1                 db    0
.xdata$x:0000D2C2                 db    0
.xdata$x:0000D2C3                 db    0
.xdata$x:0000D2C4                 db    0
.xdata$x:0000D2C5                 db    0
.xdata$x:0000D2C6                 db    0
.xdata$x:0000D2C7                 db    0
.xdata$x:0000D2C7 _xdata$x        ends
.xdata$x:0000D2C7
.xdata$x:0000D2C8 ; ===========================================================================
.xdata$x:0000D2C8
.xdata$x:0000D2C8 ; Segment type: Pure data
.xdata$x:0000D2C8 ; Segment permissions: Read
.xdata$x:0000D2C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D2C8                 assume cs:_xdata$x
.xdata$x:0000D2C8                 ;org 0D2C8h
.xdata$x:0000D2C8 ; COMDAT (pick associative to section at 5384)
.xdata$x:0000D2C8 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000D2C8                                         ; DATA XREF: .xdata$x:0000D2D8o
.xdata$x:0000D2C9                 db 0FFh
.xdata$x:0000D2CA                 db 0FFh
.xdata$x:0000D2CB                 db 0FFh
.xdata$x:0000D2CC                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000D2D0 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D2D0                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000D2D1                 db    5
.xdata$x:0000D2D2                 db  93h ; ô
.xdata$x:0000D2D3                 db  19h
.xdata$x:0000D2D4                 db    1
.xdata$x:0000D2D5                 db    0
.xdata$x:0000D2D6                 db    0
.xdata$x:0000D2D7                 db    0
.xdata$x:0000D2D8                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000D2DC                 db    0
.xdata$x:0000D2DD                 db    0
.xdata$x:0000D2DE                 db    0
.xdata$x:0000D2DF                 db    0
.xdata$x:0000D2E0                 db    0
.xdata$x:0000D2E1                 db    0
.xdata$x:0000D2E2                 db    0
.xdata$x:0000D2E3                 db    0
.xdata$x:0000D2E4                 db    0
.xdata$x:0000D2E5                 db    0
.xdata$x:0000D2E6                 db    0
.xdata$x:0000D2E7                 db    0
.xdata$x:0000D2E8                 db    0
.xdata$x:0000D2E9                 db    0
.xdata$x:0000D2EA                 db    0
.xdata$x:0000D2EB                 db    0
.xdata$x:0000D2EC                 db    0
.xdata$x:0000D2ED                 db    0
.xdata$x:0000D2EE                 db    0
.xdata$x:0000D2EF                 db    0
.xdata$x:0000D2F0                 db    0
.xdata$x:0000D2F1                 db    0
.xdata$x:0000D2F2                 db    0
.xdata$x:0000D2F3                 db    0
.xdata$x:0000D2F3 _xdata$x        ends
.xdata$x:0000D2F3
.xdata$x:0000D2F4 ; ===========================================================================
.xdata$x:0000D2F4
.xdata$x:0000D2F4 ; Segment type: Pure data
.xdata$x:0000D2F4 ; Segment permissions: Read
.xdata$x:0000D2F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D2F4                 assume cs:_xdata$x
.xdata$x:0000D2F4                 ;org 0D2F4h
.xdata$x:0000D2F4 ; COMDAT (pick associative to section at 52E8)
.xdata$x:0000D2F4 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z db 0FFh
.xdata$x:0000D2F4                                         ; DATA XREF: .xdata$x:0000D304o
.xdata$x:0000D2F5                 db 0FFh
.xdata$x:0000D2F6                 db 0FFh
.xdata$x:0000D2F7                 db 0FFh
.xdata$x:0000D2F8                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z$0
.xdata$x:0000D2FC __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z db  22h ; "
.xdata$x:0000D2FC                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z+11o
.xdata$x:0000D2FD                 db    5
.xdata$x:0000D2FE                 db  93h ; ô
.xdata$x:0000D2FF                 db  19h
.xdata$x:0000D300                 db    1
.xdata$x:0000D301                 db    0
.xdata$x:0000D302                 db    0
.xdata$x:0000D303                 db    0
.xdata$x:0000D304                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
.xdata$x:0000D308                 align 20h
.xdata$x:0000D308 _xdata$x        ends
.xdata$x:0000D308
.xdata$x:0000D320 ; ===========================================================================
.xdata$x:0000D320
.xdata$x:0000D320 ; Segment type: Pure data
.xdata$x:0000D320 ; Segment permissions: Read
.xdata$x:0000D320 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D320                 assume cs:_xdata$x
.xdata$x:0000D320                 ;org 0D320h
.xdata$x:0000D320 ; COMDAT (pick associative to section at 5250)
.xdata$x:0000D320 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000D320                                         ; DATA XREF: .xdata$x:0000D330o
.xdata$x:0000D321                 db 0FFh
.xdata$x:0000D322                 db 0FFh
.xdata$x:0000D323                 db 0FFh
.xdata$x:0000D324                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000D328 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000D328                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000D329                 db    5
.xdata$x:0000D32A                 db  93h ; ô
.xdata$x:0000D32B                 db  19h
.xdata$x:0000D32C                 db    1
.xdata$x:0000D32D                 db    0
.xdata$x:0000D32E                 db    0
.xdata$x:0000D32F                 db    0
.xdata$x:0000D330                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000D334                 db    0
.xdata$x:0000D335                 db    0
.xdata$x:0000D336                 db    0
.xdata$x:0000D337                 db    0
.xdata$x:0000D338                 db    0
.xdata$x:0000D339                 db    0
.xdata$x:0000D33A                 db    0
.xdata$x:0000D33B                 db    0
.xdata$x:0000D33C                 db    0
.xdata$x:0000D33D                 db    0
.xdata$x:0000D33E                 db    0
.xdata$x:0000D33F                 db    0
.xdata$x:0000D340                 db    0
.xdata$x:0000D341                 db    0
.xdata$x:0000D342                 db    0
.xdata$x:0000D343                 db    0
.xdata$x:0000D344                 db    0
.xdata$x:0000D345                 db    0
.xdata$x:0000D346                 db    0
.xdata$x:0000D347                 db    0
.xdata$x:0000D348                 db    0
.xdata$x:0000D349                 db    0
.xdata$x:0000D34A                 db    0
.xdata$x:0000D34B                 db    0
.xdata$x:0000D34B _xdata$x        ends
.xdata$x:0000D34B
.xdata$x:0000D34C ; ===========================================================================
.xdata$x:0000D34C
.xdata$x:0000D34C ; Segment type: Pure data
.xdata$x:0000D34C ; Segment permissions: Read
.xdata$x:0000D34C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D34C                 assume cs:_xdata$x
.xdata$x:0000D34C                 ;org 0D34Ch
.xdata$x:0000D34C ; COMDAT (pick associative to section at 50FC)
.xdata$x:0000D34C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000D34C                                         ; DATA XREF: .xdata$x:0000D35Co
.xdata$x:0000D34D                 db 0FFh
.xdata$x:0000D34E                 db 0FFh
.xdata$x:0000D34F                 db 0FFh
.xdata$x:0000D350                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000D354 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000D354                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000D355                 db    5
.xdata$x:0000D356                 db  93h ; ô
.xdata$x:0000D357                 db  19h
.xdata$x:0000D358                 db    1
.xdata$x:0000D359                 db    0
.xdata$x:0000D35A                 db    0
.xdata$x:0000D35B                 db    0
.xdata$x:0000D35C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000D360                 db    0
.xdata$x:0000D361                 db    0
.xdata$x:0000D362                 db    0
.xdata$x:0000D363                 db    0
.xdata$x:0000D364                 db    0
.xdata$x:0000D365                 db    0
.xdata$x:0000D366                 db    0
.xdata$x:0000D367                 db    0
.xdata$x:0000D368                 db    0
.xdata$x:0000D369                 db    0
.xdata$x:0000D36A                 db    0
.xdata$x:0000D36B                 db    0
.xdata$x:0000D36C                 db    0
.xdata$x:0000D36D                 db    0
.xdata$x:0000D36E                 db    0
.xdata$x:0000D36F                 db    0
.xdata$x:0000D370                 db    0
.xdata$x:0000D371                 db    0
.xdata$x:0000D372                 db    0
.xdata$x:0000D373                 db    0
.xdata$x:0000D374                 db    0
.xdata$x:0000D375                 db    0
.xdata$x:0000D376                 db    0
.xdata$x:0000D377                 db    0
.xdata$x:0000D377 _xdata$x        ends
.xdata$x:0000D377
.xdata$x:0000D378 ; ===========================================================================
.xdata$x:0000D378
.xdata$x:0000D378 ; Segment type: Pure data
.xdata$x:0000D378 ; Segment permissions: Read
.xdata$x:0000D378 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D378                 assume cs:_xdata$x
.xdata$x:0000D378                 ;org 0D378h
.xdata$x:0000D378 ; COMDAT (pick associative to section at 69D8)
.xdata$x:0000D378 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000D378                                         ; DATA XREF: .xdata$x:0000D388o
.xdata$x:0000D379                 db 0FFh
.xdata$x:0000D37A                 db 0FFh
.xdata$x:0000D37B                 db 0FFh
.xdata$x:0000D37C                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000D380 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000D380                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000D381                 db    5
.xdata$x:0000D382                 db  93h ; ô
.xdata$x:0000D383                 db  19h
.xdata$x:0000D384                 db    1
.xdata$x:0000D385                 db    0
.xdata$x:0000D386                 db    0
.xdata$x:0000D387                 db    0
.xdata$x:0000D388                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000D38C                 db    0
.xdata$x:0000D38D                 db    0
.xdata$x:0000D38E                 db    0
.xdata$x:0000D38F                 db    0
.xdata$x:0000D390                 db    0
.xdata$x:0000D391                 db    0
.xdata$x:0000D392                 db    0
.xdata$x:0000D393                 db    0
.xdata$x:0000D394                 db    0
.xdata$x:0000D395                 db    0
.xdata$x:0000D396                 db    0
.xdata$x:0000D397                 db    0
.xdata$x:0000D398                 db    0
.xdata$x:0000D399                 db    0
.xdata$x:0000D39A                 db    0
.xdata$x:0000D39B                 db    0
.xdata$x:0000D39C                 db    0
.xdata$x:0000D39D                 db    0
.xdata$x:0000D39E                 db    0
.xdata$x:0000D39F                 db    0
.xdata$x:0000D3A0                 db    0
.xdata$x:0000D3A1                 db    0
.xdata$x:0000D3A2                 db    0
.xdata$x:0000D3A3                 db    0
.xdata$x:0000D3A3 _xdata$x        ends
.xdata$x:0000D3A3
.xdata$x:0000D3A4 ; ===========================================================================
.xdata$x:0000D3A4
.xdata$x:0000D3A4 ; Segment type: Pure data
.xdata$x:0000D3A4 ; Segment permissions: Read
.xdata$x:0000D3A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D3A4                 assume cs:_xdata$x
.xdata$x:0000D3A4                 ;org 0D3A4h
.xdata$x:0000D3A4 ; COMDAT (pick associative to section at 848C)
.xdata$x:0000D3A4 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000D3A4                                         ; DATA XREF: .xdata$x:0000D42Co
.xdata$x:0000D3A5                 db    0
.xdata$x:0000D3A6                 db    0
.xdata$x:0000D3A7                 db    0
.xdata$x:0000D3A8                 db    0
.xdata$x:0000D3A9                 db    0
.xdata$x:0000D3AA                 db    0
.xdata$x:0000D3AB                 db    0
.xdata$x:0000D3AC                 db    0
.xdata$x:0000D3AD                 db    0
.xdata$x:0000D3AE                 db    0
.xdata$x:0000D3AF                 db    0
.xdata$x:0000D3B0                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000D3B4 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000D3B4                                         ; DATA XREF: .xdata$x:0000D418o
.xdata$x:0000D3B5                 db    0
.xdata$x:0000D3B6                 db    0
.xdata$x:0000D3B7                 db    0
.xdata$x:0000D3B8                 db    0
.xdata$x:0000D3B9                 db    0
.xdata$x:0000D3BA                 db    0
.xdata$x:0000D3BB                 db    0
.xdata$x:0000D3BC                 db    0
.xdata$x:0000D3BD                 db    0
.xdata$x:0000D3BE                 db    0
.xdata$x:0000D3BF                 db    0
.xdata$x:0000D3C0                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000D3C4 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000D3C4                                         ; DATA XREF: .xdata$x:0000D3ECo
.xdata$x:0000D3C5                 db 0FFh
.xdata$x:0000D3C6                 db 0FFh
.xdata$x:0000D3C7                 db 0FFh
.xdata$x:0000D3C8                 db    0
.xdata$x:0000D3C9                 db    0
.xdata$x:0000D3CA                 db    0
.xdata$x:0000D3CB                 db    0
.xdata$x:0000D3CC                 db 0FFh
.xdata$x:0000D3CD                 db 0FFh
.xdata$x:0000D3CE                 db 0FFh
.xdata$x:0000D3CF                 db 0FFh
.xdata$x:0000D3D0                 db    0
.xdata$x:0000D3D1                 db    0
.xdata$x:0000D3D2                 db    0
.xdata$x:0000D3D3                 db    0
.xdata$x:0000D3D4                 db    1
.xdata$x:0000D3D5                 db    0
.xdata$x:0000D3D6                 db    0
.xdata$x:0000D3D7                 db    0
.xdata$x:0000D3D8                 db    0
.xdata$x:0000D3D9                 db    0
.xdata$x:0000D3DA                 db    0
.xdata$x:0000D3DB                 db    0
.xdata$x:0000D3DC                 db    1
.xdata$x:0000D3DD                 db    0
.xdata$x:0000D3DE                 db    0
.xdata$x:0000D3DF                 db    0
.xdata$x:0000D3E0                 db    0
.xdata$x:0000D3E1                 db    0
.xdata$x:0000D3E2                 db    0
.xdata$x:0000D3E3                 db    0
.xdata$x:0000D3E4 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000D3E4                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000D3E5                 db    5
.xdata$x:0000D3E6                 db  93h ; ô
.xdata$x:0000D3E7                 db  19h
.xdata$x:0000D3E8                 db    4
.xdata$x:0000D3E9                 db    0
.xdata$x:0000D3EA                 db    0
.xdata$x:0000D3EB                 db    0
.xdata$x:0000D3EC                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000D3F0                 db    2
.xdata$x:0000D3F1                 db    0
.xdata$x:0000D3F2                 db    0
.xdata$x:0000D3F3                 db    0
.xdata$x:0000D3F4                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000D3F8                 db    0
.xdata$x:0000D3F9                 db    0
.xdata$x:0000D3FA                 db    0
.xdata$x:0000D3FB                 db    0
.xdata$x:0000D3FC                 db    0
.xdata$x:0000D3FD                 db    0
.xdata$x:0000D3FE                 db    0
.xdata$x:0000D3FF                 db    0
.xdata$x:0000D400                 db    0
.xdata$x:0000D401                 db    0
.xdata$x:0000D402                 db    0
.xdata$x:0000D403                 db    0
.xdata$x:0000D404                 db    0
.xdata$x:0000D405                 db    0
.xdata$x:0000D406                 db    0
.xdata$x:0000D407                 db    0
.xdata$x:0000D408 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000D408                                         ; DATA XREF: .xdata$x:0000D3F4o
.xdata$x:0000D409                 db    0
.xdata$x:0000D40A                 db    0
.xdata$x:0000D40B                 db    0
.xdata$x:0000D40C                 db    2
.xdata$x:0000D40D                 db    0
.xdata$x:0000D40E                 db    0
.xdata$x:0000D40F                 db    0
.xdata$x:0000D410                 db    3
.xdata$x:0000D411                 db    0
.xdata$x:0000D412                 db    0
.xdata$x:0000D413                 db    0
.xdata$x:0000D414                 db    1
.xdata$x:0000D415                 db    0
.xdata$x:0000D416                 db    0
.xdata$x:0000D417                 db    0
.xdata$x:0000D418                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000D41C                 db    0
.xdata$x:0000D41D                 db    0
.xdata$x:0000D41E                 db    0
.xdata$x:0000D41F                 db    0
.xdata$x:0000D420                 db    0
.xdata$x:0000D421                 db    0
.xdata$x:0000D422                 db    0
.xdata$x:0000D423                 db    0
.xdata$x:0000D424                 db    3
.xdata$x:0000D425                 db    0
.xdata$x:0000D426                 db    0
.xdata$x:0000D427                 db    0
.xdata$x:0000D428                 db    1
.xdata$x:0000D429                 db    0
.xdata$x:0000D42A                 db    0
.xdata$x:0000D42B                 db    0
.xdata$x:0000D42C                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000D42C _xdata$x        ends
.xdata$x:0000D42C
.xdata$x:0000D430 ; ===========================================================================
.xdata$x:0000D430
.xdata$x:0000D430 ; Segment type: Pure data
.xdata$x:0000D430 ; Segment permissions: Read
.xdata$x:0000D430 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D430                 assume cs:_xdata$x
.xdata$x:0000D430                 ;org 0D430h
.xdata$x:0000D430 __unwindtable$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D430                                         ; DATA XREF: .xdata$x:0000D5A0o
.xdata$x:0000D431                 db 0FFh
.xdata$x:0000D432                 db 0FFh
.xdata$x:0000D433                 db 0FFh
.xdata$x:0000D434                 dd offset __unwindfunclet$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D438 __unwindtable$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z db 0FFh
.xdata$x:0000D438                                         ; DATA XREF: .xdata$x:0000D5C4o
.xdata$x:0000D439                 db 0FFh
.xdata$x:0000D43A                 db 0FFh
.xdata$x:0000D43B                 db 0FFh
.xdata$x:0000D43C                 dd offset __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z$0
.xdata$x:0000D440 __unwindtable$?SaveFile@TiXmlDocument@@QBE_NXZ db 0FFh
.xdata$x:0000D440                                         ; DATA XREF: .xdata$x:0000D5E8o
.xdata$x:0000D441                 db 0FFh
.xdata$x:0000D442                 db 0FFh
.xdata$x:0000D443                 db 0FFh
.xdata$x:0000D444                 dd offset __unwindfunclet$?SaveFile@TiXmlDocument@@QBE_NXZ$0
.xdata$x:0000D448 __unwindtable$?LoadFile@TiXmlDocument@@QAE_NXZ db 0FFh
.xdata$x:0000D448                                         ; DATA XREF: .xdata$x:0000D60Co
.xdata$x:0000D449                 db 0FFh
.xdata$x:0000D44A                 db 0FFh
.xdata$x:0000D44B                 db 0FFh
.xdata$x:0000D44C                 dd offset __unwindfunclet$?LoadFile@TiXmlDocument@@QAE_NXZ$0
.xdata$x:0000D450 __unwindtable$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D450                                         ; DATA XREF: .xdata$x:0000D678o
.xdata$x:0000D451                 db 0FFh
.xdata$x:0000D452                 db 0FFh
.xdata$x:0000D453                 db 0FFh
.xdata$x:0000D454                 dd offset __unwindfunclet$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D458 __unwindtable$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D458                                         ; DATA XREF: .xdata$x:0000D69Co
.xdata$x:0000D459                 db 0FFh
.xdata$x:0000D45A                 db 0FFh
.xdata$x:0000D45B                 db 0FFh
.xdata$x:0000D45C                 dd offset __unwindfunclet$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D460 __unwindtable$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D460                                         ; DATA XREF: .xdata$x:0000D6E4o
.xdata$x:0000D461                 db 0FFh
.xdata$x:0000D462                 db 0FFh
.xdata$x:0000D463                 db 0FFh
.xdata$x:0000D464                 dd offset __unwindfunclet$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D468 __unwindtable$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z db 0FFh
.xdata$x:0000D468                                         ; DATA XREF: .xdata$x:0000D708o
.xdata$x:0000D469                 db 0FFh
.xdata$x:0000D46A                 db 0FFh
.xdata$x:0000D46B                 db 0FFh
.xdata$x:0000D46C                 dd offset __unwindfunclet$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z$0
.xdata$x:0000D470 __unwindtable$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D470                                         ; DATA XREF: .xdata$x:0000D72Co
.xdata$x:0000D471                 db 0FFh
.xdata$x:0000D472                 db 0FFh
.xdata$x:0000D473                 db 0FFh
.xdata$x:0000D474                 dd offset __unwindfunclet$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D478 __unwindtable$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ db 0FFh
.xdata$x:0000D478                                         ; DATA XREF: .xdata$x:0000D750o
.xdata$x:0000D479                 db 0FFh
.xdata$x:0000D47A                 db 0FFh
.xdata$x:0000D47B                 db 0FFh
.xdata$x:0000D47C                 dd offset __unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0
.xdata$x:0000D480 __unwindtable$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z db 0FFh
.xdata$x:0000D480                                         ; DATA XREF: .xdata$x:0000D774o
.xdata$x:0000D481                 db 0FFh
.xdata$x:0000D482                 db 0FFh
.xdata$x:0000D483                 db 0FFh
.xdata$x:0000D484                 dd offset __unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z$0
.xdata$x:0000D488 __unwindtable$??1TiXmlAttributeSet@@QAE@XZ db 0FFh
.xdata$x:0000D488                                         ; DATA XREF: .xdata$x:0000D7E0o
.xdata$x:0000D489                 db 0FFh
.xdata$x:0000D48A                 db 0FFh
.xdata$x:0000D48B                 db 0FFh
.xdata$x:0000D48C                 dd offset __unwindfunclet$??1TiXmlAttributeSet@@QAE@XZ$0
.xdata$x:0000D490 __unwindtable$??0TiXmlAttributeSet@@QAE@XZ db 0FFh
.xdata$x:0000D490                                         ; DATA XREF: .xdata$x:0000D804o
.xdata$x:0000D491                 db 0FFh
.xdata$x:0000D492                 db 0FFh
.xdata$x:0000D493                 db 0FFh
.xdata$x:0000D494                 dd offset __unwindfunclet$??0TiXmlAttributeSet@@QAE@XZ$0
.xdata$x:0000D498 __unwindtable$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z db 0FFh
.xdata$x:0000D498                                         ; DATA XREF: .xdata$x:0000D948o
.xdata$x:0000D499                 db 0FFh
.xdata$x:0000D49A                 db 0FFh
.xdata$x:0000D49B                 db 0FFh
.xdata$x:0000D49C                 dd offset __unwindfunclet$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z$0
.xdata$x:0000D4A0 __unwindtable$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z db 0FFh
.xdata$x:0000D4A0                                         ; DATA XREF: .xdata$x:0000D96Co
.xdata$x:0000D4A1                 db 0FFh
.xdata$x:0000D4A2                 db 0FFh
.xdata$x:0000D4A3                 db 0FFh
.xdata$x:0000D4A4                 dd offset __unwindfunclet$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z$0
.xdata$x:0000D4A8 __unwindtable$??0TiXmlDocument@@QAE@PB_W@Z db 0FFh
.xdata$x:0000D4A8                                         ; DATA XREF: .xdata$x:0000D630o
.xdata$x:0000D4A9                 db 0FFh
.xdata$x:0000D4AA                 db 0FFh
.xdata$x:0000D4AB                 db 0FFh
.xdata$x:0000D4AC                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$0
.xdata$x:0000D4B0                 db    0
.xdata$x:0000D4B1                 db    0
.xdata$x:0000D4B2                 db    0
.xdata$x:0000D4B3                 db    0
.xdata$x:0000D4B4                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@PB_W@Z$1
.xdata$x:0000D4B8 __unwindtable$??0TiXmlDocument@@QAE@XZ db 0FFh
.xdata$x:0000D4B8                                         ; DATA XREF: .xdata$x:0000D654o
.xdata$x:0000D4B9                 db 0FFh
.xdata$x:0000D4BA                 db 0FFh
.xdata$x:0000D4BB                 db 0FFh
.xdata$x:0000D4BC                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@XZ$0
.xdata$x:0000D4C0                 db    0
.xdata$x:0000D4C1                 db    0
.xdata$x:0000D4C2                 db    0
.xdata$x:0000D4C3                 db    0
.xdata$x:0000D4C4                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@XZ$1
.xdata$x:0000D4C8 __unwindtable$??1TiXmlElement@@UAE@XZ db 0FFh
.xdata$x:0000D4C8                                         ; DATA XREF: .xdata$x:0000D798o
.xdata$x:0000D4C9                 db 0FFh
.xdata$x:0000D4CA                 db 0FFh
.xdata$x:0000D4CB                 db 0FFh
.xdata$x:0000D4CC                 dd offset __unwindfunclet$??1TiXmlElement@@UAE@XZ$0
.xdata$x:0000D4D0                 db    0
.xdata$x:0000D4D1                 db    0
.xdata$x:0000D4D2                 db    0
.xdata$x:0000D4D3                 db    0
.xdata$x:0000D4D4                 dd offset __unwindfunclet$??1TiXmlElement@@UAE@XZ$1
.xdata$x:0000D4D8 __unwindtable$??0TiXmlElement@@QAE@PB_W@Z db 0FFh
.xdata$x:0000D4D8                                         ; DATA XREF: .xdata$x:0000D7BCo
.xdata$x:0000D4D9                 db 0FFh
.xdata$x:0000D4DA                 db 0FFh
.xdata$x:0000D4DB                 db 0FFh
.xdata$x:0000D4DC                 dd offset __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$0
.xdata$x:0000D4E0                 db    0
.xdata$x:0000D4E1                 db    0
.xdata$x:0000D4E2                 db    0
.xdata$x:0000D4E3                 db    0
.xdata$x:0000D4E4                 dd offset __unwindfunclet$??0TiXmlElement@@QAE@PB_W@Z$1
.xdata$x:0000D4E8 __unwindtable$??0TiXmlNode@@IAE@W4NodeType@0@@Z db 0FFh
.xdata$x:0000D4E8                                         ; DATA XREF: .xdata$x:0000D84Co
.xdata$x:0000D4E9                 db 0FFh
.xdata$x:0000D4EA                 db 0FFh
.xdata$x:0000D4EB                 db 0FFh
.xdata$x:0000D4EC                 dd offset __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$0
.xdata$x:0000D4F0                 db    0
.xdata$x:0000D4F1                 db    0
.xdata$x:0000D4F2                 db    0
.xdata$x:0000D4F3                 db    0
.xdata$x:0000D4F4                 dd offset __unwindfunclet$??0TiXmlNode@@IAE@W4NodeType@0@@Z$1
.xdata$x:0000D4F8 __unwindtable$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z db 0FFh
.xdata$x:0000D4F8                                         ; DATA XREF: .xdata$x:0000D870o
.xdata$x:0000D4F9                 db 0FFh
.xdata$x:0000D4FA                 db 0FFh
.xdata$x:0000D4FB                 db 0FFh
.xdata$x:0000D4FC                 dd offset __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0
.xdata$x:0000D500                 db    0
.xdata$x:0000D501                 db    0
.xdata$x:0000D502                 db    0
.xdata$x:0000D503                 db    0
.xdata$x:0000D504                 dd offset __unwindfunclet$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1
.xdata$x:0000D508 __unwindtable$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z db 0FFh
.xdata$x:0000D508                                         ; DATA XREF: .xdata$x:0000D894o
.xdata$x:0000D509                 db 0FFh
.xdata$x:0000D50A                 db 0FFh
.xdata$x:0000D50B                 db 0FFh
.xdata$x:0000D50C                 dd offset __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$0
.xdata$x:0000D510                 db    0
.xdata$x:0000D511                 db    0
.xdata$x:0000D512                 db    0
.xdata$x:0000D513                 db    0
.xdata$x:0000D514                 dd offset __unwindfunclet$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z$1
.xdata$x:0000D518 __unwindtable$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z db 0FFh
.xdata$x:0000D518                                         ; DATA XREF: .xdata$x:0000D8B8o
.xdata$x:0000D519                 db 0FFh
.xdata$x:0000D51A                 db 0FFh
.xdata$x:0000D51B                 db 0FFh
.xdata$x:0000D51C                 dd offset __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$0
.xdata$x:0000D520                 db    0
.xdata$x:0000D521                 db    0
.xdata$x:0000D522                 db    0
.xdata$x:0000D523                 db    0
.xdata$x:0000D524                 dd offset __unwindfunclet$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z$1
.xdata$x:0000D528 __unwindtable$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z db 0FFh
.xdata$x:0000D528                                         ; DATA XREF: .xdata$x:0000D8DCo
.xdata$x:0000D529                 db 0FFh
.xdata$x:0000D52A                 db 0FFh
.xdata$x:0000D52B                 db 0FFh
.xdata$x:0000D52C                 dd offset __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$0
.xdata$x:0000D530                 db    0
.xdata$x:0000D531                 db    0
.xdata$x:0000D532                 db    0
.xdata$x:0000D533                 db    0
.xdata$x:0000D534                 dd offset __unwindfunclet$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z$1
.xdata$x:0000D538 __unwindtable$??1TiXmlNode@@UAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000D900o
.xdata$x:0000D539                 db 0FFh
.xdata$x:0000D53A                 db 0FFh
.xdata$x:0000D53B                 db 0FFh
.xdata$x:0000D53C                 dd offset __unwindfunclet$??1TiXmlNode@@UAE@XZ$0
.xdata$x:0000D540                 db    0
.xdata$x:0000D541                 db    0
.xdata$x:0000D542                 db    0
.xdata$x:0000D543                 db    0
.xdata$x:0000D544                 dd offset __unwindfunclet$??1TiXmlNode@@UAE@XZ$1
.xdata$x:0000D548 __unwindtable$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z db 0FFh
.xdata$x:0000D548                                         ; DATA XREF: .xdata$x:0000D924o
.xdata$x:0000D549                 db 0FFh
.xdata$x:0000D54A                 db 0FFh
.xdata$x:0000D54B                 db 0FFh
.xdata$x:0000D54C                 dd offset __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$0
.xdata$x:0000D550                 db    0
.xdata$x:0000D551                 db    0
.xdata$x:0000D552                 db    0
.xdata$x:0000D553                 db    0
.xdata$x:0000D554                 dd offset __unwindfunclet$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z$1
.xdata$x:0000D558 __unwindtable$??0TiXmlDeclaration@@QAE@PB_W00@Z db 0FFh
.xdata$x:0000D558                                         ; DATA XREF: .xdata$x:0000D6C0o
.xdata$x:0000D559                 db 0FFh
.xdata$x:0000D55A                 db 0FFh
.xdata$x:0000D55B                 db 0FFh
.xdata$x:0000D55C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$0
.xdata$x:0000D560                 db    0
.xdata$x:0000D561                 db    0
.xdata$x:0000D562                 db    0
.xdata$x:0000D563                 db    0
.xdata$x:0000D564                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$1
.xdata$x:0000D568                 db    1
.xdata$x:0000D569                 db    0
.xdata$x:0000D56A                 db    0
.xdata$x:0000D56B                 db    0
.xdata$x:0000D56C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$2
.xdata$x:0000D570                 db    2
.xdata$x:0000D571                 db    0
.xdata$x:0000D572                 db    0
.xdata$x:0000D573                 db    0
.xdata$x:0000D574                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@PB_W00@Z$3
.xdata$x:0000D578 __unwindtable$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z db 0FFh
.xdata$x:0000D578                                         ; DATA XREF: .xdata$x:0000D828o
.xdata$x:0000D579                 db 0FFh
.xdata$x:0000D57A                 db 0FFh
.xdata$x:0000D57B                 db 0FFh
.xdata$x:0000D57C                 dd offset __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$0
.xdata$x:0000D580                 db    0
.xdata$x:0000D581                 db    0
.xdata$x:0000D582                 db    0
.xdata$x:0000D583                 db    0
.xdata$x:0000D584                 dd offset __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$1
.xdata$x:0000D588                 db    1
.xdata$x:0000D589                 db    0
.xdata$x:0000D58A                 db    0
.xdata$x:0000D58B                 db    0
.xdata$x:0000D58C                 dd offset __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$2
.xdata$x:0000D590                 db    1
.xdata$x:0000D591                 db    0
.xdata$x:0000D592                 db    0
.xdata$x:0000D593                 db    0
.xdata$x:0000D594                 dd offset __unwindfunclet$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z$3
.xdata$x:0000D598 __ehfuncinfo$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D598                                         ; DATA XREF: __ehhandler$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D599                 db    5
.xdata$x:0000D59A                 db  93h ; ô
.xdata$x:0000D59B                 db  19h
.xdata$x:0000D59C                 db    1
.xdata$x:0000D59D                 db    0
.xdata$x:0000D59E                 db    0
.xdata$x:0000D59F                 db    0
.xdata$x:0000D5A0                 dd offset __unwindtable$?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
.xdata$x:0000D5A4                 db    0
.xdata$x:0000D5A5                 db    0
.xdata$x:0000D5A6                 db    0
.xdata$x:0000D5A7                 db    0
.xdata$x:0000D5A8                 db    0
.xdata$x:0000D5A9                 db    0
.xdata$x:0000D5AA                 db    0
.xdata$x:0000D5AB                 db    0
.xdata$x:0000D5AC                 db    0
.xdata$x:0000D5AD                 db    0
.xdata$x:0000D5AE                 db    0
.xdata$x:0000D5AF                 db    0
.xdata$x:0000D5B0                 db    0
.xdata$x:0000D5B1                 db    0
.xdata$x:0000D5B2                 db    0
.xdata$x:0000D5B3                 db    0
.xdata$x:0000D5B4                 db    0
.xdata$x:0000D5B5                 db    0
.xdata$x:0000D5B6                 db    0
.xdata$x:0000D5B7                 db    0
.xdata$x:0000D5B8                 db    0
.xdata$x:0000D5B9                 db    0
.xdata$x:0000D5BA                 db    0
.xdata$x:0000D5BB                 db    0
.xdata$x:0000D5BC __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z db  22h ; "
.xdata$x:0000D5BC                                         ; DATA XREF: __ehhandler$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z+1Eo
.xdata$x:0000D5BD                 db    5
.xdata$x:0000D5BE                 db  93h ; ô
.xdata$x:0000D5BF                 db  19h
.xdata$x:0000D5C0                 db    1
.xdata$x:0000D5C1                 db    0
.xdata$x:0000D5C2                 db    0
.xdata$x:0000D5C3                 db    0
.xdata$x:0000D5C4                 dd offset __unwindtable$?LoadFile@TiXmlDocument@@QAE_NPB_W@Z
.xdata$x:0000D5C8                 align 20h
.xdata$x:0000D5E0 __ehfuncinfo$?SaveFile@TiXmlDocument@@QBE_NXZ db  22h ; "
.xdata$x:0000D5E0                                         ; DATA XREF: __ehhandler$?SaveFile@TiXmlDocument@@QBE_NXZ+11o
.xdata$x:0000D5E1                 db    5
.xdata$x:0000D5E2                 db  93h ; ô
.xdata$x:0000D5E3                 db  19h
.xdata$x:0000D5E4                 db    1
.xdata$x:0000D5E5                 db    0
.xdata$x:0000D5E6                 db    0
.xdata$x:0000D5E7                 db    0
.xdata$x:0000D5E8                 dd offset __unwindtable$?SaveFile@TiXmlDocument@@QBE_NXZ
.xdata$x:0000D5EC                 db    0
.xdata$x:0000D5ED                 db    0
.xdata$x:0000D5EE                 db    0
.xdata$x:0000D5EF                 db    0
.xdata$x:0000D5F0                 db    0
.xdata$x:0000D5F1                 db    0
.xdata$x:0000D5F2                 db    0
.xdata$x:0000D5F3                 db    0
.xdata$x:0000D5F4                 db    0
.xdata$x:0000D5F5                 db    0
.xdata$x:0000D5F6                 db    0
.xdata$x:0000D5F7                 db    0
.xdata$x:0000D5F8                 db    0
.xdata$x:0000D5F9                 db    0
.xdata$x:0000D5FA                 db    0
.xdata$x:0000D5FB                 db    0
.xdata$x:0000D5FC                 db    0
.xdata$x:0000D5FD                 db    0
.xdata$x:0000D5FE                 db    0
.xdata$x:0000D5FF                 db    0
.xdata$x:0000D600                 db    0
.xdata$x:0000D601                 db    0
.xdata$x:0000D602                 db    0
.xdata$x:0000D603                 db    0
.xdata$x:0000D604 __ehfuncinfo$?LoadFile@TiXmlDocument@@QAE_NXZ db  22h ; "
.xdata$x:0000D604                                         ; DATA XREF: __ehhandler$?LoadFile@TiXmlDocument@@QAE_NXZ+11o
.xdata$x:0000D605                 db    5
.xdata$x:0000D606                 db  93h ; ô
.xdata$x:0000D607                 db  19h
.xdata$x:0000D608                 db    1
.xdata$x:0000D609                 db    0
.xdata$x:0000D60A                 db    0
.xdata$x:0000D60B                 db    0
.xdata$x:0000D60C                 dd offset __unwindtable$?LoadFile@TiXmlDocument@@QAE_NXZ
.xdata$x:0000D610                 db    0
.xdata$x:0000D611                 db    0
.xdata$x:0000D612                 db    0
.xdata$x:0000D613                 db    0
.xdata$x:0000D614                 db    0
.xdata$x:0000D615                 db    0
.xdata$x:0000D616                 db    0
.xdata$x:0000D617                 db    0
.xdata$x:0000D618                 db    0
.xdata$x:0000D619                 db    0
.xdata$x:0000D61A                 db    0
.xdata$x:0000D61B                 db    0
.xdata$x:0000D61C                 db    0
.xdata$x:0000D61D                 db    0
.xdata$x:0000D61E                 db    0
.xdata$x:0000D61F                 db    0
.xdata$x:0000D620                 db    0
.xdata$x:0000D621                 db    0
.xdata$x:0000D622                 db    0
.xdata$x:0000D623                 db    0
.xdata$x:0000D624                 db    0
.xdata$x:0000D625                 db    0
.xdata$x:0000D626                 db    0
.xdata$x:0000D627                 db    0
.xdata$x:0000D628 __ehfuncinfo$??0TiXmlDocument@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000D628                                         ; DATA XREF: __ehhandler$??0TiXmlDocument@@QAE@PB_W@Z+11o
.xdata$x:0000D629                 db    5
.xdata$x:0000D62A                 db  93h ; ô
.xdata$x:0000D62B                 db  19h
.xdata$x:0000D62C                 db    2
.xdata$x:0000D62D                 db    0
.xdata$x:0000D62E                 db    0
.xdata$x:0000D62F                 db    0
.xdata$x:0000D630                 dd offset __unwindtable$??0TiXmlDocument@@QAE@PB_W@Z
.xdata$x:0000D634                 db    0
.xdata$x:0000D635                 db    0
.xdata$x:0000D636                 db    0
.xdata$x:0000D637                 db    0
.xdata$x:0000D638                 db    0
.xdata$x:0000D639                 db    0
.xdata$x:0000D63A                 db    0
.xdata$x:0000D63B                 db    0
.xdata$x:0000D63C                 db    0
.xdata$x:0000D63D                 db    0
.xdata$x:0000D63E                 db    0
.xdata$x:0000D63F                 db    0
.xdata$x:0000D640                 db    0
.xdata$x:0000D641                 db    0
.xdata$x:0000D642                 db    0
.xdata$x:0000D643                 db    0
.xdata$x:0000D644                 db    0
.xdata$x:0000D645                 db    0
.xdata$x:0000D646                 db    0
.xdata$x:0000D647                 db    0
.xdata$x:0000D648                 db    0
.xdata$x:0000D649                 db    0
.xdata$x:0000D64A                 db    0
.xdata$x:0000D64B                 db    0
.xdata$x:0000D64C __ehfuncinfo$??0TiXmlDocument@@QAE@XZ db  22h ; "
.xdata$x:0000D64C                                         ; DATA XREF: __ehhandler$??0TiXmlDocument@@QAE@XZ+11o
.xdata$x:0000D64D                 db    5
.xdata$x:0000D64E                 db  93h ; ô
.xdata$x:0000D64F                 db  19h
.xdata$x:0000D650                 db    2
.xdata$x:0000D651                 db    0
.xdata$x:0000D652                 db    0
.xdata$x:0000D653                 db    0
.xdata$x:0000D654                 dd offset __unwindtable$??0TiXmlDocument@@QAE@XZ
.xdata$x:0000D658                 db    0
.xdata$x:0000D659                 db    0
.xdata$x:0000D65A                 db    0
.xdata$x:0000D65B                 db    0
.xdata$x:0000D65C                 db    0
.xdata$x:0000D65D                 db    0
.xdata$x:0000D65E                 db    0
.xdata$x:0000D65F                 db    0
.xdata$x:0000D660                 db    0
.xdata$x:0000D661                 db    0
.xdata$x:0000D662                 db    0
.xdata$x:0000D663                 db    0
.xdata$x:0000D664                 db    0
.xdata$x:0000D665                 db    0
.xdata$x:0000D666                 db    0
.xdata$x:0000D667                 db    0
.xdata$x:0000D668                 db    0
.xdata$x:0000D669                 db    0
.xdata$x:0000D66A                 db    0
.xdata$x:0000D66B                 db    0
.xdata$x:0000D66C                 db    0
.xdata$x:0000D66D                 db    0
.xdata$x:0000D66E                 db    0
.xdata$x:0000D66F                 db    0
.xdata$x:0000D670 __ehfuncinfo$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D670                                         ; DATA XREF: __ehhandler$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D671                 db    5
.xdata$x:0000D672                 db  93h ; ô
.xdata$x:0000D673                 db  19h
.xdata$x:0000D674                 db    1
.xdata$x:0000D675                 db    0
.xdata$x:0000D676                 db    0
.xdata$x:0000D677                 db    0
.xdata$x:0000D678                 dd offset __unwindtable$?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
.xdata$x:0000D67C                 db    0
.xdata$x:0000D67D                 db    0
.xdata$x:0000D67E                 db    0
.xdata$x:0000D67F                 db    0
.xdata$x:0000D680                 db    0
.xdata$x:0000D681                 db    0
.xdata$x:0000D682                 db    0
.xdata$x:0000D683                 db    0
.xdata$x:0000D684                 db    0
.xdata$x:0000D685                 db    0
.xdata$x:0000D686                 db    0
.xdata$x:0000D687                 db    0
.xdata$x:0000D688                 db    0
.xdata$x:0000D689                 db    0
.xdata$x:0000D68A                 db    0
.xdata$x:0000D68B                 db    0
.xdata$x:0000D68C                 db    0
.xdata$x:0000D68D                 db    0
.xdata$x:0000D68E                 db    0
.xdata$x:0000D68F                 db    0
.xdata$x:0000D690                 db    0
.xdata$x:0000D691                 db    0
.xdata$x:0000D692                 db    0
.xdata$x:0000D693                 db    0
.xdata$x:0000D694 __ehfuncinfo$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D694                                         ; DATA XREF: __ehhandler$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D695                 db    5
.xdata$x:0000D696                 db  93h ; ô
.xdata$x:0000D697                 db  19h
.xdata$x:0000D698                 db    1
.xdata$x:0000D699                 db    0
.xdata$x:0000D69A                 db    0
.xdata$x:0000D69B                 db    0
.xdata$x:0000D69C                 dd offset __unwindtable$?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
.xdata$x:0000D6A0                 db    0
.xdata$x:0000D6A1                 db    0
.xdata$x:0000D6A2                 db    0
.xdata$x:0000D6A3                 db    0
.xdata$x:0000D6A4                 db    0
.xdata$x:0000D6A5                 db    0
.xdata$x:0000D6A6                 db    0
.xdata$x:0000D6A7                 db    0
.xdata$x:0000D6A8                 db    0
.xdata$x:0000D6A9                 db    0
.xdata$x:0000D6AA                 db    0
.xdata$x:0000D6AB                 db    0
.xdata$x:0000D6AC                 db    0
.xdata$x:0000D6AD                 db    0
.xdata$x:0000D6AE                 db    0
.xdata$x:0000D6AF                 db    0
.xdata$x:0000D6B0                 db    0
.xdata$x:0000D6B1                 db    0
.xdata$x:0000D6B2                 db    0
.xdata$x:0000D6B3                 db    0
.xdata$x:0000D6B4                 db    0
.xdata$x:0000D6B5                 db    0
.xdata$x:0000D6B6                 db    0
.xdata$x:0000D6B7                 db    0
.xdata$x:0000D6B8 __ehfuncinfo$??0TiXmlDeclaration@@QAE@PB_W00@Z db  22h ; "
.xdata$x:0000D6B8                                         ; DATA XREF: __ehhandler$??0TiXmlDeclaration@@QAE@PB_W00@Z+11o
.xdata$x:0000D6B9                 db    5
.xdata$x:0000D6BA                 db  93h ; ô
.xdata$x:0000D6BB                 db  19h
.xdata$x:0000D6BC                 db    4
.xdata$x:0000D6BD                 db    0
.xdata$x:0000D6BE                 db    0
.xdata$x:0000D6BF                 db    0
.xdata$x:0000D6C0                 dd offset __unwindtable$??0TiXmlDeclaration@@QAE@PB_W00@Z
.xdata$x:0000D6C4                 db    0
.xdata$x:0000D6C5                 db    0
.xdata$x:0000D6C6                 db    0
.xdata$x:0000D6C7                 db    0
.xdata$x:0000D6C8                 db    0
.xdata$x:0000D6C9                 db    0
.xdata$x:0000D6CA                 db    0
.xdata$x:0000D6CB                 db    0
.xdata$x:0000D6CC                 db    0
.xdata$x:0000D6CD                 db    0
.xdata$x:0000D6CE                 db    0
.xdata$x:0000D6CF                 db    0
.xdata$x:0000D6D0                 db    0
.xdata$x:0000D6D1                 db    0
.xdata$x:0000D6D2                 db    0
.xdata$x:0000D6D3                 db    0
.xdata$x:0000D6D4                 db    0
.xdata$x:0000D6D5                 db    0
.xdata$x:0000D6D6                 db    0
.xdata$x:0000D6D7                 db    0
.xdata$x:0000D6D8                 db    0
.xdata$x:0000D6D9                 db    0
.xdata$x:0000D6DA                 db    0
.xdata$x:0000D6DB                 db    0
.xdata$x:0000D6DC __ehfuncinfo$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D6DC                                         ; DATA XREF: __ehhandler$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D6DD                 db    5
.xdata$x:0000D6DE                 db  93h ; ô
.xdata$x:0000D6DF                 db  19h
.xdata$x:0000D6E0                 db    1
.xdata$x:0000D6E1                 db    0
.xdata$x:0000D6E2                 db    0
.xdata$x:0000D6E3                 db    0
.xdata$x:0000D6E4                 dd offset __unwindtable$?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
.xdata$x:0000D6E8                 align 20h
.xdata$x:0000D700 __ehfuncinfo$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z db  22h ; "
.xdata$x:0000D700                                         ; DATA XREF: __ehhandler$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z+1Bo
.xdata$x:0000D701                 db    5
.xdata$x:0000D702                 db  93h ; ô
.xdata$x:0000D703                 db  19h
.xdata$x:0000D704                 db    1
.xdata$x:0000D705                 db    0
.xdata$x:0000D706                 db    0
.xdata$x:0000D707                 db    0
.xdata$x:0000D708                 dd offset __unwindtable$?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
.xdata$x:0000D70C                 db    0
.xdata$x:0000D70D                 db    0
.xdata$x:0000D70E                 db    0
.xdata$x:0000D70F                 db    0
.xdata$x:0000D710                 db    0
.xdata$x:0000D711                 db    0
.xdata$x:0000D712                 db    0
.xdata$x:0000D713                 db    0
.xdata$x:0000D714                 db    0
.xdata$x:0000D715                 db    0
.xdata$x:0000D716                 db    0
.xdata$x:0000D717                 db    0
.xdata$x:0000D718                 db    0
.xdata$x:0000D719                 db    0
.xdata$x:0000D71A                 db    0
.xdata$x:0000D71B                 db    0
.xdata$x:0000D71C                 db    0
.xdata$x:0000D71D                 db    0
.xdata$x:0000D71E                 db    0
.xdata$x:0000D71F                 db    0
.xdata$x:0000D720                 db    0
.xdata$x:0000D721                 db    0
.xdata$x:0000D722                 db    0
.xdata$x:0000D723                 db    0
.xdata$x:0000D724 __ehfuncinfo$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D724                                         ; DATA XREF: __ehhandler$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D725                 db    5
.xdata$x:0000D726                 db  93h ; ô
.xdata$x:0000D727                 db  19h
.xdata$x:0000D728                 db    1
.xdata$x:0000D729                 db    0
.xdata$x:0000D72A                 db    0
.xdata$x:0000D72B                 db    0
.xdata$x:0000D72C                 dd offset __unwindtable$?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
.xdata$x:0000D730                 db    0
.xdata$x:0000D731                 db    0
.xdata$x:0000D732                 db    0
.xdata$x:0000D733                 db    0
.xdata$x:0000D734                 db    0
.xdata$x:0000D735                 db    0
.xdata$x:0000D736                 db    0
.xdata$x:0000D737                 db    0
.xdata$x:0000D738                 db    0
.xdata$x:0000D739                 db    0
.xdata$x:0000D73A                 db    0
.xdata$x:0000D73B                 db    0
.xdata$x:0000D73C                 db    0
.xdata$x:0000D73D                 db    0
.xdata$x:0000D73E                 db    0
.xdata$x:0000D73F                 db    0
.xdata$x:0000D740                 db    0
.xdata$x:0000D741                 db    0
.xdata$x:0000D742                 db    0
.xdata$x:0000D743                 db    0
.xdata$x:0000D744                 db    0
.xdata$x:0000D745                 db    0
.xdata$x:0000D746                 db    0
.xdata$x:0000D747                 db    0
.xdata$x:0000D748 __ehfuncinfo$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ db  22h ; "
.xdata$x:0000D748                                         ; DATA XREF: __ehhandler$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ+11o
.xdata$x:0000D749                 db    5
.xdata$x:0000D74A                 db  93h ; ô
.xdata$x:0000D74B                 db  19h
.xdata$x:0000D74C                 db    1
.xdata$x:0000D74D                 db    0
.xdata$x:0000D74E                 db    0
.xdata$x:0000D74F                 db    0
.xdata$x:0000D750                 dd offset __unwindtable$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ
.xdata$x:0000D754                 db    0
.xdata$x:0000D755                 db    0
.xdata$x:0000D756                 db    0
.xdata$x:0000D757                 db    0
.xdata$x:0000D758                 db    0
.xdata$x:0000D759                 db    0
.xdata$x:0000D75A                 db    0
.xdata$x:0000D75B                 db    0
.xdata$x:0000D75C                 db    0
.xdata$x:0000D75D                 db    0
.xdata$x:0000D75E                 db    0
.xdata$x:0000D75F                 db    0
.xdata$x:0000D760                 db    0
.xdata$x:0000D761                 db    0
.xdata$x:0000D762                 db    0
.xdata$x:0000D763                 db    0
.xdata$x:0000D764                 db    0
.xdata$x:0000D765                 db    0
.xdata$x:0000D766                 db    0
.xdata$x:0000D767                 db    0
.xdata$x:0000D768                 db    0
.xdata$x:0000D769                 db    0
.xdata$x:0000D76A                 db    0
.xdata$x:0000D76B                 db    0
.xdata$x:0000D76C __ehfuncinfo$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z db  22h ; "
.xdata$x:0000D76C                                         ; DATA XREF: __ehhandler$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z+11o
.xdata$x:0000D76D                 db    5
.xdata$x:0000D76E                 db  93h ; ô
.xdata$x:0000D76F                 db  19h
.xdata$x:0000D770                 db    1
.xdata$x:0000D771                 db    0
.xdata$x:0000D772                 db    0
.xdata$x:0000D773                 db    0
.xdata$x:0000D774                 dd offset __unwindtable$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z
.xdata$x:0000D778                 db    0
.xdata$x:0000D779                 db    0
.xdata$x:0000D77A                 db    0
.xdata$x:0000D77B                 db    0
.xdata$x:0000D77C                 db    0
.xdata$x:0000D77D                 db    0
.xdata$x:0000D77E                 db    0
.xdata$x:0000D77F                 db    0
.xdata$x:0000D780                 db    0
.xdata$x:0000D781                 db    0
.xdata$x:0000D782                 db    0
.xdata$x:0000D783                 db    0
.xdata$x:0000D784                 db    0
.xdata$x:0000D785                 db    0
.xdata$x:0000D786                 db    0
.xdata$x:0000D787                 db    0
.xdata$x:0000D788                 db    0
.xdata$x:0000D789                 db    0
.xdata$x:0000D78A                 db    0
.xdata$x:0000D78B                 db    0
.xdata$x:0000D78C                 db    0
.xdata$x:0000D78D                 db    0
.xdata$x:0000D78E                 db    0
.xdata$x:0000D78F                 db    0
.xdata$x:0000D790 __ehfuncinfo$??1TiXmlElement@@UAE@XZ db  22h ; "
.xdata$x:0000D790                                         ; DATA XREF: __ehhandler$??1TiXmlElement@@UAE@XZ+11o
.xdata$x:0000D791                 db    5
.xdata$x:0000D792                 db  93h ; ô
.xdata$x:0000D793                 db  19h
.xdata$x:0000D794                 db    2
.xdata$x:0000D795                 db    0
.xdata$x:0000D796                 db    0
.xdata$x:0000D797                 db    0
.xdata$x:0000D798                 dd offset __unwindtable$??1TiXmlElement@@UAE@XZ
.xdata$x:0000D79C                 db    0
.xdata$x:0000D79D                 db    0
.xdata$x:0000D79E                 db    0
.xdata$x:0000D79F                 db    0
.xdata$x:0000D7A0                 db    0
.xdata$x:0000D7A1                 db    0
.xdata$x:0000D7A2                 db    0
.xdata$x:0000D7A3                 db    0
.xdata$x:0000D7A4                 db    0
.xdata$x:0000D7A5                 db    0
.xdata$x:0000D7A6                 db    0
.xdata$x:0000D7A7                 db    0
.xdata$x:0000D7A8                 db    0
.xdata$x:0000D7A9                 db    0
.xdata$x:0000D7AA                 db    0
.xdata$x:0000D7AB                 db    0
.xdata$x:0000D7AC                 db    0
.xdata$x:0000D7AD                 db    0
.xdata$x:0000D7AE                 db    0
.xdata$x:0000D7AF                 db    0
.xdata$x:0000D7B0                 db    0
.xdata$x:0000D7B1                 db    0
.xdata$x:0000D7B2                 db    0
.xdata$x:0000D7B3                 db    0
.xdata$x:0000D7B4 __ehfuncinfo$??0TiXmlElement@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000D7B4                                         ; DATA XREF: __ehhandler$??0TiXmlElement@@QAE@PB_W@Z+11o
.xdata$x:0000D7B5                 db    5
.xdata$x:0000D7B6                 db  93h ; ô
.xdata$x:0000D7B7                 db  19h
.xdata$x:0000D7B8                 db    2
.xdata$x:0000D7B9                 db    0
.xdata$x:0000D7BA                 db    0
.xdata$x:0000D7BB                 db    0
.xdata$x:0000D7BC                 dd offset __unwindtable$??0TiXmlElement@@QAE@PB_W@Z
.xdata$x:0000D7C0                 db    0
.xdata$x:0000D7C1                 db    0
.xdata$x:0000D7C2                 db    0
.xdata$x:0000D7C3                 db    0
.xdata$x:0000D7C4                 db    0
.xdata$x:0000D7C5                 db    0
.xdata$x:0000D7C6                 db    0
.xdata$x:0000D7C7                 db    0
.xdata$x:0000D7C8                 db    0
.xdata$x:0000D7C9                 db    0
.xdata$x:0000D7CA                 db    0
.xdata$x:0000D7CB                 db    0
.xdata$x:0000D7CC                 db    0
.xdata$x:0000D7CD                 db    0
.xdata$x:0000D7CE                 db    0
.xdata$x:0000D7CF                 db    0
.xdata$x:0000D7D0                 db    0
.xdata$x:0000D7D1                 db    0
.xdata$x:0000D7D2                 db    0
.xdata$x:0000D7D3                 db    0
.xdata$x:0000D7D4                 db    0
.xdata$x:0000D7D5                 db    0
.xdata$x:0000D7D6                 db    0
.xdata$x:0000D7D7                 db    0
.xdata$x:0000D7D8 __ehfuncinfo$??1TiXmlAttributeSet@@QAE@XZ db  22h ; "
.xdata$x:0000D7D8                                         ; DATA XREF: __ehhandler$??1TiXmlAttributeSet@@QAE@XZ+11o
.xdata$x:0000D7D9                 db    5
.xdata$x:0000D7DA                 db  93h ; ô
.xdata$x:0000D7DB                 db  19h
.xdata$x:0000D7DC                 db    1
.xdata$x:0000D7DD                 db    0
.xdata$x:0000D7DE                 db    0
.xdata$x:0000D7DF                 db    0
.xdata$x:0000D7E0                 dd offset __unwindtable$??1TiXmlAttributeSet@@QAE@XZ
.xdata$x:0000D7E4                 db    0
.xdata$x:0000D7E5                 db    0
.xdata$x:0000D7E6                 db    0
.xdata$x:0000D7E7                 db    0
.xdata$x:0000D7E8                 db    0
.xdata$x:0000D7E9                 db    0
.xdata$x:0000D7EA                 db    0
.xdata$x:0000D7EB                 db    0
.xdata$x:0000D7EC                 db    0
.xdata$x:0000D7ED                 db    0
.xdata$x:0000D7EE                 db    0
.xdata$x:0000D7EF                 db    0
.xdata$x:0000D7F0                 db    0
.xdata$x:0000D7F1                 db    0
.xdata$x:0000D7F2                 db    0
.xdata$x:0000D7F3                 db    0
.xdata$x:0000D7F4                 db    0
.xdata$x:0000D7F5                 db    0
.xdata$x:0000D7F6                 db    0
.xdata$x:0000D7F7                 db    0
.xdata$x:0000D7F8                 db    0
.xdata$x:0000D7F9                 db    0
.xdata$x:0000D7FA                 db    0
.xdata$x:0000D7FB                 db    0
.xdata$x:0000D7FC __ehfuncinfo$??0TiXmlAttributeSet@@QAE@XZ db  22h ; "
.xdata$x:0000D7FC                                         ; DATA XREF: __ehhandler$??0TiXmlAttributeSet@@QAE@XZ+11o
.xdata$x:0000D7FD                 db    5
.xdata$x:0000D7FE                 db  93h ; ô
.xdata$x:0000D7FF                 db  19h
.xdata$x:0000D800                 db    1
.xdata$x:0000D801                 db    0
.xdata$x:0000D802                 db    0
.xdata$x:0000D803                 db    0
.xdata$x:0000D804                 dd offset __unwindtable$??0TiXmlAttributeSet@@QAE@XZ
.xdata$x:0000D808                 align 20h
.xdata$x:0000D820 __ehfuncinfo$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z db  22h ; "
.xdata$x:0000D820                                         ; DATA XREF: __ehhandler$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z+1Bo
.xdata$x:0000D821                 db    5
.xdata$x:0000D822                 db  93h ; ô
.xdata$x:0000D823                 db  19h
.xdata$x:0000D824                 db    4
.xdata$x:0000D825                 db    0
.xdata$x:0000D826                 db    0
.xdata$x:0000D827                 db    0
.xdata$x:0000D828                 dd offset __unwindtable$?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
.xdata$x:0000D82C                 db    0
.xdata$x:0000D82D                 db    0
.xdata$x:0000D82E                 db    0
.xdata$x:0000D82F                 db    0
.xdata$x:0000D830                 db    0
.xdata$x:0000D831                 db    0
.xdata$x:0000D832                 db    0
.xdata$x:0000D833                 db    0
.xdata$x:0000D834                 db    0
.xdata$x:0000D835                 db    0
.xdata$x:0000D836                 db    0
.xdata$x:0000D837                 db    0
.xdata$x:0000D838                 db    0
.xdata$x:0000D839                 db    0
.xdata$x:0000D83A                 db    0
.xdata$x:0000D83B                 db    0
.xdata$x:0000D83C                 db    0
.xdata$x:0000D83D                 db    0
.xdata$x:0000D83E                 db    0
.xdata$x:0000D83F                 db    0
.xdata$x:0000D840                 db    0
.xdata$x:0000D841                 db    0
.xdata$x:0000D842                 db    0
.xdata$x:0000D843                 db    0
.xdata$x:0000D844 __ehfuncinfo$??0TiXmlNode@@IAE@W4NodeType@0@@Z db  22h ; "
.xdata$x:0000D844                                         ; DATA XREF: __ehhandler$??0TiXmlNode@@IAE@W4NodeType@0@@Z+11o
.xdata$x:0000D845                 db    5
.xdata$x:0000D846                 db  93h ; ô
.xdata$x:0000D847                 db  19h
.xdata$x:0000D848                 db    2
.xdata$x:0000D849                 db    0
.xdata$x:0000D84A                 db    0
.xdata$x:0000D84B                 db    0
.xdata$x:0000D84C                 dd offset __unwindtable$??0TiXmlNode@@IAE@W4NodeType@0@@Z
.xdata$x:0000D850                 db    0
.xdata$x:0000D851                 db    0
.xdata$x:0000D852                 db    0
.xdata$x:0000D853                 db    0
.xdata$x:0000D854                 db    0
.xdata$x:0000D855                 db    0
.xdata$x:0000D856                 db    0
.xdata$x:0000D857                 db    0
.xdata$x:0000D858                 db    0
.xdata$x:0000D859                 db    0
.xdata$x:0000D85A                 db    0
.xdata$x:0000D85B                 db    0
.xdata$x:0000D85C                 db    0
.xdata$x:0000D85D                 db    0
.xdata$x:0000D85E                 db    0
.xdata$x:0000D85F                 db    0
.xdata$x:0000D860                 db    0
.xdata$x:0000D861                 db    0
.xdata$x:0000D862                 db    0
.xdata$x:0000D863                 db    0
.xdata$x:0000D864                 db    0
.xdata$x:0000D865                 db    0
.xdata$x:0000D866                 db    0
.xdata$x:0000D867                 db    0
.xdata$x:0000D868 __ehfuncinfo$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z db  22h ; "
.xdata$x:0000D868                                         ; DATA XREF: __ehhandler$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z+1Bo
.xdata$x:0000D869                 db    5
.xdata$x:0000D86A                 db  93h ; ô
.xdata$x:0000D86B                 db  19h
.xdata$x:0000D86C                 db    2
.xdata$x:0000D86D                 db    0
.xdata$x:0000D86E                 db    0
.xdata$x:0000D86F                 db    0
.xdata$x:0000D870                 dd offset __unwindtable$?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.xdata$x:0000D874                 db    0
.xdata$x:0000D875                 db    0
.xdata$x:0000D876                 db    0
.xdata$x:0000D877                 db    0
.xdata$x:0000D878                 db    0
.xdata$x:0000D879                 db    0
.xdata$x:0000D87A                 db    0
.xdata$x:0000D87B                 db    0
.xdata$x:0000D87C                 db    0
.xdata$x:0000D87D                 db    0
.xdata$x:0000D87E                 db    0
.xdata$x:0000D87F                 db    0
.xdata$x:0000D880                 db    0
.xdata$x:0000D881                 db    0
.xdata$x:0000D882                 db    0
.xdata$x:0000D883                 db    0
.xdata$x:0000D884                 db    0
.xdata$x:0000D885                 db    0
.xdata$x:0000D886                 db    0
.xdata$x:0000D887                 db    0
.xdata$x:0000D888                 db    0
.xdata$x:0000D889                 db    0
.xdata$x:0000D88A                 db    0
.xdata$x:0000D88B                 db    0
.xdata$x:0000D88C __ehfuncinfo$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z db  22h ; "
.xdata$x:0000D88C                                         ; DATA XREF: __ehhandler$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z+1Bo
.xdata$x:0000D88D                 db    5
.xdata$x:0000D88E                 db  93h ; ô
.xdata$x:0000D88F                 db  19h
.xdata$x:0000D890                 db    2
.xdata$x:0000D891                 db    0
.xdata$x:0000D892                 db    0
.xdata$x:0000D893                 db    0
.xdata$x:0000D894                 dd offset __unwindtable$?PreviousSibling@TiXmlNode@@QBEPAV1@PB_W@Z
.xdata$x:0000D898                 db    0
.xdata$x:0000D899                 db    0
.xdata$x:0000D89A                 db    0
.xdata$x:0000D89B                 db    0
.xdata$x:0000D89C                 db    0
.xdata$x:0000D89D                 db    0
.xdata$x:0000D89E                 db    0
.xdata$x:0000D89F                 db    0
.xdata$x:0000D8A0                 db    0
.xdata$x:0000D8A1                 db    0
.xdata$x:0000D8A2                 db    0
.xdata$x:0000D8A3                 db    0
.xdata$x:0000D8A4                 db    0
.xdata$x:0000D8A5                 db    0
.xdata$x:0000D8A6                 db    0
.xdata$x:0000D8A7                 db    0
.xdata$x:0000D8A8                 db    0
.xdata$x:0000D8A9                 db    0
.xdata$x:0000D8AA                 db    0
.xdata$x:0000D8AB                 db    0
.xdata$x:0000D8AC                 db    0
.xdata$x:0000D8AD                 db    0
.xdata$x:0000D8AE                 db    0
.xdata$x:0000D8AF                 db    0
.xdata$x:0000D8B0 __ehfuncinfo$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z db  22h ; "
.xdata$x:0000D8B0                                         ; DATA XREF: __ehhandler$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z+1Bo
.xdata$x:0000D8B1                 db    5
.xdata$x:0000D8B2                 db  93h ; ô
.xdata$x:0000D8B3                 db  19h
.xdata$x:0000D8B4                 db    2
.xdata$x:0000D8B5                 db    0
.xdata$x:0000D8B6                 db    0
.xdata$x:0000D8B7                 db    0
.xdata$x:0000D8B8                 dd offset __unwindtable$?LastChild@TiXmlNode@@QBEPAV1@PB_W@Z
.xdata$x:0000D8BC                 db    0
.xdata$x:0000D8BD                 db    0
.xdata$x:0000D8BE                 db    0
.xdata$x:0000D8BF                 db    0
.xdata$x:0000D8C0                 db    0
.xdata$x:0000D8C1                 db    0
.xdata$x:0000D8C2                 db    0
.xdata$x:0000D8C3                 db    0
.xdata$x:0000D8C4                 db    0
.xdata$x:0000D8C5                 db    0
.xdata$x:0000D8C6                 db    0
.xdata$x:0000D8C7                 db    0
.xdata$x:0000D8C8                 db    0
.xdata$x:0000D8C9                 db    0
.xdata$x:0000D8CA                 db    0
.xdata$x:0000D8CB                 db    0
.xdata$x:0000D8CC                 db    0
.xdata$x:0000D8CD                 db    0
.xdata$x:0000D8CE                 db    0
.xdata$x:0000D8CF                 db    0
.xdata$x:0000D8D0                 db    0
.xdata$x:0000D8D1                 db    0
.xdata$x:0000D8D2                 db    0
.xdata$x:0000D8D3                 db    0
.xdata$x:0000D8D4 __ehfuncinfo$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z db  22h ; "
.xdata$x:0000D8D4                                         ; DATA XREF: __ehhandler$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z+1Bo
.xdata$x:0000D8D5                 db    5
.xdata$x:0000D8D6                 db  93h ; ô
.xdata$x:0000D8D7                 db  19h
.xdata$x:0000D8D8                 db    2
.xdata$x:0000D8D9                 db    0
.xdata$x:0000D8DA                 db    0
.xdata$x:0000D8DB                 db    0
.xdata$x:0000D8DC                 dd offset __unwindtable$?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z
.xdata$x:0000D8E0                 db    0
.xdata$x:0000D8E1                 db    0
.xdata$x:0000D8E2                 db    0
.xdata$x:0000D8E3                 db    0
.xdata$x:0000D8E4                 db    0
.xdata$x:0000D8E5                 db    0
.xdata$x:0000D8E6                 db    0
.xdata$x:0000D8E7                 db    0
.xdata$x:0000D8E8                 db    0
.xdata$x:0000D8E9                 db    0
.xdata$x:0000D8EA                 db    0
.xdata$x:0000D8EB                 db    0
.xdata$x:0000D8EC                 db    0
.xdata$x:0000D8ED                 db    0
.xdata$x:0000D8EE                 db    0
.xdata$x:0000D8EF                 db    0
.xdata$x:0000D8F0                 db    0
.xdata$x:0000D8F1                 db    0
.xdata$x:0000D8F2                 db    0
.xdata$x:0000D8F3                 db    0
.xdata$x:0000D8F4                 db    0
.xdata$x:0000D8F5                 db    0
.xdata$x:0000D8F6                 db    0
.xdata$x:0000D8F7                 db    0
.xdata$x:0000D8F8 __ehfuncinfo$??1TiXmlNode@@UAE@XZ db  22h ; "
.xdata$x:0000D8F8                                         ; DATA XREF: __ehhandler$??1TiXmlNode@@UAE@XZ+11o
.xdata$x:0000D8F9                 db    5
.xdata$x:0000D8FA                 db  93h ; ô
.xdata$x:0000D8FB                 db  19h
.xdata$x:0000D8FC                 db    2
.xdata$x:0000D8FD                 db    0
.xdata$x:0000D8FE                 db    0
.xdata$x:0000D8FF                 db    0
.xdata$x:0000D900                 dd offset __unwindtable$??1TiXmlNode@@UAE@XZ
.xdata$x:0000D904                 db    0
.xdata$x:0000D905                 db    0
.xdata$x:0000D906                 db    0
.xdata$x:0000D907                 db    0
.xdata$x:0000D908                 db    0
.xdata$x:0000D909                 db    0
.xdata$x:0000D90A                 db    0
.xdata$x:0000D90B                 db    0
.xdata$x:0000D90C                 db    0
.xdata$x:0000D90D                 db    0
.xdata$x:0000D90E                 db    0
.xdata$x:0000D90F                 db    0
.xdata$x:0000D910                 db    0
.xdata$x:0000D911                 db    0
.xdata$x:0000D912                 db    0
.xdata$x:0000D913                 db    0
.xdata$x:0000D914                 db    0
.xdata$x:0000D915                 db    0
.xdata$x:0000D916                 db    0
.xdata$x:0000D917                 db    0
.xdata$x:0000D918                 db    0
.xdata$x:0000D919                 db    0
.xdata$x:0000D91A                 db    0
.xdata$x:0000D91B                 db    0
.xdata$x:0000D91C __ehfuncinfo$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z db  22h ; "
.xdata$x:0000D91C                                         ; DATA XREF: __ehhandler$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z+1Eo
.xdata$x:0000D91D                 db    5
.xdata$x:0000D91E                 db  93h ; ô
.xdata$x:0000D91F                 db  19h
.xdata$x:0000D920                 db    2
.xdata$x:0000D921                 db    0
.xdata$x:0000D922                 db    0
.xdata$x:0000D923                 db    0
.xdata$x:0000D924                 dd offset __unwindtable$??6@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@ABVTiXmlNode@@@Z
.xdata$x:0000D928                 align 20h
.xdata$x:0000D940 __ehfuncinfo$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z db  22h ; "
.xdata$x:0000D940                                         ; DATA XREF: __ehhandler$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z+1Bo
.xdata$x:0000D941                 db    5
.xdata$x:0000D942                 db  93h ; ô
.xdata$x:0000D943                 db  19h
.xdata$x:0000D944                 db    1
.xdata$x:0000D945                 db    0
.xdata$x:0000D946                 db    0
.xdata$x:0000D947                 db    0
.xdata$x:0000D948                 dd offset __unwindtable$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z
.xdata$x:0000D94C                 db    0
.xdata$x:0000D94D                 db    0
.xdata$x:0000D94E                 db    0
.xdata$x:0000D94F                 db    0
.xdata$x:0000D950                 db    0
.xdata$x:0000D951                 db    0
.xdata$x:0000D952                 db    0
.xdata$x:0000D953                 db    0
.xdata$x:0000D954                 db    0
.xdata$x:0000D955                 db    0
.xdata$x:0000D956                 db    0
.xdata$x:0000D957                 db    0
.xdata$x:0000D958                 db    0
.xdata$x:0000D959                 db    0
.xdata$x:0000D95A                 db    0
.xdata$x:0000D95B                 db    0
.xdata$x:0000D95C                 db    0
.xdata$x:0000D95D                 db    0
.xdata$x:0000D95E                 db    0
.xdata$x:0000D95F                 db    0
.xdata$x:0000D960                 db    0
.xdata$x:0000D961                 db    0
.xdata$x:0000D962                 db    0
.xdata$x:0000D963                 db    0
.xdata$x:0000D964 __ehfuncinfo$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z db  22h ; "
.xdata$x:0000D964                                         ; DATA XREF: __ehhandler$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z+1Bo
.xdata$x:0000D965                 db    5
.xdata$x:0000D966                 db  93h ; ô
.xdata$x:0000D967                 db  19h
.xdata$x:0000D968                 db    1
.xdata$x:0000D969                 db    0
.xdata$x:0000D96A                 db    0
.xdata$x:0000D96B                 db    0
.xdata$x:0000D96C                 dd offset __unwindtable$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z
.xdata$x:0000D970                 db    0
.xdata$x:0000D971                 db    0
.xdata$x:0000D972                 db    0
.xdata$x:0000D973                 db    0
.xdata$x:0000D974                 db    0
.xdata$x:0000D975                 db    0
.xdata$x:0000D976                 db    0
.xdata$x:0000D977                 db    0
.xdata$x:0000D978                 db    0
.xdata$x:0000D979                 db    0
.xdata$x:0000D97A                 db    0
.xdata$x:0000D97B                 db    0
.xdata$x:0000D97C                 db    0
.xdata$x:0000D97D                 db    0
.xdata$x:0000D97E                 db    0
.xdata$x:0000D97F                 db    0
.xdata$x:0000D980                 db    0
.xdata$x:0000D981                 db    0
.xdata$x:0000D982                 db    0
.xdata$x:0000D983                 db    0
.xdata$x:0000D984                 db    0
.xdata$x:0000D985                 db    0
.xdata$x:0000D986                 db    0
.xdata$x:0000D987                 db    0
.xdata$x:0000D987 _xdata$x        ends
.xdata$x:0000D987
.xdata$x:0000D988 ; ===========================================================================
.xdata$x:0000D988
.xdata$x:0000D988 ; Segment type: Pure data
.xdata$x:0000D988 ; Segment permissions: Read
.xdata$x:0000D988 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D988                 assume cs:_xdata$x
.xdata$x:0000D988                 ;org 0D988h
.xdata$x:0000D988 ; COMDAT (pick associative to section at 7F70)
.xdata$x:0000D988 __unwindtable$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:0000D988                                         ; DATA XREF: .xdata$x:0000D998o
.xdata$x:0000D989                 db 0FFh
.xdata$x:0000D98A                 db 0FFh
.xdata$x:0000D98B                 db 0FFh
.xdata$x:0000D98C                 dd offset __unwindfunclet$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:0000D990 __ehfuncinfo$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:0000D990                                         ; DATA XREF: __ehhandler$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:0000D991                 db    5
.xdata$x:0000D992                 db  93h ; ô
.xdata$x:0000D993                 db  19h
.xdata$x:0000D994                 db    1
.xdata$x:0000D995                 db    0
.xdata$x:0000D996                 db    0
.xdata$x:0000D997                 db    0
.xdata$x:0000D998                 dd offset __unwindtable$?SValue@TiXmlNode@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:0000D99C                 db    0
.xdata$x:0000D99D                 db    0
.xdata$x:0000D99E                 db    0
.xdata$x:0000D99F                 db    0
.xdata$x:0000D9A0                 db    0
.xdata$x:0000D9A1                 db    0
.xdata$x:0000D9A2                 db    0
.xdata$x:0000D9A3                 db    0
.xdata$x:0000D9A4                 db    0
.xdata$x:0000D9A5                 db    0
.xdata$x:0000D9A6                 db    0
.xdata$x:0000D9A7                 db    0
.xdata$x:0000D9A8                 db    0
.xdata$x:0000D9A9                 db    0
.xdata$x:0000D9AA                 db    0
.xdata$x:0000D9AB                 db    0
.xdata$x:0000D9AC                 db    0
.xdata$x:0000D9AD                 db    0
.xdata$x:0000D9AE                 db    0
.xdata$x:0000D9AF                 db    0
.xdata$x:0000D9B0                 db    0
.xdata$x:0000D9B1                 db    0
.xdata$x:0000D9B2                 db    0
.xdata$x:0000D9B3                 db    0
.xdata$x:0000D9B3 _xdata$x        ends
.xdata$x:0000D9B3
.xdata$x:0000D9B4 ; ===========================================================================
.xdata$x:0000D9B4
.xdata$x:0000D9B4 ; Segment type: Pure data
.xdata$x:0000D9B4 ; Segment permissions: Read
.xdata$x:0000D9B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D9B4                 assume cs:_xdata$x
.xdata$x:0000D9B4                 ;org 0D9B4h
.xdata$x:0000D9B4 ; COMDAT (pick associative to section at 5670)
.xdata$x:0000D9B4 __unwindtable$??0TiXmlAttribute@@QAE@XZ db 0FFh
.xdata$x:0000D9B4                                         ; DATA XREF: .xdata$x:0000D9D4o
.xdata$x:0000D9B5                 db 0FFh
.xdata$x:0000D9B6                 db 0FFh
.xdata$x:0000D9B7                 db 0FFh
.xdata$x:0000D9B8                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0
.xdata$x:0000D9BC                 align 10h
.xdata$x:0000D9C0                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1
.xdata$x:0000D9C4                 db    1
.xdata$x:0000D9C5                 db    0
.xdata$x:0000D9C6                 db    0
.xdata$x:0000D9C7                 db    0
.xdata$x:0000D9C8                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2
.xdata$x:0000D9CC __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ db  22h ; "
.xdata$x:0000D9CC                                         ; DATA XREF: __ehhandler$??0TiXmlAttribute@@QAE@XZ+11o
.xdata$x:0000D9CD                 db    5
.xdata$x:0000D9CE                 db  93h ; ô
.xdata$x:0000D9CF                 db  19h
.xdata$x:0000D9D0                 db    3
.xdata$x:0000D9D1                 db    0
.xdata$x:0000D9D2                 db    0
.xdata$x:0000D9D3                 db    0
.xdata$x:0000D9D4                 dd offset __unwindtable$??0TiXmlAttribute@@QAE@XZ
.xdata$x:0000D9D8                 db    0
.xdata$x:0000D9D9                 db    0
.xdata$x:0000D9DA                 db    0
.xdata$x:0000D9DB                 db    0
.xdata$x:0000D9DC                 db    0
.xdata$x:0000D9DD                 db    0
.xdata$x:0000D9DE                 db    0
.xdata$x:0000D9DF                 db    0
.xdata$x:0000D9E0                 db    0
.xdata$x:0000D9E1                 db    0
.xdata$x:0000D9E2                 db    0
.xdata$x:0000D9E3                 db    0
.xdata$x:0000D9E4                 db    0
.xdata$x:0000D9E5                 db    0
.xdata$x:0000D9E6                 db    0
.xdata$x:0000D9E7                 db    0
.xdata$x:0000D9E8                 db    0
.xdata$x:0000D9E9                 db    0
.xdata$x:0000D9EA                 db    0
.xdata$x:0000D9EB                 db    0
.xdata$x:0000D9EC                 db    0
.xdata$x:0000D9ED                 db    0
.xdata$x:0000D9EE                 db    0
.xdata$x:0000D9EF                 db    0
.xdata$x:0000D9EF _xdata$x        ends
.xdata$x:0000D9EF
.xdata$x:0000D9F0 ; ===========================================================================
.xdata$x:0000D9F0
.xdata$x:0000D9F0 ; Segment type: Pure data
.xdata$x:0000D9F0 ; Segment permissions: Read
.xdata$x:0000D9F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D9F0                 assume cs:_xdata$x
.xdata$x:0000D9F0                 ;org 0D9F0h
.xdata$x:0000D9F0 ; COMDAT (pick associative to section at 5580)
.xdata$x:0000D9F0 __unwindtable$??0TiXmlAttribute@@QAE@PB_W0@Z db 0FFh
.xdata$x:0000D9F0                                         ; DATA XREF: .xdata$x:0000DA10o
.xdata$x:0000D9F1                 db 0FFh
.xdata$x:0000D9F2                 db 0FFh
.xdata$x:0000D9F3                 db 0FFh
.xdata$x:0000D9F4                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$0
.xdata$x:0000D9F8                 db    0
.xdata$x:0000D9F9                 db    0
.xdata$x:0000D9FA                 db    0
.xdata$x:0000D9FB                 db    0
.xdata$x:0000D9FC                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$1
.xdata$x:0000DA00                 db    1
.xdata$x:0000DA01                 db    0
.xdata$x:0000DA02                 db    0
.xdata$x:0000DA03                 db    0
.xdata$x:0000DA04                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@PB_W0@Z$2
.xdata$x:0000DA08 __ehfuncinfo$??0TiXmlAttribute@@QAE@PB_W0@Z db  22h ; "
.xdata$x:0000DA08                                         ; DATA XREF: __ehhandler$??0TiXmlAttribute@@QAE@PB_W0@Z+11o
.xdata$x:0000DA09                 db    5
.xdata$x:0000DA0A                 db  93h ; ô
.xdata$x:0000DA0B                 db  19h
.xdata$x:0000DA0C                 db    3
.xdata$x:0000DA0D                 db    0
.xdata$x:0000DA0E                 db    0
.xdata$x:0000DA0F                 db    0
.xdata$x:0000DA10                 dd offset __unwindtable$??0TiXmlAttribute@@QAE@PB_W0@Z
.xdata$x:0000DA14                 db    0
.xdata$x:0000DA15                 db    0
.xdata$x:0000DA16                 db    0
.xdata$x:0000DA17                 db    0
.xdata$x:0000DA18                 db    0
.xdata$x:0000DA19                 db    0
.xdata$x:0000DA1A                 db    0
.xdata$x:0000DA1B                 db    0
.xdata$x:0000DA1C                 db    0
.xdata$x:0000DA1D                 db    0
.xdata$x:0000DA1E                 db    0
.xdata$x:0000DA1F                 db    0
.xdata$x:0000DA20                 db    0
.xdata$x:0000DA21                 db    0
.xdata$x:0000DA22                 db    0
.xdata$x:0000DA23                 db    0
.xdata$x:0000DA24                 db    0
.xdata$x:0000DA25                 db    0
.xdata$x:0000DA26                 db    0
.xdata$x:0000DA27                 db    0
.xdata$x:0000DA28                 db    0
.xdata$x:0000DA29                 db    0
.xdata$x:0000DA2A                 db    0
.xdata$x:0000DA2B                 db    0
.xdata$x:0000DA2B _xdata$x        ends
.xdata$x:0000DA2B
.xdata$x:0000DA2C ; ===========================================================================
.xdata$x:0000DA2C
.xdata$x:0000DA2C ; Segment type: Pure data
.xdata$x:0000DA2C ; Segment permissions: Read
.xdata$x:0000DA2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DA2C                 assume cs:_xdata$x
.xdata$x:0000DA2C                 ;org 0DA2Ch
.xdata$x:0000DA2C ; COMDAT (pick associative to section at 6B74)
.xdata$x:0000DA2C __unwindtable$??1TiXmlAttribute@@UAE@XZ db 0FFh
.xdata$x:0000DA2C                                         ; DATA XREF: .xdata$x:0000DA4Co
.xdata$x:0000DA2D                 db 0FFh
.xdata$x:0000DA2E                 db 0FFh
.xdata$x:0000DA2F                 db 0FFh
.xdata$x:0000DA30                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0
.xdata$x:0000DA34                 align 8
.xdata$x:0000DA38                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1
.xdata$x:0000DA3C                 db    1
.xdata$x:0000DA3D                 db    0
.xdata$x:0000DA3E                 db    0
.xdata$x:0000DA3F                 db    0
.xdata$x:0000DA40                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2
.xdata$x:0000DA44 __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ db  22h ; "
.xdata$x:0000DA44                                         ; DATA XREF: __ehhandler$??1TiXmlAttribute@@UAE@XZ+11o
.xdata$x:0000DA45                 db    5
.xdata$x:0000DA46                 db  93h ; ô
.xdata$x:0000DA47                 db  19h
.xdata$x:0000DA48                 db    3
.xdata$x:0000DA49                 db    0
.xdata$x:0000DA4A                 db    0
.xdata$x:0000DA4B                 db    0
.xdata$x:0000DA4C                 dd offset __unwindtable$??1TiXmlAttribute@@UAE@XZ
.xdata$x:0000DA50                 db    0
.xdata$x:0000DA51                 db    0
.xdata$x:0000DA52                 db    0
.xdata$x:0000DA53                 db    0
.xdata$x:0000DA54                 db    0
.xdata$x:0000DA55                 db    0
.xdata$x:0000DA56                 db    0
.xdata$x:0000DA57                 db    0
.xdata$x:0000DA58                 db    0
.xdata$x:0000DA59                 db    0
.xdata$x:0000DA5A                 db    0
.xdata$x:0000DA5B                 db    0
.xdata$x:0000DA5C                 db    0
.xdata$x:0000DA5D                 db    0
.xdata$x:0000DA5E                 db    0
.xdata$x:0000DA5F                 db    0
.xdata$x:0000DA60                 db    0
.xdata$x:0000DA61                 db    0
.xdata$x:0000DA62                 db    0
.xdata$x:0000DA63                 db    0
.xdata$x:0000DA64                 db    0
.xdata$x:0000DA65                 db    0
.xdata$x:0000DA66                 db    0
.xdata$x:0000DA67                 db    0
.xdata$x:0000DA67 _xdata$x        ends
.xdata$x:0000DA67
.xdata$x:0000DA68 ; ===========================================================================
.xdata$x:0000DA68
.xdata$x:0000DA68 ; Segment type: Pure data
.xdata$x:0000DA68 ; Segment permissions: Read
.xdata$x:0000DA68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DA68                 assume cs:_xdata$x
.xdata$x:0000DA68                 ;org 0DA68h
.xdata$x:0000DA68 ; COMDAT (pick associative to section at 5764)
.xdata$x:0000DA68 __unwindtable$??0TiXmlComment@@QAE@XZ db 0FFh
.xdata$x:0000DA68                                         ; DATA XREF: .xdata$x:0000DA78o
.xdata$x:0000DA69                 db 0FFh
.xdata$x:0000DA6A                 db 0FFh
.xdata$x:0000DA6B                 db 0FFh
.xdata$x:0000DA6C                 dd offset __unwindfunclet$??0TiXmlComment@@QAE@XZ$0
.xdata$x:0000DA70 __ehfuncinfo$??0TiXmlComment@@QAE@XZ db  22h ; "
.xdata$x:0000DA70                                         ; DATA XREF: __ehhandler$??0TiXmlComment@@QAE@XZ+11o
.xdata$x:0000DA71                 db    5
.xdata$x:0000DA72                 db  93h ; ô
.xdata$x:0000DA73                 db  19h
.xdata$x:0000DA74                 db    1
.xdata$x:0000DA75                 db    0
.xdata$x:0000DA76                 db    0
.xdata$x:0000DA77                 db    0
.xdata$x:0000DA78                 dd offset __unwindtable$??0TiXmlComment@@QAE@XZ
.xdata$x:0000DA7C                 db    0
.xdata$x:0000DA7D                 db    0
.xdata$x:0000DA7E                 db    0
.xdata$x:0000DA7F                 db    0
.xdata$x:0000DA80                 db    0
.xdata$x:0000DA81                 db    0
.xdata$x:0000DA82                 db    0
.xdata$x:0000DA83                 db    0
.xdata$x:0000DA84                 db    0
.xdata$x:0000DA85                 db    0
.xdata$x:0000DA86                 db    0
.xdata$x:0000DA87                 db    0
.xdata$x:0000DA88                 db    0
.xdata$x:0000DA89                 db    0
.xdata$x:0000DA8A                 db    0
.xdata$x:0000DA8B                 db    0
.xdata$x:0000DA8C                 db    0
.xdata$x:0000DA8D                 db    0
.xdata$x:0000DA8E                 db    0
.xdata$x:0000DA8F                 db    0
.xdata$x:0000DA90                 db    0
.xdata$x:0000DA91                 db    0
.xdata$x:0000DA92                 db    0
.xdata$x:0000DA93                 db    0
.xdata$x:0000DA93 _xdata$x        ends
.xdata$x:0000DA93
.xdata$x:0000DA94 ; ===========================================================================
.xdata$x:0000DA94
.xdata$x:0000DA94 ; Segment type: Pure data
.xdata$x:0000DA94 ; Segment permissions: Read
.xdata$x:0000DA94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DA94                 assume cs:_xdata$x
.xdata$x:0000DA94                 ;org 0DA94h
.xdata$x:0000DA94 ; COMDAT (pick associative to section at 6C30)
.xdata$x:0000DA94 __unwindtable$??1TiXmlComment@@UAE@XZ db 0FFh
.xdata$x:0000DA94                                         ; DATA XREF: .xdata$x:0000DAA4o
.xdata$x:0000DA95                 db 0FFh
.xdata$x:0000DA96                 db 0FFh
.xdata$x:0000DA97                 db 0FFh
.xdata$x:0000DA98                 dd offset __unwindfunclet$??1TiXmlComment@@UAE@XZ$0
.xdata$x:0000DA9C __ehfuncinfo$??1TiXmlComment@@UAE@XZ db  22h ; "
.xdata$x:0000DA9C                                         ; DATA XREF: __ehhandler$??1TiXmlComment@@UAE@XZ+11o
.xdata$x:0000DA9D                 db    5
.xdata$x:0000DA9E                 db  93h ; ô
.xdata$x:0000DA9F                 db  19h
.xdata$x:0000DAA0                 db    1
.xdata$x:0000DAA1                 db    0
.xdata$x:0000DAA2                 db    0
.xdata$x:0000DAA3                 db    0
.xdata$x:0000DAA4                 dd offset __unwindtable$??1TiXmlComment@@UAE@XZ
.xdata$x:0000DAA8                 align 20h
.xdata$x:0000DAA8 _xdata$x        ends
.xdata$x:0000DAA8
.xdata$x:0000DAC0 ; ===========================================================================
.xdata$x:0000DAC0
.xdata$x:0000DAC0 ; Segment type: Pure data
.xdata$x:0000DAC0 ; Segment permissions: Read
.xdata$x:0000DAC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DAC0                 assume cs:_xdata$x
.xdata$x:0000DAC0                 ;org 0DAC0h
.xdata$x:0000DAC0 ; COMDAT (pick associative to section at 58E0)
.xdata$x:0000DAC0 __unwindtable$??0TiXmlText@@QAE@PB_W@Z db 0FFh
.xdata$x:0000DAC0                                         ; DATA XREF: .xdata$x:0000DAD0o
.xdata$x:0000DAC1                 db 0FFh
.xdata$x:0000DAC2                 db 0FFh
.xdata$x:0000DAC3                 db 0FFh
.xdata$x:0000DAC4                 dd offset __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0
.xdata$x:0000DAC8 __ehfuncinfo$??0TiXmlText@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000DAC8                                         ; DATA XREF: __ehhandler$??0TiXmlText@@QAE@PB_W@Z+11o
.xdata$x:0000DAC9                 db    5
.xdata$x:0000DACA                 db  93h ; ô
.xdata$x:0000DACB                 db  19h
.xdata$x:0000DACC                 db    1
.xdata$x:0000DACD                 db    0
.xdata$x:0000DACE                 db    0
.xdata$x:0000DACF                 db    0
.xdata$x:0000DAD0                 dd offset __unwindtable$??0TiXmlText@@QAE@PB_W@Z
.xdata$x:0000DAD4                 db    0
.xdata$x:0000DAD5                 db    0
.xdata$x:0000DAD6                 db    0
.xdata$x:0000DAD7                 db    0
.xdata$x:0000DAD8                 db    0
.xdata$x:0000DAD9                 db    0
.xdata$x:0000DADA                 db    0
.xdata$x:0000DADB                 db    0
.xdata$x:0000DADC                 db    0
.xdata$x:0000DADD                 db    0
.xdata$x:0000DADE                 db    0
.xdata$x:0000DADF                 db    0
.xdata$x:0000DAE0                 db    0
.xdata$x:0000DAE1                 db    0
.xdata$x:0000DAE2                 db    0
.xdata$x:0000DAE3                 db    0
.xdata$x:0000DAE4                 db    0
.xdata$x:0000DAE5                 db    0
.xdata$x:0000DAE6                 db    0
.xdata$x:0000DAE7                 db    0
.xdata$x:0000DAE8                 db    0
.xdata$x:0000DAE9                 db    0
.xdata$x:0000DAEA                 db    0
.xdata$x:0000DAEB                 db    0
.xdata$x:0000DAEB _xdata$x        ends
.xdata$x:0000DAEB
.xdata$x:0000DAEC ; ===========================================================================
.xdata$x:0000DAEC
.xdata$x:0000DAEC ; Segment type: Pure data
.xdata$x:0000DAEC ; Segment permissions: Read
.xdata$x:0000DAEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DAEC                 assume cs:_xdata$x
.xdata$x:0000DAEC                 ;org 0DAECh
.xdata$x:0000DAEC ; COMDAT (pick associative to section at 6E04)
.xdata$x:0000DAEC __unwindtable$??1TiXmlText@@UAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000DAFCo
.xdata$x:0000DAED                 db 0FFh
.xdata$x:0000DAEE                 db 0FFh
.xdata$x:0000DAEF                 db 0FFh
.xdata$x:0000DAF0                 dd offset __unwindfunclet$??1TiXmlText@@UAE@XZ$0
.xdata$x:0000DAF4 __ehfuncinfo$??1TiXmlText@@UAE@XZ db  22h ; "
.xdata$x:0000DAF4                                         ; DATA XREF: __ehhandler$??1TiXmlText@@UAE@XZ+11o
.xdata$x:0000DAF5                 db    5
.xdata$x:0000DAF6                 db  93h ; ô
.xdata$x:0000DAF7                 db  19h
.xdata$x:0000DAF8                 db    1
.xdata$x:0000DAF9                 db    0
.xdata$x:0000DAFA                 db    0
.xdata$x:0000DAFB                 db    0
.xdata$x:0000DAFC                 dd offset __unwindtable$??1TiXmlText@@UAE@XZ
.xdata$x:0000DB00                 db    0
.xdata$x:0000DB01                 db    0
.xdata$x:0000DB02                 db    0
.xdata$x:0000DB03                 db    0
.xdata$x:0000DB04                 db    0
.xdata$x:0000DB05                 db    0
.xdata$x:0000DB06                 db    0
.xdata$x:0000DB07                 db    0
.xdata$x:0000DB08                 db    0
.xdata$x:0000DB09                 db    0
.xdata$x:0000DB0A                 db    0
.xdata$x:0000DB0B                 db    0
.xdata$x:0000DB0C                 db    0
.xdata$x:0000DB0D                 db    0
.xdata$x:0000DB0E                 db    0
.xdata$x:0000DB0F                 db    0
.xdata$x:0000DB10                 db    0
.xdata$x:0000DB11                 db    0
.xdata$x:0000DB12                 db    0
.xdata$x:0000DB13                 db    0
.xdata$x:0000DB14                 db    0
.xdata$x:0000DB15                 db    0
.xdata$x:0000DB16                 db    0
.xdata$x:0000DB17                 db    0
.xdata$x:0000DB17 _xdata$x        ends
.xdata$x:0000DB17
.xdata$x:0000DB18 ; ===========================================================================
.xdata$x:0000DB18
.xdata$x:0000DB18 ; Segment type: Pure data
.xdata$x:0000DB18 ; Segment permissions: Read
.xdata$x:0000DB18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DB18                 assume cs:_xdata$x
.xdata$x:0000DB18                 ;org 0DB18h
.xdata$x:0000DB18 ; COMDAT (pick associative to section at 57FC)
.xdata$x:0000DB18 __unwindtable$??0TiXmlDeclaration@@QAE@XZ db 0FFh
.xdata$x:0000DB18                                         ; DATA XREF: .xdata$x:0000DB40o
.xdata$x:0000DB19                 db 0FFh
.xdata$x:0000DB1A                 db 0FFh
.xdata$x:0000DB1B                 db 0FFh
.xdata$x:0000DB1C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0
.xdata$x:0000DB20                 db    0
.xdata$x:0000DB21                 db    0
.xdata$x:0000DB22                 db    0
.xdata$x:0000DB23                 db    0
.xdata$x:0000DB24                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1
.xdata$x:0000DB28                 db    1
.xdata$x:0000DB29                 db    0
.xdata$x:0000DB2A                 db    0
.xdata$x:0000DB2B                 db    0
.xdata$x:0000DB2C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2
.xdata$x:0000DB30                 db    2
.xdata$x:0000DB31                 db    0
.xdata$x:0000DB32                 db    0
.xdata$x:0000DB33                 db    0
.xdata$x:0000DB34                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3
.xdata$x:0000DB38 __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ db  22h ; "
.xdata$x:0000DB38                                         ; DATA XREF: __ehhandler$??0TiXmlDeclaration@@QAE@XZ+11o
.xdata$x:0000DB39                 db    5
.xdata$x:0000DB3A                 db  93h ; ô
.xdata$x:0000DB3B                 db  19h
.xdata$x:0000DB3C                 db    4
.xdata$x:0000DB3D                 db    0
.xdata$x:0000DB3E                 db    0
.xdata$x:0000DB3F                 db    0
.xdata$x:0000DB40                 dd offset __unwindtable$??0TiXmlDeclaration@@QAE@XZ
.xdata$x:0000DB44                 db    0
.xdata$x:0000DB45                 db    0
.xdata$x:0000DB46                 db    0
.xdata$x:0000DB47                 db    0
.xdata$x:0000DB48                 db    0
.xdata$x:0000DB49                 db    0
.xdata$x:0000DB4A                 db    0
.xdata$x:0000DB4B                 db    0
.xdata$x:0000DB4C                 db    0
.xdata$x:0000DB4D                 db    0
.xdata$x:0000DB4E                 db    0
.xdata$x:0000DB4F                 db    0
.xdata$x:0000DB50                 db    0
.xdata$x:0000DB51                 db    0
.xdata$x:0000DB52                 db    0
.xdata$x:0000DB53                 db    0
.xdata$x:0000DB54                 db    0
.xdata$x:0000DB55                 db    0
.xdata$x:0000DB56                 db    0
.xdata$x:0000DB57                 db    0
.xdata$x:0000DB58                 db    0
.xdata$x:0000DB59                 db    0
.xdata$x:0000DB5A                 db    0
.xdata$x:0000DB5B                 db    0
.xdata$x:0000DB5B _xdata$x        ends
.xdata$x:0000DB5B
.xdata$x:0000DB5C ; ===========================================================================
.xdata$x:0000DB5C
.xdata$x:0000DB5C ; Segment type: Pure data
.xdata$x:0000DB5C ; Segment permissions: Read
.xdata$x:0000DB5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DB5C                 assume cs:_xdata$x
.xdata$x:0000DB5C                 ;org 0DB5Ch
.xdata$x:0000DB5C ; COMDAT (pick associative to section at 6CA8)
.xdata$x:0000DB5C __unwindtable$??1TiXmlDeclaration@@UAE@XZ db 0FFh
.xdata$x:0000DB5C                                         ; DATA XREF: .xdata$x:0000DB84o
.xdata$x:0000DB5D                 db 0FFh
.xdata$x:0000DB5E                 db 0FFh
.xdata$x:0000DB5F                 db 0FFh
.xdata$x:0000DB60                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0
.xdata$x:0000DB64                 align 8
.xdata$x:0000DB68                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1
.xdata$x:0000DB6C                 db    1
.xdata$x:0000DB6D                 db    0
.xdata$x:0000DB6E                 db    0
.xdata$x:0000DB6F                 db    0
.xdata$x:0000DB70                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2
.xdata$x:0000DB74                 db    2
.xdata$x:0000DB75                 db    0
.xdata$x:0000DB76                 db    0
.xdata$x:0000DB77                 db    0
.xdata$x:0000DB78                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3
.xdata$x:0000DB7C __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ db  22h ; "
.xdata$x:0000DB7C                                         ; DATA XREF: __ehhandler$??1TiXmlDeclaration@@UAE@XZ+11o
.xdata$x:0000DB7D                 db    5
.xdata$x:0000DB7E                 db  93h ; ô
.xdata$x:0000DB7F                 db  19h
.xdata$x:0000DB80                 db    4
.xdata$x:0000DB81                 db    0
.xdata$x:0000DB82                 db    0
.xdata$x:0000DB83                 db    0
.xdata$x:0000DB84                 dd offset __unwindtable$??1TiXmlDeclaration@@UAE@XZ
.xdata$x:0000DB88                 align 20h
.xdata$x:0000DB88 _xdata$x        ends
.xdata$x:0000DB88
.xdata$x:0000DBA0 ; ===========================================================================
.xdata$x:0000DBA0
.xdata$x:0000DBA0 ; Segment type: Pure data
.xdata$x:0000DBA0 ; Segment permissions: Read
.xdata$x:0000DBA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DBA0                 assume cs:_xdata$x
.xdata$x:0000DBA0                 ;org 0DBA0h
.xdata$x:0000DBA0 ; COMDAT (pick associative to section at 596C)
.xdata$x:0000DBA0 __unwindtable$??0TiXmlUnknown@@QAE@XZ db 0FFh
.xdata$x:0000DBA0                                         ; DATA XREF: .xdata$x:0000DBB0o
.xdata$x:0000DBA1                 db 0FFh
.xdata$x:0000DBA2                 db 0FFh
.xdata$x:0000DBA3                 db 0FFh
.xdata$x:0000DBA4                 dd offset __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0
.xdata$x:0000DBA8 __ehfuncinfo$??0TiXmlUnknown@@QAE@XZ db  22h ; "
.xdata$x:0000DBA8                                         ; DATA XREF: __ehhandler$??0TiXmlUnknown@@QAE@XZ+11o
.xdata$x:0000DBA9                 db    5
.xdata$x:0000DBAA                 db  93h ; ô
.xdata$x:0000DBAB                 db  19h
.xdata$x:0000DBAC                 db    1
.xdata$x:0000DBAD                 db    0
.xdata$x:0000DBAE                 db    0
.xdata$x:0000DBAF                 db    0
.xdata$x:0000DBB0                 dd offset __unwindtable$??0TiXmlUnknown@@QAE@XZ
.xdata$x:0000DBB4                 db    0
.xdata$x:0000DBB5                 db    0
.xdata$x:0000DBB6                 db    0
.xdata$x:0000DBB7                 db    0
.xdata$x:0000DBB8                 db    0
.xdata$x:0000DBB9                 db    0
.xdata$x:0000DBBA                 db    0
.xdata$x:0000DBBB                 db    0
.xdata$x:0000DBBC                 db    0
.xdata$x:0000DBBD                 db    0
.xdata$x:0000DBBE                 db    0
.xdata$x:0000DBBF                 db    0
.xdata$x:0000DBC0                 db    0
.xdata$x:0000DBC1                 db    0
.xdata$x:0000DBC2                 db    0
.xdata$x:0000DBC3                 db    0
.xdata$x:0000DBC4                 db    0
.xdata$x:0000DBC5                 db    0
.xdata$x:0000DBC6                 db    0
.xdata$x:0000DBC7                 db    0
.xdata$x:0000DBC8                 db    0
.xdata$x:0000DBC9                 db    0
.xdata$x:0000DBCA                 db    0
.xdata$x:0000DBCB                 db    0
.xdata$x:0000DBCB _xdata$x        ends
.xdata$x:0000DBCB
.xdata$x:0000DBCC ; ===========================================================================
.xdata$x:0000DBCC
.xdata$x:0000DBCC ; Segment type: Pure data
.xdata$x:0000DBCC ; Segment permissions: Read
.xdata$x:0000DBCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DBCC                 assume cs:_xdata$x
.xdata$x:0000DBCC                 ;org 0DBCCh
.xdata$x:0000DBCC ; COMDAT (pick associative to section at 6E7C)
.xdata$x:0000DBCC __unwindtable$??1TiXmlUnknown@@UAE@XZ db 0FFh
.xdata$x:0000DBCC                                         ; DATA XREF: .xdata$x:0000DBDCo
.xdata$x:0000DBCD                 db 0FFh
.xdata$x:0000DBCE                 db 0FFh
.xdata$x:0000DBCF                 db 0FFh
.xdata$x:0000DBD0                 dd offset __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0
.xdata$x:0000DBD4 __ehfuncinfo$??1TiXmlUnknown@@UAE@XZ db  22h ; "
.xdata$x:0000DBD4                                         ; DATA XREF: __ehhandler$??1TiXmlUnknown@@UAE@XZ+11o
.xdata$x:0000DBD5                 db    5
.xdata$x:0000DBD6                 db  93h ; ô
.xdata$x:0000DBD7                 db  19h
.xdata$x:0000DBD8                 db    1
.xdata$x:0000DBD9                 db    0
.xdata$x:0000DBDA                 db    0
.xdata$x:0000DBDB                 db    0
.xdata$x:0000DBDC                 dd offset __unwindtable$??1TiXmlUnknown@@UAE@XZ
.xdata$x:0000DBE0                 db    0
.xdata$x:0000DBE1                 db    0
.xdata$x:0000DBE2                 db    0
.xdata$x:0000DBE3                 db    0
.xdata$x:0000DBE4                 db    0
.xdata$x:0000DBE5                 db    0
.xdata$x:0000DBE6                 db    0
.xdata$x:0000DBE7                 db    0
.xdata$x:0000DBE8                 db    0
.xdata$x:0000DBE9                 db    0
.xdata$x:0000DBEA                 db    0
.xdata$x:0000DBEB                 db    0
.xdata$x:0000DBEC                 db    0
.xdata$x:0000DBED                 db    0
.xdata$x:0000DBEE                 db    0
.xdata$x:0000DBEF                 db    0
.xdata$x:0000DBF0                 db    0
.xdata$x:0000DBF1                 db    0
.xdata$x:0000DBF2                 db    0
.xdata$x:0000DBF3                 db    0
.xdata$x:0000DBF4                 db    0
.xdata$x:0000DBF5                 db    0
.xdata$x:0000DBF6                 db    0
.xdata$x:0000DBF7                 db    0
.xdata$x:0000DBF7 _xdata$x        ends
.xdata$x:0000DBF7
.xdata$x:0000DBF8 ; ===========================================================================
.xdata$x:0000DBF8
.xdata$x:0000DBF8 ; Segment type: Pure data
.xdata$x:0000DBF8 ; Segment permissions: Read
.xdata$x:0000DBF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DBF8                 assume cs:_xdata$x
.xdata$x:0000DBF8                 ;org 0DBF8h
.xdata$x:0000DBF8 ; COMDAT (pick associative to section at 6D70)
.xdata$x:0000DBF8 __unwindtable$??1TiXmlDocument@@UAE@XZ db 0FFh
.xdata$x:0000DBF8                                         ; DATA XREF: .xdata$x:0000DC10o
.xdata$x:0000DBF9                 db 0FFh
.xdata$x:0000DBFA                 db 0FFh
.xdata$x:0000DBFB                 db 0FFh
.xdata$x:0000DBFC                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0
.xdata$x:0000DC00                 db    0
.xdata$x:0000DC01                 db    0
.xdata$x:0000DC02                 db    0
.xdata$x:0000DC03                 db    0
.xdata$x:0000DC04                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1
.xdata$x:0000DC08 __ehfuncinfo$??1TiXmlDocument@@UAE@XZ db  22h ; "
.xdata$x:0000DC08                                         ; DATA XREF: __ehhandler$??1TiXmlDocument@@UAE@XZ+11o
.xdata$x:0000DC09                 db    5
.xdata$x:0000DC0A                 db  93h ; ô
.xdata$x:0000DC0B                 db  19h
.xdata$x:0000DC0C                 db    2
.xdata$x:0000DC0D                 db    0
.xdata$x:0000DC0E                 db    0
.xdata$x:0000DC0F                 db    0
.xdata$x:0000DC10                 dd offset __unwindtable$??1TiXmlDocument@@UAE@XZ
.xdata$x:0000DC14                 db    0
.xdata$x:0000DC15                 db    0
.xdata$x:0000DC16                 db    0
.xdata$x:0000DC17                 db    0
.xdata$x:0000DC18                 db    0
.xdata$x:0000DC19                 db    0
.xdata$x:0000DC1A                 db    0
.xdata$x:0000DC1B                 db    0
.xdata$x:0000DC1C                 db    0
.xdata$x:0000DC1D                 db    0
.xdata$x:0000DC1E                 db    0
.xdata$x:0000DC1F                 db    0
.xdata$x:0000DC20                 db    0
.xdata$x:0000DC21                 db    0
.xdata$x:0000DC22                 db    0
.xdata$x:0000DC23                 db    0
.xdata$x:0000DC24                 db    0
.xdata$x:0000DC25                 db    0
.xdata$x:0000DC26                 db    0
.xdata$x:0000DC27                 db    0
.xdata$x:0000DC28                 db    0
.xdata$x:0000DC29                 db    0
.xdata$x:0000DC2A                 db    0
.xdata$x:0000DC2B                 db    0
.xdata$x:0000DC2B _xdata$x        ends
.xdata$x:0000DC2B
.xdata$x:0000DC2C ; ===========================================================================
.xdata$x:0000DC2C
.xdata$x:0000DC2C ; Segment type: Pure data
.xdata$x:0000DC2C ; Segment permissions: Read
.xdata$x:0000DC2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC2C                 assume cs:_xdata$x
.xdata$x:0000DC2C                 ;org 0DC2Ch
.xdata$x:0000DC2C ; COMDAT (pick associative to section at 4C9C)
.xdata$x:0000DC2C __unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z db 0FFh
.xdata$x:0000DC2C                                         ; DATA XREF: .xdata$x:0000DC3Co
.xdata$x:0000DC2D                 db 0FFh
.xdata$x:0000DC2E                 db 0FFh
.xdata$x:0000DC2F                 db 0FFh
.xdata$x:0000DC30                 dd offset __unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
.xdata$x:0000DC34 __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z db  22h ; "
.xdata$x:0000DC34                                         ; DATA XREF: __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z+11o
.xdata$x:0000DC35                 db    5
.xdata$x:0000DC36                 db  93h ; ô
.xdata$x:0000DC37                 db  19h
.xdata$x:0000DC38                 db    1
.xdata$x:0000DC39                 db    0
.xdata$x:0000DC3A                 db    0
.xdata$x:0000DC3B                 db    0
.xdata$x:0000DC3C                 dd offset __unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
.xdata$x:0000DC40                 db    0
.xdata$x:0000DC41                 db    0
.xdata$x:0000DC42                 db    0
.xdata$x:0000DC43                 db    0
.xdata$x:0000DC44                 db    0
.xdata$x:0000DC45                 db    0
.xdata$x:0000DC46                 db    0
.xdata$x:0000DC47                 db    0
.xdata$x:0000DC48                 db    0
.xdata$x:0000DC49                 db    0
.xdata$x:0000DC4A                 db    0
.xdata$x:0000DC4B                 db    0
.xdata$x:0000DC4C                 db    0
.xdata$x:0000DC4D                 db    0
.xdata$x:0000DC4E                 db    0
.xdata$x:0000DC4F                 db    0
.xdata$x:0000DC50                 db    0
.xdata$x:0000DC51                 db    0
.xdata$x:0000DC52                 db    0
.xdata$x:0000DC53                 db    0
.xdata$x:0000DC54                 db    0
.xdata$x:0000DC55                 db    0
.xdata$x:0000DC56                 db    0
.xdata$x:0000DC57                 db    0
.xdata$x:0000DC57 _xdata$x        ends
.xdata$x:0000DC57
.xdata$x:0000DC58 ; ===========================================================================
.xdata$x:0000DC58
.xdata$x:0000DC58 ; Segment type: Pure data
.xdata$x:0000DC58 ; Segment permissions: Read
.xdata$x:0000DC58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DC58                 assume cs:_xdata$x
.xdata$x:0000DC58                 ;org 0DC58h
.xdata$x:0000DC58 ; COMDAT (pick associative to section at 92E4)
.xdata$x:0000DC58 __catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 db    0
.xdata$x:0000DC58                                         ; DATA XREF: .xdata$x:0000DC88o
.xdata$x:0000DC59                 db    0
.xdata$x:0000DC5A                 db    0
.xdata$x:0000DC5B                 db    0
.xdata$x:0000DC5C                 db    0
.xdata$x:0000DC5D                 db    0
.xdata$x:0000DC5E                 db    0
.xdata$x:0000DC5F                 db    0
.xdata$x:0000DC60                 db    0
.xdata$x:0000DC61                 db    0
.xdata$x:0000DC62                 db    0
.xdata$x:0000DC63                 db    0
.xdata$x:0000DC64                 dd offset __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
.xdata$x:0000DC68 __unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db 0FFh
.xdata$x:0000DC68                                         ; DATA XREF: .xdata$x:0000DC94o
.xdata$x:0000DC69                 db 0FFh
.xdata$x:0000DC6A                 db 0FFh
.xdata$x:0000DC6B                 db 0FFh
.xdata$x:0000DC6C                 db    0
.xdata$x:0000DC6D                 db    0
.xdata$x:0000DC6E                 db    0
.xdata$x:0000DC6F                 db    0
.xdata$x:0000DC70                 db 0FFh
.xdata$x:0000DC71                 db 0FFh
.xdata$x:0000DC72                 db 0FFh
.xdata$x:0000DC73                 db 0FFh
.xdata$x:0000DC74                 db    0
.xdata$x:0000DC75                 db    0
.xdata$x:0000DC76                 db    0
.xdata$x:0000DC77                 db    0
.xdata$x:0000DC78 __tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db    0
.xdata$x:0000DC78                                         ; DATA XREF: .xdata$x:0000DC9Co
.xdata$x:0000DC79                 db    0
.xdata$x:0000DC7A                 db    0
.xdata$x:0000DC7B                 db    0
.xdata$x:0000DC7C                 db    0
.xdata$x:0000DC7D                 db    0
.xdata$x:0000DC7E                 db    0
.xdata$x:0000DC7F                 db    0
.xdata$x:0000DC80                 db    1
.xdata$x:0000DC81                 db    0
.xdata$x:0000DC82                 db    0
.xdata$x:0000DC83                 db    0
.xdata$x:0000DC84                 db    1
.xdata$x:0000DC85                 db    0
.xdata$x:0000DC86                 db    0
.xdata$x:0000DC87                 db    0
.xdata$x:0000DC88                 dd offset __catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
.xdata$x:0000DC8C __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db  22h ; "
.xdata$x:0000DC8C                                         ; DATA XREF: __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ+11o
.xdata$x:0000DC8D                 db    5
.xdata$x:0000DC8E                 db  93h ; ô
.xdata$x:0000DC8F                 db  19h
.xdata$x:0000DC90                 db    2
.xdata$x:0000DC91                 db    0
.xdata$x:0000DC92                 db    0
.xdata$x:0000DC93                 db    0
.xdata$x:0000DC94                 dd offset __unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.xdata$x:0000DC98                 db    1
.xdata$x:0000DC99                 db    0
.xdata$x:0000DC9A                 db    0
.xdata$x:0000DC9B                 db    0
.xdata$x:0000DC9C                 dd offset __tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.xdata$x:0000DCA0                 db    0
.xdata$x:0000DCA1                 db    0
.xdata$x:0000DCA2                 db    0
.xdata$x:0000DCA3                 db    0
.xdata$x:0000DCA4                 db    0
.xdata$x:0000DCA5                 db    0
.xdata$x:0000DCA6                 db    0
.xdata$x:0000DCA7                 db    0
.xdata$x:0000DCA8                 db    0
.xdata$x:0000DCA9                 db    0
.xdata$x:0000DCAA                 db    0
.xdata$x:0000DCAB                 db    0
.xdata$x:0000DCAC                 db    0
.xdata$x:0000DCAD                 db    0
.xdata$x:0000DCAE                 db    0
.xdata$x:0000DCAF                 db    0
.xdata$x:0000DCAF _xdata$x        ends
.xdata$x:0000DCAF
.xdata$x:0000DCB0 ; ===========================================================================
.xdata$x:0000DCB0
.xdata$x:0000DCB0 ; Segment type: Pure data
.xdata$x:0000DCB0 ; Segment permissions: Read
.xdata$x:0000DCB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DCB0                 assume cs:_xdata$x
.xdata$x:0000DCB0                 ;org 0DCB0h
.xdata$x:0000DCB0 ; COMDAT (pick associative to section at AB4C)
.xdata$x:0000DCB0 __unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ db 0FFh
.xdata$x:0000DCB0                                         ; DATA XREF: .xdata$x:0000DCC0o
.xdata$x:0000DCB1                 db 0FFh
.xdata$x:0000DCB2                 db 0FFh
.xdata$x:0000DCB3                 db 0FFh
.xdata$x:0000DCB4                 dd offset __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0
.xdata$x:0000DCB8 __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ db  22h ; "
.xdata$x:0000DCB8                                         ; DATA XREF: __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ+11o
.xdata$x:0000DCB9                 db    5
.xdata$x:0000DCBA                 db  93h ; ô
.xdata$x:0000DCBB                 db  19h
.xdata$x:0000DCBC                 db    1
.xdata$x:0000DCBD                 db    0
.xdata$x:0000DCBE                 db    0
.xdata$x:0000DCBF                 db    0
.xdata$x:0000DCC0                 dd offset __unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.xdata$x:0000DCC4                 db    0
.xdata$x:0000DCC5                 db    0
.xdata$x:0000DCC6                 db    0
.xdata$x:0000DCC7                 db    0
.xdata$x:0000DCC8                 db    0
.xdata$x:0000DCC9                 db    0
.xdata$x:0000DCCA                 db    0
.xdata$x:0000DCCB                 db    0
.xdata$x:0000DCCC                 db    0
.xdata$x:0000DCCD                 db    0
.xdata$x:0000DCCE                 db    0
.xdata$x:0000DCCF                 db    0
.xdata$x:0000DCD0                 db    0
.xdata$x:0000DCD1                 db    0
.xdata$x:0000DCD2                 db    0
.xdata$x:0000DCD3                 db    0
.xdata$x:0000DCD4                 db    0
.xdata$x:0000DCD5                 db    0
.xdata$x:0000DCD6                 db    0
.xdata$x:0000DCD7                 db    0
.xdata$x:0000DCD8                 db    0
.xdata$x:0000DCD9                 db    0
.xdata$x:0000DCDA                 db    0
.xdata$x:0000DCDB                 db    0
.xdata$x:0000DCDB _xdata$x        ends
.xdata$x:0000DCDB
.xdata$x:0000DCDC ; ===========================================================================
.xdata$x:0000DCDC
.xdata$x:0000DCDC ; Segment type: Pure data
.xdata$x:0000DCDC ; Segment permissions: Read
.xdata$x:0000DCDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DCDC                 assume cs:_xdata$x
.xdata$x:0000DCDC                 ;org 0DCDCh
.xdata$x:0000DCDC ; COMDAT (pick associative to section at 3DDC)
.xdata$x:0000DCDC __catchsym$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$3 db    0
.xdata$x:0000DCDC                                         ; DATA XREF: .xdata$x:0000DCFCo
.xdata$x:0000DCDD                 db    0
.xdata$x:0000DCDE                 db    0
.xdata$x:0000DCDF                 db    0
.xdata$x:0000DCE0                 db    0
.xdata$x:0000DCE1                 db    0
.xdata$x:0000DCE2                 db    0
.xdata$x:0000DCE3                 db    0
.xdata$x:0000DCE4                 db    0
.xdata$x:0000DCE5                 db    0
.xdata$x:0000DCE6                 db    0
.xdata$x:0000DCE7                 db    0
.xdata$x:0000DCE8                 dd offset __catch$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0
.xdata$x:0000DCEC __tryblocktable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z db    1
.xdata$x:0000DCEC                                         ; DATA XREF: .xdata$x:0000DD28o
.xdata$x:0000DCED                 db    0
.xdata$x:0000DCEE                 db    0
.xdata$x:0000DCEF                 db    0
.xdata$x:0000DCF0                 db    1
.xdata$x:0000DCF1                 db    0
.xdata$x:0000DCF2                 db    0
.xdata$x:0000DCF3                 db    0
.xdata$x:0000DCF4                 db    2
.xdata$x:0000DCF5                 db    0
.xdata$x:0000DCF6                 db    0
.xdata$x:0000DCF7                 db    0
.xdata$x:0000DCF8                 db    1
.xdata$x:0000DCF9                 db    0
.xdata$x:0000DCFA                 db    0
.xdata$x:0000DCFB                 db    0
.xdata$x:0000DCFC                 dd offset __catchsym$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$3
.xdata$x:0000DD00 __unwindtable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z db 0FFh
.xdata$x:0000DD00                                         ; DATA XREF: .xdata$x:0000DD20o
.xdata$x:0000DD01                 db 0FFh
.xdata$x:0000DD02                 db 0FFh
.xdata$x:0000DD03                 db 0FFh
.xdata$x:0000DD04                 dd offset __unwindfunclet$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$2
.xdata$x:0000DD08                 db    0
.xdata$x:0000DD09                 db    0
.xdata$x:0000DD0A                 db    0
.xdata$x:0000DD0B                 db    0
.xdata$x:0000DD0C                 db    0
.xdata$x:0000DD0D                 db    0
.xdata$x:0000DD0E                 db    0
.xdata$x:0000DD0F                 db    0
.xdata$x:0000DD10                 db    0
.xdata$x:0000DD11                 db    0
.xdata$x:0000DD12                 db    0
.xdata$x:0000DD13                 db    0
.xdata$x:0000DD14                 db    0
.xdata$x:0000DD15                 db    0
.xdata$x:0000DD16                 db    0
.xdata$x:0000DD17                 db    0
.xdata$x:0000DD18 __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z db  22h ; "
.xdata$x:0000DD18                                         ; DATA XREF: __ehhandler$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z+11o
.xdata$x:0000DD19                 db    5
.xdata$x:0000DD1A                 db  93h ; ô
.xdata$x:0000DD1B                 db  19h
.xdata$x:0000DD1C                 db    3
.xdata$x:0000DD1D                 db    0
.xdata$x:0000DD1E                 db    0
.xdata$x:0000DD1F                 db    0
.xdata$x:0000DD20                 dd offset __unwindtable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.xdata$x:0000DD24                 db    1
.xdata$x:0000DD25                 db    0
.xdata$x:0000DD26                 db    0
.xdata$x:0000DD27                 db    0
.xdata$x:0000DD28                 dd offset __tryblocktable$??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.xdata$x:0000DD2C                 db    0
.xdata$x:0000DD2D                 db    0
.xdata$x:0000DD2E                 db    0
.xdata$x:0000DD2F                 db    0
.xdata$x:0000DD30                 db    0
.xdata$x:0000DD31                 db    0
.xdata$x:0000DD32                 db    0
.xdata$x:0000DD33                 db    0
.xdata$x:0000DD34                 db    0
.xdata$x:0000DD35                 db    0
.xdata$x:0000DD36                 db    0
.xdata$x:0000DD37                 db    0
.xdata$x:0000DD38                 db    0
.xdata$x:0000DD39                 db    0
.xdata$x:0000DD3A                 db    0
.xdata$x:0000DD3B                 db    0
.xdata$x:0000DD3B _xdata$x        ends
.xdata$x:0000DD3B
.xdata$x:0000DD3C ; ===========================================================================
.xdata$x:0000DD3C
.xdata$x:0000DD3C ; Segment type: Pure data
.xdata$x:0000DD3C ; Segment permissions: Read
.xdata$x:0000DD3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD3C                 assume cs:_xdata$x
.xdata$x:0000DD3C                 ;org 0DD3Ch
.xdata$x:0000DD3C ; COMDAT (pick associative to section at 3AD0)
.xdata$x:0000DD3C __catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$3 db    0
.xdata$x:0000DD3C                                         ; DATA XREF: .xdata$x:0000DD5Co
.xdata$x:0000DD3D                 db    0
.xdata$x:0000DD3E                 db    0
.xdata$x:0000DD3F                 db    0
.xdata$x:0000DD40                 db    0
.xdata$x:0000DD41                 db    0
.xdata$x:0000DD42                 db    0
.xdata$x:0000DD43                 db    0
.xdata$x:0000DD44                 db    0
.xdata$x:0000DD45                 db    0
.xdata$x:0000DD46                 db    0
.xdata$x:0000DD47                 db    0
.xdata$x:0000DD48                 dd offset __catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
.xdata$x:0000DD4C __tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z db    1
.xdata$x:0000DD4C                                         ; DATA XREF: .xdata$x:0000DD88o
.xdata$x:0000DD4D                 db    0
.xdata$x:0000DD4E                 db    0
.xdata$x:0000DD4F                 db    0
.xdata$x:0000DD50                 db    1
.xdata$x:0000DD51                 db    0
.xdata$x:0000DD52                 db    0
.xdata$x:0000DD53                 db    0
.xdata$x:0000DD54                 db    2
.xdata$x:0000DD55                 db    0
.xdata$x:0000DD56                 db    0
.xdata$x:0000DD57                 db    0
.xdata$x:0000DD58                 db    1
.xdata$x:0000DD59                 db    0
.xdata$x:0000DD5A                 db    0
.xdata$x:0000DD5B                 db    0
.xdata$x:0000DD5C                 dd offset __catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$3
.xdata$x:0000DD60 __unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z db 0FFh
.xdata$x:0000DD60                                         ; DATA XREF: .xdata$x:0000DD80o
.xdata$x:0000DD61                 db 0FFh
.xdata$x:0000DD62                 db 0FFh
.xdata$x:0000DD63                 db 0FFh
.xdata$x:0000DD64                 dd offset __unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
.xdata$x:0000DD68                 db    0
.xdata$x:0000DD69                 db    0
.xdata$x:0000DD6A                 db    0
.xdata$x:0000DD6B                 db    0
.xdata$x:0000DD6C                 db    0
.xdata$x:0000DD6D                 db    0
.xdata$x:0000DD6E                 db    0
.xdata$x:0000DD6F                 db    0
.xdata$x:0000DD70                 db    0
.xdata$x:0000DD71                 db    0
.xdata$x:0000DD72                 db    0
.xdata$x:0000DD73                 db    0
.xdata$x:0000DD74                 db    0
.xdata$x:0000DD75                 db    0
.xdata$x:0000DD76                 db    0
.xdata$x:0000DD77                 db    0
.xdata$x:0000DD78 __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z db  22h ; "
.xdata$x:0000DD78                                         ; DATA XREF: __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z+11o
.xdata$x:0000DD79                 db    5
.xdata$x:0000DD7A                 db  93h ; ô
.xdata$x:0000DD7B                 db  19h
.xdata$x:0000DD7C                 db    3
.xdata$x:0000DD7D                 db    0
.xdata$x:0000DD7E                 db    0
.xdata$x:0000DD7F                 db    0
.xdata$x:0000DD80                 dd offset __unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.xdata$x:0000DD84                 db    1
.xdata$x:0000DD85                 db    0
.xdata$x:0000DD86                 db    0
.xdata$x:0000DD87                 db    0
.xdata$x:0000DD88                 dd offset __tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
.xdata$x:0000DD8C                 db    0
.xdata$x:0000DD8D                 db    0
.xdata$x:0000DD8E                 db    0
.xdata$x:0000DD8F                 db    0
.xdata$x:0000DD90                 db    0
.xdata$x:0000DD91                 db    0
.xdata$x:0000DD92                 db    0
.xdata$x:0000DD93                 db    0
.xdata$x:0000DD94                 db    0
.xdata$x:0000DD95                 db    0
.xdata$x:0000DD96                 db    0
.xdata$x:0000DD97                 db    0
.xdata$x:0000DD98                 db    0
.xdata$x:0000DD99                 db    0
.xdata$x:0000DD9A                 db    0
.xdata$x:0000DD9B                 db    0
.xdata$x:0000DD9B _xdata$x        ends
.xdata$x:0000DD9B
.xdata$x:0000DD9C ; ===========================================================================
.xdata$x:0000DD9C
.xdata$x:0000DD9C ; Segment type: Pure data
.xdata$x:0000DD9C ; Segment permissions: Read
.xdata$x:0000DD9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DD9C                 assume cs:_xdata$x
.xdata$x:0000DD9C                 ;org 0DD9Ch
.xdata$x:0000DD9C ; COMDAT (pick associative to section at 4D90)
.xdata$x:0000DD9C __unwindtable$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z db 0FFh
.xdata$x:0000DD9C                                         ; DATA XREF: .xdata$x:0000DDBCo
.xdata$x:0000DD9D                 db 0FFh
.xdata$x:0000DD9E                 db 0FFh
.xdata$x:0000DD9F                 db 0FFh
.xdata$x:0000DDA0                 dd offset __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
.xdata$x:0000DDA4                 align 8
.xdata$x:0000DDA8                 dd offset __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
.xdata$x:0000DDAC                 db    1
.xdata$x:0000DDAD                 db    0
.xdata$x:0000DDAE                 db    0
.xdata$x:0000DDAF                 db    0
.xdata$x:0000DDB0                 dd offset __unwindfunclet$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$2
.xdata$x:0000DDB4 __ehfuncinfo$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z db  22h ; "
.xdata$x:0000DDB4                                         ; DATA XREF: __ehhandler$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z+11o
.xdata$x:0000DDB5                 db    5
.xdata$x:0000DDB6                 db  93h ; ô
.xdata$x:0000DDB7                 db  19h
.xdata$x:0000DDB8                 db    3
.xdata$x:0000DDB9                 db    0
.xdata$x:0000DDBA                 db    0
.xdata$x:0000DDBB                 db    0
.xdata$x:0000DDBC                 dd offset __unwindtable$??0?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.xdata$x:0000DDC0                 db    0
.xdata$x:0000DDC1                 db    0
.xdata$x:0000DDC2                 db    0
.xdata$x:0000DDC3                 db    0
.xdata$x:0000DDC4                 db    0
.xdata$x:0000DDC5                 db    0
.xdata$x:0000DDC6                 db    0
.xdata$x:0000DDC7                 db    0
.xdata$x:0000DDC8                 db    0
.xdata$x:0000DDC9                 db    0
.xdata$x:0000DDCA                 db    0
.xdata$x:0000DDCB                 db    0
.xdata$x:0000DDCC                 db    0
.xdata$x:0000DDCD                 db    0
.xdata$x:0000DDCE                 db    0
.xdata$x:0000DDCF                 db    0
.xdata$x:0000DDD0                 db    0
.xdata$x:0000DDD1                 db    0
.xdata$x:0000DDD2                 db    0
.xdata$x:0000DDD3                 db    0
.xdata$x:0000DDD4                 db    0
.xdata$x:0000DDD5                 db    0
.xdata$x:0000DDD6                 db    0
.xdata$x:0000DDD7                 db    0
.xdata$x:0000DDD7 _xdata$x        ends
.xdata$x:0000DDD7
.xdata$x:0000DDD8 ; ===========================================================================
.xdata$x:0000DDD8
.xdata$x:0000DDD8 ; Segment type: Pure data
.xdata$x:0000DDD8 ; Segment permissions: Read
.xdata$x:0000DDD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DDD8                 assume cs:_xdata$x
.xdata$x:0000DDD8                 ;org 0DDD8h
.xdata$x:0000DDD8 ; COMDAT (pick associative to section at 6874)
.xdata$x:0000DDD8 __unwindtable$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ db 0FFh
.xdata$x:0000DDD8                                         ; DATA XREF: .xdata$x:0000DDF0o
.xdata$x:0000DDD9                 db 0FFh
.xdata$x:0000DDDA                 db 0FFh
.xdata$x:0000DDDB                 db 0FFh
.xdata$x:0000DDDC                 dd offset __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
.xdata$x:0000DDE0                 db    0
.xdata$x:0000DDE1                 db    0
.xdata$x:0000DDE2                 db    0
.xdata$x:0000DDE3                 db    0
.xdata$x:0000DDE4                 dd offset __unwindfunclet$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$1
.xdata$x:0000DDE8 __ehfuncinfo$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ db  22h ; "
.xdata$x:0000DDE8                                         ; DATA XREF: __ehhandler$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ+11o
.xdata$x:0000DDE9                 db    5
.xdata$x:0000DDEA                 db  93h ; ô
.xdata$x:0000DDEB                 db  19h
.xdata$x:0000DDEC                 db    2
.xdata$x:0000DDED                 db    0
.xdata$x:0000DDEE                 db    0
.xdata$x:0000DDEF                 db    0
.xdata$x:0000DDF0                 dd offset __unwindtable$??1?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.xdata$x:0000DDF4                 db    0
.xdata$x:0000DDF5                 db    0
.xdata$x:0000DDF6                 db    0
.xdata$x:0000DDF7                 db    0
.xdata$x:0000DDF8                 db    0
.xdata$x:0000DDF9                 db    0
.xdata$x:0000DDFA                 db    0
.xdata$x:0000DDFB                 db    0
.xdata$x:0000DDFC                 db    0
.xdata$x:0000DDFD                 db    0
.xdata$x:0000DDFE                 db    0
.xdata$x:0000DDFF                 db    0
.xdata$x:0000DE00                 db    0
.xdata$x:0000DE01                 db    0
.xdata$x:0000DE02                 db    0
.xdata$x:0000DE03                 db    0
.xdata$x:0000DE04                 db    0
.xdata$x:0000DE05                 db    0
.xdata$x:0000DE06                 db    0
.xdata$x:0000DE07                 db    0
.xdata$x:0000DE08                 db    0
.xdata$x:0000DE09                 db    0
.xdata$x:0000DE0A                 db    0
.xdata$x:0000DE0B                 db    0
.xdata$x:0000DE0B _xdata$x        ends
.xdata$x:0000DE0B
.xdata$x:0000DE0C ; ===========================================================================
.xdata$x:0000DE0C
.xdata$x:0000DE0C ; Segment type: Pure data
.xdata$x:0000DE0C ; Segment permissions: Read
.xdata$x:0000DE0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE0C                 assume cs:_xdata$x
.xdata$x:0000DE0C                 ;org 0DE0Ch
.xdata$x:0000DE0C ; COMDAT (pick associative to section at BF88)
.xdata$x:0000DE0C __unwindtable$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ db 0FFh
.xdata$x:0000DE0C                                         ; DATA XREF: .xdata$x:0000DE1Co
.xdata$x:0000DE0D                 db 0FFh
.xdata$x:0000DE0E                 db 0FFh
.xdata$x:0000DE0F                 db 0FFh
.xdata$x:0000DE10                 dd offset __unwindfunclet$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
.xdata$x:0000DE14 __ehfuncinfo$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ db  22h ; "
.xdata$x:0000DE14                                         ; DATA XREF: __ehhandler$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ+11o
.xdata$x:0000DE15                 db    5
.xdata$x:0000DE16                 db  93h ; ô
.xdata$x:0000DE17                 db  19h
.xdata$x:0000DE18                 db    1
.xdata$x:0000DE19                 db    0
.xdata$x:0000DE1A                 db    0
.xdata$x:0000DE1B                 db    0
.xdata$x:0000DE1C                 dd offset __unwindtable$?str@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.xdata$x:0000DE20                 db    0
.xdata$x:0000DE21                 db    0
.xdata$x:0000DE22                 db    0
.xdata$x:0000DE23                 db    0
.xdata$x:0000DE24                 db    0
.xdata$x:0000DE25                 db    0
.xdata$x:0000DE26                 db    0
.xdata$x:0000DE27                 db    0
.xdata$x:0000DE28                 db    0
.xdata$x:0000DE29                 db    0
.xdata$x:0000DE2A                 db    0
.xdata$x:0000DE2B                 db    0
.xdata$x:0000DE2C                 db    0
.xdata$x:0000DE2D                 db    0
.xdata$x:0000DE2E                 db    0
.xdata$x:0000DE2F                 db    0
.xdata$x:0000DE30                 db    0
.xdata$x:0000DE31                 db    0
.xdata$x:0000DE32                 db    0
.xdata$x:0000DE33                 db    0
.xdata$x:0000DE34                 db    0
.xdata$x:0000DE35                 db    0
.xdata$x:0000DE36                 db    0
.xdata$x:0000DE37                 db    0
.xdata$x:0000DE37 _xdata$x        ends
.xdata$x:0000DE37
.xdata$x:0000DE38 ; ===========================================================================
.xdata$x:0000DE38
.xdata$x:0000DE38 ; Segment type: Pure data
.xdata$x:0000DE38 ; Segment permissions: Read
.xdata$x:0000DE38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE38                 assume cs:_xdata$x
.xdata$x:0000DE38                 ;org 0DE38h
.xdata$x:0000DE38 ; COMDAT (pick associative to section at 5410)
.xdata$x:0000DE38 __unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z db 0FFh
.xdata$x:0000DE38                                         ; DATA XREF: .xdata$x:0000DE48o
.xdata$x:0000DE39                 db 0FFh
.xdata$x:0000DE3A                 db 0FFh
.xdata$x:0000DE3B                 db 0FFh
.xdata$x:0000DE3C                 dd offset __unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
.xdata$x:0000DE40 __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z db  22h ; "
.xdata$x:0000DE40                                         ; DATA XREF: __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z+11o
.xdata$x:0000DE41                 db    5
.xdata$x:0000DE42                 db  93h ; ô
.xdata$x:0000DE43                 db  19h
.xdata$x:0000DE44                 db    1
.xdata$x:0000DE45                 db    0
.xdata$x:0000DE46                 db    0
.xdata$x:0000DE47                 db    0
.xdata$x:0000DE48                 dd offset __unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
.xdata$x:0000DE4C                 db    0
.xdata$x:0000DE4D                 db    0
.xdata$x:0000DE4E                 db    0
.xdata$x:0000DE4F                 db    0
.xdata$x:0000DE50                 db    0
.xdata$x:0000DE51                 db    0
.xdata$x:0000DE52                 db    0
.xdata$x:0000DE53                 db    0
.xdata$x:0000DE54                 db    0
.xdata$x:0000DE55                 db    0
.xdata$x:0000DE56                 db    0
.xdata$x:0000DE57                 db    0
.xdata$x:0000DE58                 db    0
.xdata$x:0000DE59                 db    0
.xdata$x:0000DE5A                 db    0
.xdata$x:0000DE5B                 db    0
.xdata$x:0000DE5C                 db    0
.xdata$x:0000DE5D                 db    0
.xdata$x:0000DE5E                 db    0
.xdata$x:0000DE5F                 db    0
.xdata$x:0000DE60                 db    0
.xdata$x:0000DE61                 db    0
.xdata$x:0000DE62                 db    0
.xdata$x:0000DE63                 db    0
.xdata$x:0000DE63 _xdata$x        ends
.xdata$x:0000DE63
.xdata$x:0000DE64 ; ===========================================================================
.xdata$x:0000DE64
.xdata$x:0000DE64 ; Segment type: Pure data
.xdata$x:0000DE64 ; Segment permissions: Read
.xdata$x:0000DE64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE64                 assume cs:_xdata$x
.xdata$x:0000DE64                 ;org 0DE64h
.xdata$x:0000DE64 ; COMDAT (pick associative to section at 6A54)
.xdata$x:0000DE64 __unwindtable$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ db 0FFh
.xdata$x:0000DE64                                         ; DATA XREF: .xdata$x:0000DE74o
.xdata$x:0000DE65                 db 0FFh
.xdata$x:0000DE66                 db 0FFh
.xdata$x:0000DE67                 db 0FFh
.xdata$x:0000DE68                 dd offset __unwindfunclet$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
.xdata$x:0000DE6C __ehfuncinfo$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ db  22h ; "
.xdata$x:0000DE6C                                         ; DATA XREF: __ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ+11o
.xdata$x:0000DE6D                 db    5
.xdata$x:0000DE6E                 db  93h ; ô
.xdata$x:0000DE6F                 db  19h
.xdata$x:0000DE70                 db    1
.xdata$x:0000DE71                 db    0
.xdata$x:0000DE72                 db    0
.xdata$x:0000DE73                 db    0
.xdata$x:0000DE74                 dd offset __unwindtable$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
.xdata$x:0000DE78                 db    0
.xdata$x:0000DE79                 db    0
.xdata$x:0000DE7A                 db    0
.xdata$x:0000DE7B                 db    0
.xdata$x:0000DE7C                 db    0
.xdata$x:0000DE7D                 db    0
.xdata$x:0000DE7E                 db    0
.xdata$x:0000DE7F                 db    0
.xdata$x:0000DE80                 db    0
.xdata$x:0000DE81                 db    0
.xdata$x:0000DE82                 db    0
.xdata$x:0000DE83                 db    0
.xdata$x:0000DE84                 db    0
.xdata$x:0000DE85                 db    0
.xdata$x:0000DE86                 db    0
.xdata$x:0000DE87                 db    0
.xdata$x:0000DE88                 db    0
.xdata$x:0000DE89                 db    0
.xdata$x:0000DE8A                 db    0
.xdata$x:0000DE8B                 db    0
.xdata$x:0000DE8C                 db    0
.xdata$x:0000DE8D                 db    0
.xdata$x:0000DE8E                 db    0
.xdata$x:0000DE8F                 db    0
.xdata$x:0000DE8F _xdata$x        ends
.xdata$x:0000DE8F
.xdata$x:0000DE90 ; ===========================================================================
.xdata$x:0000DE90
.xdata$x:0000DE90 ; Segment type: Pure data
.xdata$x:0000DE90 ; Segment permissions: Read
.xdata$x:0000DE90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE90                 assume cs:_xdata$x
.xdata$x:0000DE90                 ;org 0DE90h
.xdata$x:0000DE90 ; COMDAT (pick associative to section at C020)
.xdata$x:0000DE90 __unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ db 0FFh
.xdata$x:0000DE90                                         ; DATA XREF: .xdata$x:0000DEB8o
.xdata$x:0000DE91                 db 0FFh
.xdata$x:0000DE92                 db 0FFh
.xdata$x:0000DE93                 db 0FFh
.xdata$x:0000DE94                 dd offset __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$1
.xdata$x:0000DE98                 db    0
.xdata$x:0000DE99                 db    0
.xdata$x:0000DE9A                 db    0
.xdata$x:0000DE9B                 db    0
.xdata$x:0000DE9C                 dd offset __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
.xdata$x:0000DEA0                 db    0
.xdata$x:0000DEA1                 db    0
.xdata$x:0000DEA2                 db    0
.xdata$x:0000DEA3                 db    0
.xdata$x:0000DEA4                 dd offset __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
.xdata$x:0000DEA8                 db    0
.xdata$x:0000DEA9                 db    0
.xdata$x:0000DEAA                 db    0
.xdata$x:0000DEAB                 db    0
.xdata$x:0000DEAC                 dd offset __unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
.xdata$x:0000DEB0 __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ db  22h ; "
.xdata$x:0000DEB0                                         ; DATA XREF: __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ+1Bo
.xdata$x:0000DEB1                 db    5
.xdata$x:0000DEB2                 db  93h ; ô
.xdata$x:0000DEB3                 db  19h
.xdata$x:0000DEB4                 db    4
.xdata$x:0000DEB5                 db    0
.xdata$x:0000DEB6                 db    0
.xdata$x:0000DEB7                 db    0
.xdata$x:0000DEB8                 dd offset __unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.xdata$x:0000DEBC                 db    0
.xdata$x:0000DEBD                 db    0
.xdata$x:0000DEBE                 db    0
.xdata$x:0000DEBF                 db    0
.xdata$x:0000DEC0                 db    0
.xdata$x:0000DEC1                 db    0
.xdata$x:0000DEC2                 db    0
.xdata$x:0000DEC3                 db    0
.xdata$x:0000DEC4                 db    0
.xdata$x:0000DEC5                 db    0
.xdata$x:0000DEC6                 db    0
.xdata$x:0000DEC7                 db    0
.xdata$x:0000DEC8                 db    0
.xdata$x:0000DEC9                 db    0
.xdata$x:0000DECA                 db    0
.xdata$x:0000DECB                 db    0
.xdata$x:0000DECC                 db    0
.xdata$x:0000DECD                 db    0
.xdata$x:0000DECE                 db    0
.xdata$x:0000DECF                 db    0
.xdata$x:0000DED0                 db    0
.xdata$x:0000DED1                 db    0
.xdata$x:0000DED2                 db    0
.xdata$x:0000DED3                 db    0
.xdata$x:0000DED3 _xdata$x        ends
.xdata$x:0000DED3
.xdata$x:0000DED4 ; ===========================================================================
.xdata$x:0000DED4
.xdata$x:0000DED4 ; Segment type: Pure data
.xdata$x:0000DED4 ; Segment permissions: Read
.xdata$x:0000DED4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DED4                 assume cs:_xdata$x
.xdata$x:0000DED4                 ;org 0DED4h
.xdata$x:0000DED4 ; COMDAT (pick associative to section at 468C)
.xdata$x:0000DED4 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000DED4                                         ; DATA XREF: .xdata$x:0000DEE4o
.xdata$x:0000DED5                 db 0FFh
.xdata$x:0000DED6                 db 0FFh
.xdata$x:0000DED7                 db 0FFh
.xdata$x:0000DED8                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000DEDC __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000DEDC                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000DEDD                 db    5
.xdata$x:0000DEDE                 db  93h ; ô
.xdata$x:0000DEDF                 db  19h
.xdata$x:0000DEE0                 db    1
.xdata$x:0000DEE1                 db    0
.xdata$x:0000DEE2                 db    0
.xdata$x:0000DEE3                 db    0
.xdata$x:0000DEE4                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000DEE8                 align 20h
.xdata$x:0000DEE8 _xdata$x        ends
.xdata$x:0000DEE8
.xdata$x:0000DF00 ; ===========================================================================
.xdata$x:0000DF00
.xdata$x:0000DF00 ; Segment type: Pure data
.xdata$x:0000DF00 ; Segment permissions: Read
.xdata$x:0000DF00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF00                 assume cs:_xdata$x
.xdata$x:0000DF00                 ;org 0DF00h
.xdata$x:0000DF00 ; COMDAT (pick associative to section at 6394)
.xdata$x:0000DF00 __unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z db 0FFh
.xdata$x:0000DF00                                         ; DATA XREF: .xdata$x:0000DF10o
.xdata$x:0000DF01                 db 0FFh
.xdata$x:0000DF02                 db 0FFh
.xdata$x:0000DF03                 db 0FFh
.xdata$x:0000DF04                 dd offset __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
.xdata$x:0000DF08 __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z db  22h ; "
.xdata$x:0000DF08                                         ; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z+11o
.xdata$x:0000DF09                 db    5
.xdata$x:0000DF0A                 db  93h ; ô
.xdata$x:0000DF0B                 db  19h
.xdata$x:0000DF0C                 db    1
.xdata$x:0000DF0D                 db    0
.xdata$x:0000DF0E                 db    0
.xdata$x:0000DF0F                 db    0
.xdata$x:0000DF10                 dd offset __unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.xdata$x:0000DF14                 db    0
.xdata$x:0000DF15                 db    0
.xdata$x:0000DF16                 db    0
.xdata$x:0000DF17                 db    0
.xdata$x:0000DF18                 db    0
.xdata$x:0000DF19                 db    0
.xdata$x:0000DF1A                 db    0
.xdata$x:0000DF1B                 db    0
.xdata$x:0000DF1C                 db    0
.xdata$x:0000DF1D                 db    0
.xdata$x:0000DF1E                 db    0
.xdata$x:0000DF1F                 db    0
.xdata$x:0000DF20                 db    0
.xdata$x:0000DF21                 db    0
.xdata$x:0000DF22                 db    0
.xdata$x:0000DF23                 db    0
.xdata$x:0000DF24                 db    0
.xdata$x:0000DF25                 db    0
.xdata$x:0000DF26                 db    0
.xdata$x:0000DF27                 db    0
.xdata$x:0000DF28                 db    0
.xdata$x:0000DF29                 db    0
.xdata$x:0000DF2A                 db    0
.xdata$x:0000DF2B                 db    0
.xdata$x:0000DF2B _xdata$x        ends
.xdata$x:0000DF2B
.xdata$x:0000DF2C ; ===========================================================================
.xdata$x:0000DF2C
.xdata$x:0000DF2C ; Segment type: Pure data
.xdata$x:0000DF2C ; Segment permissions: Read
.xdata$x:0000DF2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF2C                 assume cs:_xdata$x
.xdata$x:0000DF2C                 ;org 0DF2Ch
.xdata$x:0000DF2C ; COMDAT (pick associative to section at 7480)
.xdata$x:0000DF2C __unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000DF2C                                         ; DATA XREF: .xdata$x:0000DF3Co
.xdata$x:0000DF2D                 db 0FFh
.xdata$x:0000DF2E                 db 0FFh
.xdata$x:0000DF2F                 db 0FFh
.xdata$x:0000DF30                 dd offset __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000DF34 __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000DF34                                         ; DATA XREF: __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000DF35                 db    5
.xdata$x:0000DF36                 db  93h ; ô
.xdata$x:0000DF37                 db  19h
.xdata$x:0000DF38                 db    1
.xdata$x:0000DF39                 db    0
.xdata$x:0000DF3A                 db    0
.xdata$x:0000DF3B                 db    0
.xdata$x:0000DF3C                 dd offset __unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.xdata$x:0000DF40                 db    0
.xdata$x:0000DF41                 db    0
.xdata$x:0000DF42                 db    0
.xdata$x:0000DF43                 db    0
.xdata$x:0000DF44                 db    0
.xdata$x:0000DF45                 db    0
.xdata$x:0000DF46                 db    0
.xdata$x:0000DF47                 db    0
.xdata$x:0000DF48                 db    0
.xdata$x:0000DF49                 db    0
.xdata$x:0000DF4A                 db    0
.xdata$x:0000DF4B                 db    0
.xdata$x:0000DF4C                 db    0
.xdata$x:0000DF4D                 db    0
.xdata$x:0000DF4E                 db    0
.xdata$x:0000DF4F                 db    0
.xdata$x:0000DF50                 db    0
.xdata$x:0000DF51                 db    0
.xdata$x:0000DF52                 db    0
.xdata$x:0000DF53                 db    0
.xdata$x:0000DF54                 db    0
.xdata$x:0000DF55                 db    0
.xdata$x:0000DF56                 db    0
.xdata$x:0000DF57                 db    0
.xdata$x:0000DF57 _xdata$x        ends
.xdata$x:0000DF57
.xdata$x:0000DF58 ; ===========================================================================
.xdata$x:0000DF58
.xdata$x:0000DF58 ; Segment type: Pure data
.xdata$x:0000DF58 ; Segment permissions: Read
.xdata$x:0000DF58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF58                 assume cs:_xdata$x
.xdata$x:0000DF58                 ;org 0DF58h
.xdata$x:0000DF58 ; COMDAT (pick associative to section at 44B8)
.xdata$x:0000DF58 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000DF58                                         ; DATA XREF: .xdata$x:0000DF68o
.xdata$x:0000DF59                 db 0FFh
.xdata$x:0000DF5A                 db 0FFh
.xdata$x:0000DF5B                 db 0FFh
.xdata$x:0000DF5C                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000DF60 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000DF60                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000DF61                 db    5
.xdata$x:0000DF62                 db  93h ; ô
.xdata$x:0000DF63                 db  19h
.xdata$x:0000DF64                 db    1
.xdata$x:0000DF65                 db    0
.xdata$x:0000DF66                 db    0
.xdata$x:0000DF67                 db    0
.xdata$x:0000DF68                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000DF6C                 db    0
.xdata$x:0000DF6D                 db    0
.xdata$x:0000DF6E                 db    0
.xdata$x:0000DF6F                 db    0
.xdata$x:0000DF70                 db    0
.xdata$x:0000DF71                 db    0
.xdata$x:0000DF72                 db    0
.xdata$x:0000DF73                 db    0
.xdata$x:0000DF74                 db    0
.xdata$x:0000DF75                 db    0
.xdata$x:0000DF76                 db    0
.xdata$x:0000DF77                 db    0
.xdata$x:0000DF78                 db    0
.xdata$x:0000DF79                 db    0
.xdata$x:0000DF7A                 db    0
.xdata$x:0000DF7B                 db    0
.xdata$x:0000DF7C                 db    0
.xdata$x:0000DF7D                 db    0
.xdata$x:0000DF7E                 db    0
.xdata$x:0000DF7F                 db    0
.xdata$x:0000DF80                 db    0
.xdata$x:0000DF81                 db    0
.xdata$x:0000DF82                 db    0
.xdata$x:0000DF83                 db    0
.xdata$x:0000DF83 _xdata$x        ends
.xdata$x:0000DF83
.xdata$x:0000DF84 ; ===========================================================================
.xdata$x:0000DF84
.xdata$x:0000DF84 ; Segment type: Pure data
.xdata$x:0000DF84 ; Segment permissions: Read
.xdata$x:0000DF84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DF84                 assume cs:_xdata$x
.xdata$x:0000DF84                 ;org 0DF84h
.xdata$x:0000DF84 ; COMDAT (pick associative to section at 45B8)
.xdata$x:0000DF84 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000DF84                                         ; DATA XREF: .xdata$x:0000DF94o
.xdata$x:0000DF85                 db 0FFh
.xdata$x:0000DF86                 db 0FFh
.xdata$x:0000DF87                 db 0FFh
.xdata$x:0000DF88                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000DF8C __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000DF8C                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000DF8D                 db    5
.xdata$x:0000DF8E                 db  93h ; ô
.xdata$x:0000DF8F                 db  19h
.xdata$x:0000DF90                 db    1
.xdata$x:0000DF91                 db    0
.xdata$x:0000DF92                 db    0
.xdata$x:0000DF93                 db    0
.xdata$x:0000DF94                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000DF98                 db    0
.xdata$x:0000DF99                 db    0
.xdata$x:0000DF9A                 db    0
.xdata$x:0000DF9B                 db    0
.xdata$x:0000DF9C                 db    0
.xdata$x:0000DF9D                 db    0
.xdata$x:0000DF9E                 db    0
.xdata$x:0000DF9F                 db    0
.xdata$x:0000DFA0                 db    0
.xdata$x:0000DFA1                 db    0
.xdata$x:0000DFA2                 db    0
.xdata$x:0000DFA3                 db    0
.xdata$x:0000DFA4                 db    0
.xdata$x:0000DFA5                 db    0
.xdata$x:0000DFA6                 db    0
.xdata$x:0000DFA7                 db    0
.xdata$x:0000DFA8                 db    0
.xdata$x:0000DFA9                 db    0
.xdata$x:0000DFAA                 db    0
.xdata$x:0000DFAB                 db    0
.xdata$x:0000DFAC                 db    0
.xdata$x:0000DFAD                 db    0
.xdata$x:0000DFAE                 db    0
.xdata$x:0000DFAF                 db    0
.xdata$x:0000DFAF _xdata$x        ends
.xdata$x:0000DFAF
.bss:0000DFB0 ; ===========================================================================
.bss:0000DFB0
.bss:0000DFB0 ; Segment type: Uninitialized
.bss:0000DFB0 ; Segment permissions: Read/Write
.bss:0000DFB0 _bss            segment byte public 'BSS' use32
.bss:0000DFB0                 assume cs:_bss
.bss:0000DFB0                 ;org 0DFB0h
.bss:0000DFB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000DFB0 _allocator_arg  db    ? ;
.bss:0000DFB1 _piecewise_construct db    ? ;
.bss:0000DFB2                 align 4
.bss:0000DFB2 _bss            ends
.bss:0000DFB2
.rdata:0000DFB4 ; ===========================================================================
.rdata:0000DFB4
.rdata:0000DFB4 ; Segment type: Pure data
.rdata:0000DFB4 ; Segment permissions: Read
.rdata:0000DFB4 _rdata          segment dword public 'DATA' use32
.rdata:0000DFB4                 assume cs:_rdata
.rdata:0000DFB4                 ;org 0DFB4h
.rdata:0000DFB4 ; COMDAT (pick any)
.rdata:0000DFB4                 public ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
.rdata:0000DFB4 ; size_t std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.rdata:0000DFB4 ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000DFB4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Br
.rdata:0000DFB4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+7r ...
.rdata:0000DFB4 _rdata          ends
.rdata:0000DFB4
.rdata:0000DFB8 ; ===========================================================================
.rdata:0000DFB8
.rdata:0000DFB8 ; Segment type: Pure data
.rdata:0000DFB8 ; Segment permissions: Read
.rdata:0000DFB8 _rdata          segment dword public 'DATA' use32
.rdata:0000DFB8                 assume cs:_rdata
.rdata:0000DFB8                 ;org 0DFB8h
.rdata:0000DFB8 ; COMDAT (pick largest)
.rdata:0000DFB8                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:0000DFBC                 public ??_7runtime_error@std@@6B@
.rdata:0000DFBC ; const std::runtime_error::`vftable'
.rdata:0000DFBC ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:0000DFBC                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:0000DFBC                                         ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+49o ...
.rdata:0000DFBC                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:0000DFC0                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000DFC0 _rdata          ends
.rdata:0000DFC0
.xdata$x:0000DFC4 ; ===========================================================================
.xdata$x:0000DFC4
.xdata$x:0000DFC4 ; Segment type: Pure data
.xdata$x:0000DFC4 ; Segment permissions: Read
.xdata$x:0000DFC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DFC4                 assume cs:_xdata$x
.xdata$x:0000DFC4                 ;org 0DFC4h
.xdata$x:0000DFC4 ; COMDAT (pick any)
.xdata$x:0000DFC4                 public __TI2?AVruntime_error@std@@
.xdata$x:0000DFC4 __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+A6o
.xdata$x:0000DFC5                 db    0
.xdata$x:0000DFC6                 db    0
.xdata$x:0000DFC7                 db    0
.xdata$x:0000DFC8                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:0000DFCC                 align 10h
.xdata$x:0000DFD0                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:0000DFD0 _xdata$x        ends
.xdata$x:0000DFD0
.xdata$x:0000DFD4 ; ===========================================================================
.xdata$x:0000DFD4
.xdata$x:0000DFD4 ; Segment type: Pure data
.xdata$x:0000DFD4 ; Segment permissions: Read
.xdata$x:0000DFD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DFD4                 assume cs:_xdata$x
.xdata$x:0000DFD4                 ;org 0DFD4h
.xdata$x:0000DFD4 ; COMDAT (pick any)
.xdata$x:0000DFD4                 public __CTA2?AVruntime_error@std@@
.xdata$x:0000DFD4 __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:0000DFD0o
.xdata$x:0000DFD5                 db    0
.xdata$x:0000DFD6                 db    0
.xdata$x:0000DFD7                 db    0
.xdata$x:0000DFD8                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000DFDC                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000DFDC _xdata$x        ends
.xdata$x:0000DFDC
.data$r:0000DFE0 ; ===========================================================================
.data$r:0000DFE0
.data$r:0000DFE0 ; Segment type: Pure data
.data$r:0000DFE0 ; Segment permissions: Read/Write
.data$r:0000DFE0 _data$r         segment dword public 'DATA' use32
.data$r:0000DFE0                 assume cs:_data$r
.data$r:0000DFE0                 ;org 0DFE0h
.data$r:0000DFE0 ; COMDAT (pick any)
.data$r:0000DFE0                 public ??_R0?AVruntime_error@std@@@8
.data$r:0000DFE0 ; class std::runtime_error `RTTI Type Descriptor'
.data$r:0000DFE0 ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DFE0                                         ; DATA XREF: .xdata$x:0000E004o
.data$r:0000DFE0                                         ; .rdata$r:0000EC28o ...
.data$r:0000DFE0                                         ; const type_info::`vftable'
.data$r:0000DFE4                 align 8
.data$r:0000DFE8 a_?avruntime_er db '.?AVruntime_error@std@@',0
.data$r:0000DFE8 _data$r         ends
.data$r:0000DFE8
.xdata$x:0000E000 ; ===========================================================================
.xdata$x:0000E000
.xdata$x:0000E000 ; Segment type: Pure data
.xdata$x:0000E000 ; Segment permissions: Read
.xdata$x:0000E000 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E000                 assume cs:_xdata$x
.xdata$x:0000E000                 ;org 0E000h
.xdata$x:0000E000 ; COMDAT (pick any)
.xdata$x:0000E000                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000E000 __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000E000                                         ; DATA XREF: .xdata$x:0000DFD8o
.xdata$x:0000E000                                         ; .xdata$x:0000E2C0o
.xdata$x:0000E001                 db    0
.xdata$x:0000E002                 db    0
.xdata$x:0000E003                 db    0
.xdata$x:0000E004                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:0000E008                 db    0
.xdata$x:0000E009                 db    0
.xdata$x:0000E00A                 db    0
.xdata$x:0000E00B                 db    0
.xdata$x:0000E00C                 db 0FFh
.xdata$x:0000E00D                 db 0FFh
.xdata$x:0000E00E                 db 0FFh
.xdata$x:0000E00F                 db 0FFh
.xdata$x:0000E010                 db    0
.xdata$x:0000E011                 db    0
.xdata$x:0000E012                 db    0
.xdata$x:0000E013                 db    0
.xdata$x:0000E014                 db  0Ch
.xdata$x:0000E015                 db    0
.xdata$x:0000E016                 db    0
.xdata$x:0000E017                 db    0
.xdata$x:0000E018                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:0000E018 _xdata$x        ends
.xdata$x:0000E018
.data$r:0000E01C ; ===========================================================================
.data$r:0000E01C
.data$r:0000E01C ; Segment type: Pure data
.data$r:0000E01C ; Segment permissions: Read/Write
.data$r:0000E01C _data$r         segment dword public 'DATA' use32
.data$r:0000E01C                 assume cs:_data$r
.data$r:0000E01C                 ;org 0E01Ch
.data$r:0000E01C ; COMDAT (pick any)
.data$r:0000E01C                 public ??_R0?AVexception@std@@@8
.data$r:0000E01C ; class std::exception `RTTI Type Descriptor'
.data$r:0000E01C ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E01C                                         ; DATA XREF: .xdata$x:0000E03Co
.data$r:0000E01C                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000E01C                                         ; const type_info::`vftable'
.data$r:0000E020                 db    0
.data$r:0000E021                 db    0
.data$r:0000E022                 db    0
.data$r:0000E023                 db    0
.data$r:0000E024                 db  2Eh ; .
.data$r:0000E025                 db  3Fh ; ?
.data$r:0000E026                 db  41h ; A
.data$r:0000E027                 db  56h ; V
.data$r:0000E028                 db  65h ; e
.data$r:0000E029                 db  78h ; x
.data$r:0000E02A                 db  63h ; c
.data$r:0000E02B                 db  65h ; e
.data$r:0000E02C                 db  70h ; p
.data$r:0000E02D                 db  74h ; t
.data$r:0000E02E                 db  69h ; i
.data$r:0000E02F                 db  6Fh ; o
.data$r:0000E030                 db  6Eh ; n
.data$r:0000E031                 db  40h ; @
.data$r:0000E032                 db  73h ; s
.data$r:0000E033                 db  74h ; t
.data$r:0000E034                 db  64h ; d
.data$r:0000E035                 db  40h ; @
.data$r:0000E036                 db  40h ; @
.data$r:0000E037                 db    0
.data$r:0000E037 _data$r         ends
.data$r:0000E037
.xdata$x:0000E038 ; ===========================================================================
.xdata$x:0000E038
.xdata$x:0000E038 ; Segment type: Pure data
.xdata$x:0000E038 ; Segment permissions: Read
.xdata$x:0000E038 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E038                 assume cs:_xdata$x
.xdata$x:0000E038                 ;org 0E038h
.xdata$x:0000E038 ; COMDAT (pick any)
.xdata$x:0000E038                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000E038 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000E038                                         ; DATA XREF: .xdata$x:0000DFDCo
.xdata$x:0000E038                                         ; .xdata$x:0000E2C4o ...
.xdata$x:0000E039                 db    0
.xdata$x:0000E03A                 db    0
.xdata$x:0000E03B                 db    0
.xdata$x:0000E03C                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:0000E040                 db    0
.xdata$x:0000E041                 db    0
.xdata$x:0000E042                 db    0
.xdata$x:0000E043                 db    0
.xdata$x:0000E044                 db 0FFh
.xdata$x:0000E045                 db 0FFh
.xdata$x:0000E046                 db 0FFh
.xdata$x:0000E047                 db 0FFh
.xdata$x:0000E048                 db    0
.xdata$x:0000E049                 db    0
.xdata$x:0000E04A                 db    0
.xdata$x:0000E04B                 db    0
.xdata$x:0000E04C                 db  0Ch
.xdata$x:0000E04D                 db    0
.xdata$x:0000E04E                 db    0
.xdata$x:0000E04F                 db    0
.xdata$x:0000E050                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:0000E050 _xdata$x        ends
.xdata$x:0000E050
.rdata:0000E054 ; ===========================================================================
.rdata:0000E054
.rdata:0000E054 ; Segment type: Pure data
.rdata:0000E054 ; Segment permissions: Read
.rdata:0000E054 _rdata          segment dword public 'DATA' use32
.rdata:0000E054                 assume cs:_rdata
.rdata:0000E054                 ;org 0E054h
.rdata:0000E054 ; COMDAT (pick any)
.rdata:0000E054                 public ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
.rdata:0000E054 ; char `string'[]
.rdata:0000E054 ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ db 'bad locale name',0
.rdata:0000E054                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+99o
.rdata:0000E054 _rdata          ends
.rdata:0000E054
.rdata:0000E064 ; ===========================================================================
.rdata:0000E064
.rdata:0000E064 ; Segment type: Pure data
.rdata:0000E064 ; Segment permissions: Read
.rdata:0000E064 _rdata          segment dword public 'DATA' use32
.rdata:0000E064                 assume cs:_rdata
.rdata:0000E064                 ;org 0E064h
.rdata:0000E064 ; COMDAT (pick largest)
.rdata:0000E064                 dd offset ??_R4_Facet_base@std@@6B@ ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata:0000E068                 public ??_7_Facet_base@std@@6B@
.rdata:0000E068 ; const std::_Facet_base::`vftable'
.rdata:0000E068 ??_7_Facet_base@std@@6B@ dd offset ??_E_Facet_base@std@@UAEPAXI@Z
.rdata:0000E068                                         ; DATA XREF: std::_Facet_base::_Facet_base(void)+Ao
.rdata:0000E068                                         ; std::_Facet_base::~_Facet_base(void)+Ao
.rdata:0000E068                                         ; std::_Facet_base::`vector deleting destructor'(uint)
.rdata:0000E06C                 dd offset __purecall
.rdata:0000E070                 dd offset __purecall
.rdata:0000E070 _rdata          ends
.rdata:0000E070
.rdata:0000E074 ; ===========================================================================
.rdata:0000E074
.rdata:0000E074 ; Segment type: Pure data
.rdata:0000E074 ; Segment permissions: Read
.rdata:0000E074 _rdata          segment dword public 'DATA' use32
.rdata:0000E074                 assume cs:_rdata
.rdata:0000E074                 ;org 0E074h
.rdata:0000E074 ; COMDAT (pick largest)
.rdata:0000E074                 dd offset ??_R4facet@locale@std@@6B@ ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata:0000E078                 public ??_7facet@locale@std@@6B@
.rdata:0000E078 ; const std::locale::facet::`vftable'
.rdata:0000E078 ??_7facet@locale@std@@6B@ dd offset ??_Efacet@locale@std@@MAEPAXI@Z
.rdata:0000E078                                         ; DATA XREF: std::locale::facet::facet(uint)+38o
.rdata:0000E078                                         ; std::locale::facet::~facet(void)+29o
.rdata:0000E078                                         ; std::locale::facet::`vector deleting destructor'(uint)
.rdata:0000E07C                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000E080                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000E080 _rdata          ends
.rdata:0000E080
.rdata:0000E084 ; ===========================================================================
.rdata:0000E084
.rdata:0000E084 ; Segment type: Pure data
.rdata:0000E084 ; Segment permissions: Read
.rdata:0000E084 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E084 _rdata          segment para public 'DATA' use32
.rdata:0000E084                 assume cs:_rdata
.rdata:0000E084                 ;org 0E084h
.rdata:0000E084 ; COMDAT (pick any)
.rdata:0000E084                 public ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000E084 ; char `string'[]
.rdata:0000E084 ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xl'
.rdata:0000E084                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+4Fo
.rdata:0000E084                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+5o
.rdata:0000E084                 db 'ocale',0
.rdata:0000E0CB                 align 4
.rdata:0000E0CB _rdata          ends
.rdata:0000E0CB
.rdata:0000E0CC ; ===========================================================================
.rdata:0000E0CC
.rdata:0000E0CC ; Segment type: Pure data
.rdata:0000E0CC ; Segment permissions: Read
.rdata:0000E0CC _rdata          segment byte public 'DATA' use32
.rdata:0000E0CC                 assume cs:_rdata
.rdata:0000E0CC                 ;org 0E0CCh
.rdata:0000E0CC ; COMDAT (pick any)
.rdata:0000E0CC                 public ??_C@_00CNPNBAHC@?$AA@
.rdata:0000E0CC ; `string'
.rdata:0000E0CC ??_C@_00CNPNBAHC@?$AA@ db    0          ; DATA XREF: std::locale::c_str(void)+11o
.rdata:0000E0CD                 align 10h
.rdata:0000E0CD _rdata          ends
.rdata:0000E0CD
.rdata:0000E0D0 ; ===========================================================================
.rdata:0000E0D0
.rdata:0000E0D0 ; Segment type: Pure data
.rdata:0000E0D0 ; Segment permissions: Read
.rdata:0000E0D0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E0D0 _rdata          segment para public 'DATA' use32
.rdata:0000E0D0                 assume cs:_rdata
.rdata:0000E0D0                 ;org 0E0D0h
.rdata:0000E0D0 ; COMDAT (pick any)
.rdata:0000E0D0                 public ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000E0D0 ; wchar_t `string'
.rdata:0000E0D0 ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000E0D0                                         ; DATA XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+Co
.rdata:0000E0D0                                         ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+26o ...
.rdata:0000E0D0                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000E0D0                 unicode 0, <clude\xlocale>,0
.rdata:0000E15E                 align 10h
.rdata:0000E15E _rdata          ends
.rdata:0000E15E
.rdata:0000E160 ; ===========================================================================
.rdata:0000E160
.rdata:0000E160 ; Segment type: Pure data
.rdata:0000E160 ; Segment permissions: Read
.rdata:0000E160 _rdata          segment dword public 'DATA' use32
.rdata:0000E160                 assume cs:_rdata
.rdata:0000E160                 ;org 0E160h
.rdata:0000E160 ; COMDAT (pick largest)
.rdata:0000E160                 dd offset ??_R4ctype_base@std@@6B@ ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata:0000E164                 public ??_7ctype_base@std@@6B@
.rdata:0000E164 ; const std::ctype_base::`vftable'
.rdata:0000E164 ??_7ctype_base@std@@6B@ dd offset ??_Ectype_base@std@@UAEPAXI@Z
.rdata:0000E164                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+3Co
.rdata:0000E164                                         ; std::ctype_base::~ctype_base(void)+29o
.rdata:0000E164                                         ; std::ctype_base::`vector deleting destructor'(uint)
.rdata:0000E168                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000E16C                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000E16C _rdata          ends
.rdata:0000E16C
.rdata:0000E170 ; ===========================================================================
.rdata:0000E170
.rdata:0000E170 ; Segment type: Pure data
.rdata:0000E170 ; Segment permissions: Read
.rdata:0000E170 _rdata          segment dword public 'DATA' use32
.rdata:0000E170                 assume cs:_rdata
.rdata:0000E170                 ;org 0E170h
.rdata:0000E170 ; COMDAT (pick largest)
.rdata:0000E170                 dd offset ??_R4?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata:0000E174                 public ??_7?$ctype@_W@std@@6B@
.rdata:0000E174 ; const std::ctype<wchar_t>::`vftable'
.rdata:0000E174 ??_7?$ctype@_W@std@@6B@ dd offset ??_E?$ctype@_W@std@@MAEPAXI@Z
.rdata:0000E174                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+3Co
.rdata:0000E174                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+29o
.rdata:0000E174                                         ; std::ctype<wchar_t>::`vector deleting destructor'(uint)
.rdata:0000E178                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000E17C                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000E180                 dd offset ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)
.rdata:0000E184                 dd offset ?do_is@?$ctype@_W@std@@MBE_NF_W@Z ; std::ctype<wchar_t>::do_is(short,wchar_t)
.rdata:0000E188                 dd offset ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)
.rdata:0000E18C                 dd offset ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)
.rdata:0000E190                 dd offset ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)
.rdata:0000E194                 dd offset ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t)
.rdata:0000E198                 dd offset ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)
.rdata:0000E19C                 dd offset ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t)
.rdata:0000E1A0                 dd offset ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ; std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)
.rdata:0000E1A4                 dd offset ?do_widen@?$ctype@_W@std@@MBE_WD@Z ; std::ctype<wchar_t>::do_widen(char)
.rdata:0000E1A8                 dd offset ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)
.rdata:0000E1AC                 dd offset ?do_narrow@?$ctype@_W@std@@MBED_WD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t,char)
.rdata:0000E1AC _rdata          ends
.rdata:0000E1AC
.rdata:0000E1B0 ; ===========================================================================
.rdata:0000E1B0
.rdata:0000E1B0 ; Segment type: Pure data
.rdata:0000E1B0 ; Segment permissions: Read
.rdata:0000E1B0 _rdata          segment dword public 'DATA' use32
.rdata:0000E1B0                 assume cs:_rdata
.rdata:0000E1B0                 ;org 0E1B0h
.rdata:0000E1B0 ; COMDAT (pick largest)
.rdata:0000E1B0                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000E1B4                 public ??_7error_category@std@@6B@
.rdata:0000E1B4 ; const std::error_category::`vftable'
.rdata:0000E1B4 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000E1B4                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000E1B4                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000E1B4                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000E1B8                 dd offset __purecall
.rdata:0000E1BC                 dd offset __purecall
.rdata:0000E1C0                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E1C4                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E1C8                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E1C8 _rdata          ends
.rdata:0000E1C8
.rdata:0000E1CC ; ===========================================================================
.rdata:0000E1CC
.rdata:0000E1CC ; Segment type: Pure data
.rdata:0000E1CC ; Segment permissions: Read
.rdata:0000E1CC _rdata          segment dword public 'DATA' use32
.rdata:0000E1CC                 assume cs:_rdata
.rdata:0000E1CC                 ;org 0E1CCh
.rdata:0000E1CC ; COMDAT (pick largest)
.rdata:0000E1CC                 dd offset ??_R4_System_error@std@@6B@ ; const std::_System_error::`RTTI Complete Object Locator'
.rdata:0000E1D0                 public ??_7_System_error@std@@6B@
.rdata:0000E1D0 ; const std::_System_error::`vftable'
.rdata:0000E1D0 ??_7_System_error@std@@6B@ dd offset ??_E_System_error@std@@UAEPAXI@Z
.rdata:0000E1D0                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+92o
.rdata:0000E1D0                                         ; std::_System_error::_System_error(std::_System_error const &)+3Co
.rdata:0000E1D0                                         ; std::_System_error::`vector deleting destructor'(uint)
.rdata:0000E1D4                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000E1D4 _rdata          ends
.rdata:0000E1D4
.rdata:0000E1D8 ; ===========================================================================
.rdata:0000E1D8
.rdata:0000E1D8 ; Segment type: Pure data
.rdata:0000E1D8 ; Segment permissions: Read
.rdata:0000E1D8 _rdata          segment dword public 'DATA' use32
.rdata:0000E1D8                 assume cs:_rdata
.rdata:0000E1D8                 ;org 0E1D8h
.rdata:0000E1D8 ; COMDAT (pick any)
.rdata:0000E1D8                 public ??_C@_02LMMGGCAJ@?3?5?$AA@
.rdata:0000E1D8 ; char `string'[3]
.rdata:0000E1D8 ??_C@_02LMMGGCAJ@?3?5?$AA@ db ': ',0    ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+45o
.rdata:0000E1DB                 align 4
.rdata:0000E1DB _rdata          ends
.rdata:0000E1DB
.rdata:0000E1DC ; ===========================================================================
.rdata:0000E1DC
.rdata:0000E1DC ; Segment type: Pure data
.rdata:0000E1DC ; Segment permissions: Read
.rdata:0000E1DC _rdata          segment dword public 'DATA' use32
.rdata:0000E1DC                 assume cs:_rdata
.rdata:0000E1DC                 ;org 0E1DCh
.rdata:0000E1DC ; COMDAT (pick largest)
.rdata:0000E1DC                 dd offset ??_R4system_error@std@@6B@ ; const std::system_error::`RTTI Complete Object Locator'
.rdata:0000E1E0                 public ??_7system_error@std@@6B@
.rdata:0000E1E0 ; const std::system_error::`vftable'
.rdata:0000E1E0 ??_7system_error@std@@6B@ dd offset ??_Esystem_error@std@@UAEPAXI@Z
.rdata:0000E1E0                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+3Co
.rdata:0000E1E0                                         ; std::system_error::system_error(std::error_code,char const *)+61o
.rdata:0000E1E0                                         ; std::system_error::`vector deleting destructor'(uint)
.rdata:0000E1E4                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000E1E4 _rdata          ends
.rdata:0000E1E4
.rdata:0000E1E8 ; ===========================================================================
.rdata:0000E1E8
.rdata:0000E1E8 ; Segment type: Pure data
.rdata:0000E1E8 ; Segment permissions: Read
.rdata:0000E1E8 _rdata          segment dword public 'DATA' use32
.rdata:0000E1E8                 assume cs:_rdata
.rdata:0000E1E8                 ;org 0E1E8h
.rdata:0000E1E8 ; COMDAT (pick largest)
.rdata:0000E1E8                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000E1EC                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000E1EC ; const std::_Generic_error_category::`vftable'
.rdata:0000E1EC ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000E1EC                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000E1EC                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000E1F0                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000E1F4                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000E1F8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E1FC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E200                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E200 _rdata          ends
.rdata:0000E200
.rdata:0000E204 ; ===========================================================================
.rdata:0000E204
.rdata:0000E204 ; Segment type: Pure data
.rdata:0000E204 ; Segment permissions: Read
.rdata:0000E204 _rdata          segment dword public 'DATA' use32
.rdata:0000E204                 assume cs:_rdata
.rdata:0000E204                 ;org 0E204h
.rdata:0000E204 ; COMDAT (pick any)
.rdata:0000E204                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000E204 ; `string'
.rdata:0000E204 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000E204                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000E204 _rdata          ends
.rdata:0000E204
.rdata:0000E20C ; ===========================================================================
.rdata:0000E20C
.rdata:0000E20C ; Segment type: Pure data
.rdata:0000E20C ; Segment permissions: Read
.rdata:0000E20C _rdata          segment dword public 'DATA' use32
.rdata:0000E20C                 assume cs:_rdata
.rdata:0000E20C                 ;org 0E20Ch
.rdata:0000E20C ; COMDAT (pick any)
.rdata:0000E20C                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000E20C ; `string'
.rdata:0000E20C ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000E20C                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_AFB0o
.rdata:0000E20C                                         ; std::_System_error_category::message(int):loc_B12Co
.rdata:0000E21A                 align 4
.rdata:0000E21A _rdata          ends
.rdata:0000E21A
.rdata:0000E21C ; ===========================================================================
.rdata:0000E21C
.rdata:0000E21C ; Segment type: Pure data
.rdata:0000E21C ; Segment permissions: Read
.rdata:0000E21C _rdata          segment dword public 'DATA' use32
.rdata:0000E21C                 assume cs:_rdata
.rdata:0000E21C                 ;org 0E21Ch
.rdata:0000E21C ; COMDAT (pick largest)
.rdata:0000E21C                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000E220                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000E220 ; const std::_Iostream_error_category::`vftable'
.rdata:0000E220 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000E220                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000E220                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000E224                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000E228                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000E22C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000E230                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E234                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E234 _rdata          ends
.rdata:0000E234
.rdata:0000E238 ; ===========================================================================
.rdata:0000E238
.rdata:0000E238 ; Segment type: Pure data
.rdata:0000E238 ; Segment permissions: Read
.rdata:0000E238 _rdata          segment dword public 'DATA' use32
.rdata:0000E238                 assume cs:_rdata
.rdata:0000E238                 ;org 0E238h
.rdata:0000E238 ; COMDAT (pick any)
.rdata:0000E238                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000E238 ; `string'
.rdata:0000E238 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000E238                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000E241                 align 4
.rdata:0000E241 _rdata          ends
.rdata:0000E241
.rdata:0000E244 ; ===========================================================================
.rdata:0000E244
.rdata:0000E244 ; Segment type: Pure data
.rdata:0000E244 ; Segment permissions: Read
.rdata:0000E244 _rdata          segment dword public 'DATA' use32
.rdata:0000E244                 assume cs:_rdata
.rdata:0000E244                 ;org 0E244h
.rdata:0000E244 ; COMDAT (pick any)
.rdata:0000E244                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000E244 ; char `string'[]
.rdata:0000E244 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000E244                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000E25A                 align 4
.rdata:0000E25A _rdata          ends
.rdata:0000E25A
.rdata:0000E25C ; ===========================================================================
.rdata:0000E25C
.rdata:0000E25C ; Segment type: Pure data
.rdata:0000E25C ; Segment permissions: Read
.rdata:0000E25C _rdata          segment dword public 'DATA' use32
.rdata:0000E25C                 assume cs:_rdata
.rdata:0000E25C                 ;org 0E25Ch
.rdata:0000E25C ; COMDAT (pick largest)
.rdata:0000E25C                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000E260                 public ??_7_System_error_category@std@@6B@
.rdata:0000E260 ; const std::_System_error_category::`vftable'
.rdata:0000E260 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000E260                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000E260                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000E264                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000E268                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000E26C                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000E270                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000E274                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000E274 _rdata          ends
.rdata:0000E274
.rdata:0000E278 ; ===========================================================================
.rdata:0000E278
.rdata:0000E278 ; Segment type: Pure data
.rdata:0000E278 ; Segment permissions: Read
.rdata:0000E278 _rdata          segment dword public 'DATA' use32
.rdata:0000E278                 assume cs:_rdata
.rdata:0000E278                 ;org 0E278h
.rdata:0000E278 ; COMDAT (pick any)
.rdata:0000E278                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000E278 ; `string'
.rdata:0000E278 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000E278                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000E27F                 align 10h
.rdata:0000E27F _rdata          ends
.rdata:0000E27F
.bss:0000E280 ; ===========================================================================
.bss:0000E280
.bss:0000E280 ; Segment type: Uninitialized
.bss:0000E280 ; Segment permissions: Read/Write
.bss:0000E280 _bss            segment dword public 'BSS' use32
.bss:0000E280                 assume cs:_bss
.bss:0000E280                 ;org 0E280h
.bss:0000E280 ; COMDAT (pick any)
.bss:0000E280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E280                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000E280 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000E280 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000E280                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000E280                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000E281                 db    ? ;
.bss:0000E282                 db    ? ;
.bss:0000E283                 db    ? ;
.bss:0000E283 _bss            ends
.bss:0000E283
.bss:0000E284 ; ===========================================================================
.bss:0000E284
.bss:0000E284 ; Segment type: Uninitialized
.bss:0000E284 ; Segment permissions: Read/Write
.bss:0000E284 _bss            segment dword public 'BSS' use32
.bss:0000E284                 assume cs:_bss
.bss:0000E284                 ;org 0E284h
.bss:0000E284 ; COMDAT (pick any)
.bss:0000E284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E284                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000E284 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000E284 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000E284                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000E284                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o ...
.bss:0000E285                 db    ? ;
.bss:0000E286                 db    ? ;
.bss:0000E287                 db    ? ;
.bss:0000E287 _bss            ends
.bss:0000E287
.bss:0000E288 ; ===========================================================================
.bss:0000E288
.bss:0000E288 ; Segment type: Uninitialized
.bss:0000E288 ; Segment permissions: Read/Write
.bss:0000E288 _bss            segment dword public 'BSS' use32
.bss:0000E288                 assume cs:_bss
.bss:0000E288                 ;org 0E288h
.bss:0000E288 ; COMDAT (pick any)
.bss:0000E288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E288                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000E288 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000E288 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000E288                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000E288                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000E289                 db    ? ;
.bss:0000E28A                 db    ? ;
.bss:0000E28B                 db    ? ;
.bss:0000E28B _bss            ends
.bss:0000E28B
.rdata:0000E28C ; ===========================================================================
.rdata:0000E28C
.rdata:0000E28C ; Segment type: Pure data
.rdata:0000E28C ; Segment permissions: Read
.rdata:0000E28C _rdata          segment dword public 'DATA' use32
.rdata:0000E28C                 assume cs:_rdata
.rdata:0000E28C                 ;org 0E28Ch
.rdata:0000E28C ; COMDAT (pick largest)
.rdata:0000E28C                 dd offset ??_R4failure@ios_base@std@@6B@ ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata:0000E290                 public ??_7failure@ios_base@std@@6B@
.rdata:0000E290 ; const std::ios_base::failure::`vftable'
.rdata:0000E290 ??_7failure@ios_base@std@@6B@ dd offset ??_Efailure@ios_base@std@@UAEPAXI@Z
.rdata:0000E290                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+3Co
.rdata:0000E290                                         ; std::ios_base::failure::failure(char const *,std::error_code const &)+46o
.rdata:0000E290                                         ; std::ios_base::failure::`vector deleting destructor'(uint)
.rdata:0000E294                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000E294 _rdata          ends
.rdata:0000E294
.rdata:0000E298 ; ===========================================================================
.rdata:0000E298
.rdata:0000E298 ; Segment type: Pure data
.rdata:0000E298 ; Segment permissions: Read
.rdata:0000E298 _rdata          segment dword public 'DATA' use32
.rdata:0000E298                 assume cs:_rdata
.rdata:0000E298                 ;org 0E298h
.rdata:0000E298 ; COMDAT (pick largest)
.rdata:0000E298                 dd offset ??_R4ios_base@std@@6B@ ; const std::ios_base::`RTTI Complete Object Locator'
.rdata:0000E29C                 public ??_7ios_base@std@@6B@
.rdata:0000E29C ; const std::ios_base::`vftable'
.rdata:0000E29C ??_7ios_base@std@@6B@ dd offset ??_Eios_base@std@@UAEPAXI@Z
.rdata:0000E29C                                         ; DATA XREF: std::ios_base::ios_base(void)+Ao
.rdata:0000E29C                                         ; std::ios_base::~ios_base(void)+Ao
.rdata:0000E29C _rdata          ends                    ; std::ios_base::`vector deleting destructor'(uint)
.rdata:0000E29C
.xdata$x:0000E2A0 ; ===========================================================================
.xdata$x:0000E2A0
.xdata$x:0000E2A0 ; Segment type: Pure data
.xdata$x:0000E2A0 ; Segment permissions: Read
.xdata$x:0000E2A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E2A0                 assume cs:_xdata$x
.xdata$x:0000E2A0                 ;org 0E2A0h
.xdata$x:0000E2A0 ; COMDAT (pick any)
.xdata$x:0000E2A0                 public __TI5?AVfailure@ios_base@std@@
.xdata$x:0000E2A0 __TI5?AVfailure@ios_base@std@@ db    0  ; DATA XREF: std::ios_base::clear(int,bool)+6Bo
.xdata$x:0000E2A0                                         ; std::ios_base::clear(int,bool)+A8o ...
.xdata$x:0000E2A1                 db    0
.xdata$x:0000E2A2                 db    0
.xdata$x:0000E2A3                 db    0
.xdata$x:0000E2A4                 dd offset ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.xdata$x:0000E2A8                 db    0
.xdata$x:0000E2A9                 db    0
.xdata$x:0000E2AA                 db    0
.xdata$x:0000E2AB                 db    0
.xdata$x:0000E2AC                 dd offset __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000E2AC _xdata$x        ends
.xdata$x:0000E2AC
.xdata$x:0000E2B0 ; ===========================================================================
.xdata$x:0000E2B0
.xdata$x:0000E2B0 ; Segment type: Pure data
.xdata$x:0000E2B0 ; Segment permissions: Read
.xdata$x:0000E2B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E2B0                 assume cs:_xdata$x
.xdata$x:0000E2B0                 ;org 0E2B0h
.xdata$x:0000E2B0 ; COMDAT (pick any)
.xdata$x:0000E2B0                 public __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000E2B0 __CTA5?AVfailure@ios_base@std@@ db    5 ; DATA XREF: .xdata$x:0000E2ACo
.xdata$x:0000E2B1                 db    0
.xdata$x:0000E2B2                 db    0
.xdata$x:0000E2B3                 db    0
.xdata$x:0000E2B4                 dd offset __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000E2B8                 dd offset __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000E2BC                 dd offset __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000E2C0                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000E2C4                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000E2C4 _xdata$x        ends
.xdata$x:0000E2C4
.data$r:0000E2C8 ; ===========================================================================
.data$r:0000E2C8
.data$r:0000E2C8 ; Segment type: Pure data
.data$r:0000E2C8 ; Segment permissions: Read/Write
.data$r:0000E2C8 _data$r         segment dword public 'DATA' use32
.data$r:0000E2C8                 assume cs:_data$r
.data$r:0000E2C8                 ;org 0E2C8h
.data$r:0000E2C8 ; COMDAT (pick any)
.data$r:0000E2C8                 public ??_R0?AVfailure@ios_base@std@@@8
.data$r:0000E2C8 ; class std::ios_base::failure `RTTI Type Descriptor'
.data$r:0000E2C8 ??_R0?AVfailure@ios_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E2C8                                         ; DATA XREF: .xdata$x:0000E2F0o
.data$r:0000E2C8                                         ; .rdata$r:0000F0ACo ...
.data$r:0000E2C8                                         ; const type_info::`vftable'
.data$r:0000E2CC                 align 10h
.data$r:0000E2D0 a_?avfailure@io db '.?AVfailure@ios_base@std@@',0
.data$r:0000E2EB                 align 4
.data$r:0000E2EB _data$r         ends
.data$r:0000E2EB
.xdata$x:0000E2EC ; ===========================================================================
.xdata$x:0000E2EC
.xdata$x:0000E2EC ; Segment type: Pure data
.xdata$x:0000E2EC ; Segment permissions: Read
.xdata$x:0000E2EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E2EC                 assume cs:_xdata$x
.xdata$x:0000E2EC                 ;org 0E2ECh
.xdata$x:0000E2EC ; COMDAT (pick any)
.xdata$x:0000E2EC                 public __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000E2EC __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 db    0
.xdata$x:0000E2EC                                         ; DATA XREF: .xdata$x:0000E2B4o
.xdata$x:0000E2ED                 db    0
.xdata$x:0000E2EE                 db    0
.xdata$x:0000E2EF                 db    0
.xdata$x:0000E2F0                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.xdata$x:0000E2F4                 align 8
.xdata$x:0000E2F8                 db 0FFh
.xdata$x:0000E2F9                 db 0FFh
.xdata$x:0000E2FA                 db 0FFh
.xdata$x:0000E2FB                 db 0FFh
.xdata$x:0000E2FC                 db    0
.xdata$x:0000E2FD                 db    0
.xdata$x:0000E2FE                 db    0
.xdata$x:0000E2FF                 db    0
.xdata$x:0000E300                 db  14h
.xdata$x:0000E301                 db    0
.xdata$x:0000E302                 db    0
.xdata$x:0000E303                 db    0
.xdata$x:0000E304                 dd offset ??0failure@ios_base@std@@QAE@ABV012@@Z ; std::ios_base::failure::failure(std::ios_base::failure const &)
.xdata$x:0000E304 _xdata$x        ends
.xdata$x:0000E304
.data$r:0000E308 ; ===========================================================================
.data$r:0000E308
.data$r:0000E308 ; Segment type: Pure data
.data$r:0000E308 ; Segment permissions: Read/Write
.data$r:0000E308 _data$r         segment dword public 'DATA' use32
.data$r:0000E308                 assume cs:_data$r
.data$r:0000E308                 ;org 0E308h
.data$r:0000E308 ; COMDAT (pick any)
.data$r:0000E308                 public ??_R0?AVsystem_error@std@@@8
.data$r:0000E308 ; class std::system_error `RTTI Type Descriptor'
.data$r:0000E308 ??_R0?AVsystem_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E308                                         ; DATA XREF: .xdata$x:0000E32Co
.data$r:0000E308                                         ; .rdata$r:0000EEE8o ...
.data$r:0000E308                                         ; const type_info::`vftable'
.data$r:0000E30C                 align 10h
.data$r:0000E310 a_?avsystem_err db '.?AVsystem_error@std@@',0
.data$r:0000E327                 align 4
.data$r:0000E327 _data$r         ends
.data$r:0000E327
.xdata$x:0000E328 ; ===========================================================================
.xdata$x:0000E328
.xdata$x:0000E328 ; Segment type: Pure data
.xdata$x:0000E328 ; Segment permissions: Read
.xdata$x:0000E328 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E328                 assume cs:_xdata$x
.xdata$x:0000E328                 ;org 0E328h
.xdata$x:0000E328 ; COMDAT (pick any)
.xdata$x:0000E328                 public __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000E328 __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000E328                                         ; DATA XREF: .xdata$x:0000E2B8o
.xdata$x:0000E329                 db    0
.xdata$x:0000E32A                 db    0
.xdata$x:0000E32B                 db    0
.xdata$x:0000E32C                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.xdata$x:0000E330                 db    0
.xdata$x:0000E331                 db    0
.xdata$x:0000E332                 db    0
.xdata$x:0000E333                 db    0
.xdata$x:0000E334                 db 0FFh
.xdata$x:0000E335                 db 0FFh
.xdata$x:0000E336                 db 0FFh
.xdata$x:0000E337                 db 0FFh
.xdata$x:0000E338                 db    0
.xdata$x:0000E339                 db    0
.xdata$x:0000E33A                 db    0
.xdata$x:0000E33B                 db    0
.xdata$x:0000E33C                 db  14h
.xdata$x:0000E33D                 db    0
.xdata$x:0000E33E                 db    0
.xdata$x:0000E33F                 db    0
.xdata$x:0000E340                 dd offset ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.xdata$x:0000E340 _xdata$x        ends
.xdata$x:0000E340
.data$r:0000E344 ; ===========================================================================
.data$r:0000E344
.data$r:0000E344 ; Segment type: Pure data
.data$r:0000E344 ; Segment permissions: Read/Write
.data$r:0000E344 _data$r         segment dword public 'DATA' use32
.data$r:0000E344                 assume cs:_data$r
.data$r:0000E344                 ;org 0E344h
.data$r:0000E344 ; COMDAT (pick any)
.data$r:0000E344                 public ??_R0?AV_System_error@std@@@8
.data$r:0000E344 ; class std::_System_error `RTTI Type Descriptor'
.data$r:0000E344 ??_R0?AV_System_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E344                                         ; DATA XREF: .xdata$x:0000E368o
.data$r:0000E344                                         ; .rdata$r:0000EE98o ...
.data$r:0000E344                                         ; const type_info::`vftable'
.data$r:0000E348                 db    0
.data$r:0000E349                 db    0
.data$r:0000E34A                 db    0
.data$r:0000E34B                 db    0
.data$r:0000E34C                 db  2Eh ; .
.data$r:0000E34D                 db  3Fh ; ?
.data$r:0000E34E                 db  41h ; A
.data$r:0000E34F                 db  56h ; V
.data$r:0000E350                 db  5Fh ; _
.data$r:0000E351                 db  53h ; S
.data$r:0000E352                 db  79h ; y
.data$r:0000E353                 db  73h ; s
.data$r:0000E354                 db  74h ; t
.data$r:0000E355                 db  65h ; e
.data$r:0000E356                 db  6Dh ; m
.data$r:0000E357                 db  5Fh ; _
.data$r:0000E358                 db  65h ; e
.data$r:0000E359                 db  72h ; r
.data$r:0000E35A                 db  72h ; r
.data$r:0000E35B                 db  6Fh ; o
.data$r:0000E35C                 db  72h ; r
.data$r:0000E35D                 db  40h ; @
.data$r:0000E35E                 db  73h ; s
.data$r:0000E35F                 db  74h ; t
.data$r:0000E360                 db  64h ; d
.data$r:0000E361                 db  40h ; @
.data$r:0000E362                 db  40h ; @
.data$r:0000E363                 db    0
.data$r:0000E363 _data$r         ends
.data$r:0000E363
.xdata$x:0000E364 ; ===========================================================================
.xdata$x:0000E364
.xdata$x:0000E364 ; Segment type: Pure data
.xdata$x:0000E364 ; Segment permissions: Read
.xdata$x:0000E364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E364                 assume cs:_xdata$x
.xdata$x:0000E364                 ;org 0E364h
.xdata$x:0000E364 ; COMDAT (pick any)
.xdata$x:0000E364                 public __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000E364 __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000E364                                         ; DATA XREF: .xdata$x:0000E2BCo
.xdata$x:0000E365                 db    0
.xdata$x:0000E366                 db    0
.xdata$x:0000E367                 db    0
.xdata$x:0000E368                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.xdata$x:0000E36C                 align 10h
.xdata$x:0000E370                 db 0FFh
.xdata$x:0000E371                 db 0FFh
.xdata$x:0000E372                 db 0FFh
.xdata$x:0000E373                 db 0FFh
.xdata$x:0000E374                 db    0
.xdata$x:0000E375                 db    0
.xdata$x:0000E376                 db    0
.xdata$x:0000E377                 db    0
.xdata$x:0000E378                 db  14h
.xdata$x:0000E379                 db    0
.xdata$x:0000E37A                 db    0
.xdata$x:0000E37B                 db    0
.xdata$x:0000E37C                 dd offset ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.xdata$x:0000E37C _xdata$x        ends
.xdata$x:0000E37C
.rdata:0000E380 ; ===========================================================================
.rdata:0000E380
.rdata:0000E380 ; Segment type: Pure data
.rdata:0000E380 ; Segment permissions: Read
.rdata:0000E380 _rdata          segment dword public 'DATA' use32
.rdata:0000E380                 assume cs:_rdata
.rdata:0000E380                 ;org 0E380h
.rdata:0000E380 ; COMDAT (pick any)
.rdata:0000E380                 public ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
.rdata:0000E380 ; char `string'[]
.rdata:0000E380 ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ db 'ios_base::badbit set',0
.rdata:0000E380                                         ; DATA XREF: std::ios_base::clear(int,bool)+5Eo
.rdata:0000E395                 align 4
.rdata:0000E395 _rdata          ends
.rdata:0000E395
.rdata:0000E398 ; ===========================================================================
.rdata:0000E398
.rdata:0000E398 ; Segment type: Pure data
.rdata:0000E398 ; Segment permissions: Read
.rdata:0000E398 _rdata          segment dword public 'DATA' use32
.rdata:0000E398                 assume cs:_rdata
.rdata:0000E398                 ;org 0E398h
.rdata:0000E398 ; COMDAT (pick any)
.rdata:0000E398                 public ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
.rdata:0000E398 ; char `string'[]
.rdata:0000E398 ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ db 'ios_base::failbit set',0
.rdata:0000E398                                         ; DATA XREF: std::ios_base::clear(int,bool)+9Bo
.rdata:0000E3AE                 align 10h
.rdata:0000E3AE _rdata          ends
.rdata:0000E3AE
.rdata:0000E3B0 ; ===========================================================================
.rdata:0000E3B0
.rdata:0000E3B0 ; Segment type: Pure data
.rdata:0000E3B0 ; Segment permissions: Read
.rdata:0000E3B0 _rdata          segment dword public 'DATA' use32
.rdata:0000E3B0                 assume cs:_rdata
.rdata:0000E3B0                 ;org 0E3B0h
.rdata:0000E3B0 ; COMDAT (pick any)
.rdata:0000E3B0                 public ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
.rdata:0000E3B0 ; char `string'[]
.rdata:0000E3B0 ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ db 'ios_base::eofbit set',0
.rdata:0000E3B0                                         ; DATA XREF: std::ios_base::clear(int,bool)+C7o
.rdata:0000E3C5                 align 4
.rdata:0000E3C5 _rdata          ends
.rdata:0000E3C5
.rdata:0000E3C8 ; ===========================================================================
.rdata:0000E3C8
.rdata:0000E3C8 ; Segment type: Pure data
.rdata:0000E3C8 ; Segment permissions: Read
.rdata:0000E3C8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E3C8 _rdata          segment para public 'DATA' use32
.rdata:0000E3C8                 assume cs:_rdata
.rdata:0000E3C8                 ;org 0E3C8h
.rdata:0000E3C8 ; COMDAT (pick any)
.rdata:0000E3C8                 public ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000E3C8 ; char `string'[]
.rdata:0000E3C8 ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xi'
.rdata:0000E3C8                                         ; DATA XREF: std::ios_base::_Init(void)+76o
.rdata:0000E3C8                 db 'osbase',0
.rdata:0000E3C8 _rdata          ends
.rdata:0000E3C8
.rdata:0000E410 ; ===========================================================================
.rdata:0000E410
.rdata:0000E410 ; Segment type: Pure data
.rdata:0000E410 ; Segment permissions: Read
.rdata:0000E410 _rdata          segment dword public 'DATA' use32
.rdata:0000E410                 assume cs:_rdata
.rdata:0000E410                 ;org 0E410h
.rdata:0000E410 ; COMDAT (pick largest)
.rdata:0000E410                 dd offset ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata:0000E414                 public ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
.rdata:0000E414 ; const std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`vftable'
.rdata:0000E414 ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ dd offset ??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
.rdata:0000E414                                         ; DATA XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+38o
.rdata:0000E414                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::~basic_ios<wchar_t,std::char_traits<wchar_t>>(void)+29o
.rdata:0000E414 _rdata          ends                    ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`vector deleting destructor'(uint)
.rdata:0000E414
.rdata:0000E418 ; ===========================================================================
.rdata:0000E418
.rdata:0000E418 ; Segment type: Pure data
.rdata:0000E418 ; Segment permissions: Read
.rdata:0000E418 _rdata          segment dword public 'DATA' use32
.rdata:0000E418                 assume cs:_rdata
.rdata:0000E418                 ;org 0E418h
.rdata:0000E418 ; COMDAT (pick largest)
.rdata:0000E418                 dd offset ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata:0000E41C                 public ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
.rdata:0000E41C ; const std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`vftable'
.rdata:0000E41C ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ dd offset ??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
.rdata:0000E41C                                         ; DATA XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+Co
.rdata:0000E41C                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::~basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+Ao
.rdata:0000E41C                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`vector deleting destructor'(uint)
.rdata:0000E420                 dd offset ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Lock(void)
.rdata:0000E424                 dd offset ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Unlock(void)
.rdata:0000E428                 dd offset ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::overflow(ushort)
.rdata:0000E42C                 dd offset ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pbackfail(ushort)
.rdata:0000E430                 dd offset ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::showmanyc(void)
.rdata:0000E434                 dd offset ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::underflow(void)
.rdata:0000E438                 dd offset ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::uflow(void)
.rdata:0000E43C                 dd offset ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)
.rdata:0000E440                 dd offset ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)
.rdata:0000E444                 dd offset ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::seekoff(__int64,int,int)
.rdata:0000E448                 dd offset ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::seekpos(std::fpos<int>,int)
.rdata:0000E44C                 dd offset ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setbuf(wchar_t *,__int64)
.rdata:0000E450                 dd offset ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sync(void)
.rdata:0000E454                 dd offset ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::imbue(std::locale const &)
.rdata:0000E454 _rdata          ends
.rdata:0000E454
.rdata:0000E458 ; ===========================================================================
.rdata:0000E458
.rdata:0000E458 ; Segment type: Pure data
.rdata:0000E458 ; Segment permissions: Read
.rdata:0000E458 _rdata          segment dword public 'DATA' use32
.rdata:0000E458                 assume cs:_rdata
.rdata:0000E458                 ;org 0E458h
.rdata:0000E458 ; COMDAT (pick any)
.rdata:0000E458                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000E458 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000E458 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000E458                                         ; DATA XREF: TiXmlAttribute::Print(_iobuf *,int)+C3r
.rdata:0000E458                                         ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+16r ...
.rdata:0000E458 _rdata          ends
.rdata:0000E458
.bss:0000E45C ; ===========================================================================
.bss:0000E45C
.bss:0000E45C ; Segment type: Uninitialized
.bss:0000E45C ; Segment permissions: Read/Write
.bss:0000E45C _bss            segment dword public 'BSS' use32
.bss:0000E45C                 assume cs:_bss
.bss:0000E45C                 ;org 0E45Ch
.bss:0000E45C ; COMDAT (pick any)
.bss:0000E45C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E45C                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000E45C ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000E45C ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000E45C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000E45D                 db    ? ;
.bss:0000E45E                 db    ? ;
.bss:0000E45F                 db    ? ;
.bss:0000E45F _bss            ends
.bss:0000E45F
.bss:0000E460 ; ===========================================================================
.bss:0000E460
.bss:0000E460 ; Segment type: Uninitialized
.bss:0000E460 ; Segment permissions: Read/Write
.bss:0000E460 _bss            segment dword public 'BSS' use32
.bss:0000E460                 assume cs:_bss
.bss:0000E460                 ;org 0E460h
.bss:0000E460 ; COMDAT (pick any)
.bss:0000E460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E460                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000E460 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000E460 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000E460                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000E461                 db    ? ;
.bss:0000E462                 db    ? ;
.bss:0000E463                 db    ? ;
.bss:0000E463 _bss            ends
.bss:0000E463
.rdata:0000E464 ; ===========================================================================
.rdata:0000E464
.rdata:0000E464 ; Segment type: Pure data
.rdata:0000E464 ; Segment permissions: Read
.rdata:0000E464 _rdata          segment dword public 'DATA' use32
.rdata:0000E464                 assume cs:_rdata
.rdata:0000E464                 ;org 0E464h
.rdata:0000E464 ; COMDAT (pick largest)
.rdata:0000E464                 dd offset ??_R4TiXmlBase@@6B@ ; const TiXmlBase::`RTTI Complete Object Locator'
.rdata:0000E468                 public ??_7TiXmlBase@@6B@
.rdata:0000E468 ; const TiXmlBase::`vftable'
.rdata:0000E468 ??_7TiXmlBase@@6B@ dd offset ??_ETiXmlBase@@UAEPAXI@Z
.rdata:0000E468                                         ; DATA XREF: TiXmlBase::TiXmlBase(void)+Ao
.rdata:0000E468                                         ; TiXmlBase::~TiXmlBase(void)+Ao
.rdata:0000E468                                         ; TiXmlBase::`vector deleting destructor'(uint)
.rdata:0000E46C                 dd offset __purecall
.rdata:0000E470                 dd offset __purecall
.rdata:0000E474                 dd offset __purecall
.rdata:0000E474 _rdata          ends
.rdata:0000E474
.rdata:0000E478 ; ===========================================================================
.rdata:0000E478
.rdata:0000E478 ; Segment type: Pure data
.rdata:0000E478 ; Segment permissions: Read
.rdata:0000E478 _rdata          segment dword public 'DATA' use32
.rdata:0000E478                 assume cs:_rdata
.rdata:0000E478                 ;org 0E478h
.rdata:0000E478 ; COMDAT (pick largest)
.rdata:0000E478                 dd offset ??_R4TiXmlNode@@6B@ ; const TiXmlNode::`RTTI Complete Object Locator'
.rdata:0000E47C                 public ??_7TiXmlNode@@6B@
.rdata:0000E47C ; const TiXmlNode::`vftable'
.rdata:0000E47C ??_7TiXmlNode@@6B@ dd offset ??_ETiXmlNode@@UAEPAXI@Z
.rdata:0000E47C                                         ; DATA XREF: TiXmlNode::~TiXmlNode(void)+2Bo
.rdata:0000E47C                                         ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)+38o
.rdata:0000E47C                                         ; TiXmlNode::`vector deleting destructor'(uint)
.rdata:0000E480                 dd offset __purecall
.rdata:0000E484                 dd offset __purecall
.rdata:0000E488                 dd offset __purecall
.rdata:0000E48C                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E490                 dd offset __purecall
.rdata:0000E494                 dd offset __purecall
.rdata:0000E494 _rdata          ends
.rdata:0000E494
.rdata:0000E498 ; ===========================================================================
.rdata:0000E498
.rdata:0000E498 ; Segment type: Pure data
.rdata:0000E498 ; Segment permissions: Read
.rdata:0000E498 _rdata          segment dword public 'DATA' use32
.rdata:0000E498                 assume cs:_rdata
.rdata:0000E498                 ;org 0E498h
.rdata:0000E498 ; COMDAT (pick any)
.rdata:0000E498                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:0000E498 ; wchar_t `string'
.rdata:0000E498 ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: TiXmlDocument::ClearError(void)+18o
.rdata:0000E49A                 align 4
.rdata:0000E49A _rdata          ends
.rdata:0000E49A
.rdata:0000E49C ; ===========================================================================
.rdata:0000E49C
.rdata:0000E49C ; Segment type: Pure data
.rdata:0000E49C ; Segment permissions: Read
.rdata:0000E49C _rdata          segment dword public 'DATA' use32
.rdata:0000E49C                 assume cs:_rdata
.rdata:0000E49C                 ;org 0E49Ch
.rdata:0000E49C ; COMDAT (pick largest)
.rdata:0000E49C                 dd offset ??_R4TiXmlAttribute@@6B@ ; const TiXmlAttribute::`RTTI Complete Object Locator'
.rdata:0000E4A0                 public ??_7TiXmlAttribute@@6B@
.rdata:0000E4A0 ; const TiXmlAttribute::`vftable'
.rdata:0000E4A0 ??_7TiXmlAttribute@@6B@ dd offset ??_ETiXmlAttribute@@UAEPAXI@Z
.rdata:0000E4A0                                         ; DATA XREF: TiXmlAttribute::TiXmlAttribute(wchar_t const *,wchar_t const *)+38o
.rdata:0000E4A0                                         ; TiXmlAttribute::TiXmlAttribute(void)+38o
.rdata:0000E4A0                                         ; TiXmlAttribute::`vector deleting destructor'(uint)
.rdata:0000E4A4                 dd offset ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z ; TiXmlAttribute::Print(_iobuf *,int)
.rdata:0000E4A8                 dd offset ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E4AC                 dd offset ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E4AC _rdata          ends
.rdata:0000E4AC
.rdata:0000E4B0 ; ===========================================================================
.rdata:0000E4B0
.rdata:0000E4B0 ; Segment type: Pure data
.rdata:0000E4B0 ; Segment permissions: Read
.rdata:0000E4B0 _rdata          segment dword public 'DATA' use32
.rdata:0000E4B0                 assume cs:_rdata
.rdata:0000E4B0                 ;org 0E4B0h
.rdata:0000E4B0 ; COMDAT (pick largest)
.rdata:0000E4B0                 dd offset ??_R4TiXmlElement@@6B@ ; const TiXmlElement::`RTTI Complete Object Locator'
.rdata:0000E4B4                 public ??_7TiXmlElement@@6B@
.rdata:0000E4B4 ; const TiXmlElement::`vftable'
.rdata:0000E4B4 ??_7TiXmlElement@@6B@ dd offset ??_ETiXmlElement@@UAEPAXI@Z
.rdata:0000E4B4                                         ; DATA XREF: TiXmlElement::TiXmlElement(wchar_t const *)+3Ao
.rdata:0000E4B4                                         ; TiXmlElement::~TiXmlElement(void)+2Bo
.rdata:0000E4B4                                         ; TiXmlElement::`vector deleting destructor'(uint)
.rdata:0000E4B8                 dd offset ?Print@TiXmlElement@@UBEXPAU_iobuf@@H@Z ; TiXmlElement::Print(_iobuf *,int)
.rdata:0000E4BC                 dd offset ?StreamOut@TiXmlElement@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlElement::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E4C0                 dd offset ?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E4C4                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E4C8                 dd offset ?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ ; TiXmlElement::Clone(void)
.rdata:0000E4CC                 dd offset ?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E4CC _rdata          ends
.rdata:0000E4CC
.rdata:0000E4D0 ; ===========================================================================
.rdata:0000E4D0
.rdata:0000E4D0 ; Segment type: Pure data
.rdata:0000E4D0 ; Segment permissions: Read
.rdata:0000E4D0 _rdata          segment dword public 'DATA' use32
.rdata:0000E4D0                 assume cs:_rdata
.rdata:0000E4D0                 ;org 0E4D0h
.rdata:0000E4D0 ; COMDAT (pick largest)
.rdata:0000E4D0                 dd offset ??_R4TiXmlComment@@6B@ ; const TiXmlComment::`RTTI Complete Object Locator'
.rdata:0000E4D4                 public ??_7TiXmlComment@@6B@
.rdata:0000E4D4 ; const TiXmlComment::`vftable'
.rdata:0000E4D4 ??_7TiXmlComment@@6B@ dd offset ??_ETiXmlComment@@UAEPAXI@Z
.rdata:0000E4D4                                         ; DATA XREF: TiXmlComment::TiXmlComment(void)+3Ao
.rdata:0000E4D4                                         ; TiXmlComment::~TiXmlComment(void)+29o
.rdata:0000E4D4                                         ; TiXmlComment::`vector deleting destructor'(uint)
.rdata:0000E4D8                 dd offset ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z ; TiXmlComment::Print(_iobuf *,int)
.rdata:0000E4DC                 dd offset ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlComment::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E4E0                 dd offset ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E4E4                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E4E8                 dd offset ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ ; TiXmlComment::Clone(void)
.rdata:0000E4EC                 dd offset ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E4EC _rdata          ends
.rdata:0000E4EC
.rdata:0000E4F0 ; ===========================================================================
.rdata:0000E4F0
.rdata:0000E4F0 ; Segment type: Pure data
.rdata:0000E4F0 ; Segment permissions: Read
.rdata:0000E4F0 _rdata          segment dword public 'DATA' use32
.rdata:0000E4F0                 assume cs:_rdata
.rdata:0000E4F0                 ;org 0E4F0h
.rdata:0000E4F0 ; COMDAT (pick largest)
.rdata:0000E4F0                 dd offset ??_R4TiXmlText@@6B@ ; const TiXmlText::`RTTI Complete Object Locator'
.rdata:0000E4F4                 public ??_7TiXmlText@@6B@
.rdata:0000E4F4 ; const TiXmlText::`vftable'
.rdata:0000E4F4 ??_7TiXmlText@@6B@ dd offset ??_ETiXmlText@@UAEPAXI@Z
.rdata:0000E4F4                                         ; DATA XREF: TiXmlText::TiXmlText(wchar_t const *)+3Ao
.rdata:0000E4F4                                         ; TiXmlText::~TiXmlText(void)+29o
.rdata:0000E4F4                                         ; TiXmlText::`vector deleting destructor'(uint)
.rdata:0000E4F8                 dd offset ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z ; TiXmlText::Print(_iobuf *,int)
.rdata:0000E4FC                 dd offset ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlText::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E500                 dd offset ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E504                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E508                 dd offset ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ ; TiXmlText::Clone(void)
.rdata:0000E50C                 dd offset ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E50C _rdata          ends
.rdata:0000E50C
.rdata:0000E510 ; ===========================================================================
.rdata:0000E510
.rdata:0000E510 ; Segment type: Pure data
.rdata:0000E510 ; Segment permissions: Read
.rdata:0000E510 _rdata          segment dword public 'DATA' use32
.rdata:0000E510                 assume cs:_rdata
.rdata:0000E510                 ;org 0E510h
.rdata:0000E510 ; COMDAT (pick largest)
.rdata:0000E510                 dd offset ??_R4TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`RTTI Complete Object Locator'
.rdata:0000E514                 public ??_7TiXmlDeclaration@@6B@
.rdata:0000E514 ; const TiXmlDeclaration::`vftable'
.rdata:0000E514 ??_7TiXmlDeclaration@@6B@ dd offset ??_ETiXmlDeclaration@@UAEPAXI@Z
.rdata:0000E514                                         ; DATA XREF: TiXmlDeclaration::TiXmlDeclaration(wchar_t const *,wchar_t const *,wchar_t const *)+3Ao
.rdata:0000E514                                         ; TiXmlDeclaration::TiXmlDeclaration(void)+3Ao ...
.rdata:0000E514                                         ; TiXmlDeclaration::`vector deleting destructor'(uint)
.rdata:0000E518                 dd offset ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z ; TiXmlDeclaration::Print(_iobuf *,int)
.rdata:0000E51C                 dd offset ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E520                 dd offset ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E524                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E528                 dd offset ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ ; TiXmlDeclaration::Clone(void)
.rdata:0000E52C                 dd offset ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E52C _rdata          ends
.rdata:0000E52C
.rdata:0000E530 ; ===========================================================================
.rdata:0000E530
.rdata:0000E530 ; Segment type: Pure data
.rdata:0000E530 ; Segment permissions: Read
.rdata:0000E530 _rdata          segment dword public 'DATA' use32
.rdata:0000E530                 assume cs:_rdata
.rdata:0000E530                 ;org 0E530h
.rdata:0000E530 ; COMDAT (pick largest)
.rdata:0000E530                 dd offset ??_R4TiXmlUnknown@@6B@ ; const TiXmlUnknown::`RTTI Complete Object Locator'
.rdata:0000E534                 public ??_7TiXmlUnknown@@6B@
.rdata:0000E534 ; const TiXmlUnknown::`vftable'
.rdata:0000E534 ??_7TiXmlUnknown@@6B@ dd offset ??_ETiXmlUnknown@@UAEPAXI@Z
.rdata:0000E534                                         ; DATA XREF: TiXmlUnknown::TiXmlUnknown(void)+3Ao
.rdata:0000E534                                         ; TiXmlUnknown::~TiXmlUnknown(void)+29o
.rdata:0000E534                                         ; TiXmlUnknown::`vector deleting destructor'(uint)
.rdata:0000E538                 dd offset ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z ; TiXmlUnknown::Print(_iobuf *,int)
.rdata:0000E53C                 dd offset ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlUnknown::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E540                 dd offset ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E544                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E548                 dd offset ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ ; TiXmlUnknown::Clone(void)
.rdata:0000E54C                 dd offset ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E54C _rdata          ends
.rdata:0000E54C
.rdata:0000E550 ; ===========================================================================
.rdata:0000E550
.rdata:0000E550 ; Segment type: Pure data
.rdata:0000E550 ; Segment permissions: Read
.rdata:0000E550 _rdata          segment dword public 'DATA' use32
.rdata:0000E550                 assume cs:_rdata
.rdata:0000E550                 ;org 0E550h
.rdata:0000E550 ; COMDAT (pick largest)
.rdata:0000E550                 dd offset ??_R4TiXmlDocument@@6B@ ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata:0000E554                 public ??_7TiXmlDocument@@6B@
.rdata:0000E554 ; const TiXmlDocument::`vftable'
.rdata:0000E554 ??_7TiXmlDocument@@6B@ dd offset ??_ETiXmlDocument@@UAEPAXI@Z
.rdata:0000E554                                         ; DATA XREF: TiXmlDocument::TiXmlDocument(void)+3Ao
.rdata:0000E554                                         ; TiXmlDocument::TiXmlDocument(wchar_t const *)+3Ao ...
.rdata:0000E554                                         ; TiXmlDocument::`vector deleting destructor'(uint)
.rdata:0000E558                 dd offset ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z ; TiXmlDocument::Print(_iobuf *,int)
.rdata:0000E55C                 dd offset ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000E560                 dd offset ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000E564                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000E568                 dd offset ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ ; TiXmlDocument::Clone(void)
.rdata:0000E56C                 dd offset ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000E56C _rdata          ends
.rdata:0000E56C
.rdata:0000E570 ; ===========================================================================
.rdata:0000E570
.rdata:0000E570 ; Segment type: Pure data
.rdata:0000E570 ; Segment permissions: Read
.rdata:0000E570 _rdata          segment dword public 'DATA' use32
.rdata:0000E570                 assume cs:_rdata
.rdata:0000E570                 ;org 0E570h
.rdata:0000E570 ; COMDAT (pick largest)
.rdata:0000E570                 dd offset ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; const std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata:0000E574                 public ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
.rdata:0000E574 ; const std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`vftable'
.rdata:0000E574 ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ dd offset ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
.rdata:0000E574                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+64o
.rdata:0000E574                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::~basic_ostream<wchar_t,std::char_traits<wchar_t>>(void)+13o
.rdata:0000E574 _rdata          ends                    ; [thunk]:std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)
.rdata:0000E574
.rdata:0000E578 ; ===========================================================================
.rdata:0000E578
.rdata:0000E578 ; Segment type: Pure data
.rdata:0000E578 ; Segment permissions: Read
.rdata:0000E578 _rdata          segment dword public 'DATA' use32
.rdata:0000E578                 assume cs:_rdata
.rdata:0000E578                 ;org 0E578h
.rdata:0000E578 ; COMDAT (pick any)
.rdata:0000E578                 public ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
.rdata:0000E578 ; const std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`vbtable'
.rdata:0000E578 ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ db    0
.rdata:0000E578                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::basic_ostream<wchar_t,std::char_traits<wchar_t>>(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+38o
.rdata:0000E579                 db    0
.rdata:0000E57A                 db    0
.rdata:0000E57B                 db    0
.rdata:0000E57C                 db    8
.rdata:0000E57D                 db    0
.rdata:0000E57E                 db    0
.rdata:0000E57F                 db    0
.rdata:0000E57F _rdata          ends
.rdata:0000E57F
.rdata:0000E580 ; ===========================================================================
.rdata:0000E580
.rdata:0000E580 ; Segment type: Pure data
.rdata:0000E580 ; Segment permissions: Read
.rdata:0000E580 _rdata          segment dword public 'DATA' use32
.rdata:0000E580                 assume cs:_rdata
.rdata:0000E580                 ;org 0E580h
.rdata:0000E580 ; COMDAT (pick largest)
.rdata:0000E580                 dd offset ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Complete Object Locator'
.rdata:0000E584                 public ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
.rdata:0000E584 ; const std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vftable'
.rdata:0000E584 ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ dd offset ??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
.rdata:0000E584                                         ; DATA XREF: std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+38o
.rdata:0000E584                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+29o
.rdata:0000E584                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vector deleting destructor'(uint)
.rdata:0000E588                 dd offset ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Lock(void)
.rdata:0000E58C                 dd offset ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Unlock(void)
.rdata:0000E590                 dd offset ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::overflow(ushort)
.rdata:0000E594                 dd offset ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::pbackfail(ushort)
.rdata:0000E598                 dd offset ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::showmanyc(void)
.rdata:0000E59C                 dd offset ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::underflow(void)
.rdata:0000E5A0                 dd offset ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::uflow(void)
.rdata:0000E5A4                 dd offset ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)
.rdata:0000E5A8                 dd offset ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)
.rdata:0000E5AC                 dd offset ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekoff(__int64,int,int)
.rdata:0000E5B0                 dd offset ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::seekpos(std::fpos<int>,int)
.rdata:0000E5B4                 dd offset ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::setbuf(wchar_t *,__int64)
.rdata:0000E5B8                 dd offset ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sync(void)
.rdata:0000E5BC                 dd offset ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::imbue(std::locale const &)
.rdata:0000E5BC _rdata          ends
.rdata:0000E5BC
.rdata:0000E5C0 ; ===========================================================================
.rdata:0000E5C0
.rdata:0000E5C0 ; Segment type: Pure data
.rdata:0000E5C0 ; Segment permissions: Read
.rdata:0000E5C0 _rdata          segment dword public 'DATA' use32
.rdata:0000E5C0                 assume cs:_rdata
.rdata:0000E5C0                 ;org 0E5C0h
.rdata:0000E5C0 ; COMDAT (pick largest)
.rdata:0000E5C0                 dd offset ??_R4?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; const std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Complete Object Locator'
.rdata:0000E5C4                 public ??_7?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
.rdata:0000E5C4 ; const std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vftable'
.rdata:0000E5C4 ??_7?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ dd offset ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
.rdata:0000E5C4                                         ; DATA XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+7Eo
.rdata:0000E5C4                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+32o
.rdata:0000E5C4 _rdata          ends                    ; [thunk]:std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)
.rdata:0000E5C4
.rdata:0000E5C8 ; ===========================================================================
.rdata:0000E5C8
.rdata:0000E5C8 ; Segment type: Pure data
.rdata:0000E5C8 ; Segment permissions: Read
.rdata:0000E5C8 _rdata          segment dword public 'DATA' use32
.rdata:0000E5C8                 assume cs:_rdata
.rdata:0000E5C8                 ;org 0E5C8h
.rdata:0000E5C8 ; COMDAT (pick any)
.rdata:0000E5C8                 public ??_8?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B@
.rdata:0000E5C8 ; const std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vbtable'
.rdata:0000E5C8 ??_8?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B@ db    0
.rdata:0000E5C8                                         ; DATA XREF: std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int)+38o
.rdata:0000E5C9                 db    0
.rdata:0000E5CA                 db    0
.rdata:0000E5CB                 db    0
.rdata:0000E5CC                 db  50h ; P
.rdata:0000E5CD                 db    0
.rdata:0000E5CE                 db    0
.rdata:0000E5CF                 db    0
.rdata:0000E5CF _rdata          ends
.rdata:0000E5CF
.rdata:0000E5D0 ; ===========================================================================
.rdata:0000E5D0
.rdata:0000E5D0 ; Segment type: Pure data
.rdata:0000E5D0 ; Segment permissions: Read
.rdata:0000E5D0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E5D0 _rdata          segment para public 'DATA' use32
.rdata:0000E5D0                 assume cs:_rdata
.rdata:0000E5D0                 ;org 0E5D0h
.rdata:0000E5D0 ; COMDAT (pick any)
.rdata:0000E5D0                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000E5D0 ; wchar_t `string'
.rdata:0000E5D0 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000E5D0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+17o
.rdata:0000E5D0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+Co ...
.rdata:0000E5D0                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000E5D0                 unicode 0, <clude\xstring>,0
.rdata:0000E65E                 align 10h
.rdata:0000E65E _rdata          ends
.rdata:0000E65E
.rdata:0000E660 ; ===========================================================================
.rdata:0000E660
.rdata:0000E660 ; Segment type: Pure data
.rdata:0000E660 ; Segment permissions: Read
.rdata:0000E660 _rdata          segment dword public 'DATA' use32
.rdata:0000E660                 assume cs:_rdata
.rdata:0000E660                 ;org 0E660h
.rdata:0000E660 ; COMDAT (pick any)
.rdata:0000E660                 public ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000E660 ; wchar_t `string'
.rdata:0000E660 ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000E660                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+1Co
.rdata:0000E660                 unicode 0, <string subscript out of range>,0
.rdata:0000E660 _rdata          ends
.rdata:0000E660
.bss:0000E69C ; ===========================================================================
.bss:0000E69C
.bss:0000E69C ; Segment type: Uninitialized
.bss:0000E69C ; Segment permissions: Read/Write
.bss:0000E69C _bss            segment dword public 'BSS' use32
.bss:0000E69C                 assume cs:_bss
.bss:0000E69C                 ;org 0E69Ch
.bss:0000E69C ; COMDAT (pick any)
.bss:0000E69C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E69C                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000E69C ; std::locale::id std::numpunct<char>::id
.bss:0000E69C ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000E69C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000E69D                 db    ? ;
.bss:0000E69E                 db    ? ;
.bss:0000E69F                 db    ? ;
.bss:0000E69F _bss            ends
.bss:0000E69F
.bss:0000E6A0 ; ===========================================================================
.bss:0000E6A0
.bss:0000E6A0 ; Segment type: Uninitialized
.bss:0000E6A0 ; Segment permissions: Read/Write
.bss:0000E6A0 _bss            segment dword public 'BSS' use32
.bss:0000E6A0                 assume cs:_bss
.bss:0000E6A0                 ;org 0E6A0h
.bss:0000E6A0 ; COMDAT (pick any)
.bss:0000E6A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E6A0                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000E6A0 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000E6A0 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000E6A0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000E6A1                 db    ? ;
.bss:0000E6A2                 db    ? ;
.bss:0000E6A3                 db    ? ;
.bss:0000E6A3 _bss            ends
.bss:0000E6A3
.rdata:0000E6A4 ; ===========================================================================
.rdata:0000E6A4
.rdata:0000E6A4 ; Segment type: Pure data
.rdata:0000E6A4 ; Segment permissions: Read
.rdata:0000E6A4 _rdata          segment dword public 'DATA' use32
.rdata:0000E6A4                 assume cs:_rdata
.rdata:0000E6A4                 ;org 0E6A4h
.rdata:0000E6A4 ; COMDAT (pick any)
.rdata:0000E6A4                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000E6A4 ; char `string'[]
.rdata:0000E6A4 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000E6A4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000E6A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000E6A4 _rdata          ends
.rdata:0000E6A4
.rdata:0000E6B4 ; ===========================================================================
.rdata:0000E6B4
.rdata:0000E6B4 ; Segment type: Pure data
.rdata:0000E6B4 ; Segment permissions: Read
.rdata:0000E6B4 _rdata          segment dword public 'DATA' use32
.rdata:0000E6B4                 assume cs:_rdata
.rdata:0000E6B4                 ;org 0E6B4h
.rdata:0000E6B4 ; COMDAT (pick any)
.rdata:0000E6B4                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000E6B4 ; char `string'[]
.rdata:0000E6B4 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000E6B4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000E6B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000E6B4 _rdata          ends
.rdata:0000E6B4
.rdata:0000E6CC ; ===========================================================================
.rdata:0000E6CC
.rdata:0000E6CC ; Segment type: Pure data
.rdata:0000E6CC ; Segment permissions: Read
.rdata:0000E6CC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000E6CC _rdata          segment para public 'DATA' use32
.rdata:0000E6CC                 assume cs:_rdata
.rdata:0000E6CC                 ;org 0E6CCh
.rdata:0000E6CC ; COMDAT (pick any)
.rdata:0000E6CC                 public ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000E6CC ; char `string'[]
.rdata:0000E6CC ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\st'
.rdata:0000E6CC                                         ; DATA XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+14o
.rdata:0000E6CC                 db 'reambuf',0
.rdata:0000E715                 align 4
.rdata:0000E715 _rdata          ends
.rdata:0000E715
.rdata:0000E718 ; ===========================================================================
.rdata:0000E718
.rdata:0000E718 ; Segment type: Pure data
.rdata:0000E718 ; Segment permissions: Read
.rdata:0000E718 _rdata          segment dword public 'DATA' use32
.rdata:0000E718                 assume cs:_rdata
.rdata:0000E718                 ;org 0E718h
.rdata:0000E718 ; COMDAT (pick any)
.rdata:0000E718                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000E718 ; wchar_t `string'
.rdata:0000E718 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000E718                                         ; DATA XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+11o
.rdata:0000E718                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o ...
.rdata:0000E718                 unicode 0, <invalid null pointer>,0
.rdata:0000E742                 align 4
.rdata:0000E742 _rdata          ends
.rdata:0000E742
.xdata$x:0000E744 ; ===========================================================================
.xdata$x:0000E744
.xdata$x:0000E744 ; Segment type: Pure data
.xdata$x:0000E744 ; Segment permissions: Read
.xdata$x:0000E744 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E744                 assume cs:_xdata$x
.xdata$x:0000E744                 ;org 0E744h
.xdata$x:0000E744 ; COMDAT (pick any)
.xdata$x:0000E744                 public __TI2?AVbad_cast@std@@
.xdata$x:0000E744 __TI2?AVbad_cast@std@@ db    0          ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+92o
.xdata$x:0000E745                 db    0
.xdata$x:0000E746                 db    0
.xdata$x:0000E747                 db    0
.xdata$x:0000E748                 dd offset ??1bad_cast@std@@UAE@XZ ; std::bad_cast::~bad_cast(void)
.xdata$x:0000E74C                 align 10h
.xdata$x:0000E750                 dd offset __CTA2?AVbad_cast@std@@
.xdata$x:0000E750 _xdata$x        ends
.xdata$x:0000E750
.xdata$x:0000E754 ; ===========================================================================
.xdata$x:0000E754
.xdata$x:0000E754 ; Segment type: Pure data
.xdata$x:0000E754 ; Segment permissions: Read
.xdata$x:0000E754 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E754                 assume cs:_xdata$x
.xdata$x:0000E754                 ;org 0E754h
.xdata$x:0000E754 ; COMDAT (pick any)
.xdata$x:0000E754                 public __CTA2?AVbad_cast@std@@
.xdata$x:0000E754 __CTA2?AVbad_cast@std@@ db    2         ; DATA XREF: .xdata$x:0000E750o
.xdata$x:0000E755                 db    0
.xdata$x:0000E756                 db    0
.xdata$x:0000E757                 db    0
.xdata$x:0000E758                 dd offset __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000E75C                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000E75C _xdata$x        ends
.xdata$x:0000E75C
.data$r:0000E760 ; ===========================================================================
.data$r:0000E760
.data$r:0000E760 ; Segment type: Pure data
.data$r:0000E760 ; Segment permissions: Read/Write
.data$r:0000E760 _data$r         segment dword public 'DATA' use32
.data$r:0000E760                 assume cs:_data$r
.data$r:0000E760                 ;org 0E760h
.data$r:0000E760 ; COMDAT (pick any)
.data$r:0000E760                 public ??_R0?AVbad_cast@std@@@8
.data$r:0000E760 ; class std::bad_cast `RTTI Type Descriptor'
.data$r:0000E760 ??_R0?AVbad_cast@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E760                                         ; DATA XREF: .xdata$x:0000E780o
.data$r:0000E760                                         ; const type_info::`vftable'
.data$r:0000E764                 align 8
.data$r:0000E768 a_?avbad_cast@s db '.?AVbad_cast@std@@',0
.data$r:0000E77B                 align 4
.data$r:0000E77B _data$r         ends
.data$r:0000E77B
.xdata$x:0000E77C ; ===========================================================================
.xdata$x:0000E77C
.xdata$x:0000E77C ; Segment type: Pure data
.xdata$x:0000E77C ; Segment permissions: Read
.xdata$x:0000E77C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E77C                 assume cs:_xdata$x
.xdata$x:0000E77C                 ;org 0E77Ch
.xdata$x:0000E77C ; COMDAT (pick any)
.xdata$x:0000E77C                 public __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000E77C __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000E77C                                         ; DATA XREF: .xdata$x:0000E758o
.xdata$x:0000E77D                 db    0
.xdata$x:0000E77E                 db    0
.xdata$x:0000E77F                 db    0
.xdata$x:0000E780                 dd offset ??_R0?AVbad_cast@std@@@8 ; std::bad_cast `RTTI Type Descriptor'
.xdata$x:0000E784                 align 8
.xdata$x:0000E788                 db 0FFh
.xdata$x:0000E789                 db 0FFh
.xdata$x:0000E78A                 db 0FFh
.xdata$x:0000E78B                 db 0FFh
.xdata$x:0000E78C                 db    0
.xdata$x:0000E78D                 db    0
.xdata$x:0000E78E                 db    0
.xdata$x:0000E78F                 db    0
.xdata$x:0000E790                 db  0Ch
.xdata$x:0000E791                 db    0
.xdata$x:0000E792                 db    0
.xdata$x:0000E793                 db    0
.xdata$x:0000E794                 dd offset ??0bad_cast@std@@QAE@ABV01@@Z ; std::bad_cast::bad_cast(std::bad_cast const &)
.xdata$x:0000E794 _xdata$x        ends
.xdata$x:0000E794
.rdata:0000E798 ; ===========================================================================
.rdata:0000E798
.rdata:0000E798 ; Segment type: Pure data
.rdata:0000E798 ; Segment permissions: Read
.rdata:0000E798 _rdata          segment dword public 'DATA' use32
.rdata:0000E798                 assume cs:_rdata
.rdata:0000E798                 ;org 0E798h
.rdata:0000E798 ; COMDAT (pick any)
.rdata:0000E798                 public ??_C@_08EPJLHIJG@bad?5cast?$AA@
.rdata:0000E798 ; char `string'[]
.rdata:0000E798 ??_C@_08EPJLHIJG@bad?5cast?$AA@ db 'bad cast',0
.rdata:0000E798                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+85o
.rdata:0000E7A1                 align 4
.rdata:0000E7A1 _rdata          ends
.rdata:0000E7A1
.bss:0000E7A4 ; ===========================================================================
.bss:0000E7A4
.bss:0000E7A4 ; Segment type: Uninitialized
.bss:0000E7A4 ; Segment permissions: Read/Write
.bss:0000E7A4 _bss            segment dword public 'BSS' use32
.bss:0000E7A4                 assume cs:_bss
.bss:0000E7A4                 ;org 0E7A4h
.bss:0000E7A4 ; COMDAT (pick any)
.bss:0000E7A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000E7A4                 public ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
.bss:0000E7A4 ; public: static class std::locale::facet const * const std::_Facetptr<class std::ctype<wchar_t>>::_Psave
.bss:0000E7A4 ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B dd ?
.bss:0000E7A4                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+36r
.bss:0000E7A4                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+ABw
.bss:0000E7A4 _bss            ends
.bss:0000E7A4
.rdata:0000E7A8 ; ===========================================================================
.rdata:0000E7A8
.rdata:0000E7A8 ; Segment type: Pure data
.rdata:0000E7A8 ; Segment permissions: Read
.rdata:0000E7A8 _rdata          segment dword public 'DATA' use32
.rdata:0000E7A8                 assume cs:_rdata
.rdata:0000E7A8                 ;org 0E7A8h
.rdata:0000E7A8 ; COMDAT (pick any)
.rdata:0000E7A8                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000E7A8 ; wchar_t `string'
.rdata:0000E7A8 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000E7A8                                         ; DATA XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000E7A8                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000E7A8                 unicode 0, <invalid iterator range>,0
.rdata:0000E7D6                 align 4
.rdata:0000E7D6 _rdata          ends
.rdata:0000E7D6
.rdata$r:0000E7D8 ; ===========================================================================
.rdata$r:0000E7D8
.rdata$r:0000E7D8 ; Segment type: Pure data
.rdata$r:0000E7D8 ; Segment permissions: Read
.rdata$r:0000E7D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E7D8                 assume cs:_rdata$r
.rdata$r:0000E7D8                 ;org 0E7D8h
.rdata$r:0000E7D8 ; COMDAT (pick any)
.rdata$r:0000E7D8                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000E7D8 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E7D8 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:0000E7D8                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:0000E7D8                                         ; .rdata$r:0000EC44o ...
.rdata$r:0000E7D8                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:0000E7DC                 db    0
.rdata$r:0000E7DD                 db    0
.rdata$r:0000E7DE                 db    0
.rdata$r:0000E7DF                 db    0
.rdata$r:0000E7E0                 db    0
.rdata$r:0000E7E1                 db    0
.rdata$r:0000E7E2                 db    0
.rdata$r:0000E7E3                 db    0
.rdata$r:0000E7E4                 db 0FFh
.rdata$r:0000E7E5                 db 0FFh
.rdata$r:0000E7E6                 db 0FFh
.rdata$r:0000E7E7                 db 0FFh
.rdata$r:0000E7E8                 db    0
.rdata$r:0000E7E9                 db    0
.rdata$r:0000E7EA                 db    0
.rdata$r:0000E7EB                 db    0
.rdata$r:0000E7EC                 db  40h ; @
.rdata$r:0000E7ED                 db    0
.rdata$r:0000E7EE                 db    0
.rdata$r:0000E7EF                 db    0
.rdata$r:0000E7F0                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E7F0 _rdata$r        ends
.rdata$r:0000E7F0
.rdata$r:0000E7F4 ; ===========================================================================
.rdata$r:0000E7F4
.rdata$r:0000E7F4 ; Segment type: Pure data
.rdata$r:0000E7F4 ; Segment permissions: Read
.rdata$r:0000E7F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E7F4                 assume cs:_rdata$r
.rdata$r:0000E7F4                 ;org 0E7F4h
.rdata$r:0000E7F4 ; COMDAT (pick any)
.rdata$r:0000E7F4                 public ??_R3exception@std@@8
.rdata$r:0000E7F4 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E7F4 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:0000E7F0o
.rdata$r:0000E7F5                 db    0
.rdata$r:0000E7F6                 db    0
.rdata$r:0000E7F7                 db    0
.rdata$r:0000E7F8                 db    0
.rdata$r:0000E7F9                 db    0
.rdata$r:0000E7FA                 db    0
.rdata$r:0000E7FB                 db    0
.rdata$r:0000E7FC                 db    1
.rdata$r:0000E7FD                 db    0
.rdata$r:0000E7FE                 db    0
.rdata$r:0000E7FF                 db    0
.rdata$r:0000E800                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000E800 _rdata$r        ends
.rdata$r:0000E800
.rdata$r:0000E804 ; ===========================================================================
.rdata$r:0000E804
.rdata$r:0000E804 ; Segment type: Pure data
.rdata$r:0000E804 ; Segment permissions: Read
.rdata$r:0000E804 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E804                 assume cs:_rdata$r
.rdata$r:0000E804                 ;org 0E804h
.rdata$r:0000E804 ; COMDAT (pick any)
.rdata$r:0000E804                 public ??_R2exception@std@@8
.rdata$r:0000E804 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000E804 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000E804                                         ; DATA XREF: .rdata$r:0000E800o
.rdata$r:0000E804                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E808                 db    0
.rdata$r:0000E809                 align 4
.rdata$r:0000E809 _rdata$r        ends
.rdata$r:0000E809
.rdata$r:0000E80C ; ===========================================================================
.rdata$r:0000E80C
.rdata$r:0000E80C ; Segment type: Pure data
.rdata$r:0000E80C ; Segment permissions: Read
.rdata$r:0000E80C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E80C                 assume cs:_rdata$r
.rdata$r:0000E80C                 ;org 0E80Ch
.rdata$r:0000E80C ; COMDAT (pick any)
.rdata$r:0000E80C                 public ??_R4ios_base@std@@6B@
.rdata$r:0000E80C ; const std::ios_base::`RTTI Complete Object Locator'
.rdata$r:0000E80C ??_R4ios_base@std@@6B@ db    0          ; DATA XREF: .rdata:0000E298o
.rdata$r:0000E80D                 db    0
.rdata$r:0000E80E                 db    0
.rdata$r:0000E80F                 db    0
.rdata$r:0000E810                 db    0
.rdata$r:0000E811                 db    0
.rdata$r:0000E812                 db    0
.rdata$r:0000E813                 db    0
.rdata$r:0000E814                 db    0
.rdata$r:0000E815                 db    0
.rdata$r:0000E816                 db    0
.rdata$r:0000E817                 db    0
.rdata$r:0000E818                 dd offset ??_R0?AVios_base@std@@@8 ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000E81C                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E81C _rdata$r        ends
.rdata$r:0000E81C
.data$r:0000E820 ; ===========================================================================
.data$r:0000E820
.data$r:0000E820 ; Segment type: Pure data
.data$r:0000E820 ; Segment permissions: Read/Write
.data$r:0000E820 _data$r         segment dword public 'DATA' use32
.data$r:0000E820                 assume cs:_data$r
.data$r:0000E820                 ;org 0E820h
.data$r:0000E820 ; COMDAT (pick any)
.data$r:0000E820                 public ??_R0?AVios_base@std@@@8
.data$r:0000E820 ; class std::ios_base `RTTI Type Descriptor'
.data$r:0000E820 ??_R0?AVios_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E820                                         ; DATA XREF: .rdata$r:0000E818o
.data$r:0000E820                                         ; .rdata$r:std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000E820                                         ; const type_info::`vftable'
.data$r:0000E824                 align 8
.data$r:0000E828 a_?avios_base@s db '.?AVios_base@std@@',0
.data$r:0000E83B                 align 4
.data$r:0000E83B _data$r         ends
.data$r:0000E83B
.rdata$r:0000E83C ; ===========================================================================
.rdata$r:0000E83C
.rdata$r:0000E83C ; Segment type: Pure data
.rdata$r:0000E83C ; Segment permissions: Read
.rdata$r:0000E83C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E83C                 assume cs:_rdata$r
.rdata$r:0000E83C                 ;org 0E83Ch
.rdata$r:0000E83C ; COMDAT (pick any)
.rdata$r:0000E83C                 public ??_R3ios_base@std@@8
.rdata$r:0000E83C ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E83C ??_R3ios_base@std@@8 db    0            ; DATA XREF: .rdata$r:0000E81Co
.rdata$r:0000E83C                                         ; .rdata$r:0000E870o ...
.rdata$r:0000E83D                 db    0
.rdata$r:0000E83E                 db    0
.rdata$r:0000E83F                 db    0
.rdata$r:0000E840                 db    0
.rdata$r:0000E841                 db    0
.rdata$r:0000E842                 db    0
.rdata$r:0000E843                 db    0
.rdata$r:0000E844                 db    2
.rdata$r:0000E845                 db    0
.rdata$r:0000E846                 db    0
.rdata$r:0000E847                 db    0
.rdata$r:0000E848                 dd offset ??_R2ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
.rdata$r:0000E848 _rdata$r        ends
.rdata$r:0000E848
.rdata$r:0000E84C ; ===========================================================================
.rdata$r:0000E84C
.rdata$r:0000E84C ; Segment type: Pure data
.rdata$r:0000E84C ; Segment permissions: Read
.rdata$r:0000E84C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E84C                 assume cs:_rdata$r
.rdata$r:0000E84C                 ;org 0E84Ch
.rdata$r:0000E84C ; COMDAT (pick any)
.rdata$r:0000E84C                 public ??_R2ios_base@std@@8
.rdata$r:0000E84C ; std::ios_base::`RTTI Base Class Array'
.rdata$r:0000E84C ??_R2ios_base@std@@8 dd offset ??_R1A@?0A@EA@ios_base@std@@8
.rdata$r:0000E84C                                         ; DATA XREF: .rdata$r:0000E848o
.rdata$r:0000E84C                                         ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E850                 dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000E854                 db    0
.rdata$r:0000E855                 align 4
.rdata$r:0000E855 _rdata$r        ends
.rdata$r:0000E855
.rdata$r:0000E858 ; ===========================================================================
.rdata$r:0000E858
.rdata$r:0000E858 ; Segment type: Pure data
.rdata$r:0000E858 ; Segment permissions: Read
.rdata$r:0000E858 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E858                 assume cs:_rdata$r
.rdata$r:0000E858                 ;org 0E858h
.rdata$r:0000E858 ; COMDAT (pick any)
.rdata$r:0000E858                 public ??_R1A@?0A@EA@ios_base@std@@8
.rdata$r:0000E858 ; std::ios_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E858 ??_R1A@?0A@EA@ios_base@std@@8 dd offset ??_R0?AVios_base@std@@@8
.rdata$r:0000E858                                         ; DATA XREF: .rdata$r:std::ios_base::`RTTI Base Class Array'o
.rdata$r:0000E858                                         ; .rdata$r:0000E978o
.rdata$r:0000E858                                         ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000E85C                 db    1
.rdata$r:0000E85D                 db    0
.rdata$r:0000E85E                 db    0
.rdata$r:0000E85F                 db    0
.rdata$r:0000E860                 db    0
.rdata$r:0000E861                 db    0
.rdata$r:0000E862                 db    0
.rdata$r:0000E863                 db    0
.rdata$r:0000E864                 db 0FFh
.rdata$r:0000E865                 db 0FFh
.rdata$r:0000E866                 db 0FFh
.rdata$r:0000E867                 db 0FFh
.rdata$r:0000E868                 db    0
.rdata$r:0000E869                 db    0
.rdata$r:0000E86A                 db    0
.rdata$r:0000E86B                 db    0
.rdata$r:0000E86C                 db  40h ; @
.rdata$r:0000E86D                 db    0
.rdata$r:0000E86E                 db    0
.rdata$r:0000E86F                 db    0
.rdata$r:0000E870                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E870 _rdata$r        ends
.rdata$r:0000E870
.rdata$r:0000E874 ; ===========================================================================
.rdata$r:0000E874
.rdata$r:0000E874 ; Segment type: Pure data
.rdata$r:0000E874 ; Segment permissions: Read
.rdata$r:0000E874 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E874                 assume cs:_rdata$r
.rdata$r:0000E874                 ;org 0E874h
.rdata$r:0000E874 ; COMDAT (pick any)
.rdata$r:0000E874                 public ??_R17?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000E874 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000E874 ??_R17?0A@EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000E874                                         ; DATA XREF: .rdata$r:0000E850o
.rdata$r:0000E874                                         ; .rdata$r:0000E97Co
.rdata$r:0000E874                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000E878                 db    0
.rdata$r:0000E879                 db    0
.rdata$r:0000E87A                 db    0
.rdata$r:0000E87B                 db    0
.rdata$r:0000E87C                 db    8
.rdata$r:0000E87D                 db    0
.rdata$r:0000E87E                 db    0
.rdata$r:0000E87F                 db    0
.rdata$r:0000E880                 db 0FFh
.rdata$r:0000E881                 db 0FFh
.rdata$r:0000E882                 db 0FFh
.rdata$r:0000E883                 db 0FFh
.rdata$r:0000E884                 db    0
.rdata$r:0000E885                 db    0
.rdata$r:0000E886                 db    0
.rdata$r:0000E887                 db    0
.rdata$r:0000E888                 db  40h ; @
.rdata$r:0000E889                 db    0
.rdata$r:0000E88A                 db    0
.rdata$r:0000E88B                 db    0
.rdata$r:0000E88C                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E88C _rdata$r        ends
.rdata$r:0000E88C
.data$r:0000E890 ; ===========================================================================
.data$r:0000E890
.data$r:0000E890 ; Segment type: Pure data
.data$r:0000E890 ; Segment permissions: Read/Write
.data$r:0000E890 _data$r         segment dword public 'DATA' use32
.data$r:0000E890                 assume cs:_data$r
.data$r:0000E890                 ;org 0E890h
.data$r:0000E890 ; COMDAT (pick any)
.data$r:0000E890                 public ??_R0?AV?$_Iosb@H@std@@@8
.data$r:0000E890 ; class std::_Iosb<int> `RTTI Type Descriptor'
.data$r:0000E890 ??_R0?AV?$_Iosb@H@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E890                                         ; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data$r:0000E890                                         ; .rdata$r:std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000E890                                         ; const type_info::`vftable'
.data$r:0000E894                 align 8
.data$r:0000E898 a_?av?_iosb@h@s db '.?AV?$_Iosb@H@std@@',0
.data$r:0000E898 _data$r         ends
.data$r:0000E898
.rdata$r:0000E8AC ; ===========================================================================
.rdata$r:0000E8AC
.rdata$r:0000E8AC ; Segment type: Pure data
.rdata$r:0000E8AC ; Segment permissions: Read
.rdata$r:0000E8AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E8AC                 assume cs:_rdata$r
.rdata$r:0000E8AC                 ;org 0E8ACh
.rdata$r:0000E8AC ; COMDAT (pick any)
.rdata$r:0000E8AC                 public ??_R3?$_Iosb@H@std@@8
.rdata$r:0000E8AC ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E8AC ??_R3?$_Iosb@H@std@@8 db    0           ; DATA XREF: .rdata$r:0000E88Co
.rdata$r:0000E8AC                                         ; .rdata$r:0000E8DCo ...
.rdata$r:0000E8AD                 db    0
.rdata$r:0000E8AE                 db    0
.rdata$r:0000E8AF                 db    0
.rdata$r:0000E8B0                 db    0
.rdata$r:0000E8B1                 db    0
.rdata$r:0000E8B2                 db    0
.rdata$r:0000E8B3                 db    0
.rdata$r:0000E8B4                 db    1
.rdata$r:0000E8B5                 db    0
.rdata$r:0000E8B6                 db    0
.rdata$r:0000E8B7                 db    0
.rdata$r:0000E8B8                 dd offset ??_R2?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
.rdata$r:0000E8B8 _rdata$r        ends
.rdata$r:0000E8B8
.rdata$r:0000E8BC ; ===========================================================================
.rdata$r:0000E8BC
.rdata$r:0000E8BC ; Segment type: Pure data
.rdata$r:0000E8BC ; Segment permissions: Read
.rdata$r:0000E8BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E8BC                 assume cs:_rdata$r
.rdata$r:0000E8BC                 ;org 0E8BCh
.rdata$r:0000E8BC ; COMDAT (pick any)
.rdata$r:0000E8BC                 public ??_R2?$_Iosb@H@std@@8
.rdata$r:0000E8BC ; std::_Iosb<int>::`RTTI Base Class Array'
.rdata$r:0000E8BC ??_R2?$_Iosb@H@std@@8 dd offset ??_R1A@?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000E8BC                                         ; DATA XREF: .rdata$r:0000E8B8o
.rdata$r:0000E8BC                                         ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E8C0                 db    0
.rdata$r:0000E8C1                 align 4
.rdata$r:0000E8C1 _rdata$r        ends
.rdata$r:0000E8C1
.rdata$r:0000E8C4 ; ===========================================================================
.rdata$r:0000E8C4
.rdata$r:0000E8C4 ; Segment type: Pure data
.rdata$r:0000E8C4 ; Segment permissions: Read
.rdata$r:0000E8C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E8C4                 assume cs:_rdata$r
.rdata$r:0000E8C4                 ;org 0E8C4h
.rdata$r:0000E8C4 ; COMDAT (pick any)
.rdata$r:0000E8C4                 public ??_R1A@?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000E8C4 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E8C4 ??_R1A@?0A@EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000E8C4                                         ; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class Array'o
.rdata$r:0000E8C4                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000E8C8                 align 10h
.rdata$r:0000E8D0                 db 0FFh
.rdata$r:0000E8D1                 db 0FFh
.rdata$r:0000E8D2                 db 0FFh
.rdata$r:0000E8D3                 db 0FFh
.rdata$r:0000E8D4                 db    0
.rdata$r:0000E8D5                 db    0
.rdata$r:0000E8D6                 db    0
.rdata$r:0000E8D7                 db    0
.rdata$r:0000E8D8                 db  40h ; @
.rdata$r:0000E8D9                 db    0
.rdata$r:0000E8DA                 db    0
.rdata$r:0000E8DB                 db    0
.rdata$r:0000E8DC                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E8DC _rdata$r        ends
.rdata$r:0000E8DC
.rdata$r:0000E8E0 ; ===========================================================================
.rdata$r:0000E8E0
.rdata$r:0000E8E0 ; Segment type: Pure data
.rdata$r:0000E8E0 ; Segment permissions: Read
.rdata$r:0000E8E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E8E0                 assume cs:_rdata$r
.rdata$r:0000E8E0                 ;org 0E8E0h
.rdata$r:0000E8E0 ; COMDAT (pick any)
.rdata$r:0000E8E0                 public ??_R1A@A@3EA@ios_base@std@@8
.rdata$r:0000E8E0 ; std::ios_base::`RTTI Base Class Descriptor at (0, 0, 4, 64)'
.rdata$r:0000E8E0 ??_R1A@A@3EA@ios_base@std@@8 dd offset ??_R0?AVios_base@std@@@8
.rdata$r:0000E8E0                                         ; DATA XREF: .rdata$r:0000EAACo
.rdata$r:0000E8E0                                         ; .rdata$r:0000EBF4o
.rdata$r:0000E8E0                                         ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000E8E4                 db    1
.rdata$r:0000E8E5                 db    0
.rdata$r:0000E8E6                 db    0
.rdata$r:0000E8E7                 db    0
.rdata$r:0000E8E8                 db    0
.rdata$r:0000E8E9                 db    0
.rdata$r:0000E8EA                 db    0
.rdata$r:0000E8EB                 db    0
.rdata$r:0000E8EC                 db    0
.rdata$r:0000E8ED                 db    0
.rdata$r:0000E8EE                 db    0
.rdata$r:0000E8EF                 db    0
.rdata$r:0000E8F0                 db    4
.rdata$r:0000E8F1                 db    0
.rdata$r:0000E8F2                 db    0
.rdata$r:0000E8F3                 db    0
.rdata$r:0000E8F4                 db  40h ; @
.rdata$r:0000E8F5                 db    0
.rdata$r:0000E8F6                 db    0
.rdata$r:0000E8F7                 db    0
.rdata$r:0000E8F8                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E8F8 _rdata$r        ends
.rdata$r:0000E8F8
.rdata$r:0000E8FC ; ===========================================================================
.rdata$r:0000E8FC
.rdata$r:0000E8FC ; Segment type: Pure data
.rdata$r:0000E8FC ; Segment permissions: Read
.rdata$r:0000E8FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E8FC                 assume cs:_rdata$r
.rdata$r:0000E8FC                 ;org 0E8FCh
.rdata$r:0000E8FC ; COMDAT (pick any)
.rdata$r:0000E8FC                 public ??_R17A@3EA@?$_Iosb@H@std@@8
.rdata$r:0000E8FC ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, 0, 4, 64)'
.rdata$r:0000E8FC ??_R17A@3EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000E8FC                                         ; DATA XREF: .rdata$r:0000EAB0o
.rdata$r:0000E8FC                                         ; .rdata$r:0000EBF8o
.rdata$r:0000E8FC                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000E900                 db    0
.rdata$r:0000E901                 db    0
.rdata$r:0000E902                 db    0
.rdata$r:0000E903                 db    0
.rdata$r:0000E904                 db    8
.rdata$r:0000E905                 db    0
.rdata$r:0000E906                 db    0
.rdata$r:0000E907                 db    0
.rdata$r:0000E908                 db    0
.rdata$r:0000E909                 db    0
.rdata$r:0000E90A                 db    0
.rdata$r:0000E90B                 db    0
.rdata$r:0000E90C                 db    4
.rdata$r:0000E90D                 db    0
.rdata$r:0000E90E                 db    0
.rdata$r:0000E90F                 db    0
.rdata$r:0000E910                 db  40h ; @
.rdata$r:0000E911                 db    0
.rdata$r:0000E912                 db    0
.rdata$r:0000E913                 db    0
.rdata$r:0000E914                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E914 _rdata$r        ends
.rdata$r:0000E914
.rdata$r:0000E918 ; ===========================================================================
.rdata$r:0000E918
.rdata$r:0000E918 ; Segment type: Pure data
.rdata$r:0000E918 ; Segment permissions: Read
.rdata$r:0000E918 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E918                 assume cs:_rdata$r
.rdata$r:0000E918                 ;org 0E918h
.rdata$r:0000E918 ; COMDAT (pick any)
.rdata$r:0000E918                 public ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
.rdata$r:0000E918 ; const std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata$r:0000E918 ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ db    0
.rdata$r:0000E918                                         ; DATA XREF: .rdata:0000E410o
.rdata$r:0000E919                 db    0
.rdata$r:0000E91A                 db    0
.rdata$r:0000E91B                 db    0
.rdata$r:0000E91C                 db    0
.rdata$r:0000E91D                 db    0
.rdata$r:0000E91E                 db    0
.rdata$r:0000E91F                 db    0
.rdata$r:0000E920                 db    0
.rdata$r:0000E921                 db    0
.rdata$r:0000E922                 db    0
.rdata$r:0000E923                 db    0
.rdata$r:0000E924                 dd offset ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000E928                 dd offset ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E928 _rdata$r        ends
.rdata$r:0000E928
.data$r:0000E92C ; ===========================================================================
.data$r:0000E92C
.data$r:0000E92C ; Segment type: Pure data
.data$r:0000E92C ; Segment permissions: Read/Write
.data$r:0000E92C _data$r         segment dword public 'DATA' use32
.data$r:0000E92C                 assume cs:_data$r
.data$r:0000E92C                 ;org 0E92Ch
.data$r:0000E92C ; COMDAT (pick any)
.data$r:0000E92C                 public ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
.data$r:0000E92C ; class std::basic_ios<wchar_t, struct std::char_traits<wchar_t>> `RTTI Type Descriptor'
.data$r:0000E92C ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E92C                                         ; DATA XREF: .rdata$r:0000E924o
.data$r:0000E92C                                         ; .rdata$r:std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000E92C                                         ; const type_info::`vftable'
.data$r:0000E930                 db    0
.data$r:0000E931                 db    0
.data$r:0000E932                 db    0
.data$r:0000E933                 db    0
.data$r:0000E934                 db  2Eh ; .
.data$r:0000E935                 db  3Fh ; ?
.data$r:0000E936                 db  41h ; A
.data$r:0000E937                 db  56h ; V
.data$r:0000E938                 db  3Fh ; ?
.data$r:0000E939                 db  24h ; $
.data$r:0000E93A                 db  62h ; b
.data$r:0000E93B                 db  61h ; a
.data$r:0000E93C                 db  73h ; s
.data$r:0000E93D                 db  69h ; i
.data$r:0000E93E                 db  63h ; c
.data$r:0000E93F                 db  5Fh ; _
.data$r:0000E940                 db  69h ; i
.data$r:0000E941                 db  6Fh ; o
.data$r:0000E942                 db  73h ; s
.data$r:0000E943                 db  40h ; @
.data$r:0000E944                 db  5Fh ; _
.data$r:0000E945                 db  57h ; W
.data$r:0000E946                 db  55h ; U
.data$r:0000E947                 db  3Fh ; ?
.data$r:0000E948                 db  24h ; $
.data$r:0000E949                 db  63h ; c
.data$r:0000E94A                 db  68h ; h
.data$r:0000E94B                 db  61h ; a
.data$r:0000E94C                 db  72h ; r
.data$r:0000E94D                 db  5Fh ; _
.data$r:0000E94E                 db  74h ; t
.data$r:0000E94F                 db  72h ; r
.data$r:0000E950                 db  61h ; a
.data$r:0000E951                 db  69h ; i
.data$r:0000E952                 db  74h ; t
.data$r:0000E953                 db  73h ; s
.data$r:0000E954                 db  40h ; @
.data$r:0000E955                 db  5Fh ; _
.data$r:0000E956                 db  57h ; W
.data$r:0000E957                 db  40h ; @
.data$r:0000E958                 db  73h ; s
.data$r:0000E959                 db  74h ; t
.data$r:0000E95A                 db  64h ; d
.data$r:0000E95B                 db  40h ; @
.data$r:0000E95C                 db  40h ; @
.data$r:0000E95D                 db  40h ; @
.data$r:0000E95E                 db  73h ; s
.data$r:0000E95F                 db  74h ; t
.data$r:0000E960                 db  64h ; d
.data$r:0000E961                 db  40h ; @
.data$r:0000E962                 db  40h ; @
.data$r:0000E963                 db    0
.data$r:0000E963 _data$r         ends
.data$r:0000E963
.rdata$r:0000E964 ; ===========================================================================
.rdata$r:0000E964
.rdata$r:0000E964 ; Segment type: Pure data
.rdata$r:0000E964 ; Segment permissions: Read
.rdata$r:0000E964 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E964                 assume cs:_rdata$r
.rdata$r:0000E964                 ;org 0E964h
.rdata$r:0000E964 ; COMDAT (pick any)
.rdata$r:0000E964                 public ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000E964 ; std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E964 ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 db    0
.rdata$r:0000E964                                         ; DATA XREF: .rdata$r:0000E928o
.rdata$r:0000E964                                         ; .rdata$r:0000E99Co ...
.rdata$r:0000E965                 db    0
.rdata$r:0000E966                 db    0
.rdata$r:0000E967                 db    0
.rdata$r:0000E968                 db    0
.rdata$r:0000E969                 db    0
.rdata$r:0000E96A                 db    0
.rdata$r:0000E96B                 db    0
.rdata$r:0000E96C                 db    3
.rdata$r:0000E96D                 db    0
.rdata$r:0000E96E                 db    0
.rdata$r:0000E96F                 db    0
.rdata$r:0000E970                 dd offset ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000E970 _rdata$r        ends
.rdata$r:0000E970
.rdata$r:0000E974 ; ===========================================================================
.rdata$r:0000E974
.rdata$r:0000E974 ; Segment type: Pure data
.rdata$r:0000E974 ; Segment permissions: Read
.rdata$r:0000E974 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E974                 assume cs:_rdata$r
.rdata$r:0000E974                 ;org 0E974h
.rdata$r:0000E974 ; COMDAT (pick any)
.rdata$r:0000E974                 public ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000E974 ; std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000E974 ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000E974                                         ; DATA XREF: .rdata$r:0000E970o
.rdata$r:0000E974                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E978                 dd offset ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E97C                 dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000E980                 db    0
.rdata$r:0000E981                 align 4
.rdata$r:0000E981 _rdata$r        ends
.rdata$r:0000E981
.rdata$r:0000E984 ; ===========================================================================
.rdata$r:0000E984
.rdata$r:0000E984 ; Segment type: Pure data
.rdata$r:0000E984 ; Segment permissions: Read
.rdata$r:0000E984 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E984                 assume cs:_rdata$r
.rdata$r:0000E984                 ;org 0E984h
.rdata$r:0000E984 ; COMDAT (pick any)
.rdata$r:0000E984                 public ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000E984 ; std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E984 ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
.rdata$r:0000E984                                         ; DATA XREF: .rdata$r:std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'o
.rdata$r:0000E984                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000E988                 db    2
.rdata$r:0000E989                 db    0
.rdata$r:0000E98A                 db    0
.rdata$r:0000E98B                 db    0
.rdata$r:0000E98C                 db    0
.rdata$r:0000E98D                 db    0
.rdata$r:0000E98E                 db    0
.rdata$r:0000E98F                 db    0
.rdata$r:0000E990                 db 0FFh
.rdata$r:0000E991                 db 0FFh
.rdata$r:0000E992                 db 0FFh
.rdata$r:0000E993                 db 0FFh
.rdata$r:0000E994                 db    0
.rdata$r:0000E995                 db    0
.rdata$r:0000E996                 db    0
.rdata$r:0000E997                 db    0
.rdata$r:0000E998                 db  40h ; @
.rdata$r:0000E999                 db    0
.rdata$r:0000E99A                 db    0
.rdata$r:0000E99B                 db    0
.rdata$r:0000E99C                 dd offset ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E99C _rdata$r        ends
.rdata$r:0000E99C
.rdata$r:0000E9A0 ; ===========================================================================
.rdata$r:0000E9A0
.rdata$r:0000E9A0 ; Segment type: Pure data
.rdata$r:0000E9A0 ; Segment permissions: Read
.rdata$r:0000E9A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E9A0                 assume cs:_rdata$r
.rdata$r:0000E9A0                 ;org 0E9A0h
.rdata$r:0000E9A0 ; COMDAT (pick any)
.rdata$r:0000E9A0                 public ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
.rdata$r:0000E9A0 ; const std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata$r:0000E9A0 ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ db    0
.rdata$r:0000E9A0                                         ; DATA XREF: .rdata:0000E418o
.rdata$r:0000E9A1                 db    0
.rdata$r:0000E9A2                 db    0
.rdata$r:0000E9A3                 db    0
.rdata$r:0000E9A4                 db    0
.rdata$r:0000E9A5                 db    0
.rdata$r:0000E9A6                 db    0
.rdata$r:0000E9A7                 db    0
.rdata$r:0000E9A8                 db    0
.rdata$r:0000E9A9                 db    0
.rdata$r:0000E9AA                 db    0
.rdata$r:0000E9AB                 db    0
.rdata$r:0000E9AC                 dd offset ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000E9B0                 dd offset ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E9B0 _rdata$r        ends
.rdata$r:0000E9B0
.data$r:0000E9B4 ; ===========================================================================
.data$r:0000E9B4
.data$r:0000E9B4 ; Segment type: Pure data
.data$r:0000E9B4 ; Segment permissions: Read/Write
.data$r:0000E9B4 _data$r         segment dword public 'DATA' use32
.data$r:0000E9B4                 assume cs:_data$r
.data$r:0000E9B4                 ;org 0E9B4h
.data$r:0000E9B4 ; COMDAT (pick any)
.data$r:0000E9B4                 public ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
.data$r:0000E9B4 ; class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> `RTTI Type Descriptor'
.data$r:0000E9B4 ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000E9B4                                         ; DATA XREF: .rdata$r:0000E9ACo
.data$r:0000E9B4                                         ; .rdata$r:std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000E9B4                                         ; const type_info::`vftable'
.data$r:0000E9B8                 db    0
.data$r:0000E9B9                 db    0
.data$r:0000E9BA                 db    0
.data$r:0000E9BB                 db    0
.data$r:0000E9BC                 db  2Eh ; .
.data$r:0000E9BD                 db  3Fh ; ?
.data$r:0000E9BE                 db  41h ; A
.data$r:0000E9BF                 db  56h ; V
.data$r:0000E9C0                 db  3Fh ; ?
.data$r:0000E9C1                 db  24h ; $
.data$r:0000E9C2                 db  62h ; b
.data$r:0000E9C3                 db  61h ; a
.data$r:0000E9C4                 db  73h ; s
.data$r:0000E9C5                 db  69h ; i
.data$r:0000E9C6                 db  63h ; c
.data$r:0000E9C7                 db  5Fh ; _
.data$r:0000E9C8                 db  73h ; s
.data$r:0000E9C9                 db  74h ; t
.data$r:0000E9CA                 db  72h ; r
.data$r:0000E9CB                 db  65h ; e
.data$r:0000E9CC                 db  61h ; a
.data$r:0000E9CD                 db  6Dh ; m
.data$r:0000E9CE                 db  62h ; b
.data$r:0000E9CF                 db  75h ; u
.data$r:0000E9D0                 db  66h ; f
.data$r:0000E9D1                 db  40h ; @
.data$r:0000E9D2                 db  5Fh ; _
.data$r:0000E9D3                 db  57h ; W
.data$r:0000E9D4                 db  55h ; U
.data$r:0000E9D5                 db  3Fh ; ?
.data$r:0000E9D6                 db  24h ; $
.data$r:0000E9D7                 db  63h ; c
.data$r:0000E9D8                 db  68h ; h
.data$r:0000E9D9                 db  61h ; a
.data$r:0000E9DA                 db  72h ; r
.data$r:0000E9DB                 db  5Fh ; _
.data$r:0000E9DC                 db  74h ; t
.data$r:0000E9DD                 db  72h ; r
.data$r:0000E9DE                 db  61h ; a
.data$r:0000E9DF                 db  69h ; i
.data$r:0000E9E0                 db  74h ; t
.data$r:0000E9E1                 db  73h ; s
.data$r:0000E9E2                 db  40h ; @
.data$r:0000E9E3                 db  5Fh ; _
.data$r:0000E9E4                 db  57h ; W
.data$r:0000E9E5                 db  40h ; @
.data$r:0000E9E6                 db  73h ; s
.data$r:0000E9E7                 db  74h ; t
.data$r:0000E9E8                 db  64h ; d
.data$r:0000E9E9                 db  40h ; @
.data$r:0000E9EA                 db  40h ; @
.data$r:0000E9EB                 db  40h ; @
.data$r:0000E9EC                 db  73h ; s
.data$r:0000E9ED                 db  74h ; t
.data$r:0000E9EE                 db  64h ; d
.data$r:0000E9EF                 db  40h ; @
.data$r:0000E9F0                 db  40h ; @
.data$r:0000E9F1                 db    0
.data$r:0000E9F2                 align 4
.data$r:0000E9F2 _data$r         ends
.data$r:0000E9F2
.rdata$r:0000E9F4 ; ===========================================================================
.rdata$r:0000E9F4
.rdata$r:0000E9F4 ; Segment type: Pure data
.rdata$r:0000E9F4 ; Segment permissions: Read
.rdata$r:0000E9F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E9F4                 assume cs:_rdata$r
.rdata$r:0000E9F4                 ;org 0E9F4h
.rdata$r:0000E9F4 ; COMDAT (pick any)
.rdata$r:0000E9F4                 public ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000E9F4 ; std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E9F4 ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 db    0
.rdata$r:0000E9F4                                         ; DATA XREF: .rdata$r:0000E9B0o
.rdata$r:0000E9F4                                         ; .rdata$r:0000EA24o
.rdata$r:0000E9F5                 db    0
.rdata$r:0000E9F6                 db    0
.rdata$r:0000E9F7                 db    0
.rdata$r:0000E9F8                 db    0
.rdata$r:0000E9F9                 db    0
.rdata$r:0000E9FA                 db    0
.rdata$r:0000E9FB                 db    0
.rdata$r:0000E9FC                 db    1
.rdata$r:0000E9FD                 db    0
.rdata$r:0000E9FE                 db    0
.rdata$r:0000E9FF                 db    0
.rdata$r:0000EA00                 dd offset ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EA00 _rdata$r        ends
.rdata$r:0000EA00
.rdata$r:0000EA04 ; ===========================================================================
.rdata$r:0000EA04
.rdata$r:0000EA04 ; Segment type: Pure data
.rdata$r:0000EA04 ; Segment permissions: Read
.rdata$r:0000EA04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EA04                 assume cs:_rdata$r
.rdata$r:0000EA04                 ;org 0EA04h
.rdata$r:0000EA04 ; COMDAT (pick any)
.rdata$r:0000EA04                 public ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EA04 ; std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EA04 ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EA04                                         ; DATA XREF: .rdata$r:0000EA00o
.rdata$r:0000EA04                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EA08                 db    0
.rdata$r:0000EA09                 align 4
.rdata$r:0000EA09 _rdata$r        ends
.rdata$r:0000EA09
.rdata$r:0000EA0C ; ===========================================================================
.rdata$r:0000EA0C
.rdata$r:0000EA0C ; Segment type: Pure data
.rdata$r:0000EA0C ; Segment permissions: Read
.rdata$r:0000EA0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EA0C                 assume cs:_rdata$r
.rdata$r:0000EA0C                 ;org 0EA0Ch
.rdata$r:0000EA0C ; COMDAT (pick any)
.rdata$r:0000EA0C                 public ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EA0C ; std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EA0C ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
.rdata$r:0000EA0C                                         ; DATA XREF: .rdata$r:std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'o
.rdata$r:0000EA0C                                         ; .rdata$r:0000EB4Co
.rdata$r:0000EA0C                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EA10                 db    0
.rdata$r:0000EA11                 db    0
.rdata$r:0000EA12                 db    0
.rdata$r:0000EA13                 db    0
.rdata$r:0000EA14                 db    0
.rdata$r:0000EA15                 db    0
.rdata$r:0000EA16                 db    0
.rdata$r:0000EA17                 db    0
.rdata$r:0000EA18                 db 0FFh
.rdata$r:0000EA19                 db 0FFh
.rdata$r:0000EA1A                 db 0FFh
.rdata$r:0000EA1B                 db 0FFh
.rdata$r:0000EA1C                 db    0
.rdata$r:0000EA1D                 db    0
.rdata$r:0000EA1E                 db    0
.rdata$r:0000EA1F                 db    0
.rdata$r:0000EA20                 db  40h ; @
.rdata$r:0000EA21                 db    0
.rdata$r:0000EA22                 db    0
.rdata$r:0000EA23                 db    0
.rdata$r:0000EA24                 dd offset ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EA24 _rdata$r        ends
.rdata$r:0000EA24
.rdata$r:0000EA28 ; ===========================================================================
.rdata$r:0000EA28
.rdata$r:0000EA28 ; Segment type: Pure data
.rdata$r:0000EA28 ; Segment permissions: Read
.rdata$r:0000EA28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EA28                 assume cs:_rdata$r
.rdata$r:0000EA28                 ;org 0EA28h
.rdata$r:0000EA28 ; COMDAT (pick any)
.rdata$r:0000EA28                 public ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EA28 ; std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0, 0, 4, 80)'
.rdata$r:0000EA28 ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
.rdata$r:0000EA28                                         ; DATA XREF: .rdata$r:0000EAA8o
.rdata$r:0000EA28                                         ; .rdata$r:0000EBF0o
.rdata$r:0000EA28                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EA2C                 db    2
.rdata$r:0000EA2D                 db    0
.rdata$r:0000EA2E                 db    0
.rdata$r:0000EA2F                 db    0
.rdata$r:0000EA30                 db    0
.rdata$r:0000EA31                 db    0
.rdata$r:0000EA32                 db    0
.rdata$r:0000EA33                 db    0
.rdata$r:0000EA34                 db    0
.rdata$r:0000EA35                 db    0
.rdata$r:0000EA36                 db    0
.rdata$r:0000EA37                 db    0
.rdata$r:0000EA38                 db    4
.rdata$r:0000EA39                 db    0
.rdata$r:0000EA3A                 db    0
.rdata$r:0000EA3B                 db    0
.rdata$r:0000EA3C                 db  50h ; P
.rdata$r:0000EA3D                 db    0
.rdata$r:0000EA3E                 db    0
.rdata$r:0000EA3F                 db    0
.rdata$r:0000EA40                 dd offset ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EA40 _rdata$r        ends
.rdata$r:0000EA40
.rdata$r:0000EA44 ; ===========================================================================
.rdata$r:0000EA44
.rdata$r:0000EA44 ; Segment type: Pure data
.rdata$r:0000EA44 ; Segment permissions: Read
.rdata$r:0000EA44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EA44                 assume cs:_rdata$r
.rdata$r:0000EA44                 ;org 0EA44h
.rdata$r:0000EA44 ; COMDAT (pick any)
.rdata$r:0000EA44                 public ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
.rdata$r:0000EA44 ; const std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Complete Object Locator'
.rdata$r:0000EA44 ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ db    0
.rdata$r:0000EA44                                         ; DATA XREF: .rdata:0000E570o
.rdata$r:0000EA45                 db    0
.rdata$r:0000EA46                 db    0
.rdata$r:0000EA47                 db    0
.rdata$r:0000EA48                 db    8
.rdata$r:0000EA49                 db    0
.rdata$r:0000EA4A                 db    0
.rdata$r:0000EA4B                 db    0
.rdata$r:0000EA4C                 db    4
.rdata$r:0000EA4D                 db    0
.rdata$r:0000EA4E                 db    0
.rdata$r:0000EA4F                 db    0
.rdata$r:0000EA50                 dd offset ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EA54                 dd offset ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EA54 _rdata$r        ends
.rdata$r:0000EA54
.data$r:0000EA58 ; ===========================================================================
.data$r:0000EA58
.data$r:0000EA58 ; Segment type: Pure data
.data$r:0000EA58 ; Segment permissions: Read/Write
.data$r:0000EA58 _data$r         segment dword public 'DATA' use32
.data$r:0000EA58                 assume cs:_data$r
.data$r:0000EA58                 ;org 0EA58h
.data$r:0000EA58 ; COMDAT (pick any)
.data$r:0000EA58                 public ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
.data$r:0000EA58 ; class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> `RTTI Type Descriptor'
.data$r:0000EA58 ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EA58                                         ; DATA XREF: .rdata$r:0000EA50o
.data$r:0000EA58                                         ; .rdata$r:std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EA58                                         ; const type_info::`vftable'
.data$r:0000EA5C                 align 10h
.data$r:0000EA60 a_?av?Basic_ost db '.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@',0
.data$r:0000EA60 _data$r         ends
.data$r:0000EA60
.rdata$r:0000EA94 ; ===========================================================================
.rdata$r:0000EA94
.rdata$r:0000EA94 ; Segment type: Pure data
.rdata$r:0000EA94 ; Segment permissions: Read
.rdata$r:0000EA94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EA94                 assume cs:_rdata$r
.rdata$r:0000EA94                 ;org 0EA94h
.rdata$r:0000EA94 ; COMDAT (pick any)
.rdata$r:0000EA94                 public ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EA94 ; std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EA94 ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 db    0
.rdata$r:0000EA94                                         ; DATA XREF: .rdata$r:0000EA54o
.rdata$r:0000EA94                                         ; .rdata$r:0000EAD0o
.rdata$r:0000EA95                 db    0
.rdata$r:0000EA96                 db    0
.rdata$r:0000EA97                 db    0
.rdata$r:0000EA98                 db    0
.rdata$r:0000EA99                 db    0
.rdata$r:0000EA9A                 db    0
.rdata$r:0000EA9B                 db    0
.rdata$r:0000EA9C                 db    4
.rdata$r:0000EA9D                 db    0
.rdata$r:0000EA9E                 db    0
.rdata$r:0000EA9F                 db    0
.rdata$r:0000EAA0                 dd offset ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EAA0 _rdata$r        ends
.rdata$r:0000EAA0
.rdata$r:0000EAA4 ; ===========================================================================
.rdata$r:0000EAA4
.rdata$r:0000EAA4 ; Segment type: Pure data
.rdata$r:0000EAA4 ; Segment permissions: Read
.rdata$r:0000EAA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EAA4                 assume cs:_rdata$r
.rdata$r:0000EAA4                 ;org 0EAA4h
.rdata$r:0000EAA4 ; COMDAT (pick any)
.rdata$r:0000EAA4                 public ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EAA4 ; std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EAA4 ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EAA4                                         ; DATA XREF: .rdata$r:0000EAA0o
.rdata$r:0000EAA4                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EAA8                 dd offset ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,0,4,80)'
.rdata$r:0000EAAC                 dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
.rdata$r:0000EAB0                 dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
.rdata$r:0000EAB4                 db    0
.rdata$r:0000EAB5                 align 4
.rdata$r:0000EAB5 _rdata$r        ends
.rdata$r:0000EAB5
.rdata$r:0000EAB8 ; ===========================================================================
.rdata$r:0000EAB8
.rdata$r:0000EAB8 ; Segment type: Pure data
.rdata$r:0000EAB8 ; Segment permissions: Read
.rdata$r:0000EAB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EAB8                 assume cs:_rdata$r
.rdata$r:0000EAB8                 ;org 0EAB8h
.rdata$r:0000EAB8 ; COMDAT (pick any)
.rdata$r:0000EAB8                 public ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
.rdata$r:0000EAB8 ; std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EAB8 ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 dd offset ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
.rdata$r:0000EAB8                                         ; DATA XREF: .rdata$r:std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Array'o
.rdata$r:0000EAB8                                         ; .rdata$r:0000EBECo
.rdata$r:0000EAB8                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EABC                 db    3
.rdata$r:0000EABD                 db    0
.rdata$r:0000EABE                 db    0
.rdata$r:0000EABF                 db    0
.rdata$r:0000EAC0                 db    0
.rdata$r:0000EAC1                 db    0
.rdata$r:0000EAC2                 db    0
.rdata$r:0000EAC3                 db    0
.rdata$r:0000EAC4                 db 0FFh
.rdata$r:0000EAC5                 db 0FFh
.rdata$r:0000EAC6                 db 0FFh
.rdata$r:0000EAC7                 db 0FFh
.rdata$r:0000EAC8                 db    0
.rdata$r:0000EAC9                 db    0
.rdata$r:0000EACA                 db    0
.rdata$r:0000EACB                 db    0
.rdata$r:0000EACC                 db  40h ; @
.rdata$r:0000EACD                 db    0
.rdata$r:0000EACE                 db    0
.rdata$r:0000EACF                 db    0
.rdata$r:0000EAD0                 dd offset ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EAD0 _rdata$r        ends
.rdata$r:0000EAD0
.rdata$r:0000EAD4 ; ===========================================================================
.rdata$r:0000EAD4
.rdata$r:0000EAD4 ; Segment type: Pure data
.rdata$r:0000EAD4 ; Segment permissions: Read
.rdata$r:0000EAD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EAD4                 assume cs:_rdata$r
.rdata$r:0000EAD4                 ;org 0EAD4h
.rdata$r:0000EAD4 ; COMDAT (pick any)
.rdata$r:0000EAD4                 public ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
.rdata$r:0000EAD4 ; const std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Complete Object Locator'
.rdata$r:0000EAD4 ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ db    0
.rdata$r:0000EAD4                                         ; DATA XREF: .rdata:0000E580o
.rdata$r:0000EAD5                 db    0
.rdata$r:0000EAD6                 db    0
.rdata$r:0000EAD7                 db    0
.rdata$r:0000EAD8                 db    0
.rdata$r:0000EAD9                 db    0
.rdata$r:0000EADA                 db    0
.rdata$r:0000EADB                 db    0
.rdata$r:0000EADC                 db    0
.rdata$r:0000EADD                 db    0
.rdata$r:0000EADE                 db    0
.rdata$r:0000EADF                 db    0
.rdata$r:0000EAE0                 dd offset ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EAE4                 dd offset ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EAE4 _rdata$r        ends
.rdata$r:0000EAE4
.data$r:0000EAE8 ; ===========================================================================
.data$r:0000EAE8
.data$r:0000EAE8 ; Segment type: Pure data
.data$r:0000EAE8 ; Segment permissions: Read/Write
.data$r:0000EAE8 ; Segment alignment 'qword' can not be represented in assembly
.data$r:0000EAE8 _data$r         segment para public 'DATA' use32
.data$r:0000EAE8                 assume cs:_data$r
.data$r:0000EAE8                 ;org 0EAE8h
.data$r:0000EAE8 ; COMDAT (pick any)
.data$r:0000EAE8                 public ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
.data$r:0000EAE8 ; class std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> `RTTI Type Descriptor'
.data$r:0000EAE8 ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EAE8                                         ; DATA XREF: .rdata$r:0000EAE0o
.data$r:0000EAE8                                         ; .rdata$r:std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EAE8                                         ; const type_info::`vftable'
.data$r:0000EAEC                 align 10h
.data$r:0000EAF0 a_?av?Basic_str db '.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@'
.data$r:0000EAF0                 db '@std@@',0
.data$r:0000EAF0 _data$r         ends
.data$r:0000EAF0
.rdata$r:0000EB38 ; ===========================================================================
.rdata$r:0000EB38
.rdata$r:0000EB38 ; Segment type: Pure data
.rdata$r:0000EB38 ; Segment permissions: Read
.rdata$r:0000EB38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EB38                 assume cs:_rdata$r
.rdata$r:0000EB38                 ;org 0EB38h
.rdata$r:0000EB38 ; COMDAT (pick any)
.rdata$r:0000EB38                 public ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EB38 ; std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EB38 ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 db    0
.rdata$r:0000EB38                                         ; DATA XREF: .rdata$r:0000EAE4o
.rdata$r:0000EB38                                         ; .rdata$r:0000EB6Co
.rdata$r:0000EB39                 db    0
.rdata$r:0000EB3A                 db    0
.rdata$r:0000EB3B                 db    0
.rdata$r:0000EB3C                 db    0
.rdata$r:0000EB3D                 db    0
.rdata$r:0000EB3E                 db    0
.rdata$r:0000EB3F                 db    0
.rdata$r:0000EB40                 db    2
.rdata$r:0000EB41                 db    0
.rdata$r:0000EB42                 db    0
.rdata$r:0000EB43                 db    0
.rdata$r:0000EB44                 dd offset ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EB44 _rdata$r        ends
.rdata$r:0000EB44
.rdata$r:0000EB48 ; ===========================================================================
.rdata$r:0000EB48
.rdata$r:0000EB48 ; Segment type: Pure data
.rdata$r:0000EB48 ; Segment permissions: Read
.rdata$r:0000EB48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EB48                 assume cs:_rdata$r
.rdata$r:0000EB48                 ;org 0EB48h
.rdata$r:0000EB48 ; COMDAT (pick any)
.rdata$r:0000EB48                 public ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EB48 ; std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EB48 ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EB48                                         ; DATA XREF: .rdata$r:0000EB44o
.rdata$r:0000EB48                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EB4C                 dd offset ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EB50                 db    0
.rdata$r:0000EB51                 align 4
.rdata$r:0000EB51 _rdata$r        ends
.rdata$r:0000EB51
.rdata$r:0000EB54 ; ===========================================================================
.rdata$r:0000EB54
.rdata$r:0000EB54 ; Segment type: Pure data
.rdata$r:0000EB54 ; Segment permissions: Read
.rdata$r:0000EB54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EB54                 assume cs:_rdata$r
.rdata$r:0000EB54                 ;org 0EB54h
.rdata$r:0000EB54 ; COMDAT (pick any)
.rdata$r:0000EB54                 public ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EB54 ; std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EB54 ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 dd offset ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
.rdata$r:0000EB54                                         ; DATA XREF: .rdata$r:std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Array'o
.rdata$r:0000EB54                                         ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EB58                 db    1
.rdata$r:0000EB59                 db    0
.rdata$r:0000EB5A                 db    0
.rdata$r:0000EB5B                 db    0
.rdata$r:0000EB5C                 db    0
.rdata$r:0000EB5D                 db    0
.rdata$r:0000EB5E                 db    0
.rdata$r:0000EB5F                 db    0
.rdata$r:0000EB60                 db 0FFh
.rdata$r:0000EB61                 db 0FFh
.rdata$r:0000EB62                 db 0FFh
.rdata$r:0000EB63                 db 0FFh
.rdata$r:0000EB64                 db    0
.rdata$r:0000EB65                 db    0
.rdata$r:0000EB66                 db    0
.rdata$r:0000EB67                 db    0
.rdata$r:0000EB68                 db  40h ; @
.rdata$r:0000EB69                 db    0
.rdata$r:0000EB6A                 db    0
.rdata$r:0000EB6B                 db    0
.rdata$r:0000EB6C                 dd offset ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EB6C _rdata$r        ends
.rdata$r:0000EB6C
.rdata$r:0000EB70 ; ===========================================================================
.rdata$r:0000EB70
.rdata$r:0000EB70 ; Segment type: Pure data
.rdata$r:0000EB70 ; Segment permissions: Read
.rdata$r:0000EB70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EB70                 assume cs:_rdata$r
.rdata$r:0000EB70                 ;org 0EB70h
.rdata$r:0000EB70 ; COMDAT (pick any)
.rdata$r:0000EB70                 public ??_R4?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
.rdata$r:0000EB70 ; const std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Complete Object Locator'
.rdata$r:0000EB70 ??_R4?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ db    0
.rdata$r:0000EB70                                         ; DATA XREF: .rdata:0000E5C0o
.rdata$r:0000EB71                 db    0
.rdata$r:0000EB72                 db    0
.rdata$r:0000EB73                 db    0
.rdata$r:0000EB74                 db  50h ; P
.rdata$r:0000EB75                 db    0
.rdata$r:0000EB76                 db    0
.rdata$r:0000EB77                 db    0
.rdata$r:0000EB78                 db    4
.rdata$r:0000EB79                 db    0
.rdata$r:0000EB7A                 db    0
.rdata$r:0000EB7B                 db    0
.rdata$r:0000EB7C                 dd offset ??_R0?AV?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EB80                 dd offset ??_R3?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EB80 _rdata$r        ends
.rdata$r:0000EB80
.data$r:0000EB84 ; ===========================================================================
.data$r:0000EB84
.data$r:0000EB84 ; Segment type: Pure data
.data$r:0000EB84 ; Segment permissions: Read/Write
.data$r:0000EB84 ; Segment alignment 'qword' can not be represented in assembly
.data$r:0000EB84 _data$r         segment para public 'DATA' use32
.data$r:0000EB84                 assume cs:_data$r
.data$r:0000EB84                 ;org 0EB84h
.data$r:0000EB84 ; COMDAT (pick any)
.data$r:0000EB84                 public ??_R0?AV?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
.data$r:0000EB84 ; class std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> `RTTI Type Descriptor'
.data$r:0000EB84 ??_R0?AV?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EB84                                         ; DATA XREF: .rdata$r:0000EB7Co
.data$r:0000EB84                                         ; .rdata$r:std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EB84                                         ; const type_info::`vftable'
.data$r:0000EB88                 db    0
.data$r:0000EB89                 db    0
.data$r:0000EB8A                 db    0
.data$r:0000EB8B                 db    0
.data$r:0000EB8C                 db  2Eh ; .
.data$r:0000EB8D                 db  3Fh ; ?
.data$r:0000EB8E                 db  41h ; A
.data$r:0000EB8F                 db  56h ; V
.data$r:0000EB90                 db  3Fh ; ?
.data$r:0000EB91                 db  24h ; $
.data$r:0000EB92                 db  62h ; b
.data$r:0000EB93                 db  61h ; a
.data$r:0000EB94                 db  73h ; s
.data$r:0000EB95                 db  69h ; i
.data$r:0000EB96                 db  63h ; c
.data$r:0000EB97                 db  5Fh ; _
.data$r:0000EB98                 db  6Fh ; o
.data$r:0000EB99                 db  73h ; s
.data$r:0000EB9A                 db  74h ; t
.data$r:0000EB9B                 db  72h ; r
.data$r:0000EB9C                 db  69h ; i
.data$r:0000EB9D                 db  6Eh ; n
.data$r:0000EB9E                 db  67h ; g
.data$r:0000EB9F                 db  73h ; s
.data$r:0000EBA0                 db  74h ; t
.data$r:0000EBA1                 db  72h ; r
.data$r:0000EBA2                 db  65h ; e
.data$r:0000EBA3                 db  61h ; a
.data$r:0000EBA4                 db  6Dh ; m
.data$r:0000EBA5                 db  40h ; @
.data$r:0000EBA6                 db  5Fh ; _
.data$r:0000EBA7                 db  57h ; W
.data$r:0000EBA8                 db  55h ; U
.data$r:0000EBA9                 db  3Fh ; ?
.data$r:0000EBAA                 db  24h ; $
.data$r:0000EBAB                 db  63h ; c
.data$r:0000EBAC                 db  68h ; h
.data$r:0000EBAD                 db  61h ; a
.data$r:0000EBAE                 db  72h ; r
.data$r:0000EBAF                 db  5Fh ; _
.data$r:0000EBB0                 db  74h ; t
.data$r:0000EBB1                 db  72h ; r
.data$r:0000EBB2                 db  61h ; a
.data$r:0000EBB3                 db  69h ; i
.data$r:0000EBB4                 db  74h ; t
.data$r:0000EBB5                 db  73h ; s
.data$r:0000EBB6                 db  40h ; @
.data$r:0000EBB7                 db  5Fh ; _
.data$r:0000EBB8                 db  57h ; W
.data$r:0000EBB9                 db  40h ; @
.data$r:0000EBBA                 db  73h ; s
.data$r:0000EBBB                 db  74h ; t
.data$r:0000EBBC                 db  64h ; d
.data$r:0000EBBD                 db  40h ; @
.data$r:0000EBBE                 db  40h ; @
.data$r:0000EBBF                 db  56h ; V
.data$r:0000EBC0                 db  3Fh ; ?
.data$r:0000EBC1                 db  24h ; $
.data$r:0000EBC2                 db  61h ; a
.data$r:0000EBC3                 db  6Ch ; l
.data$r:0000EBC4                 db  6Ch ; l
.data$r:0000EBC5                 db  6Fh ; o
.data$r:0000EBC6                 db  63h ; c
.data$r:0000EBC7                 db  61h ; a
.data$r:0000EBC8                 db  74h ; t
.data$r:0000EBC9                 db  6Fh ; o
.data$r:0000EBCA                 db  72h ; r
.data$r:0000EBCB                 db  40h ; @
.data$r:0000EBCC                 db  5Fh ; _
.data$r:0000EBCD                 db  57h ; W
.data$r:0000EBCE                 db  40h ; @
.data$r:0000EBCF                 db  32h ; 2
.data$r:0000EBD0                 db  40h ; @
.data$r:0000EBD1                 db  40h ; @
.data$r:0000EBD2                 db  73h ; s
.data$r:0000EBD3                 db  74h ; t
.data$r:0000EBD4                 db  64h ; d
.data$r:0000EBD5                 db  40h ; @
.data$r:0000EBD6                 db  40h ; @
.data$r:0000EBD7                 db    0
.data$r:0000EBD7 _data$r         ends
.data$r:0000EBD7
.rdata$r:0000EBD8 ; ===========================================================================
.rdata$r:0000EBD8
.rdata$r:0000EBD8 ; Segment type: Pure data
.rdata$r:0000EBD8 ; Segment permissions: Read
.rdata$r:0000EBD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EBD8                 assume cs:_rdata$r
.rdata$r:0000EBD8                 ;org 0EBD8h
.rdata$r:0000EBD8 ; COMDAT (pick any)
.rdata$r:0000EBD8                 public ??_R3?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EBD8 ; std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EBD8 ??_R3?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 db    0
.rdata$r:0000EBD8                                         ; DATA XREF: .rdata$r:0000EB80o
.rdata$r:0000EBD8                                         ; .rdata$r:0000EC18o
.rdata$r:0000EBD9                 db    0
.rdata$r:0000EBDA                 db    0
.rdata$r:0000EBDB                 db    0
.rdata$r:0000EBDC                 db    0
.rdata$r:0000EBDD                 db    0
.rdata$r:0000EBDE                 db    0
.rdata$r:0000EBDF                 db    0
.rdata$r:0000EBE0                 db    5
.rdata$r:0000EBE1                 db    0
.rdata$r:0000EBE2                 db    0
.rdata$r:0000EBE3                 db    0
.rdata$r:0000EBE4                 dd offset ??_R2?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EBE4 _rdata$r        ends
.rdata$r:0000EBE4
.rdata$r:0000EBE8 ; ===========================================================================
.rdata$r:0000EBE8
.rdata$r:0000EBE8 ; Segment type: Pure data
.rdata$r:0000EBE8 ; Segment permissions: Read
.rdata$r:0000EBE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EBE8                 assume cs:_rdata$r
.rdata$r:0000EBE8                 ;org 0EBE8h
.rdata$r:0000EBE8 ; COMDAT (pick any)
.rdata$r:0000EBE8                 public ??_R2?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EBE8 ; std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Base Class Array'
.rdata$r:0000EBE8 ??_R2?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EBE8                                         ; DATA XREF: .rdata$r:0000EBE4o
.rdata$r:0000EBE8                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EBEC                 dd offset ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EBF0                 dd offset ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`RTTI Base Class Descriptor at (0,0,4,80)'
.rdata$r:0000EBF4                 dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
.rdata$r:0000EBF8                 dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
.rdata$r:0000EBFC                 db    0
.rdata$r:0000EBFD                 align 10h
.rdata$r:0000EBFD _rdata$r        ends
.rdata$r:0000EBFD
.rdata$r:0000EC00 ; ===========================================================================
.rdata$r:0000EC00
.rdata$r:0000EC00 ; Segment type: Pure data
.rdata$r:0000EC00 ; Segment permissions: Read
.rdata$r:0000EC00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC00                 assume cs:_rdata$r
.rdata$r:0000EC00                 ;org 0EC00h
.rdata$r:0000EC00 ; COMDAT (pick any)
.rdata$r:0000EC00                 public ??_R1A@?0A@EA@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
.rdata$r:0000EC00 ; std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EC00 ??_R1A@?0A@EA@?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 dd offset ??_R0?AV?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
.rdata$r:0000EC00                                         ; DATA XREF: .rdata$r:std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Base Class Array'o
.rdata$r:0000EC00                                         ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> `RTTI Type Descriptor'
.rdata$r:0000EC04                 db    4
.rdata$r:0000EC05                 db    0
.rdata$r:0000EC06                 db    0
.rdata$r:0000EC07                 db    0
.rdata$r:0000EC08                 db    0
.rdata$r:0000EC09                 db    0
.rdata$r:0000EC0A                 db    0
.rdata$r:0000EC0B                 db    0
.rdata$r:0000EC0C                 db 0FFh
.rdata$r:0000EC0D                 db 0FFh
.rdata$r:0000EC0E                 db 0FFh
.rdata$r:0000EC0F                 db 0FFh
.rdata$r:0000EC10                 db    0
.rdata$r:0000EC11                 db    0
.rdata$r:0000EC12                 db    0
.rdata$r:0000EC13                 db    0
.rdata$r:0000EC14                 db  40h ; @
.rdata$r:0000EC15                 db    0
.rdata$r:0000EC16                 db    0
.rdata$r:0000EC17                 db    0
.rdata$r:0000EC18                 dd offset ??_R3?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC18 _rdata$r        ends
.rdata$r:0000EC18
.rdata$r:0000EC1C ; ===========================================================================
.rdata$r:0000EC1C
.rdata$r:0000EC1C ; Segment type: Pure data
.rdata$r:0000EC1C ; Segment permissions: Read
.rdata$r:0000EC1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC1C                 assume cs:_rdata$r
.rdata$r:0000EC1C                 ;org 0EC1Ch
.rdata$r:0000EC1C ; COMDAT (pick any)
.rdata$r:0000EC1C                 public ??_R4runtime_error@std@@6B@
.rdata$r:0000EC1C ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:0000EC1C ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000DFB8o
.rdata$r:0000EC1D                 db    0
.rdata$r:0000EC1E                 db    0
.rdata$r:0000EC1F                 db    0
.rdata$r:0000EC20                 db    0
.rdata$r:0000EC21                 db    0
.rdata$r:0000EC22                 db    0
.rdata$r:0000EC23                 db    0
.rdata$r:0000EC24                 db    0
.rdata$r:0000EC25                 db    0
.rdata$r:0000EC26                 db    0
.rdata$r:0000EC27                 db    0
.rdata$r:0000EC28                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000EC2C                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC2C _rdata$r        ends
.rdata$r:0000EC2C
.rdata$r:0000EC30 ; ===========================================================================
.rdata$r:0000EC30
.rdata$r:0000EC30 ; Segment type: Pure data
.rdata$r:0000EC30 ; Segment permissions: Read
.rdata$r:0000EC30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC30                 assume cs:_rdata$r
.rdata$r:0000EC30                 ;org 0EC30h
.rdata$r:0000EC30 ; COMDAT (pick any)
.rdata$r:0000EC30                 public ??_R3runtime_error@std@@8
.rdata$r:0000EC30 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC30 ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000EC2Co
.rdata$r:0000EC30                                         ; .rdata$r:0000EC64o
.rdata$r:0000EC31                 db    0
.rdata$r:0000EC32                 db    0
.rdata$r:0000EC33                 db    0
.rdata$r:0000EC34                 db    0
.rdata$r:0000EC35                 db    0
.rdata$r:0000EC36                 db    0
.rdata$r:0000EC37                 db    0
.rdata$r:0000EC38                 db    2
.rdata$r:0000EC39                 db    0
.rdata$r:0000EC3A                 db    0
.rdata$r:0000EC3B                 db    0
.rdata$r:0000EC3C                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000EC3C _rdata$r        ends
.rdata$r:0000EC3C
.rdata$r:0000EC40 ; ===========================================================================
.rdata$r:0000EC40
.rdata$r:0000EC40 ; Segment type: Pure data
.rdata$r:0000EC40 ; Segment permissions: Read
.rdata$r:0000EC40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC40                 assume cs:_rdata$r
.rdata$r:0000EC40                 ;org 0EC40h
.rdata$r:0000EC40 ; COMDAT (pick any)
.rdata$r:0000EC40                 public ??_R2runtime_error@std@@8
.rdata$r:0000EC40 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000EC40 ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000EC40                                         ; DATA XREF: .rdata$r:0000EC3Co
.rdata$r:0000EC40                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EC44                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EC48                 db    0
.rdata$r:0000EC49                 align 4
.rdata$r:0000EC49 _rdata$r        ends
.rdata$r:0000EC49
.rdata$r:0000EC4C ; ===========================================================================
.rdata$r:0000EC4C
.rdata$r:0000EC4C ; Segment type: Pure data
.rdata$r:0000EC4C ; Segment permissions: Read
.rdata$r:0000EC4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC4C                 assume cs:_rdata$r
.rdata$r:0000EC4C                 ;org 0EC4Ch
.rdata$r:0000EC4C ; COMDAT (pick any)
.rdata$r:0000EC4C                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000EC4C ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EC4C ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:0000EC4C                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:0000EC4C                                         ; .rdata$r:0000EEB4o ...
.rdata$r:0000EC4C                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000EC50                 db    1
.rdata$r:0000EC51                 db    0
.rdata$r:0000EC52                 db    0
.rdata$r:0000EC53                 db    0
.rdata$r:0000EC54                 db    0
.rdata$r:0000EC55                 db    0
.rdata$r:0000EC56                 db    0
.rdata$r:0000EC57                 db    0
.rdata$r:0000EC58                 db 0FFh
.rdata$r:0000EC59                 db 0FFh
.rdata$r:0000EC5A                 db 0FFh
.rdata$r:0000EC5B                 db 0FFh
.rdata$r:0000EC5C                 db    0
.rdata$r:0000EC5D                 db    0
.rdata$r:0000EC5E                 db    0
.rdata$r:0000EC5F                 db    0
.rdata$r:0000EC60                 db  40h ; @
.rdata$r:0000EC61                 db    0
.rdata$r:0000EC62                 db    0
.rdata$r:0000EC63                 db    0
.rdata$r:0000EC64                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC64 _rdata$r        ends
.rdata$r:0000EC64
.rdata$r:0000EC68 ; ===========================================================================
.rdata$r:0000EC68
.rdata$r:0000EC68 ; Segment type: Pure data
.rdata$r:0000EC68 ; Segment permissions: Read
.rdata$r:0000EC68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC68                 assume cs:_rdata$r
.rdata$r:0000EC68                 ;org 0EC68h
.rdata$r:0000EC68 ; COMDAT (pick any)
.rdata$r:0000EC68                 public ??_R4_Facet_base@std@@6B@
.rdata$r:0000EC68 ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata$r:0000EC68 ??_R4_Facet_base@std@@6B@ db    0       ; DATA XREF: .rdata:0000E064o
.rdata$r:0000EC69                 db    0
.rdata$r:0000EC6A                 db    0
.rdata$r:0000EC6B                 db    0
.rdata$r:0000EC6C                 db    0
.rdata$r:0000EC6D                 db    0
.rdata$r:0000EC6E                 db    0
.rdata$r:0000EC6F                 db    0
.rdata$r:0000EC70                 db    0
.rdata$r:0000EC71                 db    0
.rdata$r:0000EC72                 db    0
.rdata$r:0000EC73                 db    0
.rdata$r:0000EC74                 dd offset ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000EC78                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC78 _rdata$r        ends
.rdata$r:0000EC78
.data$r:0000EC7C ; ===========================================================================
.data$r:0000EC7C
.data$r:0000EC7C ; Segment type: Pure data
.data$r:0000EC7C ; Segment permissions: Read/Write
.data$r:0000EC7C _data$r         segment dword public 'DATA' use32
.data$r:0000EC7C                 assume cs:_data$r
.data$r:0000EC7C                 ;org 0EC7Ch
.data$r:0000EC7C ; COMDAT (pick any)
.data$r:0000EC7C                 public ??_R0?AV_Facet_base@std@@@8
.data$r:0000EC7C ; class std::_Facet_base `RTTI Type Descriptor'
.data$r:0000EC7C ??_R0?AV_Facet_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EC7C                                         ; DATA XREF: .rdata$r:0000EC74o
.data$r:0000EC7C                                         ; .rdata$r:std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EC7C                                         ; const type_info::`vftable'
.data$r:0000EC80                 db    0
.data$r:0000EC81                 db    0
.data$r:0000EC82                 db    0
.data$r:0000EC83                 db    0
.data$r:0000EC84                 db  2Eh ; .
.data$r:0000EC85                 db  3Fh ; ?
.data$r:0000EC86                 db  41h ; A
.data$r:0000EC87                 db  56h ; V
.data$r:0000EC88                 db  5Fh ; _
.data$r:0000EC89                 db  46h ; F
.data$r:0000EC8A                 db  61h ; a
.data$r:0000EC8B                 db  63h ; c
.data$r:0000EC8C                 db  65h ; e
.data$r:0000EC8D                 db  74h ; t
.data$r:0000EC8E                 db  5Fh ; _
.data$r:0000EC8F                 db  62h ; b
.data$r:0000EC90                 db  61h ; a
.data$r:0000EC91                 db  73h ; s
.data$r:0000EC92                 db  65h ; e
.data$r:0000EC93                 db  40h ; @
.data$r:0000EC94                 db  73h ; s
.data$r:0000EC95                 db  74h ; t
.data$r:0000EC96                 db  64h ; d
.data$r:0000EC97                 db  40h ; @
.data$r:0000EC98                 db  40h ; @
.data$r:0000EC99                 db    0
.data$r:0000EC9A                 align 4
.data$r:0000EC9A _data$r         ends
.data$r:0000EC9A
.rdata$r:0000EC9C ; ===========================================================================
.rdata$r:0000EC9C
.rdata$r:0000EC9C ; Segment type: Pure data
.rdata$r:0000EC9C ; Segment permissions: Read
.rdata$r:0000EC9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EC9C                 assume cs:_rdata$r
.rdata$r:0000EC9C                 ;org 0EC9Ch
.rdata$r:0000EC9C ; COMDAT (pick any)
.rdata$r:0000EC9C                 public ??_R3_Facet_base@std@@8
.rdata$r:0000EC9C ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EC9C ??_R3_Facet_base@std@@8 db    0         ; DATA XREF: .rdata$r:0000EC78o
.rdata$r:0000EC9C                                         ; .rdata$r:0000ECCCo
.rdata$r:0000EC9D                 db    0
.rdata$r:0000EC9E                 db    0
.rdata$r:0000EC9F                 db    0
.rdata$r:0000ECA0                 db    0
.rdata$r:0000ECA1                 db    0
.rdata$r:0000ECA2                 db    0
.rdata$r:0000ECA3                 db    0
.rdata$r:0000ECA4                 db    1
.rdata$r:0000ECA5                 db    0
.rdata$r:0000ECA6                 db    0
.rdata$r:0000ECA7                 db    0
.rdata$r:0000ECA8                 dd offset ??_R2_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000ECA8 _rdata$r        ends
.rdata$r:0000ECA8
.rdata$r:0000ECAC ; ===========================================================================
.rdata$r:0000ECAC
.rdata$r:0000ECAC ; Segment type: Pure data
.rdata$r:0000ECAC ; Segment permissions: Read
.rdata$r:0000ECAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ECAC                 assume cs:_rdata$r
.rdata$r:0000ECAC                 ;org 0ECACh
.rdata$r:0000ECAC ; COMDAT (pick any)
.rdata$r:0000ECAC                 public ??_R2_Facet_base@std@@8
.rdata$r:0000ECAC ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000ECAC ??_R2_Facet_base@std@@8 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000ECAC                                         ; DATA XREF: .rdata$r:0000ECA8o
.rdata$r:0000ECAC                                         ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ECB0                 db    0
.rdata$r:0000ECB1                 align 4
.rdata$r:0000ECB1 _rdata$r        ends
.rdata$r:0000ECB1
.rdata$r:0000ECB4 ; ===========================================================================
.rdata$r:0000ECB4
.rdata$r:0000ECB4 ; Segment type: Pure data
.rdata$r:0000ECB4 ; Segment permissions: Read
.rdata$r:0000ECB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ECB4                 assume cs:_rdata$r
.rdata$r:0000ECB4                 ;org 0ECB4h
.rdata$r:0000ECB4 ; COMDAT (pick any)
.rdata$r:0000ECB4                 public ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000ECB4 ; std::_Facet_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ECB4 ??_R1A@?0A@EA@_Facet_base@std@@8 dd offset ??_R0?AV_Facet_base@std@@@8
.rdata$r:0000ECB4                                         ; DATA XREF: .rdata$r:std::_Facet_base::`RTTI Base Class Array'o
.rdata$r:0000ECB4                                         ; .rdata$r:0000ED20o ...
.rdata$r:0000ECB4                                         ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000ECB8                 align 10h
.rdata$r:0000ECC0                 db 0FFh
.rdata$r:0000ECC1                 db 0FFh
.rdata$r:0000ECC2                 db 0FFh
.rdata$r:0000ECC3                 db 0FFh
.rdata$r:0000ECC4                 db    0
.rdata$r:0000ECC5                 db    0
.rdata$r:0000ECC6                 db    0
.rdata$r:0000ECC7                 db    0
.rdata$r:0000ECC8                 db  40h ; @
.rdata$r:0000ECC9                 db    0
.rdata$r:0000ECCA                 db    0
.rdata$r:0000ECCB                 db    0
.rdata$r:0000ECCC                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ECCC _rdata$r        ends
.rdata$r:0000ECCC
.rdata$r:0000ECD0 ; ===========================================================================
.rdata$r:0000ECD0
.rdata$r:0000ECD0 ; Segment type: Pure data
.rdata$r:0000ECD0 ; Segment permissions: Read
.rdata$r:0000ECD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ECD0                 assume cs:_rdata$r
.rdata$r:0000ECD0                 ;org 0ECD0h
.rdata$r:0000ECD0 ; COMDAT (pick any)
.rdata$r:0000ECD0                 public ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000ECD0 ; std::locale::facet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ECD0 ??_R1A@?0A@EA@facet@locale@std@@8 dd offset ??_R0?AVfacet@locale@std@@@8
.rdata$r:0000ECD0                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Array'o
.rdata$r:0000ECD0                                         ; .rdata$r:0000ED84o ...
.rdata$r:0000ECD0                                         ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000ECD4                 db    1
.rdata$r:0000ECD5                 db    0
.rdata$r:0000ECD6                 db    0
.rdata$r:0000ECD7                 db    0
.rdata$r:0000ECD8                 db    0
.rdata$r:0000ECD9                 db    0
.rdata$r:0000ECDA                 db    0
.rdata$r:0000ECDB                 db    0
.rdata$r:0000ECDC                 db 0FFh
.rdata$r:0000ECDD                 db 0FFh
.rdata$r:0000ECDE                 db 0FFh
.rdata$r:0000ECDF                 db 0FFh
.rdata$r:0000ECE0                 db    0
.rdata$r:0000ECE1                 db    0
.rdata$r:0000ECE2                 db    0
.rdata$r:0000ECE3                 db    0
.rdata$r:0000ECE4                 db  40h ; @
.rdata$r:0000ECE5                 db    0
.rdata$r:0000ECE6                 db    0
.rdata$r:0000ECE7                 db    0
.rdata$r:0000ECE8                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ECE8 _rdata$r        ends
.rdata$r:0000ECE8
.data$r:0000ECEC ; ===========================================================================
.data$r:0000ECEC
.data$r:0000ECEC ; Segment type: Pure data
.data$r:0000ECEC ; Segment permissions: Read/Write
.data$r:0000ECEC _data$r         segment dword public 'DATA' use32
.data$r:0000ECEC                 assume cs:_data$r
.data$r:0000ECEC                 ;org 0ECECh
.data$r:0000ECEC ; COMDAT (pick any)
.data$r:0000ECEC                 public ??_R0?AVfacet@locale@std@@@8
.data$r:0000ECEC ; class std::locale::facet `RTTI Type Descriptor'
.data$r:0000ECEC ??_R0?AVfacet@locale@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000ECEC                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000ECEC                                         ; .rdata$r:0000ED34o
.data$r:0000ECEC                                         ; const type_info::`vftable'
.data$r:0000ECF0                 db    0
.data$r:0000ECF1                 db    0
.data$r:0000ECF2                 db    0
.data$r:0000ECF3                 db    0
.data$r:0000ECF4                 db  2Eh ; .
.data$r:0000ECF5                 db  3Fh ; ?
.data$r:0000ECF6                 db  41h ; A
.data$r:0000ECF7                 db  56h ; V
.data$r:0000ECF8                 db  66h ; f
.data$r:0000ECF9                 db  61h ; a
.data$r:0000ECFA                 db  63h ; c
.data$r:0000ECFB                 db  65h ; e
.data$r:0000ECFC                 db  74h ; t
.data$r:0000ECFD                 db  40h ; @
.data$r:0000ECFE                 db  6Ch ; l
.data$r:0000ECFF                 db  6Fh ; o
.data$r:0000ED00                 db  63h ; c
.data$r:0000ED01                 db  61h ; a
.data$r:0000ED02                 db  6Ch ; l
.data$r:0000ED03                 db  65h ; e
.data$r:0000ED04                 db  40h ; @
.data$r:0000ED05                 db  73h ; s
.data$r:0000ED06                 db  74h ; t
.data$r:0000ED07                 db  64h ; d
.data$r:0000ED08                 db  40h ; @
.data$r:0000ED09                 db  40h ; @
.data$r:0000ED0A                 db    0
.data$r:0000ED0B                 align 4
.data$r:0000ED0B _data$r         ends
.data$r:0000ED0B
.rdata$r:0000ED0C ; ===========================================================================
.rdata$r:0000ED0C
.rdata$r:0000ED0C ; Segment type: Pure data
.rdata$r:0000ED0C ; Segment permissions: Read
.rdata$r:0000ED0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED0C                 assume cs:_rdata$r
.rdata$r:0000ED0C                 ;org 0ED0Ch
.rdata$r:0000ED0C ; COMDAT (pick any)
.rdata$r:0000ED0C                 public ??_R3facet@locale@std@@8
.rdata$r:0000ED0C ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ED0C ??_R3facet@locale@std@@8 db    0        ; DATA XREF: .rdata$r:0000ECE8o
.rdata$r:0000ED0C                                         ; .rdata$r:0000ED38o
.rdata$r:0000ED0D                 db    0
.rdata$r:0000ED0E                 db    0
.rdata$r:0000ED0F                 db    0
.rdata$r:0000ED10                 db    0
.rdata$r:0000ED11                 db    0
.rdata$r:0000ED12                 db    0
.rdata$r:0000ED13                 db    0
.rdata$r:0000ED14                 db    2
.rdata$r:0000ED15                 db    0
.rdata$r:0000ED16                 db    0
.rdata$r:0000ED17                 db    0
.rdata$r:0000ED18                 dd offset ??_R2facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000ED18 _rdata$r        ends
.rdata$r:0000ED18
.rdata$r:0000ED1C ; ===========================================================================
.rdata$r:0000ED1C
.rdata$r:0000ED1C ; Segment type: Pure data
.rdata$r:0000ED1C ; Segment permissions: Read
.rdata$r:0000ED1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED1C                 assume cs:_rdata$r
.rdata$r:0000ED1C                 ;org 0ED1Ch
.rdata$r:0000ED1C ; COMDAT (pick any)
.rdata$r:0000ED1C                 public ??_R2facet@locale@std@@8
.rdata$r:0000ED1C ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000ED1C ??_R2facet@locale@std@@8 dd offset ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000ED1C                                         ; DATA XREF: .rdata$r:0000ED18o
.rdata$r:0000ED1C                                         ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ED20                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ED24                 db    0
.rdata$r:0000ED25                 align 4
.rdata$r:0000ED25 _rdata$r        ends
.rdata$r:0000ED25
.rdata$r:0000ED28 ; ===========================================================================
.rdata$r:0000ED28
.rdata$r:0000ED28 ; Segment type: Pure data
.rdata$r:0000ED28 ; Segment permissions: Read
.rdata$r:0000ED28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED28                 assume cs:_rdata$r
.rdata$r:0000ED28                 ;org 0ED28h
.rdata$r:0000ED28 ; COMDAT (pick any)
.rdata$r:0000ED28                 public ??_R4facet@locale@std@@6B@
.rdata$r:0000ED28 ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata$r:0000ED28 ??_R4facet@locale@std@@6B@ db    0      ; DATA XREF: .rdata:0000E074o
.rdata$r:0000ED29                 db    0
.rdata$r:0000ED2A                 db    0
.rdata$r:0000ED2B                 db    0
.rdata$r:0000ED2C                 db    0
.rdata$r:0000ED2D                 db    0
.rdata$r:0000ED2E                 db    0
.rdata$r:0000ED2F                 db    0
.rdata$r:0000ED30                 db    0
.rdata$r:0000ED31                 db    0
.rdata$r:0000ED32                 db    0
.rdata$r:0000ED33                 db    0
.rdata$r:0000ED34                 dd offset ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000ED38                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ED38 _rdata$r        ends
.rdata$r:0000ED38
.rdata$r:0000ED3C ; ===========================================================================
.rdata$r:0000ED3C
.rdata$r:0000ED3C ; Segment type: Pure data
.rdata$r:0000ED3C ; Segment permissions: Read
.rdata$r:0000ED3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED3C                 assume cs:_rdata$r
.rdata$r:0000ED3C                 ;org 0ED3Ch
.rdata$r:0000ED3C ; COMDAT (pick any)
.rdata$r:0000ED3C                 public ??_R4ctype_base@std@@6B@
.rdata$r:0000ED3C ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata$r:0000ED3C ??_R4ctype_base@std@@6B@ db    0        ; DATA XREF: .rdata:0000E160o
.rdata$r:0000ED3D                 db    0
.rdata$r:0000ED3E                 db    0
.rdata$r:0000ED3F                 db    0
.rdata$r:0000ED40                 db    0
.rdata$r:0000ED41                 db    0
.rdata$r:0000ED42                 db    0
.rdata$r:0000ED43                 db    0
.rdata$r:0000ED44                 db    0
.rdata$r:0000ED45                 db    0
.rdata$r:0000ED46                 db    0
.rdata$r:0000ED47                 db    0
.rdata$r:0000ED48                 dd offset ??_R0?AUctype_base@std@@@8 ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000ED4C                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ED4C _rdata$r        ends
.rdata$r:0000ED4C
.data$r:0000ED50 ; ===========================================================================
.data$r:0000ED50
.data$r:0000ED50 ; Segment type: Pure data
.data$r:0000ED50 ; Segment permissions: Read/Write
.data$r:0000ED50 _data$r         segment dword public 'DATA' use32
.data$r:0000ED50                 assume cs:_data$r
.data$r:0000ED50                 ;org 0ED50h
.data$r:0000ED50 ; COMDAT (pick any)
.data$r:0000ED50                 public ??_R0?AUctype_base@std@@@8
.data$r:0000ED50 ; struct std::ctype_base `RTTI Type Descriptor'
.data$r:0000ED50 ??_R0?AUctype_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000ED50                                         ; DATA XREF: .rdata$r:0000ED48o
.data$r:0000ED50                                         ; .rdata$r:std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000ED50                                         ; const type_info::`vftable'
.data$r:0000ED54                 align 8
.data$r:0000ED58 a_?auctype_base db '.?AUctype_base@std@@',0
.data$r:0000ED6D                 align 10h
.data$r:0000ED6D _data$r         ends
.data$r:0000ED6D
.rdata$r:0000ED70 ; ===========================================================================
.rdata$r:0000ED70
.rdata$r:0000ED70 ; Segment type: Pure data
.rdata$r:0000ED70 ; Segment permissions: Read
.rdata$r:0000ED70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED70                 assume cs:_rdata$r
.rdata$r:0000ED70                 ;org 0ED70h
.rdata$r:0000ED70 ; COMDAT (pick any)
.rdata$r:0000ED70                 public ??_R3ctype_base@std@@8
.rdata$r:0000ED70 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ED70 ??_R3ctype_base@std@@8 db    0          ; DATA XREF: .rdata$r:0000ED4Co
.rdata$r:0000ED70                                         ; .rdata$r:0000EDA8o
.rdata$r:0000ED71                 db    0
.rdata$r:0000ED72                 db    0
.rdata$r:0000ED73                 db    0
.rdata$r:0000ED74                 db    0
.rdata$r:0000ED75                 db    0
.rdata$r:0000ED76                 db    0
.rdata$r:0000ED77                 db    0
.rdata$r:0000ED78                 db    3
.rdata$r:0000ED79                 db    0
.rdata$r:0000ED7A                 db    0
.rdata$r:0000ED7B                 db    0
.rdata$r:0000ED7C                 dd offset ??_R2ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000ED7C _rdata$r        ends
.rdata$r:0000ED7C
.rdata$r:0000ED80 ; ===========================================================================
.rdata$r:0000ED80
.rdata$r:0000ED80 ; Segment type: Pure data
.rdata$r:0000ED80 ; Segment permissions: Read
.rdata$r:0000ED80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED80                 assume cs:_rdata$r
.rdata$r:0000ED80                 ;org 0ED80h
.rdata$r:0000ED80 ; COMDAT (pick any)
.rdata$r:0000ED80                 public ??_R2ctype_base@std@@8
.rdata$r:0000ED80 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000ED80 ??_R2ctype_base@std@@8 dd offset ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000ED80                                         ; DATA XREF: .rdata$r:0000ED7Co
.rdata$r:0000ED80                                         ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ED84                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ED88                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ED8C                 db    0
.rdata$r:0000ED8D                 align 10h
.rdata$r:0000ED8D _rdata$r        ends
.rdata$r:0000ED8D
.rdata$r:0000ED90 ; ===========================================================================
.rdata$r:0000ED90
.rdata$r:0000ED90 ; Segment type: Pure data
.rdata$r:0000ED90 ; Segment permissions: Read
.rdata$r:0000ED90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ED90                 assume cs:_rdata$r
.rdata$r:0000ED90                 ;org 0ED90h
.rdata$r:0000ED90 ; COMDAT (pick any)
.rdata$r:0000ED90                 public ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000ED90 ; std::ctype_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ED90 ??_R1A@?0A@EA@ctype_base@std@@8 dd offset ??_R0?AUctype_base@std@@@8
.rdata$r:0000ED90                                         ; DATA XREF: .rdata$r:std::ctype_base::`RTTI Base Class Array'o
.rdata$r:0000ED90                                         ; .rdata$r:0000EDF4o
.rdata$r:0000ED90                                         ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000ED94                 db    2
.rdata$r:0000ED95                 db    0
.rdata$r:0000ED96                 db    0
.rdata$r:0000ED97                 db    0
.rdata$r:0000ED98                 db    0
.rdata$r:0000ED99                 db    0
.rdata$r:0000ED9A                 db    0
.rdata$r:0000ED9B                 db    0
.rdata$r:0000ED9C                 db 0FFh
.rdata$r:0000ED9D                 db 0FFh
.rdata$r:0000ED9E                 db 0FFh
.rdata$r:0000ED9F                 db 0FFh
.rdata$r:0000EDA0                 db    0
.rdata$r:0000EDA1                 db    0
.rdata$r:0000EDA2                 db    0
.rdata$r:0000EDA3                 db    0
.rdata$r:0000EDA4                 db  40h ; @
.rdata$r:0000EDA5                 db    0
.rdata$r:0000EDA6                 db    0
.rdata$r:0000EDA7                 db    0
.rdata$r:0000EDA8                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EDA8 _rdata$r        ends
.rdata$r:0000EDA8
.rdata$r:0000EDAC ; ===========================================================================
.rdata$r:0000EDAC
.rdata$r:0000EDAC ; Segment type: Pure data
.rdata$r:0000EDAC ; Segment permissions: Read
.rdata$r:0000EDAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EDAC                 assume cs:_rdata$r
.rdata$r:0000EDAC                 ;org 0EDACh
.rdata$r:0000EDAC ; COMDAT (pick any)
.rdata$r:0000EDAC                 public ??_R4?$ctype@_W@std@@6B@
.rdata$r:0000EDAC ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata$r:0000EDAC ??_R4?$ctype@_W@std@@6B@ db    0        ; DATA XREF: .rdata:0000E170o
.rdata$r:0000EDAD                 db    0
.rdata$r:0000EDAE                 db    0
.rdata$r:0000EDAF                 db    0
.rdata$r:0000EDB0                 db    0
.rdata$r:0000EDB1                 db    0
.rdata$r:0000EDB2                 db    0
.rdata$r:0000EDB3                 db    0
.rdata$r:0000EDB4                 db    0
.rdata$r:0000EDB5                 db    0
.rdata$r:0000EDB6                 db    0
.rdata$r:0000EDB7                 db    0
.rdata$r:0000EDB8                 dd offset ??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:0000EDBC                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EDBC _rdata$r        ends
.rdata$r:0000EDBC
.data$r:0000EDC0 ; ===========================================================================
.data$r:0000EDC0
.data$r:0000EDC0 ; Segment type: Pure data
.data$r:0000EDC0 ; Segment permissions: Read/Write
.data$r:0000EDC0 _data$r         segment dword public 'DATA' use32
.data$r:0000EDC0                 assume cs:_data$r
.data$r:0000EDC0                 ;org 0EDC0h
.data$r:0000EDC0 ; COMDAT (pick any)
.data$r:0000EDC0                 public ??_R0?AV?$ctype@_W@std@@@8
.data$r:0000EDC0 ; class std::ctype<wchar_t> `RTTI Type Descriptor'
.data$r:0000EDC0 ??_R0?AV?$ctype@_W@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EDC0                                         ; DATA XREF: .rdata$r:0000EDB8o
.data$r:0000EDC0                                         ; .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EDC0                                         ; const type_info::`vftable'
.data$r:0000EDC4                 align 8
.data$r:0000EDC8 a_?av?Ctype@_w@ db '.?AV?$ctype@_W@std@@',0
.data$r:0000EDDD                 align 10h
.data$r:0000EDDD _data$r         ends
.data$r:0000EDDD
.rdata$r:0000EDE0 ; ===========================================================================
.rdata$r:0000EDE0
.rdata$r:0000EDE0 ; Segment type: Pure data
.rdata$r:0000EDE0 ; Segment permissions: Read
.rdata$r:0000EDE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EDE0                 assume cs:_rdata$r
.rdata$r:0000EDE0                 ;org 0EDE0h
.rdata$r:0000EDE0 ; COMDAT (pick any)
.rdata$r:0000EDE0                 public ??_R3?$ctype@_W@std@@8
.rdata$r:0000EDE0 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EDE0 ??_R3?$ctype@_W@std@@8 db    0          ; DATA XREF: .rdata$r:0000EDBCo
.rdata$r:0000EDE0                                         ; .rdata$r:0000EE1Co
.rdata$r:0000EDE1                 db    0
.rdata$r:0000EDE2                 db    0
.rdata$r:0000EDE3                 db    0
.rdata$r:0000EDE4                 db    0
.rdata$r:0000EDE5                 db    0
.rdata$r:0000EDE6                 db    0
.rdata$r:0000EDE7                 db    0
.rdata$r:0000EDE8                 db    4
.rdata$r:0000EDE9                 db    0
.rdata$r:0000EDEA                 db    0
.rdata$r:0000EDEB                 db    0
.rdata$r:0000EDEC                 dd offset ??_R2?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:0000EDEC _rdata$r        ends
.rdata$r:0000EDEC
.rdata$r:0000EDF0 ; ===========================================================================
.rdata$r:0000EDF0
.rdata$r:0000EDF0 ; Segment type: Pure data
.rdata$r:0000EDF0 ; Segment permissions: Read
.rdata$r:0000EDF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EDF0                 assume cs:_rdata$r
.rdata$r:0000EDF0                 ;org 0EDF0h
.rdata$r:0000EDF0 ; COMDAT (pick any)
.rdata$r:0000EDF0                 public ??_R2?$ctype@_W@std@@8
.rdata$r:0000EDF0 ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:0000EDF0 ??_R2?$ctype@_W@std@@8 dd offset ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:0000EDF0                                         ; DATA XREF: .rdata$r:0000EDECo
.rdata$r:0000EDF0                                         ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EDF4                 dd offset ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EDF8                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EDFC                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EE00                 db    0
.rdata$r:0000EE01                 align 4
.rdata$r:0000EE01 _rdata$r        ends
.rdata$r:0000EE01
.rdata$r:0000EE04 ; ===========================================================================
.rdata$r:0000EE04
.rdata$r:0000EE04 ; Segment type: Pure data
.rdata$r:0000EE04 ; Segment permissions: Read
.rdata$r:0000EE04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE04                 assume cs:_rdata$r
.rdata$r:0000EE04                 ;org 0EE04h
.rdata$r:0000EE04 ; COMDAT (pick any)
.rdata$r:0000EE04                 public ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:0000EE04 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EE04 ??_R1A@?0A@EA@?$ctype@_W@std@@8 dd offset ??_R0?AV?$ctype@_W@std@@@8
.rdata$r:0000EE04                                         ; DATA XREF: .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Array'o
.rdata$r:0000EE04                                         ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:0000EE08                 db    3
.rdata$r:0000EE09                 db    0
.rdata$r:0000EE0A                 db    0
.rdata$r:0000EE0B                 db    0
.rdata$r:0000EE0C                 db    0
.rdata$r:0000EE0D                 db    0
.rdata$r:0000EE0E                 db    0
.rdata$r:0000EE0F                 db    0
.rdata$r:0000EE10                 db 0FFh
.rdata$r:0000EE11                 db 0FFh
.rdata$r:0000EE12                 db 0FFh
.rdata$r:0000EE13                 db 0FFh
.rdata$r:0000EE14                 db    0
.rdata$r:0000EE15                 db    0
.rdata$r:0000EE16                 db    0
.rdata$r:0000EE17                 db    0
.rdata$r:0000EE18                 db  40h ; @
.rdata$r:0000EE19                 db    0
.rdata$r:0000EE1A                 db    0
.rdata$r:0000EE1B                 db    0
.rdata$r:0000EE1C                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EE1C _rdata$r        ends
.rdata$r:0000EE1C
.rdata$r:0000EE20 ; ===========================================================================
.rdata$r:0000EE20
.rdata$r:0000EE20 ; Segment type: Pure data
.rdata$r:0000EE20 ; Segment permissions: Read
.rdata$r:0000EE20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE20                 assume cs:_rdata$r
.rdata$r:0000EE20                 ;org 0EE20h
.rdata$r:0000EE20 ; COMDAT (pick any)
.rdata$r:0000EE20                 public ??_R4error_category@std@@6B@
.rdata$r:0000EE20 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000EE20 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000E1B0o
.rdata$r:0000EE21                 db    0
.rdata$r:0000EE22                 db    0
.rdata$r:0000EE23                 db    0
.rdata$r:0000EE24                 db    0
.rdata$r:0000EE25                 db    0
.rdata$r:0000EE26                 db    0
.rdata$r:0000EE27                 db    0
.rdata$r:0000EE28                 db    0
.rdata$r:0000EE29                 db    0
.rdata$r:0000EE2A                 db    0
.rdata$r:0000EE2B                 db    0
.rdata$r:0000EE2C                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000EE30                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EE30 _rdata$r        ends
.rdata$r:0000EE30
.data$r:0000EE34 ; ===========================================================================
.data$r:0000EE34
.data$r:0000EE34 ; Segment type: Pure data
.data$r:0000EE34 ; Segment permissions: Read/Write
.data$r:0000EE34 _data$r         segment dword public 'DATA' use32
.data$r:0000EE34                 assume cs:_data$r
.data$r:0000EE34                 ;org 0EE34h
.data$r:0000EE34 ; COMDAT (pick any)
.data$r:0000EE34                 public ??_R0?AVerror_category@std@@@8
.data$r:0000EE34 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000EE34 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EE34                                         ; DATA XREF: .rdata$r:0000EE2Co
.data$r:0000EE34                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EE34                                         ; const type_info::`vftable'
.data$r:0000EE38                 db    0
.data$r:0000EE39                 db    0
.data$r:0000EE3A                 db    0
.data$r:0000EE3B                 db    0
.data$r:0000EE3C                 db  2Eh ; .
.data$r:0000EE3D                 db  3Fh ; ?
.data$r:0000EE3E                 db  41h ; A
.data$r:0000EE3F                 db  56h ; V
.data$r:0000EE40                 db  65h ; e
.data$r:0000EE41                 db  72h ; r
.data$r:0000EE42                 db  72h ; r
.data$r:0000EE43                 db  6Fh ; o
.data$r:0000EE44                 db  72h ; r
.data$r:0000EE45                 db  5Fh ; _
.data$r:0000EE46                 db  63h ; c
.data$r:0000EE47                 db  61h ; a
.data$r:0000EE48                 db  74h ; t
.data$r:0000EE49                 db  65h ; e
.data$r:0000EE4A                 db  67h ; g
.data$r:0000EE4B                 db  6Fh ; o
.data$r:0000EE4C                 db  72h ; r
.data$r:0000EE4D                 db  79h ; y
.data$r:0000EE4E                 db  40h ; @
.data$r:0000EE4F                 db  73h ; s
.data$r:0000EE50                 db  74h ; t
.data$r:0000EE51                 db  64h ; d
.data$r:0000EE52                 db  40h ; @
.data$r:0000EE53                 db  40h ; @
.data$r:0000EE54                 db    0
.data$r:0000EE55                 align 4
.data$r:0000EE55 _data$r         ends
.data$r:0000EE55
.rdata$r:0000EE58 ; ===========================================================================
.rdata$r:0000EE58
.rdata$r:0000EE58 ; Segment type: Pure data
.rdata$r:0000EE58 ; Segment permissions: Read
.rdata$r:0000EE58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE58                 assume cs:_rdata$r
.rdata$r:0000EE58                 ;org 0EE58h
.rdata$r:0000EE58 ; COMDAT (pick any)
.rdata$r:0000EE58                 public ??_R3error_category@std@@8
.rdata$r:0000EE58 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EE58 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000EE30o
.rdata$r:0000EE58                                         ; .rdata$r:0000EE88o
.rdata$r:0000EE59                 db    0
.rdata$r:0000EE5A                 db    0
.rdata$r:0000EE5B                 db    0
.rdata$r:0000EE5C                 db    0
.rdata$r:0000EE5D                 db    0
.rdata$r:0000EE5E                 db    0
.rdata$r:0000EE5F                 db    0
.rdata$r:0000EE60                 db    1
.rdata$r:0000EE61                 db    0
.rdata$r:0000EE62                 db    0
.rdata$r:0000EE63                 db    0
.rdata$r:0000EE64                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000EE64 _rdata$r        ends
.rdata$r:0000EE64
.rdata$r:0000EE68 ; ===========================================================================
.rdata$r:0000EE68
.rdata$r:0000EE68 ; Segment type: Pure data
.rdata$r:0000EE68 ; Segment permissions: Read
.rdata$r:0000EE68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE68                 assume cs:_rdata$r
.rdata$r:0000EE68                 ;org 0EE68h
.rdata$r:0000EE68 ; COMDAT (pick any)
.rdata$r:0000EE68                 public ??_R2error_category@std@@8
.rdata$r:0000EE68 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000EE68 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000EE68                                         ; DATA XREF: .rdata$r:0000EE64o
.rdata$r:0000EE68                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EE6C                 db    0
.rdata$r:0000EE6D                 align 10h
.rdata$r:0000EE6D _rdata$r        ends
.rdata$r:0000EE6D
.rdata$r:0000EE70 ; ===========================================================================
.rdata$r:0000EE70
.rdata$r:0000EE70 ; Segment type: Pure data
.rdata$r:0000EE70 ; Segment permissions: Read
.rdata$r:0000EE70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE70                 assume cs:_rdata$r
.rdata$r:0000EE70                 ;org 0EE70h
.rdata$r:0000EE70 ; COMDAT (pick any)
.rdata$r:0000EE70                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000EE70 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EE70 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000EE70                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000EE70                                         ; .rdata$r:0000EF84o ...
.rdata$r:0000EE70                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000EE74                 db    0
.rdata$r:0000EE75                 db    0
.rdata$r:0000EE76                 db    0
.rdata$r:0000EE77                 db    0
.rdata$r:0000EE78                 db    0
.rdata$r:0000EE79                 db    0
.rdata$r:0000EE7A                 db    0
.rdata$r:0000EE7B                 db    0
.rdata$r:0000EE7C                 db 0FFh
.rdata$r:0000EE7D                 db 0FFh
.rdata$r:0000EE7E                 db 0FFh
.rdata$r:0000EE7F                 db 0FFh
.rdata$r:0000EE80                 db    0
.rdata$r:0000EE81                 db    0
.rdata$r:0000EE82                 db    0
.rdata$r:0000EE83                 db    0
.rdata$r:0000EE84                 db  40h ; @
.rdata$r:0000EE85                 db    0
.rdata$r:0000EE86                 db    0
.rdata$r:0000EE87                 db    0
.rdata$r:0000EE88                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EE88 _rdata$r        ends
.rdata$r:0000EE88
.rdata$r:0000EE8C ; ===========================================================================
.rdata$r:0000EE8C
.rdata$r:0000EE8C ; Segment type: Pure data
.rdata$r:0000EE8C ; Segment permissions: Read
.rdata$r:0000EE8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EE8C                 assume cs:_rdata$r
.rdata$r:0000EE8C                 ;org 0EE8Ch
.rdata$r:0000EE8C ; COMDAT (pick any)
.rdata$r:0000EE8C                 public ??_R4_System_error@std@@6B@
.rdata$r:0000EE8C ; const std::_System_error::`RTTI Complete Object Locator'
.rdata$r:0000EE8C ??_R4_System_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000E1CCo
.rdata$r:0000EE8D                 db    0
.rdata$r:0000EE8E                 db    0
.rdata$r:0000EE8F                 db    0
.rdata$r:0000EE90                 db    0
.rdata$r:0000EE91                 db    0
.rdata$r:0000EE92                 db    0
.rdata$r:0000EE93                 db    0
.rdata$r:0000EE94                 db    0
.rdata$r:0000EE95                 db    0
.rdata$r:0000EE96                 db    0
.rdata$r:0000EE97                 db    0
.rdata$r:0000EE98                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000EE9C                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EE9C _rdata$r        ends
.rdata$r:0000EE9C
.rdata$r:0000EEA0 ; ===========================================================================
.rdata$r:0000EEA0
.rdata$r:0000EEA0 ; Segment type: Pure data
.rdata$r:0000EEA0 ; Segment permissions: Read
.rdata$r:0000EEA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EEA0                 assume cs:_rdata$r
.rdata$r:0000EEA0                 ;org 0EEA0h
.rdata$r:0000EEA0 ; COMDAT (pick any)
.rdata$r:0000EEA0                 public ??_R3_System_error@std@@8
.rdata$r:0000EEA0 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EEA0 ??_R3_System_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000EE9Co
.rdata$r:0000EEA0                                         ; .rdata$r:0000EED8o
.rdata$r:0000EEA1                 db    0
.rdata$r:0000EEA2                 db    0
.rdata$r:0000EEA3                 db    0
.rdata$r:0000EEA4                 db    0
.rdata$r:0000EEA5                 db    0
.rdata$r:0000EEA6                 db    0
.rdata$r:0000EEA7                 db    0
.rdata$r:0000EEA8                 db    3
.rdata$r:0000EEA9                 db    0
.rdata$r:0000EEAA                 db    0
.rdata$r:0000EEAB                 db    0
.rdata$r:0000EEAC                 dd offset ??_R2_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000EEAC _rdata$r        ends
.rdata$r:0000EEAC
.rdata$r:0000EEB0 ; ===========================================================================
.rdata$r:0000EEB0
.rdata$r:0000EEB0 ; Segment type: Pure data
.rdata$r:0000EEB0 ; Segment permissions: Read
.rdata$r:0000EEB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EEB0                 assume cs:_rdata$r
.rdata$r:0000EEB0                 ;org 0EEB0h
.rdata$r:0000EEB0 ; COMDAT (pick any)
.rdata$r:0000EEB0                 public ??_R2_System_error@std@@8
.rdata$r:0000EEB0 ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000EEB0 ??_R2_System_error@std@@8 dd offset ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000EEB0                                         ; DATA XREF: .rdata$r:0000EEACo
.rdata$r:0000EEB0                                         ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EEB4                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EEB8                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EEBC                 db    0
.rdata$r:0000EEBD                 align 10h
.rdata$r:0000EEBD _rdata$r        ends
.rdata$r:0000EEBD
.rdata$r:0000EEC0 ; ===========================================================================
.rdata$r:0000EEC0
.rdata$r:0000EEC0 ; Segment type: Pure data
.rdata$r:0000EEC0 ; Segment permissions: Read
.rdata$r:0000EEC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EEC0                 assume cs:_rdata$r
.rdata$r:0000EEC0                 ;org 0EEC0h
.rdata$r:0000EEC0 ; COMDAT (pick any)
.rdata$r:0000EEC0                 public ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000EEC0 ; std::_System_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EEC0 ??_R1A@?0A@EA@_System_error@std@@8 dd offset ??_R0?AV_System_error@std@@@8
.rdata$r:0000EEC0                                         ; DATA XREF: .rdata$r:std::_System_error::`RTTI Base Class Array'o
.rdata$r:0000EEC0                                         ; .rdata$r:0000EF04o ...
.rdata$r:0000EEC0                                         ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000EEC4                 db    2
.rdata$r:0000EEC5                 db    0
.rdata$r:0000EEC6                 db    0
.rdata$r:0000EEC7                 db    0
.rdata$r:0000EEC8                 db    0
.rdata$r:0000EEC9                 db    0
.rdata$r:0000EECA                 db    0
.rdata$r:0000EECB                 db    0
.rdata$r:0000EECC                 db 0FFh
.rdata$r:0000EECD                 db 0FFh
.rdata$r:0000EECE                 db 0FFh
.rdata$r:0000EECF                 db 0FFh
.rdata$r:0000EED0                 db    0
.rdata$r:0000EED1                 db    0
.rdata$r:0000EED2                 db    0
.rdata$r:0000EED3                 db    0
.rdata$r:0000EED4                 db  40h ; @
.rdata$r:0000EED5                 db    0
.rdata$r:0000EED6                 db    0
.rdata$r:0000EED7                 db    0
.rdata$r:0000EED8                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EED8 _rdata$r        ends
.rdata$r:0000EED8
.rdata$r:0000EEDC ; ===========================================================================
.rdata$r:0000EEDC
.rdata$r:0000EEDC ; Segment type: Pure data
.rdata$r:0000EEDC ; Segment permissions: Read
.rdata$r:0000EEDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EEDC                 assume cs:_rdata$r
.rdata$r:0000EEDC                 ;org 0EEDCh
.rdata$r:0000EEDC ; COMDAT (pick any)
.rdata$r:0000EEDC                 public ??_R4system_error@std@@6B@
.rdata$r:0000EEDC ; const std::system_error::`RTTI Complete Object Locator'
.rdata$r:0000EEDC ??_R4system_error@std@@6B@ db    0      ; DATA XREF: .rdata:0000E1DCo
.rdata$r:0000EEDD                 db    0
.rdata$r:0000EEDE                 db    0
.rdata$r:0000EEDF                 db    0
.rdata$r:0000EEE0                 db    0
.rdata$r:0000EEE1                 db    0
.rdata$r:0000EEE2                 db    0
.rdata$r:0000EEE3                 db    0
.rdata$r:0000EEE4                 db    0
.rdata$r:0000EEE5                 db    0
.rdata$r:0000EEE6                 db    0
.rdata$r:0000EEE7                 db    0
.rdata$r:0000EEE8                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000EEEC                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EEEC _rdata$r        ends
.rdata$r:0000EEEC
.rdata$r:0000EEF0 ; ===========================================================================
.rdata$r:0000EEF0
.rdata$r:0000EEF0 ; Segment type: Pure data
.rdata$r:0000EEF0 ; Segment permissions: Read
.rdata$r:0000EEF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EEF0                 assume cs:_rdata$r
.rdata$r:0000EEF0                 ;org 0EEF0h
.rdata$r:0000EEF0 ; COMDAT (pick any)
.rdata$r:0000EEF0                 public ??_R3system_error@std@@8
.rdata$r:0000EEF0 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EEF0 ??_R3system_error@std@@8 db    0        ; DATA XREF: .rdata$r:0000EEECo
.rdata$r:0000EEF0                                         ; .rdata$r:0000EF2Co
.rdata$r:0000EEF1                 db    0
.rdata$r:0000EEF2                 db    0
.rdata$r:0000EEF3                 db    0
.rdata$r:0000EEF4                 db    0
.rdata$r:0000EEF5                 db    0
.rdata$r:0000EEF6                 db    0
.rdata$r:0000EEF7                 db    0
.rdata$r:0000EEF8                 db    4
.rdata$r:0000EEF9                 db    0
.rdata$r:0000EEFA                 db    0
.rdata$r:0000EEFB                 db    0
.rdata$r:0000EEFC                 dd offset ??_R2system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000EEFC _rdata$r        ends
.rdata$r:0000EEFC
.rdata$r:0000EF00 ; ===========================================================================
.rdata$r:0000EF00
.rdata$r:0000EF00 ; Segment type: Pure data
.rdata$r:0000EF00 ; Segment permissions: Read
.rdata$r:0000EF00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF00                 assume cs:_rdata$r
.rdata$r:0000EF00                 ;org 0EF00h
.rdata$r:0000EF00 ; COMDAT (pick any)
.rdata$r:0000EF00                 public ??_R2system_error@std@@8
.rdata$r:0000EF00 ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000EF00 ??_R2system_error@std@@8 dd offset ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000EF00                                         ; DATA XREF: .rdata$r:0000EEFCo
.rdata$r:0000EF00                                         ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF04                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF08                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF0C                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF10                 db    0
.rdata$r:0000EF11                 align 4
.rdata$r:0000EF11 _rdata$r        ends
.rdata$r:0000EF11
.rdata$r:0000EF14 ; ===========================================================================
.rdata$r:0000EF14
.rdata$r:0000EF14 ; Segment type: Pure data
.rdata$r:0000EF14 ; Segment permissions: Read
.rdata$r:0000EF14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF14                 assume cs:_rdata$r
.rdata$r:0000EF14                 ;org 0EF14h
.rdata$r:0000EF14 ; COMDAT (pick any)
.rdata$r:0000EF14                 public ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000EF14 ; std::system_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EF14 ??_R1A@?0A@EA@system_error@std@@8 dd offset ??_R0?AVsystem_error@std@@@8
.rdata$r:0000EF14                                         ; DATA XREF: .rdata$r:std::system_error::`RTTI Base Class Array'o
.rdata$r:0000EF14                                         ; .rdata$r:0000F0C8o
.rdata$r:0000EF14                                         ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000EF18                 db    3
.rdata$r:0000EF19                 db    0
.rdata$r:0000EF1A                 db    0
.rdata$r:0000EF1B                 db    0
.rdata$r:0000EF1C                 db    0
.rdata$r:0000EF1D                 db    0
.rdata$r:0000EF1E                 db    0
.rdata$r:0000EF1F                 db    0
.rdata$r:0000EF20                 db 0FFh
.rdata$r:0000EF21                 db 0FFh
.rdata$r:0000EF22                 db 0FFh
.rdata$r:0000EF23                 db 0FFh
.rdata$r:0000EF24                 db    0
.rdata$r:0000EF25                 db    0
.rdata$r:0000EF26                 db    0
.rdata$r:0000EF27                 db    0
.rdata$r:0000EF28                 db  40h ; @
.rdata$r:0000EF29                 db    0
.rdata$r:0000EF2A                 db    0
.rdata$r:0000EF2B                 db    0
.rdata$r:0000EF2C                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EF2C _rdata$r        ends
.rdata$r:0000EF2C
.rdata$r:0000EF30 ; ===========================================================================
.rdata$r:0000EF30
.rdata$r:0000EF30 ; Segment type: Pure data
.rdata$r:0000EF30 ; Segment permissions: Read
.rdata$r:0000EF30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF30                 assume cs:_rdata$r
.rdata$r:0000EF30                 ;org 0EF30h
.rdata$r:0000EF30 ; COMDAT (pick any)
.rdata$r:0000EF30                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000EF30 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000EF30 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000EF30                                         ; DATA XREF: .rdata:0000E1E8o
.rdata$r:0000EF31                 db    0
.rdata$r:0000EF32                 db    0
.rdata$r:0000EF33                 db    0
.rdata$r:0000EF34                 db    0
.rdata$r:0000EF35                 db    0
.rdata$r:0000EF36                 db    0
.rdata$r:0000EF37                 db    0
.rdata$r:0000EF38                 db    0
.rdata$r:0000EF39                 db    0
.rdata$r:0000EF3A                 db    0
.rdata$r:0000EF3B                 db    0
.rdata$r:0000EF3C                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000EF40                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EF40 _rdata$r        ends
.rdata$r:0000EF40
.data$r:0000EF44 ; ===========================================================================
.data$r:0000EF44
.data$r:0000EF44 ; Segment type: Pure data
.data$r:0000EF44 ; Segment permissions: Read/Write
.data$r:0000EF44 _data$r         segment dword public 'DATA' use32
.data$r:0000EF44                 assume cs:_data$r
.data$r:0000EF44                 ;org 0EF44h
.data$r:0000EF44 ; COMDAT (pick any)
.data$r:0000EF44                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000EF44 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000EF44 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EF44                                         ; DATA XREF: .rdata$r:0000EF3Co
.data$r:0000EF44                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EF44                                         ; const type_info::`vftable'
.data$r:0000EF48                 db    0
.data$r:0000EF49                 db    0
.data$r:0000EF4A                 db    0
.data$r:0000EF4B                 db    0
.data$r:0000EF4C                 db  2Eh ; .
.data$r:0000EF4D                 db  3Fh ; ?
.data$r:0000EF4E                 db  41h ; A
.data$r:0000EF4F                 db  56h ; V
.data$r:0000EF50                 db  5Fh ; _
.data$r:0000EF51                 db  47h ; G
.data$r:0000EF52                 db  65h ; e
.data$r:0000EF53                 db  6Eh ; n
.data$r:0000EF54                 db  65h ; e
.data$r:0000EF55                 db  72h ; r
.data$r:0000EF56                 db  69h ; i
.data$r:0000EF57                 db  63h ; c
.data$r:0000EF58                 db  5Fh ; _
.data$r:0000EF59                 db  65h ; e
.data$r:0000EF5A                 db  72h ; r
.data$r:0000EF5B                 db  72h ; r
.data$r:0000EF5C                 db  6Fh ; o
.data$r:0000EF5D                 db  72h ; r
.data$r:0000EF5E                 db  5Fh ; _
.data$r:0000EF5F                 db  63h ; c
.data$r:0000EF60                 db  61h ; a
.data$r:0000EF61                 db  74h ; t
.data$r:0000EF62                 db  65h ; e
.data$r:0000EF63                 db  67h ; g
.data$r:0000EF64                 db  6Fh ; o
.data$r:0000EF65                 db  72h ; r
.data$r:0000EF66                 db  79h ; y
.data$r:0000EF67                 db  40h ; @
.data$r:0000EF68                 db  73h ; s
.data$r:0000EF69                 db  74h ; t
.data$r:0000EF6A                 db  64h ; d
.data$r:0000EF6B                 db  40h ; @
.data$r:0000EF6C                 db  40h ; @
.data$r:0000EF6D                 db    0
.data$r:0000EF6E                 align 10h
.data$r:0000EF6E _data$r         ends
.data$r:0000EF6E
.rdata$r:0000EF70 ; ===========================================================================
.rdata$r:0000EF70
.rdata$r:0000EF70 ; Segment type: Pure data
.rdata$r:0000EF70 ; Segment permissions: Read
.rdata$r:0000EF70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF70                 assume cs:_rdata$r
.rdata$r:0000EF70                 ;org 0EF70h
.rdata$r:0000EF70 ; COMDAT (pick any)
.rdata$r:0000EF70                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000EF70 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EF70 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000EF70                                         ; DATA XREF: .rdata$r:0000EF40o
.rdata$r:0000EF70                                         ; .rdata$r:0000EFA4o
.rdata$r:0000EF71                 db    0
.rdata$r:0000EF72                 db    0
.rdata$r:0000EF73                 db    0
.rdata$r:0000EF74                 db    0
.rdata$r:0000EF75                 db    0
.rdata$r:0000EF76                 db    0
.rdata$r:0000EF77                 db    0
.rdata$r:0000EF78                 db    2
.rdata$r:0000EF79                 db    0
.rdata$r:0000EF7A                 db    0
.rdata$r:0000EF7B                 db    0
.rdata$r:0000EF7C                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000EF7C _rdata$r        ends
.rdata$r:0000EF7C
.rdata$r:0000EF80 ; ===========================================================================
.rdata$r:0000EF80
.rdata$r:0000EF80 ; Segment type: Pure data
.rdata$r:0000EF80 ; Segment permissions: Read
.rdata$r:0000EF80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF80                 assume cs:_rdata$r
.rdata$r:0000EF80                 ;org 0EF80h
.rdata$r:0000EF80 ; COMDAT (pick any)
.rdata$r:0000EF80                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000EF80 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000EF80 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000EF80                                         ; DATA XREF: .rdata$r:0000EF7Co
.rdata$r:0000EF80                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF84                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EF88                 db    0
.rdata$r:0000EF89                 align 4
.rdata$r:0000EF89 _rdata$r        ends
.rdata$r:0000EF89
.rdata$r:0000EF8C ; ===========================================================================
.rdata$r:0000EF8C
.rdata$r:0000EF8C ; Segment type: Pure data
.rdata$r:0000EF8C ; Segment permissions: Read
.rdata$r:0000EF8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF8C                 assume cs:_rdata$r
.rdata$r:0000EF8C                 ;org 0EF8Ch
.rdata$r:0000EF8C ; COMDAT (pick any)
.rdata$r:0000EF8C                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000EF8C ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EF8C ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000EF8C                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000EF8C                                         ; .rdata$r:0000EFFCo ...
.rdata$r:0000EF8C                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000EF90                 db    1
.rdata$r:0000EF91                 db    0
.rdata$r:0000EF92                 db    0
.rdata$r:0000EF93                 db    0
.rdata$r:0000EF94                 db    0
.rdata$r:0000EF95                 db    0
.rdata$r:0000EF96                 db    0
.rdata$r:0000EF97                 db    0
.rdata$r:0000EF98                 db 0FFh
.rdata$r:0000EF99                 db 0FFh
.rdata$r:0000EF9A                 db 0FFh
.rdata$r:0000EF9B                 db 0FFh
.rdata$r:0000EF9C                 db    0
.rdata$r:0000EF9D                 db    0
.rdata$r:0000EF9E                 db    0
.rdata$r:0000EF9F                 db    0
.rdata$r:0000EFA0                 db  40h ; @
.rdata$r:0000EFA1                 db    0
.rdata$r:0000EFA2                 db    0
.rdata$r:0000EFA3                 db    0
.rdata$r:0000EFA4                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EFA4 _rdata$r        ends
.rdata$r:0000EFA4
.rdata$r:0000EFA8 ; ===========================================================================
.rdata$r:0000EFA8
.rdata$r:0000EFA8 ; Segment type: Pure data
.rdata$r:0000EFA8 ; Segment permissions: Read
.rdata$r:0000EFA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFA8                 assume cs:_rdata$r
.rdata$r:0000EFA8                 ;org 0EFA8h
.rdata$r:0000EFA8 ; COMDAT (pick any)
.rdata$r:0000EFA8                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000EFA8 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000EFA8 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000EFA8                                         ; DATA XREF: .rdata:0000E21Co
.rdata$r:0000EFA9                 db    0
.rdata$r:0000EFAA                 db    0
.rdata$r:0000EFAB                 db    0
.rdata$r:0000EFAC                 db    0
.rdata$r:0000EFAD                 db    0
.rdata$r:0000EFAE                 db    0
.rdata$r:0000EFAF                 db    0
.rdata$r:0000EFB0                 db    0
.rdata$r:0000EFB1                 db    0
.rdata$r:0000EFB2                 db    0
.rdata$r:0000EFB3                 db    0
.rdata$r:0000EFB4                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000EFB8                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EFB8 _rdata$r        ends
.rdata$r:0000EFB8
.data$r:0000EFBC ; ===========================================================================
.data$r:0000EFBC
.data$r:0000EFBC ; Segment type: Pure data
.data$r:0000EFBC ; Segment permissions: Read/Write
.data$r:0000EFBC _data$r         segment dword public 'DATA' use32
.data$r:0000EFBC                 assume cs:_data$r
.data$r:0000EFBC                 ;org 0EFBCh
.data$r:0000EFBC ; COMDAT (pick any)
.data$r:0000EFBC                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000EFBC ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000EFBC ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000EFBC                                         ; DATA XREF: .rdata$r:0000EFB4o
.data$r:0000EFBC                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000EFBC                                         ; const type_info::`vftable'
.data$r:0000EFC0                 db    0
.data$r:0000EFC1                 db    0
.data$r:0000EFC2                 db    0
.data$r:0000EFC3                 db    0
.data$r:0000EFC4                 db  2Eh ; .
.data$r:0000EFC5                 db  3Fh ; ?
.data$r:0000EFC6                 db  41h ; A
.data$r:0000EFC7                 db  56h ; V
.data$r:0000EFC8                 db  5Fh ; _
.data$r:0000EFC9                 db  49h ; I
.data$r:0000EFCA                 db  6Fh ; o
.data$r:0000EFCB                 db  73h ; s
.data$r:0000EFCC                 db  74h ; t
.data$r:0000EFCD                 db  72h ; r
.data$r:0000EFCE                 db  65h ; e
.data$r:0000EFCF                 db  61h ; a
.data$r:0000EFD0                 db  6Dh ; m
.data$r:0000EFD1                 db  5Fh ; _
.data$r:0000EFD2                 db  65h ; e
.data$r:0000EFD3                 db  72h ; r
.data$r:0000EFD4                 db  72h ; r
.data$r:0000EFD5                 db  6Fh ; o
.data$r:0000EFD6                 db  72h ; r
.data$r:0000EFD7                 db  5Fh ; _
.data$r:0000EFD8                 db  63h ; c
.data$r:0000EFD9                 db  61h ; a
.data$r:0000EFDA                 db  74h ; t
.data$r:0000EFDB                 db  65h ; e
.data$r:0000EFDC                 db  67h ; g
.data$r:0000EFDD                 db  6Fh ; o
.data$r:0000EFDE                 db  72h ; r
.data$r:0000EFDF                 db  79h ; y
.data$r:0000EFE0                 db  40h ; @
.data$r:0000EFE1                 db  73h ; s
.data$r:0000EFE2                 db  74h ; t
.data$r:0000EFE3                 db  64h ; d
.data$r:0000EFE4                 db  40h ; @
.data$r:0000EFE5                 db  40h ; @
.data$r:0000EFE6                 db    0
.data$r:0000EFE7                 align 4
.data$r:0000EFE7 _data$r         ends
.data$r:0000EFE7
.rdata$r:0000EFE8 ; ===========================================================================
.rdata$r:0000EFE8
.rdata$r:0000EFE8 ; Segment type: Pure data
.rdata$r:0000EFE8 ; Segment permissions: Read
.rdata$r:0000EFE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFE8                 assume cs:_rdata$r
.rdata$r:0000EFE8                 ;org 0EFE8h
.rdata$r:0000EFE8 ; COMDAT (pick any)
.rdata$r:0000EFE8                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000EFE8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EFE8 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000EFE8                                         ; DATA XREF: .rdata$r:0000EFB8o
.rdata$r:0000EFE8                                         ; .rdata$r:0000F020o
.rdata$r:0000EFE9                 db    0
.rdata$r:0000EFEA                 db    0
.rdata$r:0000EFEB                 db    0
.rdata$r:0000EFEC                 db    0
.rdata$r:0000EFED                 db    0
.rdata$r:0000EFEE                 db    0
.rdata$r:0000EFEF                 db    0
.rdata$r:0000EFF0                 db    3
.rdata$r:0000EFF1                 db    0
.rdata$r:0000EFF2                 db    0
.rdata$r:0000EFF3                 db    0
.rdata$r:0000EFF4                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000EFF4 _rdata$r        ends
.rdata$r:0000EFF4
.rdata$r:0000EFF8 ; ===========================================================================
.rdata$r:0000EFF8
.rdata$r:0000EFF8 ; Segment type: Pure data
.rdata$r:0000EFF8 ; Segment permissions: Read
.rdata$r:0000EFF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFF8                 assume cs:_rdata$r
.rdata$r:0000EFF8                 ;org 0EFF8h
.rdata$r:0000EFF8 ; COMDAT (pick any)
.rdata$r:0000EFF8                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000EFF8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000EFF8 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000EFF8                                         ; DATA XREF: .rdata$r:0000EFF4o
.rdata$r:0000EFF8                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EFFC                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F000                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F004                 db    0
.rdata$r:0000F005                 align 4
.rdata$r:0000F005 _rdata$r        ends
.rdata$r:0000F005
.rdata$r:0000F008 ; ===========================================================================
.rdata$r:0000F008
.rdata$r:0000F008 ; Segment type: Pure data
.rdata$r:0000F008 ; Segment permissions: Read
.rdata$r:0000F008 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F008                 assume cs:_rdata$r
.rdata$r:0000F008                 ;org 0F008h
.rdata$r:0000F008 ; COMDAT (pick any)
.rdata$r:0000F008                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000F008 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F008 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000F008                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000F008                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000F00C                 db    2
.rdata$r:0000F00D                 db    0
.rdata$r:0000F00E                 db    0
.rdata$r:0000F00F                 db    0
.rdata$r:0000F010                 db    0
.rdata$r:0000F011                 db    0
.rdata$r:0000F012                 db    0
.rdata$r:0000F013                 db    0
.rdata$r:0000F014                 db 0FFh
.rdata$r:0000F015                 db 0FFh
.rdata$r:0000F016                 db 0FFh
.rdata$r:0000F017                 db 0FFh
.rdata$r:0000F018                 db    0
.rdata$r:0000F019                 db    0
.rdata$r:0000F01A                 db    0
.rdata$r:0000F01B                 db    0
.rdata$r:0000F01C                 db  40h ; @
.rdata$r:0000F01D                 db    0
.rdata$r:0000F01E                 db    0
.rdata$r:0000F01F                 db    0
.rdata$r:0000F020                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F020 _rdata$r        ends
.rdata$r:0000F020
.rdata$r:0000F024 ; ===========================================================================
.rdata$r:0000F024
.rdata$r:0000F024 ; Segment type: Pure data
.rdata$r:0000F024 ; Segment permissions: Read
.rdata$r:0000F024 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F024                 assume cs:_rdata$r
.rdata$r:0000F024                 ;org 0F024h
.rdata$r:0000F024 ; COMDAT (pick any)
.rdata$r:0000F024                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000F024 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000F024 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000E25Co
.rdata$r:0000F025                 db    0
.rdata$r:0000F026                 db    0
.rdata$r:0000F027                 db    0
.rdata$r:0000F028                 db    0
.rdata$r:0000F029                 db    0
.rdata$r:0000F02A                 db    0
.rdata$r:0000F02B                 db    0
.rdata$r:0000F02C                 db    0
.rdata$r:0000F02D                 db    0
.rdata$r:0000F02E                 db    0
.rdata$r:0000F02F                 db    0
.rdata$r:0000F030                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000F034                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F034 _rdata$r        ends
.rdata$r:0000F034
.data$r:0000F038 ; ===========================================================================
.data$r:0000F038
.data$r:0000F038 ; Segment type: Pure data
.data$r:0000F038 ; Segment permissions: Read/Write
.data$r:0000F038 _data$r         segment dword public 'DATA' use32
.data$r:0000F038                 assume cs:_data$r
.data$r:0000F038                 ;org 0F038h
.data$r:0000F038 ; COMDAT (pick any)
.data$r:0000F038                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000F038 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000F038 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F038                                         ; DATA XREF: .rdata$r:0000F030o
.data$r:0000F038                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F038                                         ; const type_info::`vftable'
.data$r:0000F03C                 align 10h
.data$r:0000F040 a_?av_system_er db '.?AV_System_error_category@std@@',0
.data$r:0000F061                 align 4
.data$r:0000F061 _data$r         ends
.data$r:0000F061
.rdata$r:0000F064 ; ===========================================================================
.rdata$r:0000F064
.rdata$r:0000F064 ; Segment type: Pure data
.rdata$r:0000F064 ; Segment permissions: Read
.rdata$r:0000F064 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F064                 assume cs:_rdata$r
.rdata$r:0000F064                 ;org 0F064h
.rdata$r:0000F064 ; COMDAT (pick any)
.rdata$r:0000F064                 public ??_R3_System_error_category@std@@8
.rdata$r:0000F064 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F064 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000F034o
.rdata$r:0000F064                                         ; .rdata$r:0000F09Co
.rdata$r:0000F065                 db    0
.rdata$r:0000F066                 db    0
.rdata$r:0000F067                 db    0
.rdata$r:0000F068                 db    0
.rdata$r:0000F069                 db    0
.rdata$r:0000F06A                 db    0
.rdata$r:0000F06B                 db    0
.rdata$r:0000F06C                 db    3
.rdata$r:0000F06D                 db    0
.rdata$r:0000F06E                 db    0
.rdata$r:0000F06F                 db    0
.rdata$r:0000F070                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000F070 _rdata$r        ends
.rdata$r:0000F070
.rdata$r:0000F074 ; ===========================================================================
.rdata$r:0000F074
.rdata$r:0000F074 ; Segment type: Pure data
.rdata$r:0000F074 ; Segment permissions: Read
.rdata$r:0000F074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F074                 assume cs:_rdata$r
.rdata$r:0000F074                 ;org 0F074h
.rdata$r:0000F074 ; COMDAT (pick any)
.rdata$r:0000F074                 public ??_R2_System_error_category@std@@8
.rdata$r:0000F074 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000F074 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000F074                                         ; DATA XREF: .rdata$r:0000F070o
.rdata$r:0000F074                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F078                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F07C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F080                 db    0
.rdata$r:0000F081                 align 4
.rdata$r:0000F081 _rdata$r        ends
.rdata$r:0000F081
.rdata$r:0000F084 ; ===========================================================================
.rdata$r:0000F084
.rdata$r:0000F084 ; Segment type: Pure data
.rdata$r:0000F084 ; Segment permissions: Read
.rdata$r:0000F084 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F084                 assume cs:_rdata$r
.rdata$r:0000F084                 ;org 0F084h
.rdata$r:0000F084 ; COMDAT (pick any)
.rdata$r:0000F084                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000F084 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F084 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000F084                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000F084                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000F088                 db    2
.rdata$r:0000F089                 db    0
.rdata$r:0000F08A                 db    0
.rdata$r:0000F08B                 db    0
.rdata$r:0000F08C                 db    0
.rdata$r:0000F08D                 db    0
.rdata$r:0000F08E                 db    0
.rdata$r:0000F08F                 db    0
.rdata$r:0000F090                 db 0FFh
.rdata$r:0000F091                 db 0FFh
.rdata$r:0000F092                 db 0FFh
.rdata$r:0000F093                 db 0FFh
.rdata$r:0000F094                 db    0
.rdata$r:0000F095                 db    0
.rdata$r:0000F096                 db    0
.rdata$r:0000F097                 db    0
.rdata$r:0000F098                 db  40h ; @
.rdata$r:0000F099                 db    0
.rdata$r:0000F09A                 db    0
.rdata$r:0000F09B                 db    0
.rdata$r:0000F09C                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F09C _rdata$r        ends
.rdata$r:0000F09C
.rdata$r:0000F0A0 ; ===========================================================================
.rdata$r:0000F0A0
.rdata$r:0000F0A0 ; Segment type: Pure data
.rdata$r:0000F0A0 ; Segment permissions: Read
.rdata$r:0000F0A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0A0                 assume cs:_rdata$r
.rdata$r:0000F0A0                 ;org 0F0A0h
.rdata$r:0000F0A0 ; COMDAT (pick any)
.rdata$r:0000F0A0                 public ??_R4failure@ios_base@std@@6B@
.rdata$r:0000F0A0 ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata$r:0000F0A0 ??_R4failure@ios_base@std@@6B@ db    0  ; DATA XREF: .rdata:0000E28Co
.rdata$r:0000F0A1                 db    0
.rdata$r:0000F0A2                 db    0
.rdata$r:0000F0A3                 db    0
.rdata$r:0000F0A4                 db    0
.rdata$r:0000F0A5                 db    0
.rdata$r:0000F0A6                 db    0
.rdata$r:0000F0A7                 db    0
.rdata$r:0000F0A8                 db    0
.rdata$r:0000F0A9                 db    0
.rdata$r:0000F0AA                 db    0
.rdata$r:0000F0AB                 db    0
.rdata$r:0000F0AC                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000F0B0                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0B0 _rdata$r        ends
.rdata$r:0000F0B0
.rdata$r:0000F0B4 ; ===========================================================================
.rdata$r:0000F0B4
.rdata$r:0000F0B4 ; Segment type: Pure data
.rdata$r:0000F0B4 ; Segment permissions: Read
.rdata$r:0000F0B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0B4                 assume cs:_rdata$r
.rdata$r:0000F0B4                 ;org 0F0B4h
.rdata$r:0000F0B4 ; COMDAT (pick any)
.rdata$r:0000F0B4                 public ??_R3failure@ios_base@std@@8
.rdata$r:0000F0B4 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0B4 ??_R3failure@ios_base@std@@8 db    0    ; DATA XREF: .rdata$r:0000F0B0o
.rdata$r:0000F0B4                                         ; .rdata$r:0000F0F4o
.rdata$r:0000F0B5                 db    0
.rdata$r:0000F0B6                 db    0
.rdata$r:0000F0B7                 db    0
.rdata$r:0000F0B8                 db    0
.rdata$r:0000F0B9                 db    0
.rdata$r:0000F0BA                 db    0
.rdata$r:0000F0BB                 db    0
.rdata$r:0000F0BC                 db    5
.rdata$r:0000F0BD                 db    0
.rdata$r:0000F0BE                 db    0
.rdata$r:0000F0BF                 db    0
.rdata$r:0000F0C0                 dd offset ??_R2failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000F0C0 _rdata$r        ends
.rdata$r:0000F0C0
.rdata$r:0000F0C4 ; ===========================================================================
.rdata$r:0000F0C4
.rdata$r:0000F0C4 ; Segment type: Pure data
.rdata$r:0000F0C4 ; Segment permissions: Read
.rdata$r:0000F0C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0C4                 assume cs:_rdata$r
.rdata$r:0000F0C4                 ;org 0F0C4h
.rdata$r:0000F0C4 ; COMDAT (pick any)
.rdata$r:0000F0C4                 public ??_R2failure@ios_base@std@@8
.rdata$r:0000F0C4 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000F0C4 ??_R2failure@ios_base@std@@8 dd offset ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000F0C4                                         ; DATA XREF: .rdata$r:0000F0C0o
.rdata$r:0000F0C4                                         ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0C8                 dd offset ??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0CC                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0D0                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0D4                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0D8                 db    0
.rdata$r:0000F0D9                 align 4
.rdata$r:0000F0D9 _rdata$r        ends
.rdata$r:0000F0D9
.rdata$r:0000F0DC ; ===========================================================================
.rdata$r:0000F0DC
.rdata$r:0000F0DC ; Segment type: Pure data
.rdata$r:0000F0DC ; Segment permissions: Read
.rdata$r:0000F0DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0DC                 assume cs:_rdata$r
.rdata$r:0000F0DC                 ;org 0F0DCh
.rdata$r:0000F0DC ; COMDAT (pick any)
.rdata$r:0000F0DC                 public ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000F0DC ; std::ios_base::failure::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F0DC ??_R1A@?0A@EA@failure@ios_base@std@@8 dd offset ??_R0?AVfailure@ios_base@std@@@8
.rdata$r:0000F0DC                                         ; DATA XREF: .rdata$r:std::ios_base::failure::`RTTI Base Class Array'o
.rdata$r:0000F0DC                                         ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000F0E0                 db    4
.rdata$r:0000F0E1                 db    0
.rdata$r:0000F0E2                 db    0
.rdata$r:0000F0E3                 db    0
.rdata$r:0000F0E4                 db    0
.rdata$r:0000F0E5                 db    0
.rdata$r:0000F0E6                 db    0
.rdata$r:0000F0E7                 db    0
.rdata$r:0000F0E8                 db 0FFh
.rdata$r:0000F0E9                 db 0FFh
.rdata$r:0000F0EA                 db 0FFh
.rdata$r:0000F0EB                 db 0FFh
.rdata$r:0000F0EC                 db    0
.rdata$r:0000F0ED                 db    0
.rdata$r:0000F0EE                 db    0
.rdata$r:0000F0EF                 db    0
.rdata$r:0000F0F0                 db  40h ; @
.rdata$r:0000F0F1                 db    0
.rdata$r:0000F0F2                 db    0
.rdata$r:0000F0F3                 db    0
.rdata$r:0000F0F4                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0F4 _rdata$r        ends
.rdata$r:0000F0F4
.rdata$r:0000F0F8 ; ===========================================================================
.rdata$r:0000F0F8
.rdata$r:0000F0F8 ; Segment type: Pure data
.rdata$r:0000F0F8 ; Segment permissions: Read
.rdata$r:0000F0F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0F8                 assume cs:_rdata$r
.rdata$r:0000F0F8                 ;org 0F0F8h
.rdata$r:0000F0F8 ; COMDAT (pick any)
.rdata$r:0000F0F8                 public ??_R4TiXmlDocument@@6B@
.rdata$r:0000F0F8 ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata$r:0000F0F8 ??_R4TiXmlDocument@@6B@ db    0         ; DATA XREF: .rdata:0000E550o
.rdata$r:0000F0F9                 db    0
.rdata$r:0000F0FA                 db    0
.rdata$r:0000F0FB                 db    0
.rdata$r:0000F0FC                 db    0
.rdata$r:0000F0FD                 db    0
.rdata$r:0000F0FE                 db    0
.rdata$r:0000F0FF                 db    0
.rdata$r:0000F100                 db    0
.rdata$r:0000F101                 db    0
.rdata$r:0000F102                 db    0
.rdata$r:0000F103                 db    0
.rdata$r:0000F104                 dd offset ??_R0?AVTiXmlDocument@@@8 ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:0000F108                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F108 _rdata$r        ends
.rdata$r:0000F108
.data$r:0000F10C ; ===========================================================================
.data$r:0000F10C
.data$r:0000F10C ; Segment type: Pure data
.data$r:0000F10C ; Segment permissions: Read/Write
.data$r:0000F10C _data$r         segment dword public 'DATA' use32
.data$r:0000F10C                 assume cs:_data$r
.data$r:0000F10C                 ;org 0F10Ch
.data$r:0000F10C ; COMDAT (pick any)
.data$r:0000F10C                 public ??_R0?AVTiXmlDocument@@@8
.data$r:0000F10C ; class TiXmlDocument `RTTI Type Descriptor'
.data$r:0000F10C ??_R0?AVTiXmlDocument@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F10C                                         ; DATA XREF: .rdata$r:0000F104o
.data$r:0000F10C                                         ; .rdata$r:TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F10C                                         ; const type_info::`vftable'
.data$r:0000F110                 db    0
.data$r:0000F111                 db    0
.data$r:0000F112                 db    0
.data$r:0000F113                 db    0
.data$r:0000F114                 db  2Eh ; .
.data$r:0000F115                 db  3Fh ; ?
.data$r:0000F116                 db  41h ; A
.data$r:0000F117                 db  56h ; V
.data$r:0000F118                 db  54h ; T
.data$r:0000F119                 db  69h ; i
.data$r:0000F11A                 db  58h ; X
.data$r:0000F11B                 db  6Dh ; m
.data$r:0000F11C                 db  6Ch ; l
.data$r:0000F11D                 db  44h ; D
.data$r:0000F11E                 db  6Fh ; o
.data$r:0000F11F                 db  63h ; c
.data$r:0000F120                 db  75h ; u
.data$r:0000F121                 db  6Dh ; m
.data$r:0000F122                 db  65h ; e
.data$r:0000F123                 db  6Eh ; n
.data$r:0000F124                 db  74h ; t
.data$r:0000F125                 db  40h ; @
.data$r:0000F126                 db  40h ; @
.data$r:0000F127                 db    0
.data$r:0000F127 _data$r         ends
.data$r:0000F127
.rdata$r:0000F128 ; ===========================================================================
.rdata$r:0000F128
.rdata$r:0000F128 ; Segment type: Pure data
.rdata$r:0000F128 ; Segment permissions: Read
.rdata$r:0000F128 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F128                 assume cs:_rdata$r
.rdata$r:0000F128                 ;org 0F128h
.rdata$r:0000F128 ; COMDAT (pick any)
.rdata$r:0000F128                 public ??_R3TiXmlDocument@@8
.rdata$r:0000F128 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F128 ??_R3TiXmlDocument@@8 db    0           ; DATA XREF: .rdata$r:0000F108o
.rdata$r:0000F128                                         ; .rdata$r:0000F160o
.rdata$r:0000F129                 db    0
.rdata$r:0000F12A                 db    0
.rdata$r:0000F12B                 db    0
.rdata$r:0000F12C                 db    0
.rdata$r:0000F12D                 db    0
.rdata$r:0000F12E                 db    0
.rdata$r:0000F12F                 db    0
.rdata$r:0000F130                 db    3
.rdata$r:0000F131                 db    0
.rdata$r:0000F132                 db    0
.rdata$r:0000F133                 db    0
.rdata$r:0000F134                 dd offset ??_R2TiXmlDocument@@8 ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:0000F134 _rdata$r        ends
.rdata$r:0000F134
.rdata$r:0000F138 ; ===========================================================================
.rdata$r:0000F138
.rdata$r:0000F138 ; Segment type: Pure data
.rdata$r:0000F138 ; Segment permissions: Read
.rdata$r:0000F138 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F138                 assume cs:_rdata$r
.rdata$r:0000F138                 ;org 0F138h
.rdata$r:0000F138 ; COMDAT (pick any)
.rdata$r:0000F138                 public ??_R2TiXmlDocument@@8
.rdata$r:0000F138 ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:0000F138 ??_R2TiXmlDocument@@8 dd offset ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:0000F138                                         ; DATA XREF: .rdata$r:0000F134o
.rdata$r:0000F138                                         ; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F13C                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F140                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F144                 db    0
.rdata$r:0000F145                 align 4
.rdata$r:0000F145 _rdata$r        ends
.rdata$r:0000F145
.rdata$r:0000F148 ; ===========================================================================
.rdata$r:0000F148
.rdata$r:0000F148 ; Segment type: Pure data
.rdata$r:0000F148 ; Segment permissions: Read
.rdata$r:0000F148 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F148                 assume cs:_rdata$r
.rdata$r:0000F148                 ;org 0F148h
.rdata$r:0000F148 ; COMDAT (pick any)
.rdata$r:0000F148                 public ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:0000F148 ; TiXmlDocument::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F148 ??_R1A@?0A@EA@TiXmlDocument@@8 dd offset ??_R0?AVTiXmlDocument@@@8
.rdata$r:0000F148                                         ; DATA XREF: .rdata$r:TiXmlDocument::`RTTI Base Class Array'o
.rdata$r:0000F148                                         ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:0000F14C                 db    2
.rdata$r:0000F14D                 db    0
.rdata$r:0000F14E                 db    0
.rdata$r:0000F14F                 db    0
.rdata$r:0000F150                 db    0
.rdata$r:0000F151                 db    0
.rdata$r:0000F152                 db    0
.rdata$r:0000F153                 db    0
.rdata$r:0000F154                 db 0FFh
.rdata$r:0000F155                 db 0FFh
.rdata$r:0000F156                 db 0FFh
.rdata$r:0000F157                 db 0FFh
.rdata$r:0000F158                 db    0
.rdata$r:0000F159                 db    0
.rdata$r:0000F15A                 db    0
.rdata$r:0000F15B                 db    0
.rdata$r:0000F15C                 db  40h ; @
.rdata$r:0000F15D                 db    0
.rdata$r:0000F15E                 db    0
.rdata$r:0000F15F                 db    0
.rdata$r:0000F160                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F160 _rdata$r        ends
.rdata$r:0000F160
.rdata$r:0000F164 ; ===========================================================================
.rdata$r:0000F164
.rdata$r:0000F164 ; Segment type: Pure data
.rdata$r:0000F164 ; Segment permissions: Read
.rdata$r:0000F164 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F164                 assume cs:_rdata$r
.rdata$r:0000F164                 ;org 0F164h
.rdata$r:0000F164 ; COMDAT (pick any)
.rdata$r:0000F164                 public ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000F164 ; TiXmlNode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F164 ??_R1A@?0A@EA@TiXmlNode@@8 dd offset ??_R0?AVTiXmlNode@@@8
.rdata$r:0000F164                                         ; DATA XREF: .rdata$r:0000F13Co
.rdata$r:0000F164                                         ; .rdata$r:TiXmlNode::`RTTI Base Class Array'o ...
.rdata$r:0000F164                                         ; TiXmlNode `RTTI Type Descriptor'
.rdata$r:0000F168                 db    1
.rdata$r:0000F169                 db    0
.rdata$r:0000F16A                 db    0
.rdata$r:0000F16B                 db    0
.rdata$r:0000F16C                 db    0
.rdata$r:0000F16D                 db    0
.rdata$r:0000F16E                 db    0
.rdata$r:0000F16F                 db    0
.rdata$r:0000F170                 db 0FFh
.rdata$r:0000F171                 db 0FFh
.rdata$r:0000F172                 db 0FFh
.rdata$r:0000F173                 db 0FFh
.rdata$r:0000F174                 db    0
.rdata$r:0000F175                 db    0
.rdata$r:0000F176                 db    0
.rdata$r:0000F177                 db    0
.rdata$r:0000F178                 db  40h ; @
.rdata$r:0000F179                 db    0
.rdata$r:0000F17A                 db    0
.rdata$r:0000F17B                 db    0
.rdata$r:0000F17C                 dd offset ??_R3TiXmlNode@@8 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F17C _rdata$r        ends
.rdata$r:0000F17C
.data$r:0000F180 ; ===========================================================================
.data$r:0000F180
.data$r:0000F180 ; Segment type: Pure data
.data$r:0000F180 ; Segment permissions: Read/Write
.data$r:0000F180 _data$r         segment dword public 'DATA' use32
.data$r:0000F180                 assume cs:_data$r
.data$r:0000F180                 ;org 0F180h
.data$r:0000F180 ; COMDAT (pick any)
.data$r:0000F180                 public ??_R0?AVTiXmlNode@@@8
.data$r:0000F180 ; class TiXmlNode `RTTI Type Descriptor'
.data$r:0000F180 ??_R0?AVTiXmlNode@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F180                                         ; DATA XREF: .rdata$r:TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F180                                         ; .rdata$r:0000F4A8o
.data$r:0000F180                                         ; const type_info::`vftable'
.data$r:0000F184                 align 8
.data$r:0000F188 a_?avtixmlnode@ db '.?AVTiXmlNode@@',0
.data$r:0000F188 _data$r         ends
.data$r:0000F188
.rdata$r:0000F198 ; ===========================================================================
.rdata$r:0000F198
.rdata$r:0000F198 ; Segment type: Pure data
.rdata$r:0000F198 ; Segment permissions: Read
.rdata$r:0000F198 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F198                 assume cs:_rdata$r
.rdata$r:0000F198                 ;org 0F198h
.rdata$r:0000F198 ; COMDAT (pick any)
.rdata$r:0000F198                 public ??_R3TiXmlNode@@8
.rdata$r:0000F198 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F198 ??_R3TiXmlNode@@8 db    0               ; DATA XREF: .rdata$r:0000F17Co
.rdata$r:0000F198                                         ; .rdata$r:0000F4ACo
.rdata$r:0000F199                 db    0
.rdata$r:0000F19A                 db    0
.rdata$r:0000F19B                 db    0
.rdata$r:0000F19C                 db    0
.rdata$r:0000F19D                 db    0
.rdata$r:0000F19E                 db    0
.rdata$r:0000F19F                 db    0
.rdata$r:0000F1A0                 db    2
.rdata$r:0000F1A1                 db    0
.rdata$r:0000F1A2                 db    0
.rdata$r:0000F1A3                 db    0
.rdata$r:0000F1A4                 dd offset ??_R2TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000F1A4 _rdata$r        ends
.rdata$r:0000F1A4
.rdata$r:0000F1A8 ; ===========================================================================
.rdata$r:0000F1A8
.rdata$r:0000F1A8 ; Segment type: Pure data
.rdata$r:0000F1A8 ; Segment permissions: Read
.rdata$r:0000F1A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1A8                 assume cs:_rdata$r
.rdata$r:0000F1A8                 ;org 0F1A8h
.rdata$r:0000F1A8 ; COMDAT (pick any)
.rdata$r:0000F1A8                 public ??_R2TiXmlNode@@8
.rdata$r:0000F1A8 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000F1A8 ??_R2TiXmlNode@@8 dd offset ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000F1A8                                         ; DATA XREF: .rdata$r:0000F1A4o
.rdata$r:0000F1A8                                         ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F1AC                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F1B0                 db    0
.rdata$r:0000F1B1                 align 4
.rdata$r:0000F1B1 _rdata$r        ends
.rdata$r:0000F1B1
.rdata$r:0000F1B4 ; ===========================================================================
.rdata$r:0000F1B4
.rdata$r:0000F1B4 ; Segment type: Pure data
.rdata$r:0000F1B4 ; Segment permissions: Read
.rdata$r:0000F1B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1B4                 assume cs:_rdata$r
.rdata$r:0000F1B4                 ;org 0F1B4h
.rdata$r:0000F1B4 ; COMDAT (pick any)
.rdata$r:0000F1B4                 public ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000F1B4 ; TiXmlBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F1B4 ??_R1A@?0A@EA@TiXmlBase@@8 dd offset ??_R0?AVTiXmlBase@@@8
.rdata$r:0000F1B4                                         ; DATA XREF: .rdata$r:0000F140o
.rdata$r:0000F1B4                                         ; .rdata$r:0000F1ACo ...
.rdata$r:0000F1B4                                         ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:0000F1B8                 align 10h
.rdata$r:0000F1C0                 db 0FFh
.rdata$r:0000F1C1                 db 0FFh
.rdata$r:0000F1C2                 db 0FFh
.rdata$r:0000F1C3                 db 0FFh
.rdata$r:0000F1C4                 db    0
.rdata$r:0000F1C5                 db    0
.rdata$r:0000F1C6                 db    0
.rdata$r:0000F1C7                 db    0
.rdata$r:0000F1C8                 db  40h ; @
.rdata$r:0000F1C9                 db    0
.rdata$r:0000F1CA                 db    0
.rdata$r:0000F1CB                 db    0
.rdata$r:0000F1CC                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F1CC _rdata$r        ends
.rdata$r:0000F1CC
.data$r:0000F1D0 ; ===========================================================================
.data$r:0000F1D0
.data$r:0000F1D0 ; Segment type: Pure data
.data$r:0000F1D0 ; Segment permissions: Read/Write
.data$r:0000F1D0 _data$r         segment dword public 'DATA' use32
.data$r:0000F1D0                 assume cs:_data$r
.data$r:0000F1D0                 ;org 0F1D0h
.data$r:0000F1D0 ; COMDAT (pick any)
.data$r:0000F1D0                 public ??_R0?AVTiXmlBase@@@8
.data$r:0000F1D0 ; class TiXmlBase `RTTI Type Descriptor'
.data$r:0000F1D0 ??_R0?AVTiXmlBase@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F1D0                                         ; DATA XREF: .rdata$r:TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F1D0                                         ; .rdata$r:0000F494o
.data$r:0000F1D0                                         ; const type_info::`vftable'
.data$r:0000F1D4                 align 8
.data$r:0000F1D8 a_?avtixmlbase@ db '.?AVTiXmlBase@@',0
.data$r:0000F1D8 _data$r         ends
.data$r:0000F1D8
.rdata$r:0000F1E8 ; ===========================================================================
.rdata$r:0000F1E8
.rdata$r:0000F1E8 ; Segment type: Pure data
.rdata$r:0000F1E8 ; Segment permissions: Read
.rdata$r:0000F1E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1E8                 assume cs:_rdata$r
.rdata$r:0000F1E8                 ;org 0F1E8h
.rdata$r:0000F1E8 ; COMDAT (pick any)
.rdata$r:0000F1E8                 public ??_R3TiXmlBase@@8
.rdata$r:0000F1E8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F1E8 ??_R3TiXmlBase@@8 db    0               ; DATA XREF: .rdata$r:0000F1CCo
.rdata$r:0000F1E8                                         ; .rdata$r:0000F498o
.rdata$r:0000F1E9                 db    0
.rdata$r:0000F1EA                 db    0
.rdata$r:0000F1EB                 db    0
.rdata$r:0000F1EC                 db    0
.rdata$r:0000F1ED                 db    0
.rdata$r:0000F1EE                 db    0
.rdata$r:0000F1EF                 db    0
.rdata$r:0000F1F0                 db    1
.rdata$r:0000F1F1                 db    0
.rdata$r:0000F1F2                 db    0
.rdata$r:0000F1F3                 db    0
.rdata$r:0000F1F4                 dd offset ??_R2TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000F1F4 _rdata$r        ends
.rdata$r:0000F1F4
.rdata$r:0000F1F8 ; ===========================================================================
.rdata$r:0000F1F8
.rdata$r:0000F1F8 ; Segment type: Pure data
.rdata$r:0000F1F8 ; Segment permissions: Read
.rdata$r:0000F1F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F1F8                 assume cs:_rdata$r
.rdata$r:0000F1F8                 ;org 0F1F8h
.rdata$r:0000F1F8 ; COMDAT (pick any)
.rdata$r:0000F1F8                 public ??_R2TiXmlBase@@8
.rdata$r:0000F1F8 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000F1F8 ??_R2TiXmlBase@@8 dd offset ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000F1F8                                         ; DATA XREF: .rdata$r:0000F1F4o
.rdata$r:0000F1F8                                         ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F1FC                 db    0
.rdata$r:0000F1FD                 align 10h
.rdata$r:0000F1FD _rdata$r        ends
.rdata$r:0000F1FD
.rdata$r:0000F200 ; ===========================================================================
.rdata$r:0000F200
.rdata$r:0000F200 ; Segment type: Pure data
.rdata$r:0000F200 ; Segment permissions: Read
.rdata$r:0000F200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F200                 assume cs:_rdata$r
.rdata$r:0000F200                 ;org 0F200h
.rdata$r:0000F200 ; COMDAT (pick any)
.rdata$r:0000F200                 public ??_R4TiXmlElement@@6B@
.rdata$r:0000F200 ; const TiXmlElement::`RTTI Complete Object Locator'
.rdata$r:0000F200 ??_R4TiXmlElement@@6B@ db    0          ; DATA XREF: .rdata:0000E4B0o
.rdata$r:0000F201                 db    0
.rdata$r:0000F202                 db    0
.rdata$r:0000F203                 db    0
.rdata$r:0000F204                 db    0
.rdata$r:0000F205                 db    0
.rdata$r:0000F206                 db    0
.rdata$r:0000F207                 db    0
.rdata$r:0000F208                 db    0
.rdata$r:0000F209                 db    0
.rdata$r:0000F20A                 db    0
.rdata$r:0000F20B                 db    0
.rdata$r:0000F20C                 dd offset ??_R0?AVTiXmlElement@@@8 ; TiXmlElement `RTTI Type Descriptor'
.rdata$r:0000F210                 dd offset ??_R3TiXmlElement@@8 ; TiXmlElement::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F210 _rdata$r        ends
.rdata$r:0000F210
.data$r:0000F214 ; ===========================================================================
.data$r:0000F214
.data$r:0000F214 ; Segment type: Pure data
.data$r:0000F214 ; Segment permissions: Read/Write
.data$r:0000F214 _data$r         segment dword public 'DATA' use32
.data$r:0000F214                 assume cs:_data$r
.data$r:0000F214                 ;org 0F214h
.data$r:0000F214 ; COMDAT (pick any)
.data$r:0000F214                 public ??_R0?AVTiXmlElement@@@8
.data$r:0000F214 ; class TiXmlElement `RTTI Type Descriptor'
.data$r:0000F214 ??_R0?AVTiXmlElement@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F214                                         ; DATA XREF: .rdata$r:0000F20Co
.data$r:0000F214                                         ; .rdata$r:TiXmlElement::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F214                                         ; const type_info::`vftable'
.data$r:0000F218                 db    0
.data$r:0000F219                 db    0
.data$r:0000F21A                 db    0
.data$r:0000F21B                 db    0
.data$r:0000F21C                 db  2Eh ; .
.data$r:0000F21D                 db  3Fh ; ?
.data$r:0000F21E                 db  41h ; A
.data$r:0000F21F                 db  56h ; V
.data$r:0000F220                 db  54h ; T
.data$r:0000F221                 db  69h ; i
.data$r:0000F222                 db  58h ; X
.data$r:0000F223                 db  6Dh ; m
.data$r:0000F224                 db  6Ch ; l
.data$r:0000F225                 db  45h ; E
.data$r:0000F226                 db  6Ch ; l
.data$r:0000F227                 db  65h ; e
.data$r:0000F228                 db  6Dh ; m
.data$r:0000F229                 db  65h ; e
.data$r:0000F22A                 db  6Eh ; n
.data$r:0000F22B                 db  74h ; t
.data$r:0000F22C                 db  40h ; @
.data$r:0000F22D                 db  40h ; @
.data$r:0000F22E                 db    0
.data$r:0000F22F                 align 10h
.data$r:0000F22F _data$r         ends
.data$r:0000F22F
.rdata$r:0000F230 ; ===========================================================================
.rdata$r:0000F230
.rdata$r:0000F230 ; Segment type: Pure data
.rdata$r:0000F230 ; Segment permissions: Read
.rdata$r:0000F230 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F230                 assume cs:_rdata$r
.rdata$r:0000F230                 ;org 0F230h
.rdata$r:0000F230 ; COMDAT (pick any)
.rdata$r:0000F230                 public ??_R3TiXmlElement@@8
.rdata$r:0000F230 ; TiXmlElement::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F230 ??_R3TiXmlElement@@8 db    0            ; DATA XREF: .rdata$r:0000F210o
.rdata$r:0000F230                                         ; .rdata$r:0000F268o
.rdata$r:0000F231                 db    0
.rdata$r:0000F232                 db    0
.rdata$r:0000F233                 db    0
.rdata$r:0000F234                 db    0
.rdata$r:0000F235                 db    0
.rdata$r:0000F236                 db    0
.rdata$r:0000F237                 db    0
.rdata$r:0000F238                 db    3
.rdata$r:0000F239                 db    0
.rdata$r:0000F23A                 db    0
.rdata$r:0000F23B                 db    0
.rdata$r:0000F23C                 dd offset ??_R2TiXmlElement@@8 ; TiXmlElement::`RTTI Base Class Array'
.rdata$r:0000F23C _rdata$r        ends
.rdata$r:0000F23C
.rdata$r:0000F240 ; ===========================================================================
.rdata$r:0000F240
.rdata$r:0000F240 ; Segment type: Pure data
.rdata$r:0000F240 ; Segment permissions: Read
.rdata$r:0000F240 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F240                 assume cs:_rdata$r
.rdata$r:0000F240                 ;org 0F240h
.rdata$r:0000F240 ; COMDAT (pick any)
.rdata$r:0000F240                 public ??_R2TiXmlElement@@8
.rdata$r:0000F240 ; TiXmlElement::`RTTI Base Class Array'
.rdata$r:0000F240 ??_R2TiXmlElement@@8 dd offset ??_R1A@?0A@EA@TiXmlElement@@8
.rdata$r:0000F240                                         ; DATA XREF: .rdata$r:0000F23Co
.rdata$r:0000F240                                         ; TiXmlElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F244                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F248                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F24C                 db    0
.rdata$r:0000F24D                 align 10h
.rdata$r:0000F24D _rdata$r        ends
.rdata$r:0000F24D
.rdata$r:0000F250 ; ===========================================================================
.rdata$r:0000F250
.rdata$r:0000F250 ; Segment type: Pure data
.rdata$r:0000F250 ; Segment permissions: Read
.rdata$r:0000F250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F250                 assume cs:_rdata$r
.rdata$r:0000F250                 ;org 0F250h
.rdata$r:0000F250 ; COMDAT (pick any)
.rdata$r:0000F250                 public ??_R1A@?0A@EA@TiXmlElement@@8
.rdata$r:0000F250 ; TiXmlElement::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F250 ??_R1A@?0A@EA@TiXmlElement@@8 dd offset ??_R0?AVTiXmlElement@@@8
.rdata$r:0000F250                                         ; DATA XREF: .rdata$r:TiXmlElement::`RTTI Base Class Array'o
.rdata$r:0000F250                                         ; TiXmlElement `RTTI Type Descriptor'
.rdata$r:0000F254                 db    2
.rdata$r:0000F255                 db    0
.rdata$r:0000F256                 db    0
.rdata$r:0000F257                 db    0
.rdata$r:0000F258                 db    0
.rdata$r:0000F259                 db    0
.rdata$r:0000F25A                 db    0
.rdata$r:0000F25B                 db    0
.rdata$r:0000F25C                 db 0FFh
.rdata$r:0000F25D                 db 0FFh
.rdata$r:0000F25E                 db 0FFh
.rdata$r:0000F25F                 db 0FFh
.rdata$r:0000F260                 db    0
.rdata$r:0000F261                 db    0
.rdata$r:0000F262                 db    0
.rdata$r:0000F263                 db    0
.rdata$r:0000F264                 db  40h ; @
.rdata$r:0000F265                 db    0
.rdata$r:0000F266                 db    0
.rdata$r:0000F267                 db    0
.rdata$r:0000F268                 dd offset ??_R3TiXmlElement@@8 ; TiXmlElement::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F268 _rdata$r        ends
.rdata$r:0000F268
.rdata$r:0000F26C ; ===========================================================================
.rdata$r:0000F26C
.rdata$r:0000F26C ; Segment type: Pure data
.rdata$r:0000F26C ; Segment permissions: Read
.rdata$r:0000F26C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F26C                 assume cs:_rdata$r
.rdata$r:0000F26C                 ;org 0F26Ch
.rdata$r:0000F26C ; COMDAT (pick any)
.rdata$r:0000F26C                 public ??_R4TiXmlComment@@6B@
.rdata$r:0000F26C ; const TiXmlComment::`RTTI Complete Object Locator'
.rdata$r:0000F26C ??_R4TiXmlComment@@6B@ db    0          ; DATA XREF: .rdata:0000E4D0o
.rdata$r:0000F26D                 db    0
.rdata$r:0000F26E                 db    0
.rdata$r:0000F26F                 db    0
.rdata$r:0000F270                 db    0
.rdata$r:0000F271                 db    0
.rdata$r:0000F272                 db    0
.rdata$r:0000F273                 db    0
.rdata$r:0000F274                 db    0
.rdata$r:0000F275                 db    0
.rdata$r:0000F276                 db    0
.rdata$r:0000F277                 db    0
.rdata$r:0000F278                 dd offset ??_R0?AVTiXmlComment@@@8 ; TiXmlComment `RTTI Type Descriptor'
.rdata$r:0000F27C                 dd offset ??_R3TiXmlComment@@8 ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F27C _rdata$r        ends
.rdata$r:0000F27C
.data$r:0000F280 ; ===========================================================================
.data$r:0000F280
.data$r:0000F280 ; Segment type: Pure data
.data$r:0000F280 ; Segment permissions: Read/Write
.data$r:0000F280 _data$r         segment dword public 'DATA' use32
.data$r:0000F280                 assume cs:_data$r
.data$r:0000F280                 ;org 0F280h
.data$r:0000F280 ; COMDAT (pick any)
.data$r:0000F280                 public ??_R0?AVTiXmlComment@@@8
.data$r:0000F280 ; class TiXmlComment `RTTI Type Descriptor'
.data$r:0000F280 ??_R0?AVTiXmlComment@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F280                                         ; DATA XREF: .rdata$r:0000F278o
.data$r:0000F280                                         ; .rdata$r:TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F280                                         ; const type_info::`vftable'
.data$r:0000F284                 align 8
.data$r:0000F288 a_?avtixmlcomme db '.?AVTiXmlComment@@',0
.data$r:0000F29B                 align 4
.data$r:0000F29B _data$r         ends
.data$r:0000F29B
.rdata$r:0000F29C ; ===========================================================================
.rdata$r:0000F29C
.rdata$r:0000F29C ; Segment type: Pure data
.rdata$r:0000F29C ; Segment permissions: Read
.rdata$r:0000F29C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F29C                 assume cs:_rdata$r
.rdata$r:0000F29C                 ;org 0F29Ch
.rdata$r:0000F29C ; COMDAT (pick any)
.rdata$r:0000F29C                 public ??_R3TiXmlComment@@8
.rdata$r:0000F29C ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F29C ??_R3TiXmlComment@@8 db    0            ; DATA XREF: .rdata$r:0000F27Co
.rdata$r:0000F29C                                         ; .rdata$r:0000F2D4o
.rdata$r:0000F29D                 db    0
.rdata$r:0000F29E                 db    0
.rdata$r:0000F29F                 db    0
.rdata$r:0000F2A0                 db    0
.rdata$r:0000F2A1                 db    0
.rdata$r:0000F2A2                 db    0
.rdata$r:0000F2A3                 db    0
.rdata$r:0000F2A4                 db    3
.rdata$r:0000F2A5                 db    0
.rdata$r:0000F2A6                 db    0
.rdata$r:0000F2A7                 db    0
.rdata$r:0000F2A8                 dd offset ??_R2TiXmlComment@@8 ; TiXmlComment::`RTTI Base Class Array'
.rdata$r:0000F2A8 _rdata$r        ends
.rdata$r:0000F2A8
.rdata$r:0000F2AC ; ===========================================================================
.rdata$r:0000F2AC
.rdata$r:0000F2AC ; Segment type: Pure data
.rdata$r:0000F2AC ; Segment permissions: Read
.rdata$r:0000F2AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2AC                 assume cs:_rdata$r
.rdata$r:0000F2AC                 ;org 0F2ACh
.rdata$r:0000F2AC ; COMDAT (pick any)
.rdata$r:0000F2AC                 public ??_R2TiXmlComment@@8
.rdata$r:0000F2AC ; TiXmlComment::`RTTI Base Class Array'
.rdata$r:0000F2AC ??_R2TiXmlComment@@8 dd offset ??_R1A@?0A@EA@TiXmlComment@@8
.rdata$r:0000F2AC                                         ; DATA XREF: .rdata$r:0000F2A8o
.rdata$r:0000F2AC                                         ; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2B0                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2B4                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F2B8                 db    0
.rdata$r:0000F2B9                 align 4
.rdata$r:0000F2B9 _rdata$r        ends
.rdata$r:0000F2B9
.rdata$r:0000F2BC ; ===========================================================================
.rdata$r:0000F2BC
.rdata$r:0000F2BC ; Segment type: Pure data
.rdata$r:0000F2BC ; Segment permissions: Read
.rdata$r:0000F2BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2BC                 assume cs:_rdata$r
.rdata$r:0000F2BC                 ;org 0F2BCh
.rdata$r:0000F2BC ; COMDAT (pick any)
.rdata$r:0000F2BC                 public ??_R1A@?0A@EA@TiXmlComment@@8
.rdata$r:0000F2BC ; TiXmlComment::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F2BC ??_R1A@?0A@EA@TiXmlComment@@8 dd offset ??_R0?AVTiXmlComment@@@8
.rdata$r:0000F2BC                                         ; DATA XREF: .rdata$r:TiXmlComment::`RTTI Base Class Array'o
.rdata$r:0000F2BC                                         ; TiXmlComment `RTTI Type Descriptor'
.rdata$r:0000F2C0                 db    2
.rdata$r:0000F2C1                 db    0
.rdata$r:0000F2C2                 db    0
.rdata$r:0000F2C3                 db    0
.rdata$r:0000F2C4                 db    0
.rdata$r:0000F2C5                 db    0
.rdata$r:0000F2C6                 db    0
.rdata$r:0000F2C7                 db    0
.rdata$r:0000F2C8                 db 0FFh
.rdata$r:0000F2C9                 db 0FFh
.rdata$r:0000F2CA                 db 0FFh
.rdata$r:0000F2CB                 db 0FFh
.rdata$r:0000F2CC                 db    0
.rdata$r:0000F2CD                 db    0
.rdata$r:0000F2CE                 db    0
.rdata$r:0000F2CF                 db    0
.rdata$r:0000F2D0                 db  40h ; @
.rdata$r:0000F2D1                 db    0
.rdata$r:0000F2D2                 db    0
.rdata$r:0000F2D3                 db    0
.rdata$r:0000F2D4                 dd offset ??_R3TiXmlComment@@8 ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F2D4 _rdata$r        ends
.rdata$r:0000F2D4
.rdata$r:0000F2D8 ; ===========================================================================
.rdata$r:0000F2D8
.rdata$r:0000F2D8 ; Segment type: Pure data
.rdata$r:0000F2D8 ; Segment permissions: Read
.rdata$r:0000F2D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2D8                 assume cs:_rdata$r
.rdata$r:0000F2D8                 ;org 0F2D8h
.rdata$r:0000F2D8 ; COMDAT (pick any)
.rdata$r:0000F2D8                 public ??_R4TiXmlUnknown@@6B@
.rdata$r:0000F2D8 ; const TiXmlUnknown::`RTTI Complete Object Locator'
.rdata$r:0000F2D8 ??_R4TiXmlUnknown@@6B@ db    0          ; DATA XREF: .rdata:0000E530o
.rdata$r:0000F2D9                 db    0
.rdata$r:0000F2DA                 db    0
.rdata$r:0000F2DB                 db    0
.rdata$r:0000F2DC                 db    0
.rdata$r:0000F2DD                 db    0
.rdata$r:0000F2DE                 db    0
.rdata$r:0000F2DF                 db    0
.rdata$r:0000F2E0                 db    0
.rdata$r:0000F2E1                 db    0
.rdata$r:0000F2E2                 db    0
.rdata$r:0000F2E3                 db    0
.rdata$r:0000F2E4                 dd offset ??_R0?AVTiXmlUnknown@@@8 ; TiXmlUnknown `RTTI Type Descriptor'
.rdata$r:0000F2E8                 dd offset ??_R3TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F2E8 _rdata$r        ends
.rdata$r:0000F2E8
.data$r:0000F2EC ; ===========================================================================
.data$r:0000F2EC
.data$r:0000F2EC ; Segment type: Pure data
.data$r:0000F2EC ; Segment permissions: Read/Write
.data$r:0000F2EC _data$r         segment dword public 'DATA' use32
.data$r:0000F2EC                 assume cs:_data$r
.data$r:0000F2EC                 ;org 0F2ECh
.data$r:0000F2EC ; COMDAT (pick any)
.data$r:0000F2EC                 public ??_R0?AVTiXmlUnknown@@@8
.data$r:0000F2EC ; class TiXmlUnknown `RTTI Type Descriptor'
.data$r:0000F2EC ??_R0?AVTiXmlUnknown@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F2EC                                         ; DATA XREF: .rdata$r:0000F2E4o
.data$r:0000F2EC                                         ; .rdata$r:TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F2EC                                         ; const type_info::`vftable'
.data$r:0000F2F0                 db    0
.data$r:0000F2F1                 db    0
.data$r:0000F2F2                 db    0
.data$r:0000F2F3                 db    0
.data$r:0000F2F4                 db  2Eh ; .
.data$r:0000F2F5                 db  3Fh ; ?
.data$r:0000F2F6                 db  41h ; A
.data$r:0000F2F7                 db  56h ; V
.data$r:0000F2F8                 db  54h ; T
.data$r:0000F2F9                 db  69h ; i
.data$r:0000F2FA                 db  58h ; X
.data$r:0000F2FB                 db  6Dh ; m
.data$r:0000F2FC                 db  6Ch ; l
.data$r:0000F2FD                 db  55h ; U
.data$r:0000F2FE                 db  6Eh ; n
.data$r:0000F2FF                 db  6Bh ; k
.data$r:0000F300                 db  6Eh ; n
.data$r:0000F301                 db  6Fh ; o
.data$r:0000F302                 db  77h ; w
.data$r:0000F303                 db  6Eh ; n
.data$r:0000F304                 db  40h ; @
.data$r:0000F305                 db  40h ; @
.data$r:0000F306                 db    0
.data$r:0000F307                 align 4
.data$r:0000F307 _data$r         ends
.data$r:0000F307
.rdata$r:0000F308 ; ===========================================================================
.rdata$r:0000F308
.rdata$r:0000F308 ; Segment type: Pure data
.rdata$r:0000F308 ; Segment permissions: Read
.rdata$r:0000F308 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F308                 assume cs:_rdata$r
.rdata$r:0000F308                 ;org 0F308h
.rdata$r:0000F308 ; COMDAT (pick any)
.rdata$r:0000F308                 public ??_R3TiXmlUnknown@@8
.rdata$r:0000F308 ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F308 ??_R3TiXmlUnknown@@8 db    0            ; DATA XREF: .rdata$r:0000F2E8o
.rdata$r:0000F308                                         ; .rdata$r:0000F340o
.rdata$r:0000F309                 db    0
.rdata$r:0000F30A                 db    0
.rdata$r:0000F30B                 db    0
.rdata$r:0000F30C                 db    0
.rdata$r:0000F30D                 db    0
.rdata$r:0000F30E                 db    0
.rdata$r:0000F30F                 db    0
.rdata$r:0000F310                 db    3
.rdata$r:0000F311                 db    0
.rdata$r:0000F312                 db    0
.rdata$r:0000F313                 db    0
.rdata$r:0000F314                 dd offset ??_R2TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Base Class Array'
.rdata$r:0000F314 _rdata$r        ends
.rdata$r:0000F314
.rdata$r:0000F318 ; ===========================================================================
.rdata$r:0000F318
.rdata$r:0000F318 ; Segment type: Pure data
.rdata$r:0000F318 ; Segment permissions: Read
.rdata$r:0000F318 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F318                 assume cs:_rdata$r
.rdata$r:0000F318                 ;org 0F318h
.rdata$r:0000F318 ; COMDAT (pick any)
.rdata$r:0000F318                 public ??_R2TiXmlUnknown@@8
.rdata$r:0000F318 ; TiXmlUnknown::`RTTI Base Class Array'
.rdata$r:0000F318 ??_R2TiXmlUnknown@@8 dd offset ??_R1A@?0A@EA@TiXmlUnknown@@8
.rdata$r:0000F318                                         ; DATA XREF: .rdata$r:0000F314o
.rdata$r:0000F318                                         ; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F31C                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F320                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F324                 db    0
.rdata$r:0000F325                 align 4
.rdata$r:0000F325 _rdata$r        ends
.rdata$r:0000F325
.rdata$r:0000F328 ; ===========================================================================
.rdata$r:0000F328
.rdata$r:0000F328 ; Segment type: Pure data
.rdata$r:0000F328 ; Segment permissions: Read
.rdata$r:0000F328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F328                 assume cs:_rdata$r
.rdata$r:0000F328                 ;org 0F328h
.rdata$r:0000F328 ; COMDAT (pick any)
.rdata$r:0000F328                 public ??_R1A@?0A@EA@TiXmlUnknown@@8
.rdata$r:0000F328 ; TiXmlUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F328 ??_R1A@?0A@EA@TiXmlUnknown@@8 dd offset ??_R0?AVTiXmlUnknown@@@8
.rdata$r:0000F328                                         ; DATA XREF: .rdata$r:TiXmlUnknown::`RTTI Base Class Array'o
.rdata$r:0000F328                                         ; TiXmlUnknown `RTTI Type Descriptor'
.rdata$r:0000F32C                 db    2
.rdata$r:0000F32D                 db    0
.rdata$r:0000F32E                 db    0
.rdata$r:0000F32F                 db    0
.rdata$r:0000F330                 db    0
.rdata$r:0000F331                 db    0
.rdata$r:0000F332                 db    0
.rdata$r:0000F333                 db    0
.rdata$r:0000F334                 db 0FFh
.rdata$r:0000F335                 db 0FFh
.rdata$r:0000F336                 db 0FFh
.rdata$r:0000F337                 db 0FFh
.rdata$r:0000F338                 db    0
.rdata$r:0000F339                 db    0
.rdata$r:0000F33A                 db    0
.rdata$r:0000F33B                 db    0
.rdata$r:0000F33C                 db  40h ; @
.rdata$r:0000F33D                 db    0
.rdata$r:0000F33E                 db    0
.rdata$r:0000F33F                 db    0
.rdata$r:0000F340                 dd offset ??_R3TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F340 _rdata$r        ends
.rdata$r:0000F340
.rdata$r:0000F344 ; ===========================================================================
.rdata$r:0000F344
.rdata$r:0000F344 ; Segment type: Pure data
.rdata$r:0000F344 ; Segment permissions: Read
.rdata$r:0000F344 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F344                 assume cs:_rdata$r
.rdata$r:0000F344                 ;org 0F344h
.rdata$r:0000F344 ; COMDAT (pick any)
.rdata$r:0000F344                 public ??_R4TiXmlAttribute@@6B@
.rdata$r:0000F344 ; const TiXmlAttribute::`RTTI Complete Object Locator'
.rdata$r:0000F344 ??_R4TiXmlAttribute@@6B@ db    0        ; DATA XREF: .rdata:0000E49Co
.rdata$r:0000F345                 db    0
.rdata$r:0000F346                 db    0
.rdata$r:0000F347                 db    0
.rdata$r:0000F348                 db    0
.rdata$r:0000F349                 db    0
.rdata$r:0000F34A                 db    0
.rdata$r:0000F34B                 db    0
.rdata$r:0000F34C                 db    0
.rdata$r:0000F34D                 db    0
.rdata$r:0000F34E                 db    0
.rdata$r:0000F34F                 db    0
.rdata$r:0000F350                 dd offset ??_R0?AVTiXmlAttribute@@@8 ; TiXmlAttribute `RTTI Type Descriptor'
.rdata$r:0000F354                 dd offset ??_R3TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F354 _rdata$r        ends
.rdata$r:0000F354
.data$r:0000F358 ; ===========================================================================
.data$r:0000F358
.data$r:0000F358 ; Segment type: Pure data
.data$r:0000F358 ; Segment permissions: Read/Write
.data$r:0000F358 _data$r         segment dword public 'DATA' use32
.data$r:0000F358                 assume cs:_data$r
.data$r:0000F358                 ;org 0F358h
.data$r:0000F358 ; COMDAT (pick any)
.data$r:0000F358                 public ??_R0?AVTiXmlAttribute@@@8
.data$r:0000F358 ; class TiXmlAttribute `RTTI Type Descriptor'
.data$r:0000F358 ??_R0?AVTiXmlAttribute@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F358                                         ; DATA XREF: .rdata$r:0000F350o
.data$r:0000F358                                         ; .rdata$r:TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F358                                         ; const type_info::`vftable'
.data$r:0000F35C                 align 10h
.data$r:0000F360 a_?avtixmlattri db '.?AVTiXmlAttribute@@',0
.data$r:0000F375                 align 4
.data$r:0000F375 _data$r         ends
.data$r:0000F375
.rdata$r:0000F378 ; ===========================================================================
.rdata$r:0000F378
.rdata$r:0000F378 ; Segment type: Pure data
.rdata$r:0000F378 ; Segment permissions: Read
.rdata$r:0000F378 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F378                 assume cs:_rdata$r
.rdata$r:0000F378                 ;org 0F378h
.rdata$r:0000F378 ; COMDAT (pick any)
.rdata$r:0000F378                 public ??_R3TiXmlAttribute@@8
.rdata$r:0000F378 ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F378 ??_R3TiXmlAttribute@@8 db    0          ; DATA XREF: .rdata$r:0000F354o
.rdata$r:0000F378                                         ; .rdata$r:0000F3ACo
.rdata$r:0000F379                 db    0
.rdata$r:0000F37A                 db    0
.rdata$r:0000F37B                 db    0
.rdata$r:0000F37C                 db    0
.rdata$r:0000F37D                 db    0
.rdata$r:0000F37E                 db    0
.rdata$r:0000F37F                 db    0
.rdata$r:0000F380                 db    2
.rdata$r:0000F381                 db    0
.rdata$r:0000F382                 db    0
.rdata$r:0000F383                 db    0
.rdata$r:0000F384                 dd offset ??_R2TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Base Class Array'
.rdata$r:0000F384 _rdata$r        ends
.rdata$r:0000F384
.rdata$r:0000F388 ; ===========================================================================
.rdata$r:0000F388
.rdata$r:0000F388 ; Segment type: Pure data
.rdata$r:0000F388 ; Segment permissions: Read
.rdata$r:0000F388 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F388                 assume cs:_rdata$r
.rdata$r:0000F388                 ;org 0F388h
.rdata$r:0000F388 ; COMDAT (pick any)
.rdata$r:0000F388                 public ??_R2TiXmlAttribute@@8
.rdata$r:0000F388 ; TiXmlAttribute::`RTTI Base Class Array'
.rdata$r:0000F388 ??_R2TiXmlAttribute@@8 dd offset ??_R1A@?0A@EA@TiXmlAttribute@@8
.rdata$r:0000F388                                         ; DATA XREF: .rdata$r:0000F384o
.rdata$r:0000F388                                         ; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F38C                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F390                 db    0
.rdata$r:0000F391                 align 4
.rdata$r:0000F391 _rdata$r        ends
.rdata$r:0000F391
.rdata$r:0000F394 ; ===========================================================================
.rdata$r:0000F394
.rdata$r:0000F394 ; Segment type: Pure data
.rdata$r:0000F394 ; Segment permissions: Read
.rdata$r:0000F394 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F394                 assume cs:_rdata$r
.rdata$r:0000F394                 ;org 0F394h
.rdata$r:0000F394 ; COMDAT (pick any)
.rdata$r:0000F394                 public ??_R1A@?0A@EA@TiXmlAttribute@@8
.rdata$r:0000F394 ; TiXmlAttribute::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F394 ??_R1A@?0A@EA@TiXmlAttribute@@8 dd offset ??_R0?AVTiXmlAttribute@@@8
.rdata$r:0000F394                                         ; DATA XREF: .rdata$r:TiXmlAttribute::`RTTI Base Class Array'o
.rdata$r:0000F394                                         ; TiXmlAttribute `RTTI Type Descriptor'
.rdata$r:0000F398                 db    1
.rdata$r:0000F399                 db    0
.rdata$r:0000F39A                 db    0
.rdata$r:0000F39B                 db    0
.rdata$r:0000F39C                 db    0
.rdata$r:0000F39D                 db    0
.rdata$r:0000F39E                 db    0
.rdata$r:0000F39F                 db    0
.rdata$r:0000F3A0                 db 0FFh
.rdata$r:0000F3A1                 db 0FFh
.rdata$r:0000F3A2                 db 0FFh
.rdata$r:0000F3A3                 db 0FFh
.rdata$r:0000F3A4                 db    0
.rdata$r:0000F3A5                 db    0
.rdata$r:0000F3A6                 db    0
.rdata$r:0000F3A7                 db    0
.rdata$r:0000F3A8                 db  40h ; @
.rdata$r:0000F3A9                 db    0
.rdata$r:0000F3AA                 db    0
.rdata$r:0000F3AB                 db    0
.rdata$r:0000F3AC                 dd offset ??_R3TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F3AC _rdata$r        ends
.rdata$r:0000F3AC
.rdata$r:0000F3B0 ; ===========================================================================
.rdata$r:0000F3B0
.rdata$r:0000F3B0 ; Segment type: Pure data
.rdata$r:0000F3B0 ; Segment permissions: Read
.rdata$r:0000F3B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F3B0                 assume cs:_rdata$r
.rdata$r:0000F3B0                 ;org 0F3B0h
.rdata$r:0000F3B0 ; COMDAT (pick any)
.rdata$r:0000F3B0                 public ??_R4TiXmlText@@6B@
.rdata$r:0000F3B0 ; const TiXmlText::`RTTI Complete Object Locator'
.rdata$r:0000F3B0 ??_R4TiXmlText@@6B@ db    0             ; DATA XREF: .rdata:0000E4F0o
.rdata$r:0000F3B1                 db    0
.rdata$r:0000F3B2                 db    0
.rdata$r:0000F3B3                 db    0
.rdata$r:0000F3B4                 db    0
.rdata$r:0000F3B5                 db    0
.rdata$r:0000F3B6                 db    0
.rdata$r:0000F3B7                 db    0
.rdata$r:0000F3B8                 db    0
.rdata$r:0000F3B9                 db    0
.rdata$r:0000F3BA                 db    0
.rdata$r:0000F3BB                 db    0
.rdata$r:0000F3BC                 dd offset ??_R0?AVTiXmlText@@@8 ; TiXmlText `RTTI Type Descriptor'
.rdata$r:0000F3C0                 dd offset ??_R3TiXmlText@@8 ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F3C0 _rdata$r        ends
.rdata$r:0000F3C0
.data$r:0000F3C4 ; ===========================================================================
.data$r:0000F3C4
.data$r:0000F3C4 ; Segment type: Pure data
.data$r:0000F3C4 ; Segment permissions: Read/Write
.data$r:0000F3C4 _data$r         segment dword public 'DATA' use32
.data$r:0000F3C4                 assume cs:_data$r
.data$r:0000F3C4                 ;org 0F3C4h
.data$r:0000F3C4 ; COMDAT (pick any)
.data$r:0000F3C4                 public ??_R0?AVTiXmlText@@@8
.data$r:0000F3C4 ; class TiXmlText `RTTI Type Descriptor'
.data$r:0000F3C4 ??_R0?AVTiXmlText@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F3C4                                         ; DATA XREF: .rdata$r:0000F3BCo
.data$r:0000F3C4                                         ; .rdata$r:TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F3C4                                         ; const type_info::`vftable'
.data$r:0000F3C8                 db    0
.data$r:0000F3C9                 db    0
.data$r:0000F3CA                 db    0
.data$r:0000F3CB                 db    0
.data$r:0000F3CC                 db  2Eh ; .
.data$r:0000F3CD                 db  3Fh ; ?
.data$r:0000F3CE                 db  41h ; A
.data$r:0000F3CF                 db  56h ; V
.data$r:0000F3D0                 db  54h ; T
.data$r:0000F3D1                 db  69h ; i
.data$r:0000F3D2                 db  58h ; X
.data$r:0000F3D3                 db  6Dh ; m
.data$r:0000F3D4                 db  6Ch ; l
.data$r:0000F3D5                 db  54h ; T
.data$r:0000F3D6                 db  65h ; e
.data$r:0000F3D7                 db  78h ; x
.data$r:0000F3D8                 db  74h ; t
.data$r:0000F3D9                 db  40h ; @
.data$r:0000F3DA                 db  40h ; @
.data$r:0000F3DB                 db    0
.data$r:0000F3DB _data$r         ends
.data$r:0000F3DB
.rdata$r:0000F3DC ; ===========================================================================
.rdata$r:0000F3DC
.rdata$r:0000F3DC ; Segment type: Pure data
.rdata$r:0000F3DC ; Segment permissions: Read
.rdata$r:0000F3DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F3DC                 assume cs:_rdata$r
.rdata$r:0000F3DC                 ;org 0F3DCh
.rdata$r:0000F3DC ; COMDAT (pick any)
.rdata$r:0000F3DC                 public ??_R3TiXmlText@@8
.rdata$r:0000F3DC ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F3DC ??_R3TiXmlText@@8 db    0               ; DATA XREF: .rdata$r:0000F3C0o
.rdata$r:0000F3DC                                         ; .rdata$r:0000F414o
.rdata$r:0000F3DD                 db    0
.rdata$r:0000F3DE                 db    0
.rdata$r:0000F3DF                 db    0
.rdata$r:0000F3E0                 db    0
.rdata$r:0000F3E1                 db    0
.rdata$r:0000F3E2                 db    0
.rdata$r:0000F3E3                 db    0
.rdata$r:0000F3E4                 db    3
.rdata$r:0000F3E5                 db    0
.rdata$r:0000F3E6                 db    0
.rdata$r:0000F3E7                 db    0
.rdata$r:0000F3E8                 dd offset ??_R2TiXmlText@@8 ; TiXmlText::`RTTI Base Class Array'
.rdata$r:0000F3E8 _rdata$r        ends
.rdata$r:0000F3E8
.rdata$r:0000F3EC ; ===========================================================================
.rdata$r:0000F3EC
.rdata$r:0000F3EC ; Segment type: Pure data
.rdata$r:0000F3EC ; Segment permissions: Read
.rdata$r:0000F3EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F3EC                 assume cs:_rdata$r
.rdata$r:0000F3EC                 ;org 0F3ECh
.rdata$r:0000F3EC ; COMDAT (pick any)
.rdata$r:0000F3EC                 public ??_R2TiXmlText@@8
.rdata$r:0000F3EC ; TiXmlText::`RTTI Base Class Array'
.rdata$r:0000F3EC ??_R2TiXmlText@@8 dd offset ??_R1A@?0A@EA@TiXmlText@@8
.rdata$r:0000F3EC                                         ; DATA XREF: .rdata$r:0000F3E8o
.rdata$r:0000F3EC                                         ; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F3F0                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F3F4                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F3F8                 db    0
.rdata$r:0000F3F9                 align 4
.rdata$r:0000F3F9 _rdata$r        ends
.rdata$r:0000F3F9
.rdata$r:0000F3FC ; ===========================================================================
.rdata$r:0000F3FC
.rdata$r:0000F3FC ; Segment type: Pure data
.rdata$r:0000F3FC ; Segment permissions: Read
.rdata$r:0000F3FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F3FC                 assume cs:_rdata$r
.rdata$r:0000F3FC                 ;org 0F3FCh
.rdata$r:0000F3FC ; COMDAT (pick any)
.rdata$r:0000F3FC                 public ??_R1A@?0A@EA@TiXmlText@@8
.rdata$r:0000F3FC ; TiXmlText::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F3FC ??_R1A@?0A@EA@TiXmlText@@8 dd offset ??_R0?AVTiXmlText@@@8
.rdata$r:0000F3FC                                         ; DATA XREF: .rdata$r:TiXmlText::`RTTI Base Class Array'o
.rdata$r:0000F3FC                                         ; TiXmlText `RTTI Type Descriptor'
.rdata$r:0000F400                 db    2
.rdata$r:0000F401                 db    0
.rdata$r:0000F402                 db    0
.rdata$r:0000F403                 db    0
.rdata$r:0000F404                 db    0
.rdata$r:0000F405                 db    0
.rdata$r:0000F406                 db    0
.rdata$r:0000F407                 db    0
.rdata$r:0000F408                 db 0FFh
.rdata$r:0000F409                 db 0FFh
.rdata$r:0000F40A                 db 0FFh
.rdata$r:0000F40B                 db 0FFh
.rdata$r:0000F40C                 db    0
.rdata$r:0000F40D                 db    0
.rdata$r:0000F40E                 db    0
.rdata$r:0000F40F                 db    0
.rdata$r:0000F410                 db  40h ; @
.rdata$r:0000F411                 db    0
.rdata$r:0000F412                 db    0
.rdata$r:0000F413                 db    0
.rdata$r:0000F414                 dd offset ??_R3TiXmlText@@8 ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F414 _rdata$r        ends
.rdata$r:0000F414
.rdata$r:0000F418 ; ===========================================================================
.rdata$r:0000F418
.rdata$r:0000F418 ; Segment type: Pure data
.rdata$r:0000F418 ; Segment permissions: Read
.rdata$r:0000F418 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F418                 assume cs:_rdata$r
.rdata$r:0000F418                 ;org 0F418h
.rdata$r:0000F418 ; COMDAT (pick any)
.rdata$r:0000F418                 public ??_R4TiXmlDeclaration@@6B@
.rdata$r:0000F418 ; const TiXmlDeclaration::`RTTI Complete Object Locator'
.rdata$r:0000F418 ??_R4TiXmlDeclaration@@6B@ db    0      ; DATA XREF: .rdata:0000E510o
.rdata$r:0000F419                 db    0
.rdata$r:0000F41A                 db    0
.rdata$r:0000F41B                 db    0
.rdata$r:0000F41C                 db    0
.rdata$r:0000F41D                 db    0
.rdata$r:0000F41E                 db    0
.rdata$r:0000F41F                 db    0
.rdata$r:0000F420                 db    0
.rdata$r:0000F421                 db    0
.rdata$r:0000F422                 db    0
.rdata$r:0000F423                 db    0
.rdata$r:0000F424                 dd offset ??_R0?AVTiXmlDeclaration@@@8 ; TiXmlDeclaration `RTTI Type Descriptor'
.rdata$r:0000F428                 dd offset ??_R3TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F428 _rdata$r        ends
.rdata$r:0000F428
.data$r:0000F42C ; ===========================================================================
.data$r:0000F42C
.data$r:0000F42C ; Segment type: Pure data
.data$r:0000F42C ; Segment permissions: Read/Write
.data$r:0000F42C _data$r         segment dword public 'DATA' use32
.data$r:0000F42C                 assume cs:_data$r
.data$r:0000F42C                 ;org 0F42Ch
.data$r:0000F42C ; COMDAT (pick any)
.data$r:0000F42C                 public ??_R0?AVTiXmlDeclaration@@@8
.data$r:0000F42C ; class TiXmlDeclaration `RTTI Type Descriptor'
.data$r:0000F42C ??_R0?AVTiXmlDeclaration@@@8 dd offset ??_7type_info@@6B@
.data$r:0000F42C                                         ; DATA XREF: .rdata$r:0000F424o
.data$r:0000F42C                                         ; .rdata$r:TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000F42C                                         ; const type_info::`vftable'
.data$r:0000F430                 db    0
.data$r:0000F431                 db    0
.data$r:0000F432                 db    0
.data$r:0000F433                 db    0
.data$r:0000F434                 db  2Eh ; .
.data$r:0000F435                 db  3Fh ; ?
.data$r:0000F436                 db  41h ; A
.data$r:0000F437                 db  56h ; V
.data$r:0000F438                 db  54h ; T
.data$r:0000F439                 db  69h ; i
.data$r:0000F43A                 db  58h ; X
.data$r:0000F43B                 db  6Dh ; m
.data$r:0000F43C                 db  6Ch ; l
.data$r:0000F43D                 db  44h ; D
.data$r:0000F43E                 db  65h ; e
.data$r:0000F43F                 db  63h ; c
.data$r:0000F440                 db  6Ch ; l
.data$r:0000F441                 db  61h ; a
.data$r:0000F442                 db  72h ; r
.data$r:0000F443                 db  61h ; a
.data$r:0000F444                 db  74h ; t
.data$r:0000F445                 db  69h ; i
.data$r:0000F446                 db  6Fh ; o
.data$r:0000F447                 db  6Eh ; n
.data$r:0000F448                 db  40h ; @
.data$r:0000F449                 db  40h ; @
.data$r:0000F44A                 db    0
.data$r:0000F44B                 align 4
.data$r:0000F44B _data$r         ends
.data$r:0000F44B
.rdata$r:0000F44C ; ===========================================================================
.rdata$r:0000F44C
.rdata$r:0000F44C ; Segment type: Pure data
.rdata$r:0000F44C ; Segment permissions: Read
.rdata$r:0000F44C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F44C                 assume cs:_rdata$r
.rdata$r:0000F44C                 ;org 0F44Ch
.rdata$r:0000F44C ; COMDAT (pick any)
.rdata$r:0000F44C                 public ??_R3TiXmlDeclaration@@8
.rdata$r:0000F44C ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F44C ??_R3TiXmlDeclaration@@8 db    0        ; DATA XREF: .rdata$r:0000F428o
.rdata$r:0000F44C                                         ; .rdata$r:0000F484o
.rdata$r:0000F44D                 db    0
.rdata$r:0000F44E                 db    0
.rdata$r:0000F44F                 db    0
.rdata$r:0000F450                 db    0
.rdata$r:0000F451                 db    0
.rdata$r:0000F452                 db    0
.rdata$r:0000F453                 db    0
.rdata$r:0000F454                 db    3
.rdata$r:0000F455                 db    0
.rdata$r:0000F456                 db    0
.rdata$r:0000F457                 db    0
.rdata$r:0000F458                 dd offset ??_R2TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Base Class Array'
.rdata$r:0000F458 _rdata$r        ends
.rdata$r:0000F458
.rdata$r:0000F45C ; ===========================================================================
.rdata$r:0000F45C
.rdata$r:0000F45C ; Segment type: Pure data
.rdata$r:0000F45C ; Segment permissions: Read
.rdata$r:0000F45C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F45C                 assume cs:_rdata$r
.rdata$r:0000F45C                 ;org 0F45Ch
.rdata$r:0000F45C ; COMDAT (pick any)
.rdata$r:0000F45C                 public ??_R2TiXmlDeclaration@@8
.rdata$r:0000F45C ; TiXmlDeclaration::`RTTI Base Class Array'
.rdata$r:0000F45C ??_R2TiXmlDeclaration@@8 dd offset ??_R1A@?0A@EA@TiXmlDeclaration@@8
.rdata$r:0000F45C                                         ; DATA XREF: .rdata$r:0000F458o
.rdata$r:0000F45C                                         ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F460                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F464                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F468                 db    0
.rdata$r:0000F469                 align 4
.rdata$r:0000F469 _rdata$r        ends
.rdata$r:0000F469
.rdata$r:0000F46C ; ===========================================================================
.rdata$r:0000F46C
.rdata$r:0000F46C ; Segment type: Pure data
.rdata$r:0000F46C ; Segment permissions: Read
.rdata$r:0000F46C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F46C                 assume cs:_rdata$r
.rdata$r:0000F46C                 ;org 0F46Ch
.rdata$r:0000F46C ; COMDAT (pick any)
.rdata$r:0000F46C                 public ??_R1A@?0A@EA@TiXmlDeclaration@@8
.rdata$r:0000F46C ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F46C ??_R1A@?0A@EA@TiXmlDeclaration@@8 dd offset ??_R0?AVTiXmlDeclaration@@@8
.rdata$r:0000F46C                                         ; DATA XREF: .rdata$r:TiXmlDeclaration::`RTTI Base Class Array'o
.rdata$r:0000F46C                                         ; TiXmlDeclaration `RTTI Type Descriptor'
.rdata$r:0000F470                 db    2
.rdata$r:0000F471                 db    0
.rdata$r:0000F472                 db    0
.rdata$r:0000F473                 db    0
.rdata$r:0000F474                 db    0
.rdata$r:0000F475                 db    0
.rdata$r:0000F476                 db    0
.rdata$r:0000F477                 db    0
.rdata$r:0000F478                 db 0FFh
.rdata$r:0000F479                 db 0FFh
.rdata$r:0000F47A                 db 0FFh
.rdata$r:0000F47B                 db 0FFh
.rdata$r:0000F47C                 db    0
.rdata$r:0000F47D                 db    0
.rdata$r:0000F47E                 db    0
.rdata$r:0000F47F                 db    0
.rdata$r:0000F480                 db  40h ; @
.rdata$r:0000F481                 db    0
.rdata$r:0000F482                 db    0
.rdata$r:0000F483                 db    0
.rdata$r:0000F484                 dd offset ??_R3TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F484 _rdata$r        ends
.rdata$r:0000F484
.rdata$r:0000F488 ; ===========================================================================
.rdata$r:0000F488
.rdata$r:0000F488 ; Segment type: Pure data
.rdata$r:0000F488 ; Segment permissions: Read
.rdata$r:0000F488 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F488                 assume cs:_rdata$r
.rdata$r:0000F488                 ;org 0F488h
.rdata$r:0000F488 ; COMDAT (pick any)
.rdata$r:0000F488                 public ??_R4TiXmlBase@@6B@
.rdata$r:0000F488 ; const TiXmlBase::`RTTI Complete Object Locator'
.rdata$r:0000F488 ??_R4TiXmlBase@@6B@ db    0             ; DATA XREF: .rdata:0000E464o
.rdata$r:0000F489                 db    0
.rdata$r:0000F48A                 db    0
.rdata$r:0000F48B                 db    0
.rdata$r:0000F48C                 db    0
.rdata$r:0000F48D                 db    0
.rdata$r:0000F48E                 db    0
.rdata$r:0000F48F                 db    0
.rdata$r:0000F490                 db    0
.rdata$r:0000F491                 db    0
.rdata$r:0000F492                 db    0
.rdata$r:0000F493                 db    0
.rdata$r:0000F494                 dd offset ??_R0?AVTiXmlBase@@@8 ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:0000F498                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F498 _rdata$r        ends
.rdata$r:0000F498
.rdata$r:0000F49C ; ===========================================================================
.rdata$r:0000F49C
.rdata$r:0000F49C ; Segment type: Pure data
.rdata$r:0000F49C ; Segment permissions: Read
.rdata$r:0000F49C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F49C                 assume cs:_rdata$r
.rdata$r:0000F49C                 ;org 0F49Ch
.rdata$r:0000F49C ; COMDAT (pick any)
.rdata$r:0000F49C                 public ??_R4TiXmlNode@@6B@
.rdata$r:0000F49C ; const TiXmlNode::`RTTI Complete Object Locator'
.rdata$r:0000F49C ??_R4TiXmlNode@@6B@ db    0             ; DATA XREF: .rdata:0000E478o
.rdata$r:0000F49D                 db    0
.rdata$r:0000F49E                 db    0
.rdata$r:0000F49F                 db    0
.rdata$r:0000F4A0                 db    0
.rdata$r:0000F4A1                 db    0
.rdata$r:0000F4A2                 db    0
.rdata$r:0000F4A3                 db    0
.rdata$r:0000F4A4                 db    0
.rdata$r:0000F4A5                 db    0
.rdata$r:0000F4A6                 db    0
.rdata$r:0000F4A7                 db    0
.rdata$r:0000F4A8                 dd offset ??_R0?AVTiXmlNode@@@8 ; TiXmlNode `RTTI Type Descriptor'
.rdata$r:0000F4AC                 dd offset ??_R3TiXmlNode@@8 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F4AC _rdata$r        ends
.rdata$r:0000F4AC
.rdata:0000F4B0 ; ===========================================================================
.rdata:0000F4B0
.rdata:0000F4B0 ; Segment type: Pure data
.rdata:0000F4B0 ; Segment permissions: Read
.rdata:0000F4B0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000F4B0 _rdata          segment para public 'DATA' use32
.rdata:0000F4B0                 assume cs:_rdata
.rdata:0000F4B0                 ;org 0F4B0h
.rdata:0000F4B0 ; COMDAT (pick any)
.rdata:0000F4B0                 public __real@0000000000000000
.rdata:0000F4B0 __real@0000000000000000 dq 0            ; DATA XREF: TiXmlElement::Attribute(wchar_t const *,double *)+3Ar
.rdata:0000F4B0 _rdata          ends
.rdata:0000F4B0
.CRT$XCU:0000F4B8 ; ===========================================================================
.CRT$XCU:0000F4B8
.CRT$XCU:0000F4B8 ; Segment type: Pure data
.CRT$XCU:0000F4B8 ; Segment permissions: Read
.CRT$XCU:0000F4B8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4B8                 assume cs:_CRT$XCU
.CRT$XCU:0000F4B8                 ;org 0F4B8h
.CRT$XCU:0000F4B8 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000F4BC _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000F4BC _CRT$XCU        ends
.CRT$XCU:0000F4BC
.CRT$XCU:0000F4C0 ; ===========================================================================
.CRT$XCU:0000F4C0
.CRT$XCU:0000F4C0 ; Segment type: Pure data
.CRT$XCU:0000F4C0 ; Segment permissions: Read
.CRT$XCU:0000F4C0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4C0                 assume cs:_CRT$XCU
.CRT$XCU:0000F4C0                 ;org 0F4C0h
.CRT$XCU:0000F4C0 ; COMDAT (pick associative to section at E280)
.CRT$XCU:0000F4C0 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000F4C0 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000F4C0 _CRT$XCU        ends
.CRT$XCU:0000F4C0
.CRT$XCU:0000F4C4 ; ===========================================================================
.CRT$XCU:0000F4C4
.CRT$XCU:0000F4C4 ; Segment type: Pure data
.CRT$XCU:0000F4C4 ; Segment permissions: Read
.CRT$XCU:0000F4C4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4C4                 assume cs:_CRT$XCU
.CRT$XCU:0000F4C4                 ;org 0F4C4h
.CRT$XCU:0000F4C4 ; COMDAT (pick associative to section at E284)
.CRT$XCU:0000F4C4 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000F4C4 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000F4C4 _CRT$XCU        ends
.CRT$XCU:0000F4C4
.CRT$XCU:0000F4C8 ; ===========================================================================
.CRT$XCU:0000F4C8
.CRT$XCU:0000F4C8 ; Segment type: Pure data
.CRT$XCU:0000F4C8 ; Segment permissions: Read
.CRT$XCU:0000F4C8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4C8                 assume cs:_CRT$XCU
.CRT$XCU:0000F4C8                 ;org 0F4C8h
.CRT$XCU:0000F4C8 ; COMDAT (pick associative to section at E288)
.CRT$XCU:0000F4C8 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000F4C8 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000F4C8 _CRT$XCU        ends
.CRT$XCU:0000F4C8
.CRT$XCU:0000F4CC ; ===========================================================================
.CRT$XCU:0000F4CC
.CRT$XCU:0000F4CC ; Segment type: Pure data
.CRT$XCU:0000F4CC ; Segment permissions: Read
.CRT$XCU:0000F4CC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4CC                 assume cs:_CRT$XCU
.CRT$XCU:0000F4CC                 ;org 0F4CCh
.CRT$XCU:0000F4CC ; COMDAT (pick associative to section at E45C)
.CRT$XCU:0000F4CC ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000F4CC ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000F4CC _CRT$XCU        ends
.CRT$XCU:0000F4CC
.CRT$XCU:0000F4D0 ; ===========================================================================
.CRT$XCU:0000F4D0
.CRT$XCU:0000F4D0 ; Segment type: Pure data
.CRT$XCU:0000F4D0 ; Segment permissions: Read
.CRT$XCU:0000F4D0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4D0                 assume cs:_CRT$XCU
.CRT$XCU:0000F4D0                 ;org 0F4D0h
.CRT$XCU:0000F4D0 ; COMDAT (pick associative to section at E460)
.CRT$XCU:0000F4D0 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000F4D0 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000F4D0 _CRT$XCU        ends
.CRT$XCU:0000F4D0
.CRT$XCU:0000F4D4 ; ===========================================================================
.CRT$XCU:0000F4D4
.CRT$XCU:0000F4D4 ; Segment type: Pure data
.CRT$XCU:0000F4D4 ; Segment permissions: Read
.CRT$XCU:0000F4D4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4D4                 assume cs:_CRT$XCU
.CRT$XCU:0000F4D4                 ;org 0F4D4h
.CRT$XCU:0000F4D4 ; COMDAT (pick associative to section at E69C)
.CRT$XCU:0000F4D4 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000F4D4 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000F4D4 _CRT$XCU        ends
.CRT$XCU:0000F4D4
.CRT$XCU:0000F4D8 ; ===========================================================================
.CRT$XCU:0000F4D8
.CRT$XCU:0000F4D8 ; Segment type: Pure data
.CRT$XCU:0000F4D8 ; Segment permissions: Read
.CRT$XCU:0000F4D8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000F4D8                 assume cs:_CRT$XCU
.CRT$XCU:0000F4D8                 ;org 0F4D8h
.CRT$XCU:0000F4D8 ; COMDAT (pick associative to section at E6A0)
.CRT$XCU:0000F4D8 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000F4D8 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000F4D8 _CRT$XCU        ends
.CRT$XCU:0000F4D8
UNDEF:0000F4E0 ; ===========================================================================
UNDEF:0000F4E0
UNDEF:0000F4E0 ; Segment type: Externs
UNDEF:0000F4E0 ; UNDEF
UNDEF:0000F4E0                 extrn __purecall:near   ; DATA XREF: .rdata:0000E06Co
UNDEF:0000F4E0                                         ; .rdata:0000E070o ...
UNDEF:0000F4E4 ; void *__cdecl operator new(unsigned int)
UNDEF:0000F4E4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+50p
UNDEF:0000F4E4                                         ; TiXmlElement::Clone(void)+2Dp ...
UNDEF:0000F4E8 ; void __cdecl operator delete(void *)
UNDEF:0000F4E8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?SetAttribute@TiXmlElement@@QAEXPB_W0@Z$0+4p
UNDEF:0000F4E8                                         ; __unwindfunclet$?Clone@TiXmlElement@@UBEPAVTiXmlNode@@XZ$0+4p ...
UNDEF:0000F4EC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000F4EC                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000F4EC                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000F4F0 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000F4F0                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000F4F0                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+2Ap
UNDEF:0000F4F0                                         ; std::_Locinfo::_Locinfo(char const *)+2Dp ...
UNDEF:0000F4F4 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000F4F4                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000F4F4                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+E0p
UNDEF:0000F4F4                                         ; __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0+3j ...
UNDEF:0000F4F8                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000F4FC ; int __cdecl fclose(FILE *File)
UNDEF:0000F4FC                 extrn _fclose:near      ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+E4p
UNDEF:0000F4FC                                         ; TiXmlDocument::LoadFile(wchar_t const *)+15Bp ...
UNDEF:0000F500 ; int __cdecl fputs(const char *Str, FILE *File)
UNDEF:0000F500                 extrn _fputs:near       ; CODE XREF: TiXmlComment::Print(_iobuf *,int)+2Cp
UNDEF:0000F504 ; int __cdecl fseek(FILE *File, __int32 Offset, int Origin)
UNDEF:0000F504                 extrn _fseek:near       ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+A4p
UNDEF:0000F504                                         ; TiXmlDocument::LoadFile(wchar_t const *)+CCp
UNDEF:0000F508 ; __int32 __cdecl ftell(FILE *File)
UNDEF:0000F508                 extrn _ftell:near       ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+B3p
UNDEF:0000F50C ; wchar_t *__cdecl fgetws(wchar_t *Dst, int SizeInWords, FILE *File)
UNDEF:0000F50C                 extrn _fgetws:near      ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+134p
UNDEF:0000F510 ; int fwprintf(FILE *File, const wchar_t *Format, ...)
UNDEF:0000F510                 extrn _fwprintf:near    ; CODE XREF: TiXmlAttribute::Print(_iobuf *,int)+E6p
UNDEF:0000F510                                         ; TiXmlAttribute::Print(_iobuf *,int)+10Bp ...
UNDEF:0000F514 ; int swscanf(const wchar_t *Src, const wchar_t *Format, ...)
UNDEF:0000F514                 extrn _swscanf:near     ; CODE XREF: TiXmlAttribute::QueryIntValue(int *)+1Cp
UNDEF:0000F514                                         ; TiXmlAttribute::QueryDoubleValue(double *)+1Cp
UNDEF:0000F518 ; FILE *__cdecl _wfopen(const wchar_t *Filename, const wchar_t *Mode)
UNDEF:0000F518                 extrn __wfopen:near     ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+74p
UNDEF:0000F518                                         ; TiXmlDocument::SaveFile(wchar_t const *)+12p
UNDEF:0000F51C ; void __cdecl free(void *Memory)
UNDEF:0000F51C                 extrn _free:near        ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+1Bp
UNDEF:0000F51C                                         ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+1Bp ...
UNDEF:0000F520 ; double __cdecl _wtof(const wchar_t *Str)
UNDEF:0000F520                 extrn __wtof:near       ; CODE XREF: TiXmlAttribute::DoubleValue(void)+13p
UNDEF:0000F520                                         ; TiXmlElement::Attribute(wchar_t const *,double *)+28p
UNDEF:0000F524 ; int __cdecl _wtoi(const wchar_t *Str)
UNDEF:0000F524                 extrn __wtoi:near       ; CODE XREF: TiXmlAttribute::IntValue(void)+13p
UNDEF:0000F524                                         ; TiXmlElement::Attribute(wchar_t const *,int *)+28p
UNDEF:0000F528 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000F528                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000F528                                         ; _wmemcpy+11p
UNDEF:0000F52C ; size_t __cdecl strlen(const char *Str)
UNDEF:0000F52C                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000F530 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000F530                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000F530                                         ; _wmemmove+11p
UNDEF:0000F534 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000F534                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000F538 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:0000F538                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:0000F538                                         ; CODE XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
UNDEF:0000F538                                         ; std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0000F53C ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000F53C                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000F53C                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0000F53C                                         ; DATA XREF: .xdata$x:0000E050o
UNDEF:0000F540 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:0000F540                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:0000F540                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:0000F540                                         ; __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0+3j ...
UNDEF:0000F544 ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:0000F544                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:0000F544                                         ; DATA XREF: .rdata:0000DFC0o
UNDEF:0000F544                                         ; .rdata:0000E1D4o ...
UNDEF:0000F548 ; bool __cdecl std::uncaught_exception()
UNDEF:0000F548                 extrn ?uncaught_exception@std@@YA_NXZ:near
UNDEF:0000F548                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+2Dp
UNDEF:0000F54C ; void __cdecl operator delete[](void *)
UNDEF:0000F54C                 extrn ??_V@YAXPAX@Z:near
UNDEF:0000F54C                                         ; CODE XREF: TiXmlBase::StringToBuffer::~StringToBuffer(void)+15p
UNDEF:0000F550 ; void *__cdecl operator new[](unsigned int)
UNDEF:0000F550                 extrn ??_U@YAPAXI@Z:near
UNDEF:0000F550                                         ; CODE XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
UNDEF:0000F554                 extrn __free_dbg:near   ; CODE XREF: std::_Yarn<char>::_Tidy(void)+17p
UNDEF:0000F554                                         ; std::_Yarn<wchar_t>::_Tidy(void)+17p
UNDEF:0000F558 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000F558                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000F558                                         ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+16p
UNDEF:0000F558                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p ...
UNDEF:0000F55C ; void __cdecl std::_Xbad_alloc()
UNDEF:0000F55C                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000F55C                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_419Ap
UNDEF:0000F55C                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_41DCp ...
UNDEF:0000F560 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000F560                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000F560                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000F560                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:0000F564 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000F564                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000F564                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000F564                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000F568 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:0000F568                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F568                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:0000F56C ; _DWORD __thiscall std::bad_cast::bad_cast(std::bad_cast *__hidden this, const char *)
UNDEF:0000F56C                 extrn ??0bad_cast@std@@QAE@PBD@Z:near
UNDEF:0000F56C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+8Dp
UNDEF:0000F570 ; public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)
UNDEF:0000F570                 extrn ??0bad_cast@std@@QAE@ABV01@@Z:near
UNDEF:0000F570                                         ; DATA XREF: .xdata$x:0000E794o
UNDEF:0000F574 ; public: virtual __thiscall std::bad_cast::~bad_cast(void)
UNDEF:0000F574                 extrn ??1bad_cast@std@@UAE@XZ:near
UNDEF:0000F574                                         ; DATA XREF: .xdata$x:0000E748o
UNDEF:0000F578                 extrn __Getctype:near   ; CODE XREF: std::_Locinfo::_Getctype(void)+Dp
UNDEF:0000F57C                 extrn __Getcvt:near     ; CODE XREF: std::_Locinfo::_Getcvt(void)+19p
UNDEF:0000F580                 extrn __Mbrtowc:near    ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+25p
UNDEF:0000F584                 extrn __Wcrtomb:near    ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+2Ep
UNDEF:0000F588                 extrn __Getwctype:near  ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+15p
UNDEF:0000F58C                 extrn __Getwctypes:near ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+4Ap
UNDEF:0000F590                 extrn __Towlower:near   ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+42p
UNDEF:0000F590                                         ; std::ctype<wchar_t>::do_tolower(wchar_t)+13p
UNDEF:0000F594                 extrn __Towupper:near   ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+42p
UNDEF:0000F594                                         ; std::ctype<wchar_t>::do_toupper(wchar_t)+13p
UNDEF:0000F598 ; void __cdecl static std::_Locinfo::_Locinfo_ctor(struct std::_Locinfo *, const char *)
UNDEF:0000F598                 extrn ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:near
UNDEF:0000F598                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+BCp
UNDEF:0000F59C ; void __cdecl static std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *)
UNDEF:0000F59C                 extrn ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:near
UNDEF:0000F59C                                         ; CODE XREF: std::_Locinfo::~_Locinfo(void)+31p
UNDEF:0000F5A0 ; void *__cdecl operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
UNDEF:0000F5A0                 extrn ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z:near
UNDEF:0000F5A0                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+21p
UNDEF:0000F5A0                                         ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)+13p ...
UNDEF:0000F5A4 ; const struct std::_DebugHeapTag_t *__cdecl std::_DebugHeapTag_func()
UNDEF:0000F5A4                 extrn ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ:near
UNDEF:0000F5A4                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::basic_streambuf<wchar_t,std::char_traits<wchar_t>>(void)+19p
UNDEF:0000F5A4                                         ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+42p ...
UNDEF:0000F5A8 ; public: virtual void * __thiscall std::_Facet_base::`vector deleting destructor'(unsigned int)
UNDEF:0000F5A8                 extrn ??_E_Facet_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5A8                                         ; DATA XREF: .rdata:const std::_Facet_base::`vftable'o
UNDEF:0000F5AC ; void __cdecl std::_Facet_Register(struct std::_Facet_base *)
UNDEF:0000F5AC                 extrn ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:near
UNDEF:0000F5AC                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+C8p
UNDEF:0000F5B0 ; protected: virtual void * __thiscall std::locale::facet::`vector deleting destructor'(unsigned int)
UNDEF:0000F5B0                 extrn ??_Efacet@locale@std@@MAEPAXI@Z:near ; weak
UNDEF:0000F5B0                                         ; DATA XREF: .rdata:const std::locale::facet::`vftable'o
UNDEF:0000F5B4 ; struct std::locale::_Locimp *__cdecl static std::locale::_Init(bool)
UNDEF:0000F5B4                 extrn ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:near
UNDEF:0000F5B4                                         ; CODE XREF: std::locale::locale(void)+9p
UNDEF:0000F5B8 ; struct std::locale::_Locimp *__cdecl static std::locale::_Getgloballocale()
UNDEF:0000F5B8                 extrn ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:near
UNDEF:0000F5B8                                         ; CODE XREF: std::locale::_Getfacet(uint):loc_8A88p
UNDEF:0000F5BC ; public: virtual void * __thiscall std::ctype_base::`vector deleting destructor'(unsigned int)
UNDEF:0000F5BC                 extrn ??_Ectype_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5BC                                         ; DATA XREF: .rdata:const std::ctype_base::`vftable'o
UNDEF:0000F5C0 ; protected: virtual void * __thiscall std::ctype<wchar_t>::`vector deleting destructor'(unsigned int)
UNDEF:0000F5C0                 extrn ??_E?$ctype@_W@std@@MAEPAXI@Z:near ; weak
UNDEF:0000F5C0                                         ; DATA XREF: .rdata:const std::ctype<wchar_t>::`vftable'o
UNDEF:0000F5C4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F5C4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5C4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000F5C8 ; public: virtual void * __thiscall std::_System_error::`vector deleting destructor'(unsigned int)
UNDEF:0000F5C8                 extrn ??_E_System_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5C8                                         ; DATA XREF: .rdata:const std::_System_error::`vftable'o
UNDEF:0000F5CC ; public: virtual void * __thiscall std::system_error::`vector deleting destructor'(unsigned int)
UNDEF:0000F5CC                 extrn ??_Esystem_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5CC                                         ; DATA XREF: .rdata:const std::system_error::`vftable'o
UNDEF:0000F5D0 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000F5D0                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000F5D0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000F5D0                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000F5D4 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000F5D4                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000F5D4                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000F5D8 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F5D8                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5D8                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000F5DC ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F5DC                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5DC                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000F5E0 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000F5E0                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5E0                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000F5E4 ; public: virtual void * __thiscall std::ios_base::failure::`vector deleting destructor'(unsigned int)
UNDEF:0000F5E4                 extrn ??_Efailure@ios_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5E4                                         ; DATA XREF: .rdata:const std::ios_base::failure::`vftable'o
UNDEF:0000F5E8 ; void __cdecl static std::ios_base::_Addstd(struct std::ios_base *)
UNDEF:0000F5E8                 extrn ?_Addstd@ios_base@std@@SAXPAV12@@Z:near
UNDEF:0000F5E8                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::init(std::basic_streambuf<wchar_t,std::char_traits<wchar_t>> *,bool)+54p
UNDEF:0000F5EC ; void __cdecl static std::ios_base::_Ios_base_dtor(struct std::ios_base *)
UNDEF:0000F5EC                 extrn ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:near
UNDEF:0000F5EC                                         ; CODE XREF: std::ios_base::~ios_base(void)+14p
UNDEF:0000F5F0 ; public: virtual void * __thiscall std::ios_base::`vector deleting destructor'(unsigned int)
UNDEF:0000F5F0                 extrn ??_Eios_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5F0                                         ; DATA XREF: .rdata:const std::ios_base::`vftable'o
UNDEF:0000F5F4 ; public: virtual void * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::`vector deleting destructor'(unsigned int)
UNDEF:0000F5F4                 extrn ??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5F4                                         ; DATA XREF: .rdata:const std::basic_ios<wchar_t,std::char_traits<wchar_t>>::`vftable'o
UNDEF:0000F5F8 ; public: virtual void * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::`vector deleting destructor'(unsigned int)
UNDEF:0000F5F8                 extrn ??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F5F8                                         ; DATA XREF: .rdata:const std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::`vftable'o
UNDEF:0000F5FC ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:0000F5FC                 extrn __wassert:near    ; CODE XREF: TiXmlNode::IterateChildren(TiXmlNode *)+33p
UNDEF:0000F5FC                                         ; TiXmlNode::IterateChildren(wchar_t const *,TiXmlNode *)+37p ...
UNDEF:0000F600 ; LPWSTR __stdcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000F600                 extrn __imp__lstrcpyW@8:near
UNDEF:0000F600                                         ; CODE XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+4Fp
UNDEF:0000F600                                         ; DATA XREF: TiXmlBase::StringToBuffer::StringToBuffer(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+4Fr
UNDEF:0000F604 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000F604                 extrn __imp__lstrlenW@4:near
UNDEF:0000F604                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+217p
UNDEF:0000F604                                         ; DATA XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+217r
UNDEF:0000F608 ; int _wsprintfW(LPWSTR, LPCWSTR, ...)
UNDEF:0000F608                 extrn __imp__wsprintfW:near
UNDEF:0000F608                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20Ap
UNDEF:0000F608                                         ; TiXmlAttribute::SetIntValue(int)+29p ...
UNDEF:0000F60C ; public: virtual void * __thiscall TiXmlBase::`vector deleting destructor'(unsigned int)
UNDEF:0000F60C                 extrn ??_ETiXmlBase@@UAEPAXI@Z:near ; weak
UNDEF:0000F60C                                         ; DATA XREF: .rdata:const TiXmlBase::`vftable'o
UNDEF:0000F610 ; public: virtual void * __thiscall TiXmlNode::`vector deleting destructor'(unsigned int)
UNDEF:0000F610                 extrn ??_ETiXmlNode@@UAEPAXI@Z:near ; weak
UNDEF:0000F610                                         ; DATA XREF: .rdata:const TiXmlNode::`vftable'o
UNDEF:0000F614 ; public: virtual wchar_t const * __thiscall TiXmlAttribute::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F614                 extrn ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F614                                         ; DATA XREF: .rdata:0000E4ACo
UNDEF:0000F618 ; public: virtual void * __thiscall TiXmlAttribute::`vector deleting destructor'(unsigned int)
UNDEF:0000F618                 extrn ??_ETiXmlAttribute@@UAEPAXI@Z:near ; weak
UNDEF:0000F618                                         ; DATA XREF: .rdata:const TiXmlAttribute::`vftable'o
UNDEF:0000F61C ; protected: virtual void __thiscall TiXmlElement::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F61C                 extrn ?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F61C                                         ; DATA XREF: .rdata:0000E4CCo
UNDEF:0000F620 ; protected: virtual wchar_t const * __thiscall TiXmlElement::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F620                 extrn ?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F620                                         ; DATA XREF: .rdata:0000E4C0o
UNDEF:0000F624 ; public: virtual void * __thiscall TiXmlElement::`vector deleting destructor'(unsigned int)
UNDEF:0000F624                 extrn ??_ETiXmlElement@@UAEPAXI@Z:near ; weak
UNDEF:0000F624                                         ; DATA XREF: .rdata:const TiXmlElement::`vftable'o
UNDEF:0000F628 ; protected: virtual void __thiscall TiXmlComment::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F628                 extrn ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F628                                         ; DATA XREF: .rdata:0000E4ECo
UNDEF:0000F62C ; protected: virtual wchar_t const * __thiscall TiXmlComment::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F62C                 extrn ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F62C                                         ; DATA XREF: .rdata:0000E4E0o
UNDEF:0000F630 ; public: virtual void * __thiscall TiXmlComment::`vector deleting destructor'(unsigned int)
UNDEF:0000F630                 extrn ??_ETiXmlComment@@UAEPAXI@Z:near ; weak
UNDEF:0000F630                                         ; DATA XREF: .rdata:const TiXmlComment::`vftable'o
UNDEF:0000F634 ; protected: virtual wchar_t const * __thiscall TiXmlText::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F634                 extrn ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F634                                         ; DATA XREF: .rdata:0000E500o
UNDEF:0000F638 ; protected: virtual void __thiscall TiXmlText::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F638                 extrn ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F638                                         ; DATA XREF: .rdata:0000E50Co
UNDEF:0000F63C ; public: virtual void * __thiscall TiXmlText::`vector deleting destructor'(unsigned int)
UNDEF:0000F63C                 extrn ??_ETiXmlText@@UAEPAXI@Z:near ; weak
UNDEF:0000F63C                                         ; DATA XREF: .rdata:const TiXmlText::`vftable'o
UNDEF:0000F640 ; protected: virtual void __thiscall TiXmlDeclaration::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F640                 extrn ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F640                                         ; DATA XREF: .rdata:0000E52Co
UNDEF:0000F644 ; protected: virtual wchar_t const * __thiscall TiXmlDeclaration::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F644                 extrn ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F644                                         ; DATA XREF: .rdata:0000E520o
UNDEF:0000F648 ; public: virtual void * __thiscall TiXmlDeclaration::`vector deleting destructor'(unsigned int)
UNDEF:0000F648                 extrn ??_ETiXmlDeclaration@@UAEPAXI@Z:near ; weak
UNDEF:0000F648                                         ; DATA XREF: .rdata:const TiXmlDeclaration::`vftable'o
UNDEF:0000F64C ; protected: virtual void __thiscall TiXmlUnknown::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F64C                 extrn ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F64C                                         ; DATA XREF: .rdata:0000E54Co
UNDEF:0000F650 ; protected: virtual wchar_t const * __thiscall TiXmlUnknown::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F650                 extrn ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F650                                         ; DATA XREF: .rdata:0000E540o
UNDEF:0000F654 ; public: virtual void * __thiscall TiXmlUnknown::`vector deleting destructor'(unsigned int)
UNDEF:0000F654                 extrn ??_ETiXmlUnknown@@UAEPAXI@Z:near ; weak
UNDEF:0000F654                                         ; DATA XREF: .rdata:const TiXmlUnknown::`vftable'o
UNDEF:0000F658 ; public: virtual wchar_t const * __thiscall TiXmlDocument::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000F658                 extrn ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F658                                         ; DATA XREF: .rdata:0000E560o
UNDEF:0000F65C ; void __thiscall TiXmlDocument::SetError(TiXmlDocument *__hidden this, int, const wchar_t *, struct TiXmlParsingData *)
UNDEF:0000F65C                 extrn ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000F65C                                         ; CODE XREF: TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)+C8p
UNDEF:0000F65C                                         ; TiXmlDocument::LoadFile(wchar_t const *)+1F8p
UNDEF:0000F660 ; protected: virtual void __thiscall TiXmlDocument::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000F660                 extrn ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000F660                                         ; DATA XREF: .rdata:0000E56Co
UNDEF:0000F664 ; public: virtual void * __thiscall TiXmlDocument::`vector deleting destructor'(unsigned int)
UNDEF:0000F664                 extrn ??_ETiXmlDocument@@UAEPAXI@Z:near ; weak
UNDEF:0000F664                                         ; DATA XREF: .rdata:const TiXmlDocument::`vftable'o
UNDEF:0000F668 ; public: virtual void * __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::`vector deleting destructor'(unsigned int)
UNDEF:0000F668                 extrn ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F668                                         ; CODE XREF: [thunk]:std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)+3j
UNDEF:0000F66C ; public: virtual void * __thiscall std::basic_stringbuf<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vector deleting destructor'(unsigned int)
UNDEF:0000F66C                 extrn ??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F66C                                         ; DATA XREF: .rdata:const std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vftable'o
UNDEF:0000F670 ; public: virtual void * __thiscall std::basic_ostringstream<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`vector deleting destructor'(unsigned int)
UNDEF:0000F670                 extrn ??_E?$basic_ostringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000F670                                         ; CODE XREF: [thunk]:std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)+3j
UNDEF:0000F674 ; __fastcall __security_check_cookie(x)
UNDEF:0000F674                 extrn @__security_check_cookie@4:near
UNDEF:0000F674                                         ; CODE XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+76p
UNDEF:0000F674                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25Ep ...
UNDEF:0000F678 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000F678                 extrn __CxxThrowException@8:near
UNDEF:0000F678                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+9Bp
UNDEF:0000F678                                         ; std::_Locinfo::_Locinfo(char const *)+AFp ...
UNDEF:0000F67C                 extrn ___CxxFrameHandler3:near
UNDEF:0000F67C                                         ; CODE XREF: __ehhandler$?PutString@TiXmlBase@@KAXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV?$basic_ostream@_WU?$char_traits@_W@std@@@3@@Z+20j
UNDEF:0000F67C                                         ; __ehhandler$??5@YAAAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@AAV01@AAVTiXmlNode@@@Z+20j ...
UNDEF:0000F680                 extrn __allmul:near     ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsgetn(wchar_t *,__int64)+8Fp
UNDEF:0000F680                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::xsputn(wchar_t const *,__int64)+8Fp
UNDEF:0000F684                 extrn __chkstk:near     ; CODE XREF: TiXmlDocument::LoadFile(wchar_t const *)+16p
UNDEF:0000F688 ; __int64 const std::_BADOFF
UNDEF:0000F688                 extrn ?_BADOFF@std@@3_JB:near
UNDEF:0000F688                                         ; DATA XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::seekoff(__int64,int,int)+7r
UNDEF:0000F688                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::seekoff(__int64,int,int)+Dr ...
UNDEF:0000F68C ; const type_info::`vftable'
UNDEF:0000F68C                 extrn ??_7type_info@@6B@:near
UNDEF:0000F68C                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:0000F68C                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:0000F690 ; private: static int std::locale::id::_Id_cnt
UNDEF:0000F690                 extrn ?_Id_cnt@id@locale@std@@0HA:near
UNDEF:0000F690                                         ; DATA XREF: std::locale::id::operator uint(void)+49r
UNDEF:0000F690                                         ; std::locale::id::operator uint(void)+52w ...
UNDEF:0000F694 ; public: static class std::locale::id std::ctype<wchar_t>::id
UNDEF:0000F694                 extrn ?id@?$ctype@_W@std@@2V0locale@2@A:near
UNDEF:0000F694                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+3Eo
UNDEF:0000F698 ; private: static struct TiXmlBase::Entity * TiXmlBase::entity
UNDEF:0000F698                 extrn ?entity@TiXmlBase@@0PAUEntity@1@A:near
UNDEF:0000F698                                         ; DATA XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+DCr
UNDEF:0000F698                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+EBr ...
UNDEF:0000F69C                 extrn ___security_cookie:near
UNDEF:0000F69C                                         ; DATA XREF: TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)+14r
UNDEF:0000F69C                                         ; TiXmlBase::PutString(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6r ...
UNDEF:0000F6A0                 extrn __fltused:near
UNDEF:0000F6A0
UNDEF:0000F6A0
UNDEF:0000F6A0                 end