.text$mn:00000000 ;
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : A5177B5C079B300A45D3B38B6DDBBD78
.text$mn:00000000 ; Input CRC32 : 6A582F48
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\IDAllocator.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; _DWORD __thiscall IDAllocator::IDAllocator(IDAllocator *this, int, int)
.text$mn:00000000                 public ??0IDAllocator@@QAE@HH@Z
.text$mn:00000000 ??0IDAllocator@@QAE@HH@Z proc near
.text$mn:00000000
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000 arg_0           = dword ptr  8
.text$mn:00000000 arg_4           = dword ptr  0Ch
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 push    ecx
.text$mn:00000004                 mov     [ebp+var_4], ecx
.text$mn:00000007                 mov     eax, [ebp+var_4]
.text$mn:0000000A                 mov     ecx, [ebp+arg_0]
.text$mn:0000000D                 mov     [eax], ecx
.text$mn:0000000F                 mov     edx, [ebp+var_4]
.text$mn:00000012                 mov     eax, [ebp+arg_0]
.text$mn:00000015                 mov     [edx+4], eax
.text$mn:00000018                 mov     ecx, [ebp+var_4]
.text$mn:0000001B                 mov     edx, [ebp+arg_4]
.text$mn:0000001E                 mov     [ecx+8], edx
.text$mn:00000021                 mov     eax, [ebp+var_4]
.text$mn:00000024                 mov     esp, ebp
.text$mn:00000026                 pop     ebp
.text$mn:00000027                 retn    8
.text$mn:00000027 ??0IDAllocator@@QAE@HH@Z endp
.text$mn:00000027
.text$mn:00000027 ; ---------------------------------------------------------------------------
.text$mn:0000002A                 align 10h
.text$mn:00000030
.text$mn:00000030 ; =============== S U B R O U T I N E =======================================
.text$mn:00000030
.text$mn:00000030 ; Attributes: bp-based frame
.text$mn:00000030
.text$mn:00000030 ; int __thiscall IDAllocator::allocate(IDAllocator *this, int)
.text$mn:00000030                 public ?allocate@IDAllocator@@QAEHH@Z
.text$mn:00000030 ?allocate@IDAllocator@@QAEHH@Z proc near
.text$mn:00000030
.text$mn:00000030 var_8           = dword ptr -8
.text$mn:00000030 var_4           = dword ptr -4
.text$mn:00000030 arg_0           = dword ptr  8
.text$mn:00000030
.text$mn:00000030                 push    ebp
.text$mn:00000031                 mov     ebp, esp
.text$mn:00000033                 sub     esp, 8
.text$mn:00000036                 mov     [ebp+var_4], ecx
.text$mn:00000039                 mov     [ebp+var_8], 0FFFFFFFFh
.text$mn:00000040                 mov     eax, [ebp+var_4]
.text$mn:00000043                 mov     ecx, [eax+4]
.text$mn:00000046                 add     ecx, [ebp+arg_0]
.text$mn:00000049                 mov     edx, [ebp+var_4]
.text$mn:0000004C                 cmp     ecx, [edx+8]
.text$mn:0000004F                 jg      short loc_6F
.text$mn:00000051                 cmp     [ebp+arg_0], 0
.text$mn:00000055                 jle     short loc_6F
.text$mn:00000057                 mov     eax, [ebp+var_4]
.text$mn:0000005A                 mov     ecx, [eax+4]
.text$mn:0000005D                 mov     [ebp+var_8], ecx
.text$mn:00000060                 mov     edx, [ebp+var_4]
.text$mn:00000063                 mov     eax, [edx+4]
.text$mn:00000066                 add     eax, [ebp+arg_0]
.text$mn:00000069                 mov     ecx, [ebp+var_4]
.text$mn:0000006C                 mov     [ecx+4], eax
.text$mn:0000006F
.text$mn:0000006F loc_6F:                                 ; CODE XREF: IDAllocator::allocate(int)+1Fj
.text$mn:0000006F                                         ; IDAllocator::allocate(int)+25j
.text$mn:0000006F                 mov     eax, [ebp+var_8]
.text$mn:00000072                 mov     esp, ebp
.text$mn:00000074                 pop     ebp
.text$mn:00000075                 retn    4
.text$mn:00000075 ?allocate@IDAllocator@@QAEHH@Z endp
.text$mn:00000075
.text$mn:00000075 _text$mn        ends
.text$mn:00000075
.text$mn:00000075
.text$mn:00000075                 end